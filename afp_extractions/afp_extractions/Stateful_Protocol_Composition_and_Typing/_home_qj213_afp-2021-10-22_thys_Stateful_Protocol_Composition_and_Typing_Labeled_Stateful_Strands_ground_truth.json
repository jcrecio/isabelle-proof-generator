{"file_name": "/home/qj213/afp-2021-10-22/thys/Stateful_Protocol_Composition_and_Typing/Labeled_Stateful_Strands.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Stateful_Protocol_Composition_and_Typing", "problem_names": ["lemma subst_lsst_nil[simp]: \"[] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = []\"", "lemma subst_lsst_cons: \"a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)#(A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"", "lemma subst_lsst_singleton: \"[(l,s)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = [(l,s \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)]\"", "lemma subst_lsst_append: \"A@B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)@(B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"", "lemma subst_lsst_append_inv:\n  assumes \"A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1@B2\"\n  shows \"\\<exists>A1 A2. A = A1@A2 \\<and> A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and> A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\"", "lemma subst_lsst_member[intro]: \"x \\<in> set A \\<Longrightarrow> x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<in> set (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"", "lemma subst_lsst_unlabel_cons: \"unlabel ((l,b)#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>)#(unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"", "lemma subst_lsst_unlabel: \"unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"", "lemma subst_lsst_unlabel_member[intro]:\n  assumes \"x \\<in> set (unlabel A)\"\n  shows \"x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\"", "lemma subst_lsst_prefix:\n  assumes \"prefix B (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  shows \"\\<exists>C. C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and> prefix C A\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_nil[simp]: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_Cons[simp]:\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,send\\<langle>t\\<rangle>)#A) = (l,receive\\<langle>t\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,receive\\<langle>t\\<rangle>)#A) = (l,send\\<langle>t\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<langle>a: t \\<doteq> s\\<rangle>)#A) = (l,\\<langle>a: t \\<doteq> s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,insert\\<langle>t,s\\<rangle>)#A) = (l,insert\\<langle>t,s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,delete\\<langle>t,s\\<rangle>)#A) = (l,delete\\<langle>t,s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<langle>a: t \\<in> s\\<rangle>)#A) = (l,\\<langle>a: t \\<in> s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)#A) = (l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append[simp]: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_unlabel: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) = unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_cons: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_append: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_snoc: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@[a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)@[dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>]\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_memberD:\n  assumes \"(l,a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  shows \"\\<exists>b. (l,b) \\<in> set A \\<and> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l,b) = (l,a)\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_inv:\n  assumes \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\"\n  shows \"l = k\"\n    and \"a = receive\\<langle>t\\<rangle> \\<Longrightarrow> b = send\\<langle>t\\<rangle>\"\n    and \"a = send\\<langle>t\\<rangle> \\<Longrightarrow> b = receive\\<langle>t\\<rangle>\"\n    and \"(\\<nexists>t. a = receive\\<langle>t\\<rangle> \\<or> a = send\\<langle>t\\<rangle>) \\<Longrightarrow> b = a\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_self_inverse: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = A\"", "lemma vars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma fv\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma bvars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma vars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = vars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma fv\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma bvars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_member:\n  assumes \"(l,x) \\<in> set A\"\n    and \"\\<not>is_Receive x\" \"\\<not>is_Send x\"\n  shows \"(l,x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_member:\n  assumes \"x \\<in> set (unlabel A)\"\n    and \"\\<not>is_Receive x\" \"\\<not>is_Send x\"\n  shows \"x \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff:\n  \"(l,send\\<langle>t\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,receive\\<langle>t\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,receive\\<langle>t\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,send\\<langle>t\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,insert\\<langle>t,s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,insert\\<langle>t,s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,delete\\<langle>t,s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,delete\\<langle>t,s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<langle>c: t \\<in> s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<langle>c: t \\<in> s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_steps_iff:\n  \"send\\<langle>t\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"receive\\<langle>t\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"insert\\<langle>t,s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> insert\\<langle>t,s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"delete\\<langle>t,s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> delete\\<langle>t,s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_list_all:\n  \"list_all is_Receive (unlabel A) \\<Longrightarrow> list_all is_Send (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Send (unlabel A) \\<Longrightarrow> list_all is_Receive (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Equality (unlabel A) \\<Longrightarrow> list_all is_Equality (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Insert (unlabel A) \\<Longrightarrow> list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Delete (unlabel A) \\<Longrightarrow> list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_InSet (unlabel A) \\<Longrightarrow> list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_NegChecks (unlabel A) \\<Longrightarrow> list_all is_NegChecks (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Assignment (unlabel A) \\<Longrightarrow> list_all is_Assignment (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Check (unlabel A) \\<Longrightarrow> list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Update (unlabel A) \\<Longrightarrow> list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_set_prefix_obtain:\n  assumes \"s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  shows \"\\<exists>l B s'. (l,s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l,s') \\<and> prefix (B@[(l,s')]) A\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_set_prefix_obtain_subst:\n  assumes \"s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)))\"\n  shows \"\\<exists>l B s'. (l,s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) \\<and> prefix ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)@[(l,s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>]) (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst_cons:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst:\n  assumes \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> = {}\"\n  shows \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst':\n  fixes t::\"('a,'b) term\" and \\<delta>::\"('a,'b) subst\"\n  assumes \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"\n  shows \"\\<exists>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S. \\<exists>X. set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and> t = s \\<cdot> rm_vars (set X) \\<delta>\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst'':\n  fixes t::\"('a,'b) term\" and \\<delta> \\<theta>::\"('a,'b) subst\"\n  assumes \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\"\n  shows \"\\<exists>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S. \\<exists>X. set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and> t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual_subst_cons:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = (trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>)) \\<union> (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_funs_term:\n  \"\\<Union>(funs_term ` (trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)))) = \\<Union>(funs_term ` (trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel S)))\"", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_append:\n  \"db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B) I D = db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B I (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A I D)\"", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"db'\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))) \\<I> D = db'\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) \\<I> D\"", "lemma labeled_list_insert_eq_cases:\n  \"d \\<notin> set (unlabel D) \\<Longrightarrow> List.insert d (unlabel D) = unlabel (List.insert (i,d) D)\"\n  \"(i,d) \\<in> set D \\<Longrightarrow> List.insert d (unlabel D) = unlabel (List.insert (i,d) D)\"", "lemma labeled_list_insert_eq_ex_cases:\n  \"List.insert d (unlabel D) = unlabel (List.insert (i,d) D) \\<or>\n  (\\<exists>j. (j,d) \\<in> set D \\<and> List.insert d (unlabel D) = unlabel (List.insert (j,d) D))\"", "lemma proj_subst: \"proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"", "lemma proj_set_subset[simp]:\n  \"set (proj n A) \\<subseteq> set A\"", "lemma proj_proj_set_subset[simp]:\n  \"set (proj n (proj m A)) \\<subseteq> set (proj n A)\"\n  \"set (proj n (proj m A)) \\<subseteq> set (proj m A)\"\n  \"set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl n A)\"\n  \"set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl m A)\"", "lemma proj_in_set_iff:\n  \"(ln i, d) \\<in> set (proj i D) \\<longleftrightarrow> (ln i, d) \\<in> set D\"\n  \"(\\<star>, d) \\<in> set (proj i D) \\<longleftrightarrow> (\\<star>, d) \\<in> set D\"", "lemma proj_list_insert:\n  \"proj i (List.insert (ln i,d) D) = List.insert (ln i,d) (proj i D)\"\n  \"proj i (List.insert (\\<star>,d) D) = List.insert (\\<star>,d) (proj i D)\"\n  \"i \\<noteq> j \\<Longrightarrow> proj i (List.insert (ln j,d) D) = proj i D\"", "lemma proj_filter: \"proj i [d\\<leftarrow>D. d \\<notin> set Di] = [d\\<leftarrow>proj i D. d \\<notin> set Di]\"", "lemma proj_list_Cons:\n  \"proj i ((ln i,d)#D) = (ln i,d)#proj i D\"\n  \"proj i ((\\<star>,d)#D) = (\\<star>,d)#proj i D\"\n  \"i \\<noteq> j \\<Longrightarrow> proj i ((ln j,d)#D) = proj i D\"", "lemma proj_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\"", "lemma proj_instance_ex:\n  assumes B: \"\\<forall>b \\<in> set B. \\<exists>a \\<in> set A. \\<exists>\\<delta>. b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and> P \\<delta>\"\n    and b: \"b \\<in> set (proj l B)\"\n  shows \"\\<exists>a \\<in> set (proj l A). \\<exists>\\<delta>. b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and> P \\<delta>\"", "lemma proj_dbproj:\n  \"dbproj (ln i) (proj i D) = dbproj (ln i) D\"\n  \"dbproj \\<star> (proj i D) = dbproj \\<star> D\"\n  \"i \\<noteq> j \\<Longrightarrow> dbproj (ln j) (proj i D) = []\"", "lemma dbproj_Cons:\n  \"dbproj i ((i,d)#D) = (i,d)#dbproj i D\"\n  \"i \\<noteq> j \\<Longrightarrow> dbproj j ((i,d)#D) = dbproj j D\"", "lemma dbproj_subset[simp]:\n  \"set (unlabel (dbproj i D)) \\<subseteq> set (unlabel D)\"", "lemma dbproj_subseq: \n  assumes \"Di \\<in> set (subseqs (dbproj k D))\"\n  shows \"dbproj k Di = Di\" (is ?A)\n  and \"i \\<noteq> k \\<Longrightarrow> dbproj i Di = []\" (is \"i \\<noteq> k \\<Longrightarrow> ?B\")", "lemma dbproj_subseq_subset:\n  assumes \"Di \\<in> set (subseqs (dbproj i D))\"\n  shows \"set Di \\<subseteq> set D\"", "lemma dbproj_subseq_in_subseqs:\n  assumes \"Di \\<in> set (subseqs (dbproj i D))\"\n  shows \"Di \\<in> set (subseqs D)\"", "lemma proj_subseq:\n  assumes \"Di \\<in> set (subseqs (dbproj (ln j) D))\" \"j \\<noteq> i\"\n  shows \"[d\\<leftarrow>proj i D. d \\<notin> set Di] = proj i D\"", "lemma unlabel_subseqsD:\n  assumes \"A \\<in> set (subseqs (unlabel B))\"\n  shows \"\\<exists>C \\<in> set (subseqs B). unlabel C = A\"", "lemma unlabel_filter_eq:\n  assumes \"\\<forall>(j, p) \\<in> set A \\<union> B. \\<forall>(k, q) \\<in> set A \\<union> B. p = q \\<longrightarrow> j = k\" (is \"?P (set A)\")\n  shows \"[d\\<leftarrow>unlabel A. d \\<notin> snd ` B] = unlabel [d\\<leftarrow>A. d \\<notin> B]\"", "lemma subseqs_mem_dbproj:\n  assumes \"Di \\<in> set (subseqs D)\" \"list_all (\\<lambda>d. fst d = i) Di\"\n  shows \"Di \\<in> set (subseqs (dbproj i D))\"", "lemma unlabel_subst: \"unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = unlabel (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"", "lemma subterms_subst_lsst:\n  assumes \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S). (\\<exists>f. \\<sigma> x = Fun f []) \\<or> (\\<exists>y. \\<sigma> x = Var y)\"\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<sigma> = {}\"\n  shows \"subterms\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = subterms\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<sigma>\"", "lemma subterms_subst_lsst_ik:\n  assumes \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S). (\\<exists>f. \\<sigma> x = Fun f []) \\<or> (\\<exists>y. \\<sigma> x = Var y)\"\n  shows \"subterms\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = subterms\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<sigma>\"", "lemma labeled_stateful_strand_subst_comp:\n  assumes \"range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = {}\"\n  shows \"S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<circ>\\<^sub>s \\<theta> = (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\"", "lemma sst_vars_proj_subset[simp]:\n  \"fv\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"bvars\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> bvars\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"vars\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> vars\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset[simp]:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\" (is ?A)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\" (is ?B)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m A)\" (is ?C)", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_prefix_subset:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\" (is ?A)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\" (is ?B)", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_suffix_subset:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel B) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n B) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>pD:\n  assumes p: \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\"\n  shows \"fst p = fst a\" (is ?P)\n    and \"is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)\" (is ?Q)", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_nil[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = {}\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_cons[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (x#S) = setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p x \\<union> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\"", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m A)\"", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_prefix_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\"", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_suffix_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel B) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n B) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A)) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_prefix_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B)\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A@B))\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_suffix_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B)\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A@B))\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_mono:\n  \"set M \\<subseteq> set N \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t M \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t N\"", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)\"", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l' A)\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst_cases[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    ((\\<lambda>(t,s). (l,t \\<cdot> rm_vars (set X) \\<delta>,s \\<cdot> rm_vars (set X) \\<delta>)) ` set F')\" (is \"?A = ?B\")", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst:\n  assumes \"set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) = (\\<lambda>p. (fst a,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst':\n  assumes \"set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) = (\\<lambda>(i,p). (i,p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst:\n  assumes \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (\\<lambda>p. (fst p,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\"", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_in_subst:\n  assumes p: \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\"\n  shows \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a. fst p = fst q \\<and> snd p = snd q \\<cdot>\\<^sub>p rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<delta>\"\n    (is \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a. ?P q\")", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_subst:\n  assumes \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"\n  shows \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. fst p = fst q \\<and> (\\<exists>X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\"\n    (is \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. ?P A q\")", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], "translations": [["", "lemma subst_lsst_nil[simp]: \"[] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = []", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_cons: \"a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)#(A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n    (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) #\n    (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_singleton: \"[(l,s)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = [(l,s \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(l, s)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n    [(l, s \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)]", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_append: \"A@B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)@(B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @ B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n    (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) @\n    (B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_append_inv:\n  assumes \"A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1@B2\"\n  shows \"\\<exists>A1 A2. A = A1@A2 \\<and> A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and> A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A1 A2.\n       A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "using assms"], ["proof (prove)\nusing this:\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 @ B2\n\ngoal (1 subgoal):\n 1. \\<exists>A1 A2.\n       A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "proof (induction A arbitrary: B1 B2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B1 B2.\n       [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n       B1 @ B2 \\<Longrightarrow>\n       \\<exists>A1 A2.\n          [] = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>a A B1 B2.\n       \\<lbrakk>\\<And>B1 B2.\n                   A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                   B1 @ B2 \\<Longrightarrow>\n                   \\<exists>A1 A2.\n                      A = A1 @ A2 \\<and>\n                      A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B1 \\<and>\n                      A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B2;\n        a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n        B1 @ B2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A1 A2.\n                            a # A = A1 @ A2 \\<and>\n                            A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B1 \\<and>\n                            A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B2", "case (Cons a A)"], ["proof (state)\nthis:\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n  ?B1.0 @ ?B2.0 \\<Longrightarrow>\n  \\<exists>A1 A2.\n     A = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = ?B1.0 \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = ?B2.0\n  a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 @ B2\n\ngoal (2 subgoals):\n 1. \\<And>B1 B2.\n       [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n       B1 @ B2 \\<Longrightarrow>\n       \\<exists>A1 A2.\n          [] = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>a A B1 B2.\n       \\<lbrakk>\\<And>B1 B2.\n                   A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                   B1 @ B2 \\<Longrightarrow>\n                   \\<exists>A1 A2.\n                      A = A1 @ A2 \\<and>\n                      A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B1 \\<and>\n                      A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B2;\n        a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n        B1 @ B2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A1 A2.\n                            a # A = A1 @ A2 \\<and>\n                            A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B1 \\<and>\n                            A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B2", "note prems = Cons.prems"], ["proof (state)\nthis:\n  a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 @ B2\n\ngoal (2 subgoals):\n 1. \\<And>B1 B2.\n       [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n       B1 @ B2 \\<Longrightarrow>\n       \\<exists>A1 A2.\n          [] = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>a A B1 B2.\n       \\<lbrakk>\\<And>B1 B2.\n                   A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                   B1 @ B2 \\<Longrightarrow>\n                   \\<exists>A1 A2.\n                      A = A1 @ A2 \\<and>\n                      A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B1 \\<and>\n                      A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B2;\n        a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n        B1 @ B2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A1 A2.\n                            a # A = A1 @ A2 \\<and>\n                            A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B1 \\<and>\n                            A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B2", "note IH = Cons.IH"], ["proof (state)\nthis:\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n  ?B1.0 @ ?B2.0 \\<Longrightarrow>\n  \\<exists>A1 A2.\n     A = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = ?B1.0 \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = ?B2.0\n\ngoal (2 subgoals):\n 1. \\<And>B1 B2.\n       [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n       B1 @ B2 \\<Longrightarrow>\n       \\<exists>A1 A2.\n          [] = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>a A B1 B2.\n       \\<lbrakk>\\<And>B1 B2.\n                   A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                   B1 @ B2 \\<Longrightarrow>\n                   \\<exists>A1 A2.\n                      A = A1 @ A2 \\<and>\n                      A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B1 \\<and>\n                      A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n                      B2;\n        a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n        B1 @ B2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A1 A2.\n                            a # A = A1 @ A2 \\<and>\n                            A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B1 \\<and>\n                            A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta> =\n                            B2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "proof (cases B1)"], ["proof (state)\ngoal (2 subgoals):\n 1. B1 = [] \\<Longrightarrow>\n    \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "case Nil"], ["proof (state)\nthis:\n  B1 = []\n\ngoal (2 subgoals):\n 1. B1 = [] \\<Longrightarrow>\n    \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "then"], ["proof (chain)\npicking this:\n  B1 = []", "obtain b B3 where \"B2 = b#B3\" \"a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\" \"A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3\""], ["proof (prove)\nusing this:\n  B1 = []\n\ngoal (1 subgoal):\n 1. (\\<And>b B3.\n        \\<lbrakk>B2 = b # B3;\n         a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b;\n         A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prems subst_lsst_cons"], ["proof (prove)\nusing this:\n  B1 = []\n  a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 @ B2\n  ?a # ?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta> =\n  (?a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<delta>) #\n  (?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>b B3.\n        \\<lbrakk>B2 = b # B3;\n         a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b;\n         A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  B2 = b # B3\n  a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3\n\ngoal (2 subgoals):\n 1. B1 = [] \\<Longrightarrow>\n    \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n 2. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "thus ?thesis"], ["proof (prove)\nusing this:\n  B2 = b # B3\n  a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3\n\ngoal (1 subgoal):\n 1. \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "by (simp add: Nil subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  \\<exists>A1 A2.\n     a # A = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "case (Cons b B3)"], ["proof (state)\nthis:\n  B1 = b # B3\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "hence \"a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\" \"A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3@B2\""], ["proof (prove)\nusing this:\n  B1 = b # B3\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b &&&\n    A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3 @ B2", "using prems"], ["proof (prove)\nusing this:\n  B1 = b # B3\n  a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 @ B2\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b &&&\n    A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3 @ B2", "by (simp_all add: subst_lsst_cons)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3 @ B2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       B1 = aa # list \\<Longrightarrow>\n       \\<exists>A1 A2.\n          a # A = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> = b\n  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B3 @ B2\n\ngoal (1 subgoal):\n 1. \\<exists>A1 A2.\n       a # A = A1 @ A2 \\<and>\n       A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n       A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "by (metis Cons_eq_appendI Cons IH subst_lsst_cons)"], ["proof (state)\nthis:\n  \\<exists>A1 A2.\n     a # A = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A1 A2.\n     a # A = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2\n\ngoal (1 subgoal):\n 1. \\<And>B1 B2.\n       [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n       B1 @ B2 \\<Longrightarrow>\n       \\<exists>A1 A2.\n          [] = A1 @ A2 \\<and>\n          A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B1 \\<and>\n          A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = B2", "qed (metis append_is_Nil_conv subst_lsst_nil)"], ["", "lemma subst_lsst_member[intro]: \"x \\<in> set A \\<Longrightarrow> x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<in> set (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set A \\<Longrightarrow>\n    x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)", "by (metis image_eqI set_map subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_unlabel_cons: \"unlabel ((l,b)#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>)#(unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel ((l, b) # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n    unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["", "lemma subst_lsst_unlabel: \"unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. unlabel ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel [] \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<Longrightarrow>\n       unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "case (Cons a A)"], ["proof (state)\nthis:\n  unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (2 subgoals):\n 1. unlabel ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel [] \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<Longrightarrow>\n       unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "then"], ["proof (chain)\npicking this:\n  unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "obtain l b where \"a = (l,b)\""], ["proof (prove)\nusing this:\n  unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. unlabel ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel [] \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<Longrightarrow>\n       unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  unlabel A \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "by (simp add: subst_apply_labeled_stateful_strand_def subst_apply_stateful_strand_def)"], ["proof (state)\nthis:\n  unlabel (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  unlabel (a # A) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. unlabel ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    unlabel [] \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "qed simp"], ["", "lemma subst_lsst_unlabel_member[intro]:\n  assumes \"x \\<in> set (unlabel A)\"\n  shows \"x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "obtain l where x: \"(l,x) \\<in> set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l. (l, x) \\<in> set A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel A)\n\ngoal (1 subgoal):\n 1. (\\<And>l. (l, x) \\<in> set A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  x \\<in> set (map snd A)\n\ngoal (1 subgoal):\n 1. (\\<And>l. (l, x) \\<in> set A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  (l, x) \\<in> set A\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (l, x) \\<in> set A\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "using subst_lsst_member"], ["proof (prove)\nusing this:\n  (l, x) \\<in> set A\n  ?x \\<in> set ?A \\<Longrightarrow>\n  ?x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<delta>\n  \\<in> set (?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>)\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n    \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "by (metis unlabel_def in_set_zipE subst_apply_labeled_stateful_strand_step.simps zip_map_fst_snd)"], ["proof (state)\nthis:\n  x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n  \\<in> set (unlabel (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subst_lsst_prefix:\n  assumes \"prefix B (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  shows \"\\<exists>C. C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and> prefix C A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C A", "using assms"], ["proof (prove)\nusing this:\n  prefix B (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C A", "proof (induction A rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. prefix B\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n    \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C []\n 2. \\<And>x xs.\n       \\<lbrakk>prefix B\n                 (xs \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<theta>) \\<Longrightarrow>\n                \\<exists>C.\n                   C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                   B \\<and>\n                   prefix C xs;\n        prefix B\n         (xs @ [x] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          \\<theta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<theta> =\n                            B \\<and>\n                            prefix C (xs @ [x])", "case (snoc a A)"], ["proof (state)\nthis:\n  prefix B\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     prefix C A\n  prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (2 subgoals):\n 1. prefix B\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n    \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C []\n 2. \\<And>x xs.\n       \\<lbrakk>prefix B\n                 (xs \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<theta>) \\<Longrightarrow>\n                \\<exists>C.\n                   C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                   B \\<and>\n                   prefix C xs;\n        prefix B\n         (xs @ [x] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          \\<theta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<theta> =\n                            B \\<and>\n                            prefix C (xs @ [x])", "thus ?case"], ["proof (prove)\nusing this:\n  prefix B\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     prefix C A\n  prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C (A @ [a])", "proof (cases \"B = A@[a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>prefix B\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>) \\<Longrightarrow>\n             \\<exists>C.\n                C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                B \\<and>\n                prefix C A;\n     prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>);\n     B = A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta> =\n                         B \\<and>\n                         prefix C (A @ [a])\n 2. \\<lbrakk>prefix B\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>) \\<Longrightarrow>\n             \\<exists>C.\n                C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                B \\<and>\n                prefix C A;\n     prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>);\n     B \\<noteq>\n     A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta> =\n                         B \\<and>\n                         prefix C (A @ [a])", "case False"], ["proof (state)\nthis:\n  B \\<noteq> A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prefix B\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>) \\<Longrightarrow>\n             \\<exists>C.\n                C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                B \\<and>\n                prefix C A;\n     prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>);\n     B = A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta> =\n                         B \\<and>\n                         prefix C (A @ [a])\n 2. \\<lbrakk>prefix B\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>) \\<Longrightarrow>\n             \\<exists>C.\n                C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                B \\<and>\n                prefix C A;\n     prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>);\n     B \\<noteq>\n     A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta> =\n                         B \\<and>\n                         prefix C (A @ [a])", "thus ?thesis"], ["proof (prove)\nusing this:\n  B \\<noteq> A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C (A @ [a])", "using snoc"], ["proof (prove)\nusing this:\n  B \\<noteq> A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\n  prefix B\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     prefix C A\n  prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C (A @ [a])", "by (auto simp add: subst_lsst_append[of A] subst_lsst_cons)"], ["proof (state)\nthis:\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     prefix C (A @ [a])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prefix B\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>) \\<Longrightarrow>\n             \\<exists>C.\n                C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n                B \\<and>\n                prefix C A;\n     prefix B (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>);\n     B = A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta> =\n                         B \\<and>\n                         prefix C (A @ [a])", "qed auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     prefix C (A @ [a])\n\ngoal (1 subgoal):\n 1. prefix B\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<Longrightarrow>\n    \\<exists>C.\n       C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n       prefix C []", "qed simp"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_nil[simp]: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []", "by (simp add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_Cons[simp]:\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,send\\<langle>t\\<rangle>)#A) = (l,receive\\<langle>t\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,receive\\<langle>t\\<rangle>)#A) = (l,send\\<langle>t\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<langle>a: t \\<doteq> s\\<rangle>)#A) = (l,\\<langle>a: t \\<doteq> s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,insert\\<langle>t,s\\<rangle>)#A) = (l,insert\\<langle>t,s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,delete\\<langle>t,s\\<rangle>)#A) = (l,delete\\<langle>t,s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<langle>a: t \\<in> s\\<rangle>)#A) = (l,\\<langle>a: t \\<in> s\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)#A) = (l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      ((l, send\\<langle>t\\<rangle>) # A) =\n     (l, receive\\<langle>t\\<rangle>) #\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      ((l, receive\\<langle>t\\<rangle>) # A) =\n     (l, send\\<langle>t\\<rangle>) #\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      ((l, \\<langle>a: t \\<doteq> s\\<rangle>) # A) =\n     (l, \\<langle>a: t \\<doteq> s\\<rangle>) #\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) &&&\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      ((l, insert\\<langle>t,s\\<rangle>) # A) =\n     (l, insert\\<langle>t,s\\<rangle>) #\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      ((l, delete\\<langle>t,s\\<rangle>) # A) =\n     (l, delete\\<langle>t,s\\<rangle>) #\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ((l, \\<langle>a: t \\<in> s\\<rangle>) # A) =\n    (l, \\<langle>a: t \\<in> s\\<rangle>) #\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) #\n      A) =\n    (l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) #\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "by (simp_all add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append[simp]: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B", "by (simp add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>", "obtain l x  where s: \"s = (l,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l x. s = (l, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>", "by (cases x) (auto simp add: subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "proof (induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>\n 2. \\<And>a S.\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta> \\<Longrightarrow>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta>", "case (Cons s S)"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (2 subgoals):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>\n 2. \\<And>a S.\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta> \\<Longrightarrow>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta>", "thus ?case"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (s # S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "using Cons dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst[of s \\<delta>]"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   s \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (s # S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "by (simp add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (s # S) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "qed (simp add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def subst_apply_labeled_stateful_strand_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_unlabel: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) = unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) =\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "by (metis dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst subst_lsst_unlabel)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_cons: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>)#(dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     \\<sigma>) #\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)", "by (metis dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst list.simps(9) dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def subst_apply_labeled_stateful_strand_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_append: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @ B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<sigma>", "by (metis (no_types) dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_snoc: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@[a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) = (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)@[dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @ [a] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<sigma>) @\n    [dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     \\<sigma>]", "by (metis dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_cons list.map(1) map_append\n          subst_apply_labeled_stateful_strand_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_memberD:\n  assumes \"(l,a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  shows \"\\<exists>b. (l,b) \\<in> set A \\<and> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l,b) = (l,a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set A \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "using assms"], ["proof (prove)\nusing this:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set A \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set [] \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n 2. \\<And>aa A.\n       \\<lbrakk>(l, a)\n                \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            A) \\<Longrightarrow>\n                \\<exists>b.\n                   (l, b) \\<in> set A \\<and>\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) =\n                   (l, a);\n        (l, a)\n        \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (aa # A))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (l, b) \\<in> set (aa # A) \\<and>\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, b) =\n                            (l, a)", "case (Cons c A)"], ["proof (state)\nthis:\n  (l, a)\n  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<Longrightarrow>\n  \\<exists>b.\n     (l, b) \\<in> set A \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (c # A))\n\ngoal (2 subgoals):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set [] \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n 2. \\<And>aa A.\n       \\<lbrakk>(l, a)\n                \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            A) \\<Longrightarrow>\n                \\<exists>b.\n                   (l, b) \\<in> set A \\<and>\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) =\n                   (l, a);\n        (l, a)\n        \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (aa # A))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (l, b) \\<in> set (aa # A) \\<and>\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, b) =\n                            (l, a)", "hence \"(l,a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<or> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l,a)\""], ["proof (prove)\nusing this:\n  (l, a)\n  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<Longrightarrow>\n  \\<exists>b.\n     (l, b) \\<in> set A \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (c # A))\n\ngoal (1 subgoal):\n 1. (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<or>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)", "unfolding dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  (l, a)\n  \\<in> set (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n              A) \\<Longrightarrow>\n  \\<exists>b.\n     (l, b) \\<in> set A \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n  (l, a)\n  \\<in> set (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (c # A))\n\ngoal (1 subgoal):\n 1. (l, a)\n    \\<in> set (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p A) \\<or>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)", "by force"], ["proof (state)\nthis:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<or>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)\n\ngoal (2 subgoals):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set [] \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n 2. \\<And>aa A.\n       \\<lbrakk>(l, a)\n                \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            A) \\<Longrightarrow>\n                \\<exists>b.\n                   (l, b) \\<in> set A \\<and>\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) =\n                   (l, a);\n        (l, a)\n        \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (aa # A))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (l, b) \\<in> set (aa # A) \\<and>\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, b) =\n                            (l, a)", "thus ?case"], ["proof (prove)\nusing this:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<or>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n 2. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "assume \"(l,a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\""], ["proof (state)\nthis:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n\ngoal (2 subgoals):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n 2. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "thus ?case"], ["proof (prove)\nusing this:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "using Cons.IH"], ["proof (prove)\nusing this:\n  (l, a) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n  (l, a)\n  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) \\<Longrightarrow>\n  \\<exists>b.\n     (l, b) \\<in> set A \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     (l, b) \\<in> set (c # A) \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "assume a: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l,a)\""], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "obtain i b where b: \"c = (i,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i b. c = (i, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  c = (i, b)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c =\n    (l, a) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "thus ?case"], ["proof (prove)\nusing this:\n  c = (i, b)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "using a"], ["proof (prove)\nusing this:\n  c = (i, b)\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p c = (l, a)\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (l, b) \\<in> set (c # A) \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "by (cases b) auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     (l, b) \\<in> set (c # A) \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b.\n     (l, b) \\<in> set (c # A) \\<and>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)\n\ngoal (1 subgoal):\n 1. (l, a)\n    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) \\<Longrightarrow>\n    \\<exists>b.\n       (l, b) \\<in> set [] \\<and>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, b) = (l, a)", "qed simp"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_inv:\n  assumes \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\"\n  shows \"l = k\"\n    and \"a = receive\\<langle>t\\<rangle> \\<Longrightarrow> b = send\\<langle>t\\<rangle>\"\n    and \"a = send\\<langle>t\\<rangle> \\<Longrightarrow> b = receive\\<langle>t\\<rangle>\"\n    and \"(\\<nexists>t. a = receive\\<langle>t\\<rangle> \\<or> a = send\\<langle>t\\<rangle>) \\<Longrightarrow> b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l = k &&&\n     (a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n      b = send\\<langle>t\\<rangle>)) &&&\n    (a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     b = receive\\<langle>t\\<rangle>) &&&\n    (\\<nexists>t.\n        a = receive\\<langle>t\\<rangle> \\<or>\n        a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     b = a)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. l = k\n 2. a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = send\\<langle>t\\<rangle>\n 3. a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = receive\\<langle>t\\<rangle>\n 4. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "show \"l = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = k", "using assms"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\n\ngoal (1 subgoal):\n 1. l = k", "by (cases a) auto"], ["proof (state)\nthis:\n  l = k\n\ngoal (3 subgoals):\n 1. a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = send\\<langle>t\\<rangle>\n 2. a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = receive\\<langle>t\\<rangle>\n 3. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "show \"a = receive\\<langle>t\\<rangle> \\<Longrightarrow> b = send\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = send\\<langle>t\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\n\ngoal (1 subgoal):\n 1. a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = send\\<langle>t\\<rangle>", "by (cases a) auto"], ["proof (state)\nthis:\n  a = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n  b = send\\<langle>t\\<rangle>\n\ngoal (2 subgoals):\n 1. a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = receive\\<langle>t\\<rangle>\n 2. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "show \"a = send\\<langle>t\\<rangle> \\<Longrightarrow> b = receive\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = receive\\<langle>t\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\n\ngoal (1 subgoal):\n 1. a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = receive\\<langle>t\\<rangle>", "by (cases a) auto"], ["proof (state)\nthis:\n  a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n  b = receive\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "show \"(\\<nexists>t. a = receive\\<langle>t\\<rangle> \\<or> a = send\\<langle>t\\<rangle>) \\<Longrightarrow> b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "using assms"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, a) = (k, b)\n\ngoal (1 subgoal):\n 1. \\<nexists>t.\n       a = receive\\<langle>t\\<rangle> \\<or>\n       a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    b = a", "by (cases a) auto"], ["proof (state)\nthis:\n  \\<nexists>t.\n     a = receive\\<langle>t\\<rangle> \\<or>\n     a = send\\<langle>t\\<rangle> \\<Longrightarrow>\n  b = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_self_inverse: \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    []\n 2. \\<And>a A.\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       A \\<Longrightarrow>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       a # A", "case (Cons a A)"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  A\n\ngoal (2 subgoals):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    []\n 2. \\<And>a A.\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       A \\<Longrightarrow>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       a # A", "obtain l b where \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    []\n 2. \\<And>a A.\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       A \\<Longrightarrow>\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       a # A", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    a # A", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  A\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    a # A", "by (cases b) auto"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  a # A\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    []", "qed simp"], ["", "lemma vars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons.IH"], ["proof (prove)\nusing this:\n  a = (l, b)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by (cases b) auto"], ["proof (state)\nthis:\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "lemma fv\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons.IH"], ["proof (prove)\nusing this:\n  a = (l, b)\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by (cases b) auto"], ["proof (state)\nthis:\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "lemma bvars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons.IH"], ["proof (prove)\nusing this:\n  a = (l, b)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by (cases b) simp+"], ["proof (state)\nthis:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "lemma vars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = vars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l, b) # A) =\n    vars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "by (metis unlabel_Cons(1) vars\\<^sub>s\\<^sub>s\\<^sub>t_Cons)"], ["", "lemma fv\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l, b) # A) =\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "by (metis unlabel_Cons(1) fv\\<^sub>s\\<^sub>s\\<^sub>t_Cons)"], ["", "lemma bvars\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_Cons: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A) = set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l, b) # A) =\n    set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "by (metis unlabel_Cons(1) bvars\\<^sub>s\\<^sub>s\\<^sub>t_Cons)"], ["", "lemma bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst: \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "by (metis subst_lsst_unlabel bvars\\<^sub>s\\<^sub>s\\<^sub>t_subst)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_member:\n  assumes \"(l,x) \\<in> set A\"\n    and \"\\<not>is_Receive x\" \"\\<not>is_Send x\"\n  shows \"(l,x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)", "using assms"], ["proof (prove)\nusing this:\n  (l, x) \\<in> set A\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(l, x) \\<in> set []; \\<not> stateful_strand_step.is_Receive x;\n     \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n    \\<Longrightarrow> (l, x)\n                      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>(l, x) \\<in> set A;\n                 \\<not> stateful_strand_step.is_Receive x;\n                 \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n                \\<Longrightarrow> (l, x)\n                                  \\<in> set\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A);\n        (l, x) \\<in> set (a # A); \\<not> stateful_strand_step.is_Receive x;\n        \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n       \\<Longrightarrow> (l, x)\n                         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                     (a # A))", "case (Cons a A)"], ["proof (state)\nthis:\n  \\<lbrakk>(l, x) \\<in> set A; \\<not> stateful_strand_step.is_Receive x;\n   \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n  \\<Longrightarrow> (l, x)\n                    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n  (l, x) \\<in> set (a # A)\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(l, x) \\<in> set []; \\<not> stateful_strand_step.is_Receive x;\n     \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n    \\<Longrightarrow> (l, x)\n                      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>(l, x) \\<in> set A;\n                 \\<not> stateful_strand_step.is_Receive x;\n                 \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n                \\<Longrightarrow> (l, x)\n                                  \\<in> set\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A);\n        (l, x) \\<in> set (a # A); \\<not> stateful_strand_step.is_Receive x;\n        \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n       \\<Longrightarrow> (l, x)\n                         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                     (a # A))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(l, x) \\<in> set A; \\<not> stateful_strand_step.is_Receive x;\n   \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n  \\<Longrightarrow> (l, x)\n                    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n  (l, x) \\<in> set (a # A)\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A))", "using assms(2,3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(l, x) \\<in> set A; \\<not> stateful_strand_step.is_Receive x;\n   \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n  \\<Longrightarrow> (l, x)\n                    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n  (l, x) \\<in> set (a # A)\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A))", "by (cases x) (auto simp add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  (l, x) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(l, x) \\<in> set []; \\<not> stateful_strand_step.is_Receive x;\n     \\<not> stateful_strand_step.is_Send x\\<rbrakk>\n    \\<Longrightarrow> (l, x)\n                      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [])", "qed simp"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_member:\n  assumes \"x \\<in> set (unlabel A)\"\n    and \"\\<not>is_Receive x\" \"\\<not>is_Send x\"\n  shows \"x \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))", "using assms dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_member[of _ _ A]"], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel A)\n  \\<not> stateful_strand_step.is_Receive x\n  \\<not> stateful_strand_step.is_Send x\n  \\<lbrakk>(?l, ?x) \\<in> set A; \\<not> stateful_strand_step.is_Receive ?x;\n   \\<not> stateful_strand_step.is_Send ?x\\<rbrakk>\n  \\<Longrightarrow> (?l, ?x)\n                    \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\n\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))", "by (meson unlabel_in unlabel_mem_has_label)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff:\n  \"(l,send\\<langle>t\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,receive\\<langle>t\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,receive\\<langle>t\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,send\\<langle>t\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,insert\\<langle>t,s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,insert\\<langle>t,s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,delete\\<langle>t,s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,delete\\<langle>t,s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<langle>c: t \\<in> s\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<langle>c: t \\<in> s\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\"\n  \"(l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) \\<in> set A \\<longleftrightarrow> (l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>) \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n     ((l, receive\\<langle>t\\<rangle>)\n      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) &&&\n     ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n     ((l, send\\<langle>t\\<rangle>)\n      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) &&&\n     ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n     ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    (((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n     ((l, insert\\<langle>t,s\\<rangle>)\n      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) &&&\n     ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n     ((l, delete\\<langle>t,s\\<rangle>)\n      \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) &&&\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set A) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))", "proof (induction A)"], ["proof (state)\ngoal (14 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n                         ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 14 subgoals...", "case (Cons a A)"], ["proof (state)\nthis:\n  ((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n  ((l, receive\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n  ((l, send\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n  ((l, insert\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n  ((l, delete\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n  ((l, \\<langle>c: t \\<in> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set A) =\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (14 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n                         ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 14 subgoals...", "obtain j b where a: \"a = (j,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j b. a = (j, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (j, b)\n\ngoal (14 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n                         ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 14 subgoals...", "{"], ["proof (state)\nthis:\n  a = (j, b)\n\ngoal (14 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n                         ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 14 subgoals...", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (14 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n                         ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(1) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, receive\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 13 subgoals...", "}"], ["proof (state)\nthis:\n  ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, receive\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 13 subgoals...", "{"], ["proof (state)\nthis:\n  ((l, send\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, receive\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 13 subgoals...", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (13 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, receive\\<langle>t\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, send\\<langle>t\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, insert\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, receive\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(2) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, receive\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, send\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 12 subgoals...", "}"], ["proof (state)\nthis:\n  ((l, receive\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, send\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  ((l, receive\\<langle>t\\<rangle>) \\<in> set (a # A)) =\n  ((l, send\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 12 subgoals...", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, delete\\<langle>t,s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (a # A)) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(3) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 11 subgoals...", "}"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 11 subgoals...", "{"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 11 subgoals...", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, insert\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(4) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, insert\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, insert\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (10 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))", "}"], ["proof (state)\nthis:\n  ((l, insert\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, insert\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (10 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))", "{"], ["proof (state)\nthis:\n  ((l, insert\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, insert\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (10 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))", "case 5"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, delete\\<langle>t,s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 10. \\<And>a A.\n        \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                 ((l, receive\\<langle>t\\<rangle>)\n                  \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n         ((l, send\\<langle>t\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, insert\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n         ((l, delete\\<langle>t,s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set A) =\n         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n        \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (a # A)) =\n                          ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                           \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n (a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(5) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, delete\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, delete\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (9 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "}"], ["proof (state)\nthis:\n  ((l, delete\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, delete\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (9 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "{"], ["proof (state)\nthis:\n  ((l, delete\\<langle>t,s\\<rangle>) \\<in> set (a # A)) =\n  ((l, delete\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (9 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "case 6"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<langle>c: t \\<in> s\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))\n 9. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set (a # A)) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(6) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<in> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (8 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "}"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<in> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (8 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "{"], ["proof (state)\nthis:\n  ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set (a # A)) =\n  ((l, \\<langle>c: t \\<in> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (8 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "case 7"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. \\<And>a A.\n       \\<lbrakk>((l, send\\<langle>t\\<rangle>) \\<in> set A) =\n                ((l, receive\\<langle>t\\<rangle>)\n                 \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n        ((l, send\\<langle>t\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, insert\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n        ((l, delete\\<langle>t,s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n        ((l, \\<langle>c: t \\<in> s\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A));\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set A) =\n        ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n         \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n       \\<Longrightarrow> ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (a # A)) =\n                         ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n                          \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n(a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (a # A)) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) (simp_all add: Cons.IH(7) a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (a # A)) =\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (7 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))", "}"], ["proof (state)\nthis:\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (a # A)) =\n  ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (7 subgoals):\n 1. ((l, send\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, receive\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. ((l, receive\\<langle>t\\<rangle>) \\<in> set []) =\n    ((l, send\\<langle>t\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. ((l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<doteq> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. ((l, insert\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, insert\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. ((l, delete\\<langle>t,s\\<rangle>) \\<in> set []) =\n    ((l, delete\\<langle>t,s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. ((l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set []) =\n    ((l, \\<langle>c: t \\<in> s\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set []) =\n    ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n     \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))", "qed (simp_all add: dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_steps_iff:\n  \"send\\<langle>t\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"receive\\<langle>t\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"insert\\<langle>t,s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> insert\\<langle>t,s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"delete\\<langle>t,s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> delete\\<langle>t,s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<in> set (unlabel A) \\<longleftrightarrow> \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((send\\<langle>t\\<rangle> \\<in> set (unlabel A)) =\n     (receive\\<langle>t\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (receive\\<langle>t\\<rangle> \\<in> set (unlabel A)) =\n     (send\\<langle>t\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (\\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel A)) =\n     (\\<langle>c: t \\<doteq> s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    ((insert\\<langle>t,s\\<rangle> \\<in> set (unlabel A)) =\n     (insert\\<langle>t,s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (delete\\<langle>t,s\\<rangle> \\<in> set (unlabel A)) =\n     (delete\\<langle>t,s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    (\\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel A)) =\n    (\\<langle>c: t \\<in> s\\<rangle>\n     \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    (\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n     \\<in> set (unlabel A)) =\n    (\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n     \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff(1,2)[of _ t A]\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff(3,6)[of _ c t s A]\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff(4,5)[of _ t s A]\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_steps_iff(7)[of _ X F G A]"], ["proof (prove)\nusing this:\n  ((?l, send\\<langle>t\\<rangle>) \\<in> set A) =\n  ((?l, receive\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, receive\\<langle>t\\<rangle>) \\<in> set A) =\n  ((?l, send\\<langle>t\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, \\<langle>c: t \\<doteq> s\\<rangle>) \\<in> set A) =\n  ((?l, \\<langle>c: t \\<doteq> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, \\<langle>c: t \\<in> s\\<rangle>) \\<in> set A) =\n  ((?l, \\<langle>c: t \\<in> s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, insert\\<langle>t,s\\<rangle>) \\<in> set A) =\n  ((?l, insert\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, delete\\<langle>t,s\\<rangle>) \\<in> set A) =\n  ((?l, delete\\<langle>t,s\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  ((?l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set A) =\n  ((?l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n   \\<in> set (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (1 subgoal):\n 1. ((send\\<langle>t\\<rangle> \\<in> set (unlabel A)) =\n     (receive\\<langle>t\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (receive\\<langle>t\\<rangle> \\<in> set (unlabel A)) =\n     (send\\<langle>t\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (\\<langle>c: t \\<doteq> s\\<rangle> \\<in> set (unlabel A)) =\n     (\\<langle>c: t \\<doteq> s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    ((insert\\<langle>t,s\\<rangle> \\<in> set (unlabel A)) =\n     (insert\\<langle>t,s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (delete\\<langle>t,s\\<rangle> \\<in> set (unlabel A)) =\n     (delete\\<langle>t,s\\<rangle>\n      \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    (\\<langle>c: t \\<in> s\\<rangle> \\<in> set (unlabel A)) =\n    (\\<langle>c: t \\<in> s\\<rangle>\n     \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    (\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n     \\<in> set (unlabel A)) =\n    (\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n     \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))", "by (meson unlabel_in unlabel_mem_has_label)+"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_list_all:\n  \"list_all is_Receive (unlabel A) \\<Longrightarrow> list_all is_Send (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Send (unlabel A) \\<Longrightarrow> list_all is_Receive (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Equality (unlabel A) \\<Longrightarrow> list_all is_Equality (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Insert (unlabel A) \\<Longrightarrow> list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Delete (unlabel A) \\<Longrightarrow> list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_InSet (unlabel A) \\<Longrightarrow> list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_NegChecks (unlabel A) \\<Longrightarrow> list_all is_NegChecks (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Assignment (unlabel A) \\<Longrightarrow> list_all is_Assignment (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Check (unlabel A) \\<Longrightarrow> list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  \"list_all is_Update (unlabel A) \\<Longrightarrow> list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((list_all stateful_strand_step.is_Receive\n        (unlabel A) \\<Longrightarrow>\n       list_all stateful_strand_step.is_Send\n        (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n      (list_all stateful_strand_step.is_Send (unlabel A) \\<Longrightarrow>\n       list_all stateful_strand_step.is_Receive\n        (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n     (list_all stateful_strand_step.is_Equality\n       (unlabel A) \\<Longrightarrow>\n      list_all stateful_strand_step.is_Equality\n       (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (list_all is_Insert (unlabel A) \\<Longrightarrow>\n      list_all is_Insert\n       (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (list_all is_Delete (unlabel A) \\<Longrightarrow>\n      list_all is_Delete\n       (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    ((list_all is_InSet (unlabel A) \\<Longrightarrow>\n      list_all is_InSet\n       (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n     (list_all is_NegChecks (unlabel A) \\<Longrightarrow>\n      list_all is_NegChecks\n       (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))) &&&\n    (list_all is_Assignment (unlabel A) \\<Longrightarrow>\n     list_all is_Assignment\n      (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    (list_all is_Check (unlabel A) \\<Longrightarrow>\n     list_all is_Check\n      (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))) &&&\n    (list_all is_Update (unlabel A) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)))", "proof (induct A)"], ["proof (state)\ngoal (20 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 20 subgoals...", "case (Cons a A)"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Send\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all stateful_strand_step.is_Send (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Receive\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all stateful_strand_step.is_Equality (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Equality\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_Insert (unlabel A) \\<Longrightarrow>\n  list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_Delete (unlabel A) \\<Longrightarrow>\n  list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_InSet (unlabel A) \\<Longrightarrow>\n  list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_NegChecks (unlabel A) \\<Longrightarrow>\n  list_all is_NegChecks (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_Assignment (unlabel A) \\<Longrightarrow>\n  list_all is_Assignment (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_Check (unlabel A) \\<Longrightarrow>\n  list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  list_all is_Update (unlabel A) \\<Longrightarrow>\n  list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (20 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 20 subgoals...", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (20 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 20 subgoals...", "{"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (20 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 20 subgoals...", "case 1"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel (a # A))\n\ngoal (20 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(1) a"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive (unlabel (a # A))\n  list_all stateful_strand_step.is_Receive (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Send\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Send\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (19 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 19 subgoals...", "}"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Send\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (19 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 19 subgoals...", "{"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Send\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (19 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 19 subgoals...", "case 2"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Send (unlabel (a # A))\n\ngoal (19 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Send (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(2) a"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Send (unlabel (a # A))\n  list_all stateful_strand_step.is_Send (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Receive\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (18 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 18 subgoals...", "}"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Send (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Receive\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (18 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 18 subgoals...", "{"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Send (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Receive\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (18 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 18 subgoals...", "case 3"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Equality (unlabel (a # A))\n\ngoal (18 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Equality (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(3) a"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Equality (unlabel (a # A))\n  list_all stateful_strand_step.is_Equality (unlabel A) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Equality\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Equality\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (17 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 17 subgoals...", "}"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Equality\n   (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Equality\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (17 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 17 subgoals...", "{"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Equality\n   (unlabel (a # A)) \\<Longrightarrow>\n  list_all stateful_strand_step.is_Equality\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (17 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 17 subgoals...", "case 4"], ["proof (state)\nthis:\n  list_all is_Insert (unlabel (a # A))\n\ngoal (17 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Insert (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_Insert\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(4) a"], ["proof (prove)\nusing this:\n  list_all is_Insert (unlabel (a # A))\n  list_all is_Insert (unlabel A) \\<Longrightarrow>\n  list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_Insert\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_Insert\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (16 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 16 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_Insert (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Insert\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (16 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 16 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_Insert (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Insert\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (16 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 16 subgoals...", "case 5"], ["proof (state)\nthis:\n  list_all is_Delete (unlabel (a # A))\n\ngoal (16 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Delete (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_Delete\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(5) a"], ["proof (prove)\nusing this:\n  list_all is_Delete (unlabel (a # A))\n  list_all is_Delete (unlabel A) \\<Longrightarrow>\n  list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_Delete\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_Delete\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (15 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 15 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_Delete (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Delete\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (15 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 15 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_Delete (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Delete\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (15 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 15 subgoals...", "case 6"], ["proof (state)\nthis:\n  list_all is_InSet (unlabel (a # A))\n\ngoal (15 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_InSet (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_InSet\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(6) a"], ["proof (prove)\nusing this:\n  list_all is_InSet (unlabel (a # A))\n  list_all is_InSet (unlabel A) \\<Longrightarrow>\n  list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_InSet\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (14 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 14 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_InSet (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (14 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 14 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_InSet (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (14 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 14 subgoals...", "case 7"], ["proof (state)\nthis:\n  list_all is_NegChecks (unlabel (a # A))\n\ngoal (14 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_NegChecks (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(7) a"], ["proof (prove)\nusing this:\n  list_all is_NegChecks (unlabel (a # A))\n  list_all is_NegChecks (unlabel A) \\<Longrightarrow>\n  list_all is_NegChecks (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_NegChecks\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 13 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_NegChecks (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_NegChecks\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 13 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_NegChecks (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_NegChecks\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (13 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 13 subgoals...", "case 8"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (a # A))\n\ngoal (13 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Assignment (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(8) a"], ["proof (prove)\nusing this:\n  list_all is_Assignment (unlabel (a # A))\n  list_all is_Assignment (unlabel A) \\<Longrightarrow>\n  list_all is_Assignment (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_Assignment\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 12 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Assignment\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Assignment\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (12 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 12 subgoals...", "case 9"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (a # A))\n\ngoal (12 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Check (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_Check\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(9) a"], ["proof (prove)\nusing this:\n  list_all is_Check (unlabel (a # A))\n  list_all is_Check (unlabel A) \\<Longrightarrow>\n  list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_Check\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 11 subgoals...", "}"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 11 subgoals...", "{"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (11 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 11 subgoals...", "case 10"], ["proof (state)\nthis:\n  list_all is_Update (unlabel (a # A))\n\ngoal (11 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Update (unlabel (a # A))\n\ngoal (1 subgoal):\n 1. list_all is_Update\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "using Cons.hyps(10) a"], ["proof (prove)\nusing this:\n  list_all is_Update (unlabel (a # A))\n  list_all is_Update (unlabel A) \\<Longrightarrow>\n  list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. list_all is_Update\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))", "by (cases b) auto"], ["proof (state)\nthis:\n  list_all is_Update\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (10 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))", "}"], ["proof (state)\nthis:\n  list_all is_Update (unlabel (a # A)) \\<Longrightarrow>\n  list_all is_Update\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)))\n\ngoal (10 subgoals):\n 1. list_all stateful_strand_step.is_Receive (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Send\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 2. list_all stateful_strand_step.is_Send (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Receive\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 3. list_all stateful_strand_step.is_Equality (unlabel []) \\<Longrightarrow>\n    list_all stateful_strand_step.is_Equality\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 4. list_all is_Insert (unlabel []) \\<Longrightarrow>\n    list_all is_Insert (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 5. list_all is_Delete (unlabel []) \\<Longrightarrow>\n    list_all is_Delete (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 6. list_all is_InSet (unlabel []) \\<Longrightarrow>\n    list_all is_InSet (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 7. list_all is_NegChecks (unlabel []) \\<Longrightarrow>\n    list_all is_NegChecks\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 8. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    list_all is_Assignment\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 9. list_all is_Check (unlabel []) \\<Longrightarrow>\n    list_all is_Check (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))\n 10. list_all is_Update (unlabel []) \\<Longrightarrow>\n     list_all is_Update (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []))", "qed simp_all"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_set_prefix_obtain:\n  assumes \"s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\"\n  shows \"\\<exists>l B s'. (l,s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l,s') \\<and> prefix (B@[(l,s')]) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) A", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) A", "proof (induction A rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> set (unlabel\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    [])) \\<Longrightarrow>\n    \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) []\n 2. \\<And>x xs.\n       \\<lbrakk>s \\<in> set (unlabel\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                xs)) \\<Longrightarrow>\n                \\<exists>l B s'.\n                   (l, s) =\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                    (l, s') \\<and>\n                   prefix (B @ [(l, s')]) xs;\n        s \\<in> set (unlabel\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (xs @ [x])))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l B s'.\n                            (l, s) =\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, s') \\<and>\n                            prefix (B @ [(l, s')]) (xs @ [x])", "case (snoc a A)"], ["proof (state)\nthis:\n  s \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) \\<Longrightarrow>\n  \\<exists>l B s'.\n     (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n     prefix (B @ [(l, s')]) A\n  s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])))\n\ngoal (2 subgoals):\n 1. s \\<in> set (unlabel\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    [])) \\<Longrightarrow>\n    \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) []\n 2. \\<And>x xs.\n       \\<lbrakk>s \\<in> set (unlabel\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                xs)) \\<Longrightarrow>\n                \\<exists>l B s'.\n                   (l, s) =\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                    (l, s') \\<and>\n                   prefix (B @ [(l, s')]) xs;\n        s \\<in> set (unlabel\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (xs @ [x])))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l B s'.\n                            (l, s) =\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, s') \\<and>\n                            prefix (B @ [(l, s')]) (xs @ [x])", "obtain i b where a: \"a = (i,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i b. a = (i, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (i, b)\n\ngoal (2 subgoals):\n 1. s \\<in> set (unlabel\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    [])) \\<Longrightarrow>\n    \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) []\n 2. \\<And>x xs.\n       \\<lbrakk>s \\<in> set (unlabel\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                xs)) \\<Longrightarrow>\n                \\<exists>l B s'.\n                   (l, s) =\n                   dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                    (l, s') \\<and>\n                   prefix (B @ [(l, s')]) xs;\n        s \\<in> set (unlabel\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (xs @ [x])))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l B s'.\n                            (l, s) =\n                            dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (l, s') \\<and>\n                            prefix (B @ [(l, s')]) (xs @ [x])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) (A @ [a])", "using snoc"], ["proof (prove)\nusing this:\n  s \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A)) \\<Longrightarrow>\n  \\<exists>l B s'.\n     (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n     prefix (B @ [(l, s')]) A\n  s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])))\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) (A @ [a])", "proof (cases \"s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             A)) \\<Longrightarrow>\n             \\<exists>l B s'.\n                (l, s) =\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n                prefix (B @ [(l, s')]) A;\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])));\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l B s'.\n                         (l, s) =\n                         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                          (l, s') \\<and>\n                         prefix (B @ [(l, s')]) (A @ [a])\n 2. \\<lbrakk>s \\<in> set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             A)) \\<Longrightarrow>\n             \\<exists>l B s'.\n                (l, s) =\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n                prefix (B @ [(l, s')]) A;\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])));\n     s \\<notin> set (unlabel\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l B s'.\n                         (l, s) =\n                         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                          (l, s') \\<and>\n                         prefix (B @ [(l, s')]) (A @ [a])", "case False"], ["proof (state)\nthis:\n  s \\<notin> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             A)) \\<Longrightarrow>\n             \\<exists>l B s'.\n                (l, s) =\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n                prefix (B @ [(l, s')]) A;\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])));\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l B s'.\n                         (l, s) =\n                         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                          (l, s') \\<and>\n                         prefix (B @ [(l, s')]) (A @ [a])\n 2. \\<lbrakk>s \\<in> set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             A)) \\<Longrightarrow>\n             \\<exists>l B s'.\n                (l, s) =\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n                prefix (B @ [(l, s')]) A;\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])));\n     s \\<notin> set (unlabel\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l B s'.\n                         (l, s) =\n                         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                          (l, s') \\<and>\n                         prefix (B @ [(l, s')]) (A @ [a])", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) (A @ [a])", "using a snoc.prems unlabel_append[of \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\" \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [a]\"] dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append[of A \"[a]\"]"], ["proof (prove)\nusing this:\n  s \\<notin> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\n  a = (i, b)\n  s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])))\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [a]) =\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [a])\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a]) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [a]\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) (A @ [a])", "by (cases b) (force simp add: unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)+"], ["proof (state)\nthis:\n  \\<exists>l B s'.\n     (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n     prefix (B @ [(l, s')]) (A @ [a])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             A)) \\<Longrightarrow>\n             \\<exists>l B s'.\n                (l, s) =\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n                prefix (B @ [(l, s')]) A;\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ [a])));\n     s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l B s'.\n                         (l, s) =\n                         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                          (l, s') \\<and>\n                         prefix (B @ [(l, s')]) (A @ [a])", "qed auto"], ["proof (state)\nthis:\n  \\<exists>l B s'.\n     (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n     prefix (B @ [(l, s')]) (A @ [a])\n\ngoal (1 subgoal):\n 1. s \\<in> set (unlabel\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    [])) \\<Longrightarrow>\n    \\<exists>l B s'.\n       (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n       prefix (B @ [(l, s')]) []", "qed simp"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_set_prefix_obtain_subst:\n  assumes \"s \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)))\"\n  shows \"\\<exists>l B s'. (l,s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) \\<and> prefix ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)@[(l,s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>]) (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "obtain B l s' where B: \"(l,s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l,s')\" \"prefix (B@[(l,s')]) (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l s' B.\n        \\<lbrakk>(l, s) =\n                 dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s');\n         prefix (B @ [(l, s')])\n          (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_set_prefix_obtain[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>l B s'.\n     (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s') \\<and>\n     prefix (B @ [(l, s')])\n      (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. (\\<And>l s' B.\n        \\<lbrakk>(l, s) =\n                 dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s');\n         prefix (B @ [(l, s')])\n          (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s')\n  prefix (B @ [(l, s')])\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "obtain C where C: \"C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B@[(l,s')]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n        B @ [(l, s')] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using subst_lsst_prefix[OF B(2)]"], ["proof (prove)\nusing this:\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n     B @ [(l, s')] \\<and>\n     prefix C A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n        B @ [(l, s')] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B @ [(l, s')]\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "obtain D u where D: \"C = D@[(l,u)]\" \"D \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B\" \"[(l,u)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = [(l, s')]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D u.\n        \\<lbrakk>C = D @ [(l, u)];\n         D \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B;\n         [(l, u)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n         [(l, s')]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using subst_lsst_prefix[OF B(2)] subst_lsst_append_inv[OF C(1)]"], ["proof (prove)\nusing this:\n  \\<exists>C.\n     C \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n     B @ [(l, s')] \\<and>\n     prefix C A\n  \\<exists>A1 A2.\n     C = A1 @ A2 \\<and>\n     A1 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B \\<and>\n     A2 \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = [(l, s')]\n\ngoal (1 subgoal):\n 1. (\\<And>D u.\n        \\<lbrakk>C = D @ [(l, u)];\n         D \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B;\n         [(l, u)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> =\n         [(l, s')]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  C = D @ [(l, u)]\n  D \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B\n  [(l, u)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = [(l, s')]\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "using B D subst_lsst_cons subst_lsst_singleton"], ["proof (prove)\nusing this:\n  (l, s) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (l, s')\n  prefix (B @ [(l, s')])\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n  C = D @ [(l, u)]\n  D \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = B\n  [(l, u)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta> = [(l, s')]\n  ?a # ?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta> =\n  (?a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<delta>) #\n  (?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>)\n  [(?l, ?s)] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta> =\n  [(?l, ?s \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<delta>)]\n\ngoal (1 subgoal):\n 1. \\<exists>l B s'.\n       (l, s) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n         \\<theta>) \\<and>\n       prefix\n        ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n         [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n        (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (metis (no_types, lifting) nth_append_length)"], ["proof (state)\nthis:\n  \\<exists>l B s'.\n     (l, s) =\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<theta>) \\<and>\n     prefix\n      ((B \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) @\n       [(l, s') \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>])\n      (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq: \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons.IH"], ["proof (prove)\nusing this:\n  a = (l, b)\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by (cases b) auto"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst_cons:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ((l,b)#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ((l, b) # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)", "by (metis subst_lsst_unlabel trms\\<^sub>s\\<^sub>s\\<^sub>t_subst_cons unlabel_Cons(1))"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst:\n  assumes \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> = {}\"\n  shows \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<theta>", "by (metis trms\\<^sub>s\\<^sub>s\\<^sub>t_subst[OF assms] subst_lsst_unlabel)"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst':\n  fixes t::\"('a,'b) term\" and \\<delta>::\"('a,'b) subst\"\n  assumes \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"\n  shows \"\\<exists>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S. \\<exists>X. set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and> t = s \\<cdot> rm_vars (set X) \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "proof (induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. \\<And>a S.\n       \\<lbrakk>t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n                   \\<exists>X.\n                      set X\n                      \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                   S \\<and>\n                      t = s \\<cdot> rm_vars (set X) \\<delta>;\n        t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # S).\n                            \\<exists>X.\n                               set X\n                               \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (a # S) \\<and>\n                               t = s \\<cdot> rm_vars (set X) \\<delta>", "case (Cons a S)"], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            \\<delta>) \\<Longrightarrow>\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n     \\<exists>X.\n        set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta>\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. \\<And>a S.\n       \\<lbrakk>t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n                   \\<exists>X.\n                      set X\n                      \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                   S \\<and>\n                      t = s \\<cdot> rm_vars (set X) \\<delta>;\n        t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # S).\n                            \\<exists>X.\n                               set X\n                               \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (a # S) \\<and>\n                               t = s \\<cdot> rm_vars (set X) \\<delta>", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. \\<And>a S.\n       \\<lbrakk>t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n                   \\<exists>X.\n                      set X\n                      \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                   S \\<and>\n                      t = s \\<cdot> rm_vars (set X) \\<delta>;\n        t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # S).\n                            \\<exists>X.\n                               set X\n                               \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (a # S) \\<and>\n                               t = s \\<cdot> rm_vars (set X) \\<delta>", "hence \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<or> t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\""], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<or>\n    t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)", "using Cons.prems trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst_cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, ?b) # ?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>) =\n  trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (?b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<delta>) \\<union>\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>)\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<or>\n    t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)", "by fast"], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<or>\n  t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. \\<And>a S.\n       \\<lbrakk>t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n                   \\<exists>X.\n                      set X\n                      \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                   S \\<and>\n                      t = s \\<cdot> rm_vars (set X) \\<delta>;\n        t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # S).\n                            \\<exists>X.\n                               set X\n                               \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (a # S) \\<and>\n                               t = s \\<cdot> rm_vars (set X) \\<delta>", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<or>\n  t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "assume *: \"t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\""], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>\n 2. t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "using trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst''[OF *] a"], ["proof (prove)\nusing this:\n  \\<exists>s\\<in>trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b.\n     t =\n     s \\<cdot>\n     rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p b)) \\<delta>\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n     \\<exists>X.\n        set X\n        \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta>\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "assume *: \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "using Cons.IH[OF *] a"], ["proof (prove)\nusing this:\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n     \\<exists>X.\n        set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta>\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n       \\<exists>X.\n          set X\n          \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n     \\<exists>X.\n        set X\n        \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S).\n     \\<exists>X.\n        set X\n        \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta>\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta>", "qed simp"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst'':\n  fixes t::\"('a,'b) term\" and \\<delta> \\<theta>::\"('a,'b) subst\"\n  assumes \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\"\n  shows \"\\<exists>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S. \\<exists>X. set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and> t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>", "obtain s where s: \"s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\" \"t = s \\<cdot> \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<delta>);\n         t = s \\<cdot> \\<theta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            \\<delta>) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<delta>);\n         t = s \\<cdot> \\<theta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n  t = s \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subst'[OF s(1)] s(2)"], ["proof (prove)\nusing this:\n  \\<exists>sa\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n     \\<exists>X.\n        set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n        s = sa \\<cdot> rm_vars (set X) \\<delta>\n  t = s \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n       \\<exists>X.\n          set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n          t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<in>trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S.\n     \\<exists>X.\n        set X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<and>\n        t = s \\<cdot> rm_vars (set X) \\<delta> \\<circ>\\<^sub>s \\<theta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual_subst_cons:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = (trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>)) \\<union> (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))", "using a dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_cons[of a A \\<sigma>]"], ["proof (prove)\nusing this:\n  a = (l, b)\n  a = (l, b)\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   \\<sigma>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))", "by (cases b) auto"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n  trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (snd a \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<sigma>) \\<union>\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_funs_term:\n  \"\\<Union>(funs_term ` (trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)))) = \\<Union>(funs_term ` (trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel S)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (funs_term `\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)) =\n    \\<Union> (funs_term ` trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq"], ["proof (prove)\nusing this:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (funs_term `\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)) =\n    \\<Union> (funs_term ` trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S)", "by fast"], ["", "lemma dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by (cases b) auto"], ["proof (state)\nthis:\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_append:\n  \"db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B) I D = db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B I (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A I D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) I D =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B I\n     (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A I D)", "by (metis db\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append)"], ["", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"db'\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))) \\<I> D = db'\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) \\<I> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n     \\<I> D =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "proof (induction T arbitrary: D)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D\n 2. \\<And>a T D.\n       (\\<And>D.\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n            \\<I> D =\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I>\n            D) \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "case (Cons x T)"], ["proof (state)\nthis:\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n   \\<I> ?D =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> ?D\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D\n 2. \\<And>a T D.\n       (\\<And>D.\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n            \\<I> D =\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I>\n            D) \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "obtain l s where \"x = (l,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l s. x = (l, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  x = (l, s)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D\n 2. \\<And>a T D.\n       (\\<And>D.\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n            \\<I> D =\n           db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I>\n            D) \\<Longrightarrow>\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (a # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "thus ?case"], ["proof (prove)\nusing this:\n  x = (l, s)\n\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n     \\<I> D =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "using Cons"], ["proof (prove)\nusing this:\n  x = (l, s)\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n   \\<I> ?D =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> ?D\n\ngoal (1 subgoal):\n 1. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n     \\<I> D =\n    db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "by (cases s) (simp_all add: unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n   \\<I> D =\n  db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (x # T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D\n\ngoal (1 subgoal):\n 1. \\<And>D.\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n        \\<I> D =\n       db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<I> D", "qed (simp add: unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def subst_apply_labeled_stateful_strand_def)"], ["", "lemma labeled_list_insert_eq_cases:\n  \"d \\<notin> set (unlabel D) \\<Longrightarrow> List.insert d (unlabel D) = unlabel (List.insert (i,d) D)\"\n  \"(i,d) \\<in> set D \\<Longrightarrow> List.insert d (unlabel D) = unlabel (List.insert (i,d) D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d \\<notin> set (unlabel D) \\<Longrightarrow>\n     List.insert d (unlabel D) = unlabel (List.insert (i, d) D)) &&&\n    ((i, d) \\<in> set D \\<Longrightarrow>\n     List.insert d (unlabel D) = unlabel (List.insert (i, d) D))", "unfolding unlabel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (d \\<notin> set (map snd D) \\<Longrightarrow>\n     List.insert d (map snd D) = map snd (List.insert (i, d) D)) &&&\n    ((i, d) \\<in> set D \\<Longrightarrow>\n     List.insert d (map snd D) = map snd (List.insert (i, d) D))", "by (metis (no_types, hide_lams) List.insert_def image_eqI list.simps(9) set_map snd_conv,\n    metis in_set_insert set_zip_rightD zip_map_fst_snd)"], ["", "lemma labeled_list_insert_eq_ex_cases:\n  \"List.insert d (unlabel D) = unlabel (List.insert (i,d) D) \\<or>\n  (\\<exists>j. (j,d) \\<in> set D \\<and> List.insert d (unlabel D) = unlabel (List.insert (j,d) D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.insert d (unlabel D) = unlabel (List.insert (i, d) D) \\<or>\n    (\\<exists>j.\n        (j, d) \\<in> set D \\<and>\n        List.insert d (unlabel D) = unlabel (List.insert (j, d) D))", "using labeled_list_insert_eq_cases"], ["proof (prove)\nusing this:\n  ?d \\<notin> set (unlabel ?D) \\<Longrightarrow>\n  List.insert ?d (unlabel ?D) = unlabel (List.insert (?i, ?d) ?D)\n  (?i, ?d) \\<in> set ?D \\<Longrightarrow>\n  List.insert ?d (unlabel ?D) = unlabel (List.insert (?i, ?d) ?D)\n\ngoal (1 subgoal):\n 1. List.insert d (unlabel D) = unlabel (List.insert (i, d) D) \\<or>\n    (\\<exists>j.\n        (j, d) \\<in> set D \\<and>\n        List.insert d (unlabel D) = unlabel (List.insert (j, d) D))", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  ?d \\<notin> set (map snd ?D) \\<Longrightarrow>\n  List.insert ?d (map snd ?D) = map snd (List.insert (?i, ?d) ?D)\n  (?i, ?d) \\<in> set ?D \\<Longrightarrow>\n  List.insert ?d (map snd ?D) = map snd (List.insert (?i, ?d) ?D)\n\ngoal (1 subgoal):\n 1. List.insert d (map snd D) = map snd (List.insert (i, d) D) \\<or>\n    (\\<exists>j.\n        (j, d) \\<in> set D \\<and>\n        List.insert d (map snd D) = map snd (List.insert (j, d) D))", "by (metis in_set_impl_in_set_zip2 length_map zip_map_fst_snd)"], ["", "lemma proj_subst: \"proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. proj l ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta> \\<Longrightarrow>\n       proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "case (Cons a A)"], ["proof (state)\nthis:\n  proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (2 subgoals):\n 1. proj l ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta> \\<Longrightarrow>\n       proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "obtain l b where \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. proj l ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n 2. \\<And>a A.\n       proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       \\<delta> \\<Longrightarrow>\n       proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n       proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  proj l (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  proj l A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "unfolding proj_def subst_apply_labeled_stateful_strand_def"], ["proof (prove)\nusing this:\n  a = (l, b)\n  filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s)\n   (map (\\<lambda>x.\n            x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n     A) =\n  map (\\<lambda>x.\n          x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n   (filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s) A)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s)\n     (map (\\<lambda>x.\n              x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n       (a # A)) =\n    map (\\<lambda>x.\n            x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n     (filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s) (a # A))", "by force"], ["proof (state)\nthis:\n  proj l (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  proj l (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. proj l ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n    proj l [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>", "qed simp"], ["", "lemma proj_set_subset[simp]:\n  \"set (proj n A) \\<subseteq> set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (proj n A) \\<subseteq> set A", "unfolding proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)\n    \\<subseteq> set A", "by auto"], ["", "lemma proj_proj_set_subset[simp]:\n  \"set (proj n (proj m A)) \\<subseteq> set (proj n A)\"\n  \"set (proj n (proj m A)) \\<subseteq> set (proj m A)\"\n  \"set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl n A)\"\n  \"set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl m A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (proj n (proj m A)) \\<subseteq> set (proj n A) &&&\n     set (proj n (proj m A)) \\<subseteq> set (proj m A)) &&&\n    set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl n A) &&&\n    set (proj_unl n (proj m A)) \\<subseteq> set (proj_unl m A)", "unfolding unlabel_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n     \\<subseteq> set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                       A) &&&\n     set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n     \\<subseteq> set (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                       A)) &&&\n    set (map snd\n          (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n            (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A)))\n    \\<subseteq> set (map snd\n                      (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                        A)) &&&\n    set (map snd\n          (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n            (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A)))\n    \\<subseteq> set (map snd\n                      (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                        A))", "by auto"], ["", "lemma proj_in_set_iff:\n  \"(ln i, d) \\<in> set (proj i D) \\<longleftrightarrow> (ln i, d) \\<in> set D\"\n  \"(\\<star>, d) \\<in> set (proj i D) \\<longleftrightarrow> (\\<star>, d) \\<in> set D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ln i, d) \\<in> set (proj i D)) = ((ln i, d) \\<in> set D) &&&\n    ((\\<star>, d) \\<in> set (proj i D)) = ((\\<star>, d) \\<in> set D)", "unfolding proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ln i, d)\n     \\<in> set (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)) =\n    ((ln i, d) \\<in> set D) &&&\n    ((\\<star>, d)\n     \\<in> set (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)) =\n    ((\\<star>, d) \\<in> set D)", "by auto"], ["", "lemma proj_list_insert:\n  \"proj i (List.insert (ln i,d) D) = List.insert (ln i,d) (proj i D)\"\n  \"proj i (List.insert (\\<star>,d) D) = List.insert (\\<star>,d) (proj i D)\"\n  \"i \\<noteq> j \\<Longrightarrow> proj i (List.insert (ln j,d) D) = proj i D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj i (List.insert (ln i, d) D) = List.insert (ln i, d) (proj i D) &&&\n    proj i (List.insert (\\<star>, d) D) =\n    List.insert (\\<star>, d) (proj i D) &&&\n    (i \\<noteq> j \\<Longrightarrow>\n     proj i (List.insert (ln j, d) D) = proj i D)", "unfolding List.insert_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s)\n     (if (ln i, d) \\<in> set D then D else (ln i, d) # D) =\n    (if (ln i, d)\n        \\<in> set (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)\n     then filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D\n     else (ln i, d) #\n          filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D) &&&\n    filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s)\n     (if (\\<star>, d) \\<in> set D then D else (\\<star>, d) # D) =\n    (if (\\<star>, d)\n        \\<in> set (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)\n     then filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D\n     else (\\<star>, d) #\n          filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D) &&&\n    (i \\<noteq> j \\<Longrightarrow>\n     filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s)\n      (if (ln j, d) \\<in> set D then D else (ln j, d) # D) =\n     filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)", "by auto"], ["", "lemma proj_filter: \"proj i [d\\<leftarrow>D. d \\<notin> set Di] = [d\\<leftarrow>proj i D. d \\<notin> set Di]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj i (filter (\\<lambda>d. d \\<notin> set Di) D) =\n    filter (\\<lambda>d. d \\<notin> set Di) (proj i D)", "by (simp_all add: proj_def conj_commute)"], ["", "lemma proj_list_Cons:\n  \"proj i ((ln i,d)#D) = (ln i,d)#proj i D\"\n  \"proj i ((\\<star>,d)#D) = (\\<star>,d)#proj i D\"\n  \"i \\<noteq> j \\<Longrightarrow> proj i ((ln j,d)#D) = proj i D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj i ((ln i, d) # D) = (ln i, d) # proj i D &&&\n    proj i ((\\<star>, d) # D) = (\\<star>, d) # proj i D &&&\n    (i \\<noteq> j \\<Longrightarrow> proj i ((ln j, d) # D) = proj i D)", "unfolding List.insert_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) ((ln i, d) # D) =\n    (ln i, d) # filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D &&&\n    filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s)\n     ((\\<star>, d) # D) =\n    (\\<star>, d) #\n    filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D &&&\n    (i \\<noteq> j \\<Longrightarrow>\n     filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) ((ln j, d) # D) =\n     filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D)", "by auto"], ["", "lemma proj_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t:\n  \"proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l [])\n 2. \\<And>a A.\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<Longrightarrow>\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))", "case (Cons a A)"], ["proof (state)\nthis:\n  proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\n\ngoal (2 subgoals):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l [])\n 2. \\<And>a A.\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<Longrightarrow>\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))", "obtain k b where \"a = (k,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k b. a = (k, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (k, b)\n\ngoal (2 subgoals):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l [])\n 2. \\<And>a A.\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<Longrightarrow>\n       proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))", "thus ?case"], ["proof (prove)\nusing this:\n  a = (k, b)\n\ngoal (1 subgoal):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))", "using Cons"], ["proof (prove)\nusing this:\n  a = (k, b)\n  proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\n\ngoal (1 subgoal):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))", "unfolding dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def proj_def"], ["proof (prove)\nusing this:\n  a = (k, b)\n  filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s)\n   (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p A) =\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s) A)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s)\n     (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a # A)) =\n    map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s) (a # A))", "by (cases b) auto"], ["proof (state)\nthis:\n  proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l (a # A))\n\ngoal (1 subgoal):\n 1. proj l (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l [])", "qed simp"], ["", "lemma proj_instance_ex:\n  assumes B: \"\\<forall>b \\<in> set B. \\<exists>a \\<in> set A. \\<exists>\\<delta>. b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and> P \\<delta>\"\n    and b: \"b \\<in> set (proj l B)\"\n  shows \"\\<exists>a \\<in> set (proj l A). \\<exists>\\<delta>. b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and> P \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "obtain a \\<delta> where a: \"a \\<in> set A\" \"b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\" \"P \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a \\<delta>.\n        \\<lbrakk>a \\<in> set A;\n         b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>;\n         P \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using B b proj_set_subset"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set B.\n     \\<exists>a\\<in>set A.\n        \\<exists>\\<delta>.\n           b =\n           a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n           P \\<delta>\n  b \\<in> set (proj l B)\n  set (proj ?n ?A) \\<subseteq> set ?A\n\ngoal (1 subgoal):\n 1. (\\<And>a \\<delta>.\n        \\<lbrakk>a \\<in> set A;\n         b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>;\n         P \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  a \\<in> set A\n  b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n  P \\<delta>\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "obtain k b' where b': \"b = (k, b')\" \"k = (ln l) \\<or> k = \\<star>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k b'.\n        \\<lbrakk>b = (k, b'); k = ln l \\<or> k = \\<star>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b proj_in_setD"], ["proof (prove)\nusing this:\n  b \\<in> set (proj l B)\n  \\<lbrakk>?a \\<in> set (proj ?l ?A);\n   \\<And>k b.\n      \\<lbrakk>?a = (k, b); k = ln ?l \\<or> k = \\<star>\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k b'.\n        \\<lbrakk>b = (k, b'); k = ln l \\<or> k = \\<star>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  b = (k, b')\n  k = ln l \\<or> k = \\<star>\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "obtain a' where a': \"a = (k, a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'. a = (k, a') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b'(1) a(2)"], ["proof (prove)\nusing this:\n  b = (k, b')\n  b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>a'. a = (k, a') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases a) simp_all"], ["proof (state)\nthis:\n  a = (k, a')\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "using a a' b'(2)"], ["proof (prove)\nusing this:\n  a \\<in> set A\n  b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n  P \\<delta>\n  a = (k, a')\n  k = ln l \\<or> k = \\<star>\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (proj l A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "unfolding proj_def"], ["proof (prove)\nusing this:\n  a \\<in> set A\n  b = a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\n  P \\<delta>\n  a = (k, a')\n  k = ln l \\<or> k = \\<star>\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (filter (\\<lambda>s. is_LabelN l s \\<or> is_LabelS s)\n                         A).\n       \\<exists>\\<delta>.\n          b =\n          a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n          P \\<delta>", "by auto"], ["proof (state)\nthis:\n  \\<exists>a\\<in>set (proj l A).\n     \\<exists>\\<delta>.\n        b =\n        a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<and>\n        P \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proj_dbproj:\n  \"dbproj (ln i) (proj i D) = dbproj (ln i) D\"\n  \"dbproj \\<star> (proj i D) = dbproj \\<star> D\"\n  \"i \\<noteq> j \\<Longrightarrow> dbproj (ln j) (proj i D) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dbproj ln i (proj i D) = dbproj ln i D &&&\n    dbproj \\<star> (proj i D) = dbproj \\<star> D &&&\n    (i \\<noteq> j \\<Longrightarrow> dbproj ln j (proj i D) = [])", "unfolding proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dbproj ln i (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D) =\n    dbproj ln i D &&&\n    dbproj \\<star>\n     (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D) =\n    dbproj \\<star> D &&&\n    (i \\<noteq> j \\<Longrightarrow>\n     dbproj ln j (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s) D) =\n     [])", "by (induct D) auto"], ["", "lemma dbproj_Cons:\n  \"dbproj i ((i,d)#D) = (i,d)#dbproj i D\"\n  \"i \\<noteq> j \\<Longrightarrow> dbproj j ((i,d)#D) = dbproj j D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dbproj i ((i, d) # D) = (i, d) # dbproj i D &&&\n    (i \\<noteq> j \\<Longrightarrow> dbproj j ((i, d) # D) = dbproj j D)", "by auto"], ["", "lemma dbproj_subset[simp]:\n  \"set (unlabel (dbproj i D)) \\<subseteq> set (unlabel D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (unlabel (dbproj i D)) \\<subseteq> set (unlabel D)", "unfolding unlabel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map snd (dbproj i D)) \\<subseteq> set (map snd D)", "by auto"], ["", "lemma dbproj_subseq: \n  assumes \"Di \\<in> set (subseqs (dbproj k D))\"\n  shows \"dbproj k Di = Di\" (is ?A)\n  and \"i \\<noteq> k \\<Longrightarrow> dbproj i Di = []\" (is \"i \\<noteq> k \\<Longrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. dbproj k Di = Di &&& (i \\<noteq> k \\<Longrightarrow> dbproj i Di = [])", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. dbproj k Di = Di\n 2. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "have *: \"set Di \\<subseteq> set (dbproj k D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Di \\<subseteq> set (dbproj k D)", "using subseqs_powset[of \"dbproj k D\"] assms"], ["proof (prove)\nusing this:\n  set ` set (subseqs (dbproj k D)) = Pow (set (dbproj k D))\n  Di \\<in> set (subseqs (dbproj k D))\n\ngoal (1 subgoal):\n 1. set Di \\<subseteq> set (dbproj k D)", "by auto"], ["proof (state)\nthis:\n  set Di \\<subseteq> set (dbproj k D)\n\ngoal (2 subgoals):\n 1. dbproj k Di = Di\n 2. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "thus ?A"], ["proof (prove)\nusing this:\n  set Di \\<subseteq> set (dbproj k D)\n\ngoal (1 subgoal):\n 1. dbproj k Di = Di", "by (metis filter_True filter_set member_filter subsetCE)"], ["proof (state)\nthis:\n  dbproj k Di = Di\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "have \"\\<And>j d. (j,d) \\<in> set Di \\<Longrightarrow> j = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j d. (j, d) \\<in> set Di \\<Longrightarrow> j = k", "using *"], ["proof (prove)\nusing this:\n  set Di \\<subseteq> set (dbproj k D)\n\ngoal (1 subgoal):\n 1. \\<And>j d. (j, d) \\<in> set Di \\<Longrightarrow> j = k", "by auto"], ["proof (state)\nthis:\n  (?j, ?d) \\<in> set Di \\<Longrightarrow> ?j = k\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "moreover"], ["proof (state)\nthis:\n  (?j, ?d) \\<in> set Di \\<Longrightarrow> ?j = k\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "have \"\\<And>j d. (j,d) \\<in> set (dbproj i Di) \\<Longrightarrow> j = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j d. (j, d) \\<in> set (dbproj i Di) \\<Longrightarrow> j = i", "by auto"], ["proof (state)\nthis:\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> ?j = i\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "moreover"], ["proof (state)\nthis:\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> ?j = i\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "have \"\\<And>j d. (j,d) \\<in> set (dbproj i Di) \\<Longrightarrow> (j,d) \\<in> set Di\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j d.\n       (j, d) \\<in> set (dbproj i Di) \\<Longrightarrow> (j, d) \\<in> set Di", "by auto"], ["proof (state)\nthis:\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> (?j, ?d) \\<in> set Di\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "ultimately"], ["proof (chain)\npicking this:\n  (?j, ?d) \\<in> set Di \\<Longrightarrow> ?j = k\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> ?j = i\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> (?j, ?d) \\<in> set Di", "show \"i \\<noteq> k \\<Longrightarrow> ?B\""], ["proof (prove)\nusing this:\n  (?j, ?d) \\<in> set Di \\<Longrightarrow> ?j = k\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> ?j = i\n  (?j, ?d) \\<in> set (dbproj i Di) \\<Longrightarrow> (?j, ?d) \\<in> set Di\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> dbproj i Di = []", "by (metis set_empty subrelI subset_empty)"], ["proof (state)\nthis:\n  i \\<noteq> k \\<Longrightarrow> dbproj i Di = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dbproj_subseq_subset:\n  assumes \"Di \\<in> set (subseqs (dbproj i D))\"\n  shows \"set Di \\<subseteq> set D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Di \\<subseteq> set D", "by (metis Pow_iff assms filter_set image_eqI member_filter subseqs_powset subsetCE subsetI)"], ["", "lemma dbproj_subseq_in_subseqs:\n  assumes \"Di \\<in> set (subseqs (dbproj i D))\"\n  shows \"Di \\<in> set (subseqs D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs D)", "using assms in_set_subseqs subseq_filter_left subseq_order.dual_order.trans"], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs (dbproj i D))\n  (?xs \\<in> set (subseqs ?ys)) = subseq ?xs ?ys\n  subseq (filter ?P ?xs) ?xs\n  \\<lbrakk>subseq ?b ?a; subseq ?c ?b\\<rbrakk>\n  \\<Longrightarrow> subseq ?c ?a\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs D)", "by blast"], ["", "lemma proj_subseq:\n  assumes \"Di \\<in> set (subseqs (dbproj (ln j) D))\" \"j \\<noteq> i\"\n  shows \"[d\\<leftarrow>proj i D. d \\<notin> set Di] = proj i D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "have \"set Di \\<subseteq> set (dbproj (ln j) D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Di \\<subseteq> set (dbproj ln j D)", "using subseqs_powset[of \"dbproj (ln j) D\"] assms"], ["proof (prove)\nusing this:\n  set ` set (subseqs (dbproj ln j D)) = Pow (set (dbproj ln j D))\n  Di \\<in> set (subseqs (dbproj ln j D))\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. set Di \\<subseteq> set (dbproj ln j D)", "by auto"], ["proof (state)\nthis:\n  set Di \\<subseteq> set (dbproj ln j D)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "hence \"\\<And>k d. (k,d) \\<in> set Di \\<Longrightarrow> k = ln j\""], ["proof (prove)\nusing this:\n  set Di \\<subseteq> set (dbproj ln j D)\n\ngoal (1 subgoal):\n 1. \\<And>k d. (k, d) \\<in> set Di \\<Longrightarrow> k = ln j", "by auto"], ["proof (state)\nthis:\n  (?k, ?d) \\<in> set Di \\<Longrightarrow> ?k = ln j\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "moreover"], ["proof (state)\nthis:\n  (?k, ?d) \\<in> set Di \\<Longrightarrow> ?k = ln j\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "have \"\\<And>k d. (k,d) \\<in> set (proj i D) \\<Longrightarrow> k \\<noteq> ln j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k d. (k, d) \\<in> set (proj i D) \\<Longrightarrow> k \\<noteq> ln j", "using assms(2)"], ["proof (prove)\nusing this:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>k d. (k, d) \\<in> set (proj i D) \\<Longrightarrow> k \\<noteq> ln j", "unfolding proj_def"], ["proof (prove)\nusing this:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>k d.\n       (k, d)\n       \\<in> set (filter (\\<lambda>s. is_LabelN i s \\<or> is_LabelS s)\n                   D) \\<Longrightarrow>\n       k \\<noteq> ln j", "by auto"], ["proof (state)\nthis:\n  (?k, ?d) \\<in> set (proj i D) \\<Longrightarrow> ?k \\<noteq> ln j\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "ultimately"], ["proof (chain)\npicking this:\n  (?k, ?d) \\<in> set Di \\<Longrightarrow> ?k = ln j\n  (?k, ?d) \\<in> set (proj i D) \\<Longrightarrow> ?k \\<noteq> ln j", "have \"\\<And>d. d \\<in> set (proj i D) \\<Longrightarrow> d \\<notin> set Di\""], ["proof (prove)\nusing this:\n  (?k, ?d) \\<in> set Di \\<Longrightarrow> ?k = ln j\n  (?k, ?d) \\<in> set (proj i D) \\<Longrightarrow> ?k \\<noteq> ln j\n\ngoal (1 subgoal):\n 1. \\<And>d. d \\<in> set (proj i D) \\<Longrightarrow> d \\<notin> set Di", "by auto"], ["proof (state)\nthis:\n  ?d \\<in> set (proj i D) \\<Longrightarrow> ?d \\<notin> set Di\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?d \\<in> set (proj i D) \\<Longrightarrow> ?d \\<notin> set Di\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>d. d \\<notin> set Di) (proj i D) = proj i D\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unlabel_subseqsD:\n  assumes \"A \\<in> set (subseqs (unlabel B))\"\n  shows \"\\<exists>C \\<in> set (subseqs B). unlabel C = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>set (subseqs B). unlabel C = A", "using assms map_subseqs"], ["proof (prove)\nusing this:\n  A \\<in> set (subseqs (unlabel B))\n  map (map ?f) (subseqs ?xs) = subseqs (map ?f ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>set (subseqs B). unlabel C = A", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  A \\<in> set (subseqs (map snd B))\n  map (map ?f) (subseqs ?xs) = subseqs (map ?f ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>C\\<in>set (subseqs B). map snd C = A", "by (metis imageE set_map)"], ["", "lemma unlabel_filter_eq:\n  assumes \"\\<forall>(j, p) \\<in> set A \\<union> B. \\<forall>(k, q) \\<in> set A \\<union> B. p = q \\<longrightarrow> j = k\" (is \"?P (set A)\")\n  shows \"[d\\<leftarrow>unlabel A. d \\<notin> snd ` B] = unlabel [d\\<leftarrow>A. d \\<notin> B]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (unlabel A) =\n    unlabel (filter (\\<lambda>d. d \\<notin> B) A)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>(j, p)\\<in>set A \\<union> B.\n     \\<forall>(k, q)\\<in>set A \\<union> B. p = q \\<longrightarrow> j = k\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (unlabel A) =\n    unlabel (filter (\\<lambda>d. d \\<notin> B) A)", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  \\<forall>(j, p)\\<in>set A \\<union> B.\n     \\<forall>(k, q)\\<in>set A \\<union> B. p = q \\<longrightarrow> j = k\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) A)", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "case (Cons a A)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set A \\<union> B.\n     case a of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set A \\<union> B.\n          case a of\n          (k, q) \\<Rightarrow>\n            p = q \\<longrightarrow> j = k \\<Longrightarrow>\n  filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n  map snd (filter (\\<lambda>d. d \\<notin> B) A)\n  \\<forall>b\\<in>set (a # A) \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set (a # A) \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "have \"set A \\<subseteq> set (a#A)\" \"{a} \\<subseteq> set (a#A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set A \\<subseteq> set (a # A) &&& {a} \\<subseteq> set (a # A)", "by auto"], ["proof (state)\nthis:\n  set A \\<subseteq> set (a # A)\n  {a} \\<subseteq> set (a # A)\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "hence *: \"?P (set A)\" \"?P {a}\""], ["proof (prove)\nusing this:\n  set A \\<subseteq> set (a # A)\n  {a} \\<subseteq> set (a # A)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set A \\<union> B.\n       case a of\n       (j, p) \\<Rightarrow>\n         \\<forall>a\\<in>set A \\<union> B.\n            case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k &&&\n    \\<forall>b\\<in>{a} \\<union> B.\n       case b of\n       (j, p) \\<Rightarrow>\n         \\<forall>a\\<in>{a} \\<union> B.\n            case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k", "using Cons.prems"], ["proof (prove)\nusing this:\n  set A \\<subseteq> set (a # A)\n  {a} \\<subseteq> set (a # A)\n  \\<forall>b\\<in>set (a # A) \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set (a # A) \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set A \\<union> B.\n       case a of\n       (j, p) \\<Rightarrow>\n         \\<forall>a\\<in>set A \\<union> B.\n            case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k &&&\n    \\<forall>b\\<in>{a} \\<union> B.\n       case b of\n       (j, p) \\<Rightarrow>\n         \\<forall>a\\<in>{a} \\<union> B.\n            case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k", "by fast+"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set A \\<union> B.\n     case a of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set A \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n  \\<forall>b\\<in>{a} \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>{a} \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "hence IH: \"[d\\<leftarrow>map snd A . d \\<notin> snd ` B] = map snd [d\\<leftarrow>A . d \\<notin> B]\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set A \\<union> B.\n     case a of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set A \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n  \\<forall>b\\<in>{a} \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>{a} \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) A)", "using Cons.IH"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set A \\<union> B.\n     case a of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set A \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n  \\<forall>b\\<in>{a} \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>{a} \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n  \\<forall>a\\<in>set A \\<union> B.\n     case a of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>set A \\<union> B.\n          case a of\n          (k, q) \\<Rightarrow>\n            p = q \\<longrightarrow> j = k \\<Longrightarrow>\n  filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n  map snd (filter (\\<lambda>d. d \\<notin> B) A)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) A)", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n  map snd (filter (\\<lambda>d. d \\<notin> B) A)\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "{"], ["proof (state)\nthis:\n  filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n  map snd (filter (\\<lambda>d. d \\<notin> B) A)\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "assume \"snd a \\<in> snd ` B\""], ["proof (state)\nthis:\n  snd a \\<in> snd ` B\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "then"], ["proof (chain)\npicking this:\n  snd a \\<in> snd ` B", "obtain b where b: \"b \\<in> B\" \"snd a = snd b\""], ["proof (prove)\nusing this:\n  snd a \\<in> snd ` B\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; snd a = snd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  b \\<in> B\n  snd a = snd b\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "hence \"fst a = fst b\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  snd a = snd b\n\ngoal (1 subgoal):\n 1. fst a = fst b", "using *(2)"], ["proof (prove)\nusing this:\n  b \\<in> B\n  snd a = snd b\n  \\<forall>b\\<in>{a} \\<union> B.\n     case b of\n     (j, p) \\<Rightarrow>\n       \\<forall>a\\<in>{a} \\<union> B.\n          case a of (k, q) \\<Rightarrow> p = q \\<longrightarrow> j = k\n\ngoal (1 subgoal):\n 1. fst a = fst b", "by auto"], ["proof (state)\nthis:\n  fst a = fst b\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "hence \"a \\<in> B\""], ["proof (prove)\nusing this:\n  fst a = fst b\n\ngoal (1 subgoal):\n 1. a \\<in> B", "using b"], ["proof (prove)\nusing this:\n  fst a = fst b\n  b \\<in> B\n  snd a = snd b\n\ngoal (1 subgoal):\n 1. a \\<in> B", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  a \\<in> B\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "}"], ["proof (state)\nthis:\n  snd a \\<in> snd ` B \\<Longrightarrow> a \\<in> B\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "hence **: \"a \\<notin> B \\<Longrightarrow> snd a \\<notin> snd ` B\""], ["proof (prove)\nusing this:\n  snd a \\<in> snd ` B \\<Longrightarrow> a \\<in> B\n\ngoal (1 subgoal):\n 1. a \\<notin> B \\<Longrightarrow> snd a \\<notin> snd ` B", "by metis"], ["proof (state)\nthis:\n  a \\<notin> B \\<Longrightarrow> snd a \\<notin> snd ` B\n\ngoal (2 subgoals):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>(j, p)\\<in>set A \\<union> B.\n                   \\<forall>(k, q)\\<in>set A \\<union> B.\n                      p = q \\<longrightarrow> j = k \\<Longrightarrow>\n                filter (\\<lambda>d. d \\<notin> snd ` B) (map snd A) =\n                map snd (filter (\\<lambda>d. d \\<notin> B) A);\n        \\<forall>(j, p)\\<in>set (a # A) \\<union> B.\n           \\<forall>(k, q)\\<in>set (a # A) \\<union> B.\n              p = q \\<longrightarrow> j = k\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>d. d \\<notin> snd ` B)\n                          (map snd (a # A)) =\n                         map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>d. d \\<notin> snd ` B) (map snd (a # A)) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))", "by (cases \"a \\<in> B\") (simp add: ** IH)+"], ["proof (state)\nthis:\n  filter (\\<lambda>d. d \\<notin> snd ` B) (map snd (a # A)) =\n  map snd (filter (\\<lambda>d. d \\<notin> B) (a # A))\n\ngoal (1 subgoal):\n 1. \\<forall>(j, p)\\<in>set [] \\<union> B.\n       \\<forall>(k, q)\\<in>set [] \\<union> B.\n          p = q \\<longrightarrow> j = k \\<Longrightarrow>\n    filter (\\<lambda>d. d \\<notin> snd ` B) (map snd []) =\n    map snd (filter (\\<lambda>d. d \\<notin> B) [])", "qed simp"], ["", "lemma subseqs_mem_dbproj:\n  assumes \"Di \\<in> set (subseqs D)\" \"list_all (\\<lambda>d. fst d = i) Di\"\n  shows \"Di \\<in> set (subseqs (dbproj i D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i D))", "using assms"], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs D)\n  list_all (\\<lambda>d. fst d = i) Di\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i D))", "proof (induction D arbitrary: Di)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Di.\n       \\<lbrakk>Di \\<in> set (subseqs []);\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i []))\n 2. \\<And>a D Di.\n       \\<lbrakk>\\<And>Di.\n                   \\<lbrakk>Di \\<in> set (subseqs D);\n                    list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n                   \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i D));\n        Di \\<in> set (subseqs (a # D));\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i (a # D)))", "case (Cons di D)"], ["proof (state)\nthis:\n  \\<lbrakk>?Di \\<in> set (subseqs D);\n   list_all (\\<lambda>d. fst d = i) ?Di\\<rbrakk>\n  \\<Longrightarrow> ?Di \\<in> set (subseqs (dbproj i D))\n  Di \\<in> set (subseqs (di # D))\n  list_all (\\<lambda>d. fst d = i) Di\n\ngoal (2 subgoals):\n 1. \\<And>Di.\n       \\<lbrakk>Di \\<in> set (subseqs []);\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i []))\n 2. \\<And>a D Di.\n       \\<lbrakk>\\<And>Di.\n                   \\<lbrakk>Di \\<in> set (subseqs D);\n                    list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n                   \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i D));\n        Di \\<in> set (subseqs (a # D));\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i (a # D)))", "obtain d j where di: \"di = (j,d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j d. di = (j, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  di = (j, d)\n\ngoal (2 subgoals):\n 1. \\<And>Di.\n       \\<lbrakk>Di \\<in> set (subseqs []);\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i []))\n 2. \\<And>a D Di.\n       \\<lbrakk>\\<And>Di.\n                   \\<lbrakk>Di \\<in> set (subseqs D);\n                    list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n                   \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i D));\n        Di \\<in> set (subseqs (a # D));\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i (a # D)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i (di # D)))", "proof (cases \"Di \\<in> set (subseqs D)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Di \\<in> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))\n 2. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "case True"], ["proof (state)\nthis:\n  Di \\<in> set (subseqs D)\n\ngoal (2 subgoals):\n 1. Di \\<in> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))\n 2. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "hence \"Di \\<in> set (subseqs (dbproj i D))\""], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs D)\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i D))", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs D)\n  \\<lbrakk>?Di \\<in> set (subseqs D);\n   list_all (\\<lambda>d. fst d = i) ?Di\\<rbrakk>\n  \\<Longrightarrow> ?Di \\<in> set (subseqs (dbproj i D))\n  Di \\<in> set (subseqs (di # D))\n  list_all (\\<lambda>d. fst d = i) Di\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i D))", "by auto"], ["proof (state)\nthis:\n  Di \\<in> set (subseqs (dbproj i D))\n\ngoal (2 subgoals):\n 1. Di \\<in> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))\n 2. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs (dbproj i D))\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i (di # D)))", "using subseqs_Cons"], ["proof (prove)\nusing this:\n  Di \\<in> set (subseqs (dbproj i D))\n  ?ys \\<in> set (subseqs ?xs) \\<Longrightarrow>\n  ?ys \\<in> set (subseqs (?x # ?xs))\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i (di # D)))", "by auto"], ["proof (state)\nthis:\n  Di \\<in> set (subseqs (dbproj i (di # D)))\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "case False"], ["proof (state)\nthis:\n  Di \\<notin> set (subseqs D)\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "then"], ["proof (chain)\npicking this:\n  Di \\<notin> set (subseqs D)", "obtain Di' where Di': \"Di = di#Di'\""], ["proof (prove)\nusing this:\n  Di \\<notin> set (subseqs D)\n\ngoal (1 subgoal):\n 1. (\\<And>Di'. Di = di # Di' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  Di \\<notin> set (subseqs D)\n  Di \\<in> set (subseqs (di # D))\n\ngoal (1 subgoal):\n 1. (\\<And>Di'. Di = di # Di' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags, lifting) Un_iff imageE set_append set_map subseqs.simps(2))"], ["proof (state)\nthis:\n  Di = di # Di'\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "hence \"Di' \\<in> set (subseqs D)\""], ["proof (prove)\nusing this:\n  Di = di # Di'\n\ngoal (1 subgoal):\n 1. Di' \\<in> set (subseqs D)", "using Cons.prems(1) False"], ["proof (prove)\nusing this:\n  Di = di # Di'\n  Di \\<in> set (subseqs (di # D))\n  Di \\<notin> set (subseqs D)\n\ngoal (1 subgoal):\n 1. Di' \\<in> set (subseqs D)", "by (metis (no_types, lifting) UnE imageE list.inject set_append set_map subseqs.simps(2))"], ["proof (state)\nthis:\n  Di' \\<in> set (subseqs D)\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "hence \"Di' \\<in> set (subseqs (dbproj i D))\""], ["proof (prove)\nusing this:\n  Di' \\<in> set (subseqs D)\n\ngoal (1 subgoal):\n 1. Di' \\<in> set (subseqs (dbproj i D))", "using Cons.IH Cons.prems Di'"], ["proof (prove)\nusing this:\n  Di' \\<in> set (subseqs D)\n  \\<lbrakk>?Di \\<in> set (subseqs D);\n   list_all (\\<lambda>d. fst d = i) ?Di\\<rbrakk>\n  \\<Longrightarrow> ?Di \\<in> set (subseqs (dbproj i D))\n  Di \\<in> set (subseqs (di # D))\n  list_all (\\<lambda>d. fst d = i) Di\n  Di = di # Di'\n\ngoal (1 subgoal):\n 1. Di' \\<in> set (subseqs (dbproj i D))", "by auto"], ["proof (state)\nthis:\n  Di' \\<in> set (subseqs (dbproj i D))\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "moreover"], ["proof (state)\nthis:\n  Di' \\<in> set (subseqs (dbproj i D))\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "have \"i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "using Di' di Cons.prems(2)"], ["proof (prove)\nusing this:\n  Di = di # Di'\n  di = (j, d)\n  list_all (\\<lambda>d. fst d = i) Di\n\ngoal (1 subgoal):\n 1. i = j", "by auto"], ["proof (state)\nthis:\n  i = j\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "hence \"dbproj i (di#D) = di#dbproj i D\""], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. dbproj i (di # D) = di # dbproj i D", "by (simp add: di)"], ["proof (state)\nthis:\n  dbproj i (di # D) = di # dbproj i D\n\ngoal (1 subgoal):\n 1. Di \\<notin> set (subseqs D) \\<Longrightarrow>\n    Di \\<in> set (subseqs (dbproj i (di # D)))", "ultimately"], ["proof (chain)\npicking this:\n  Di' \\<in> set (subseqs (dbproj i D))\n  dbproj i (di # D) = di # dbproj i D", "show ?thesis"], ["proof (prove)\nusing this:\n  Di' \\<in> set (subseqs (dbproj i D))\n  dbproj i (di # D) = di # dbproj i D\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i (di # D)))", "using Di'"], ["proof (prove)\nusing this:\n  Di' \\<in> set (subseqs (dbproj i D))\n  dbproj i (di # D) = di # dbproj i D\n  Di = di # Di'\n\ngoal (1 subgoal):\n 1. Di \\<in> set (subseqs (dbproj i (di # D)))", "by (metis (no_types, lifting) UnCI image_eqI set_append set_map subseqs.simps(2))"], ["proof (state)\nthis:\n  Di \\<in> set (subseqs (dbproj i (di # D)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Di \\<in> set (subseqs (dbproj i (di # D)))\n\ngoal (1 subgoal):\n 1. \\<And>Di.\n       \\<lbrakk>Di \\<in> set (subseqs []);\n        list_all (\\<lambda>d. fst d = i) Di\\<rbrakk>\n       \\<Longrightarrow> Di \\<in> set (subseqs (dbproj i []))", "qed simp"], ["", "lemma unlabel_subst: \"unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> = unlabel (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n    unlabel (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)", "unfolding unlabel_def subst_apply_stateful_strand_def subst_apply_labeled_stateful_strand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n     (map snd S) =\n    map snd\n     (map (\\<lambda>x.\n              x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n       S)", "by auto"], ["", "lemma subterms_subst_lsst:\n  assumes \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S). (\\<exists>f. \\<sigma> x = Fun f []) \\<or> (\\<exists>y. \\<sigma> x = Var y)\"\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<sigma> = {}\"\n  shows \"subterms\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = subterms\\<^sub>s\\<^sub>e\\<^sub>t (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>", "using subterms_subst''[OF assms(1)] trms\\<^sub>s\\<^sub>s\\<^sub>t_subst[OF assms(2)] unlabel_subst[of S \\<sigma>]"], ["proof (prove)\nusing this:\n  subterms\\<^sub>s\\<^sub>e\\<^sub>t\n   (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>) =\n  subterms\\<^sub>s\\<^sub>e\\<^sub>t\n   (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n  \\<sigma>\n  trms\\<^sub>s\\<^sub>s\\<^sub>t\n   (unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n  \\<sigma>\n  unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma> =\n  unlabel (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)\n\ngoal (1 subgoal):\n 1. subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>", "by simp"], ["", "lemma subterms_subst_lsst_ik:\n  assumes \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S). (\\<exists>f. \\<sigma> x = Fun f []) \\<or> (\\<exists>y. \\<sigma> x = Var y)\"\n  shows \"subterms\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) = subterms\\<^sub>s\\<^sub>e\\<^sub>t (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>", "using subterms_subst''[OF assms(1)] ik\\<^sub>s\\<^sub>s\\<^sub>t_subst[of \"unlabel S\" \\<sigma>] unlabel_subst[of S \\<sigma>]"], ["proof (prove)\nusing this:\n  subterms\\<^sub>s\\<^sub>e\\<^sub>t\n   (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>) =\n  subterms\\<^sub>s\\<^sub>e\\<^sub>t\n   (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n  \\<sigma>\n  ik\\<^sub>s\\<^sub>s\\<^sub>t\n   (unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>) =\n  ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n  \\<sigma>\n  unlabel S \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma> =\n  unlabel (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)\n\ngoal (1 subgoal):\n 1. subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<sigma>)) =\n    subterms\\<^sub>s\\<^sub>e\\<^sub>t\n     (ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<sigma>", "by simp"], ["", "lemma labeled_stateful_strand_subst_comp:\n  assumes \"range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = {}\"\n  shows \"S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<circ>\\<^sub>s \\<theta> = (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "using assms"], ["proof (prove)\nusing this:\n  range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = {}\n\ngoal (1 subgoal):\n 1. S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "proof (induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>\n 2. \\<And>a S.\n       \\<lbrakk>range_vars \\<delta> \\<inter>\n                bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n                {} \\<Longrightarrow>\n                S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<theta>;\n        range_vars \\<delta> \\<inter>\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n        {}\\<rbrakk>\n       \\<Longrightarrow> a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                         (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta>", "case (Cons s S)"], ["proof (state)\nthis:\n  range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n  {} \\<Longrightarrow>\n  S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<theta>\n  range_vars \\<delta> \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) =\n  {}\n\ngoal (2 subgoals):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>\n 2. \\<And>a S.\n       \\<lbrakk>range_vars \\<delta> \\<inter>\n                bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n                {} \\<Longrightarrow>\n                S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<theta>;\n        range_vars \\<delta> \\<inter>\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n        {}\\<rbrakk>\n       \\<Longrightarrow> a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                         (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta>", "obtain l x where s: \"s = (l,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l x. s = (l, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  s = (l, x)\n\ngoal (2 subgoals):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>\n 2. \\<And>a S.\n       \\<lbrakk>range_vars \\<delta> \\<inter>\n                bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n                {} \\<Longrightarrow>\n                S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<theta>;\n        range_vars \\<delta> \\<inter>\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n        {}\\<rbrakk>\n       \\<Longrightarrow> a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                         (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta>", "hence IH: \"S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> \\<circ>\\<^sub>s \\<theta> = (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>\""], ["proof (prove)\nusing this:\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "using Cons"], ["proof (prove)\nusing this:\n  s = (l, x)\n  range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n  {} \\<Longrightarrow>\n  S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<theta>\n  range_vars \\<delta> \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) =\n  {}\n\ngoal (1 subgoal):\n 1. S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "by auto"], ["proof (state)\nthis:\n  S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<theta>\n\ngoal (2 subgoals):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>\n 2. \\<And>a S.\n       \\<lbrakk>range_vars \\<delta> \\<inter>\n                bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n                {} \\<Longrightarrow>\n                S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<theta>;\n        range_vars \\<delta> \\<inter>\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n        {}\\<rbrakk>\n       \\<Longrightarrow> a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                         (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta>", "have \"x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta> \\<circ>\\<^sub>s \\<theta> = (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<theta>", "using s Cons.prems stateful_strand_step_subst_comp[of \\<delta> x \\<theta>]"], ["proof (prove)\nusing this:\n  s = (l, x)\n  range_vars \\<delta> \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) =\n  {}\n  range_vars \\<delta> \\<inter>\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p x) =\n  {} \\<Longrightarrow>\n  x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<theta>\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<theta>", "by auto"], ["proof (state)\nthis:\n  x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<theta>\n\ngoal (2 subgoals):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>\n 2. \\<And>a S.\n       \\<lbrakk>range_vars \\<delta> \\<inter>\n                bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S =\n                {} \\<Longrightarrow>\n                S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                \\<theta>;\n        range_vars \\<delta> \\<inter>\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n        {}\\<rbrakk>\n       \\<Longrightarrow> a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<delta> \\<circ>\\<^sub>s \\<theta> =\n                         (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         \\<theta>", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<theta>\n\ngoal (1 subgoal):\n 1. s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "using s IH"], ["proof (prove)\nusing this:\n  x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   \\<delta>) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n  \\<theta>\n  s = (l, x)\n  S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<theta>\n\ngoal (1 subgoal):\n 1. s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "by (simp add: subst_apply_labeled_stateful_strand_def)"], ["proof (state)\nthis:\n  s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta> \\<circ>\\<^sub>s \\<theta> =\n  (s # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<theta>\n\ngoal (1 subgoal):\n 1. range_vars \\<delta> \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] =\n    {} \\<Longrightarrow>\n    [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta> \\<circ>\\<^sub>s \\<theta> =\n    ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<delta>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>", "qed simp"], ["", "lemma sst_vars_proj_subset[simp]:\n  \"fv\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"bvars\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> bvars\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"vars\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> vars\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "using vars\\<^sub>s\\<^sub>s\\<^sub>t_is_fv\\<^sub>s\\<^sub>s\\<^sub>t_bvars\\<^sub>s\\<^sub>s\\<^sub>t[of \"unlabel A\"]\n      vars\\<^sub>s\\<^sub>s\\<^sub>t_is_fv\\<^sub>s\\<^sub>s\\<^sub>t_bvars\\<^sub>s\\<^sub>s\\<^sub>t[of \"proj_unl n A\"]"], ["proof (prove)\nusing this:\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "unfolding unlabel_def proj_def"], ["proof (prove)\nusing this:\n  vars\\<^sub>s\\<^sub>s\\<^sub>t (map snd A) =\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (map snd A) \\<union>\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  vars\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)) =\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)) \\<union>\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t (map snd A) &&&\n    bvars\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> bvars\\<^sub>s\\<^sub>s\\<^sub>t (map snd A) &&&\n    vars\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> vars\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)", "by auto"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset[simp]:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\" (is ?A)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\" (is ?B)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m A)\" (is ?C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n 2. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n 3. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "show ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "unfolding unlabel_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)", "by auto"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n 2. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "show ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_mono[OF proj_proj_set_subset(4)]"], ["proof (prove)\nusing this:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj ?n1 (proj ?m1 ?A1))\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj ?m1 ?A1)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)", "by metis"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "show ?C"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_mono[OF proj_proj_set_subset(3)]"], ["proof (prove)\nusing this:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj ?n1 (proj ?m1 ?A1))\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj ?n1 ?A1)\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)", "by metis"], ["proof (state)\nthis:\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_prefix_subset:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\" (is ?A)\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\" (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_mono[of \"proj_unl n A\" \"proj_unl n (A@B)\"]"], ["proof (prove)\nusing this:\n  set (proj_unl n A) \\<subseteq> set (proj_unl n (A @ B)) \\<Longrightarrow>\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "unfolding unlabel_def proj_def"], ["proof (prove)\nusing this:\n  set (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> set (map snd\n                    (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                      (A @ B))) \\<Longrightarrow>\n  trms\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n\ngoal (1 subgoal):\n 1. trms\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n    \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B)) &&&\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (A @ B)))", "by auto"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_suffix_subset:\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel B) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n B) \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "using trms\\<^sub>s\\<^sub>s\\<^sub>t_mono[of \"proj_unl n B\" \"proj_unl n (A@B)\"]"], ["proof (prove)\nusing this:\n  set (proj_unl n B) \\<subseteq> set (proj_unl n (A @ B)) \\<Longrightarrow>\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B)\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "unfolding unlabel_def proj_def"], ["proof (prove)\nusing this:\n  set (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> set (map snd\n                    (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                      (A @ B))) \\<Longrightarrow>\n  trms\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n\ngoal (1 subgoal):\n 1. trms\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B)) &&&\n    trms\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> trms\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (A @ B)))", "by auto"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>pD:\n  assumes p: \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\"\n  shows \"fst p = fst a\" (is ?P)\n    and \"is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)\" (is ?Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst p = fst a &&&\n    is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fst p = fst a\n 2. is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "obtain l k p' a' where a: \"p = (l,p')\" \"a = (k,a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l p' k a'.\n        \\<lbrakk>p = (l, p'); a = (k, a')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  p = (l, p')\n  a = (k, a')\n\ngoal (2 subgoals):\n 1. fst p = fst a\n 2. is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "show ?P"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst p = fst a", "using p a"], ["proof (prove)\nusing this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  p = (l, p')\n  a = (k, a')\n\ngoal (1 subgoal):\n 1. fst p = fst a", "by (cases a') auto"], ["proof (state)\nthis:\n  fst p = fst a\n\ngoal (1 subgoal):\n 1. is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "show ?Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "using p a"], ["proof (prove)\nusing this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  p = (l, p')\n  a = (k, a')\n\ngoal (1 subgoal):\n 1. is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)", "by (cases a') auto"], ["proof (state)\nthis:\n  is_Update (snd a) \\<or> is_InSet (snd a) \\<or> is_NegChecks (snd a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_nil[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = {}", "by (simp add: setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_cons[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (x#S) = setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p x \\<union> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (x # S) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p x \\<union>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S", "by (simp add: setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A)) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m (proj n A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl m A)", "unfolding unlabel_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     A)) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))", "proof (induction A)"], ["proof (state)\ngoal (6 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (a # A))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 6. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "case (Cons a A)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n\ngoal (6 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (a # A))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 6. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "obtain l b where lb: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (6 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (a # A))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 6. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "{"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (6 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (a # A))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 6. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (a # A))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 6. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n\ngoal (5 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n\ngoal (5 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "{"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n\ngoal (5 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n 5. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (a # A)))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (a # A)))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (a # A)))\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (a # A)))\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "{"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (a # A)))\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A);\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         A));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd\n           (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n             (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                         A))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                              (filter\n                                (\\<lambda>s.\n                                    is_LabelN n s \\<or> is_LabelS s)\n                                (a # A))))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) (a # A)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     (a # A)))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s) A))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     (a # A)))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                   (a # A)))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd\n     (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A))))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                   (a # A)))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     []))\n 3. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n         (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) [])))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n                     []))", "qed simp_all"], ["", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_prefix_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel A)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A @ B)) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n A)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A @ B))", "unfolding unlabel_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B)) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (A @ B)))", "proof (induction A)"], ["proof (state)\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case (Cons a A)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "obtain l b where lb: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "{"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "{"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (a # A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              (a # A)))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ((a # A) @ B)))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd A)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd\n       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ((a # A) @ B)))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   ((a # A) @ B)))\n\ngoal (2 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) (a # A)))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   ((a # A) @ B)))\n\ngoal (2 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd [])\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) []))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))", "qed (simp_all add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_suffix_subset:\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel B) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A@B))\"\n  \"setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n B) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A@B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (A @ B)) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl n (A @ B))", "unfolding unlabel_def proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B)) &&&\n    setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     (A @ B)))", "proof (induction A)"], ["proof (state)\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case (Cons a A)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "obtain l b where lb: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "{"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd ((a # A) @ B))\n 4. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "{"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ((a # A) @ B))\n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))\n 3. \\<And>a A.\n       \\<lbrakk>setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n                \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                             (map snd (A @ B));\n        setops\\<^sub>s\\<^sub>s\\<^sub>t\n         (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n        \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                     (map snd\n                       (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                         (A @ B)))\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                          (map snd\n                            (filter\n                              (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                              B))\n                         \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n(map snd\n  (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) ((a # A) @ B)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ((a # A) @ B)))", "using Cons.IH lb"], ["proof (prove)\nusing this:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd (A @ B))\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   (A @ B)))\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ((a # A) @ B)))", "by (cases b) (auto simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   ((a # A) @ B)))\n\ngoal (2 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))", "}"], ["proof (state)\nthis:\n  setops\\<^sub>s\\<^sub>s\\<^sub>t\n   (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n  \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n               (map snd\n                 (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                   ((a # A) @ B)))\n\ngoal (2 subgoals):\n 1. setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd B)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (map snd ([] @ B))\n 2. setops\\<^sub>s\\<^sub>s\\<^sub>t\n     (map snd (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t\n                 (map snd\n                   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                     ([] @ B)))", "qed simp_all"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A)) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A &&&\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj m (proj n A))\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)", "unfolding proj_def setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set A) &&&\n    \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set (filter (\\<lambda>s. is_LabelN m s \\<or> is_LabelS s)\n            (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A)))\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                        A))", "by auto"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_prefix_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B)\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A@B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n A)\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "unfolding proj_def setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set A)\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set (A @ B)) &&&\n    \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) A))\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                        (A @ B)))", "by auto"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_suffix_subset:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@B)\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A@B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t B\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A @ B) &&&\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n B)\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (A @ B))", "unfolding proj_def setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set B)\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set (A @ B)) &&&\n    \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B))\n    \\<subseteq> \\<Union>\n                 (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n                  set (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n                        (A @ B)))", "by auto"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_mono:\n  \"set M \\<subseteq> set N \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t M \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set M \\<subseteq> set N \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t M\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t N", "by (auto simp add: setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma trms\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> list_ex (is_LabelN l) A \\<Longrightarrow>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)", "by (rule trms\\<^sub>s\\<^sub>s\\<^sub>t_mono[OF proj_subset_if_no_label(2)[of l A l']])"], ["", "lemma setops\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l A) \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l' A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> list_ex (is_LabelN l) A \\<Longrightarrow>\n    setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l A)\n    \\<subseteq> setops\\<^sub>s\\<^sub>s\\<^sub>t (proj_unl l' A)", "by (rule setops\\<^sub>s\\<^sub>s\\<^sub>t_mono[OF proj_subset_if_no_label(2)[of l A l']])"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset_if_no_label:\n  \"\\<not>list_ex (is_LabelN l) A \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A) \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> list_ex (is_LabelN l) A \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l A)\n    \\<subseteq> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj l' A)", "by (rule setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_mono[OF proj_subset_if_no_label(1)[of l A l']])"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst_cases[simp]:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) = {(l,t \\<cdot> \\<delta>,s \\<cdot> \\<delta>)}\"\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ((l,\\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) =\n    ((\\<lambda>(t,s). (l,t \\<cdot> rm_vars (set X) \\<delta>,s \\<cdot> rm_vars (set X) \\<delta>)) ` set F')\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<delta>) =\n     {} &&&\n     setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<delta>) =\n     {} &&&\n     setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, \\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<delta>) =\n     {}) &&&\n    (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<delta>) =\n     {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)} &&&\n     setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      ((l, delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n       \\<delta>) =\n     {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}) &&&\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)} &&&\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s).\n        (l, t \\<cdot> rm_vars (set X) \\<delta>,\n         s \\<cdot> rm_vars (set X) \\<delta>)) `\n    set F'", "proof -"], ["proof (state)\ngoal (7 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 2. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 3. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 4. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 5. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 6. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 7. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s).\n        (l, t \\<cdot> rm_vars (set X) \\<delta>,\n         s \\<cdot> rm_vars (set X) \\<delta>)) `\n    set F'", "have \"?A = (\\<lambda>(t,s). (l,t,s)) ` set (F' \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s rm_vars (set X) \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s). (l, t, s)) `\n    set (F' \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s\n         rm_vars (set X) \\<delta>)", "by auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>) =\n  (\\<lambda>(t, s). (l, t, s)) `\n  set (F' \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s\n       rm_vars (set X) \\<delta>)\n\ngoal (7 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 2. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 3. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 4. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 5. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 6. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 7. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s).\n        (l, t \\<cdot> rm_vars (set X) \\<delta>,\n         s \\<cdot> rm_vars (set X) \\<delta>)) `\n    set F'", "thus \"?A = ?B\""], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>) =\n  (\\<lambda>(t, s). (l, t, s)) `\n  set (F' \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s\n       rm_vars (set X) \\<delta>)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s).\n        (l, t \\<cdot> rm_vars (set X) \\<delta>,\n         s \\<cdot> rm_vars (set X) \\<delta>)) `\n    set F'", "unfolding subst_apply_pairs_def"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>) =\n  (\\<lambda>(t, s). (l, t, s)) `\n  set (map (\\<lambda>f. f \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>) F')\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    (\\<lambda>(t, s).\n        (l, t \\<cdot> rm_vars (set X) \\<delta>,\n         s \\<cdot> rm_vars (set X) \\<delta>)) `\n    set F'", "by auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>) =\n  (\\<lambda>(t, s).\n      (l, t \\<cdot> rm_vars (set X) \\<delta>,\n       s \\<cdot> rm_vars (set X) \\<delta>)) `\n  set F'\n\ngoal (6 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, send\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 2. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, receive\\<langle>t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 3. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: s \\<doteq> t\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {}\n 4. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, insert\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 5. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, delete\\<langle>t,s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}\n 6. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     ((l, \\<langle>ac: t \\<in> s\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n      \\<delta>) =\n    {(l, t \\<cdot> \\<delta>, s \\<cdot> \\<delta>)}", "qed simp_all"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst:\n  assumes \"set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) = (\\<lambda>p. (fst a,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "obtain l a' where a: \"a = (l,a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l a'. a = (l, a') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, a')\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "proof (cases a')"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "case (NegChecks X F G)"], ["proof (state)\nthis:\n  a' = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "hence *: \"rm_vars (set X) \\<theta> = \\<theta>\""], ["proof (prove)\nusing this:\n  a' = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n\ngoal (1 subgoal):\n 1. rm_vars (set X) \\<theta> = \\<theta>", "using a assms rm_vars_apply'[of \\<theta> \"set X\"]"], ["proof (prove)\nusing this:\n  a' = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n  a = (l, a')\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n  subst_domain \\<theta> =\n  {}\n  subst_domain \\<theta> \\<inter> set X = {} \\<Longrightarrow>\n  rm_vars (set X) \\<theta> = \\<theta>\n\ngoal (1 subgoal):\n 1. rm_vars (set X) \\<theta> = \\<theta>", "by auto"], ["proof (state)\nthis:\n  rm_vars (set X) \\<theta> = \\<theta>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "have \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) = (\\<lambda>p. (fst a, p)) ` set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    Pair (fst a) `\n    set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)", "using * NegChecks a"], ["proof (prove)\nusing this:\n  rm_vars (set X) \\<theta> = \\<theta>\n  a' = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n  a = (l, a')\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    Pair (fst a) `\n    set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)", "by auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  Pair (fst a) `\n  set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "moreover"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  Pair (fst a) `\n  set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "have \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = (\\<lambda>p. (fst a, p)) ` set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = Pair (fst a) ` set G", "using NegChecks a"], ["proof (prove)\nusing this:\n  a' = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>\n  a = (l, a')\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = Pair (fst a) ` set G", "by simp"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = Pair (fst a) ` set G\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "hence \"(\\<lambda>p. (fst a,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = (\\<lambda>p. (fst a, p \\<cdot>\\<^sub>p \\<theta>)) ` set G\""], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = Pair (fst a) ` set G\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n    (\\<lambda>p. (fst a, p \\<cdot>\\<^sub>p \\<theta>)) ` set G", "by (metis (mono_tags, lifting) image_cong image_image snd_conv)"], ["proof (state)\nthis:\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  (\\<lambda>p. (fst a, p \\<cdot>\\<^sub>p \\<theta>)) ` set G\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "hence \"(\\<lambda>p. (fst a,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a = (\\<lambda>p. (fst a, p)) ` (set G \\<cdot>\\<^sub>p\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>)\""], ["proof (prove)\nusing this:\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  (\\<lambda>p. (fst a, p \\<cdot>\\<^sub>p \\<theta>)) ` set G\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n    Pair (fst a) ` (set G \\<cdot>\\<^sub>p\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>)", "unfolding case_prod_unfold"], ["proof (prove)\nusing this:\n  (\\<lambda>p.\n      (fst a, fst (snd p) \\<cdot> \\<theta>, snd (snd p) \\<cdot> \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  (\\<lambda>p. (fst a, fst p \\<cdot> \\<theta>, snd p \\<cdot> \\<theta>)) `\n  set G\n\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        (fst a, fst (snd p) \\<cdot> \\<theta>,\n         snd (snd p) \\<cdot> \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n    Pair (fst a) `\n    (\\<lambda>d. (fst d \\<cdot> \\<theta>, snd d \\<cdot> \\<theta>)) ` set G", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  Pair (fst a) ` (set G \\<cdot>\\<^sub>p\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 7. \\<And>x71 x72 x73.\n       a' =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "ultimately"], ["proof (chain)\npicking this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  Pair (fst a) `\n  set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  Pair (fst a) ` (set G \\<cdot>\\<^sub>p\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>)", "show ?thesis"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  Pair (fst a) `\n  set (G \\<cdot>\\<^sub>p\\<^sub>a\\<^sub>i\\<^sub>r\\<^sub>s \\<theta>)\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a =\n  Pair (fst a) ` (set G \\<cdot>\\<^sub>p\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "by (simp add: subst_apply_pairs_def)"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       a' = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 2. \\<And>x2.\n       a' = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 3. \\<And>x31 x32 x33.\n       a' = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 4. \\<And>x41 x42.\n       a' = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 5. \\<And>x51 x52.\n       a' = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n 6. \\<And>x61 x62 x63.\n       a' = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n        (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n       (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "qed (use a in simp_all)"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst':\n  assumes \"set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) = (\\<lambda>(i,p). (i,p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>(i, p). (i, p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "using setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst[OF assms] setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>pD(1)"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>p. (fst a, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  ?p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n            ?a \\<Longrightarrow>\n  fst ?p = fst ?a\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>(i, p). (i, p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "unfolding case_prod_unfold"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>p.\n      (fst a, fst (snd p) \\<cdot> \\<theta>, snd (snd p) \\<cdot> \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  ?p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n            ?a \\<Longrightarrow>\n  fst ?p = fst ?a\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n     (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n    (\\<lambda>p.\n        (fst p, fst (snd p) \\<cdot> \\<theta>,\n         snd (snd p) \\<cdot> \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a", "by (metis (mono_tags, lifting) image_cong)"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst:\n  assumes \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> = {}\"\n  shows \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (\\<lambda>p. (fst p,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S", "using assms"], ["proof (prove)\nusing this:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {}\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S", "proof (induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<inter>\n    subst_domain \\<theta> =\n    {} \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a S.\n       \\<lbrakk>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter>\n                subst_domain \\<theta> =\n                {} \\<Longrightarrow>\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n                (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S;\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n        subst_domain \\<theta> =\n        {}\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<theta>) =\n                         (\\<lambda>p.\n                             (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                         setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "case (Cons a S)"], ["proof (state)\nthis:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {} \\<Longrightarrow>\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n  (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n  subst_domain \\<theta> =\n  {}\n\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<inter>\n    subst_domain \\<theta> =\n    {} \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a S.\n       \\<lbrakk>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter>\n                subst_domain \\<theta> =\n                {} \\<Longrightarrow>\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n                (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S;\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n        subst_domain \\<theta> =\n        {}\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<theta>) =\n                         (\\<lambda>p.\n                             (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                         setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "have \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> = {}\" and *: \"set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter> subst_domain \\<theta> = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n    {} &&&\n    set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n    subst_domain \\<theta> =\n    {}", "using Cons.prems"], ["proof (prove)\nusing this:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n  subst_domain \\<theta> =\n  {}\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n    {} &&&\n    set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n    subst_domain \\<theta> =\n    {}", "by auto"], ["proof (state)\nthis:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {}\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n  subst_domain \\<theta> =\n  {}\n\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<inter>\n    subst_domain \\<theta> =\n    {} \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a S.\n       \\<lbrakk>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter>\n                subst_domain \\<theta> =\n                {} \\<Longrightarrow>\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n                (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S;\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n        subst_domain \\<theta> =\n        {}\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<theta>) =\n                         (\\<lambda>p.\n                             (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                         setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "hence IH: \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (\\<lambda>p. (fst p,snd p \\<cdot>\\<^sub>p \\<theta>)) ` setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\""], ["proof (prove)\nusing this:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {}\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n  subst_domain \\<theta> =\n  {}\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S", "using Cons.IH"], ["proof (prove)\nusing this:\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {}\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<inter>\n  subst_domain \\<theta> =\n  {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter> subst_domain \\<theta> =\n  {} \\<Longrightarrow>\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n  (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S", "by auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n  (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\n\ngoal (2 subgoals):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<inter>\n    subst_domain \\<theta> =\n    {} \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a S.\n       \\<lbrakk>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S \\<inter>\n                subst_domain \\<theta> =\n                {} \\<Longrightarrow>\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n                (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S;\n        bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) \\<inter>\n        subst_domain \\<theta> =\n        {}\\<rbrakk>\n       \\<Longrightarrow> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           \\<theta>) =\n                         (\\<lambda>p.\n                             (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n                         setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "using setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst'[OF *] IH"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>(i, p). (i, p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n  (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)", "unfolding setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def case_prod_unfold subst_lsst_cons"], ["proof (prove)\nusing this:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) =\n  (\\<lambda>p.\n      (fst p, fst (snd p) \\<cdot> \\<theta>, snd (snd p) \\<cdot> \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  \\<Union>\n   (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n    set (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) =\n  (\\<lambda>p.\n      (fst p, fst (snd p) \\<cdot> \\<theta>, snd (snd p) \\<cdot> \\<theta>)) `\n  \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set S)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set ((a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))) =\n    (\\<lambda>p.\n        (fst p, fst (snd p) \\<cdot> \\<theta>,\n         snd (snd p) \\<cdot> \\<theta>)) `\n    \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set (a # S))", "by auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n  (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S)\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] \\<inter>\n    subst_domain \\<theta> =\n    {} \\<Longrightarrow>\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n    (\\<lambda>p. (fst p, snd p \\<cdot>\\<^sub>p \\<theta>)) `\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed (simp add: setops\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_in_subst:\n  assumes p: \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\"\n  shows \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a. fst p = fst q \\<and> snd p = snd q \\<cdot>\\<^sub>p rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<delta>\"\n    (is \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a. ?P q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       snd p =\n       snd q \\<cdot>\\<^sub>p\n       rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n        \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       snd p =\n       snd q \\<cdot>\\<^sub>p\n       rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n        \\<delta>", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       snd p =\n       snd q \\<cdot>\\<^sub>p\n       rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n        \\<delta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       snd p =\n       snd q \\<cdot>\\<^sub>p\n       rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n        \\<delta>", "proof (cases b)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "case (NegChecks X F F')"], ["proof (state)\nthis:\n  b = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "hence \"p \\<in> (\\<lambda>(t, s). (l, t \\<cdot> rm_vars (set X) \\<delta>, s \\<cdot> rm_vars (set X) \\<delta>)) ` set F'\""], ["proof (prove)\nusing this:\n  b = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (1 subgoal):\n 1. p \\<in> (\\<lambda>(t, s).\n                (l, t \\<cdot> rm_vars (set X) \\<delta>,\n                 s \\<cdot> rm_vars (set X) \\<delta>)) `\n            set F'", "using p a setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_subst_cases(7)[of l X F F' \\<delta>]"], ["proof (prove)\nusing this:\n  b = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n  a = (l, b)\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   ((l, \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n    \\<delta>) =\n  (\\<lambda>(t, s).\n      (l, t \\<cdot> rm_vars (set X) \\<delta>,\n       s \\<cdot> rm_vars (set X) \\<delta>)) `\n  set F'\n\ngoal (1 subgoal):\n 1. p \\<in> (\\<lambda>(t, s).\n                (l, t \\<cdot> rm_vars (set X) \\<delta>,\n                 s \\<cdot> rm_vars (set X) \\<delta>)) `\n            set F'", "by blast"], ["proof (state)\nthis:\n  p \\<in> (\\<lambda>(t, s).\n              (l, t \\<cdot> rm_vars (set X) \\<delta>,\n               s \\<cdot> rm_vars (set X) \\<delta>)) `\n          set F'\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "then"], ["proof (chain)\npicking this:\n  p \\<in> (\\<lambda>(t, s).\n              (l, t \\<cdot> rm_vars (set X) \\<delta>,\n               s \\<cdot> rm_vars (set X) \\<delta>)) `\n          set F'", "obtain s t where st:\n        \"(t,s) \\<in> set F'\" \"p = (l, t \\<cdot> rm_vars (set X) \\<delta>, s \\<cdot> rm_vars (set X) \\<delta>)\""], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>(t, s).\n              (l, t \\<cdot> rm_vars (set X) \\<delta>,\n               s \\<cdot> rm_vars (set X) \\<delta>)) `\n          set F'\n\ngoal (1 subgoal):\n 1. (\\<And>t s.\n        \\<lbrakk>(t, s) \\<in> set F';\n         p =\n         (l, t \\<cdot> rm_vars (set X) \\<delta>,\n          s \\<cdot> rm_vars (set X) \\<delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (t, s) \\<in> set F'\n  p =\n  (l, t \\<cdot> rm_vars (set X) \\<delta>,\n   s \\<cdot> rm_vars (set X) \\<delta>)\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "hence \"(l,t,s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\" \"fst p = fst (l,t,s)\"\n          \"snd p = snd (l,t,s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>\""], ["proof (prove)\nusing this:\n  (t, s) \\<in> set F'\n  p =\n  (l, t \\<cdot> rm_vars (set X) \\<delta>,\n   s \\<cdot> rm_vars (set X) \\<delta>)\n\ngoal (1 subgoal):\n 1. (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a &&&\n    fst p = fst (l, t, s) &&&\n    snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>", "using a NegChecks"], ["proof (prove)\nusing this:\n  (t, s) \\<in> set F'\n  p =\n  (l, t \\<cdot> rm_vars (set X) \\<delta>,\n   s \\<cdot> rm_vars (set X) \\<delta>)\n  a = (l, b)\n  b = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (1 subgoal):\n 1. (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a &&&\n    fst p = fst (l, t, s) &&&\n    snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>", "by fastforce+"], ["proof (state)\nthis:\n  (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  fst p = fst (l, t, s)\n  snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "moreover"], ["proof (state)\nthis:\n  (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  fst p = fst (l, t, s)\n  snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "have \"bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X", "using NegChecks a"], ["proof (prove)\nusing this:\n  b = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X", "by auto"], ["proof (state)\nthis:\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 7. \\<And>x71 x72 x73.\n       b =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "ultimately"], ["proof (chain)\npicking this:\n  (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  fst p = fst (l, t, s)\n  snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X", "show ?thesis"], ["proof (prove)\nusing this:\n  (l, t, s) \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  fst p = fst (l, t, s)\n  snd p = snd (l, t, s) \\<cdot>\\<^sub>p rm_vars (set X) \\<delta>\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a) = X\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       snd p =\n       snd q \\<cdot>\\<^sub>p\n       rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n        \\<delta>", "by blast"], ["proof (state)\nthis:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n     fst p = fst q \\<and>\n     snd p =\n     snd q \\<cdot>\\<^sub>p\n     rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<delta>\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       b = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 2. \\<And>x2.\n       b = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 3. \\<And>x31 x32 x33.\n       b = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 4. \\<And>x41 x42.\n       b = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 5. \\<And>x51 x52.\n       b = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>\n 6. \\<And>x61 x62 x63.\n       b = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n          fst p = fst q \\<and>\n          snd p =\n          snd q \\<cdot>\\<^sub>p\n          rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)))\n           \\<delta>", "qed (use p a in auto)"], ["proof (state)\nthis:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n     fst p = fst q \\<and>\n     snd p =\n     snd q \\<cdot>\\<^sub>p\n     rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_in_subst:\n  assumes \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\"\n  shows \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. fst p = fst q \\<and> (\\<exists>X \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\"\n    (is \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A. ?P A q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. \\<And>a A.\n       \\<lbrakk>p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n                   fst p = fst q \\<and>\n                   (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    A.\n                       snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>);\n        p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # A).\n                            fst p = fst q \\<and>\n                            (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (a # A).\n                                snd p =\n                                snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "case (Cons a A)"], ["proof (state)\nthis:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            \\<delta>) \\<Longrightarrow>\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n     fst p = fst q \\<and>\n     (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n         snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. \\<And>a A.\n       \\<lbrakk>p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n                   fst p = fst q \\<and>\n                   (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    A.\n                       snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>);\n        p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # A).\n                            fst p = fst q \\<and>\n                            (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (a # A).\n                                snd p =\n                                snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "note 0 = unlabel_Cons(2)[of a A] bvars\\<^sub>s\\<^sub>s\\<^sub>t_Cons[of \"snd a\" \"unlabel A\"]"], ["proof (state)\nthis:\n  unlabel (a # A) = snd a # unlabel A\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t (snd a # unlabel A) =\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. \\<And>a A.\n       \\<lbrakk>p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>) \\<Longrightarrow>\n                \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A.\n                   fst p = fst q \\<and>\n                   (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    A.\n                       snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>);\n        p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<delta>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (a # A).\n                            fst p = fst q \\<and>\n                            (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (a # A).\n                                snd p =\n                                snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "proof (cases \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "case False"], ["proof (state)\nthis:\n  p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "hence \"p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\""], ["proof (prove)\nusing this:\n  p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (1 subgoal):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)", "using Cons.prems setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_cons[of \"a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>\" \"A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"] subst_lsst_cons[of a A \\<delta>]"], ["proof (prove)\nusing this:\n  p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) #\n    (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)) =\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n   (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) \\<union>\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n  a # A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta> =\n  (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>) #\n  (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)\n\ngoal (1 subgoal):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n             (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)", "by auto"], ["proof (state)\nthis:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "moreover"], ["proof (state)\nthis:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "have \"(set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n    \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using 0"], ["proof (prove)\nusing this:\n  unlabel (a # A) = snd a # unlabel A\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t (snd a # unlabel A) =\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a)) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n    \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "by simp"], ["proof (state)\nthis:\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n  \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n  \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "have \"\\<exists>q \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a. ?P (a#A) q\""], ["proof (prove)\nusing this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n  \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "using setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p_in_subst[of p a \\<delta>]"], ["proof (prove)\nusing this:\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<delta>)\n  set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))\n  \\<subseteq> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n  p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n           (a \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n            \\<delta>) \\<Longrightarrow>\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n     fst p = fst q \\<and>\n     snd p =\n     snd q \\<cdot>\\<^sub>p\n     rm_vars (set (bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (snd a))) \\<delta>\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n     fst p = fst q \\<and>\n     (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n         snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n\ngoal (2 subgoals):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n 2. p \\<notin> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a.\n     fst p = fst q \\<and>\n     (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n         snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n     fst p = fst q \\<and>\n     (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n         snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n\ngoal (1 subgoal):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "qed (use Cons.IH 0 in auto)"], ["proof (state)\nthis:\n  \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n     fst p = fst q \\<and>\n     (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A).\n         snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)\n\ngoal (1 subgoal):\n 1. p \\<in> setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             ([] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              \\<delta>) \\<Longrightarrow>\n    \\<exists>q\\<in>setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n       fst p = fst q \\<and>\n       (\\<exists>X\\<subseteq>bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [].\n           snd p = snd q \\<cdot>\\<^sub>p rm_vars X \\<delta>)", "qed simp"], ["", "lemma setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq:\n  \"setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) = setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A", "proof (induction A)"], ["proof (state)\ngoal (2 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "case (Cons a A)"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (2 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "obtain l b where \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a A.\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<Longrightarrow>\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n       setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A) =\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)", "unfolding setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  a = (l, b)\n  \\<Union>\n   (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n    set (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p A)) =\n  \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set A)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p `\n      set (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (a # A))) =\n    \\<Union> (setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ` set (a # A))", "by (cases b) auto"], ["proof (state)\nthis:\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)) =\n  setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # A)\n\ngoal (1 subgoal):\n 1. setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []) =\n    setops\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t []", "qed simp"], ["", "end"]]}