{"file_name": "/home/qj213/afp-2021-10-22/thys/Buchi_Complementation/Complementation_Implement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Buchi_Complementation", "problem_names": ["lemma cs_abs_rep[simp]: \"cs_rep (cs_abs f) = f\"", "lemma cs_rep_lr[simp]: \"cs_lr (cs_rep (g, P)) = g\"", "lemma cs_rep_st[simp]: \"cs_st (cs_rep (g, P)) = P \\<inter> dom g\"", "lemma cs_lr_dom[simp]: \"dom (cs_lr f) = dom f\"", "lemma cs_lr_apply[simp]:\n    assumes \"p \\<in> dom f\"\n    shows \"the (cs_lr f p) = fst (the (f p))\"", "lemma cs_rep_dom[simp]: \"dom (cs_rep (g, P)) = dom g\"", "lemma cs_rep_apply[simp]:\n    assumes \"p \\<in> dom f\"\n    shows \"fst (the (cs_rep (f, P) p)) = the (f p)\"", "lemma cs_rel_inv_single_valued: \"single_valued (cs_rel\\<inverse>)\"", "lemma refresh_1_dom[simp]: \"dom (refresh_1 f) = dom f\"", "lemma refresh_1_apply[simp]: \"fst (the (refresh_1 f p)) = fst (the (f p))\"", "lemma refresh_1_cs_st[simp]: \"cs_st (refresh_1 f) = (if cs_st f = {} then dom f else cs_st f)\"", "lemma complement_succ_1_abs:\n    assumes \"g \\<in> complement_succ_1 A a f\"\n    shows \"cs_abs g \\<in> complement_succ A a (cs_abs f)\"", "lemma complement_succ_1_rep:\n    assumes \"P \\<subseteq> dom f\" \"(g, Q) \\<in> complement_succ A a (f, P)\"\n    shows \"cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (f, P))\"", "lemma complement_succ_1_refine: \"(complement_succ_1, complement_succ) \\<in>\n    Id \\<rightarrow> Id \\<rightarrow> cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle> set_rel\"", "lemma complement_1_refine: \"(complement_1, complement) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, cs_rel\\<rangle> nba_rel\"", "lemma ranks_2_refine: \"ranks_2 = ranks_1\"", "lemma complement_2_refine: \"(complement_2, complement_1) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, Id\\<rangle> nba_rel\"", "lemma bounds_3_dom[simp]: \"dom (bounds_3 A a f) = \\<Union>((transition A a) ` (dom f))\"", "lemma items_3_nonempty[intro!, simp]: \"items_3 A p s \\<noteq> {}\"", "lemma items_3_finite[intro!, simp]: \"finite (items_3 A p s)\"", "lemma get_3_dom[simp]: \"dom (get_3 A f) = dom f\"", "lemma get_3_finite[intro, simp]: \"S \\<in> ran (get_3 A f) \\<Longrightarrow> finite S\"", "lemma get_3_update[simp]: \"get_3 A (f (p \\<mapsto> s)) = (get_3 A f) (p \\<mapsto> items_3 A p s)\"", "lemma expand_map_get_bounds_3: \"expand_map \\<circ> get_3 A \\<circ> bounds_3 A a = ranks_2 A a\"", "lemma complement_succ_3_refine: \"complement_succ_3 = complement_succ_2\"", "lemma complement_initial_3_refine: \"{const (Some (2 * card (nodes A), False)) |` initial A} =\n    {(Some \\<circ> (const (2 * card (nodes A), False))) |` initial A}\"", "lemma complement_accepting_3_refine: \"True \\<notin> snd ` ran f \\<longleftrightarrow> (\\<forall> (p, k, c) \\<in> map_to_set f. \\<not> c)\"", "lemma complement_3_refine: \"(complement_3, complement_2) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, Id\\<rangle> nba_rel\"", "lemma get_4_dom[simp]: \"dom (get_4 A f) = dom f\"", "lemma bounds_R:\n    assumes \"(f, g) \\<in> R\"\n    assumes \"bounds_3 A a (refresh_1 f) p = Some (n, e)\"\n    assumes \"bounds_3 A a (refresh_1 g) p = Some (k, c)\"\n    shows \"n \\<le> k\" \"e \\<longleftrightarrow> c\"", "lemma complement_4_language_1: \"language (complement_3 A) \\<subseteq> language (complement_4 A)\"", "lemma complement_4_less: \"complement_4 A \\<le> complement_3 A\"", "lemma complement_4_language_2: \"language (complement_4 A) \\<subseteq> language (complement_3 A)\"", "lemma complement_4_language: \"language (complement_3 A) = language (complement_4 A)\"", "lemma complement_4_finite[simp]:\n    assumes \"finite (nodes A)\"\n    shows \"finite (nodes (complement_4 A))\"", "lemma complement_4_correct:\n    assumes \"finite (nodes A)\"\n    shows \"language (complement_4 A) = streams (alphabet A) - language A\"", "lemma bounds_3_empty: \"bounds_3 A a Map.empty = Map.empty\"", "lemma bounds_3_update: \"bounds_3 A a (f (p \\<mapsto> s)) =\n    override_on (bounds_3 A a f) (Some \\<circ> merge_5 s \\<circ> bounds_3 A a (f (p := None))) (transition A a p)\"", "lemma refresh_5_refine: \"(refresh_5, \\<lambda> f. RETURN (refresh_1 f)) \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\"", "lemma bounds_5_refine: \"(bounds_5 A a, \\<lambda> f. RETURN (bounds_3 A a f)) \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\"", "lemma items_5_refine: \"items_5 = items_4\"", "lemma get_5_refine: \"get_5 = get_4\"", "lemma expand_5_refine: \"(expand_5 f, ASSERT (finite (dom f)) \\<then> RETURN (expand_map f)) \\<in> \\<langle>Id\\<rangle> nres_rel\"", "lemma complement_succ_5_refine: \"(complement_succ_5, RETURN \\<circ>\\<circ>\\<circ> complement_succ_4) \\<in>\n    Id \\<rightarrow> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\"", "lemma expand_map_get_6_refine: \"(expand_map_get_6, expand_5 \\<circ>\\<circ> get_5) \\<in> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\"", "lemma complement_succ_6_refine:\n    \"(complement_succ_6, complement_succ_5) \\<in> Id \\<rightarrow> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\"", "lemma [simp]: \"finite (dom f)\"", "lemma refresh_7_refine: \"(\\<lambda> f. RETURN (refresh_7 f), refresh_5) \\<in> state_rel \\<rightarrow> \\<langle>state_rel\\<rangle> nres_rel\"", "lemma [simp]: \"finite (transition A a p)\"", "lemma [simp]: \"finite (dom f)\"", "lemma [autoref_op_pat]: \"transition A a \\<equiv> OP (transition A a)\"", "lemma [autoref_rules]: \"(min, min) \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> nat_rel\"", "lemma bounds_7_refine: \"(si, transition A a) \\<in> nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle> list_set_rel \\<Longrightarrow>\n    (\\<lambda> p. RETURN (bounds_7 si p), bounds_5 A a) \\<in>\n    state_rel \\<rightarrow> \\<langle>\\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel\\<rangle> nres_rel\"", "lemma [autoref_op_pat]: \"accepting A \\<equiv> OP (accepting A)\"", "lemma [autoref_rules]: \"((dvd), (dvd)) \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> bool_rel\"", "lemma [autoref_rules]: \"(\\<lambda> k l. upt k (Suc l), atLeastAtMost) \\<in>\n      nat_rel \\<rightarrow> nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle> list_set_rel\"", "lemma [simp]: \"finite (dom f)\"", "lemma [simp]:\n      assumes \"\\<And> m. m \\<in> S \\<Longrightarrow> x \\<notin> dom m\"\n      shows \"inj_on (\\<lambda> m. m (x \\<mapsto> y)) S\"", "lemmas [simp] = op_map_update_def[abs_def]", "lemma [autoref_op_pat]: \"items_5 A \\<equiv> OP (items_5 A)\"", "lemmas [autoref_rules] = items_7.refine[OF ai]", "lemma expand_map_get_7_refine:\n    assumes \"(ai, accepting A) \\<in> nat_rel \\<rightarrow> bool_rel\"\n    shows \"(\\<lambda> fi. RETURN (expand_map_get_7 ai fi),\n      \\<lambda> f. ASSUME (finite (dom f)) \\<then> expand_map_get_6 A f) \\<in>\n      \\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel \\<rightarrow> \\<langle>\\<langle>state_rel\\<rangle> list_set_rel\\<rangle> nres_rel\"", "lemmas succi = nbai_nba_param(4)[THEN fun_relD, OF Ai, THEN fun_relD, OF ai]", "lemmas acceptingi = nbai_nba_param(5)[THEN fun_relD, OF Ai]", "lemma [autoref_op_pat]: \"(\\<lambda> g. ASSUME (finite (dom g)) \\<then> expand_map_get_6 A g) \\<equiv>\n      OP (\\<lambda> g. ASSUME (finite (dom g)) \\<then> expand_map_get_6 A g)\"", "lemma [autoref_op_pat]: \"bounds_5 A a \\<equiv> OP (bounds_5 A a)\"", "lemmas [autoref_rules] =\n      refresh_7_refine\n      bounds_7_refine[OF succi]\n      expand_map_get_7_refine[OF acceptingi]", "lemma complement_succ_7_refine:\n    \"(RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6) \\<in>\n      \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> Id \\<rightarrow> state_rel \\<rightarrow>\n      \\<langle>\\<langle>state_rel\\<rangle> list_set_rel\\<rangle> nres_rel\"", "lemma [autoref_op_pat]: \"initial A \\<equiv> OP (initial A)\"", "lemmas [autoref_rules] = nbai_nba_param(3)[THEN fun_relD, OF Ai]", "lemma complement_7_refine[autoref_rules]:\n    assumes \"(Ai, A) \\<in> \\<langle>Id, Id\\<rangle> nbai_nba_rel\"\n    assumes \"(ni,\n      (OP card ::: \\<langle>Id\\<rangle> ahs_rel bhc \\<rightarrow> nat_rel) $\n      ((OP nodes ::: \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> \\<langle>Id\\<rangle> ahs_rel bhc) $ A)) \\<in> nat_rel\"\n    shows \"(complement_7 Ai ni, (OP complement_4 :::\n      \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> \\<langle>Id, state_rel\\<rangle> nbai_nba_rel) $ A) \\<in> \\<langle>Id, state_rel\\<rangle> nbai_nba_rel\""], "translations": [["", "lemma cs_abs_rep[simp]: \"cs_rep (cs_abs f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (cs_abs f) = f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs_rep (cs_abs f) x = f x", "show \"cs_rep (cs_abs f) x = f x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (cs_abs f) x = f x", "unfolding cs_lr_def cs_st_def cs_rep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (map_option fst \\<circ> f, f -` Some ` snd -` {True}) of\n     (g, P) \\<Rightarrow>\n       \\<lambda>p. map_option (\\<lambda>k. (k, p \\<in> P)) (g p))\n     x =\n    f x", "by (cases \"f x\") (force+)"], ["proof (state)\nthis:\n  cs_rep (cs_abs f) ?x = f ?x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_rep_lr[simp]: \"cs_lr (cs_rep (g, P)) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_lr (cs_rep (g, P)) = g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs_lr (cs_rep (g, P)) x = g x", "show \"cs_lr (cs_rep (g, P)) x = g x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_lr (cs_rep (g, P)) x = g x", "unfolding cs_rep_def cs_lr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_option fst \\<circ>\\<circ>\\<circ> case_prod)\n     (\\<lambda>g P p. map_option (\\<lambda>k. (k, p \\<in> P)) (g p)) (g, P)\n     x =\n    g x", "by (cases \"g x\") (auto)"], ["proof (state)\nthis:\n  cs_lr (cs_rep (g, P)) ?x = g ?x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_rep_st[simp]: \"cs_st (cs_rep (g, P)) = P \\<inter> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, P)) = P \\<inter> dom g", "unfolding cs_rep_def cs_st_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (g, P) of\n     (g, P) \\<Rightarrow>\n       \\<lambda>p. map_option (\\<lambda>k. (k, p \\<in> P)) (g p)) -`\n    Some ` snd -` {True} =\n    P \\<inter> dom g", "by force"], ["", "lemma cs_lr_dom[simp]: \"dom (cs_lr f) = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (cs_lr f) = dom f", "unfolding cs_lr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_option fst \\<circ> f) = dom f", "by simp"], ["", "lemma cs_lr_apply[simp]:\n    assumes \"p \\<in> dom f\"\n    shows \"the (cs_lr f p) = fst (the (f p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (cs_lr f p) = fst (the (f p))", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n\ngoal (1 subgoal):\n 1. the (cs_lr f p) = fst (the (f p))", "unfolding cs_lr_def"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n\ngoal (1 subgoal):\n 1. the ((map_option fst \\<circ> f) p) = fst (the (f p))", "by auto"], ["", "lemma cs_rep_dom[simp]: \"dom (cs_rep (g, P)) = dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (cs_rep (g, P)) = dom g", "unfolding cs_rep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (case (g, P) of\n         (g, P) \\<Rightarrow>\n           \\<lambda>p. map_option (\\<lambda>k. (k, p \\<in> P)) (g p)) =\n    dom g", "by auto"], ["", "lemma cs_rep_apply[simp]:\n    assumes \"p \\<in> dom f\"\n    shows \"fst (the (cs_rep (f, P) p)) = the (f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (cs_rep (f, P) p)) = the (f p)", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n\ngoal (1 subgoal):\n 1. fst (the (cs_rep (f, P) p)) = the (f p)", "unfolding cs_rep_def"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n\ngoal (1 subgoal):\n 1. fst (the ((case (f, P) of\n               (g, P) \\<Rightarrow>\n                 \\<lambda>p. map_option (\\<lambda>k. (k, p \\<in> P)) (g p))\n               p)) =\n    the (f p)", "by auto"], ["", "abbreviation cs_rel :: \"('state items \\<times> 'state cs) set\" where\n    \"cs_rel \\<equiv> br cs_abs top\""], ["", "lemma cs_rel_inv_single_valued: \"single_valued (cs_rel\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (cs_rel\\<inverse>)", "by (auto intro!: inj_onI) (metis cs_abs_rep)"], ["", "definition refresh_1 :: \"'state items \\<Rightarrow> 'state items\" where\n    \"refresh_1 f \\<equiv> if True \\<in> snd ` ran f then f else map_option (apsnd top) \\<circ> f\""], ["", "definition ranks_1 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"ranks_1 A a f \\<equiv> {g.\n      dom g = \\<Union>((transition A a) ` (dom f)) \\<and>\n      (\\<forall> p \\<in> dom f. \\<forall> q \\<in> transition A a p. fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n      (\\<forall> q \\<in> dom g. accepting A q \\<longrightarrow> even (fst (the (g q)))) \\<and>\n      cs_st g = {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))}}\""], ["", "definition complement_succ_1 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"complement_succ_1 A a = ranks_1 A a \\<circ> refresh_1\""], ["", "definition complement_1 :: \"('label, 'state) nba \\<Rightarrow> ('label, 'state items) nba\" where\n    \"complement_1 A \\<equiv> nba\n      (alphabet A)\n      ({const (Some (2 * card (nodes A), False)) |` initial A})\n      (complement_succ_1 A)\n      (\\<lambda> f. cs_st f = {})\""], ["", "lemma refresh_1_dom[simp]: \"dom (refresh_1 f) = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (refresh_1 f) = dom f", "unfolding refresh_1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (if True \\<in> snd ` ran f then f\n         else map_option (apsnd \\<top>) \\<circ> f) =\n    dom f", "by simp"], ["", "lemma refresh_1_apply[simp]: \"fst (the (refresh_1 f p)) = fst (the (f p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (refresh_1 f p)) = fst (the (f p))", "unfolding refresh_1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the ((if True \\<in> snd ` ran f then f\n               else map_option (apsnd \\<top>) \\<circ> f)\n               p)) =\n    fst (the (f p))", "by (cases \"f p\") (auto)"], ["", "lemma refresh_1_cs_st[simp]: \"cs_st (refresh_1 f) = (if cs_st f = {} then dom f else cs_st f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (refresh_1 f) = (if cs_st f = {} then dom f else cs_st f)", "unfolding refresh_1_def cs_st_def ran_def image_def vimage_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. (if True\n            \\<in> {y. \\<exists>x\\<in>{b. \\<exists>a. f a = Some b}.\n                         y = snd x}\n         then f else map_option (apsnd \\<top>) \\<circ> f)\n         x\n        \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}. y = Some x}} =\n    (if {x. f x\n            \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}. y = Some x}} =\n        {}\n     then dom f\n     else {x. f x\n              \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}.\n                           y = Some x}})", "by auto"], ["", "lemma complement_succ_1_abs:\n    assumes \"g \\<in> complement_succ_1 A a f\"\n    shows \"cs_abs g \\<in> complement_succ A a (cs_abs f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_abs g \\<in> complement_succ A a (cs_abs f)", "unfolding complement_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_abs g\n    \\<in> (case cs_abs f of\n           (f, P) \\<Rightarrow>\n             {(g, st_succ A a g P) |g. g \\<in> lr_succ A a f})", "proof (simp, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)\n 2. cs_lr g \\<in> lr_succ A a (cs_lr f)", "have 1:\n      \"dom g = \\<Union>((transition A a) ` (dom f))\"\n      \"\\<forall> p \\<in> dom f. \\<forall> q \\<in> transition A a p. fst (the (g q)) \\<le> fst (the (f p))\"\n      \"\\<forall> p \\<in> dom g. accepting A p \\<longrightarrow> even (fst (the (g p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p.\n          fst (the (g q)) \\<le> fst (the (f p)) &&&\n    \\<forall>p\\<in>dom g.\n       accepting A p \\<longrightarrow> even (fst (the (g p)))", "using assms"], ["proof (prove)\nusing this:\n  g \\<in> complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p.\n          fst (the (g q)) \\<le> fst (the (f p)) &&&\n    \\<forall>p\\<in>dom g.\n       accepting A p \\<longrightarrow> even (fst (the (g p)))", "unfolding complement_succ_1_def ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> ((\\<lambda>f.\n               {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                   (\\<forall>p\\<in>dom f.\n                       \\<forall>q\\<in>transition A a p.\n                          fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n                   (\\<forall>q\\<in>dom g.\n                       accepting A q \\<longrightarrow>\n                       even (fst (the (g q)))) \\<and>\n                   cs_st g =\n                   {q \\<in> \\<Union> (transition A a ` cs_st f).\n                    even (fst (the (g q)))}}) \\<circ>\n           refresh_1)\n           f\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p.\n          fst (the (g q)) \\<le> fst (the (f p)) &&&\n    \\<forall>p\\<in>dom g.\n       accepting A p \\<longrightarrow> even (fst (the (g p)))", "by simp_all"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. fst (the (g q)) \\<le> fst (the (f p))\n  \\<forall>p\\<in>dom g.\n     accepting A p \\<longrightarrow> even (fst (the (g p)))\n\ngoal (2 subgoals):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)\n 2. cs_lr g \\<in> lr_succ A a (cs_lr f)", "show \"cs_lr g \\<in> lr_succ A a (cs_lr f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_lr g \\<in> lr_succ A a (cs_lr f)", "unfolding lr_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_lr g\n    \\<in> {g. dom g = \\<Union> (transition A a ` dom (cs_lr f)) \\<and>\n              (\\<forall>p\\<in>dom (cs_lr f).\n                  \\<forall>q\\<in>transition A a p.\n                     the (g q) \\<le> the (cs_lr f p)) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow> even (the (g q)))}", "proof (intro CollectI conjI ballI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. dom (cs_lr g) = \\<Union> (transition A a ` dom (cs_lr f))\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "show \"dom (cs_lr g) = \\<Union> (transition A a ` dom (cs_lr f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (cs_lr g) = \\<Union> (transition A a ` dom (cs_lr f))", "using 1"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. fst (the (g q)) \\<le> fst (the (f p))\n  \\<forall>p\\<in>dom g.\n     accepting A p \\<longrightarrow> even (fst (the (g p)))\n\ngoal (1 subgoal):\n 1. dom (cs_lr g) = \\<Union> (transition A a ` dom (cs_lr f))", "by simp"], ["proof (state)\nthis:\n  dom (cs_lr g) = \\<Union> (transition A a ` dom (cs_lr f))\n\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "fix p q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "assume 2: \"p \\<in> dom (cs_lr f)\" \"q \\<in> transition A a p\""], ["proof (state)\nthis:\n  p \\<in> dom (cs_lr f)\n  q \\<in> transition A a p\n\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "have 3: \"q \\<in> dom (cs_lr g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dom (cs_lr g)", "using 1 2"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. fst (the (g q)) \\<le> fst (the (f p))\n  \\<forall>p\\<in>dom g.\n     accepting A p \\<longrightarrow> even (fst (the (g p)))\n  p \\<in> dom (cs_lr f)\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. q \\<in> dom (cs_lr g)", "by auto"], ["proof (state)\nthis:\n  q \\<in> dom (cs_lr g)\n\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (cs_lr f); q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> the (cs_lr g q) \\<le> the (cs_lr f p)\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "show \"the (cs_lr g q) \\<le> the (cs_lr f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (cs_lr g q) \\<le> the (cs_lr f p)", "using 1 2 3"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. fst (the (g q)) \\<le> fst (the (f p))\n  \\<forall>p\\<in>dom g.\n     accepting A p \\<longrightarrow> even (fst (the (g p)))\n  p \\<in> dom (cs_lr f)\n  q \\<in> transition A a p\n  q \\<in> dom (cs_lr g)\n\ngoal (1 subgoal):\n 1. the (cs_lr g q) \\<le> the (cs_lr f p)", "by simp"], ["proof (state)\nthis:\n  the (cs_lr g q) \\<le> the (cs_lr f p)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "assume 2: \"p \\<in> dom (cs_lr g)\" \"accepting A p\""], ["proof (state)\nthis:\n  p \\<in> dom (cs_lr g)\n  accepting A p\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_lr g); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (the (cs_lr g q))", "show \"even (the (cs_lr g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (the (cs_lr g p))", "using 1 2"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. fst (the (g q)) \\<le> fst (the (f p))\n  \\<forall>p\\<in>dom g.\n     accepting A p \\<longrightarrow> even (fst (the (g p)))\n  p \\<in> dom (cs_lr g)\n  accepting A p\n\ngoal (1 subgoal):\n 1. even (the (cs_lr g p))", "by auto"], ["proof (state)\nthis:\n  even (the (cs_lr g p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs_lr g \\<in> lr_succ A a (cs_lr f)\n\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have 2: \"cs_st g = {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n     even (fst (the (g q)))}", "using assms"], ["proof (prove)\nusing this:\n  g \\<in> complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n     even (fst (the (g q)))}", "unfolding complement_succ_1_def ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> ((\\<lambda>f.\n               {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                   (\\<forall>p\\<in>dom f.\n                       \\<forall>q\\<in>transition A a p.\n                          fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n                   (\\<forall>q\\<in>dom g.\n                       accepting A q \\<longrightarrow>\n                       even (fst (the (g q)))) \\<and>\n                   cs_st g =\n                   {q \\<in> \\<Union> (transition A a ` cs_st f).\n                    even (fst (the (g q)))}}) \\<circ>\n           refresh_1)\n           f\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n     even (fst (the (g q)))}", "by simp"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n   even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "show \"cs_st g = st_succ A a (cs_lr g) (cs_st f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "proof (cases \"cs_st f = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. cs_st f = {} \\<Longrightarrow> cs_st g = st_succ A a (cs_lr g) (cs_st f)\n 2. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "case True"], ["proof (state)\nthis:\n  cs_st f = {}\n\ngoal (2 subgoals):\n 1. cs_st f = {} \\<Longrightarrow> cs_st g = st_succ A a (cs_lr g) (cs_st f)\n 2. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have 3: \"the (cs_lr g q) = fst (the (g q))\" if \"q \\<in> \\<Union>((transition A a) ` (dom f))\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (cs_lr g q) = fst (the (g q))", "using that 1(1)"], ["proof (prove)\nusing this:\n  q \\<in> \\<Union> (transition A a ` dom f)\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. the (cs_lr g q) = fst (the (g q))", "by simp"], ["proof (state)\nthis:\n  ?q \\<in> \\<Union> (transition A a ` dom f) \\<Longrightarrow>\n  the (cs_lr g ?q) = fst (the (g ?q))\n\ngoal (2 subgoals):\n 1. cs_st f = {} \\<Longrightarrow> cs_st g = st_succ A a (cs_lr g) (cs_st f)\n 2. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "using 2 3"], ["proof (prove)\nusing this:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n   even (fst (the (g q)))}\n  ?q \\<in> \\<Union> (transition A a ` dom f) \\<Longrightarrow>\n  the (cs_lr g ?q) = fst (the (g ?q))\n\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "unfolding st_succ_def refresh_1_cs_st True cs_lr_dom 1(1)"], ["proof (prove)\nusing this:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` (if {} = {} then dom f else {})).\n   even (fst (the (g q)))}\n  ?q \\<in> \\<Union> (transition A a ` dom f) \\<Longrightarrow>\n  the (cs_lr g ?q) = fst (the (g ?q))\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> if {} = {} then \\<Union> (transition A a ` dom f)\n             else \\<Union> (transition A a ` {}).\n     even (the (cs_lr g q))}", "by force"], ["proof (state)\nthis:\n  cs_st g = st_succ A a (cs_lr g) (cs_st f)\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "case False"], ["proof (state)\nthis:\n  cs_st f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have 3: \"the (cs_lr g q) = fst (the (g q))\" if \"q \\<in> \\<Union>((transition A a) ` (cs_st f))\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (cs_lr g q) = fst (the (g q))", "using that 1(1)"], ["proof (prove)\nusing this:\n  q \\<in> \\<Union> (transition A a ` cs_st f)\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. the (cs_lr g q) = fst (the (g q))", "by \n          (auto intro!: cs_lr_apply)\n          (metis IntE UN_iff cs_abs_rep cs_lr_dom cs_rep_st domD prod.collapse)"], ["proof (state)\nthis:\n  ?q \\<in> \\<Union> (transition A a ` cs_st f) \\<Longrightarrow>\n  the (cs_lr g ?q) = fst (the (g ?q))\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have \"cs_st g = {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n     even (fst (the (g q)))}", "using 2"], ["proof (prove)\nusing this:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n   even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n     even (fst (the (g q)))}", "by this"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n   even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "also"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 f)).\n   even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have \"cs_st (refresh_1 f) = cs_st f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (refresh_1 f) = cs_st f", "using False"], ["proof (prove)\nusing this:\n  cs_st f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cs_st (refresh_1 f) = cs_st f", "by simp"], ["proof (state)\nthis:\n  cs_st (refresh_1 f) = cs_st f\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "also"], ["proof (state)\nthis:\n  cs_st (refresh_1 f) = cs_st f\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have \"{q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))} =\n        {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (the (cs_lr g q))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))} =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))}", "using 3"], ["proof (prove)\nusing this:\n  ?q \\<in> \\<Union> (transition A a ` cs_st f) \\<Longrightarrow>\n  the (cs_lr g ?q) = fst (the (g ?q))\n\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))} =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))}", "by metis"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))} =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))}\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "also"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))} =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))}\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "have \"\\<dots> = st_succ A a (cs_lr g) (cs_st f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))} =\n    st_succ A a (cs_lr g) (cs_st f)", "unfolding st_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))} =\n    {q \\<in> if cs_st f = {} then dom (cs_lr g)\n             else \\<Union> (transition A a ` cs_st f).\n     even (the (cs_lr g q))}", "using False"], ["proof (prove)\nusing this:\n  cs_st f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))} =\n    {q \\<in> if cs_st f = {} then dom (cs_lr g)\n             else \\<Union> (transition A a ` cs_st f).\n     even (the (cs_lr g q))}", "by simp"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (the (cs_lr g q))} =\n  st_succ A a (cs_lr g) (cs_st f)\n\ngoal (1 subgoal):\n 1. cs_st f \\<noteq> {} \\<Longrightarrow>\n    cs_st g = st_succ A a (cs_lr g) (cs_st f)", "finally"], ["proof (chain)\npicking this:\n  cs_st g = st_succ A a (cs_lr g) (cs_st f)", "show ?thesis"], ["proof (prove)\nusing this:\n  cs_st g = st_succ A a (cs_lr g) (cs_st f)\n\ngoal (1 subgoal):\n 1. cs_st g = st_succ A a (cs_lr g) (cs_st f)", "by this"], ["proof (state)\nthis:\n  cs_st g = st_succ A a (cs_lr g) (cs_st f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs_st g = st_succ A a (cs_lr g) (cs_st f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_succ_1_rep:\n    assumes \"P \\<subseteq> dom f\" \"(g, Q) \\<in> complement_succ A a (f, P)\"\n    shows \"cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (f, P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (f, P))", "unfolding complement_succ_1_def ranks_1_def comp_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (g, Q)\n    \\<in> {g. dom g =\n              \\<Union>\n               (transition A a ` dom (refresh_1 (cs_rep (f, P)))) \\<and>\n              (\\<forall>p\\<in>dom (refresh_1 (cs_rep (f, P))).\n                  \\<forall>q\\<in>transition A a p.\n                     fst (the (g q))\n                     \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow>\n                  even (fst (the (g q)))) \\<and>\n              cs_st g =\n              {q \\<in> \\<Union>\n                        (transition A a `\n                         cs_st (refresh_1 (cs_rep (f, P)))).\n               even (fst (the (g q)))}}", "proof (intro CollectI conjI ballI impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 4. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have 1:\n      \"dom g = \\<Union>((transition A a) ` (dom f))\"\n      \"\\<forall> p \\<in> dom f. \\<forall> q \\<in> transition A a p. the (g q) \\<le> the (f p)\"\n      \"\\<forall> p \\<in> dom g. accepting A p \\<longrightarrow> even (the (g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p) &&&\n    \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))", "using assms(2)"], ["proof (prove)\nusing this:\n  (g, Q) \\<in> complement_succ A a (f, P)\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p) &&&\n    \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))", "unfolding complement_succ_def lr_succ_def"], ["proof (prove)\nusing this:\n  (g, Q)\n  \\<in> (case (f, P) of\n         (f, P) \\<Rightarrow>\n           {(g, st_succ A a g P) |g.\n            g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                        (\\<forall>p\\<in>dom f.\n                            \\<forall>q\\<in>transition A a p.\n                               the (g q) \\<le> the (f p)) \\<and>\n                        (\\<forall>q\\<in>dom g.\n                            accepting A q \\<longrightarrow>\n                            even (the (g q)))}})\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f) &&&\n    \\<forall>p\\<in>dom f.\n       \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p) &&&\n    \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))", "by simp_all"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p)\n  \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))\n\ngoal (4 subgoals):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 4. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have 2: \"Q = {q \\<in> if P = {} then dom g else \\<Union>((transition A a) ` P). even (the (g q))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q =\n    {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))}", "using assms(2)"], ["proof (prove)\nusing this:\n  (g, Q) \\<in> complement_succ A a (f, P)\n\ngoal (1 subgoal):\n 1. Q =\n    {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))}", "unfolding complement_succ_def st_succ_def"], ["proof (prove)\nusing this:\n  (g, Q)\n  \\<in> (case (f, P) of\n         (f, P) \\<Rightarrow>\n           {(g, {q \\<in> if P = {} then dom g\n                         else \\<Union> (transition A a ` P).\n                 even (the (g q))}) |\n            g. g \\<in> lr_succ A a f})\n\ngoal (1 subgoal):\n 1. Q =\n    {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))}", "by simp"], ["proof (state)\nthis:\n  Q =\n  {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n   even (the (g q))}\n\ngoal (4 subgoals):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 4. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have 3: \"Q \\<subseteq> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<subseteq> dom g", "unfolding 2 1(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then \\<Union> (transition A a ` dom f)\n             else \\<Union> (transition A a ` P).\n     even (the (g q))}\n    \\<subseteq> \\<Union> (transition A a ` dom f)", "using assms(1)"], ["proof (prove)\nusing this:\n  P \\<subseteq> dom f\n\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then \\<Union> (transition A a ` dom f)\n             else \\<Union> (transition A a ` P).\n     even (the (g q))}\n    \\<subseteq> \\<Union> (transition A a ` dom f)", "by auto"], ["proof (state)\nthis:\n  Q \\<subseteq> dom g\n\ngoal (4 subgoals):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 4. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "show \"dom (cs_rep (g, Q)) = \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))", "using 1"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p)\n  \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))\n\ngoal (1 subgoal):\n 1. dom (cs_rep (g, Q)) =\n    \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))", "by simp"], ["proof (state)\nthis:\n  dom (cs_rep (g, Q)) =\n  \\<Union> (transition A a ` dom (refresh_1 (cs_rep (f, P))))\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 3. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "show \"\\<And> p q. p \\<in> dom (refresh_1 (cs_rep (f, P))) \\<Longrightarrow> q \\<in> transition A a p \\<Longrightarrow>\n      fst (the (cs_rep (g, Q) q)) \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))", "using 1(1, 2)"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom f.\n     \\<forall>q\\<in>transition A a p. the (g q) \\<le> the (f p)\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom (refresh_1 (cs_rep (f, P)));\n        q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (cs_rep (g, Q) q))\n                         \\<le> fst (the (refresh_1 (cs_rep (f, P)) p))", "by (auto) (metis UN_I cs_rep_apply domI option.sel)"], ["proof (state)\nthis:\n  \\<lbrakk>?p \\<in> dom (refresh_1 (cs_rep (f, P)));\n   ?q \\<in> transition A a ?p\\<rbrakk>\n  \\<Longrightarrow> fst (the (cs_rep (g, Q) ?q))\n                    \\<le> fst (the (refresh_1 (cs_rep (f, P)) ?p))\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom (cs_rep (g, Q)); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) q)))\n 2. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "show \"\\<And> p. p \\<in> dom (cs_rep (g, Q)) \\<Longrightarrow> accepting A p \\<Longrightarrow> even (fst (the (cs_rep (g, Q) p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> dom (cs_rep (g, Q)); accepting A p\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) p)))", "using 1(1, 3)"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  \\<forall>p\\<in>dom g. accepting A p \\<longrightarrow> even (the (g p))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> dom (cs_rep (g, Q)); accepting A p\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (cs_rep (g, Q) p)))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?p \\<in> dom (cs_rep (g, Q)); accepting A ?p\\<rbrakk>\n  \\<Longrightarrow> even (fst (the (cs_rep (g, Q) ?p)))\n\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "show \"cs_st (cs_rep (g, Q)) = {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n      even (fst (the (cs_rep (g, Q) q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "proof (cases \"P = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "case True"], ["proof (state)\nthis:\n  P = {}\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"cs_st (cs_rep (g, Q)) = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) = Q", "using 3"], ["proof (prove)\nusing this:\n  Q \\<subseteq> dom g\n\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) = Q", "by auto"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) = Q\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) = Q\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"\\<dots> = {q \\<in> dom g. even (the (g q))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q = {q \\<in> dom g. even (the (g q))}", "unfolding 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))} =\n    {q \\<in> dom g. even (the (g q))}", "using True"], ["proof (prove)\nusing this:\n  P = {}\n\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))} =\n    {q \\<in> dom g. even (the (g q))}", "by auto"], ["proof (state)\nthis:\n  Q = {q \\<in> dom g. even (the (g q))}\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  Q = {q \\<in> dom g. even (the (g q))}\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"\\<dots> = {q \\<in> dom g. even (fst (the (cs_rep (g, Q) q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> dom g. even (the (g q))} =\n    {q \\<in> dom g. even (fst (the (cs_rep (g, Q) q)))}", "using cs_rep_apply"], ["proof (prove)\nusing this:\n  ?p \\<in> dom ?f \\<Longrightarrow>\n  fst (the (cs_rep (?f, ?P) ?p)) = the (?f ?p)\n\ngoal (1 subgoal):\n 1. {q \\<in> dom g. even (the (g q))} =\n    {q \\<in> dom g. even (fst (the (cs_rep (g, Q) q)))}", "by metis"], ["proof (state)\nthis:\n  {q \\<in> dom g. even (the (g q))} =\n  {q \\<in> dom g. even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  {q \\<in> dom g. even (the (g q))} =\n  {q \\<in> dom g. even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"dom g = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "using 1(1)"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "by this"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"dom f = cs_st (refresh_1 (cs_rep (f, P)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f = cs_st (refresh_1 (cs_rep (f, P)))", "using True"], ["proof (prove)\nusing this:\n  P = {}\n\ngoal (1 subgoal):\n 1. dom f = cs_st (refresh_1 (cs_rep (f, P)))", "by simp"], ["proof (state)\nthis:\n  dom f = cs_st (refresh_1 (cs_rep (f, P)))\n\ngoal (2 subgoals):\n 1. P = {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}\n 2. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "finally"], ["proof (chain)\npicking this:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}", "show ?thesis"], ["proof (prove)\nusing this:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "by this"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "case False"], ["proof (state)\nthis:\n  P \\<noteq> {}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have 4: \"fst (the (cs_rep (g, Q) q)) = the (g q)\" if \"q \\<in> \\<Union>((transition A a) ` P)\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (cs_rep (g, Q) q)) = the (g q)", "using 1(1) that assms(1)"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n  q \\<in> \\<Union> (transition A a ` P)\n  P \\<subseteq> dom f\n\ngoal (1 subgoal):\n 1. fst (the (cs_rep (g, Q) q)) = the (g q)", "by (fast intro: cs_rep_apply)"], ["proof (state)\nthis:\n  ?q \\<in> \\<Union> (transition A a ` P) \\<Longrightarrow>\n  fst (the (cs_rep (g, Q) ?q)) = the (g ?q)\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"cs_st (cs_rep (g, Q)) = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) = Q", "using 3"], ["proof (prove)\nusing this:\n  Q \\<subseteq> dom g\n\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) = Q", "by auto"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) = Q\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) = Q\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"\\<dots> = {q \\<in> \\<Union>((transition A a) ` P). even (the (g q))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q = {q \\<in> \\<Union> (transition A a ` P). even (the (g q))}", "unfolding 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))} =\n    {q \\<in> \\<Union> (transition A a ` P). even (the (g q))}", "using False"], ["proof (prove)\nusing this:\n  P \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {q \\<in> if P = {} then dom g else \\<Union> (transition A a ` P).\n     even (the (g q))} =\n    {q \\<in> \\<Union> (transition A a ` P). even (the (g q))}", "by auto"], ["proof (state)\nthis:\n  Q = {q \\<in> \\<Union> (transition A a ` P). even (the (g q))}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  Q = {q \\<in> \\<Union> (transition A a ` P). even (the (g q))}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"\\<dots> = {q \\<in> \\<Union>((transition A a) ` P). even (fst (the (cs_rep (g, Q) q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` P). even (the (g q))} =\n    {q \\<in> \\<Union> (transition A a ` P).\n     even (fst (the (cs_rep (g, Q) q)))}", "using 4"], ["proof (prove)\nusing this:\n  ?q \\<in> \\<Union> (transition A a ` P) \\<Longrightarrow>\n  fst (the (cs_rep (g, Q) ?q)) = the (g ?q)\n\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` P). even (the (g q))} =\n    {q \\<in> \\<Union> (transition A a ` P).\n     even (fst (the (cs_rep (g, Q) q)))}", "by force"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` P). even (the (g q))} =\n  {q \\<in> \\<Union> (transition A a ` P).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "also"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` P). even (the (g q))} =\n  {q \\<in> \\<Union> (transition A a ` P).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "have \"P = (cs_st (refresh_1 (cs_rep (f, P))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = cs_st (refresh_1 (cs_rep (f, P)))", "using assms(1) False"], ["proof (prove)\nusing this:\n  P \\<subseteq> dom f\n  P \\<noteq> {}\n\ngoal (1 subgoal):\n 1. P = cs_st (refresh_1 (cs_rep (f, P)))", "by auto"], ["proof (state)\nthis:\n  P = cs_st (refresh_1 (cs_rep (f, P)))\n\ngoal (1 subgoal):\n 1. P \\<noteq> {} \\<Longrightarrow>\n    cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "finally"], ["proof (chain)\npicking this:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}", "show ?thesis"], ["proof (prove)\nusing this:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal (1 subgoal):\n 1. cs_st (cs_rep (g, Q)) =\n    {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n     even (fst (the (cs_rep (g, Q) q)))}", "by simp"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs_st (cs_rep (g, Q)) =\n  {q \\<in> \\<Union> (transition A a ` cs_st (refresh_1 (cs_rep (f, P)))).\n   even (fst (the (cs_rep (g, Q) q)))}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_succ_1_refine: \"(complement_succ_1, complement_succ) \\<in>\n    Id \\<rightarrow> Id \\<rightarrow> cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_succ_1, complement_succ)\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow>\n          cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel", "proof (clarsimp simp: br_set_rel_alt in_br_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' a'a ab.\n       complement_succ a' a'a (cs_abs ab) =\n       cs_abs ` complement_succ_1 a' a'a ab", "fix A :: \"('a, 'b) nba\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' a'a ab.\n       complement_succ a' a'a (cs_abs ab) =\n       cs_abs ` complement_succ_1 a' a'a ab", "fix a f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a' a'a ab.\n       complement_succ a' a'a (cs_abs ab) =\n       cs_abs ` complement_succ_1 a' a'a ab", "show \"complement_succ A a (cs_abs f) = cs_abs ` complement_succ_1 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complement_succ A a (cs_abs f) = cs_abs ` complement_succ_1 A a f", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (aa, b) \\<in> complement_succ A a (cs_abs f) \\<Longrightarrow>\n       (aa, b) \\<in> cs_abs ` complement_succ_1 A a f\n 2. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "fix g Q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (aa, b) \\<in> complement_succ A a (cs_abs f) \\<Longrightarrow>\n       (aa, b) \\<in> cs_abs ` complement_succ_1 A a f\n 2. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "assume 1: \"(g, Q) \\<in> complement_succ A a (cs_abs f)\""], ["proof (state)\nthis:\n  (g, Q) \\<in> complement_succ A a (cs_abs f)\n\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (aa, b) \\<in> complement_succ A a (cs_abs f) \\<Longrightarrow>\n       (aa, b) \\<in> cs_abs ` complement_succ_1 A a f\n 2. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "have 2: \"Q \\<subseteq> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<subseteq> dom g", "using 1"], ["proof (prove)\nusing this:\n  (g, Q) \\<in> complement_succ A a (cs_abs f)\n\ngoal (1 subgoal):\n 1. Q \\<subseteq> dom g", "unfolding complement_succ_def lr_succ_def st_succ_def"], ["proof (prove)\nusing this:\n  (g, Q)\n  \\<in> (case cs_abs f of\n         (f, P) \\<Rightarrow>\n           {(g, {q \\<in> if P = {} then dom g\n                         else \\<Union> (transition A a ` P).\n                 even (the (g q))}) |\n            g. g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                           (\\<forall>p\\<in>dom f.\n                               \\<forall>q\\<in>transition A a p.\n                                  the (g q) \\<le> the (f p)) \\<and>\n                           (\\<forall>q\\<in>dom g.\n                               accepting A q \\<longrightarrow>\n                               even (the (g q)))}})\n\ngoal (1 subgoal):\n 1. Q \\<subseteq> dom g", "by (auto) (metis IntE cs_abs_rep cs_lr_dom cs_rep_st)"], ["proof (state)\nthis:\n  Q \\<subseteq> dom g\n\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (aa, b) \\<in> complement_succ A a (cs_abs f) \\<Longrightarrow>\n       (aa, b) \\<in> cs_abs ` complement_succ_1 A a f\n 2. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "have 3: \"cs_st f \\<subseteq> dom (cs_lr f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st f \\<subseteq> dom (cs_lr f)", "unfolding cs_st_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f -` Some ` snd -` {True} \\<subseteq> dom (cs_lr f)", "by auto"], ["proof (state)\nthis:\n  cs_st f \\<subseteq> dom (cs_lr f)\n\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       (aa, b) \\<in> complement_succ A a (cs_abs f) \\<Longrightarrow>\n       (aa, b) \\<in> cs_abs ` complement_succ_1 A a f\n 2. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "show \"(g, Q) \\<in> cs_abs ` complement_succ_1 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g, Q) \\<in> cs_abs ` complement_succ_1 A a f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (g, Q) = cs_abs ?x\n 2. ?x \\<in> complement_succ_1 A a f", "show \"(g, Q) = cs_abs (cs_rep (g, Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g, Q) = cs_abs (cs_rep (g, Q))", "using 2"], ["proof (prove)\nusing this:\n  Q \\<subseteq> dom g\n\ngoal (1 subgoal):\n 1. (g, Q) = cs_abs (cs_rep (g, Q))", "by auto"], ["proof (state)\nthis:\n  (g, Q) = cs_abs (cs_rep (g, Q))\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a f", "have \"cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (cs_abs f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (cs_abs f))", "using complement_succ_1_rep 3 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<subseteq> dom ?f;\n   (?g, ?Q) \\<in> complement_succ ?A ?a (?f, ?P)\\<rbrakk>\n  \\<Longrightarrow> cs_rep (?g, ?Q)\n                    \\<in> complement_succ_1 ?A ?a (cs_rep (?f, ?P))\n  cs_st f \\<subseteq> dom (cs_lr f)\n  (g, Q) \\<in> complement_succ A a (cs_abs f)\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (cs_abs f))", "by this"], ["proof (state)\nthis:\n  cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (cs_abs f))\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a f", "also"], ["proof (state)\nthis:\n  cs_rep (g, Q) \\<in> complement_succ_1 A a (cs_rep (cs_abs f))\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a f", "have \"cs_rep (cs_abs f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_rep (cs_abs f) = f", "by simp"], ["proof (state)\nthis:\n  cs_rep (cs_abs f) = f\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a f", "finally"], ["proof (chain)\npicking this:\n  cs_rep (g, Q) \\<in> complement_succ_1 A a f", "show \"cs_rep (g, Q) \\<in> complement_succ_1 A a f\""], ["proof (prove)\nusing this:\n  cs_rep (g, Q) \\<in> complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. cs_rep (g, Q) \\<in> complement_succ_1 A a f", "by this"], ["proof (state)\nthis:\n  cs_rep (g, Q) \\<in> complement_succ_1 A a f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (g, Q) \\<in> cs_abs ` complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "assume 1: \"g \\<in> complement_succ_1 A a f\""], ["proof (state)\nthis:\n  g \\<in> complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>aa b fa.\n       fa \\<in> complement_succ_1 A a f \\<Longrightarrow>\n       cs_abs fa \\<in> complement_succ A a (cs_abs f)", "show \"cs_abs g \\<in> complement_succ A a (cs_abs f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_abs g \\<in> complement_succ A a (cs_abs f)", "using complement_succ_1_abs 1"], ["proof (prove)\nusing this:\n  ?g \\<in> complement_succ_1 ?A ?a ?f \\<Longrightarrow>\n  cs_abs ?g \\<in> complement_succ ?A ?a (cs_abs ?f)\n  g \\<in> complement_succ_1 A a f\n\ngoal (1 subgoal):\n 1. cs_abs g \\<in> complement_succ A a (cs_abs f)", "by this"], ["proof (state)\nthis:\n  cs_abs g \\<in> complement_succ A a (cs_abs f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  complement_succ A a (cs_abs f) = cs_abs ` complement_succ_1 A a f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_1_refine: \"(complement_1, complement) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, cs_rel\\<rangle> nba_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_1, complement)\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          cs_rel\\<rangle>nba_rel", "unfolding complement_1_def complement_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (complement_succ_1 A) (\\<lambda>f. cs_st f = {}),\n     \\<lambda>A.\n        nba (alphabet A)\n         ({(\\<lambda>_. Some (2 * card (nodes A))) |` initial A} \\<times>\n          {{}})\n         (complement_succ A) (\\<lambda>(f, P). P = {}))\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          cs_rel\\<rangle>nba_rel", "proof parametricity"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       ({(\\<lambda>_. Some (2 * card (nodes a), False)) |` initial a},\n        {(\\<lambda>_. Some (2 * card (nodes a'))) |` initial a'} \\<times>\n        {{}})\n       \\<in> \\<langle>cs_rel\\<rangle>set_rel\n 2. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (complement_succ_1 a, complement_succ a')\n       \\<in> Id \\<rightarrow>\n             cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n 3. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "fix A B :: \"('a, 'b) nba\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       ({(\\<lambda>_. Some (2 * card (nodes a), False)) |` initial a},\n        {(\\<lambda>_. Some (2 * card (nodes a'))) |` initial a'} \\<times>\n        {{}})\n       \\<in> \\<langle>cs_rel\\<rangle>set_rel\n 2. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (complement_succ_1 a, complement_succ a')\n       \\<in> Id \\<rightarrow>\n             cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n 3. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "assume 1: \"(A, B) \\<in> \\<langle>Id, Id\\<rangle> nba_rel\""], ["proof (state)\nthis:\n  (A, B) \\<in> \\<langle>Id, Id\\<rangle>nba_rel\n\ngoal (3 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       ({(\\<lambda>_. Some (2 * card (nodes a), False)) |` initial a},\n        {(\\<lambda>_. Some (2 * card (nodes a'))) |` initial a'} \\<times>\n        {{}})\n       \\<in> \\<langle>cs_rel\\<rangle>set_rel\n 2. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (complement_succ_1 a, complement_succ a')\n       \\<in> Id \\<rightarrow>\n             cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n 3. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "have 2: \"(const (Some (2 * card (nodes B), False)) |` initial B,\n      const (Some (2 * card (nodes B))) |` initial B, {}) \\<in> cs_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>_. Some (2 * card (nodes B), False)) |` initial B,\n     (\\<lambda>_. Some (2 * card (nodes B))) |` initial B, {})\n    \\<in> cs_rel", "unfolding cs_lr_def cs_st_def in_br_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>_. Some (2 * card (nodes B))) |` initial B, {}) =\n    ((map_option fst \\<circ>\\<circ>\\<circ> (|`))\n      (\\<lambda>_. Some (2 * card (nodes B), False)) (initial B),\n     (\\<lambda>_. Some (2 * card (nodes B), False)) |` initial B -`\n     Some ` snd -` {True}) \\<and>\n    \\<top> ((\\<lambda>_. Some (2 * card (nodes B), False)) |` initial B)", "by (force simp: restrict_map_def)"], ["proof (state)\nthis:\n  ((\\<lambda>_. Some (2 * card (nodes B), False)) |` initial B,\n   (\\<lambda>_. Some (2 * card (nodes B))) |` initial B, {})\n  \\<in> cs_rel\n\ngoal (3 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       ({(\\<lambda>_. Some (2 * card (nodes a), False)) |` initial a},\n        {(\\<lambda>_. Some (2 * card (nodes a'))) |` initial a'} \\<times>\n        {{}})\n       \\<in> \\<langle>cs_rel\\<rangle>set_rel\n 2. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (complement_succ_1 a, complement_succ a')\n       \\<in> Id \\<rightarrow>\n             cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n 3. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "show \"(complement_succ_1 A, complement_succ B) \\<in> Id \\<rightarrow> cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_succ_1 A, complement_succ B)\n    \\<in> Id \\<rightarrow>\n          cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel", "using complement_succ_1_refine 1"], ["proof (prove)\nusing this:\n  (complement_succ_1, complement_succ)\n  \\<in> Id \\<rightarrow>\n        Id \\<rightarrow>\n        cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n  (A, B) \\<in> \\<langle>Id, Id\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (complement_succ_1 A, complement_succ B)\n    \\<in> Id \\<rightarrow>\n          cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (complement_succ_1 A, complement_succ B)\n  \\<in> Id \\<rightarrow>\n        cs_rel \\<rightarrow> \\<langle>cs_rel\\<rangle>set_rel\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       ({(\\<lambda>_. Some (2 * card (nodes a), False)) |` initial a},\n        {(\\<lambda>_. Some (2 * card (nodes a'))) |` initial a'} \\<times>\n        {{}})\n       \\<in> \\<langle>cs_rel\\<rangle>set_rel\n 2. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "show \"({const (Some (2 * card (nodes A), False)) |` initial A},\n      {const (Some (2 * card (nodes B))) |` initial B} \\<times> {{}}) \\<in> \\<langle>cs_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A},\n     {(\\<lambda>_. Some (2 * card (nodes B))) |` initial B} \\<times> {{}})\n    \\<in> \\<langle>cs_rel\\<rangle>set_rel", "using 1 2"], ["proof (prove)\nusing this:\n  (A, B) \\<in> \\<langle>Id, Id\\<rangle>nba_rel\n  ((\\<lambda>_. Some (2 * card (nodes B), False)) |` initial B,\n   (\\<lambda>_. Some (2 * card (nodes B))) |` initial B, {})\n  \\<in> cs_rel\n\ngoal (1 subgoal):\n 1. ({(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A},\n     {(\\<lambda>_. Some (2 * card (nodes B))) |` initial B} \\<times> {{}})\n    \\<in> \\<langle>cs_rel\\<rangle>set_rel", "by simp parametricity"], ["proof (state)\nthis:\n  ({(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A},\n   {(\\<lambda>_. Some (2 * card (nodes B))) |` initial B} \\<times> {{}})\n  \\<in> \\<langle>cs_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<Longrightarrow>\n       (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n       \\<in> cs_rel \\<rightarrow> bool_rel", "show \"(\\<lambda> f. cs_st f = {}, \\<lambda> (f, P). P = {}) \\<in> cs_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n    \\<in> cs_rel \\<rightarrow> bool_rel", "by (auto simp: in_br_conv)"], ["proof (state)\nthis:\n  (\\<lambda>f. cs_st f = {}, \\<lambda>(f, P). P = {})\n  \\<in> cs_rel \\<rightarrow> bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Phase 2\\<close>"], ["", "definition ranks_2 :: \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"ranks_2 A a f \\<equiv> {g.\n      dom g = \\<Union>((transition A a) ` (dom f)) \\<and>\n      (\\<forall> q l d. g q = Some (l, d) \\<longrightarrow>\n        l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n        (d \\<longleftrightarrow> \\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n        (accepting A q \\<longrightarrow> even l))}\""], ["", "definition complement_succ_2 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"complement_succ_2 A a \\<equiv> ranks_2 A a \\<circ> refresh_1\""], ["", "definition complement_2 :: \"('label, 'state) nba \\<Rightarrow> ('label, 'state items) nba\" where\n    \"complement_2 A \\<equiv> nba\n      (alphabet A)\n      ({const (Some (2 * card (nodes A), False)) |` initial A})\n      (complement_succ_2 A)\n      (\\<lambda> f. True \\<notin> snd ` ran f)\""], ["", "lemma ranks_2_refine: \"ranks_2 = ranks_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ranks_2 = ranks_1", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. ranks_2 x xa xb = ranks_1 x xa xb", "fix A :: \"('a, 'b) nba\" and a f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. ranks_2 x xa xb = ranks_1 x xa xb", "show \"ranks_2 A a f = ranks_1 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ranks_2 A a f = ranks_1 A a f", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "fix g"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "assume 1: \"g \\<in> ranks_2 A a f\""], ["proof (state)\nthis:\n  g \\<in> ranks_2 A a f\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 2: \"dom g = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_2 A a f\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "unfolding ranks_2_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>q l d.\n                  g q = Some (l, d) \\<longrightarrow>\n                  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n                  d =\n                  (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and>\n                   even l) \\<and>\n                  (accepting A q \\<longrightarrow> even l))}\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "by auto"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 3: \"g q = Some (l, d) \\<Longrightarrow> l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\" for q l d"], ["proof (prove)\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_2 A a f\n\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "unfolding ranks_2_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>q l d.\n                  g q = Some (l, d) \\<longrightarrow>\n                  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n                  d =\n                  (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and>\n                   even l) \\<and>\n                  (accepting A q \\<longrightarrow> even l))}\n\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "by auto"], ["proof (state)\nthis:\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a ?q)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 4: \"g q = Some (l, d) \\<Longrightarrow> d \\<longleftrightarrow> \\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l\" for q l d"], ["proof (prove)\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_2 A a f\n\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "unfolding ranks_2_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>q l d.\n                  g q = Some (l, d) \\<longrightarrow>\n                  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n                  d =\n                  (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and>\n                   even l) \\<and>\n                  (accepting A q \\<longrightarrow> even l))}\n\ngoal (1 subgoal):\n 1. g q = Some (l, d) \\<Longrightarrow>\n    d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "by auto"], ["proof (state)\nthis:\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?d = (\\<Squnion> (snd ` Some -` f ` pred A a ?q) \\<and> even ?l)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 5: \"g q = Some (l, d) \\<Longrightarrow> accepting A q \\<Longrightarrow> even l\" for q l d"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n    \\<Longrightarrow> even l", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_2 A a f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n    \\<Longrightarrow> even l", "unfolding ranks_2_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>q l d.\n                  g q = Some (l, d) \\<longrightarrow>\n                  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n                  d =\n                  (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and>\n                   even l) \\<and>\n                  (accepting A q \\<longrightarrow> even l))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n    \\<Longrightarrow> even l", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>g ?q = Some (?l, ?d); accepting A ?q\\<rbrakk>\n  \\<Longrightarrow> even ?l\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> ranks_2 A a f \\<Longrightarrow> x \\<in> ranks_1 A a f\n 2. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "show \"g \\<in> ranks_1 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> ranks_1 A a f", "unfolding ranks_1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                (\\<forall>p\\<in>dom f.\n                    \\<forall>q\\<in>transition A a p.\n                       fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n                (\\<forall>q\\<in>dom g.\n                    accepting A q \\<longrightarrow>\n                    even (fst (the (g q)))) \\<and>\n                cs_st g =\n                {q \\<in> \\<Union> (transition A a ` cs_st f).\n                 even (fst (the (g q)))}}", "proof (intro CollectI conjI ballI impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. dom g = \\<Union> (transition A a ` dom f)\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 3. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 4. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "show \"dom g = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "using 2"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "by this"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "fix p q"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "assume 10: \"p \\<in> dom f\" \"q \\<in> transition A a p\""], ["proof (state)\nthis:\n  p \\<in> dom f\n  q \\<in> transition A a p\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "obtain k c where 11: \"f p = Some (k, c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        f p = Some (k, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 10(1)"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        f p = Some (k, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f p = Some (k, c)\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "have 12: \"q \\<in> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dom g", "using 10 2"], ["proof (prove)\nusing this:\n  p \\<in> dom f\n  q \\<in> transition A a p\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. q \\<in> dom g", "by auto"], ["proof (state)\nthis:\n  q \\<in> dom g\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "obtain l d where 13: \"g q = Some (l, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        g q = Some (l, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 12"], ["proof (prove)\nusing this:\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        g q = Some (l, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g q = Some (l, d)\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "have \"fst (the (g q)) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (g q)) = l", "unfolding 13"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (Some (l, d))) = l", "by simp"], ["proof (state)\nthis:\n  fst (the (g q)) = l\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "also"], ["proof (state)\nthis:\n  fst (the (g q)) = l\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "have \"\\<dots> \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "using 3 13"], ["proof (prove)\nusing this:\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a ?q)\n  g q = Some (l, d)\n\ngoal (1 subgoal):\n 1. l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "by this"], ["proof (state)\nthis:\n  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "also"], ["proof (state)\nthis:\n  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "have \"\\<dots> \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<le> k", "proof (rule cInf_lower)"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<in> fst ` Some -` f ` pred A a q\n 2. bdd_below (fst ` Some -` f ` pred A a q)", "show \"k \\<in> fst ` Some -` f ` pred A a q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<in> fst ` Some -` f ` pred A a q", "using 11 10(2)"], ["proof (prove)\nusing this:\n  f p = Some (k, c)\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. k \\<in> fst ` Some -` f ` pred A a q", "by force"], ["proof (state)\nthis:\n  k \\<in> fst ` Some -` f ` pred A a q\n\ngoal (1 subgoal):\n 1. bdd_below (fst ` Some -` f ` pred A a q)", "show \"bdd_below (fst ` Some -` f ` pred A a q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below (fst ` Some -` f ` pred A a q)", "by simp"], ["proof (state)\nthis:\n  bdd_below (fst ` Some -` f ` pred A a q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<le> k\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "also"], ["proof (state)\nthis:\n  \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<le> k\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "have \"\\<dots> = fst (the (f p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = fst (the (f p))", "unfolding 11"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = fst (the (Some (k, c)))", "by simp"], ["proof (state)\nthis:\n  k = fst (the (f p))\n\ngoal (3 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\n 2. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 3. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "finally"], ["proof (chain)\npicking this:\n  fst (the (g q)) \\<le> fst (the (f p))", "show \"fst (the (g q)) \\<le> fst (the (f p))\""], ["proof (prove)\nusing this:\n  fst (the (g q)) \\<le> fst (the (f p))\n\ngoal (1 subgoal):\n 1. fst (the (g q)) \\<le> fst (the (f p))", "by this"], ["proof (state)\nthis:\n  fst (the (g q)) \\<le> fst (the (f p))\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 2. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 2. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "fix q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 2. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "assume 10: \"q \\<in> dom g\" \"accepting A q\""], ["proof (state)\nthis:\n  q \\<in> dom g\n  accepting A q\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))\n 2. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "show \"even (fst (the (g q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (fst (the (g q)))", "using 10 5"], ["proof (prove)\nusing this:\n  q \\<in> dom g\n  accepting A q\n  \\<lbrakk>g ?q = Some (?l, ?d); accepting A ?q\\<rbrakk>\n  \\<Longrightarrow> even ?l\n\ngoal (1 subgoal):\n 1. even (fst (the (g q)))", "by auto"], ["proof (state)\nthis:\n  even (fst (the (g q)))\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "show \"cs_st g = {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. cs_st g\n    \\<subseteq> {q \\<in> \\<Union> (transition A a ` cs_st f).\n                 even (fst (the (g q)))}\n 2. {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n    \\<subseteq> cs_st g", "show \"cs_st g \\<subseteq> {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g\n    \\<subseteq> {q \\<in> \\<Union> (transition A a ` cs_st f).\n                 even (fst (the (g q)))}", "using 4"], ["proof (prove)\nusing this:\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?d = (\\<Squnion> (snd ` Some -` f ` pred A a ?q) \\<and> even ?l)\n\ngoal (1 subgoal):\n 1. cs_st g\n    \\<subseteq> {q \\<in> \\<Union> (transition A a ` cs_st f).\n                 even (fst (the (g q)))}", "unfolding cs_st_def image_def vimage_def"], ["proof (prove)\nusing this:\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?d =\n  (\\<Squnion> {y. \\<exists>x\\<in>{x. Some x\n                                     \\<in> {y.\n      \\<exists>x\\<in>pred A a ?q. y = f x}}.\n                     y = snd x} \\<and>\n   even ?l)\n\ngoal (1 subgoal):\n 1. {x. g x \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}. y = Some x}}\n    \\<subseteq> {q \\<in> \\<Union>\n                          {y. \\<exists>x\n \\<in>{x. f x\n          \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}. y = Some x}}.\n                                 y = transition A a x}.\n                 even (fst (the (g q)))}", "by auto metis+"], ["proof (state)\nthis:\n  cs_st g\n  \\<subseteq> {q \\<in> \\<Union> (transition A a ` cs_st f).\n               even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n    \\<subseteq> cs_st g", "show \"{q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))} \\<subseteq> cs_st g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n    \\<subseteq> cs_st g", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>even (fst (the (g x))); xa \\<in> cs_st f;\n        x \\<in> transition A a xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cs_st g", "fix p q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>even (fst (the (g x))); xa \\<in> cs_st f;\n        x \\<in> transition A a xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cs_st g", "assume 10: \"even (fst (the (g q)))\" \"p \\<in> cs_st f\" \"q \\<in> transition A a p\""], ["proof (state)\nthis:\n  even (fst (the (g q)))\n  p \\<in> cs_st f\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>even (fst (the (g x))); xa \\<in> cs_st f;\n        x \\<in> transition A a xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cs_st g", "have 12: \"q \\<in> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dom g", "using 10 2"], ["proof (prove)\nusing this:\n  even (fst (the (g q)))\n  p \\<in> cs_st f\n  q \\<in> transition A a p\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. q \\<in> dom g", "unfolding cs_st_def"], ["proof (prove)\nusing this:\n  even (fst (the (g q)))\n  p \\<in> f -` Some ` snd -` {True}\n  q \\<in> transition A a p\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. q \\<in> dom g", "by auto"], ["proof (state)\nthis:\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>even (fst (the (g x))); xa \\<in> cs_st f;\n        x \\<in> transition A a xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cs_st g", "show \"q \\<in> cs_st g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> cs_st g", "using 10 4 12"], ["proof (prove)\nusing this:\n  even (fst (the (g q)))\n  p \\<in> cs_st f\n  q \\<in> transition A a p\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?d = (\\<Squnion> (snd ` Some -` f ` pred A a ?q) \\<and> even ?l)\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. q \\<in> cs_st g", "unfolding cs_st_def image_def"], ["proof (prove)\nusing this:\n  even (fst (the (g q)))\n  p \\<in> f -` {y. \\<exists>x\\<in>snd -` {True}. y = Some x}\n  q \\<in> transition A a p\n  g ?q = Some (?l, ?d) \\<Longrightarrow>\n  ?d =\n  (\\<Squnion> {y. \\<exists>x\\<in>Some -`\n                                 {y. \\<exists>x\\<in>pred A a ?q. y = f x}.\n                     y = snd x} \\<and>\n   even ?l)\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. q \\<in> g -` {y. \\<exists>x\\<in>snd -` {True}. y = Some x}", "by force"], ["proof (state)\nthis:\n  q \\<in> cs_st g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n  \\<subseteq> cs_st g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "assume 1: \"g \\<in> ranks_1 A a f\""], ["proof (state)\nthis:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 2: \"dom g = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "unfolding ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>p\\<in>dom f.\n                  \\<forall>q\\<in>transition A a p.\n                     fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow>\n                  even (fst (the (g q)))) \\<and>\n              cs_st g =\n              {q \\<in> \\<Union> (transition A a ` cs_st f).\n               even (fst (the (g q)))}}\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "by auto"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 3: \"\\<And> p q. p \\<in> dom f \\<Longrightarrow> q \\<in> transition A a p \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))", "unfolding ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>p\\<in>dom f.\n                  \\<forall>q\\<in>transition A a p.\n                     fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow>\n                  even (fst (the (g q)))) \\<and>\n              cs_st g =\n              {q \\<in> \\<Union> (transition A a ` cs_st f).\n               even (fst (the (g q)))}}\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> dom f; q \\<in> transition A a p\\<rbrakk>\n       \\<Longrightarrow> fst (the (g q)) \\<le> fst (the (f p))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?p \\<in> dom f; ?q \\<in> transition A a ?p\\<rbrakk>\n  \\<Longrightarrow> fst (the (g ?q)) \\<le> fst (the (f ?p))\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 4: \"\\<And> q. q \\<in> dom g \\<Longrightarrow> accepting A q \\<Longrightarrow> even (fst (the (g q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))", "unfolding ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>p\\<in>dom f.\n                  \\<forall>q\\<in>transition A a p.\n                     fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow>\n                  even (fst (the (g q)))) \\<and>\n              cs_st g =\n              {q \\<in> \\<Union> (transition A a ` cs_st f).\n               even (fst (the (g q)))}}\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> dom g; accepting A q\\<rbrakk>\n       \\<Longrightarrow> even (fst (the (g q)))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<in> dom g; accepting A ?q\\<rbrakk>\n  \\<Longrightarrow> even (fst (the (g ?q)))\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "have 5: \"cs_st g = {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "using 1"], ["proof (prove)\nusing this:\n  g \\<in> ranks_1 A a f\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "unfolding ranks_1_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n              (\\<forall>p\\<in>dom f.\n                  \\<forall>q\\<in>transition A a p.\n                     fst (the (g q)) \\<le> fst (the (f p))) \\<and>\n              (\\<forall>q\\<in>dom g.\n                  accepting A q \\<longrightarrow>\n                  even (fst (the (g q)))) \\<and>\n              cs_st g =\n              {q \\<in> \\<Union> (transition A a ` cs_st f).\n               even (fst (the (g q)))}}\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "by auto"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> ranks_1 A a f \\<Longrightarrow> x \\<in> ranks_2 A a f", "show \"g \\<in> ranks_2 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> ranks_2 A a f", "unfolding ranks_2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> {g. dom g = \\<Union> (transition A a ` dom f) \\<and>\n                (\\<forall>q l d.\n                    g q = Some (l, d) \\<longrightarrow>\n                    l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n                    d =\n                    (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and>\n                     even l) \\<and>\n                    (accepting A q \\<longrightarrow> even l))}", "proof (intro CollectI conjI allI impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. dom g = \\<Union> (transition A a ` dom f)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 3. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 4. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "show \"dom g = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "using 2"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (1 subgoal):\n 1. dom g = \\<Union> (transition A a ` dom f)", "by this"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f)\n\ngoal (3 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 3. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 3. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "fix q l d"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 3. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "assume 10: \"g q = Some (l, d)\""], ["proof (state)\nthis:\n  g q = Some (l, d)\n\ngoal (3 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 3. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "have 11: \"q \\<in> dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dom g", "using 10"], ["proof (prove)\nusing this:\n  g q = Some (l, d)\n\ngoal (1 subgoal):\n 1. q \\<in> dom g", "by auto"], ["proof (state)\nthis:\n  q \\<in> dom g\n\ngoal (3 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n 2. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 3. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "show \"l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)", "proof (rule cInf_greatest)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ` Some -` f ` pred A a q \\<noteq> {}\n 2. \\<And>x.\n       x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> x", "show \"fst ` Some -` f ` pred A a q \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` f ` pred A a q \\<noteq> {}", "using 11"], ["proof (prove)\nusing this:\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. fst ` Some -` f ` pred A a q \\<noteq> {}", "unfolding 2 image_def vimage_def"], ["proof (prove)\nusing this:\n  q \\<in> \\<Union> {y. \\<exists>x\\<in>dom f. y = transition A a x}\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{x. Some x\n                           \\<in> {y. \\<exists>x\\<in>pred A a q. y = f x}}.\n           y = fst x} \\<noteq>\n    {}", "by force"], ["proof (state)\nthis:\n  fst ` Some -` f ` pred A a q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> x", "show \"\\<And> x. x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> x", "using 3 10"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<in> dom f; ?q \\<in> transition A a ?p\\<rbrakk>\n  \\<Longrightarrow> fst (the (g ?q)) \\<le> fst (the (f ?p))\n  g q = Some (l, d)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> x", "by (auto) (metis domI fst_conv option.sel)"], ["proof (state)\nthis:\n  ?x \\<in> fst ` Some -` f ` pred A a q \\<Longrightarrow> l \\<le> ?x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "have \"d \\<longleftrightarrow> q \\<in> cs_st g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = (q \\<in> cs_st g)", "unfolding cs_st_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. d = (q \\<in> g -` Some ` snd -` {True})", "by (force simp: 10)"], ["proof (state)\nthis:\n  d = (q \\<in> cs_st g)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "also"], ["proof (state)\nthis:\n  d = (q \\<in> cs_st g)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "have \"cs_st g = {q \\<in> \\<Union>((transition A a) ` (cs_st f)). even (fst (the (g q)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "using 5"], ["proof (prove)\nusing this:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n\ngoal (1 subgoal):\n 1. cs_st g =\n    {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}", "by this"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "also"], ["proof (state)\nthis:\n  cs_st g =\n  {q \\<in> \\<Union> (transition A a ` cs_st f). even (fst (the (g q)))}\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "have \"q \\<in> \\<dots> \\<longleftrightarrow> (\\<exists> x \\<in> cs_st f. q \\<in> transition A a x) \\<and> even l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q \\<in> {q \\<in> \\<Union> (transition A a ` cs_st f).\n              even (fst (the (g q)))}) =\n    ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l)", "unfolding mem_Collect_eq 10"], ["proof (prove)\ngoal (1 subgoal):\n 1. (q \\<in> \\<Union> (transition A a ` cs_st f) \\<and>\n     even (fst (the (Some (l, d))))) =\n    ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l)", "by simp"], ["proof (state)\nthis:\n  (q \\<in> {q \\<in> \\<Union> (transition A a ` cs_st f).\n            even (fst (the (g q)))}) =\n  ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "also"], ["proof (state)\nthis:\n  (q \\<in> {q \\<in> \\<Union> (transition A a ` cs_st f).\n            even (fst (the (g q)))}) =\n  ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "have \"\\<dots> \\<longleftrightarrow> \\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l) =\n    (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "unfolding cs_st_def image_def vimage_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x\\<in>{x. f x\n                         \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}.\ny = Some x}}.\n         q \\<in> transition A a x) \\<and>\n     even l) =\n    (\\<Squnion> {y. \\<exists>x\\<in>{x. Some x\n \\<in> {y. \\<exists>x\\<in>pred A a q. y = f x}}.\n                       y = snd x} \\<and>\n     even l)", "by auto metis+"], ["proof (state)\nthis:\n  ((\\<exists>x\\<in>cs_st f. q \\<in> transition A a x) \\<and> even l) =\n  (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n\ngoal (2 subgoals):\n 1. \\<And>q l d.\n       g q = Some (l, d) \\<Longrightarrow>\n       d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n 2. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "finally"], ["proof (chain)\npicking this:\n  d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "show \"d \\<longleftrightarrow> \\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l\""], ["proof (prove)\nusing this:\n  d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n\ngoal (1 subgoal):\n 1. d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)", "by this"], ["proof (state)\nthis:\n  d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l)\n\ngoal (1 subgoal):\n 1. \\<And>q l d.\n       \\<lbrakk>g q = Some (l, d); accepting A q\\<rbrakk>\n       \\<Longrightarrow> even l", "show \"accepting A q \\<Longrightarrow> even l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. accepting A q \\<Longrightarrow> even l", "using 4 10 11"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> dom g; accepting A ?q\\<rbrakk>\n  \\<Longrightarrow> even (fst (the (g ?q)))\n  g q = Some (l, d)\n  q \\<in> dom g\n\ngoal (1 subgoal):\n 1. accepting A q \\<Longrightarrow> even l", "by force"], ["proof (state)\nthis:\n  accepting A q \\<Longrightarrow> even l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<in> ranks_2 A a f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ranks_2 A a f = ranks_1 A a f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_2_refine: \"(complement_2, complement_1) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, Id\\<rangle> nba_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_2, complement_1)\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "unfolding complement_2_def complement_1_def complement_succ_2_def complement_succ_1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (\\<lambda>a. ranks_2 A a \\<circ> refresh_1)\n         (\\<lambda>f. True \\<notin> snd ` ran f),\n     \\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (\\<lambda>a. ranks_1 A a \\<circ> refresh_1)\n         (\\<lambda>f. cs_st f = {}))\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "unfolding ranks_2_refine cs_st_def image_def vimage_def ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (\\<lambda>a. ranks_1 A a \\<circ> refresh_1)\n         (\\<lambda>f.\n             True\n             \\<notin> {y. \\<exists>x\\<in>{b. \\<exists>a. f a = Some b}.\n                             y = snd x}),\n     \\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (\\<lambda>a. ranks_1 A a \\<circ> refresh_1)\n         (\\<lambda>f.\n             {x. f x\n                 \\<in> {y. \\<exists>x\\<in>{x. snd x \\<in> {True}}.\n                              y = Some x}} =\n             {}))\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "by auto"], ["", "subsection \\<open>Phase 3\\<close>"], ["", "definition bounds_3 :: \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items\" where\n    \"bounds_3 A a f \\<equiv> \\<lambda> q. let S = Some -` f ` pred A a q in\n      if S = {} then None else Some (\\<Sqinter>(fst ` S), \\<Squnion>(snd ` S))\""], ["", "definition items_3 :: \"('label, 'state) nba \\<Rightarrow> 'state \\<Rightarrow> item \\<Rightarrow> item set\" where\n    \"items_3 A p \\<equiv> \\<lambda> (k, c). {(l, c \\<and> even l) |l. l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)}\""], ["", "definition get_3 :: \"('label, 'state) nba \\<Rightarrow> 'state items \\<Rightarrow> ('state \\<rightharpoonup> item set)\" where\n    \"get_3 A f \\<equiv> \\<lambda> p. map_option (items_3 A p) (f p)\""], ["", "definition complement_succ_3 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"complement_succ_3 A a \\<equiv> expand_map \\<circ> get_3 A \\<circ> bounds_3 A a \\<circ> refresh_1\""], ["", "definition complement_3 :: \"('label, 'state) nba \\<Rightarrow> ('label, 'state items) nba\" where\n    \"complement_3 A \\<equiv> nba\n      (alphabet A)\n      ({(Some \\<circ> (const (2 * card (nodes A), False))) |` initial A})\n      (complement_succ_3 A)\n      (\\<lambda> f. \\<forall> (p, k, c) \\<in> map_to_set f. \\<not> c)\""], ["", "lemma bounds_3_dom[simp]: \"dom (bounds_3 A a f) = \\<Union>((transition A a) ` (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (bounds_3 A a f) = \\<Union> (transition A a ` dom f)", "unfolding bounds_3_def Let_def dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {aa.\n     (if Some -` f ` pred A a aa = {} then None\n      else Some\n            (\\<Sqinter> (fst ` Some -` f ` pred A a aa),\n             \\<Squnion> (snd ` Some -` f ` pred A a aa))) \\<noteq>\n     None} =\n    \\<Union> (transition A a ` {a. f a \\<noteq> None})", "by (force split: if_splits)"], ["", "lemma items_3_nonempty[intro!, simp]: \"items_3 A p s \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_3 A p s \\<noteq> {}", "unfolding items_3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case s of\n     (k, c) \\<Rightarrow>\n       {(l, c \\<and> even l) |l.\n        l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)}) \\<noteq>\n    {}", "by auto"], ["", "lemma items_3_finite[intro!, simp]: \"finite (items_3 A p s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (items_3 A p s)", "unfolding items_3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (case s of\n      (k, c) \\<Rightarrow>\n        {(l, c \\<and> even l) |l.\n         l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)})", "by (auto split: prod.splits)"], ["", "lemma get_3_dom[simp]: \"dom (get_3 A f) = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (get_3 A f) = dom f", "unfolding get_3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (\\<lambda>p. map_option (items_3 A p) (f p)) = dom f", "by (auto split: bind_splits)"], ["", "lemma get_3_finite[intro, simp]: \"S \\<in> ran (get_3 A f) \\<Longrightarrow> finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> ran (get_3 A f) \\<Longrightarrow> finite S", "unfolding get_3_def ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> {b. \\<exists>a.\n                   map_option (items_3 A a) (f a) =\n                   Some b} \\<Longrightarrow>\n    finite S", "by auto"], ["", "lemma get_3_update[simp]: \"get_3 A (f (p \\<mapsto> s)) = (get_3 A f) (p \\<mapsto> items_3 A p s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_3 A (f(p \\<mapsto> s)) = get_3 A f(p \\<mapsto> items_3 A p s)", "unfolding get_3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>pa. map_option (items_3 A pa) ((f(p \\<mapsto> s)) pa)) =\n    (\\<lambda>p. map_option (items_3 A p) (f p))(p \\<mapsto> items_3 A p s)", "by auto"], ["", "lemma expand_map_get_bounds_3: \"expand_map \\<circ> get_3 A \\<circ> bounds_3 A a = ranks_2 A a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((expand_map \\<circ>\\<circ> get_3) A \\<circ>\\<circ>\\<circ> bounds_3) A\n     a =\n    ranks_2 A a", "proof (intro ext set_eqI, unfold comp_apply)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (xa \\<in> expand_map (get_3 A (bounds_3 A a x))) =\n       (xa \\<in> ranks_2 A a x)", "fix f g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (xa \\<in> expand_map (get_3 A (bounds_3 A a x))) =\n       (xa \\<in> ranks_2 A a x)", "have 1: \"(\\<forall> x S y. get_3 A (bounds_3 A a f) x = Some S \\<longrightarrow> g x = Some y \\<longrightarrow> y \\<in> S) \\<longleftrightarrow>\n      (\\<forall> q S l d. get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow> g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x S y.\n        get_3 A (bounds_3 A a f) x = Some S \\<longrightarrow>\n        g x = Some y \\<longrightarrow> y \\<in> S) =\n    (\\<forall>q S l d.\n        get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S)", "by auto"], ["proof (state)\nthis:\n  (\\<forall>x S y.\n      get_3 A (bounds_3 A a f) x = Some S \\<longrightarrow>\n      g x = Some y \\<longrightarrow> y \\<in> S) =\n  (\\<forall>q S l d.\n      get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n      g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (xa \\<in> expand_map (get_3 A (bounds_3 A a x))) =\n       (xa \\<in> ranks_2 A a x)", "have 2: \"(\\<forall> S. get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow> g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) \\<longleftrightarrow>\n      (g q = Some (l, d) \\<longrightarrow> l \\<le> \\<Sqinter>(fst ` (Some -` f ` pred A a q)) \\<and>\n      (d \\<longleftrightarrow> \\<Squnion>(snd ` (Some -` f ` pred A a q)) \\<and> even l) \\<and> (accepting A q \\<longrightarrow> even l))\"\n      if 3: \"dom g = \\<Union>((transition A a) ` (dom f))\" for q l d"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "have 4: \"q \\<notin> dom g\" if \"Some -` f ` pred A a q = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<notin> dom g", "unfolding 3"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<notin> \\<Union> (transition A a ` dom f)", "using that"], ["proof (prove)\nusing this:\n  Some -` f ` pred A a q = {}\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<Union> (transition A a ` dom f)", "by force"], ["proof (state)\nthis:\n  Some -` f ` pred A a q = {} \\<Longrightarrow> q \\<notin> dom g\n\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "unfolding get_3_def items_3_def bounds_3_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        map_option\n         (\\<lambda>(k, c).\n             {(l, c \\<and> even l) |l.\n              l \\<le> k \\<and> (accepting A q \\<longrightarrow> even l)})\n         (if Some -` f ` pred A a q = {} then None\n          else Some\n                (\\<Sqinter> (fst ` Some -` f ` pred A a q),\n                 \\<Squnion> (snd ` Some -` f ` pred A a q))) =\n        Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "using 4"], ["proof (prove)\nusing this:\n  Some -` f ` pred A a q = {} \\<Longrightarrow> q \\<notin> dom g\n\ngoal (1 subgoal):\n 1. (\\<forall>S.\n        map_option\n         (\\<lambda>(k, c).\n             {(l, c \\<and> even l) |l.\n              l \\<le> k \\<and> (accepting A q \\<longrightarrow> even l)})\n         (if Some -` f ` pred A a q = {} then None\n          else Some\n                (\\<Sqinter> (fst ` Some -` f ` pred A a q),\n                 \\<Squnion> (snd ` Some -` f ` pred A a q))) =\n        Some S \\<longrightarrow>\n        g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n    (g q = Some (l, d) \\<longrightarrow>\n     l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n     d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n     (accepting A q \\<longrightarrow> even l))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>S.\n      get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n      g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S) =\n  (g q = Some (l, d) \\<longrightarrow>\n   l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n   d = (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n   (accepting A q \\<longrightarrow> even l))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dom g = \\<Union> (transition A a ` dom f) \\<Longrightarrow>\n  (\\<forall>S.\n      get_3 A (bounds_3 A a f) ?q = Some S \\<longrightarrow>\n      g ?q = Some (?l, ?d) \\<longrightarrow> (?l, ?d) \\<in> S) =\n  (g ?q = Some (?l, ?d) \\<longrightarrow>\n   ?l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a ?q) \\<and>\n   ?d = (\\<Squnion> (snd ` Some -` f ` pred A a ?q) \\<and> even ?l) \\<and>\n   (accepting A ?q \\<longrightarrow> even ?l))\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (xa \\<in> expand_map (get_3 A (bounds_3 A a x))) =\n       (xa \\<in> ranks_2 A a x)", "show \"g \\<in> expand_map (get_3 A (bounds_3 A a f)) \\<longleftrightarrow> g \\<in> ranks_2 A a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g \\<in> expand_map (get_3 A (bounds_3 A a f))) =\n    (g \\<in> ranks_2 A a f)", "unfolding expand_map_alt_def ranks_2_def mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (dom g = dom (get_3 A (bounds_3 A a f)) \\<and>\n     (\\<forall>x S y.\n         get_3 A (bounds_3 A a f) x = Some S \\<longrightarrow>\n         g x = Some y \\<longrightarrow> y \\<in> S)) =\n    (dom g = \\<Union> (transition A a ` dom f) \\<and>\n     (\\<forall>q l d.\n         g q = Some (l, d) \\<longrightarrow>\n         l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n         d =\n         (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n         (accepting A q \\<longrightarrow> even l)))", "unfolding get_3_dom bounds_3_dom 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. (dom g = \\<Union> (transition A a ` dom f) \\<and>\n     (\\<forall>q S l d.\n         get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n         g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S)) =\n    (dom g = \\<Union> (transition A a ` dom f) \\<and>\n     (\\<forall>q l d.\n         g q = Some (l, d) \\<longrightarrow>\n         l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n         d =\n         (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n         (accepting A q \\<longrightarrow> even l)))", "using 2"], ["proof (prove)\nusing this:\n  dom g = \\<Union> (transition A a ` dom f) \\<Longrightarrow>\n  (\\<forall>S.\n      get_3 A (bounds_3 A a f) ?q = Some S \\<longrightarrow>\n      g ?q = Some (?l, ?d) \\<longrightarrow> (?l, ?d) \\<in> S) =\n  (g ?q = Some (?l, ?d) \\<longrightarrow>\n   ?l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a ?q) \\<and>\n   ?d = (\\<Squnion> (snd ` Some -` f ` pred A a ?q) \\<and> even ?l) \\<and>\n   (accepting A ?q \\<longrightarrow> even ?l))\n\ngoal (1 subgoal):\n 1. (dom g = \\<Union> (transition A a ` dom f) \\<and>\n     (\\<forall>q S l d.\n         get_3 A (bounds_3 A a f) q = Some S \\<longrightarrow>\n         g q = Some (l, d) \\<longrightarrow> (l, d) \\<in> S)) =\n    (dom g = \\<Union> (transition A a ` dom f) \\<and>\n     (\\<forall>q l d.\n         g q = Some (l, d) \\<longrightarrow>\n         l \\<le> \\<Sqinter> (fst ` Some -` f ` pred A a q) \\<and>\n         d =\n         (\\<Squnion> (snd ` Some -` f ` pred A a q) \\<and> even l) \\<and>\n         (accepting A q \\<longrightarrow> even l)))", "by blast"], ["proof (state)\nthis:\n  (g \\<in> expand_map (get_3 A (bounds_3 A a f))) = (g \\<in> ranks_2 A a f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_succ_3_refine: \"complement_succ_3 = complement_succ_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complement_succ_3 = complement_succ_2", "unfolding complement_succ_3_def complement_succ_2_def expand_map_get_bounds_3"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A a. ranks_2 A a \\<circ> refresh_1) =\n    (\\<lambda>A a. ranks_2 A a \\<circ> refresh_1)", "by rule"], ["", "lemma complement_initial_3_refine: \"{const (Some (2 * card (nodes A), False)) |` initial A} =\n    {(Some \\<circ> (const (2 * card (nodes A), False))) |` initial A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A} =\n    {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |` initial A}", "unfolding comp_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A} =\n    {(\\<lambda>x. Some (2 * card (nodes A), False)) |` initial A}", "by rule"], ["", "lemma complement_accepting_3_refine: \"True \\<notin> snd ` ran f \\<longleftrightarrow> (\\<forall> (p, k, c) \\<in> map_to_set f. \\<not> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (True \\<notin> snd ` ran f) =\n    (\\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)", "unfolding map_to_set_def ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (True \\<notin> snd ` {b. \\<exists>a. f a = Some b}) =\n    (\\<forall>(p, k, c)\\<in>{(k, v). f k = Some v}. \\<not> c)", "by auto"], ["", "lemma complement_3_refine: \"(complement_3, complement_2) \\<in> \\<langle>Id, Id\\<rangle> nba_rel \\<rightarrow> \\<langle>Id, Id\\<rangle> nba_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_3, complement_2)\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "unfolding complement_3_def complement_2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A.\n        nba (alphabet A)\n         {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n          initial A}\n         (complement_succ_3 A)\n         (\\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c),\n     \\<lambda>A.\n        nba (alphabet A)\n         {(\\<lambda>_. Some (2 * card (nodes A), False)) |` initial A}\n         (complement_succ_2 A) (\\<lambda>f. True \\<notin> snd ` ran f))\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "unfolding complement_succ_3_refine complement_initial_3_refine complement_accepting_3_refine"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A.\n        nba (alphabet A)\n         {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n          initial A}\n         (complement_succ_2 A)\n         (\\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c),\n     \\<lambda>A.\n        nba (alphabet A)\n         {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n          initial A}\n         (complement_succ_2 A)\n         (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y))\n    \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n          Id\\<rangle>nba_rel", "by auto"], ["", "subsection \\<open>Phase 4\\<close>"], ["", "definition items_4 :: \"('label, 'state) nba \\<Rightarrow> 'state \\<Rightarrow> item \\<Rightarrow> item set\" where\n    \"items_4 A p \\<equiv> \\<lambda> (k, c). {(l, c \\<and> even l) |l. k \\<le> Suc l \\<and> l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)}\""], ["", "definition get_4 :: \"('label, 'state) nba \\<Rightarrow> 'state items \\<Rightarrow> ('state \\<rightharpoonup> item set)\" where\n    \"get_4 A f \\<equiv> \\<lambda> p. map_option (items_4 A p) (f p)\""], ["", "definition complement_succ_4 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set\" where\n    \"complement_succ_4 A a \\<equiv> expand_map \\<circ> get_4 A \\<circ> bounds_3 A a \\<circ> refresh_1\""], ["", "definition complement_4 :: \"('label, 'state) nba \\<Rightarrow> ('label, 'state items) nba\" where\n    \"complement_4 A \\<equiv> nba\n      (alphabet A)\n      ({(Some \\<circ> (const (2 * card (nodes A), False))) |` initial A})\n      (complement_succ_4 A)\n      (\\<lambda> f. \\<forall> (p, k, c) \\<in> map_to_set f. \\<not> c)\""], ["", "lemma get_4_dom[simp]: \"dom (get_4 A f) = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (get_4 A f) = dom f", "unfolding get_4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (\\<lambda>p. map_option (items_4 A p) (f p)) = dom f", "by (auto split: bind_splits)"], ["", "definition R :: \"'state items rel\" where\n    \"R \\<equiv> {(f, g).\n      dom f = dom g \\<and>\n      (\\<forall> p \\<in> dom f. fst (the (f p)) \\<le> fst (the (g p))) \\<and>\n      (\\<forall> p \\<in> dom f. snd (the (f p)) \\<longleftrightarrow> snd (the (g p)))}\""], ["", "lemma bounds_R:\n    assumes \"(f, g) \\<in> R\"\n    assumes \"bounds_3 A a (refresh_1 f) p = Some (n, e)\"\n    assumes \"bounds_3 A a (refresh_1 g) p = Some (k, c)\"\n    shows \"n \\<le> k\" \"e \\<longleftrightarrow> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> k &&& e = c", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have 1:\n      \"dom f = dom g\"\n      \"\\<forall> p \\<in> dom f. fst (the (f p)) \\<le> fst (the (g p))\"\n      \"\\<forall> p \\<in> dom f. snd (the (f p)) \\<longleftrightarrow> snd (the (g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "using assms(1)"], ["proof (prove)\nusing this:\n  (f, g) \\<in> R\n\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "unfolding R_def"], ["proof (prove)\nusing this:\n  (f, g)\n  \\<in> {(f, g).\n         dom f = dom g \\<and>\n         (\\<forall>p\\<in>dom f.\n             fst (the (f p)) \\<le> fst (the (g p))) \\<and>\n         (\\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p)))}\n\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "by auto"], ["proof (state)\nthis:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p))\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"n = \\<Sqinter>(fst ` (Some -` refresh_1 f ` pred A a p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = \\<Sqinter> (fst ` Some -` refresh_1 f ` pred A a p)", "using assms(2)"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n\ngoal (1 subgoal):\n 1. n = \\<Sqinter> (fst ` Some -` refresh_1 f ` pred A a p)", "unfolding bounds_3_def"], ["proof (prove)\nusing this:\n  (let S = Some -` refresh_1 f ` pred A a p\n   in if S = {} then None\n      else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n  Some (n, e)\n\ngoal (1 subgoal):\n 1. n = \\<Sqinter> (fst ` Some -` refresh_1 f ` pred A a p)", "by (auto simp: Let_def split: if_splits)"], ["proof (state)\nthis:\n  n = \\<Sqinter> (fst ` Some -` refresh_1 f ` pred A a p)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  n = \\<Sqinter> (fst ` Some -` refresh_1 f ` pred A a p)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"fst ` Some -` refresh_1 f ` pred A a p = fst ` Some -` f ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` refresh_1 f ` pred A a p = fst ` Some -` f ` pred A a p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ` Some -` refresh_1 f ` pred A a p\n    \\<subseteq> fst ` Some -` f ` pred A a p\n 2. fst ` Some -` f ` pred A a p\n    \\<subseteq> fst ` Some -` refresh_1 f ` pred A a p", "show \" fst ` Some -` refresh_1 f ` pred A a p \\<subseteq> fst ` Some -` f ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` refresh_1 f ` pred A a p\n    \\<subseteq> fst ` Some -` f ` pred A a p", "unfolding refresh_1_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>pred A a p.\n                              y =\n                              (if True\n                                  \\<in> {y. \\<exists>x\\<in>ran f. y = snd x}\n                               then f\n                               else map_option (apsnd \\<top>) \\<circ> f)\n                               x}.\n           y = fst x}\n    \\<subseteq> {y. \\<exists>x\\<in>Some -`\n                                   {y. \\<exists>x\\<in>pred A a p. y = f x}.\n                       y = fst x}", "by (auto simp: map_option_case split: option.split) (force)"], ["proof (state)\nthis:\n  fst ` Some -` refresh_1 f ` pred A a p\n  \\<subseteq> fst ` Some -` f ` pred A a p\n\ngoal (1 subgoal):\n 1. fst ` Some -` f ` pred A a p\n    \\<subseteq> fst ` Some -` refresh_1 f ` pred A a p", "show \"fst ` Some -` f ` pred A a p \\<subseteq> fst ` Some -` refresh_1 f ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` f ` pred A a p\n    \\<subseteq> fst ` Some -` refresh_1 f ` pred A a p", "unfolding refresh_1_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -` {y. \\<exists>x\\<in>pred A a p. y = f x}.\n           y = fst x}\n    \\<subseteq> {y. \\<exists>x\\<in>Some -`\n                                   {y. \\<exists>x\\<in>pred A a p.\n    y =\n    (if True \\<in> {y. \\<exists>x\\<in>ran f. y = snd x} then f\n     else map_option (apsnd \\<top>) \\<circ> f)\n     x}.\n                       y = fst x}", "by (auto simp: map_option_case split: option.split) (metis fst_conv option.sel)"], ["proof (state)\nthis:\n  fst ` Some -` f ` pred A a p\n  \\<subseteq> fst ` Some -` refresh_1 f ` pred A a p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst ` Some -` refresh_1 f ` pred A a p = fst ` Some -` f ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` Some -` refresh_1 f ` pred A a p = fst ` Some -` f ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = fst ` Some -` f ` (pred A a p \\<inter> dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` f ` pred A a p =\n    fst ` Some -` f ` (pred A a p \\<inter> dom f)", "unfolding dom_def image_def Int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -` {y. \\<exists>x\\<in>pred A a p. y = f x}.\n           y = fst x} =\n    {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>{x \\<in> pred A a p.\n     x \\<in> {a. f a \\<noteq> None}}.\n                              y = f x}.\n           y = fst x}", "by auto metis"], ["proof (state)\nthis:\n  fst ` Some -` f ` pred A a p =\n  fst ` Some -` f ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` Some -` f ` pred A a p =\n  fst ` Some -` f ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = fst ` the ` f ` (pred A a p \\<inter> dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` f ` (pred A a p \\<inter> dom f) =\n    fst ` the ` f ` (pred A a p \\<inter> dom f)", "unfolding dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` f ` (pred A a p \\<inter> {a. f a \\<noteq> None}) =\n    fst ` the ` f ` (pred A a p \\<inter> {a. f a \\<noteq> None})", "by force"], ["proof (state)\nthis:\n  fst ` Some -` f ` (pred A a p \\<inter> dom f) =\n  fst ` the ` f ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` Some -` f ` (pred A a p \\<inter> dom f) =\n  fst ` the ` f ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = (fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` the ` f ` (pred A a p \\<inter> dom f) =\n    (fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f)", "by force"], ["proof (state)\nthis:\n  fst ` the ` f ` (pred A a p \\<inter> dom f) =\n  (fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` the ` f ` (pred A a p \\<inter> dom f) =\n  (fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<Sqinter>((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f)) \\<le>\n      \\<Sqinter>((fst \\<circ> the \\<circ> g) ` (pred A a p \\<inter> dom g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n    \\<le> \\<Sqinter> ((fst \\<circ> the \\<circ> g) `\n                      (pred A a p \\<inter> dom g))", "proof (rule cINF_mono)"], ["proof (state)\ngoal (3 subgoals):\n 1. pred A a p \\<inter> dom g \\<noteq> {}\n 2. bdd_below ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n 3. \\<And>m.\n       m \\<in> pred A a p \\<inter> dom g \\<Longrightarrow>\n       \\<exists>n\\<in>pred A a p \\<inter> dom f.\n          (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m", "show \"pred A a p \\<inter> dom g \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred A a p \\<inter> dom g \\<noteq> {}", "using assms(2) 1(1)"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  dom f = dom g\n\ngoal (1 subgoal):\n 1. pred A a p \\<inter> dom g \\<noteq> {}", "unfolding bounds_3_def refresh_1_def"], ["proof (prove)\nusing this:\n  (let S = Some -`\n           (if True \\<in> snd ` ran f then f\n            else map_option (apsnd \\<top>) \\<circ> f) `\n           pred A a p\n   in if S = {} then None\n      else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n  Some (n, e)\n  dom f = dom g\n\ngoal (1 subgoal):\n 1. pred A a p \\<inter> dom g \\<noteq> {}", "by (auto simp: Let_def split: if_splits) (force+)"], ["proof (state)\nthis:\n  pred A a p \\<inter> dom g \\<noteq> {}\n\ngoal (2 subgoals):\n 1. bdd_below ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n 2. \\<And>m.\n       m \\<in> pred A a p \\<inter> dom g \\<Longrightarrow>\n       \\<exists>n\\<in>pred A a p \\<inter> dom f.\n          (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m", "show \"bdd_below ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))", "by rule"], ["proof (state)\nthis:\n  bdd_below ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       m \\<in> pred A a p \\<inter> dom g \\<Longrightarrow>\n       \\<exists>n\\<in>pred A a p \\<inter> dom f.\n          (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m", "show \"\\<exists> n \\<in> pred A a p \\<inter> dom f. (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m\"\n        if \"m \\<in> pred A a p \\<inter> dom g\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>pred A a p \\<inter> dom f.\n       (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m", "using 1 that"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p))\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  m \\<in> pred A a p \\<inter> dom g\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>pred A a p \\<inter> dom f.\n       (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) m", "by auto"], ["proof (state)\nthis:\n  ?m \\<in> pred A a p \\<inter> dom g \\<Longrightarrow>\n  \\<exists>n\\<in>pred A a p \\<inter> dom f.\n     (fst \\<circ> the \\<circ> f) n \\<le> (fst \\<circ> the \\<circ> g) ?m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sqinter> ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n  \\<le> \\<Sqinter> ((fst \\<circ> the \\<circ> g) `\n                    (pred A a p \\<inter> dom g))\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  \\<Sqinter> ((fst \\<circ> the \\<circ> f) ` (pred A a p \\<inter> dom f))\n  \\<le> \\<Sqinter> ((fst \\<circ> the \\<circ> g) `\n                    (pred A a p \\<inter> dom g))\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"(fst \\<circ> the \\<circ> g) ` (pred A a p \\<inter> dom g) = fst ` the ` g ` (pred A a p \\<inter> dom g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> the \\<circ> g) ` (pred A a p \\<inter> dom g) =\n    fst ` the ` g ` (pred A a p \\<inter> dom g)", "by force"], ["proof (state)\nthis:\n  (fst \\<circ> the \\<circ> g) ` (pred A a p \\<inter> dom g) =\n  fst ` the ` g ` (pred A a p \\<inter> dom g)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  (fst \\<circ> the \\<circ> g) ` (pred A a p \\<inter> dom g) =\n  fst ` the ` g ` (pred A a p \\<inter> dom g)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = fst ` Some -` g ` (pred A a p \\<inter> dom g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` the ` g ` (pred A a p \\<inter> dom g) =\n    fst ` Some -` g ` (pred A a p \\<inter> dom g)", "unfolding dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` the ` g ` (pred A a p \\<inter> {a. g a \\<noteq> None}) =\n    fst ` Some -` g ` (pred A a p \\<inter> {a. g a \\<noteq> None})", "by force"], ["proof (state)\nthis:\n  fst ` the ` g ` (pred A a p \\<inter> dom g) =\n  fst ` Some -` g ` (pred A a p \\<inter> dom g)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` the ` g ` (pred A a p \\<inter> dom g) =\n  fst ` Some -` g ` (pred A a p \\<inter> dom g)\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = fst ` Some -` g ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` g ` (pred A a p \\<inter> dom g) =\n    fst ` Some -` g ` pred A a p", "unfolding dom_def image_def Int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>{x \\<in> pred A a p.\n     x \\<in> {a. g a \\<noteq> None}}.\n                              y = g x}.\n           y = fst x} =\n    {y. \\<exists>x\\<in>Some -` {y. \\<exists>x\\<in>pred A a p. y = g x}.\n           y = fst x}", "by auto metis"], ["proof (state)\nthis:\n  fst ` Some -` g ` (pred A a p \\<inter> dom g) =\n  fst ` Some -` g ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` Some -` g ` (pred A a p \\<inter> dom g) =\n  fst ` Some -` g ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<dots> = fst ` Some -` refresh_1 g ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` g ` pred A a p = fst ` Some -` refresh_1 g ` pred A a p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ` Some -` g ` pred A a p\n    \\<subseteq> fst ` Some -` refresh_1 g ` pred A a p\n 2. fst ` Some -` refresh_1 g ` pred A a p\n    \\<subseteq> fst ` Some -` g ` pred A a p", "show \"fst ` Some -` g ` pred A a p \\<subseteq> fst ` Some -` refresh_1 g ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` g ` pred A a p\n    \\<subseteq> fst ` Some -` refresh_1 g ` pred A a p", "unfolding refresh_1_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -` {y. \\<exists>x\\<in>pred A a p. y = g x}.\n           y = fst x}\n    \\<subseteq> {y. \\<exists>x\\<in>Some -`\n                                   {y. \\<exists>x\\<in>pred A a p.\n    y =\n    (if True \\<in> {y. \\<exists>x\\<in>ran g. y = snd x} then g\n     else map_option (apsnd \\<top>) \\<circ> g)\n     x}.\n                       y = fst x}", "by (auto simp: map_option_case split: option.split) (metis fst_conv option.sel)"], ["proof (state)\nthis:\n  fst ` Some -` g ` pred A a p\n  \\<subseteq> fst ` Some -` refresh_1 g ` pred A a p\n\ngoal (1 subgoal):\n 1. fst ` Some -` refresh_1 g ` pred A a p\n    \\<subseteq> fst ` Some -` g ` pred A a p", "show \"fst ` Some -` refresh_1 g ` pred A a p \\<subseteq> fst ` Some -` g ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` Some -` refresh_1 g ` pred A a p\n    \\<subseteq> fst ` Some -` g ` pred A a p", "unfolding refresh_1_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>pred A a p.\n                              y =\n                              (if True\n                                  \\<in> {y. \\<exists>x\\<in>ran g. y = snd x}\n                               then g\n                               else map_option (apsnd \\<top>) \\<circ> g)\n                               x}.\n           y = fst x}\n    \\<subseteq> {y. \\<exists>x\\<in>Some -`\n                                   {y. \\<exists>x\\<in>pred A a p. y = g x}.\n                       y = fst x}", "by (auto simp: map_option_case split: option.split) (force)"], ["proof (state)\nthis:\n  fst ` Some -` refresh_1 g ` pred A a p\n  \\<subseteq> fst ` Some -` g ` pred A a p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst ` Some -` g ` pred A a p = fst ` Some -` refresh_1 g ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "also"], ["proof (state)\nthis:\n  fst ` Some -` g ` pred A a p = fst ` Some -` refresh_1 g ` pred A a p\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "have \"\\<Sqinter>(fst ` (Some -` refresh_1 g ` pred A a p)) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> (fst ` Some -` refresh_1 g ` pred A a p) = k", "using assms(3)"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. \\<Sqinter> (fst ` Some -` refresh_1 g ` pred A a p) = k", "unfolding bounds_3_def"], ["proof (prove)\nusing this:\n  (let S = Some -` refresh_1 g ` pred A a p\n   in if S = {} then None\n      else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n  Some (k, c)\n\ngoal (1 subgoal):\n 1. \\<Sqinter> (fst ` Some -` refresh_1 g ` pred A a p) = k", "by (auto simp: Let_def split: if_splits)"], ["proof (state)\nthis:\n  \\<Sqinter> (fst ` Some -` refresh_1 g ` pred A a p) = k\n\ngoal (2 subgoals):\n 1. n \\<le> k\n 2. e = c", "finally"], ["proof (chain)\npicking this:\n  n \\<le> k", "show \"n \\<le> k\""], ["proof (prove)\nusing this:\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. n \\<le> k", "by this"], ["proof (state)\nthis:\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. e = c", "have \"e \\<longleftrightarrow> \\<Squnion>(snd ` (Some -` refresh_1 f ` pred A a p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = \\<Squnion> (snd ` Some -` refresh_1 f ` pred A a p)", "using assms(2)"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n\ngoal (1 subgoal):\n 1. e = \\<Squnion> (snd ` Some -` refresh_1 f ` pred A a p)", "unfolding bounds_3_def"], ["proof (prove)\nusing this:\n  (let S = Some -` refresh_1 f ` pred A a p\n   in if S = {} then None\n      else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n  Some (n, e)\n\ngoal (1 subgoal):\n 1. e = \\<Squnion> (snd ` Some -` refresh_1 f ` pred A a p)", "by (auto simp: Let_def split: if_splits)"], ["proof (state)\nthis:\n  e = \\<Squnion> (snd ` Some -` refresh_1 f ` pred A a p)\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  e = \\<Squnion> (snd ` Some -` refresh_1 f ` pred A a p)\n\ngoal (1 subgoal):\n 1. e = c", "have \"snd ` Some -` refresh_1 f ` pred A a p = snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` Some -` refresh_1 f ` pred A a p =\n    snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))", "unfolding dom_def image_def Int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>pred A a p. y = refresh_1 f x}.\n           y = snd x} =\n    {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>{x \\<in> pred A a p.\n     x \\<in> {a. refresh_1 f a \\<noteq> None}}.\n                              y = refresh_1 f x}.\n           y = snd x}", "by auto metis"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 f ` pred A a p =\n  snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 f ` pred A a p =\n  snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n    snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))", "unfolding dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd `\n    Some -`\n    refresh_1 f ` (pred A a p \\<inter> {a. refresh_1 f a \\<noteq> None}) =\n    snd `\n    the `\n    refresh_1 f ` (pred A a p \\<inter> {a. refresh_1 f a \\<noteq> None})", "by force"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n  snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n  snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = (snd \\<circ> the \\<circ> refresh_1 f) ` (pred A a p \\<inter> dom (refresh_1 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n    (pred A a p \\<inter> dom (refresh_1 f))", "by force"], ["proof (state)\nthis:\n  snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n  (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  snd ` the ` refresh_1 f ` (pred A a p \\<inter> dom (refresh_1 f)) =\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n  (pred A a p \\<inter> dom (refresh_1 f))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = (snd \\<circ> the \\<circ> refresh_1 g) ` (pred A a p \\<inter> dom (refresh_1 g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n    (pred A a p \\<inter> dom (refresh_1 f)) =\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n    (pred A a p \\<inter> dom (refresh_1 g))", "proof (rule image_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. pred A a p \\<inter> dom (refresh_1 f) =\n    pred A a p \\<inter> dom (refresh_1 g)\n 2. \\<And>x.\n       x \\<in> pred A a p \\<inter> dom (refresh_1 g) \\<Longrightarrow>\n       (snd \\<circ> the \\<circ>\\<circ> refresh_1) f x =\n       (snd \\<circ> the \\<circ>\\<circ> refresh_1) g x", "show \"pred A a p \\<inter> dom (refresh_1 f) = pred A a p \\<inter> dom (refresh_1 g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred A a p \\<inter> dom (refresh_1 f) =\n    pred A a p \\<inter> dom (refresh_1 g)", "unfolding refresh_1_dom 1(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pred A a p \\<inter> dom g = pred A a p \\<inter> dom g", "by rule"], ["proof (state)\nthis:\n  pred A a p \\<inter> dom (refresh_1 f) =\n  pred A a p \\<inter> dom (refresh_1 g)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pred A a p \\<inter> dom (refresh_1 g) \\<Longrightarrow>\n       (snd \\<circ> the \\<circ>\\<circ> refresh_1) f x =\n       (snd \\<circ> the \\<circ>\\<circ> refresh_1) g x", "show \"(snd \\<circ> the \\<circ> refresh_1 f) q \\<longleftrightarrow> (snd \\<circ> the \\<circ> refresh_1 g) q\"\n        if 2: \"q \\<in> pred A a p \\<inter> dom (refresh_1 g)\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q =\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q\n 2. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "have 3: \"\\<forall> x \\<in> ran f. \\<not> snd x \\<Longrightarrow> (n, True) \\<in> ran g \\<Longrightarrow> g q = Some (k, c) \\<Longrightarrow> c\" for n k c"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>ran f. \\<not> snd x; (n, True) \\<in> ran g;\n     g q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "using 1(1, 3)"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>ran f. \\<not> snd x; (n, True) \\<in> ran g;\n     g q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "unfolding dom_def ran_def"], ["proof (prove)\nusing this:\n  {a. f a \\<noteq> None} = {a. g a \\<noteq> None}\n  \\<forall>p\\<in>{a. f a \\<noteq> None}. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{b. \\<exists>a. f a = Some b}. \\<not> snd x;\n     (n, True) \\<in> {b. \\<exists>a. g a = Some b};\n     g q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "by (auto dest!: Collect_inj) (metis option.sel snd_conv)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>ran f. \\<not> snd x; (?n, True) \\<in> ran g;\n   g q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n\ngoal (2 subgoals):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q\n 2. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "have 4: \"g q = Some (n, True) \\<Longrightarrow> f q = Some (k, c) \\<Longrightarrow> c\" for n k c"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (n, True); f q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "using 1(3)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (n, True); f q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "unfolding dom_def"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>{a. f a \\<noteq> None}. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g q = Some (n, True); f q = Some (k, c)\\<rbrakk>\n    \\<Longrightarrow> c", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>g q = Some (?n, True); f q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n\ngoal (2 subgoals):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q\n 2. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "have 5: \"\\<forall> x \\<in> ran g. \\<not> snd x \\<Longrightarrow> (k, True) \\<in> ran f \\<Longrightarrow> False\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>ran g. \\<not> snd x;\n     (k, True) \\<in> ran f\\<rbrakk>\n    \\<Longrightarrow> False", "using 1(1, 3)"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>ran g. \\<not> snd x;\n     (k, True) \\<in> ran f\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding dom_def ran_def"], ["proof (prove)\nusing this:\n  {a. f a \\<noteq> None} = {a. g a \\<noteq> None}\n  \\<forall>p\\<in>{a. f a \\<noteq> None}. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{b. \\<exists>a. g a = Some b}. \\<not> snd x;\n     (k, True) \\<in> {b. \\<exists>a. f a = Some b}\\<rbrakk>\n    \\<Longrightarrow> False", "by (auto dest!: Collect_inj) (metis option.sel snd_conv)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>ran g. \\<not> snd x;\n   (?k, True) \\<in> ran f\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q\n 2. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "show \"(snd \\<circ> the \\<circ> refresh_1 f) q \\<Longrightarrow> (snd \\<circ> the \\<circ> refresh_1 g) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q", "using 1(1, 3) 2 3"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  q \\<in> pred A a p \\<inter> dom (refresh_1 g)\n  \\<lbrakk>\\<forall>x\\<in>ran f. \\<not> snd x; (?n, True) \\<in> ran g;\n   g q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q", "unfolding refresh_1_def"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  q \\<in> pred A a p \\<inter>\n          dom (if True \\<in> snd ` ran g then g\n               else map_option (apsnd \\<top>) \\<circ> g)\n  \\<lbrakk>\\<forall>x\\<in>ran f. \\<not> snd x; (?n, True) \\<in> ran g;\n   g q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ>\\<circ> If (True \\<in> snd ` ran f)) f\n     (map_option (apsnd \\<top>) \\<circ> f) q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ>\\<circ> If (True \\<in> snd ` ran g)) g\n     (map_option (apsnd \\<top>) \\<circ> g) q", "by (force split: if_splits)"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q \\<Longrightarrow>\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q\n\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "show \"(snd \\<circ> the \\<circ> refresh_1 g) q \\<Longrightarrow> (snd \\<circ> the \\<circ> refresh_1 f) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "using 1(1, 3) 2 4 5"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  q \\<in> pred A a p \\<inter> dom (refresh_1 g)\n  \\<lbrakk>g q = Some (?n, True); f q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n  \\<lbrakk>\\<forall>x\\<in>ran g. \\<not> snd x;\n   (?k, True) \\<in> ran f\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q", "unfolding refresh_1_def"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  q \\<in> pred A a p \\<inter>\n          dom (if True \\<in> snd ` ran g then g\n               else map_option (apsnd \\<top>) \\<circ> g)\n  \\<lbrakk>g q = Some (?n, True); f q = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?c\n  \\<lbrakk>\\<forall>x\\<in>ran g. \\<not> snd x;\n   (?k, True) \\<in> ran f\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ>\\<circ> If (True \\<in> snd ` ran g)) g\n     (map_option (apsnd \\<top>) \\<circ> g) q \\<Longrightarrow>\n    (snd \\<circ> the \\<circ>\\<circ>\\<circ> If (True \\<in> snd ` ran f)) f\n     (map_option (apsnd \\<top>) \\<circ> f) q", "by (auto simp: map_option_case split: option.splits if_splits) (force+)"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g q \\<Longrightarrow>\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?q \\<in> pred A a p \\<inter> dom (refresh_1 g) \\<Longrightarrow>\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f ?q =\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g ?q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n  (pred A a p \\<inter> dom (refresh_1 f)) =\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n  (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) f `\n  (pred A a p \\<inter> dom (refresh_1 f)) =\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n  (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n    (pred A a p \\<inter> dom (refresh_1 g)) =\n    snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))", "by force"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n  (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  (snd \\<circ> the \\<circ>\\<circ> refresh_1) g `\n  (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n    snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))", "unfolding dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd `\n    the `\n    refresh_1 g ` (pred A a p \\<inter> {a. refresh_1 g a \\<noteq> None}) =\n    snd `\n    Some -`\n    refresh_1 g ` (pred A a p \\<inter> {a. refresh_1 g a \\<noteq> None})", "by force"], ["proof (state)\nthis:\n  snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  snd ` the ` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g))\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<dots> = snd ` Some -` refresh_1 g ` pred A a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n    snd ` Some -` refresh_1 g ` pred A a p", "unfolding dom_def image_def Int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>{x \\<in> pred A a p.\n     x \\<in> {a. refresh_1 g a \\<noteq> None}}.\n                              y = refresh_1 g x}.\n           y = snd x} =\n    {y. \\<exists>x\\<in>Some -`\n                       {y. \\<exists>x\\<in>pred A a p. y = refresh_1 g x}.\n           y = snd x}", "by auto metis"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` Some -` refresh_1 g ` pred A a p\n\ngoal (1 subgoal):\n 1. e = c", "also"], ["proof (state)\nthis:\n  snd ` Some -` refresh_1 g ` (pred A a p \\<inter> dom (refresh_1 g)) =\n  snd ` Some -` refresh_1 g ` pred A a p\n\ngoal (1 subgoal):\n 1. e = c", "have \"\\<Squnion>(snd ` (Some -` refresh_1 g ` pred A a p)) \\<longleftrightarrow> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> (snd ` Some -` refresh_1 g ` pred A a p) = c", "using assms(3)"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. \\<Squnion> (snd ` Some -` refresh_1 g ` pred A a p) = c", "unfolding bounds_3_def"], ["proof (prove)\nusing this:\n  (let S = Some -` refresh_1 g ` pred A a p\n   in if S = {} then None\n      else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n  Some (k, c)\n\ngoal (1 subgoal):\n 1. \\<Squnion> (snd ` Some -` refresh_1 g ` pred A a p) = c", "by (auto simp: Let_def split: if_splits)"], ["proof (state)\nthis:\n  \\<Squnion> (snd ` Some -` refresh_1 g ` pred A a p) = c\n\ngoal (1 subgoal):\n 1. e = c", "finally"], ["proof (chain)\npicking this:\n  e = c", "show \"e \\<longleftrightarrow> c\""], ["proof (prove)\nusing this:\n  e = c\n\ngoal (1 subgoal):\n 1. e = c", "by this"], ["proof (state)\nthis:\n  e = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_4_language_1: \"language (complement_3 A) \\<subseteq> language (complement_4 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement_3 A) \\<subseteq> language (complement_4 A)", "proof (rule simulation_language)"], ["proof (state)\ngoal (4 subgoals):\n 1. alphabet (complement_3 A) \\<subseteq> alphabet (complement_4 A)\n 2. \\<And>p.\n       p \\<in> initial (complement_3 A) \\<Longrightarrow>\n       \\<exists>q\\<in>initial (complement_4 A). (p, q) \\<in> ?R\n 3. \\<And>a p p' q.\n       \\<lbrakk>p' \\<in> transition (complement_3 A) a p;\n        (p, q) \\<in> ?R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q'\\<in>transition (complement_4 A) a q.\n                            (p', q') \\<in> ?R\n 4. \\<And>p q.\n       \\<lbrakk>(p, q) \\<in> ?R; accepting (complement_3 A) p\\<rbrakk>\n       \\<Longrightarrow> accepting (complement_4 A) q", "show \"alphabet (complement_3 A) \\<subseteq> alphabet (complement_4 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphabet (complement_3 A) \\<subseteq> alphabet (complement_4 A)", "unfolding complement_3_def complement_4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphabet\n     (nba (alphabet A)\n       {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n        initial A}\n       (complement_succ_3 A)\n       (\\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c))\n    \\<subseteq> alphabet\n                 (nba (alphabet A)\n                   {(Some \\<circ>\n                     (\\<lambda>_. (2 * card (nodes A), False))) |`\n                    initial A}\n                   (complement_succ_4 A)\n                   (\\<lambda>f.\n                       \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c))", "by simp"], ["proof (state)\nthis:\n  alphabet (complement_3 A) \\<subseteq> alphabet (complement_4 A)\n\ngoal (3 subgoals):\n 1. \\<And>p.\n       p \\<in> initial (complement_3 A) \\<Longrightarrow>\n       \\<exists>q\\<in>initial (complement_4 A). (p, q) \\<in> ?R\n 2. \\<And>a p p' q.\n       \\<lbrakk>p' \\<in> transition (complement_3 A) a p;\n        (p, q) \\<in> ?R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q'\\<in>transition (complement_4 A) a q.\n                            (p', q') \\<in> ?R\n 3. \\<And>p q.\n       \\<lbrakk>(p, q) \\<in> ?R; accepting (complement_3 A) p\\<rbrakk>\n       \\<Longrightarrow> accepting (complement_4 A) q", "show \"\\<exists> q \\<in> initial (complement_4 A). (p, q) \\<in> R\" if \"p \\<in> initial (complement_3 A)\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>initial (complement_4 A). (p, q) \\<in> R", "using that"], ["proof (prove)\nusing this:\n  p \\<in> initial (complement_3 A)\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>initial (complement_4 A). (p, q) \\<in> R", "unfolding complement_3_def complement_4_def R_def"], ["proof (prove)\nusing this:\n  p \\<in> initial\n           (nba (alphabet A)\n             {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n              initial A}\n             (complement_succ_3 A)\n             (\\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c))\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>initial\n                    (nba (alphabet A)\n                      {(Some \\<circ>\n                        (\\<lambda>_. (2 * card (nodes A), False))) |`\n                       initial A}\n                      (complement_succ_4 A)\n                      (\\<lambda>f.\n                          \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)).\n       (p, q)\n       \\<in> {(f, g).\n              dom f = dom g \\<and>\n              (\\<forall>p\\<in>dom f.\n                  fst (the (f p)) \\<le> fst (the (g p))) \\<and>\n              (\\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p)))}", "by simp"], ["proof (state)\nthis:\n  ?p \\<in> initial (complement_3 A) \\<Longrightarrow>\n  \\<exists>q\\<in>initial (complement_4 A). (?p, q) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>a p p' q.\n       \\<lbrakk>p' \\<in> transition (complement_3 A) a p;\n        (p, q) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q'\\<in>transition (complement_4 A) a q.\n                            (p', q') \\<in> R\n 2. \\<And>p q.\n       \\<lbrakk>(p, q) \\<in> R; accepting (complement_3 A) p\\<rbrakk>\n       \\<Longrightarrow> accepting (complement_4 A) q", "show \"\\<exists> g' \\<in> transition (complement_4 A) a g. (f', g') \\<in> R\"\n      if \"f' \\<in> transition (complement_3 A) a f\" \"(f, g) \\<in> R\"\n      for a f f' g"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have 1: \"f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))", "using that(1)"], ["proof (prove)\nusing this:\n  f' \\<in> transition (complement_3 A) a f\n\ngoal (1 subgoal):\n 1. f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))", "unfolding complement_3_def complement_succ_3_def"], ["proof (prove)\nusing this:\n  f' \\<in> transition\n            (nba (alphabet A)\n              {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n               initial A}\n              (\\<lambda>a.\n                  ((expand_map \\<circ>\\<circ> get_3) A \\<circ>\\<circ>\\<circ>\n                   bounds_3)\n                   A a \\<circ>\n                  refresh_1)\n              (\\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c))\n            a f\n\ngoal (1 subgoal):\n 1. f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))", "by auto"], ["proof (state)\nthis:\n  f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have 2:\n        \"dom f = dom g\"\n        \"\\<forall> p \\<in> dom f. fst (the (f p)) \\<le> fst (the (g p))\"\n        \"\\<forall> p \\<in> dom f. snd (the (f p)) \\<longleftrightarrow> snd (the (g p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "using that(2)"], ["proof (prove)\nusing this:\n  (f, g) \\<in> R\n\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "unfolding R_def"], ["proof (prove)\nusing this:\n  (f, g)\n  \\<in> {(f, g).\n         dom f = dom g \\<and>\n         (\\<forall>p\\<in>dom f.\n             fst (the (f p)) \\<le> fst (the (g p))) \\<and>\n         (\\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p)))}\n\ngoal (1 subgoal):\n 1. dom f = dom g &&&\n    \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p)) &&&\n    \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))", "by auto"], ["proof (state)\nthis:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p))\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have \"dom f' = dom (get_3 A (bounds_3 A a (refresh_1 f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f' = dom (get_3 A (bounds_3 A a (refresh_1 f)))", "using expand_map_dom 1"], ["proof (prove)\nusing this:\n  ?g \\<in> expand_map ?f \\<Longrightarrow> dom ?g = dom ?f\n  f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. dom f' = dom (get_3 A (bounds_3 A a (refresh_1 f)))", "by this"], ["proof (state)\nthis:\n  dom f' = dom (get_3 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "also"], ["proof (state)\nthis:\n  dom f' = dom (get_3 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have \"\\<dots> = dom (bounds_3 A a (refresh_1 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (get_3 A (bounds_3 A a (refresh_1 f))) =\n    dom (bounds_3 A a (refresh_1 f))", "by simp"], ["proof (state)\nthis:\n  dom (get_3 A (bounds_3 A a (refresh_1 f))) =\n  dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "finally"], ["proof (chain)\npicking this:\n  dom f' = dom (bounds_3 A a (refresh_1 f))", "have 3: \"dom f' = dom (bounds_3 A a (refresh_1 f))\""], ["proof (prove)\nusing this:\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. dom f' = dom (bounds_3 A a (refresh_1 f))", "by this"], ["proof (state)\nthis:\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "define g' where \"g' p \\<equiv> do\n      {\n        (k, c) \\<leftarrow> bounds_3 A a (refresh_1 g) p;\n        (l, d) \\<leftarrow> f' p;\n        Some (if even k = even l then k else k - 1, d)\n      }\" for p"], ["proof (state)\nthis:\n  g' ?p \\<equiv>\n  bounds_3 A a (refresh_1 g) ?p \\<bind>\n  (\\<lambda>(k, c).\n      f' ?p \\<bind>\n      (\\<lambda>(l, d). Some (if even k = even l then k else k - 1, d)))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have 4: \"g' p = do\n      {\n        kc \\<leftarrow> bounds_3 A a (refresh_1 g) p;\n        ld \\<leftarrow> f' p;\n        Some (if even (fst kc) = even (fst ld) then fst kc else fst kc - 1, snd ld)\n      }\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. g' p =\n    bounds_3 A a (refresh_1 g) p \\<bind>\n    (\\<lambda>kc.\n        f' p \\<bind>\n        (\\<lambda>ld.\n            Some\n             (if even (fst kc) = even (fst ld) then fst kc else fst kc - 1,\n              snd ld)))", "unfolding g'_def case_prod_beta"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_3 A a (refresh_1 g) p \\<bind>\n    (\\<lambda>pa.\n        f' p \\<bind>\n        (\\<lambda>p.\n            Some\n             (if even (fst pa) = even (fst p) then fst pa else fst pa - 1,\n              snd p))) =\n    bounds_3 A a (refresh_1 g) p \\<bind>\n    (\\<lambda>kc.\n        f' p \\<bind>\n        (\\<lambda>ld.\n            Some\n             (if even (fst kc) = even (fst ld) then fst kc else fst kc - 1,\n              snd ld)))", "by rule"], ["proof (state)\nthis:\n  g' ?p =\n  bounds_3 A a (refresh_1 g) ?p \\<bind>\n  (\\<lambda>kc.\n      f' ?p \\<bind>\n      (\\<lambda>ld.\n          Some\n           (if even (fst kc) = even (fst ld) then fst kc else fst kc - 1,\n            snd ld)))\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have \"dom g' = dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g' = dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f'", "using 4 bind_eq_Some_conv"], ["proof (prove)\nusing this:\n  g' ?p =\n  bounds_3 A a (refresh_1 g) ?p \\<bind>\n  (\\<lambda>kc.\n      f' ?p \\<bind>\n      (\\<lambda>ld.\n          Some\n           (if even (fst kc) = even (fst ld) then fst kc else fst kc - 1,\n            snd ld)))\n  (?f \\<bind> ?g = Some ?x) =\n  (\\<exists>y. ?f = Some y \\<and> ?g y = Some ?x)\n\ngoal (1 subgoal):\n 1. dom g' = dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f'", "by fastforce"], ["proof (state)\nthis:\n  dom g' = dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f'\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "also"], ["proof (state)\nthis:\n  dom g' = dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f'\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have \"\\<dots> = dom f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f' = dom f'", "using 2 3"], ["proof (prove)\nusing this:\n  dom f = dom g\n  \\<forall>p\\<in>dom f. fst (the (f p)) \\<le> fst (the (g p))\n  \\<forall>p\\<in>dom f. snd (the (f p)) = snd (the (g p))\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f' = dom f'", "by simp"], ["proof (state)\nthis:\n  dom (bounds_3 A a (refresh_1 g)) \\<inter> dom f' = dom f'\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "finally"], ["proof (chain)\npicking this:\n  dom g' = dom f'", "have 5: \"dom g' = dom f'\""], ["proof (prove)\nusing this:\n  dom g' = dom f'\n\ngoal (1 subgoal):\n 1. dom g' = dom f'", "by this"], ["proof (state)\nthis:\n  dom g' = dom f'\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "have 6: \"(l, d) \\<in> items_3 A p (k, c)\"\n        if \"bounds_3 A a (refresh_1 f) p = Some (k, c)\" \"f' p = Some (l, d)\" for p k c l d"], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (k, c)", "using 1 that"], ["proof (prove)\nusing this:\n  f' \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\n  bounds_3 A a (refresh_1 f) p = Some (k, c)\n  f' p = Some (l, d)\n\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (k, c)", "unfolding expand_map_alt_def get_3_def"], ["proof (prove)\nusing this:\n  f' \\<in> {g. dom g =\n               dom (\\<lambda>p.\n                       map_option (items_3 A p)\n                        (bounds_3 A a (refresh_1 f) p)) \\<and>\n               (\\<forall>x S y.\n                   map_option (items_3 A x) (bounds_3 A a (refresh_1 f) x) =\n                   Some S \\<longrightarrow>\n                   g x = Some y \\<longrightarrow> y \\<in> S)}\n  bounds_3 A a (refresh_1 f) p = Some (k, c)\n  f' p = Some (l, d)\n\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (k, c)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>bounds_3 A a (refresh_1 f) ?p = Some (?k, ?c);\n   f' ?p = Some (?l, ?d)\\<rbrakk>\n  \\<Longrightarrow> (?l, ?d) \\<in> items_3 A ?p (?k, ?c)\n\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R", "unfolding complement_4_def nba.sel complement_succ_4_def comp_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g'\\<in>expand_map (get_4 A (bounds_3 A a (refresh_1 g))).\n       (f', g') \\<in> R", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f', ?g') \\<in> R\n 2. ?g' \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 g)))", "show \"(f', g') \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f', g') \\<in> R", "unfolding R_def mem_Collect_eq prod.case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f' = dom g' \\<and>\n    (\\<forall>p\\<in>dom f'. fst (the (f' p)) \\<le> fst (the (g' p))) \\<and>\n    (\\<forall>p\\<in>dom f'. snd (the (f' p)) = snd (the (g' p)))", "proof (intro conjI ballI)"], ["proof (state)\ngoal (3 subgoals):\n 1. dom f' = dom g'\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 3. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "show \"dom f' = dom g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f' = dom g'", "using 5"], ["proof (prove)\nusing this:\n  dom g' = dom f'\n\ngoal (1 subgoal):\n 1. dom f' = dom g'", "by rule"], ["proof (state)\nthis:\n  dom f' = dom g'\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "assume 10: \"p \\<in> dom f'\""], ["proof (state)\nthis:\n  p \\<in> dom f'\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 11: \"p \\<in> dom (bounds_3 A a (refresh_1 g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> dom (bounds_3 A a (refresh_1 g))", "using 2(1) 3 10"], ["proof (prove)\nusing this:\n  dom f = dom g\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n  p \\<in> dom f'\n\ngoal (1 subgoal):\n 1. p \\<in> dom (bounds_3 A a (refresh_1 g))", "by simp"], ["proof (state)\nthis:\n  p \\<in> dom (bounds_3 A a (refresh_1 g))\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "obtain k c where 12: \"bounds_3 A a (refresh_1 g) p = Some (k, c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        bounds_3 A a (refresh_1 g) p = Some (k, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 11"], ["proof (prove)\nusing this:\n  p \\<in> dom (bounds_3 A a (refresh_1 g))\n\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        bounds_3 A a (refresh_1 g) p = Some (k, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "obtain l d where 13: \"f' p = Some (l, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        f' p = Some (l, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 10"], ["proof (prove)\nusing this:\n  p \\<in> dom f'\n\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        f' p = Some (l, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f' p = Some (l, d)\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "obtain n e where 14: \"bounds_3 A a (refresh_1 f) p = Some (n, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n e.\n        bounds_3 A a (refresh_1 f) p = Some (n, e) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 10 3"], ["proof (prove)\nusing this:\n  p \\<in> dom f'\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. (\\<And>n e.\n        bounds_3 A a (refresh_1 f) p = Some (n, e) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 15: \"(l, d) \\<in> items_3 A p (n, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (n, e)", "using 6 14 13"], ["proof (prove)\nusing this:\n  \\<lbrakk>bounds_3 A a (refresh_1 f) ?p = Some (?k, ?c);\n   f' ?p = Some (?l, ?d)\\<rbrakk>\n  \\<Longrightarrow> (?l, ?d) \\<in> items_3 A ?p (?k, ?c)\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  f' p = Some (l, d)\n\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (n, e)", "by this"], ["proof (state)\nthis:\n  (l, d) \\<in> items_3 A p (n, e)\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 16: \"n \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> k", "using bounds_R(1) that(2) 14 12"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?f, ?g) \\<in> R;\n   bounds_3 ?A ?a (refresh_1 ?f) ?p = Some (?n, ?e);\n   bounds_3 ?A ?a (refresh_1 ?g) ?p = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?n \\<le> ?k\n  (f, g) \\<in> R\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. n \\<le> k", "by this"], ["proof (state)\nthis:\n  n \\<le> k\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 17: \"l \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> k", "using 15 16"], ["proof (prove)\nusing this:\n  (l, d) \\<in> items_3 A p (n, e)\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. l \\<le> k", "unfolding items_3_def"], ["proof (prove)\nusing this:\n  (l, d)\n  \\<in> (case (n, e) of\n         (k, c) \\<Rightarrow>\n           {(l, c \\<and> even l) |l.\n            l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)})\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. l \\<le> k", "by simp"], ["proof (state)\nthis:\n  l \\<le> k\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 18: \"even k \\<longleftrightarrow> odd l \\<Longrightarrow> l \\<le> k \\<Longrightarrow> l \\<le> k - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>even k = odd l; l \\<le> k\\<rbrakk>\n    \\<Longrightarrow> l \\<le> k - 1", "by presburger"], ["proof (state)\nthis:\n  \\<lbrakk>even k = odd l; l \\<le> k\\<rbrakk>\n  \\<Longrightarrow> l \\<le> k - 1\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "have 19: \"e \\<longleftrightarrow> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = c", "using bounds_R(2) that(2) 14 12"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?f, ?g) \\<in> R;\n   bounds_3 ?A ?a (refresh_1 ?f) ?p = Some (?n, ?e);\n   bounds_3 ?A ?a (refresh_1 ?g) ?p = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?e = ?c\n  (f, g) \\<in> R\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. e = c", "by this"], ["proof (state)\nthis:\n  e = c\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow>\n       fst (the (f' p)) \\<le> fst (the (g' p))\n 2. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "show \"fst (the (f' p)) \\<le> fst (the (g' p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (the (f' p)) \\<le> fst (the (g' p))", "using 17 18"], ["proof (prove)\nusing this:\n  l \\<le> k\n  \\<lbrakk>even k = odd l; l \\<le> k\\<rbrakk>\n  \\<Longrightarrow> l \\<le> k - 1\n\ngoal (1 subgoal):\n 1. fst (the (f' p)) \\<le> fst (the (g' p))", "unfolding 4 12 13"], ["proof (prove)\nusing this:\n  l \\<le> k\n  \\<lbrakk>even k = odd l; l \\<le> k\\<rbrakk>\n  \\<Longrightarrow> l \\<le> k - 1\n\ngoal (1 subgoal):\n 1. fst (the (Some (l, d)))\n    \\<le> fst (the (Some (k, c) \\<bind>\n                    (\\<lambda>kc.\n                        Some (l, d) \\<bind>\n                        (\\<lambda>ld.\n                            Some\n                             (if even (fst kc) = even (fst ld) then fst kc\n                              else fst kc - 1,\n                              snd ld)))))", "by simp"], ["proof (state)\nthis:\n  fst (the (f' p)) \\<le> fst (the (g' p))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p \\<in> dom f' \\<Longrightarrow> snd (the (f' p)) = snd (the (g' p))", "show \"snd (the (f' p)) \\<longleftrightarrow> snd (the (g' p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (the (f' p)) = snd (the (g' p))", "using 19"], ["proof (prove)\nusing this:\n  e = c\n\ngoal (1 subgoal):\n 1. snd (the (f' p)) = snd (the (g' p))", "unfolding 4 12 13"], ["proof (prove)\nusing this:\n  e = c\n\ngoal (1 subgoal):\n 1. snd (the (Some (l, d))) =\n    snd (the (Some (k, c) \\<bind>\n              (\\<lambda>kc.\n                  Some (l, d) \\<bind>\n                  (\\<lambda>ld.\n                      Some\n                       (if even (fst kc) = even (fst ld) then fst kc\n                        else fst kc - 1,\n                        snd ld)))))", "by simp"], ["proof (state)\nthis:\n  snd (the (f' p)) = snd (the (g' p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f', g') \\<in> R\n\ngoal (1 subgoal):\n 1. g' \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 g)))", "show \"g' \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 g)))", "unfolding expand_map_alt_def mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g))) \\<and>\n    (\\<forall>x S y.\n        get_4 A (bounds_3 A a (refresh_1 g)) x = Some S \\<longrightarrow>\n        g' x = Some y \\<longrightarrow> y \\<in> S)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g)))\n 2. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "show \"dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g)))", "using 2(1) 3 5"], ["proof (prove)\nusing this:\n  dom f = dom g\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n  dom g' = dom f'\n\ngoal (1 subgoal):\n 1. dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g)))", "by simp"], ["proof (state)\nthis:\n  dom g' = dom (get_4 A (bounds_3 A a (refresh_1 g)))\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "fix p S xy"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "assume 10: \"get_4 A (bounds_3 A a (refresh_1 g)) p = Some S\""], ["proof (state)\nthis:\n  get_4 A (bounds_3 A a (refresh_1 g)) p = Some S\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "assume 11: \"g' p = Some xy\""], ["proof (state)\nthis:\n  g' p = Some xy\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "obtain k c where 12: \"bounds_3 A a (refresh_1 g) p = Some (k, c)\" \"S = items_4 A p (k, c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        \\<lbrakk>bounds_3 A a (refresh_1 g) p = Some (k, c);\n         S = items_4 A p (k, c)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 10"], ["proof (prove)\nusing this:\n  get_4 A (bounds_3 A a (refresh_1 g)) p = Some S\n\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        \\<lbrakk>bounds_3 A a (refresh_1 g) p = Some (k, c);\n         S = items_4 A p (k, c)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding get_4_def"], ["proof (prove)\nusing this:\n  map_option (items_4 A p) (bounds_3 A a (refresh_1 g) p) = Some S\n\ngoal (1 subgoal):\n 1. (\\<And>k c.\n        \\<lbrakk>bounds_3 A a (refresh_1 g) p = Some (k, c);\n         S = items_4 A p (k, c)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n  S = items_4 A p (k, c)\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "obtain l d where 13: \"f' p = Some (l, d)\" \"xy = (if even k \\<longleftrightarrow> even l then k else k - 1, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        \\<lbrakk>f' p = Some (l, d);\n         xy = (if even k = even l then k else k - 1, d)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 11 12"], ["proof (prove)\nusing this:\n  g' p = Some xy\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n  S = items_4 A p (k, c)\n\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        \\<lbrakk>f' p = Some (l, d);\n         xy = (if even k = even l then k else k - 1, d)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding g'_def"], ["proof (prove)\nusing this:\n  bounds_3 A a (refresh_1 g) p \\<bind>\n  (\\<lambda>(k, c).\n      f' p \\<bind>\n      (\\<lambda>(l, d). Some (if even k = even l then k else k - 1, d))) =\n  Some xy\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n  S = items_4 A p (k, c)\n\ngoal (1 subgoal):\n 1. (\\<And>l d.\n        \\<lbrakk>f' p = Some (l, d);\n         xy = (if even k = even l then k else k - 1, d)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: bind_splits)"], ["proof (state)\nthis:\n  f' p = Some (l, d)\n  xy = (if even k = even l then k else k - 1, d)\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "obtain n e where 14: \"bounds_3 A a (refresh_1 f) p = Some (n, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n e.\n        bounds_3 A a (refresh_1 f) p = Some (n, e) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 13(1) 3"], ["proof (prove)\nusing this:\n  f' p = Some (l, d)\n  dom f' = dom (bounds_3 A a (refresh_1 f))\n\ngoal (1 subgoal):\n 1. (\\<And>n e.\n        bounds_3 A a (refresh_1 f) p = Some (n, e) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "have 15: \"(l, d) \\<in> items_3 A p (n, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (n, e)", "using 6 14 13(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>bounds_3 A a (refresh_1 f) ?p = Some (?k, ?c);\n   f' ?p = Some (?l, ?d)\\<rbrakk>\n  \\<Longrightarrow> (?l, ?d) \\<in> items_3 A ?p (?k, ?c)\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  f' p = Some (l, d)\n\ngoal (1 subgoal):\n 1. (l, d) \\<in> items_3 A p (n, e)", "by this"], ["proof (state)\nthis:\n  (l, d) \\<in> items_3 A p (n, e)\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "have 16: \"n \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> k", "using bounds_R(1) that(2) 14 12(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?f, ?g) \\<in> R;\n   bounds_3 ?A ?a (refresh_1 ?f) ?p = Some (?n, ?e);\n   bounds_3 ?A ?a (refresh_1 ?g) ?p = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?n \\<le> ?k\n  (f, g) \\<in> R\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. n \\<le> k", "by this"], ["proof (state)\nthis:\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "have 17: \"e \\<longleftrightarrow> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e = c", "using bounds_R(2) that(2) 14 12(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?f, ?g) \\<in> R;\n   bounds_3 ?A ?a (refresh_1 ?f) ?p = Some (?n, ?e);\n   bounds_3 ?A ?a (refresh_1 ?g) ?p = Some (?k, ?c)\\<rbrakk>\n  \\<Longrightarrow> ?e = ?c\n  (f, g) \\<in> R\n  bounds_3 A a (refresh_1 f) p = Some (n, e)\n  bounds_3 A a (refresh_1 g) p = Some (k, c)\n\ngoal (1 subgoal):\n 1. e = c", "by this"], ["proof (state)\nthis:\n  e = c\n\ngoal (1 subgoal):\n 1. \\<And>x S y.\n       \\<lbrakk>get_4 A (bounds_3 A a (refresh_1 g)) x = Some S;\n        g' x = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "show \"xy \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xy \\<in> S", "using 15 16 17"], ["proof (prove)\nusing this:\n  (l, d) \\<in> items_3 A p (n, e)\n  n \\<le> k\n  e = c\n\ngoal (1 subgoal):\n 1. xy \\<in> S", "unfolding 12(2) 13(2) items_3_def items_4_def"], ["proof (prove)\nusing this:\n  (l, d)\n  \\<in> (case (n, e) of\n         (k, c) \\<Rightarrow>\n           {(l, c \\<and> even l) |l.\n            l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)})\n  n \\<le> k\n  e = c\n\ngoal (1 subgoal):\n 1. (if even k = even l then k else k - 1, d)\n    \\<in> (case (k, c) of\n           (k, c) \\<Rightarrow>\n             {(l, c \\<and> even l) |l.\n              k \\<le> Suc l \\<and>\n              l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)})", "by auto"], ["proof (state)\nthis:\n  xy \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g' \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 g)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g'\\<in>transition (complement_4 A) a g. (f', g') \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?f' \\<in> transition (complement_3 A) ?a ?f;\n   (?f, ?g) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<exists>g'\\<in>transition (complement_4 A) ?a ?g.\n                       (?f', g') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>(p, q) \\<in> R; accepting (complement_3 A) p\\<rbrakk>\n       \\<Longrightarrow> accepting (complement_4 A) q", "show \"\\<And> p q. (p, q) \\<in> R \\<Longrightarrow> accepting (complement_3 A) p \\<Longrightarrow> accepting (complement_4 A) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>(p, q) \\<in> R; accepting (complement_3 A) p\\<rbrakk>\n       \\<Longrightarrow> accepting (complement_4 A) q", "unfolding complement_3_def complement_4_def R_def map_to_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>(p, q)\n                \\<in> {(f, g).\n                       dom f = dom g \\<and>\n                       (\\<forall>p\\<in>dom f.\n                           fst (the (f p)) \\<le> fst (the (g p))) \\<and>\n                       (\\<forall>p\\<in>dom f.\n                           snd (the (f p)) = snd (the (g p)))};\n        accepting\n         (nba (alphabet A)\n           {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n            initial A}\n           (complement_succ_3 A)\n           (\\<lambda>f.\n               \\<forall>(p, k, c)\\<in>{(k, v). f k = Some v}. \\<not> c))\n         p\\<rbrakk>\n       \\<Longrightarrow> accepting\n                          (nba (alphabet A)\n                            {(Some \\<circ>\n                              (\\<lambda>_. (2 * card (nodes A), False))) |`\n                             initial A}\n                            (complement_succ_4 A)\n                            (\\<lambda>f.\n                                \\<forall>(p, k, c)\n   \\<in>{(k, v). f k = Some v}.\n                                   \\<not> c))\n                          q", "by (auto) (metis domIff eq_snd_iff option.exhaust_sel option.sel)"], ["proof (state)\nthis:\n  \\<lbrakk>(?p, ?q) \\<in> R; accepting (complement_3 A) ?p\\<rbrakk>\n  \\<Longrightarrow> accepting (complement_4 A) ?q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_4_less: \"complement_4 A \\<le> complement_3 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complement_4 A \\<le> complement_3 A", "unfolding less_eq_nba_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphabet (complement_4 A) \\<subseteq> alphabet (complement_3 A) \\<and>\n    initial (complement_4 A) \\<subseteq> initial (complement_3 A) \\<and>\n    transition (complement_4 A) \\<le> transition (complement_3 A) \\<and>\n    accepting (complement_4 A) \\<le> accepting (complement_3 A)", "unfolding complement_4_def complement_3_def nba.sel"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphabet A \\<subseteq> alphabet A \\<and>\n    {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |` initial A}\n    \\<subseteq> {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n                 initial A} \\<and>\n    complement_succ_4 A \\<le> complement_succ_3 A \\<and>\n    (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y)\n    \\<le> (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y)", "unfolding complement_succ_4_def complement_succ_3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphabet A \\<subseteq> alphabet A \\<and>\n    {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |` initial A}\n    \\<subseteq> {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n                 initial A} \\<and>\n    (\\<lambda>a.\n        ((expand_map \\<circ>\\<circ> get_4) A \\<circ>\\<circ>\\<circ> bounds_3)\n         A a \\<circ>\n        refresh_1)\n    \\<le> (\\<lambda>a.\n              ((expand_map \\<circ>\\<circ> get_3) A \\<circ>\\<circ>\\<circ>\n               bounds_3)\n               A a \\<circ>\n              refresh_1) \\<and>\n    (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y)\n    \\<le> (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y)", "proof (safe intro!: le_funI, unfold comp_apply)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       xb \\<in> expand_map\n                 (get_4 A (bounds_3 A x (refresh_1 xa))) \\<Longrightarrow>\n       xb \\<in> expand_map (get_3 A (bounds_3 A x (refresh_1 xa)))", "fix a f g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       xb \\<in> expand_map\n                 (get_4 A (bounds_3 A x (refresh_1 xa))) \\<Longrightarrow>\n       xb \\<in> expand_map (get_3 A (bounds_3 A x (refresh_1 xa)))", "assume \"g \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 f)))\""], ["proof (state)\nthis:\n  g \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       xb \\<in> expand_map\n                 (get_4 A (bounds_3 A x (refresh_1 xa))) \\<Longrightarrow>\n       xb \\<in> expand_map (get_3 A (bounds_3 A x (refresh_1 xa)))", "then"], ["proof (chain)\npicking this:\n  g \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 f)))", "show \"g \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\""], ["proof (prove)\nusing this:\n  g \\<in> expand_map (get_4 A (bounds_3 A a (refresh_1 f)))\n\ngoal (1 subgoal):\n 1. g \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))", "unfolding get_4_def get_3_def items_4_def items_3_def expand_map_alt_def"], ["proof (prove)\nusing this:\n  g \\<in> {g. dom g =\n              dom (\\<lambda>p.\n                      map_option\n                       (\\<lambda>(k, c).\n                           {(l, c \\<and> even l) |l.\n                            k \\<le> Suc l \\<and>\n                            l \\<le> k \\<and>\n                            (accepting A p \\<longrightarrow> even l)})\n                       (bounds_3 A a (refresh_1 f) p)) \\<and>\n              (\\<forall>x S y.\n                  map_option\n                   (\\<lambda>(k, c).\n                       {(l, c \\<and> even l) |l.\n                        k \\<le> Suc l \\<and>\n                        l \\<le> k \\<and>\n                        (accepting A x \\<longrightarrow> even l)})\n                   (bounds_3 A a (refresh_1 f) x) =\n                  Some S \\<longrightarrow>\n                  g x = Some y \\<longrightarrow> y \\<in> S)}\n\ngoal (1 subgoal):\n 1. g \\<in> {g. dom g =\n                dom (\\<lambda>p.\n                        map_option\n                         (\\<lambda>(k, c).\n                             {(l, c \\<and> even l) |l.\n                              l \\<le> k \\<and>\n                              (accepting A p \\<longrightarrow> even l)})\n                         (bounds_3 A a (refresh_1 f) p)) \\<and>\n                (\\<forall>x S y.\n                    map_option\n                     (\\<lambda>(k, c).\n                         {(l, c \\<and> even l) |l.\n                          l \\<le> k \\<and>\n                          (accepting A x \\<longrightarrow> even l)})\n                     (bounds_3 A a (refresh_1 f) x) =\n                    Some S \\<longrightarrow>\n                    g x = Some y \\<longrightarrow> y \\<in> S)}", "by blast"], ["proof (state)\nthis:\n  g \\<in> expand_map (get_3 A (bounds_3 A a (refresh_1 f)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_4_language_2: \"language (complement_4 A) \\<subseteq> language (complement_3 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement_4 A) \\<subseteq> language (complement_3 A)", "using language_mono complement_4_less"], ["proof (prove)\nusing this:\n  mono language\n  complement_4 ?A \\<le> complement_3 ?A\n\ngoal (1 subgoal):\n 1. language (complement_4 A) \\<subseteq> language (complement_3 A)", "by (auto dest: monoD)"], ["", "lemma complement_4_language: \"language (complement_3 A) = language (complement_4 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement_3 A) = language (complement_4 A)", "using complement_4_language_1 complement_4_language_2"], ["proof (prove)\nusing this:\n  language (complement_3 ?A) \\<subseteq> language (complement_4 ?A)\n  language (complement_4 ?A) \\<subseteq> language (complement_3 ?A)\n\ngoal (1 subgoal):\n 1. language (complement_3 A) = language (complement_4 A)", "by blast"], ["", "lemma complement_4_finite[simp]:\n    assumes \"finite (nodes A)\"\n    shows \"finite (nodes (complement_4 A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have \"(nodes (complement_3 A), nodes (complement_2 A)) \\<in> \\<langle>Id\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nodes (complement_3 A), nodes (complement_2 A))\n    \\<in> \\<langle>Id\\<rangle>set_rel", "using complement_3_refine"], ["proof (prove)\nusing this:\n  (complement_3, complement_2)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        Id\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (nodes (complement_3 A), nodes (complement_2 A))\n    \\<in> \\<langle>Id\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (nodes (complement_3 A), nodes (complement_2 A))\n  \\<in> \\<langle>Id\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "also"], ["proof (state)\nthis:\n  (nodes (complement_3 A), nodes (complement_2 A))\n  \\<in> \\<langle>Id\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have \"(nodes (complement_2 A), nodes (complement_1 A)) \\<in> \\<langle>Id\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nodes (complement_2 A), nodes (complement_1 A))\n    \\<in> \\<langle>Id\\<rangle>set_rel", "using complement_2_refine"], ["proof (prove)\nusing this:\n  (complement_2, complement_1)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        Id\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (nodes (complement_2 A), nodes (complement_1 A))\n    \\<in> \\<langle>Id\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (nodes (complement_2 A), nodes (complement_1 A))\n  \\<in> \\<langle>Id\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "also"], ["proof (state)\nthis:\n  (nodes (complement_2 A), nodes (complement_1 A))\n  \\<in> \\<langle>Id\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have \"(nodes (complement_1 A), nodes (complement A)) \\<in> \\<langle>cs_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nodes (complement_1 A), nodes (complement A))\n    \\<in> \\<langle>cs_rel\\<rangle>set_rel", "using complement_1_refine"], ["proof (prove)\nusing this:\n  (complement_1, complement)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        cs_rel\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (nodes (complement_1 A), nodes (complement A))\n    \\<in> \\<langle>cs_rel\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (nodes (complement_1 A), nodes (complement A))\n  \\<in> \\<langle>cs_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "finally"], ["proof (chain)\npicking this:\n  (nodes (complement_3 A), nodes (complement A))\n  \\<in> (\\<langle>Id\\<rangle>set_rel O \\<langle>Id\\<rangle>set_rel) O\n        \\<langle>cs_rel\\<rangle>set_rel", "have 1: \"(nodes (complement_3 A), nodes (complement A)) \\<in> \\<langle>cs_rel\\<rangle> set_rel\""], ["proof (prove)\nusing this:\n  (nodes (complement_3 A), nodes (complement A))\n  \\<in> (\\<langle>Id\\<rangle>set_rel O \\<langle>Id\\<rangle>set_rel) O\n        \\<langle>cs_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. (nodes (complement_3 A), nodes (complement A))\n    \\<in> \\<langle>cs_rel\\<rangle>set_rel", "by simp"], ["proof (state)\nthis:\n  (nodes (complement_3 A), nodes (complement A))\n  \\<in> \\<langle>cs_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have 2: \"finite (nodes (complement A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (complement A))", "using complement_finite assms(1)"], ["proof (prove)\nusing this:\n  finite (nodes ?A) \\<Longrightarrow> finite (nodes (complement ?A))\n  finite (nodes A)\n\ngoal (1 subgoal):\n 1. finite (nodes (complement A))", "by this"], ["proof (state)\nthis:\n  finite (nodes (complement A))\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have 3: \"finite (nodes (complement_3 A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (complement_3 A))", "using finite_set_rel_transfer_back 1 cs_rel_inv_single_valued 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, ?s') \\<in> \\<langle>?R\\<rangle>set_rel;\n   single_valued (?R\\<inverse>); finite ?s'\\<rbrakk>\n  \\<Longrightarrow> finite ?s\n  (nodes (complement_3 A), nodes (complement A))\n  \\<in> \\<langle>cs_rel\\<rangle>set_rel\n  single_valued (cs_rel\\<inverse>)\n  finite (nodes (complement A))\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_3 A))", "by this"], ["proof (state)\nthis:\n  finite (nodes (complement_3 A))\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "have 4: \"nodes (complement_4 A) \\<subseteq> nodes (complement_3 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (complement_4 A) \\<subseteq> nodes (complement_3 A)", "using nodes_mono complement_4_less"], ["proof (prove)\nusing this:\n  mono nodes\n  complement_4 ?A \\<le> complement_3 ?A\n\ngoal (1 subgoal):\n 1. nodes (complement_4 A) \\<subseteq> nodes (complement_3 A)", "by (auto dest: monoD)"], ["proof (state)\nthis:\n  nodes (complement_4 A) \\<subseteq> nodes (complement_3 A)\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "show \"finite (nodes (complement_4 A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "using finite_subset 4 3"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  nodes (complement_4 A) \\<subseteq> nodes (complement_3 A)\n  finite (nodes (complement_3 A))\n\ngoal (1 subgoal):\n 1. finite (nodes (complement_4 A))", "by this"], ["proof (state)\nthis:\n  finite (nodes (complement_4 A))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complement_4_correct:\n    assumes \"finite (nodes A)\"\n    shows \"language (complement_4 A) = streams (alphabet A) - language A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "have \"language (complement_4 A) = language (complement_3 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement_4 A) = language (complement_3 A)", "using complement_4_language"], ["proof (prove)\nusing this:\n  language (complement_3 ?A) = language (complement_4 ?A)\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = language (complement_3 A)", "by rule"], ["proof (state)\nthis:\n  language (complement_4 A) = language (complement_3 A)\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "also"], ["proof (state)\nthis:\n  language (complement_4 A) = language (complement_3 A)\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "have \"(language (complement_3 A), language (complement_2 A)) \\<in> \\<langle>\\<langle>Id\\<rangle> stream_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (language (complement_3 A), language (complement_2 A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "using complement_3_refine"], ["proof (prove)\nusing this:\n  (complement_3, complement_2)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        Id\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (language (complement_3 A), language (complement_2 A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (language (complement_3 A), language (complement_2 A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "also"], ["proof (state)\nthis:\n  (language (complement_3 A), language (complement_2 A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "have \"(language (complement_2 A), language (complement_1 A)) \\<in> \\<langle>\\<langle>Id\\<rangle> stream_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (language (complement_2 A), language (complement_1 A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "using complement_2_refine"], ["proof (prove)\nusing this:\n  (complement_2, complement_1)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        Id\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (language (complement_2 A), language (complement_1 A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (language (complement_2 A), language (complement_1 A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "also"], ["proof (state)\nthis:\n  (language (complement_2 A), language (complement_1 A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "have \"(language (complement_1 A), language (complement A)) \\<in> \\<langle>\\<langle>Id\\<rangle> stream_rel\\<rangle> set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (language (complement_1 A), language (complement A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "using complement_1_refine"], ["proof (prove)\nusing this:\n  (complement_1, complement)\n  \\<in> \\<langle>Id, Id\\<rangle>nba_rel \\<rightarrow> \\<langle>Id,\n        cs_rel\\<rangle>nba_rel\n\ngoal (1 subgoal):\n 1. (language (complement_1 A), language (complement A))\n    \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "by parametricity auto"], ["proof (state)\nthis:\n  (language (complement_1 A), language (complement A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "also"], ["proof (state)\nthis:\n  (language (complement_1 A), language (complement A))\n  \\<in> \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "have \"language (complement A) = streams (alphabet A) - language A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. language (complement A) = streams (alphabet A) - language A", "using complement_language assms(1)"], ["proof (prove)\nusing this:\n  finite (nodes ?A) \\<Longrightarrow>\n  language (complement ?A) = streams (alphabet ?A) - language ?A\n  finite (nodes A)\n\ngoal (1 subgoal):\n 1. language (complement A) = streams (alphabet A) - language A", "by this"], ["proof (state)\nthis:\n  language (complement A) = streams (alphabet A) - language A\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "finally"], ["proof (chain)\npicking this:\n  (language (complement_4 A), streams (alphabet A) - language A)\n  \\<in> (\\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel O\n         \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel) O\n        \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel", "show \"language (complement_4 A) = streams (alphabet A) - language A\""], ["proof (prove)\nusing this:\n  (language (complement_4 A), streams (alphabet A) - language A)\n  \\<in> (\\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel O\n         \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel) O\n        \\<langle>\\<langle>Id\\<rangle>stream_rel\\<rangle>set_rel\n\ngoal (1 subgoal):\n 1. language (complement_4 A) = streams (alphabet A) - language A", "by simp"], ["proof (state)\nthis:\n  language (complement_4 A) = streams (alphabet A) - language A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Phase 5\\<close>"], ["", "definition refresh_5 :: \"'state items \\<Rightarrow> 'state items nres\" where\n    \"refresh_5 f \\<equiv> if \\<exists> (p, k, c) \\<in> map_to_set f. c\n      then RETURN f\n      else do\n      {\n        ASSUME (finite (dom f));\n        FOREACH (map_to_set f) (\\<lambda> (p, k, c) m. do\n        {\n          ASSERT (p \\<notin> dom m);\n          RETURN (m (p \\<mapsto> (k, True)))\n        }\n        ) Map.empty\n      }\""], ["", "definition merge_5 :: \"item \\<Rightarrow> item option \\<Rightarrow> item\" where\n    \"merge_5 \\<equiv> \\<lambda> (k, c). \\<lambda> None \\<Rightarrow> (k, c) | Some (l, d) \\<Rightarrow> (k \\<sqinter> l, c \\<squnion> d)\""], ["", "definition bounds_5 :: \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items nres\" where\n    \"bounds_5 A a f \\<equiv> do\n    {\n      ASSUME (finite (dom f));\n      ASSUME (\\<forall> p. finite (transition A a p));\n      FOREACH (map_to_set f) (\\<lambda> (p, s) m.\n        FOREACH (transition A a p) (\\<lambda> q f.\n          RETURN (f (q \\<mapsto> merge_5 s (f q))))\n        m)\n      Map.empty\n    }\""], ["", "definition items_5 :: \"('label, 'state) nba \\<Rightarrow> 'state \\<Rightarrow> item \\<Rightarrow> item set\" where\n    \"items_5 A p \\<equiv> \\<lambda> (k, c). do\n    {\n      let values = if accepting A p then Set.filter even {k - 1 .. k} else {k - 1 .. k};\n      let item = \\<lambda> l. (l, c \\<and> even l);\n      item ` values\n    }\""], ["", "definition get_5 :: \"('label, 'state) nba \\<Rightarrow> 'state items \\<Rightarrow> ('state \\<rightharpoonup> item set)\" where\n    \"get_5 A f \\<equiv> \\<lambda> p. map_option (items_5 A p) (f p)\""], ["", "definition expand_5 :: \"('a \\<rightharpoonup> 'b set) \\<Rightarrow> ('a \\<rightharpoonup> 'b) set nres\" where\n    \"expand_5 f \\<equiv> FOREACH (map_to_set f) (\\<lambda> (x, S) X. do {\n        ASSERT (\\<forall> g \\<in> X. x \\<notin> dom g);\n        ASSERT (\\<forall> a \\<in> S. \\<forall> b \\<in> S. a \\<noteq> b \\<longrightarrow> (\\<lambda> y. (\\<lambda> g. g (x \\<mapsto> y)) ` X) a \\<inter> (\\<lambda> y. (\\<lambda> g. g (x \\<mapsto> y)) ` X) b = {});\n        RETURN (\\<Union> y \\<in> S. (\\<lambda> g. g (x \\<mapsto> y)) ` X)\n      }) {Map.empty}\""], ["", "definition complement_succ_5 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set nres\" where\n    \"complement_succ_5 A a f \\<equiv> do\n    {\n      f \\<leftarrow> refresh_5 f;\n      f \\<leftarrow> bounds_5 A a f;\n      ASSUME (finite (dom f));\n      expand_5 (get_5 A f)\n    }\""], ["", "lemma bounds_3_empty: \"bounds_3 A a Map.empty = Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_3 A a Map.empty = Map.empty", "unfolding bounds_3_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>q.\n        if Some -` Map.empty ` pred A a q = {} then None\n        else Some\n              (\\<Sqinter> (fst ` Some -` Map.empty ` pred A a q),\n               \\<Squnion> (snd ` Some -` Map.empty ` pred A a q))) =\n    Map.empty", "by auto"], ["", "lemma bounds_3_update: \"bounds_3 A a (f (p \\<mapsto> s)) =\n    override_on (bounds_3 A a f) (Some \\<circ> merge_5 s \\<circ> bounds_3 A a (f (p := None))) (transition A a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_3 A a (f(p \\<mapsto> s)) =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bounds_3 A a (f(p \\<mapsto> s)) x =\n       override_on (bounds_3 A a f)\n        (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A)\n          a (f(p := None)))\n        (transition A a p) x", "note fun_upd_image[simp]"], ["proof (state)\nthis:\n  ?f(?x := ?y) ` ?A =\n  (if ?x \\<in> ?A then insert ?y (?f ` (?A - {?x})) else ?f ` ?A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       bounds_3 A a (f(p \\<mapsto> s)) x =\n       override_on (bounds_3 A a f)\n        (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A)\n          a (f(p := None)))\n        (transition A a p) x", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bounds_3 A a (f(p \\<mapsto> s)) x =\n       override_on (bounds_3 A a f)\n        (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A)\n          a (f(p := None)))\n        (transition A a p) x", "show \"bounds_3 A a (f (p \\<mapsto> s)) q =\n      override_on (bounds_3 A a f) (Some \\<circ> merge_5 s \\<circ> bounds_3 A a (f (p := None))) (transition A a p) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "proof (cases \"q \\<in> transition A a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "case True"], ["proof (state)\nthis:\n  q \\<in> transition A a p\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "define S where \"S \\<equiv> Some -` f ` (pred A a q - {p})\""], ["proof (state)\nthis:\n  S \\<equiv> Some -` f ` (pred A a q - {p})\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "have 1: \"Some -` f (p := Some s) ` pred A a q = insert s S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some -` f(p \\<mapsto> s) ` pred A a q = insert s S", "using True"], ["proof (prove)\nusing this:\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. Some -` f(p \\<mapsto> s) ` pred A a q = insert s S", "unfolding S_def"], ["proof (prove)\nusing this:\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. Some -` f(p \\<mapsto> s) ` pred A a q =\n    insert s (Some -` f ` (pred A a q - {p}))", "by auto"], ["proof (state)\nthis:\n  Some -` f(p \\<mapsto> s) ` pred A a q = insert s S\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "have 2: \"Some -` f (p := None) ` pred A a q = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some -` f(p := None) ` pred A a q = S", "unfolding S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some -` f(p := None) ` pred A a q = Some -` f ` (pred A a q - {p})", "by auto"], ["proof (state)\nthis:\n  Some -` f(p := None) ` pred A a q = S\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "have \"bounds_3 A a (f (p \\<mapsto> s)) q = Some (\\<Sqinter>(fst ` (insert s S)), \\<Squnion>(snd ` (insert s S)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_3 A a (f(p \\<mapsto> s)) q =\n    Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S))", "unfolding bounds_3_def 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let S = insert s S\n     in if S = {} then None\n        else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))) =\n    Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S))", "by simp"], ["proof (state)\nthis:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S))\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "also"], ["proof (state)\nthis:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S))\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "have \"\\<dots> = Some (merge_5 s (bounds_3 A a (f (p := None)) q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S)) =\n    Some (merge_5 s (bounds_3 A a (f(p := None)) q))", "unfolding 2 bounds_3_def merge_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S)) =\n    Some\n     ((case s of\n       (k, c) \\<Rightarrow>\n         \\<lambda>x.\n            case x of None \\<Rightarrow> (k, c)\n            | Some (l, d) \\<Rightarrow> (k \\<sqinter> l, c \\<squnion> d))\n       (let S = S\n        in if S = {} then None\n           else Some (\\<Sqinter> (fst ` S), \\<Squnion> (snd ` S))))", "by (cases s) (simp_all add: cInf_insert)"], ["proof (state)\nthis:\n  Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S)) =\n  Some (merge_5 s (bounds_3 A a (f(p := None)) q))\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "also"], ["proof (state)\nthis:\n  Some (\\<Sqinter> (fst ` insert s S), \\<Squnion> (snd ` insert s S)) =\n  Some (merge_5 s (bounds_3 A a (f(p := None)) q))\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "have \"\\<dots> = override_on (bounds_3 A a f) (Some \\<circ> merge_5 s \\<circ> bounds_3 A a (f (p := None)))\n        (transition A a p) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (merge_5 s (bounds_3 A a (f(p := None)) q)) =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "using True"], ["proof (prove)\nusing this:\n  q \\<in> transition A a p\n\ngoal (1 subgoal):\n 1. Some (merge_5 s (bounds_3 A a (f(p := None)) q)) =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "by simp"], ["proof (state)\nthis:\n  Some (merge_5 s (bounds_3 A a (f(p := None)) q)) =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q\n\ngoal (2 subgoals):\n 1. q \\<in> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q\n 2. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "finally"], ["proof (chain)\npicking this:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q", "show ?thesis"], ["proof (prove)\nusing this:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q\n\ngoal (1 subgoal):\n 1. bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "by this"], ["proof (state)\nthis:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q\n\ngoal (1 subgoal):\n 1. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "case False"], ["proof (state)\nthis:\n  q \\<notin> transition A a p\n\ngoal (1 subgoal):\n 1. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "then"], ["proof (chain)\npicking this:\n  q \\<notin> transition A a p", "have \"pred A a q \\<inter> {x. x \\<noteq> p} = pred A a q\""], ["proof (prove)\nusing this:\n  q \\<notin> transition A a p\n\ngoal (1 subgoal):\n 1. pred A a q \\<inter> {x. x \\<noteq> p} = pred A a q", "by auto"], ["proof (state)\nthis:\n  pred A a q \\<inter> {x. x \\<noteq> p} = pred A a q\n\ngoal (1 subgoal):\n 1. q \\<notin> transition A a p \\<Longrightarrow>\n    bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "with False"], ["proof (chain)\npicking this:\n  q \\<notin> transition A a p\n  pred A a q \\<inter> {x. x \\<noteq> p} = pred A a q", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<notin> transition A a p\n  pred A a q \\<inter> {x. x \\<noteq> p} = pred A a q\n\ngoal (1 subgoal):\n 1. bounds_3 A a (f(p \\<mapsto> s)) q =\n    override_on (bounds_3 A a f)\n     (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n       (f(p := None)))\n     (transition A a p) q", "by (simp add: bounds_3_def)"], ["proof (state)\nthis:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounds_3 A a (f(p \\<mapsto> s)) q =\n  override_on (bounds_3 A a f)\n   (((Some \\<circ>\\<circ> merge_5) s \\<circ>\\<circ>\\<circ> bounds_3 A) a\n     (f(p := None)))\n   (transition A a p) q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma refresh_5_refine: \"(refresh_5, \\<lambda> f. RETURN (refresh_1 f)) \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (refresh_5, \\<lambda>f. RETURN (refresh_1 f))\n    \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (refresh_5 a', RETURN (refresh_1 a'))\n       \\<in> \\<langle>Id\\<rangle>nres_rel", "fix f :: \"'a \\<Rightarrow> item option\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (refresh_5 a', RETURN (refresh_1 a'))\n       \\<in> \\<langle>Id\\<rangle>nres_rel", "have 1: \"(\\<exists> (p, k, c) \\<in> map_to_set f. c) \\<longleftrightarrow> True \\<in> snd ` ran f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>(p, k, c)\\<in>map_to_set f. c) = (True \\<in> snd ` ran f)", "unfolding image_def map_to_set_def ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>(p, k, c)\\<in>{(k, v). f k = Some v}. c) =\n    (True\n     \\<in> {y. \\<exists>x\\<in>{b. \\<exists>a. f a = Some b}. y = snd x})", "by force"], ["proof (state)\nthis:\n  (\\<exists>(p, k, c)\\<in>map_to_set f. c) = (True \\<in> snd ` ran f)\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (refresh_5 a', RETURN (refresh_1 a'))\n       \\<in> \\<langle>Id\\<rangle>nres_rel", "show \"(refresh_5 f, RETURN (refresh_1 f)) \\<in> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (refresh_5 f, RETURN (refresh_1 f)) \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding refresh_5_def refresh_1_def 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if True \\<in> snd ` ran f then RETURN f\n     else ASSUME (finite (dom f)) \\<bind>\n          (\\<lambda>_.\n              FOREACH (map_to_set f)\n               (\\<lambda>(p, k, c) m.\n                   ASSERT (p \\<notin> dom m) \\<bind>\n                   (\\<lambda>_. RETURN (m(p \\<mapsto> (k, True)))))\n               Map.empty),\n     RETURN\n      (if True \\<in> snd ` ran f then f\n       else map_option (apsnd \\<top>) \\<circ> f))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "by (refine_vcg FOREACH_rule_map_eq[where X = \"\\<lambda> m. map_option (apsnd \\<top>) \\<circ> m\"]) (auto)"], ["proof (state)\nthis:\n  (refresh_5 f, RETURN (refresh_1 f)) \\<in> \\<langle>Id\\<rangle>nres_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bounds_5_refine: \"(bounds_5 A a, \\<lambda> f. RETURN (bounds_3 A a f)) \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bounds_5 A a, \\<lambda>f. RETURN (bounds_3 A a f))\n    \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "unfolding bounds_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f.\n        ASSUME (finite (dom f)) \\<bind>\n        (\\<lambda>_.\n            ASSUME (\\<forall>p. finite (transition A a p)) \\<bind>\n            (\\<lambda>_.\n                FOREACH (map_to_set f)\n                 (\\<lambda>(p, s).\n                     FOREACH (transition A a p)\n                      (\\<lambda>q f.\n                          RETURN (f(q \\<mapsto> merge_5 s (f q)))))\n                 Map.empty)),\n     \\<lambda>f. RETURN (bounds_3 A a f))\n    \\<in> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "by\n      (refine_vcg FOREACH_rule_map_eq[where X = \"bounds_3 A a\"] FOREACH_rule_insert_eq)\n      (auto simp: override_on_insert bounds_3_empty bounds_3_update)"], ["", "lemma items_5_refine: \"items_5 = items_4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_5 = items_4", "unfolding items_5_def items_4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A p (k, c).\n        let values =\n              if accepting A p then Set.filter even {k - 1..k}\n              else {k - 1..k};\n            item = \\<lambda>l. (l, c \\<and> even l)\n        in item ` values) =\n    (\\<lambda>A p (k, c).\n        {(l, c \\<and> even l) |l.\n         k \\<le> Suc l \\<and>\n         l \\<le> k \\<and> (accepting A p \\<longrightarrow> even l)})", "by (intro ext) (auto split: if_splits)"], ["", "lemma get_5_refine: \"get_5 = get_4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_5 = get_4", "unfolding get_5_def get_4_def items_5_refine"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A f p. map_option (items_4 A p) (f p)) =\n    (\\<lambda>A f p. map_option (items_4 A p) (f p))", "by rule"], ["", "lemma expand_5_refine: \"(expand_5 f, ASSERT (finite (dom f)) \\<then> RETURN (expand_map f)) \\<in> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (expand_5 f,\n     ASSERT (finite (dom f)) \\<bind> (\\<lambda>_. RETURN (expand_map f)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding expand_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (FOREACH (map_to_set f)\n      (\\<lambda>(x, S) X.\n          ASSERT (\\<forall>g\\<in>X. x \\<notin> dom g) \\<bind>\n          (\\<lambda>_.\n              ASSERT\n               (\\<forall>a\\<in>S.\n                   \\<forall>b\\<in>S.\n                      a \\<noteq> b \\<longrightarrow>\n                      (\\<lambda>g. g(x \\<mapsto> a)) ` X \\<inter>\n                      (\\<lambda>g. g(x \\<mapsto> b)) ` X =\n                      {}) \\<bind>\n              (\\<lambda>_.\n                  RETURN\n                   (\\<Union>y\\<in>S. (\\<lambda>g. g(x \\<mapsto> y)) ` X))))\n      {Map.empty},\n     ASSERT (finite (dom f)) \\<bind> (\\<lambda>_. RETURN (expand_map f)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "by (refine_vcg FOREACH_rule_map_eq[where X = expand_map]) (auto dest!: expand_map_dom map_upd_eqD1)"], ["", "lemma complement_succ_5_refine: \"(complement_succ_5, RETURN \\<circ>\\<circ>\\<circ> complement_succ_4) \\<in>\n    Id \\<rightarrow> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_succ_5, RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "unfolding complement_succ_5_def complement_succ_4_def get_5_refine comp_apply"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A a f.\n        refresh_5 f \\<bind>\n        (\\<lambda>f.\n            bounds_5 A a f \\<bind>\n            (\\<lambda>f.\n                ASSUME (finite (dom f)) \\<bind>\n                (\\<lambda>_. expand_5 (get_4 A f)))),\n     \\<lambda>x xa xb.\n        RETURN (expand_map (get_4 x (bounds_3 x xa (refresh_1 xb)))))\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "by (refine_vcg vcg1[OF refresh_5_refine] vcg1[OF bounds_5_refine] vcg0[OF expand_5_refine]) (auto)"], ["", "subsection \\<open>Phase 6\\<close>"], ["", "definition expand_map_get_6 :: \"('label, 'state) nba \\<Rightarrow> 'state items \\<Rightarrow> 'state items set nres\" where\n    \"expand_map_get_6 A f \\<equiv> FOREACH (map_to_set f) (\\<lambda> (k, v) X. do {\n      ASSERT (\\<forall> g \\<in> X. k \\<notin> dom g);\n      ASSERT (\\<forall> a \\<in> (items_5 A k v). \\<forall> b \\<in> (items_5 A k v). a \\<noteq> b \\<longrightarrow> (\\<lambda> y. (\\<lambda> g. g (k \\<mapsto> y)) ` X) a \\<inter> (\\<lambda> y. (\\<lambda> g. g (k \\<mapsto> y)) ` X) b = {});\n      RETURN (\\<Union> y \\<in> items_5 A k v. (\\<lambda> g. g (k \\<mapsto> y)) ` X)\n      }) {Map.empty}\""], ["", "lemma expand_map_get_6_refine: \"(expand_map_get_6, expand_5 \\<circ>\\<circ> get_5) \\<in> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (expand_map_get_6, expand_5 \\<circ>\\<circ> get_5)\n    \\<in> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "unfolding expand_map_get_6_def expand_5_def get_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A f.\n        FOREACH (map_to_set f)\n         (\\<lambda>(k, v) X.\n             ASSERT (\\<forall>g\\<in>X. k \\<notin> dom g) \\<bind>\n             (\\<lambda>_.\n                 ASSERT\n                  (\\<forall>a\\<in>items_5 A k v.\n                      \\<forall>b\\<in>items_5 A k v.\n                         a \\<noteq> b \\<longrightarrow>\n                         (\\<lambda>g. g(k \\<mapsto> a)) ` X \\<inter>\n                         (\\<lambda>g. g(k \\<mapsto> b)) ` X =\n                         {}) \\<bind>\n                 (\\<lambda>_.\n                     RETURN\n                      (\\<Union>y\\<in>items_5 A k v.\n                          (\\<lambda>g. g(k \\<mapsto> y)) ` X))))\n         {Map.empty},\n     \\<lambda>x.\n        (\\<lambda>f.\n            FOREACH (map_to_set f)\n             (\\<lambda>(x, S) X.\n                 ASSERT (\\<forall>g\\<in>X. x \\<notin> dom g) \\<bind>\n                 (\\<lambda>_.\n                     ASSERT\n                      (\\<forall>a\\<in>S.\n                          \\<forall>b\\<in>S.\n                             a \\<noteq> b \\<longrightarrow>\n                             (\\<lambda>g. g(x \\<mapsto> a)) ` X \\<inter>\n                             (\\<lambda>g. g(x \\<mapsto> b)) ` X =\n                             {}) \\<bind>\n                     (\\<lambda>_.\n                         RETURN\n                          (\\<Union>y\\<in>S.\n                              (\\<lambda>g. g(x \\<mapsto> y)) ` X))))\n             {Map.empty}) \\<circ>\n        (\\<lambda>f p. map_option (items_5 x p) (f p)))\n    \\<in> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "by (auto intro: FOREACH_rule_map_map[param_fo])"], ["", "definition complement_succ_6 ::\n    \"('label, 'state) nba \\<Rightarrow> 'label \\<Rightarrow> 'state items \\<Rightarrow> 'state items set nres\" where\n    \"complement_succ_6 A a f \\<equiv> do\n    {\n      f \\<leftarrow> refresh_5 f;\n      f \\<leftarrow> bounds_5 A a f;\n      ASSUME (finite (dom f));\n      expand_map_get_6 A f\n    }\""], ["", "lemma complement_succ_6_refine:\n    \"(complement_succ_6, complement_succ_5) \\<in> Id \\<rightarrow> Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_succ_6, complement_succ_5)\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "unfolding complement_succ_6_def complement_succ_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>A a f.\n        refresh_5 f \\<bind>\n        (\\<lambda>f.\n            bounds_5 A a f \\<bind>\n            (\\<lambda>f.\n                ASSUME (finite (dom f)) \\<bind>\n                (\\<lambda>_. expand_map_get_6 A f))),\n     \\<lambda>A a f.\n        refresh_5 f \\<bind>\n        (\\<lambda>f.\n            bounds_5 A a f \\<bind>\n            (\\<lambda>f.\n                ASSUME (finite (dom f)) \\<bind>\n                (\\<lambda>_. expand_5 (get_5 A f)))))\n    \\<in> Id \\<rightarrow>\n          Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel", "by (refine_vcg vcg2[OF expand_map_get_6_refine]) (auto intro: refine_IdI)"], ["", "subsection \\<open>Phase 7\\<close>"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "by this"], ["", "context\n    fixes fi f\n    assumes fi[autoref_rules]: \"(fi, f) \\<in> state_rel\"\n  begin"], ["", "private"], ["", "lemma [simp]: \"finite (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom f)", "using list_map_rel_finite fi"], ["proof (prove)\nusing this:\n  finite_map_rel (\\<langle>?Rk, ?Rv\\<rangle>list_map_rel)\n  (fi, f) \\<in> state_rel\n\ngoal (1 subgoal):\n 1. finite (dom f)", "unfolding finite_map_rel_def"], ["proof (prove)\nusing this:\n  Range (\\<langle>?Rk, ?Rv\\<rangle>list_map_rel)\n  \\<subseteq> Collect (finite \\<circ> dom)\n  (fi, f) \\<in> state_rel\n\ngoal (1 subgoal):\n 1. finite (dom f)", "by force"], ["", "schematic_goal refresh_7: \"(?f :: ?'a, refresh_5 f) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, refresh_5 f) \\<in> ?R", "unfolding refresh_5_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     if \\<exists>(p, k, c)\\<in>map_to_set f. c then RETURN f\n     else ASSUME (finite (dom f)) \\<bind>\n          (\\<lambda>_.\n              FOREACH (map_to_set f)\n               (\\<lambda>(p, k, c) m.\n                   ASSERT (p \\<notin> dom m) \\<bind>\n                   (\\<lambda>_. RETURN (m(p \\<mapsto> (k, True)))))\n               Map.empty))\n    \\<in> ?R", "by (autoref_monadic (plain))"], ["", "end"], ["", "concrete_definition refresh_7 uses refresh_7"], ["", "lemma refresh_7_refine: \"(\\<lambda> f. RETURN (refresh_7 f), refresh_5) \\<in> state_rel \\<rightarrow> \\<langle>state_rel\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. RETURN (refresh_7 f), refresh_5)\n    \\<in> state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>nres_rel", "using refresh_7.refine"], ["proof (prove)\nusing this:\n  (?fi, ?f) \\<in> state_rel \\<Longrightarrow>\n  (RETURN (refresh_7 ?fi), refresh_5 ?f)\n  \\<in> \\<langle>state_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. RETURN (refresh_7 f), refresh_5)\n    \\<in> state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>nres_rel", "by fast"], ["", "context\n    fixes A :: \"('label, nat) nba\"\n    fixes succi a fi f\n    assumes succi[autoref_rules]: \"(succi, transition A a) \\<in> nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle> list_set_rel\"\n    assumes fi[autoref_rules]: \"(fi, f) \\<in> state_rel\"\n  begin"], ["", "private"], ["", "lemma [simp]: \"finite (transition A a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (transition A a p)", "using list_set_rel_finite succi[param_fo]"], ["proof (prove)\nusing this:\n  finite_set_rel (\\<langle>?R\\<rangle>list_set_rel)\n  (?x, ?x') \\<in> nat_rel \\<Longrightarrow>\n  (succi ?x, transition A a ?x') \\<in> \\<langle>nat_rel\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. finite (transition A a p)", "unfolding finite_set_rel_def"], ["proof (prove)\nusing this:\n  Range (\\<langle>?R\\<rangle>list_set_rel) \\<subseteq> Collect finite\n  (?x, ?x') \\<in> nat_rel \\<Longrightarrow>\n  (succi ?x, transition A a ?x') \\<in> \\<langle>nat_rel\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. finite (transition A a p)", "by blast"], ["", "private"], ["", "lemma [simp]: \"finite (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom f)", "using fi"], ["proof (prove)\nusing this:\n  (fi, f) \\<in> state_rel\n\ngoal (1 subgoal):\n 1. finite (dom f)", "by force"], ["", "private"], ["", "lemma [autoref_op_pat]: \"transition A a \\<equiv> OP (transition A a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transition A a \\<equiv> OP (transition A a)", "by simp"], ["", "private"], ["", "lemma [autoref_rules]: \"(min, min) \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (min, min) \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> nat_rel", "by simp"], ["", "schematic_goal bounds_7: \n      notes ty_REL[where R = \"\\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel\", autoref_tyrel]\n      shows \"(?f :: ?'a, bounds_5 A a f) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, bounds_5 A a f) \\<in> ?R", "unfolding bounds_5_def merge_5_def sup_bool_def inf_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     ASSUME (finite (dom f)) \\<bind>\n     (\\<lambda>_.\n         ASSUME (\\<forall>p. finite (transition A a p)) \\<bind>\n         (\\<lambda>_.\n             FOREACH (map_to_set f)\n              (\\<lambda>(p, s).\n                  FOREACH (transition A a p)\n                   (\\<lambda>q f.\n                       RETURN\n                        (f(q \\<mapsto>\n                         (case s of\n                          (k, c) \\<Rightarrow>\n                            \\<lambda>x.\n                               case x of None \\<Rightarrow> (k, c)\n                               | Some (l, d) \\<Rightarrow>\n                                   (min k l, c \\<or> d))\n                          (f q)))))\n              Map.empty)))\n    \\<in> ?R", "by (autoref_monadic (plain))"], ["", "end"], ["", "concrete_definition bounds_7 uses bounds_7"], ["", "lemma bounds_7_refine: \"(si, transition A a) \\<in> nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle> list_set_rel \\<Longrightarrow>\n    (\\<lambda> p. RETURN (bounds_7 si p), bounds_5 A a) \\<in>\n    state_rel \\<rightarrow> \\<langle>\\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (si, transition A a)\n    \\<in> nat_rel \\<rightarrow>\n          \\<langle>nat_rel\\<rangle>list_set_rel \\<Longrightarrow>\n    (\\<lambda>p. RETURN (bounds_7 si p), bounds_5 A a)\n    \\<in> state_rel \\<rightarrow> \\<langle>\\<langle>nat_rel,\n          item_rel\\<rangle>dflt_ahm_rel\\<rangle>nres_rel", "using bounds_7.refine"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?succi, transition ?A ?a)\n           \\<in> nat_rel \\<rightarrow>\n                 \\<langle>nat_rel\\<rangle>list_set_rel;\n   (?fi, ?f) \\<in> state_rel\\<rbrakk>\n  \\<Longrightarrow> (RETURN (bounds_7 ?succi ?fi), bounds_5 ?A ?a ?f)\n                    \\<in> \\<langle>\\<langle>nat_rel,\n                    item_rel\\<rangle>dflt_ahm_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (si, transition A a)\n    \\<in> nat_rel \\<rightarrow>\n          \\<langle>nat_rel\\<rangle>list_set_rel \\<Longrightarrow>\n    (\\<lambda>p. RETURN (bounds_7 si p), bounds_5 A a)\n    \\<in> state_rel \\<rightarrow> \\<langle>\\<langle>nat_rel,\n          item_rel\\<rangle>dflt_ahm_rel\\<rangle>nres_rel", "by auto"], ["", "context\n    fixes A :: \"('label, nat) nba\"\n    fixes acci\n    assumes [autoref_rules]: \"(acci, accepting A) \\<in> nat_rel \\<rightarrow> bool_rel\"\n  begin"], ["", "private"], ["", "lemma [autoref_op_pat]: \"accepting A \\<equiv> OP (accepting A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. accepting A \\<equiv> OP (accepting A)", "by simp"], ["", "private"], ["", "lemma [autoref_rules]: \"((dvd), (dvd)) \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((dvd), (dvd))\n    \\<in> nat_rel \\<rightarrow> nat_rel \\<rightarrow> bool_rel", "by simp"], ["", "private"], ["", "lemma [autoref_rules]: \"(\\<lambda> k l. upt k (Suc l), atLeastAtMost) \\<in>\n      nat_rel \\<rightarrow> nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle> list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k l. [k..<Suc l], atLeastAtMost)\n    \\<in> nat_rel \\<rightarrow>\n          nat_rel \\<rightarrow> \\<langle>nat_rel\\<rangle>list_set_rel", "by (auto simp: list_set_rel_def in_br_conv)"], ["", "schematic_goal items_7: \"(?f :: ?'a, items_5 A) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, items_5 A) \\<in> ?R", "unfolding items_5_def Let_def Set.filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     \\<lambda>p (k, c).\n        (\\<lambda>l. (l, c \\<and> even l)) `\n        (if accepting A p then {a \\<in> {k - 1..k}. even a}\n         else {k - 1..k}))\n    \\<in> ?R", "by autoref"], ["", "end"], ["", "concrete_definition items_7 uses items_7"], ["", "(* TODO: use generic expand_map implementation *)"], ["", "context\n    fixes A :: \"('label, nat) nba\"\n    fixes ai\n    fixes fi f\n    assumes ai: \"(ai, accepting A) \\<in> nat_rel \\<rightarrow> bool_rel\"\n    assumes fi[autoref_rules]: \"(fi, f) \\<in> \\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel\"\n  begin"], ["", "private"], ["", "lemma [simp]: \"finite (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom f)", "using dflt_ahm_rel_finite_nat fi"], ["proof (prove)\nusing this:\n  finite_map_rel (\\<langle>nat_rel, ?V\\<rangle>dflt_ahm_rel)\n  (fi, f) \\<in> \\<langle>nat_rel, item_rel\\<rangle>dflt_ahm_rel\n\ngoal (1 subgoal):\n 1. finite (dom f)", "unfolding finite_map_rel_def"], ["proof (prove)\nusing this:\n  Range (\\<langle>nat_rel, ?V\\<rangle>dflt_ahm_rel)\n  \\<subseteq> Collect (finite \\<circ> dom)\n  (fi, f) \\<in> \\<langle>nat_rel, item_rel\\<rangle>dflt_ahm_rel\n\ngoal (1 subgoal):\n 1. finite (dom f)", "by force"], ["", "private"], ["", "lemma [simp]:\n      assumes \"\\<And> m. m \\<in> S \\<Longrightarrow> x \\<notin> dom m\"\n      shows \"inj_on (\\<lambda> m. m (x \\<mapsto> y)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>m. m(x \\<mapsto> y)) S", "using assms"], ["proof (prove)\nusing this:\n  ?m \\<in> S \\<Longrightarrow> x \\<notin> dom ?m\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>m. m(x \\<mapsto> y)) S", "unfolding dom_def inj_on_def"], ["proof (prove)\nusing this:\n  ?m \\<in> S \\<Longrightarrow> x \\<notin> {a. ?m a \\<noteq> None}\n\ngoal (1 subgoal):\n 1. \\<forall>xa\\<in>S.\n       \\<forall>ya\\<in>S.\n          xa(x \\<mapsto> y) = ya(x \\<mapsto> y) \\<longrightarrow> xa = ya", "by (auto) (metis fun_upd_triv fun_upd_upd)"], ["", "private"], ["", "lemmas [simp] = op_map_update_def[abs_def]"], ["", "private"], ["", "lemma [autoref_op_pat]: \"items_5 A \\<equiv> OP (items_5 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_5 A \\<equiv> OP (items_5 A)", "by simp"], ["", "private"], ["", "lemmas [autoref_rules] = items_7.refine[OF ai]"], ["", "schematic_goal expand_map_get_7: \"(?f, expand_map_get_6 A f) \\<in>\n      \\<langle>\\<langle>state_rel\\<rangle> list_set_rel\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, expand_map_get_6 A f)\n    \\<in> \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "unfolding expand_map_get_6_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     FOREACH (map_to_set f)\n      (\\<lambda>(k, v) X.\n          ASSERT (\\<forall>g\\<in>X. k \\<notin> dom g) \\<bind>\n          (\\<lambda>_.\n              ASSERT\n               (\\<forall>a\\<in>items_5 A k v.\n                   \\<forall>b\\<in>items_5 A k v.\n                      a \\<noteq> b \\<longrightarrow>\n                      (\\<lambda>g. g(k \\<mapsto> a)) ` X \\<inter>\n                      (\\<lambda>g. g(k \\<mapsto> b)) ` X =\n                      {}) \\<bind>\n              (\\<lambda>_.\n                  RETURN\n                   (\\<Union>y\\<in>items_5 A k v.\n                       (\\<lambda>g. g(k \\<mapsto> y)) ` X))))\n      {Map.empty})\n    \\<in> \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "by (autoref_monadic (plain))"], ["", "end"], ["", "concrete_definition expand_map_get_7 uses expand_map_get_7"], ["", "lemma expand_map_get_7_refine:\n    assumes \"(ai, accepting A) \\<in> nat_rel \\<rightarrow> bool_rel\"\n    shows \"(\\<lambda> fi. RETURN (expand_map_get_7 ai fi),\n      \\<lambda> f. ASSUME (finite (dom f)) \\<then> expand_map_get_6 A f) \\<in>\n      \\<langle>nat_rel, item_rel\\<rangle> dflt_ahm_rel \\<rightarrow> \\<langle>\\<langle>state_rel\\<rangle> list_set_rel\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>fi. RETURN (expand_map_get_7 ai fi),\n     \\<lambda>f.\n        ASSUME (finite (dom f)) \\<bind> (\\<lambda>_. expand_map_get_6 A f))\n    \\<in> \\<langle>nat_rel, item_rel\\<rangle>dflt_ahm_rel \\<rightarrow>\n          \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "using expand_map_get_7.refine[OF assms]"], ["proof (prove)\nusing this:\n  (?fi, ?f) \\<in> \\<langle>nat_rel,\n  item_rel\\<rangle>dflt_ahm_rel \\<Longrightarrow>\n  (RETURN (expand_map_get_7 ai ?fi), expand_map_get_6 A ?f)\n  \\<in> \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (\\<lambda>fi. RETURN (expand_map_get_7 ai fi),\n     \\<lambda>f.\n        ASSUME (finite (dom f)) \\<bind> (\\<lambda>_. expand_map_get_6 A f))\n    \\<in> \\<langle>nat_rel, item_rel\\<rangle>dflt_ahm_rel \\<rightarrow>\n          \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "by auto"], ["", "context\n    fixes A :: \"('label, nat) nba\"\n    fixes a :: \"'label\"\n    fixes p :: \"nat items\"\n    fixes Ai\n    fixes ai\n    fixes pi\n    assumes Ai: \"(Ai, A) \\<in> \\<langle>Id, Id\\<rangle> nbai_nba_rel\"\n    assumes ai: \"(ai, a) \\<in> Id\"\n    assumes pi[autoref_rules]: \"(pi, p) \\<in> state_rel\"\n  begin"], ["", "private"], ["", "lemmas succi = nbai_nba_param(4)[THEN fun_relD, OF Ai, THEN fun_relD, OF ai]"], ["", "private"], ["", "lemmas acceptingi = nbai_nba_param(5)[THEN fun_relD, OF Ai]"], ["", "private"], ["", "lemma [autoref_op_pat]: \"(\\<lambda> g. ASSUME (finite (dom g)) \\<then> expand_map_get_6 A g) \\<equiv>\n      OP (\\<lambda> g. ASSUME (finite (dom g)) \\<then> expand_map_get_6 A g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lambda>g.\n       ASSUME (finite (dom g)) \\<bind>\n       (\\<lambda>_. expand_map_get_6 A g) \\<equiv>\n    OP (\\<lambda>g.\n           ASSUME (finite (dom g)) \\<bind>\n           (\\<lambda>_. expand_map_get_6 A g))", "by simp"], ["", "private"], ["", "lemma [autoref_op_pat]: \"bounds_5 A a \\<equiv> OP (bounds_5 A a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounds_5 A a \\<equiv> OP (bounds_5 A a)", "by simp"], ["", "private"], ["", "lemmas [autoref_rules] =\n      refresh_7_refine\n      bounds_7_refine[OF succi]\n      expand_map_get_7_refine[OF acceptingi]"], ["", "schematic_goal complement_succ_7: \"(?f :: ?'a, complement_succ_6 A a p) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, complement_succ_6 A a p) \\<in> ?R", "unfolding complement_succ_6_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     refresh_5 p \\<bind>\n     (\\<lambda>f.\n         bounds_5 A a f \\<bind>\n         (\\<lambda>f.\n             ASSUME (finite (dom f)) \\<bind>\n             (\\<lambda>_. expand_map_get_6 A f))))\n    \\<in> ?R", "by (autoref_monadic (plain))"], ["", "end"], ["", "concrete_definition complement_succ_7 uses complement_succ_7"], ["", "lemma complement_succ_7_refine:\n    \"(RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6) \\<in>\n      \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> Id \\<rightarrow> state_rel \\<rightarrow>\n      \\<langle>\\<langle>state_rel\\<rangle> list_set_rel\\<rangle> nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow>\n          \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "using complement_succ_7.refine"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?Ai, ?A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel;\n   (?ai, ?a) \\<in> Id; (?pi, ?p) \\<in> state_rel\\<rbrakk>\n  \\<Longrightarrow> (RETURN (complement_succ_7 ?Ai ?ai ?pi),\n                     complement_succ_6 ?A ?a ?p)\n                    \\<in> \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow>\n          \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "unfolding comp_apply"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?Ai, ?A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel;\n   (?ai, ?a) \\<in> Id; (?pi, ?p) \\<in> state_rel\\<rbrakk>\n  \\<Longrightarrow> (RETURN (complement_succ_7 ?Ai ?ai ?pi),\n                     complement_succ_6 ?A ?a ?p)\n                    \\<in> \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (\\<lambda>x xa xb. RETURN (complement_succ_7 x xa xb),\n     complement_succ_6)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow>\n          \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "by parametricity"], ["", "context\n    fixes A :: \"('label, nat) nba\"\n    fixes Ai\n    fixes n ni :: nat\n    assumes Ai: \"(Ai, A) \\<in> \\<langle>Id, Id\\<rangle> nbai_nba_rel\"\n    assumes ni[autoref_rules]: \"(ni, n) \\<in> Id\"\n  begin"], ["", "private"], ["", "lemma [autoref_op_pat]: \"initial A \\<equiv> OP (initial A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initial A \\<equiv> OP (initial A)", "by simp"], ["", "private"], ["", "lemmas [autoref_rules] = nbai_nba_param(3)[THEN fun_relD, OF Ai]"], ["", "schematic_goal complement_initial_7:\n      \"(?f, {(Some \\<circ> (const (2 * n, False))) |` initial A}) \\<in> \\<langle>state_rel\\<rangle> list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, {(Some \\<circ> (\\<lambda>_. (2 * n, False))) |` initial A})\n    \\<in> \\<langle>state_rel\\<rangle>list_set_rel", "by autoref"], ["", "end"], ["", "concrete_definition complement_initial_7 uses complement_initial_7"], ["", "schematic_goal complement_accepting_7: \"(?f, \\<lambda> f. \\<forall> (p, k, c) \\<in> map_to_set f. \\<not> c) \\<in>\n    state_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, \\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)\n    \\<in> state_rel \\<rightarrow> bool_rel", "by autoref"], ["", "concrete_definition complement_accepting_7 uses complement_accepting_7"], ["", "definition complement_7 :: \"('label, nat) nbai \\<Rightarrow> nat \\<Rightarrow> ('label, state) nbai\" where\n    \"complement_7 Ai ni \\<equiv> nbai\n      (alphabeti Ai)\n      (complement_initial_7 Ai ni)\n      (complement_succ_7 Ai)\n      (complement_accepting_7)\""], ["", "lemma complement_7_refine[autoref_rules]:\n    assumes \"(Ai, A) \\<in> \\<langle>Id, Id\\<rangle> nbai_nba_rel\"\n    assumes \"(ni,\n      (OP card ::: \\<langle>Id\\<rangle> ahs_rel bhc \\<rightarrow> nat_rel) $\n      ((OP nodes ::: \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> \\<langle>Id\\<rangle> ahs_rel bhc) $ A)) \\<in> nat_rel\"\n    shows \"(complement_7 Ai ni, (OP complement_4 :::\n      \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> \\<langle>Id, state_rel\\<rangle> nbai_nba_rel) $ A) \\<in> \\<langle>Id, state_rel\\<rangle> nbai_nba_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "note complement_succ_7_refine"], ["proof (state)\nthis:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6)\n  \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n        Id \\<rightarrow>\n        state_rel \\<rightarrow>\n        \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "also"], ["proof (state)\nthis:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7, complement_succ_6)\n  \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n        Id \\<rightarrow>\n        state_rel \\<rightarrow>\n        \\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "note complement_succ_6_refine"], ["proof (state)\nthis:\n  (complement_succ_6, complement_succ_5)\n  \\<in> Id \\<rightarrow>\n        Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "also"], ["proof (state)\nthis:\n  (complement_succ_6, complement_succ_5)\n  \\<in> Id \\<rightarrow>\n        Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "note complement_succ_5_refine"], ["proof (state)\nthis:\n  (complement_succ_5, RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> Id \\<rightarrow>\n        Id \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "finally"], ["proof (chain)\npicking this:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7,\n   RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> (\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel O Id) O Id \\<rightarrow>\n        (Id O Id) O Id \\<rightarrow>\n        (state_rel O Id) O Id \\<rightarrow>\n        (\\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel O\n         \\<langle>Id\\<rangle>nres_rel) O\n        \\<langle>Id\\<rangle>nres_rel", "have 1: \"(complement_succ_7, complement_succ_4) \\<in>\n      \\<langle>Id, Id\\<rangle> nbai_nba_rel \\<rightarrow> Id \\<rightarrow> state_rel \\<rightarrow> \\<langle>state_rel\\<rangle> list_set_rel\""], ["proof (prove)\nusing this:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7,\n   RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> (\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel O Id) O Id \\<rightarrow>\n        (Id O Id) O Id \\<rightarrow>\n        (state_rel O Id) O Id \\<rightarrow>\n        (\\<langle>\\<langle>state_rel\\<rangle>list_set_rel\\<rangle>nres_rel O\n         \\<langle>Id\\<rangle>nres_rel) O\n        \\<langle>Id\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_succ_7, complement_succ_4)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel", "unfolding nres_rel_comp"], ["proof (prove)\nusing this:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7,\n   RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> (\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel O Id) O Id \\<rightarrow>\n        (Id O Id) O Id \\<rightarrow>\n        (state_rel O Id) O Id \\<rightarrow>\n        \\<langle>(\\<langle>state_rel\\<rangle>list_set_rel O Id) O\n                 Id\\<rangle>nres_rel\n\ngoal (1 subgoal):\n 1. (complement_succ_7, complement_succ_4)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel", "unfolding nres_rel_def"], ["proof (prove)\nusing this:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7,\n   RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> (\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel O Id) O Id \\<rightarrow>\n        (Id O Id) O Id \\<rightarrow>\n        (state_rel O Id) O Id \\<rightarrow>\n        {(c, a).\n         c \\<le> \\<Down>\n                  ((\\<langle>state_rel\\<rangle>list_set_rel O Id) O Id) a}\n\ngoal (1 subgoal):\n 1. (complement_succ_7, complement_succ_4)\n    \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n          Id \\<rightarrow>\n          state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel", "unfolding fun_rel_def"], ["proof (prove)\nusing this:\n  (RETURN \\<circ>\\<circ>\\<circ> complement_succ_7,\n   RETURN \\<circ>\\<circ>\\<circ> complement_succ_4)\n  \\<in> {(f, f').\n         \\<forall>(a, a')\n                  \\<in>(\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel O Id) O\n                       Id.\n            (f a, f' a')\n            \\<in> {(f, f').\n                   \\<forall>(a, a')\\<in>(Id O Id) O Id.\n                      (f a, f' a')\n                      \\<in> {(f, f').\n                             \\<forall>(a, a')\\<in>(state_rel O Id) O Id.\n                                (f a, f' a')\n                                \\<in> {(c, a).\n c \\<le> \\<Down> ((\\<langle>state_rel\\<rangle>list_set_rel O Id) O Id) a}}}}\n\ngoal (1 subgoal):\n 1. (complement_succ_7, complement_succ_4)\n    \\<in> {(f, f').\n           \\<forall>(a, a')\\<in>\\<langle>Id, nat_rel\\<rangle>nbai_nba_rel.\n              (f a, f' a')\n              \\<in> {(f, f').\n                     \\<forall>(a, a')\\<in>Id.\n                        (f a, f' a')\n                        \\<in> {(f, f').\n                               \\<forall>(a, a')\\<in>state_rel.\n                                  (f a, f' a')\n                                  \\<in> \\<langle>state_rel\\<rangle>list_set_rel}}}", "by auto"], ["proof (state)\nthis:\n  (complement_succ_7, complement_succ_4)\n  \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n        Id \\<rightarrow>\n        state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (complement_7 Ai ni,\n     (OP complement_4 :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "unfolding complement_7_def complement_4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (nbai (alphabeti Ai) (complement_initial_7 Ai ni) (complement_succ_7 Ai)\n      complement_accepting_7,\n     (OP (\\<lambda>A.\n             nba (alphabet A)\n              {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n               initial A}\n              (complement_succ_4 A)\n              (\\<lambda>f.\n                  \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)) :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "using 1 complement_initial_7.refine complement_accepting_7.refine assms"], ["proof (prove)\nusing this:\n  (complement_succ_7, complement_succ_4)\n  \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n        Id \\<rightarrow>\n        state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel\n  \\<lbrakk>(?Ai, ?A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel;\n   (?ni, ?n) \\<in> nat_rel\\<rbrakk>\n  \\<Longrightarrow> (complement_initial_7 ?Ai ?ni,\n                     {(Some \\<circ> (\\<lambda>_. (2 * ?n, False))) |`\n                      initial ?A})\n                    \\<in> \\<langle>state_rel\\<rangle>list_set_rel\n  (complement_accepting_7,\n   \\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)\n  \\<in> state_rel \\<rightarrow> bool_rel\n  (Ai, A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel\n  (ni,\n   (OP card :::\n    \\<langle>nat_rel\\<rangle>ahs_rel bhc \\<rightarrow> nat_rel) $\n   ((OP nodes :::\n     \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n     \\<langle>nat_rel\\<rangle>ahs_rel bhc) $\n    A))\n  \\<in> nat_rel\n\ngoal (1 subgoal):\n 1. (nbai (alphabeti Ai) (complement_initial_7 Ai ni) (complement_succ_7 Ai)\n      complement_accepting_7,\n     (OP (\\<lambda>A.\n             nba (alphabet A)\n              {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n               initial A}\n              (complement_succ_4 A)\n              (\\<lambda>f.\n                  \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)) :::\n      \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n      state_rel\\<rangle>nbai_nba_rel) $\n     A)\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "unfolding autoref_tag_defs"], ["proof (prove)\nusing this:\n  (complement_succ_7, complement_succ_4)\n  \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow>\n        Id \\<rightarrow>\n        state_rel \\<rightarrow> \\<langle>state_rel\\<rangle>list_set_rel\n  \\<lbrakk>(?Ai, ?A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel;\n   (?ni, ?n) \\<in> nat_rel\\<rbrakk>\n  \\<Longrightarrow> (complement_initial_7 ?Ai ?ni,\n                     {(Some \\<circ> (\\<lambda>_. (2 * ?n, False))) |`\n                      initial ?A})\n                    \\<in> \\<langle>state_rel\\<rangle>list_set_rel\n  (complement_accepting_7,\n   \\<lambda>f. \\<forall>(p, k, c)\\<in>map_to_set f. \\<not> c)\n  \\<in> state_rel \\<rightarrow> bool_rel\n  (Ai, A) \\<in> \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel\n  (ni, card (nodes A)) \\<in> nat_rel\n\ngoal (1 subgoal):\n 1. (nbai (alphabeti Ai) (complement_initial_7 Ai ni) (complement_succ_7 Ai)\n      complement_accepting_7,\n     nba (alphabet A)\n      {(Some \\<circ> (\\<lambda>_. (2 * card (nodes A), False))) |`\n       initial A}\n      (complement_succ_4 A)\n      (\\<lambda>f. \\<forall>(p, k, y)\\<in>map_to_set f. \\<not> y))\n    \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel", "by parametricity"], ["proof (state)\nthis:\n  (complement_7 Ai ni,\n   (OP complement_4 :::\n    \\<langle>Id, nat_rel\\<rangle>nbai_nba_rel \\<rightarrow> \\<langle>Id,\n    state_rel\\<rangle>nbai_nba_rel) $\n   A)\n  \\<in> \\<langle>Id, state_rel\\<rangle>nbai_nba_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}