{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Sorted_List_Operations2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemma inter_sorted_correct :\n  assumes l1_OK: \"sorted (rev l1)\"\n  assumes l2_OK: \"sorted (rev l2)\"\n    shows \"sorted (rev (inter_sorted_rev l1 l2)) \\<and> set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2\"", "lemma inter_sorted_rev_refl: \"inter_sorted_rev xs xs = xs\"", "lemma  inter_sorted_correct_col: \n  assumes \"sorted (rev xs)\"\n      and \"sorted (rev ys)\"\n    shows \"(inter_sorted_rev xs ys) = rev (sorted_list_of_set (set xs \\<inter> set ys))\"", "lemma cons_set_eq: \"set (x # xs) \\<inter> set xs = set xs\"", "lemma inter_sorted_cons: \"sorted (rev (x # xs)) \\<Longrightarrow> inter_sorted_rev (x # xs) xs = xs\""], "translations": [["", "lemma inter_sorted_correct :\n  assumes l1_OK: \"sorted (rev l1)\"\n  assumes l2_OK: \"sorted (rev l2)\"\n    shows \"sorted (rev (inter_sorted_rev l1 l2)) \\<and> set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev l1 l2)) \\<and>\n    set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2", "using assms"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev l1)\n  Sorted_Less.sorted (rev l2)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev l1 l2)) \\<and>\n    set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2", "proof (induct l1 arbitrary: l2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l2.\n       \\<lbrakk>Sorted_Less.sorted (rev []);\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev [] l2)) \\<and>\n                         set (inter_sorted_rev [] l2) =\n                         set [] \\<inter> set l2\n 2. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "case Nil"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev [])\n  Sorted_Less.sorted (rev l2)\n\ngoal (2 subgoals):\n 1. \\<And>l2.\n       \\<lbrakk>Sorted_Less.sorted (rev []);\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev [] l2)) \\<and>\n                         set (inter_sorted_rev [] l2) =\n                         set [] \\<inter> set l2\n 2. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "thus ?case"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev [])\n  Sorted_Less.sorted (rev l2)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev [] l2)) \\<and>\n    set (inter_sorted_rev [] l2) = set [] \\<inter> set l2", "by simp"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev [] l2)) \\<and>\n  set (inter_sorted_rev [] l2) = set [] \\<inter> set l2\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "case (Cons x1 l1 l2)"], ["proof (state)\nthis:\n  \\<lbrakk>Sorted_Less.sorted (rev l1);\n   Sorted_Less.sorted (rev ?l2.0)\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted\n                     (rev (inter_sorted_rev l1 ?l2.0)) \\<and>\n                    set (inter_sorted_rev l1 ?l2.0) =\n                    set l1 \\<inter> set ?l2.0\n  Sorted_Less.sorted (rev (x1 # l1))\n  Sorted_Less.sorted (rev l2)\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "note x1_l1_props = Cons(2)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (x1 # l1))\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "note l2_props = Cons(3)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev l2)\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "from x1_l1_props"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (x1 # l1))", "have l1_props: \"sorted (rev l1)\"\n                    and x1_nin_l1: \"x1 \\<notin> set l1\"\n                    and x1_gt: \"\\<And>x. x \\<in> set l1 \\<Longrightarrow> x1 > x\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (x1 # l1))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev l1) &&&\n    x1 \\<notin> set l1 &&&\n    (\\<And>x. x \\<in> set l1 \\<Longrightarrow> x < x1)", "by (auto simp add: Ball_def sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev l1)\n  x1 \\<notin> set l1\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "note ind_hyp_l1 = Cons(1)[OF l1_props]"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev ?l2.0) \\<Longrightarrow>\n  Sorted_Less.sorted (rev (inter_sorted_rev l1 ?l2.0)) \\<and>\n  set (inter_sorted_rev l1 ?l2.0) = set l1 \\<inter> set ?l2.0\n\ngoal (1 subgoal):\n 1. \\<And>a l1 l2.\n       \\<lbrakk>\\<And>l2.\n                   \\<lbrakk>Sorted_Less.sorted (rev l1);\n                    Sorted_Less.sorted (rev l2)\\<rbrakk>\n                   \\<Longrightarrow> Sorted_Less.sorted\n(rev (inter_sorted_rev l1 l2)) \\<and>\n                                     set (inter_sorted_rev l1 l2) =\n                                     set l1 \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l1));\n        Sorted_Less.sorted (rev l2)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (a # l1) l2)) \\<and>\n                         set (inter_sorted_rev (a # l1) l2) =\n                         set (a # l1) \\<inter> set l2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n    set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2", "using l2_props"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev l2)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n    set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2", "proof (induct l2)"], ["proof (state)\ngoal (2 subgoals):\n 1. Sorted_Less.sorted (rev []) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) [])) \\<and>\n    set (inter_sorted_rev (x1 # l1) []) = set (x1 # l1) \\<inter> set []\n 2. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "case Nil"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev [])\n\ngoal (2 subgoals):\n 1. Sorted_Less.sorted (rev []) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) [])) \\<and>\n    set (inter_sorted_rev (x1 # l1) []) = set (x1 # l1) \\<inter> set []\n 2. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "with x1_l1_props"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (x1 # l1))\n  Sorted_Less.sorted (rev [])", "show ?case"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (x1 # l1))\n  Sorted_Less.sorted (rev [])\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) [])) \\<and>\n    set (inter_sorted_rev (x1 # l1) []) = set (x1 # l1) \\<inter> set []", "by simp"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) [])) \\<and>\n  set (inter_sorted_rev (x1 # l1) []) = set (x1 # l1) \\<inter> set []\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "case (Cons x2 l2)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n  set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2\n  Sorted_Less.sorted (rev (x2 # l2))\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "note x2_l2_props = Cons(2)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (x2 # l2))\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "(* sorted (rev (x2 # l2))*)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (x2 # l2))\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "from x2_l2_props"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (x2 # l2))", "have l2_props: \"sorted (rev l2)\"\n                    and x2_nin_l2: \"x2 \\<notin> set l2\"\n                    and x2_gt: \"\\<And>x. x \\<in> set l2 \\<Longrightarrow> x2 > x\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (x2 # l2))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev l2) &&&\n    x2 \\<notin> set l2 &&&\n    (\\<And>x. x \\<in> set l2 \\<Longrightarrow> x < x2)", "by (auto simp  add: Ball_def sorted_wrt_append )"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev l2)\n  x2 \\<notin> set l2\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "note ind_hyp_l2 = Cons(1)[OF l2_props]"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n  set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       \\<lbrakk>Sorted_Less.sorted (rev l2) \\<Longrightarrow>\n                Sorted_Less.sorted\n                 (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n                set (inter_sorted_rev (x1 # l1) l2) =\n                set (x1 # l1) \\<inter> set l2;\n        Sorted_Less.sorted (rev (a # l2))\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted\n                          (rev (inter_sorted_rev (x1 # l1) (a # l2))) \\<and>\n                         set (inter_sorted_rev (x1 # l1) (a # l2)) =\n                         set (x1 # l1) \\<inter> set (a # l2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "proof (cases \"x1 > x2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "case True"], ["proof (state)\nthis:\n  x2 < x1\n\ngoal (2 subgoals):\n 1. x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "note x1_gt_x2 = this"], ["proof (state)\nthis:\n  x2 < x1\n\ngoal (2 subgoals):\n 1. x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "have \"set l1 \\<inter> set (x2 # l2) = set (x1 # l1)\\<inter> set (x2 # l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)", "using x1_gt_x2 x1_nin_l1 x2_nin_l2 x1_gt x2_gt"], ["proof (prove)\nusing this:\n  x2 < x1\n  x1 \\<notin> set l1\n  x2 \\<notin> set l2\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n\ngoal (1 subgoal):\n 1. set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)", "by fastforce"], ["proof (state)\nthis:\n  set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal (2 subgoals):\n 1. x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "then"], ["proof (chain)\npicking this:\n  set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)", "show ?thesis"], ["proof (prove)\nusing this:\n  set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "using ind_hyp_l1[OF x2_l2_props]"], ["proof (prove)\nusing this:\n  set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)\n  Sorted_Less.sorted (rev (inter_sorted_rev l1 (x2 # l2))) \\<and>\n  set (inter_sorted_rev l1 (x2 # l2)) = set l1 \\<inter> set (x2 # l2)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "using x1_gt_x2 x1_nin_l1 x2_nin_l2 x1_gt x2_gt"], ["proof (prove)\nusing this:\n  set l1 \\<inter> set (x2 # l2) = set (x1 # l1) \\<inter> set (x2 # l2)\n  Sorted_Less.sorted (rev (inter_sorted_rev l1 (x2 # l2))) \\<and>\n  set (inter_sorted_rev l1 (x2 # l2)) = set l1 \\<inter> set (x2 # l2)\n  x2 < x1\n  x1 \\<notin> set l1\n  x2 \\<notin> set l2\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "by (auto simp add:Ball_def sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n  set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n  set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal (1 subgoal):\n 1. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "case False"], ["proof (state)\nthis:\n  \\<not> x2 < x1\n\ngoal (1 subgoal):\n 1. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "note x2_ge_x1 = this"], ["proof (state)\nthis:\n  \\<not> x2 < x1\n\ngoal (1 subgoal):\n 1. \\<not> x2 < x1 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "proof (cases \"x1 = x2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x1 = x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "case True"], ["proof (state)\nthis:\n  x1 = x2\n\ngoal (2 subgoals):\n 1. x1 = x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "note x1_eq_x2 = this"], ["proof (state)\nthis:\n  x1 = x2\n\ngoal (2 subgoals):\n 1. x1 = x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)\n 2. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "then"], ["proof (chain)\npicking this:\n  x1 = x2", "show ?thesis"], ["proof (prove)\nusing this:\n  x1 = x2\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "using ind_hyp_l1[OF l2_props]"], ["proof (prove)\nusing this:\n  x1 = x2\n  Sorted_Less.sorted (rev (inter_sorted_rev l1 l2)) \\<and>\n  set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "using x1_eq_x2  x1_nin_l1 x2_nin_l2 x1_gt x2_gt"], ["proof (prove)\nusing this:\n  x1 = x2\n  Sorted_Less.sorted (rev (inter_sorted_rev l1 l2)) \\<and>\n  set (inter_sorted_rev l1 l2) = set l1 \\<inter> set l2\n  x1 = x2\n  x1 \\<notin> set l1\n  x2 \\<notin> set l2\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "by (auto simp add:Ball_def sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n  set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n  set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "case False"], ["proof (state)\nthis:\n  x1 \\<noteq> x2\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "note x1_neq_x2 = this"], ["proof (state)\nthis:\n  x1 \\<noteq> x2\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "with x2_ge_x1"], ["proof (chain)\npicking this:\n  \\<not> x2 < x1\n  x1 \\<noteq> x2", "have x2_gt_x1 : \"x2 > x1\""], ["proof (prove)\nusing this:\n  \\<not> x2 < x1\n  x1 \\<noteq> x2\n\ngoal (1 subgoal):\n 1. x1 < x2", "by auto"], ["proof (state)\nthis:\n  x1 < x2\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x2 \\<Longrightarrow>\n    Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "from ind_hyp_l2 x2_ge_x1 x1_neq_x2 x2_gt x2_nin_l2 x1_gt"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n  set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2\n  \\<not> x2 < x1\n  x1 \\<noteq> x2\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n  x2 \\<notin> set l2\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n  set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2\n  \\<not> x2 < x1\n  x1 \\<noteq> x2\n  ?x \\<in> set l2 \\<Longrightarrow> ?x < x2\n  x2 \\<notin> set l2\n  ?x \\<in> set l1 \\<Longrightarrow> ?x < x1\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n    set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n    set (x1 # l1) \\<inter> set (x2 # l2)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n  set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n  set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n  set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n  set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) (x2 # l2))) \\<and>\n  set (inter_sorted_rev (x1 # l1) (x2 # l2)) =\n  set (x1 # l1) \\<inter> set (x2 # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev (x1 # l1) l2)) \\<and>\n  set (inter_sorted_rev (x1 # l1) l2) = set (x1 # l1) \\<inter> set l2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inter_sorted_rev_refl: \"inter_sorted_rev xs xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inter_sorted_rev xs xs = xs", "by (induct xs) auto"], ["", "lemma  inter_sorted_correct_col: \n  assumes \"sorted (rev xs)\"\n      and \"sorted (rev ys)\"\n    shows \"(inter_sorted_rev xs ys) = rev (sorted_list_of_set (set xs \\<inter> set ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inter_sorted_rev xs ys =\n    rev (sorted_list_of_set (set xs \\<inter> set ys))", "using assms"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. inter_sorted_rev xs ys =\n    rev (sorted_list_of_set (set xs \\<inter> set ys))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev xs);\n     Sorted_Less.sorted (rev ys)\\<rbrakk>\n    \\<Longrightarrow> inter_sorted_rev xs ys =\n                      rev (sorted_list_of_set (set xs \\<inter> set ys))", "from assms"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)", "have 1: \"sorted (rev (inter_sorted_rev xs ys)) \" \n              and 2: \"set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev xs ys)) &&&\n    set (inter_sorted_rev xs ys) = set xs \\<inter> set ys", "using inter_sorted_correct"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n  \\<lbrakk>Sorted_Less.sorted (rev ?l1.0);\n   Sorted_Less.sorted (rev ?l2.0)\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted\n                     (rev (inter_sorted_rev ?l1.0 ?l2.0)) \\<and>\n                    set (inter_sorted_rev ?l1.0 ?l2.0) =\n                    set ?l1.0 \\<inter> set ?l2.0\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (inter_sorted_rev xs ys)) &&&\n    set (inter_sorted_rev xs ys) = set xs \\<inter> set ys", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev xs);\n     Sorted_Less.sorted (rev ys)\\<rbrakk>\n    \\<Longrightarrow> inter_sorted_rev xs ys =\n                      rev (sorted_list_of_set (set xs \\<inter> set ys))", "have \"sorted (rev (rev (sorted_list_of_set (set xs \\<inter> set ys))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted\n     (rev (rev (sorted_list_of_set (set xs \\<inter> set ys))))", "by ( simp add:sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted\n   (rev (rev (sorted_list_of_set (set xs \\<inter> set ys))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev xs);\n     Sorted_Less.sorted (rev ys)\\<rbrakk>\n    \\<Longrightarrow> inter_sorted_rev xs ys =\n                      rev (sorted_list_of_set (set xs \\<inter> set ys))", "with 1 2"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted\n   (rev (rev (sorted_list_of_set (set xs \\<inter> set ys))))", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted\n   (rev (rev (sorted_list_of_set (set xs \\<inter> set ys))))\n\ngoal (1 subgoal):\n 1. inter_sorted_rev xs ys =\n    rev (sorted_list_of_set (set xs \\<inter> set ys))", "by (auto intro:sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  inter_sorted_rev xs ys = rev (sorted_list_of_set (set xs \\<inter> set ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cons_set_eq: \"set (x # xs) \\<inter> set xs = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<inter> set xs = set xs", "by auto"], ["", "lemma inter_sorted_cons: \"sorted (rev (x # xs)) \\<Longrightarrow> inter_sorted_rev (x # xs) xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "assume ass: \"sorted (rev (x # xs))\""], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (x # xs))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (x # xs))", "have sorted_xs: \"sorted (rev xs)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (x # xs))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev xs)", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "with ass"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (x # xs))\n  Sorted_Less.sorted (rev xs)", "have \"inter_sorted_rev (x # xs) xs = rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (x # xs))\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (x # xs) xs =\n    rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))", "by (simp add:inter_sorted_correct_col)"], ["proof (state)\nthis:\n  inter_sorted_rev (x # xs) xs =\n  rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "then"], ["proof (chain)\npicking this:\n  inter_sorted_rev (x # xs) xs =\n  rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))", "have \"inter_sorted_rev (x # xs) xs = rev (rev xs)\""], ["proof (prove)\nusing this:\n  inter_sorted_rev (x # xs) xs =\n  rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (x # xs) xs = rev (rev xs)", "using  sorted_xs"], ["proof (prove)\nusing this:\n  inter_sorted_rev (x # xs) xs =\n  rev (sorted_list_of_set (set (x # xs) \\<inter> set xs))\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (x # xs) xs = rev (rev xs)", "by (simp only:cons_set_eq sorted_less_rev_set_eq)"], ["proof (state)\nthis:\n  inter_sorted_rev (x # xs) xs = rev (rev xs)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (x # xs)) \\<Longrightarrow>\n    inter_sorted_rev (x # xs) xs = xs", "then"], ["proof (chain)\npicking this:\n  inter_sorted_rev (x # xs) xs = rev (rev xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  inter_sorted_rev (x # xs) xs = rev (rev xs)\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (x # xs) xs = xs", "using sorted_xs"], ["proof (prove)\nusing this:\n  inter_sorted_rev (x # xs) xs = rev (rev xs)\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (x # xs) xs = xs", "by auto"], ["proof (state)\nthis:\n  inter_sorted_rev (x # xs) xs = xs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}