{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Listn.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemmas [simp] = set_update_subsetI", "lemma unfold_lesub_list: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys = Listn.le r xs ys\"", "lemma le_listD: \"\\<lbrakk> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < size xs \\<rbrakk> \\<Longrightarrow> xs!p \\<sqsubseteq>\\<^sub>r ys!p\"", "lemma lesub_list_impl_same_size [simp]: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow> size ys = size xs\"", "lemma lesssub_lengthD: \"xs [\\<sqsubset>\\<^sub>r] ys \\<Longrightarrow> size ys = size xs\"", "lemma listI: \"\\<lbrakk> size xs = n; set xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> xs \\<in> list n A\"", "lemma listE_length [simp]: \"xs \\<in> list n A \\<Longrightarrow> size xs = n\"", "lemma listE_set [simp]: \"xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A\"", "lemma in_list_Suc_iff:\n  \"(xs \\<in> list (Suc n) A) = (\\<exists>y\\<in>A. \\<exists>ys \\<in> list n A. xs = y#ys)\"", "lemma nth_in [rule_format, simp]:\n  \"\\<forall>i n. size xs = n \\<longrightarrow> set xs \\<subseteq> A \\<longrightarrow> i < n \\<longrightarrow> (xs!i) \\<in> A\"", "lemma listt_update_in_list [simp, intro!]:\n  \"\\<lbrakk> xs \\<in> list n A; x\\<in>A \\<rbrakk> \\<Longrightarrow> xs[i := x] \\<in> list n A\"", "lemma Cons_le_Cons [iff]: \"x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y#ys = (x \\<sqsubseteq>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)\""], "translations": [["", "lemmas [simp] = set_update_subsetI"], ["", "lemma unfold_lesub_list: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys = Listn.le r xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = le r xs ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) = le r xs ys", "by (simp add: lesub_def)"], ["", "(*>*)"], ["", "lemma le_listD: \"\\<lbrakk> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < size xs \\<rbrakk> \\<Longrightarrow> xs!p \\<sqsubseteq>\\<^sub>r ys!p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> xs ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> xs ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p", "by (simp add: Listn.le_def lesub_def list_all2_nthD)"], ["", "(*>*)"], ["", "lemma lesub_list_impl_same_size [simp]: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow> size ys = size xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "apply (unfold Listn.le_def lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 r xs ys \\<Longrightarrow> length ys = length xs", "apply (simp add: list_all2_lengthD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma lesssub_lengthD: \"xs [\\<sqsubset>\\<^sub>r] ys \\<Longrightarrow> size ys = size xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    length ys = length xs", "apply (unfold lesssub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    length ys = length xs", "apply auto  \\<comment> \\<open>use lemma: lesub_list_impl_same_size \\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma listI: \"\\<lbrakk> size xs = n; set xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> xs \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> list n A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; set xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> {xs.\n                                length xs = n \\<and> set xs \\<subseteq> A}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(* FIXME: remove simp *)"], ["", "lemma listE_length [simp]: \"xs \\<in> list n A \\<Longrightarrow> size xs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> length xs = n", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> length xs = n", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> {xs.\n              length xs = n \\<and> set xs \\<subseteq> A} \\<Longrightarrow>\n    length xs = n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma listE_set [simp]: \"xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow> set xs \\<subseteq> A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> {xs.\n              length xs = n \\<and> set xs \\<subseteq> A} \\<Longrightarrow>\n    set xs \\<subseteq> A", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma in_list_Suc_iff:\n  \"(xs \\<in> list (Suc n) A) = (\\<exists>y\\<in>A. \\<exists>ys \\<in> list n A. xs = y#ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> list (Suc n) A) =\n    (\\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> list (Suc n) A) =\n    (\\<exists>y\\<in>A. \\<exists>ys\\<in>list n A. xs = y # ys)", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n    (\\<exists>y\\<in>A.\n        \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           xs = y # ys)", "apply (case_tac \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n    (\\<exists>y\\<in>A.\n        \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n           xs = y # ys)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       (xs \\<in> {xs. length xs = Suc n \\<and> set xs \\<subseteq> A}) =\n       (\\<exists>y\\<in>A.\n           \\<exists>ys\\<in>{xs. length xs = n \\<and> set xs \\<subseteq> A}.\n              xs = y # ys)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nth_in [rule_format, simp]:\n  \"\\<forall>i n. size xs = n \\<longrightarrow> set xs \\<subseteq> A \\<longrightarrow> i < n \\<longrightarrow> (xs!i) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i n.\n       length xs = n \\<longrightarrow>\n       set xs \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> xs ! i \\<in> A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i n.\n       length xs = n \\<longrightarrow>\n       set xs \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> xs ! i \\<in> A", "apply (induct \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i n.\n       length [] = n \\<longrightarrow>\n       set [] \\<subseteq> A \\<longrightarrow>\n       i < n \\<longrightarrow> [] ! i \\<in> A\n 2. \\<And>a xs.\n       \\<forall>i n.\n          length xs = n \\<longrightarrow>\n          set xs \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> xs ! i \\<in> A \\<Longrightarrow>\n       \\<forall>i n.\n          length (a # xs) = n \\<longrightarrow>\n          set (a # xs) \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> (a # xs) ! i \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<forall>i n.\n          length xs = n \\<longrightarrow>\n          set xs \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> xs ! i \\<in> A \\<Longrightarrow>\n       \\<forall>i n.\n          length (a # xs) = n \\<longrightarrow>\n          set (a # xs) \\<subseteq> A \\<longrightarrow>\n          i < n \\<longrightarrow> (a # xs) ! i \\<in> A", "apply (simp add: nth_Cons split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma listt_update_in_list [simp, intro!]:\n  \"\\<lbrakk> xs \\<in> list n A; x\\<in>A \\<rbrakk> \\<Longrightarrow> xs[i := x] \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] \\<in> list n A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x] \\<in> list n A", "apply (unfold list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> {xs. length xs = n \\<and> set xs \\<subseteq> A};\n     x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs[i := x]\n                      \\<in> {xs. length xs = n \\<and> set xs \\<subseteq> A}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Cons_le_Cons [iff]: \"x#xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y#ys = (x \\<sqsubseteq>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys)", "by (simp add: lesub_def Listn.le_def)"], ["", "end"]]}