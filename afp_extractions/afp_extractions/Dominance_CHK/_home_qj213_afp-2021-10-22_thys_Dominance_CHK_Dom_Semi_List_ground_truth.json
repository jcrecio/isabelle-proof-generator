{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Dom_Semi_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemma subset_nodes_inpow: \n  assumes \"sorted (rev xs)\"\n      and \"set xs \\<subseteq> set nodes\"\n    shows \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"", "lemma nil_in_A: \"[] \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"", "lemma single_n_in_A: \"p < length nodes \\<Longrightarrow> [p] \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"", "lemma inpow_subset_nodes: \n  assumes \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"\n    shows \"set xs \\<subseteq> set nodes\"", "lemma inter_in_pow_nodes: \n  assumes \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"\n    shows \"(rev \\<circ> sorted_list_of_set)(set xs \\<inter> set ys) \\<in> (rev \\<circ> (sorted_list_of_set)) ` (Pow (set nodes))\"", "lemma nodes_le_order: \"order nodes_le ((rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\"", "lemma nodes_semi_auxi: \n  \"let A = (rev \\<circ> sorted_list_of_set) ` (Pow (set (nodes)));\n       r = nodes_le;\n       f = (\\<lambda>x y.  (inter_sorted_rev x y))\n    in semilat(A, r, f)\"", "lemma nodes_semi_is_semilat: \"semilat (nodes_semi)\"", "lemma sorted_rev_subset_len_lt:\n  assumes \"sorted (rev a)\"\n      and \"sorted (rev b)\"\n      and \"set a \\<subset> set b\"\n    shows \"length a < length b\"", "lemma wf_nodes_le_auxi: \"wf {(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subset> set x) \\<and> x \\<noteq> y}\"", "lemma wf_nodes_le_auxi2: \n  \"wf {(y, x). sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subset> set x \\<and> rev x \\<noteq> rev y}\"", "lemma  wf_nodes_le: \"wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}\"", "lemma acc_nodes_le: \"acc nodes_le\"", "lemma acc_nodes_le2: \"acc (fst (snd nodes_semi))\"", "lemma \"top nodes_le [] (fst nodes_semi)\""], "translations": [["", "lemma subset_nodes_inpow: \n  assumes \"sorted (rev xs)\"\n      and \"set xs \\<subseteq> set nodes\"\n    shows \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "from assms(1)"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev xs)", "have \"(sorted_list_of_set (set xs)) = rev xs\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (set xs) = rev xs", "by (auto intro:sorted_less_rev_set_eq)"], ["proof (state)\nthis:\n  sorted_list_of_set (set xs) = rev xs\n\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "then"], ["proof (chain)\npicking this:\n  sorted_list_of_set (set xs) = rev xs", "have \"rev (rev xs) = rev (sorted_list_of_set (set xs))\""], ["proof (prove)\nusing this:\n  sorted_list_of_set (set xs) = rev xs\n\ngoal (1 subgoal):\n 1. rev (rev xs) = rev (sorted_list_of_set (set xs))", "by simp"], ["proof (state)\nthis:\n  rev (rev xs) = rev (sorted_list_of_set (set xs))\n\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "with assms(2)"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> set nodes\n  rev (rev xs) = rev (sorted_list_of_set (set xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> set nodes\n  rev (rev xs) = rev (sorted_list_of_set (set xs))\n\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by auto"], ["proof (state)\nthis:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nil_in_A: \"[] \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "proof(simp add: Pow_def image_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x\\<subseteq>set nodes. sorted_list_of_set x = []", "have \"sorted_list_of_set {} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set {} = []", "by auto"], ["proof (state)\nthis:\n  sorted_list_of_set {} = []\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<subseteq>set nodes. sorted_list_of_set x = []", "then"], ["proof (chain)\npicking this:\n  sorted_list_of_set {} = []", "show \"\\<exists>x\\<subseteq>set nodes. sorted_list_of_set x = []\""], ["proof (prove)\nusing this:\n  sorted_list_of_set {} = []\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<subseteq>set nodes. sorted_list_of_set x = []", "by blast"], ["proof (state)\nthis:\n  \\<exists>x\\<subseteq>set nodes. sorted_list_of_set x = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma single_n_in_A: \"p < length nodes \\<Longrightarrow> [p] \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p < length nodes \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "proof (unfold nodes_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. p < length (g_V G) \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "let ?S = \"(rev \\<circ> sorted_list_of_set) ` (Pow (set (g_V G)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. p < length (g_V G) \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "assume \"p < length (g_V G)\""], ["proof (state)\nthis:\n  p < length (g_V G)\n\ngoal (1 subgoal):\n 1. p < length (g_V G) \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "then"], ["proof (chain)\npicking this:\n  p < length (g_V G)", "have p: \"{p} \\<in> Pow (set (g_V G))\""], ["proof (prove)\nusing this:\n  p < length (g_V G)\n\ngoal (1 subgoal):\n 1. {p} \\<in> Pow (set (g_V G))", "by (auto simp add:Pow_def verts_set)"], ["proof (state)\nthis:\n  {p} \\<in> Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. p < length (g_V G) \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "then"], ["proof (chain)\npicking this:\n  {p} \\<in> Pow (set (g_V G))", "have \"[p] \\<in>?S\""], ["proof (prove)\nusing this:\n  {p} \\<in> Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "by (unfold image_def) force"], ["proof (state)\nthis:\n  [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. p < length (g_V G) \\<Longrightarrow>\n    [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "then"], ["proof (chain)\npicking this:\n  [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "show \"[p] \\<in> ?S\""], ["proof (prove)\nusing this:\n  [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))", "by auto"], ["proof (state)\nthis:\n  [p] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set (g_V G))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inpow_subset_nodes: \n  assumes \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"\n    shows \"set xs \\<subseteq> set nodes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "from assms"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "obtain x where x: \"x \\<in> Pow (set nodes)\" and \"xs = (rev \\<circ> sorted_list_of_set) x\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> Pow (set nodes);\n         xs = (rev \\<circ> sorted_list_of_set) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> Pow (set nodes)\n  xs = (rev \\<circ> sorted_list_of_set) x\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "then"], ["proof (chain)\npicking this:\n  x \\<in> Pow (set nodes)\n  xs = (rev \\<circ> sorted_list_of_set) x", "have eq: \"set xs = set (sorted_list_of_set x)\""], ["proof (prove)\nusing this:\n  x \\<in> Pow (set nodes)\n  xs = (rev \\<circ> sorted_list_of_set) x\n\ngoal (1 subgoal):\n 1. set xs = set (sorted_list_of_set x)", "by auto"], ["proof (state)\nthis:\n  set xs = set (sorted_list_of_set x)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "have \"\\<forall>x \\<in> Pow (set nodes). finite x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Pow (set nodes). finite x", "by (auto intro: rev_finite_subset)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Pow (set nodes). finite x\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "with x eq"], ["proof (chain)\npicking this:\n  x \\<in> Pow (set nodes)\n  set xs = set (sorted_list_of_set x)\n  \\<forall>x\\<in>Pow (set nodes). finite x", "show \"set xs \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  x \\<in> Pow (set nodes)\n  set xs = set (sorted_list_of_set x)\n  \\<forall>x\\<in>Pow (set nodes). finite x\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> set nodes\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inter_in_pow_nodes: \n  assumes \"xs \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"\n    shows \"(rev \\<circ> sorted_list_of_set)(set xs \\<inter> set ys) \\<in> (rev \\<circ> (sorted_list_of_set)) ` (Pow (set nodes))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) `\n             Pow (set nodes) \\<Longrightarrow>\n    (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "let ?res = \"set xs \\<inter> set ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) `\n             Pow (set nodes) \\<Longrightarrow>\n    (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "from assms"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have \"set xs \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "using inpow_subset_nodes"], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ?xs\n  \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes) \\<Longrightarrow>\n  set ?xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) `\n             Pow (set nodes) \\<Longrightarrow>\n    (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "then"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> set nodes", "have \"?res \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set xs \\<inter> set ys \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set xs \\<inter> set ys \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. xs \\<in> (rev \\<circ> sorted_list_of_set) `\n             Pow (set nodes) \\<Longrightarrow>\n    (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "then"], ["proof (chain)\npicking this:\n  set xs \\<inter> set ys \\<subseteq> set nodes", "show ?thesis"], ["proof (prove)\nusing this:\n  set xs \\<inter> set ys \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "using subset_nodes_inpow"], ["proof (prove)\nusing this:\n  set xs \\<inter> set ys \\<subseteq> set nodes\n  \\<lbrakk>Sorted_Less.sorted (rev ?xs);\n   set ?xs \\<subseteq> set nodes\\<rbrakk>\n  \\<Longrightarrow> ?xs\n                    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by auto"], ["proof (state)\nthis:\n  (rev \\<circ> sorted_list_of_set) (set xs \\<inter> set ys)\n  \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodes_le_order: \"order nodes_le ((rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "let ?A = \"(rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (state)\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "have \"\\<forall>x \\<in> ?A. sorted (rev x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       Sorted_Less.sorted (rev x)", "by (auto intro: sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     Sorted_Less.sorted (rev x)\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     Sorted_Less.sorted (rev x)", "have \"\\<forall>x\\<in>?A. nodes_le x x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     Sorted_Less.sorted (rev x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       nodes_le x x", "by (auto simp add:nodes_le_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     nodes_le x x\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     nodes_le x x\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "have \"\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. (nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        nodes_le x y \\<and> nodes_le y x\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        nodes_le x y \\<and> nodes_le y x\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> ?A\" and \"y \\<in> ?A\" and \"nodes_le x y \\<and> nodes_le y x\""], ["proof (state)\nthis:\n  x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  nodes_le x y \\<and> nodes_le y x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        nodes_le x y \\<and> nodes_le y x\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  nodes_le x y \\<and> nodes_le y x", "have \"sorted (rev x) \\<and> sorted (rev (y::nat list)) \\<and>  set x = set y \\<or> x = y\""], ["proof (prove)\nusing this:\n  x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  nodes_le x y \\<and> nodes_le y x\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev x) \\<and>\n    Sorted_Less.sorted (rev y) \\<and> set x = set y \\<or>\n    x = y", "by (auto simp add: nodes_le_def intro:subset_antisym sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev x) \\<and>\n  Sorted_Less.sorted (rev y) \\<and> set x = set y \\<or>\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        nodes_le x y \\<and> nodes_le y x\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev x) \\<and>\n  Sorted_Less.sorted (rev y) \\<and> set x = set y \\<or>\n  x = y", "show \"x = y\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev x) \\<and>\n  Sorted_Less.sorted (rev y) \\<and> set x = set y \\<or>\n  x = y\n\ngoal (1 subgoal):\n 1. x = y", "by (auto dest: sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "have \"\\<forall>x\\<in> ?A.   \\<forall>y\\<in> ?A. \\<forall>z\\<in> ?A . nodes_le x y \\<and> nodes_le y  z \\<longrightarrow> nodes_le x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n             nodes_le x y \\<and> nodes_le y z \\<longrightarrow> nodes_le x z", "by (auto simp add: nodes_le_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           nodes_le x y \\<and> nodes_le y z \\<longrightarrow> nodes_le x z\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     nodes_le x x\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           nodes_le x y \\<and> nodes_le y z \\<longrightarrow> nodes_le x z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     nodes_le x x\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        nodes_le x y \\<and> nodes_le y x \\<longrightarrow> x = y\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           nodes_le x y \\<and> nodes_le y z \\<longrightarrow> nodes_le x z\n\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "by (unfold order_def lesub_def lesssub_def) fastforce"], ["proof (state)\nthis:\n  order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodes_semi_auxi: \n  \"let A = (rev \\<circ> sorted_list_of_set) ` (Pow (set (nodes)));\n       r = nodes_le;\n       f = (\\<lambda>x y.  (inter_sorted_rev x y))\n    in semilat(A, r, f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "let ?A = \"(rev \\<circ> sorted_list_of_set) ` (Pow (set (nodes)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "let ?r = \"nodes_le\""], ["proof (state)\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "let ?f = \"(\\<lambda>x y. (inter_sorted_rev x y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "have \"order ?r ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))", "by (rule nodes_le_order)"], ["proof (state)\nthis:\n  order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "moreover"], ["proof (state)\nthis:\n  order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "have \"closed ?A ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n     inter_sorted_rev", "proof (unfold closed_def, intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "fix xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "assume xs_in: \"xs \\<in> ?A\" and ys_in: \"ys \\<in> ?A\""], ["proof (state)\nthis:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "then"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have sorted_xs: \"sorted (rev xs)\" \n          and sorted_ys: \"sorted (rev ys)\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev xs) &&& Sorted_Less.sorted (rev ys)", "by (auto intro: sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)", "have inter_xs_ys: \"set (?f xs ys) = set xs \\<inter> set ys\" and \n              sorted_res: \"sorted (rev (?f xs ys))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) = set xs \\<inter> set ys &&&\n    Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "using inter_sorted_correct"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n  \\<lbrakk>Sorted_Less.sorted (rev ?l1.0);\n   Sorted_Less.sorted (rev ?l2.0)\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted\n                     (rev (inter_sorted_rev ?l1.0 ?l2.0)) \\<and>\n                    set (inter_sorted_rev ?l1.0 ?l2.0) =\n                    set ?l1.0 \\<inter> set ?l2.0\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) = set xs \\<inter> set ys &&&\n    Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "by auto"], ["proof (state)\nthis:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "from xs_in"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have \"set xs \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "using inpow_subset_nodes"], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ?xs\n  \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes) \\<Longrightarrow>\n  set ?xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "with inter_xs_ys"], ["proof (chain)\npicking this:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  set xs \\<subseteq> set nodes", "have \"set (?f xs ys) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  set xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (inter_sorted_rev xs ys) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n                         \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)", "with sorted_res"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) \\<subseteq> set nodes", "show \"xs \\<squnion>\\<^bsub>?f\\<^esub> ys\\<in> ?A\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. xs \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "using subset_nodes_inpow"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set (inter_sorted_rev xs ys) \\<subseteq> set nodes\n  \\<lbrakk>Sorted_Less.sorted (rev ?xs);\n   set ?xs \\<subseteq> set nodes\\<rbrakk>\n  \\<Longrightarrow> ?xs\n                    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. xs \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (auto simp add:plussub_def)"], ["proof (state)\nthis:\n  xs \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys\n  \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  closed ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n   inter_sorted_rev\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "moreover"], ["proof (state)\nthis:\n  closed ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n   inter_sorted_rev\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "have \"(\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. x \\<sqsubseteq>\\<^bsub>?r\\<^esub> x \\<squnion>\\<^bsub>?f\\<^esub> y) \\<and> (\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. y \\<sqsubseteq>\\<^bsub>?r\\<^esub> x \\<squnion>\\<^bsub>?f\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n             \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y) \\<and>\n    (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n             \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y)", "proof(rule conjI, intro strip)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n 2. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "fix xs ys"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n 2. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "assume xs_in: \"xs \\<in> ?A\" and ys_in: \"ys \\<in> ?A\""], ["proof (state)\nthis:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n 2. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have sorted_xs: \"sorted (rev xs)\" and sorted_ys: \"sorted (rev ys)\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev xs) &&& Sorted_Less.sorted (rev ys)", "by (auto intro: sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n 2. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)", "have \"set (?f xs ys) \\<subseteq> set xs\" and sorted_f_xs_ys: \"sorted (rev (?f xs ys))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) \\<subseteq> set xs &&&\n    Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "by (auto simp add: inter_sorted_correct)"], ["proof (state)\nthis:\n  set (inter_sorted_rev xs ys) \\<subseteq> set xs\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n 2. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  set (inter_sorted_rev xs ys) \\<subseteq> set xs\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "show \"xs \\<sqsubseteq>\\<^bsub>?r\\<^esub> xs \\<squnion>\\<^bsub>?f\\<^esub> ys\""], ["proof (prove)\nusing this:\n  set (inter_sorted_rev xs ys) \\<subseteq> set xs\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (1 subgoal):\n 1. xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> xs \n       \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys", "by (simp add: lesub_def sorted_xs sorted_ys sorted_f_xs_ys nodes_le_def plussub_def)"], ["proof (state)\nthis:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> xs \n     \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "show \"\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. y \\<sqsubseteq>\\<^bsub>?r\\<^esub> x \\<squnion>\\<^bsub>?f\\<^esub> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n            \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "fix xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "assume xs_in: \"xs \\<in> ?A\" and ys_in: \"ys \\<in> ?A\""], ["proof (state)\nthis:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have sorted_xs: \"sorted (rev xs)\" and sorted_ys: \"sorted (rev ys)\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev xs) &&& Sorted_Less.sorted (rev ys)", "by (auto intro: sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)", "have \"set (?f xs ys) \\<subseteq> set ys\" and sorted_f_xs_ys: \"sorted (rev (?f xs ys))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) \\<subseteq> set ys &&&\n    Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "by (auto simp add: inter_sorted_correct)"], ["proof (state)\nthis:\n  set (inter_sorted_rev xs ys) \\<subseteq> set ys\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n                           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y", "then"], ["proof (chain)\npicking this:\n  set (inter_sorted_rev xs ys) \\<subseteq> set ys\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "show \"ys \\<sqsubseteq>\\<^bsub>?r\\<^esub> xs \\<squnion>\\<^bsub>?f\\<^esub> ys\""], ["proof (prove)\nusing this:\n  set (inter_sorted_rev xs ys) \\<subseteq> set ys\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (1 subgoal):\n 1. ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> xs \n       \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys", "by (simp add: lesub_def sorted_ys sorted_xs sorted_f_xs_ys nodes_le_def plussub_def)"], ["proof (state)\nthis:\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> xs \n     \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n          \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y)\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "moreover"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y)\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "have \"\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. \\<forall>z\\<in>?A. x \\<sqsubseteq>\\<^bsub>?r\\<^esub> z \\<and> y  \\<sqsubseteq>\\<^bsub>?r\\<^esub> z \\<longrightarrow> x \\<squnion>\\<^bsub>?f\\<^esub> y \\<sqsubseteq>\\<^bsub>?r\\<^esub>z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n       \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n          \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n             x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n             y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<longrightarrow>\n             x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n             \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "fix xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "assume xin: \"xs \\<in> ?A\" and yin: \"ys \\<in> ?A\" and zin: \"zs \\<in> ?A\" and \"xs \\<sqsubseteq>\\<^bsub>?r\\<^esub> zs \\<and> ys \\<sqsubseteq>\\<^bsub>?r\\<^esub> zs\""], ["proof (state)\nthis:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  zs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs \\<and>\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "then"], ["proof (chain)\npicking this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  zs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs \\<and>\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs", "have xs_zs: \"xs \\<sqsubseteq>\\<^bsub>?r\\<^esub> zs\" and ys_zs: \"ys \\<sqsubseteq>\\<^bsub>?r\\<^esub> zs\" and sorted_xs: \"sorted (rev xs)\" and sorted_ys: \"sorted (rev ys)\""], ["proof (prove)\nusing this:\n  xs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  ys \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  zs \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs \\<and>\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n\ngoal (1 subgoal):\n 1. (xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs &&&\n     ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs) &&&\n    Sorted_Less.sorted (rev xs) &&& Sorted_Less.sorted (rev ys)", "by (auto simp add: sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "then"], ["proof (chain)\npicking this:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)", "have inter_xs_ys: \"set (?f xs ys) = (set xs \\<inter> set ys)\" and sorted_f_xs_ys: \"sorted (rev (?f xs ys))\""], ["proof (prove)\nusing this:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev xs ys) = set xs \\<inter> set ys &&&\n    Sorted_Less.sorted (rev (inter_sorted_rev xs ys))", "by (auto simp add: inter_sorted_correct)"], ["proof (state)\nthis:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "from xs_zs ys_zs sorted_xs"], ["proof (chain)\npicking this:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  Sorted_Less.sorted (rev xs)", "have sorted_zs: \"sorted (rev zs)\"\n                                and \"set zs \\<subseteq> set xs\"\n                                and \"set zs \\<subseteq> set ys\""], ["proof (prove)\nusing this:\n  xs \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  ys \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n  Sorted_Less.sorted (rev xs)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev zs) &&&\n    set zs \\<subseteq> set xs &&& set zs \\<subseteq> set ys", "by (auto simp add: lesub_def nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev zs)\n  set zs \\<subseteq> set xs\n  set zs \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev zs)\n  set zs \\<subseteq> set xs\n  set zs \\<subseteq> set ys", "have zs: \"set zs \\<subseteq> set xs \\<inter> set ys\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev zs)\n  set zs \\<subseteq> set xs\n  set zs \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. set zs \\<subseteq> set xs \\<inter> set ys", "by auto"], ["proof (state)\nthis:\n  set zs \\<subseteq> set xs \\<inter> set ys\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        y \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        z \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n        y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "with inter_xs_ys sorted_zs sorted_f_xs_ys"], ["proof (chain)\npicking this:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted (rev zs)\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set zs \\<subseteq> set xs \\<inter> set ys", "show \"xs \\<squnion>\\<^bsub>?f\\<^esub> ys \\<sqsubseteq>\\<^bsub>?r\\<^esub> zs\""], ["proof (prove)\nusing this:\n  set (inter_sorted_rev xs ys) = set xs \\<inter> set ys\n  Sorted_Less.sorted (rev zs)\n  Sorted_Less.sorted (rev (inter_sorted_rev xs ys))\n  set zs \\<subseteq> set xs \\<inter> set ys\n\ngoal (1 subgoal):\n 1. xs \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys \n    \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs", "by (auto simp add:plussub_def lesub_def  sorted_xs sorted_ys sorted_f_xs_ys sorted_zs nodes_le_def)"], ["proof (state)\nthis:\n  xs \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> ys \n  \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "ultimately"], ["proof (chain)\npicking this:\n  order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n  closed ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n   inter_sorted_rev\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y)\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z", "show ?thesis"], ["proof (prove)\nusing this:\n  order nodes_le ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n  closed ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes))\n   inter_sorted_rev\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n      \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n         y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> x \n           \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y)\n  \\<forall>x\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n     \\<forall>y\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n        \\<forall>z\\<in>(rev \\<circ> sorted_list_of_set) ` Pow (set nodes).\n           x \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>inter_sorted_rev\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>nodes_le\\<^esub> z\n\ngoal (1 subgoal):\n 1. let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes);\n        r = nodes_le; f = inter_sorted_rev\n    in semilat (A, r, f)", "by (unfold semilat_def) simp"], ["proof (state)\nthis:\n  let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes); r = nodes_le;\n      f = inter_sorted_rev\n  in semilat (A, r, f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nodes_semi_is_semilat: \"semilat (nodes_semi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat nodes_semi", "using nodes_semi_auxi"], ["proof (prove)\nusing this:\n  let A = (rev \\<circ> sorted_list_of_set) ` Pow (set nodes); r = nodes_le;\n      f = inter_sorted_rev\n  in semilat (A, r, f)\n\ngoal (1 subgoal):\n 1. semilat nodes_semi", "by (auto simp add: nodes_sup_def nodes_semi_def)"], ["", "lemma sorted_rev_subset_len_lt:\n  assumes \"sorted (rev a)\"\n      and \"sorted (rev b)\"\n      and \"set a \\<subset> set b\"\n    shows \"length a < length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a < length b", "using assms"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev a)\n  Sorted_Less.sorted (rev b)\n  set a \\<subset> set b\n\ngoal (1 subgoal):\n 1. length a < length b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev a); Sorted_Less.sorted (rev b);\n     set a \\<subset> set b\\<rbrakk>\n    \\<Longrightarrow> length a < length b", "from assms(1) assms(2)"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev a)\n  Sorted_Less.sorted (rev b)", "have dist_a: \"distinct a\" and dist_b: \"distinct b\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev a)\n  Sorted_Less.sorted (rev b)\n\ngoal (1 subgoal):\n 1. distinct a &&& distinct b", "by (auto dest: distinct_sorted_rev)"], ["proof (state)\nthis:\n  distinct a\n  distinct b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev a); Sorted_Less.sorted (rev b);\n     set a \\<subset> set b\\<rbrakk>\n    \\<Longrightarrow> length a < length b", "from assms(3)"], ["proof (chain)\npicking this:\n  set a \\<subset> set b", "have \"card (set a) < card (set b)\""], ["proof (prove)\nusing this:\n  set a \\<subset> set b\n\ngoal (1 subgoal):\n 1. card (set a) < card (set b)", "by (auto intro: psubset_card_mono)"], ["proof (state)\nthis:\n  card (set a) < card (set b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev a); Sorted_Less.sorted (rev b);\n     set a \\<subset> set b\\<rbrakk>\n    \\<Longrightarrow> length a < length b", "with dist_a dist_b"], ["proof (chain)\npicking this:\n  distinct a\n  distinct b\n  card (set a) < card (set b)", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct a\n  distinct b\n  card (set a) < card (set b)\n\ngoal (1 subgoal):\n 1. length a < length b", "by (auto simp add: distinct_card)"], ["proof (state)\nthis:\n  length a < length b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_nodes_le_auxi: \"wf {(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subset> set x) \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        (Sorted_Less.sorted (rev y) \\<and>\n         Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n        x \\<noteq> y}", "apply(rule wf_measure [THEN wf_subset])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, x).\n     (Sorted_Less.sorted (rev y) \\<and>\n      Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n     x \\<noteq> y}\n    \\<subseteq> measure ?f1", "apply(simp only: measure_def inv_image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, x).\n     (Sorted_Less.sorted (rev y) \\<and>\n      Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n     x \\<noteq> y}\n    \\<subseteq> {(x, y). (?f1 x, ?f1 y) \\<in> less_than}", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set a", "apply(frule sorted_rev_subset_len_lt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (rev (?b13 a b x))\n 2. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> set a \\<subset> set (?b13 a b x)\n 3. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b;\n        length a < length (?b13 a b x)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set a", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> set a \\<subset> set (?b13 a b x)\n 2. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b;\n        length a < length (?b13 a b x)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set a\n 3. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (rev (?b13 a b x))", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b;\n        length a < length (?b13 a b x)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set a\n 2. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (rev (?b13 a b x))\n 3. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> ?f1 a < ?f1 b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> set a \\<subset> set (?b13 a b x)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> length a < length b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (rev b)\n 2. \\<And>a b x.\n       \\<lbrakk>b \\<noteq> a; Sorted_Less.sorted (rev a);\n        Sorted_Less.sorted (rev b); set a \\<subseteq> set b;\n        \\<not> length a < length b; x \\<in> set b\\<rbrakk>\n       \\<Longrightarrow> set a \\<subset> set b", "by (auto intro:sorted_less_rev_set_unique)"], ["", "lemma wf_nodes_le_auxi2: \n  \"wf {(y, x). sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subset> set x \\<and> rev x \\<noteq> rev y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        Sorted_Less.sorted (rev y) \\<and>\n        Sorted_Less.sorted (rev x) \\<and>\n        set y \\<subset> set x \\<and> rev x \\<noteq> rev y}", "using wf_nodes_le_auxi"], ["proof (prove)\nusing this:\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n      x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x).\n        Sorted_Less.sorted (rev y) \\<and>\n        Sorted_Less.sorted (rev x) \\<and>\n        set y \\<subset> set x \\<and> rev x \\<noteq> rev y}", "by auto"], ["", "lemma  wf_nodes_le: \"wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "have eq_set: \"{(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and> x \\<noteq> y} = \n                {(y, x). nodes_le x y \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, x).\n     (Sorted_Less.sorted (rev y) \\<and>\n      Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n     x \\<noteq> y} =\n    {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "by (unfold nodes_le_def) auto"], ["proof (state)\nthis:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x). nodes_le x y \\<and> x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "have \"{(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subset> set x) \\<and> x \\<noteq> y} =\n        {(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, x).\n     (Sorted_Less.sorted (rev y) \\<and>\n      Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n     x \\<noteq> y} =\n    {(y, x).\n     (Sorted_Less.sorted (rev y) \\<and>\n      Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n     x \\<noteq> y}", "by (auto simp add:sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "from this wf_nodes_le_auxi"], ["proof (chain)\npicking this:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y}\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n      x \\<noteq> y}", "have \"wf {(y, x). (sorted (rev y) \\<and> sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and> x \\<noteq> y}\""], ["proof (prove)\nusing this:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y}\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subset> set x) \\<and>\n      x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x).\n        (Sorted_Less.sorted (rev y) \\<and>\n         Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n        x \\<noteq> y}", "by (rule subst)"], ["proof (state)\nthis:\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n      x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "with eq_set"], ["proof (chain)\npicking this:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x). nodes_le x y \\<and> x \\<noteq> y}\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n      x \\<noteq> y}", "show ?thesis"], ["proof (prove)\nusing this:\n  {(y, x).\n   (Sorted_Less.sorted (rev y) \\<and>\n    Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n   x \\<noteq> y} =\n  {(y, x). nodes_le x y \\<and> x \\<noteq> y}\n  wf {(y, x).\n      (Sorted_Less.sorted (rev y) \\<and>\n       Sorted_Less.sorted (rev x) \\<and> set y \\<subseteq> set x) \\<and>\n      x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "by (rule subst)"], ["proof (state)\nthis:\n  wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma acc_nodes_le: \"acc nodes_le\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc nodes_le", "apply (unfold acc_def lesssub_def lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). nodes_le x y \\<and> x \\<noteq> y}", "apply (rule wf_nodes_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma acc_nodes_le2: \"acc (fst (snd nodes_semi))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc (fst (snd nodes_semi))", "apply (unfold nodes_semi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. acc (fst (snd ((rev \\<circ> sorted_list_of_set) ` Pow (set nodes),\n                   nodes_le, nodes_sup)))", "apply (auto simp add: lesssub_def lesub_def intro: acc_nodes_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"top nodes_le [] (fst nodes_semi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Semilat.top nodes_le [] (fst nodes_semi)", "by(auto simp add: top_def nodes_semi_def nodes_le_def lesssub_def lesub_def sorted_less_sorted_list_of_set)"], ["", "end"], ["", "end"]]}