{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Sorted_Less2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemma Cons_sorted_less: \"sorted (rev xs) \\<Longrightarrow> \\<forall>x\\<in>set xs. x < p \\<Longrightarrow>   sorted (rev (p # xs))\"", "lemma Cons_sorted_less_nth:  \"\\<forall>x<length xs. xs ! x < p \\<Longrightarrow> sorted (rev xs) \\<Longrightarrow> sorted (rev (p # xs))\"", "lemma distinct_sorted_rev: \"sorted (rev xs) \\<Longrightarrow> distinct xs\"", "lemma sorted_le2lt: \n  assumes \"List.sorted xs\"\n      and \"distinct xs\"\n    shows \"sorted xs\"", "lemma sorted_less_sorted_list_of_set: \"sorted (sorted_list_of_set S)\"", "lemma distinct_sorted: \"sorted xs \\<Longrightarrow> distinct xs\"", "lemma sorted_less_set_unique:\n  assumes \"sorted xs\"\n      and \"sorted ys\"\n      and \"set xs = set ys\"\n    shows \"xs = ys\"", "lemma sorted_less_rev_set_unique: \n  assumes \"sorted (rev xs)\"\n      and \"sorted (rev ys)\"\n      and \"set xs = set ys\"\n    shows \"xs = ys\"", "lemma sorted_less_set_eq: \n  assumes \"sorted xs \"\n    shows \"xs = sorted_list_of_set (set xs)\"", "lemma sorted_less_rev_set_eq: \n  assumes \"sorted (rev xs) \"\n    shows \"sorted_list_of_set (set xs) = rev xs\""], "translations": [["", "lemma Cons_sorted_less: \"sorted (rev xs) \\<Longrightarrow> \\<forall>x\\<in>set xs. x < p \\<Longrightarrow>   sorted (rev (p # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted (rev xs);\n     \\<forall>x\\<in>set xs. x < p\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted (rev (p # xs))", "by (induct xs) (auto simp add:sorted_wrt_append)"], ["", "lemma Cons_sorted_less_nth:  \"\\<forall>x<length xs. xs ! x < p \\<Longrightarrow> sorted (rev xs) \\<Longrightarrow> sorted (rev (p # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x<length xs. xs ! x < p;\n     Sorted_Less.sorted (rev xs)\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted (rev (p # xs))", "apply(subgoal_tac \"\\<forall>x\\<in>set xs. x < p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x<length xs. xs ! x < p; Sorted_Less.sorted (rev xs);\n     \\<forall>x\\<in>set xs. x < p\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted (rev (p # xs))\n 2. \\<lbrakk>\\<forall>x<length xs. xs ! x < p;\n     Sorted_Less.sorted (rev xs)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set xs. x < p", "apply(fastforce dest:Cons_sorted_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x<length xs. xs ! x < p;\n     Sorted_Less.sorted (rev xs)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set xs. x < p", "apply(auto simp add: set_conv_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma distinct_sorted_rev: \"sorted (rev xs) \\<Longrightarrow> distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev xs) \\<Longrightarrow> distinct xs", "by (induct xs) (auto simp add:sorted_wrt_append)"], ["", "lemma sorted_le2lt: \n  assumes \"List.sorted xs\"\n      and \"distinct xs\"\n    shows \"sorted xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted xs", "using assms"], ["proof (prove)\nusing this:\n  linorder_class.sorted xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted xs", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>linorder_class.sorted []; distinct []\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted []\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "case Nil"], ["proof (state)\nthis:\n  linorder_class.sorted []\n  distinct []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>linorder_class.sorted []; distinct []\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted []\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "then"], ["proof (chain)\npicking this:\n  linorder_class.sorted []\n  distinct []", "show ?case"], ["proof (prove)\nusing this:\n  linorder_class.sorted []\n  distinct []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted []", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted []\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted xs\n  linorder_class.sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "note ind_hyp_xs = Cons(1)"], ["proof (state)\nthis:\n  \\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "note sorted_le_x_xs = Cons(2)"], ["proof (state)\nthis:\n  linorder_class.sorted (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "note dist_x_xs = Cons(3)"], ["proof (state)\nthis:\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "from dist_x_xs"], ["proof (chain)\npicking this:\n  distinct (x # xs)", "have x_neq_xs: \"\\<forall>v \\<in> set xs. x \\<noteq> v\" \n                  and     dist: \"distinct xs\""], ["proof (prove)\nusing this:\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set xs. x \\<noteq> v &&& distinct xs", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set xs. x \\<noteq> v\n  distinct xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "from sorted_le_x_xs"], ["proof (chain)\npicking this:\n  linorder_class.sorted (x # xs)", "have sorted_le_xs: \"List.sorted xs\" \n                       and      x_le_xs: \"\\<forall>v \\<in> set xs. v \\<ge> x\""], ["proof (prove)\nusing this:\n  linorder_class.sorted (x # xs)\n\ngoal (1 subgoal):\n 1. linorder_class.sorted xs &&& \\<forall>v\\<in>set xs. x \\<le> v", "by auto"], ["proof (state)\nthis:\n  linorder_class.sorted xs\n  \\<forall>v\\<in>set xs. x \\<le> v\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "from x_neq_xs x_le_xs"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>set xs. x \\<noteq> v\n  \\<forall>v\\<in>set xs. x \\<le> v", "have x_lt_xs: \"\\<forall>v \\<in> set xs. v > x\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set xs. x \\<noteq> v\n  \\<forall>v\\<in>set xs. x \\<le> v\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set xs. x < v", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set xs. x < v\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "from ind_hyp_xs[OF sorted_le_xs dist]"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted xs", "have \"sorted xs\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted xs", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>linorder_class.sorted xs; distinct xs\\<rbrakk>\n                \\<Longrightarrow> Sorted_Less.sorted xs;\n        linorder_class.sorted (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (a # xs)", "with x_lt_xs"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>set xs. x < v\n  Sorted_Less.sorted xs", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set xs. x < v\n  Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (x # xs)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_less_sorted_list_of_set: \"sorted (sorted_list_of_set S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (sorted_list_of_set S)", "by (auto intro:sorted_le2lt)"], ["", "lemma distinct_sorted: \"sorted xs \\<Longrightarrow> distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted xs \\<Longrightarrow> distinct xs", "by (induct xs) (auto simp add: sorted_wrt_append sorted_sorted_wrt)"], ["", "lemma sorted_less_set_unique:\n  assumes \"sorted xs\"\n      and \"sorted ys\"\n      and \"set xs = set ys\"\n    shows \"xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys", "using assms"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted xs\n  Sorted_Less.sorted ys\n  set xs = set ys\n\ngoal (1 subgoal):\n 1. xs = ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted xs; Sorted_Less.sorted ys;\n     set xs = set ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "from assms(1)"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted xs", "have \"distinct xs\" and \"List.sorted xs\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. distinct xs &&& linorder_class.sorted xs", "by (induct xs) auto"], ["proof (state)\nthis:\n  distinct xs\n  linorder_class.sorted xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted xs; Sorted_Less.sorted ys;\n     set xs = set ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "also"], ["proof (state)\nthis:\n  distinct xs\n  linorder_class.sorted xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted xs; Sorted_Less.sorted ys;\n     set xs = set ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "from assms(2)"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted ys", "have \"distinct ys\" and \"List.sorted ys\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted ys\n\ngoal (1 subgoal):\n 1. distinct ys &&& linorder_class.sorted ys", "by (induct ys) auto"], ["proof (state)\nthis:\n  distinct ys\n  linorder_class.sorted ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted xs; Sorted_Less.sorted ys;\n     set xs = set ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "ultimately"], ["proof (chain)\npicking this:\n  distinct xs\n  linorder_class.sorted xs\n  distinct ys\n  linorder_class.sorted ys", "show \"xs = ys\""], ["proof (prove)\nusing this:\n  distinct xs\n  linorder_class.sorted xs\n  distinct ys\n  linorder_class.sorted ys\n\ngoal (1 subgoal):\n 1. xs = ys", "using assms(3)"], ["proof (prove)\nusing this:\n  distinct xs\n  linorder_class.sorted xs\n  distinct ys\n  linorder_class.sorted ys\n  set xs = set ys\n\ngoal (1 subgoal):\n 1. xs = ys", "by (auto intro: sorted_distinct_set_unique)"], ["proof (state)\nthis:\n  xs = ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_less_rev_set_unique: \n  assumes \"sorted (rev xs)\"\n      and \"sorted (rev ys)\"\n      and \"set xs = set ys\"\n    shows \"xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys", "using assms sorted_less_set_unique[of \"rev xs\" \"rev ys\"]"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev ys)\n  set xs = set ys\n  \\<lbrakk>Sorted_Less.sorted (rev xs); Sorted_Less.sorted (rev ys);\n   set (rev xs) = set (rev ys)\\<rbrakk>\n  \\<Longrightarrow> rev xs = rev ys\n\ngoal (1 subgoal):\n 1. xs = ys", "by auto"], ["", "lemma sorted_less_set_eq: \n  assumes \"sorted xs \"\n    shows \"xs = sorted_list_of_set (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = sorted_list_of_set (set xs)", "using assms"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted xs\n\ngoal (1 subgoal):\n 1. xs = sorted_list_of_set (set xs)", "apply(subgoal_tac \"sorted (sorted_list_of_set (set xs))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Sorted_Less.sorted xs;\n     Sorted_Less.sorted (sorted_list_of_set (set xs))\\<rbrakk>\n    \\<Longrightarrow> xs = sorted_list_of_set (set xs)\n 2. Sorted_Less.sorted xs \\<Longrightarrow>\n    Sorted_Less.sorted (sorted_list_of_set (set xs))", "apply(auto intro: sorted_less_set_unique sorted_le2lt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sorted_less_rev_set_eq: \n  assumes \"sorted (rev xs) \"\n    shows \"sorted_list_of_set (set xs) = rev xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (set xs) = rev xs", "using assms sorted_less_set_eq[of \"rev xs\"]"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev xs)\n  Sorted_Less.sorted (rev xs) \\<Longrightarrow>\n  rev xs = sorted_list_of_set (set (rev xs))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (set xs) = rev xs", "by auto"], ["", "end"]]}