{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Cfg.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemma path_entry0_empty_conv: \"path_entry E [] v \\<longleftrightarrow> v = 0\"", "lemma single_path_entry: \"path_entry E [p] w \\<Longrightarrow> p = 0\"", "lemma path_entry_append: \n  \"\\<lbrakk> path_entry E l v; (v,w)\\<in>E \\<rbrakk> \\<Longrightarrow> path_entry E (v#l) w\"", "lemma entry_rtrancl_is_path:\n  assumes \"(0,v) \\<in> E\\<^sup>*\"\n  obtains p where \"path_entry E p v\"", "lemma path_entry_is_trancl: \n  assumes \"path_entry E l v\"\n  and \"l \\<noteq> []\"\n  shows \"(0,v)\\<in>E\\<^sup>+\"", "lemma tail_is_vert: \"(u,v) \\<in> g_E G  \\<Longrightarrow> u \\<in> set (g_V G)\"", "lemma head_is_vert: \"(u,v) \\<in> g_E G  \\<Longrightarrow> v \\<in> set (g_V G)\"", "lemma tail_is_vert2: \"(u,v) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow> u \\<in> set (g_V G)\"", "lemma head_is_vert2: \"(u,v) \\<in> (g_E G)\\<^sup>+  \\<Longrightarrow> v \\<in> set (g_V G)\"", "lemma verts_set: \"set (g_V G) = {0 ..< length (g_V G)}\"", "lemma fin_verts: \"finite (set (g_V G))\"", "lemma zero_in_verts: \"0 \\<in> set (g_V G)\"", "lemma verts_not_empty: \"g_V G \\<noteq> []\"", "lemma len_verts_gt0: \"length (g_V G) > 0\"", "lemma len_verts_gt1: \"length (g_V G) > 1\"", "lemma verts_ge_Suc0 : \"\\<not> [0..<length (g_V G)] = [0]\"", "lemma distinct_verts1: \"distinct [0..<length (g_V G)] \"", "lemma distinct_verts2: \"distinct (g_V G)\"", "lemma single_entry: \"is_singleton (g_V0 G)\"", "lemma entry_is_0: \"the_elem (g_V0 G) = 0\"", "lemma wf_digraph: \"cfg_doms G\"", "lemma path_entry_prepend_conv: \"path_entry (g_E G) p n \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> \\<exists>v. path_entry (g_E G) (tl p) v \\<and> (v, n) \\<in> (g_E G)\"", "lemma path_verts: \"path_entry (g_E G) p n \\<Longrightarrow> n \\<in> set (g_V G)\"", "lemma path_in_verts: \n  assumes \"path_entry (g_E G) l v\"\n    shows \"set l \\<subseteq> set (g_V G)\"", "lemma any_node_exits_path: \n  assumes \"v \\<in> set (g_V G) \"\n    shows \"\\<exists>p. path_entry (g_E G) p v\"", "lemma entry0_path: \"path_entry (g_E G) [] 0\"", "lemma path_entry_reachable: \n  assumes \"path_entry (g_E G) p n\"\n    shows \"reachable n\"", "lemma nin_nodes_reachable: \"n \\<notin> set (g_V G) \\<Longrightarrow> \\<not> reachable n\"", "lemma reachable_path_entry: \"reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n\"", "lemma path_entry_unconc:\n  assumes \"path_entry (g_E G) (la@lb) w\"\n  obtains v where \"path_entry (g_E G) lb v\"", "lemma path_entry_append_conv:\n  \"path_entry (g_E G) (v#l) w \\<longleftrightarrow> (path_entry (g_E G) l v \\<and> (v,w) \\<in> (g_E G))\"", "lemma takeWhileNot_path_entry:\n  assumes \"path_entry E p x\"\n      and \"v \\<in> set p\"\n      and \"takeWhile ((\\<noteq>) v) (rev p) = c\"\n    shows \"path_entry E (rev c) v\"", "lemma path_entry_last: \"path_entry (g_E G) p n \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> last p = 0\"", "lemma path_entry_loop: \n  assumes n_path: \"path_entry (g_E G) p n\"\n      and n:      \"n \\<in> set p \"\n    shows \"\\<exists>p'.   path_entry (g_E G) p' n \\<and> n \\<notin> set p'\"", "lemma path_entry_hd_edge: \n  assumes \"path_entry (g_E G) pa p \"   \n      and \"pa \\<noteq> []\"\n    shows \"(hd pa, p) \\<in> (g_E G)\"", "lemma path_entry_edge: \n  assumes \"pa \\<noteq> [] \"\n      and \"path_entry (g_E G) pa p \"\n    shows \"\\<exists>u\\<in>set pa. (path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u) \\<and> (u,p) \\<in> (g_E G)\"", "lemma succ_in_verts: \"s \\<in> succs n \\<Longrightarrow> {s,n} \\<subseteq> set (g_V G)\"", "lemma succ0_not_nil: \"succs 0 \\<noteq> {}\"", "lemma \"v \\<in> succs u \\<longleftrightarrow> u \\<in> prevs v\"", "lemma succ_edge: \"\\<forall>v \\<in> succs n. (n,v) \\<in> g_E G\"", "lemma prev_edge: \"u \\<in> set (g_V G) \\<Longrightarrow> \\<forall>v \\<in> prevs u. (v, u) \\<in> g_E G\"", "lemma succ_in_G: \"\\<forall>v \\<in> succs n. v \\<in> set (g_V G)\"", "lemma succ_is_subset_of_verts: \"\\<forall>v \\<in> set (g_V G). succs v \\<subseteq> set(g_V G)\"", "lemma fin_succs: \"\\<forall>v \\<in> set (g_V G). finite (succs v)\"", "lemma fin_succs': \"v < length (g_V G) \\<Longrightarrow> finite (succs v)\"", "lemma succ_range: \"\\<forall>v \\<in> succs n. v < length (g_V G)\"", "lemma path_entry_gt: \n  assumes \"\\<forall>p. path_entry E p n \\<longrightarrow> d \\<in> set p\"\n      and \"\\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p\"\n    shows \"\\<forall>p. path_entry E p n' \\<longrightarrow> d \\<in> set p\"", "lemma any_dominate_unreachable: \"\\<not> reachable n \\<Longrightarrow> dominate d n\"", "lemma any_sdominate_unreachable: \"\\<not> reachable n \\<Longrightarrow> strict_dominate d n\"", "lemma dom_reachable: \"reachable n \\<Longrightarrow> dominate d n \\<Longrightarrow> reachable d\"", "lemma dominate_refl: \"dominate n n\"", "lemma entry0_dominates_all: \"\\<forall>p \\<in> set (g_V G). dominate 0 p\"", "lemma \"strict_dominate i j \\<Longrightarrow> j \\<in> set (g_V G) \\<Longrightarrow> i \\<noteq> j\"", "lemma any_sdominate_0: \"n \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate n 0\"", "lemma non_sdominate_succ: \"(i,j ) \\<in> g_E G \\<Longrightarrow> k \\<noteq> i \\<Longrightarrow> non_strict_dominate k i \\<Longrightarrow> non_strict_dominate k j\"", "lemma any_node_non_sdom0: \"non_strict_dominate k 0\"", "lemma nonstrict_eq: \"non_strict_dominate i j \\<Longrightarrow> \\<not> strict_dominate i j\"", "lemma dominate_trans: \n  assumes \"dominate n1 n2\"\n      and \"dominate n2 n3\"\n    shows \"dominate n1 n3\"", "lemma len_takeWhile_lt: \"x \\<in> set xs \\<Longrightarrow> length (takeWhile ((\\<noteq>) x) xs) < length xs\"", "lemma len_takeWhile_comp: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) xs) \\<noteq> length (takeWhile ((\\<noteq>) n2) xs)\"", "lemma len_takeWhile_comp1: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\"", "lemma len_takeWhile_comp2: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<notin> set xs\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\"", "lemma len_compare1: \n  assumes \"n1 = x\" and \"n2 \\<noteq> x\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\"", "lemma len_compare2: \n  assumes \"n1 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\"", "lemma len_takeWhile_set: \n  assumes \"length (takeWhile ((\\<noteq>) n1) xs) > length (takeWhile ((\\<noteq>) n2) xs)\"\n      and \"n1 \\<noteq> n2\"\n      and \"n1 \\<in> set xs\" \n      and \"n2 \\<in> set xs\"\n    shows \"set (takeWhile ((\\<noteq>) n2) xs)  \\<subseteq> set (takeWhile ((\\<noteq>) n1) xs)\"", "lemma reachable_dom_acyclic:\n  assumes \"reachable n2\"\n      and \"dominate n1 n2\"\n      and \"dominate n2 n1\"\n    shows \"n1 = n2\"", "lemma sdom_dom: \"strict_dominate n1 n2 \\<Longrightarrow> dominate n1 n2\"", "lemma dominate_sdominate: \"dominate n1 n2 \\<Longrightarrow> n1 \\<noteq> n2 \\<Longrightarrow> strict_dominate n1 n2\"", "lemma sdom_neq: \n  assumes \"reachable n2\"\n      and \"strict_dominate n1 n2\"\n    shows \"n1 \\<noteq> n2\"", "lemma reachable_dom_acyclic2:\n  assumes \"reachable n2 \"\n      and \"strict_dominate n1 n2\"\n    shows \"\\<not> dominate n2 n1\"", "lemma not_dom_eq_not_sdom: \"\\<not> dominate n1 n2 \\<Longrightarrow> \\<not> strict_dominate n1 n2\"", "lemma reachable_sdom_acyclic:\n  assumes \"reachable n2\"\n      and \"strict_dominate n1 n2\"\n    shows \"\\<not> strict_dominate n2 n1\"", "lemma strict_dominate_trans1: \n  assumes \"strict_dominate n1 n2\" \n      and \"dominate n2 n3\" \n    shows \"strict_dominate n1 n3\"", "lemma strict_dominate_trans2: \n  assumes \"dominate n1 n2\" \n      and \"strict_dominate n2 n3\" \n    shows \"strict_dominate n1 n3\"", "lemma strict_dominate_trans: \n  assumes \"strict_dominate n1 n2\"\n      and \"strict_dominate n2 n3\"\n    shows \"strict_dominate n1 n3\"", "lemma sdominate_dominate_succs: \n  assumes i_sdom_j:    \"strict_dominate i j\"\n      and j_in_succ_k: \"j \\<in> succs k\"\n    shows              \"dominate i k\""], "translations": [["", "lemma path_entry0_empty_conv: \"path_entry E [] v \\<longleftrightarrow> v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry E [] v = (v = 0)", "by (auto intro: path_entry0 elim: path_entry.cases)"], ["", "inductive_cases path_entry_uncons: \"path_entry E (u'#l) w\""], ["", "inductive_simps path_entry_cons_conv: \"path_entry E (u'#l) w\""], ["", "lemma single_path_entry: \"path_entry E [p] w \\<Longrightarrow> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry E [p] w \\<Longrightarrow> p = 0", "by (simp add: path_entry_cons_conv path_entry0_empty_conv)"], ["", "lemma path_entry_append: \n  \"\\<lbrakk> path_entry E l v; (v,w)\\<in>E \\<rbrakk> \\<Longrightarrow> path_entry E (v#l) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry E l v; (v, w) \\<in> E\\<rbrakk>\n    \\<Longrightarrow> path_entry E (v # l) w", "by (rule path_entry_prepend)"], ["", "lemma entry_rtrancl_is_path:\n  assumes \"(0,v) \\<in> E\\<^sup>*\"\n  obtains p where \"path_entry E p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p. path_entry E p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (0, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<And>p. path_entry E p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by induct (auto intro:path_entry0 path_entry_prepend)"], ["", "lemma path_entry_is_trancl: \n  assumes \"path_entry E l v\"\n  and \"l \\<noteq> []\"\n  shows \"(0,v)\\<in>E\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, v) \\<in> E\\<^sup>+", "using assms"], ["proof (prove)\nusing this:\n  path_entry E l v\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. (0, v) \\<in> E\\<^sup>+", "apply induct"], ["proof (prove)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> (0, 0) \\<in> E\\<^sup>+\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> E; path_entry E l u;\n        l \\<noteq> [] \\<Longrightarrow> (0, u) \\<in> E\\<^sup>+;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (0, v) \\<in> E\\<^sup>+", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> E; path_entry E l u;\n        l \\<noteq> [] \\<Longrightarrow> (0, u) \\<in> E\\<^sup>+;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (0, v) \\<in> E\\<^sup>+", "apply (case_tac l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> E; path_entry E l u;\n        l \\<noteq> [] \\<Longrightarrow> (0, u) \\<in> E\\<^sup>+;\n        u # l \\<noteq> []; l = []\\<rbrakk>\n       \\<Longrightarrow> (0, v) \\<in> E\\<^sup>+\n 2. \\<And>u v l a list.\n       \\<lbrakk>(u, v) \\<in> E; path_entry E l u;\n        l \\<noteq> [] \\<Longrightarrow> (0, u) \\<in> E\\<^sup>+;\n        u # l \\<noteq> []; l = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, v) \\<in> E\\<^sup>+", "apply (auto simp add:path_entry0_empty_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tail_is_vert: \"(u,v) \\<in> g_E G  \\<Longrightarrow> u \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> g_E G \\<Longrightarrow> u \\<in> set (g_V G)", "by (auto dest: tail_in_verts[of \"(u,v)\"])"], ["", "lemma head_is_vert: \"(u,v) \\<in> g_E G  \\<Longrightarrow> v \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> g_E G \\<Longrightarrow> v \\<in> set (g_V G)", "by (auto dest: head_in_verts[of \"(u,v)\"])"], ["", "lemma tail_is_vert2: \"(u,v) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow> u \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow> u \\<in> set (g_V G)", "by (induct rule:trancl.induct)(auto dest: tail_in_verts)"], ["", "lemma head_is_vert2: \"(u,v) \\<in> (g_E G)\\<^sup>+  \\<Longrightarrow> v \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow> v \\<in> set (g_V G)", "by (induct rule:trancl.induct)(auto dest: head_in_verts)"], ["", "lemma verts_set: \"set (g_V G) = {0 ..< length (g_V G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "from verts"], ["proof (chain)\npicking this:\n  g_V G = [0..<length (g_V G)]", "have \"set (g_V G) = set [0 ..< (length (g_V G))]\""], ["proof (prove)\nusing this:\n  g_V G = [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. set (g_V G) = set [0..<length (g_V G)]", "by simp"], ["proof (state)\nthis:\n  set (g_V G) = set [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "also"], ["proof (state)\nthis:\n  set (g_V G) = set [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "have \"set [0 ..< (length (g_V G))] = {0 ..< (length (g_V G))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set [0..<length (g_V G)] = {0..<length (g_V G)}", "by simp"], ["proof (state)\nthis:\n  set [0..<length (g_V G)] = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "ultimately"], ["proof (chain)\npicking this:\n  set (g_V G) = set [0..<length (g_V G)]\n  set [0..<length (g_V G)] = {0..<length (g_V G)}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (g_V G) = set [0..<length (g_V G)]\n  set [0..<length (g_V G)] = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. set (g_V G) = {0..<length (g_V G)}", "by auto"], ["proof (state)\nthis:\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fin_verts: \"finite (set (g_V G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (g_V G))", "by (auto)"], ["", "lemma zero_in_verts: \"0 \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> set (g_V G)", "using wf_cfg entry0"], ["proof (prove)\nusing this:\n  wf_cfg G\n  g_V0 G = {0}\n\ngoal (1 subgoal):\n 1. 0 \\<in> set (g_V G)", "by (unfold wf_cfg_def)  auto"], ["", "lemma verts_not_empty: \"g_V G \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g_V G \\<noteq> []", "using zero_in_verts"], ["proof (prove)\nusing this:\n  0 \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. g_V G \\<noteq> []", "by auto"], ["", "lemma len_verts_gt0: \"length (g_V G) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (g_V G)", "by (simp add:verts_not_empty)"], ["", "lemma len_verts_gt1: \"length (g_V G) > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "from succ_of_entry0"], ["proof (chain)\npicking this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0", "obtain s where \"s \\<in> set (g_V G)\" and \"s \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> set (g_V G); s \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using head_is_vert"], ["proof (prove)\nusing this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0\n  (?u, ?v) \\<in> g_E G \\<Longrightarrow> ?v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> set (g_V G); s \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> set (g_V G)\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "with zero_in_verts"], ["proof (chain)\npicking this:\n  0 \\<in> set (g_V G)\n  s \\<in> set (g_V G)\n  s \\<noteq> 0", "have \"{0,s} \\<subseteq> set (g_V G)\" and c: \"card {0, s} > 1\""], ["proof (prove)\nusing this:\n  0 \\<in> set (g_V G)\n  s \\<in> set (g_V G)\n  s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {0, s} \\<subseteq> set (g_V G) &&& 1 < card {0, s}", "by auto"], ["proof (state)\nthis:\n  {0, s} \\<subseteq> set (g_V G)\n  1 < card {0, s}\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "then"], ["proof (chain)\npicking this:\n  {0, s} \\<subseteq> set (g_V G)\n  1 < card {0, s}", "have \"card {0, s} \\<le> card (set (g_V G))\""], ["proof (prove)\nusing this:\n  {0, s} \\<subseteq> set (g_V G)\n  1 < card {0, s}\n\ngoal (1 subgoal):\n 1. card {0, s} \\<le> card (set (g_V G))", "by (auto simp add:card_mono)"], ["proof (state)\nthis:\n  card {0, s} \\<le> card (set (g_V G))\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "with c"], ["proof (chain)\npicking this:\n  1 < card {0, s}\n  card {0, s} \\<le> card (set (g_V G))", "have \"card (set (g_V G)) > 1\""], ["proof (prove)\nusing this:\n  1 < card {0, s}\n  card {0, s} \\<le> card (set (g_V G))\n\ngoal (1 subgoal):\n 1. 1 < card (set (g_V G))", "by simp"], ["proof (state)\nthis:\n  1 < card (set (g_V G))\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "then"], ["proof (chain)\npicking this:\n  1 < card (set (g_V G))", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < card (set (g_V G))\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "using card_length[of \"g_V G\"]"], ["proof (prove)\nusing this:\n  1 < card (set (g_V G))\n  card (set (g_V G)) \\<le> length (g_V G)\n\ngoal (1 subgoal):\n 1. 1 < length (g_V G)", "by auto"], ["proof (state)\nthis:\n  1 < length (g_V G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma verts_ge_Suc0 : \"\\<not> [0..<length (g_V G)] = [0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<length (g_V G)] \\<noteq> [0]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. [0..<length (g_V G)] = [0] \\<Longrightarrow> False", "assume \"[0..<length (g_V G)] = [0]\""], ["proof (state)\nthis:\n  [0..<length (g_V G)] = [0]\n\ngoal (1 subgoal):\n 1. [0..<length (g_V G)] = [0] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  [0..<length (g_V G)] = [0]", "have \"length [0..<length (g_V G)] = 1\""], ["proof (prove)\nusing this:\n  [0..<length (g_V G)] = [0]\n\ngoal (1 subgoal):\n 1. length [0..<length (g_V G)] = 1", "by simp"], ["proof (state)\nthis:\n  length [0..<length (g_V G)] = 1\n\ngoal (1 subgoal):\n 1. [0..<length (g_V G)] = [0] \\<Longrightarrow> False", "with len_verts_gt1"], ["proof (chain)\npicking this:\n  1 < length (g_V G)\n  length [0..<length (g_V G)] = 1", "show False"], ["proof (prove)\nusing this:\n  1 < length (g_V G)\n  length [0..<length (g_V G)] = 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distinct_verts1: \"distinct [0..<length (g_V G)] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct [0..<length (g_V G)]", "by simp"], ["", "lemma distinct_verts2: \"distinct (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (g_V G)", "by (insert distinct_verts1 verts)  simp"], ["", "lemma single_entry: \"is_singleton (g_V0 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_singleton (g_V0 G)", "by (simp add:entry0)"], ["", "lemma entry_is_0: \"the_elem (g_V0 G) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_elem (g_V0 G) = 0", "by (simp add: entry0)"], ["", "lemma wf_digraph: \"cfg_doms G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfg_doms G", "by intro_locales"], ["", "lemma path_entry_prepend_conv: \"path_entry (g_E G) p n \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> \\<exists>v. path_entry (g_E G) (tl p) v \\<and> (v, n) \\<in> (g_E G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         path_entry (g_E G) (tl p) v \\<and>\n                         (v, n) \\<in> g_E G", "proof (induct rule:path_entry.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. path_entry (g_E G) (tl []) v \\<and> (v, 0) \\<in> g_E G\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow>\n        \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            path_entry (g_E G) (tl (u # l)) va \\<and>\n                            (va, v) \\<in> g_E G", "case path_entry0"], ["proof (state)\nthis:\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. path_entry (g_E G) (tl []) v \\<and> (v, 0) \\<in> g_E G\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow>\n        \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            path_entry (g_E G) (tl (u # l)) va \\<and>\n                            (va, v) \\<in> g_E G", "then"], ["proof (chain)\npicking this:\n  [] \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>v. path_entry (g_E G) (tl []) v \\<and> (v, 0) \\<in> g_E G", "by auto"], ["proof (state)\nthis:\n  \\<exists>v. path_entry (g_E G) (tl []) v \\<and> (v, 0) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow>\n        \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            path_entry (g_E G) (tl (u # l)) va \\<and>\n                            (va, v) \\<in> g_E G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow>\n        \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            path_entry (g_E G) (tl (u # l)) va \\<and>\n                            (va, v) \\<in> g_E G", "case (path_entry_prepend u v l)"], ["proof (state)\nthis:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  l \\<noteq> [] \\<Longrightarrow>\n  \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G\n  u # l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow>\n        \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            path_entry (g_E G) (tl (u # l)) va \\<and>\n                            (va, v) \\<in> g_E G", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  l \\<noteq> [] \\<Longrightarrow>\n  \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G\n  u # l \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  l \\<noteq> [] \\<Longrightarrow>\n  \\<exists>v. path_entry (g_E G) (tl l) v \\<and> (v, u) \\<in> g_E G\n  u # l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>va.\n       path_entry (g_E G) (tl (u # l)) va \\<and> (va, v) \\<in> g_E G", "by auto"], ["proof (state)\nthis:\n  \\<exists>va. path_entry (g_E G) (tl (u # l)) va \\<and> (va, v) \\<in> g_E G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_verts: \"path_entry (g_E G) p n \\<Longrightarrow> n \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry (g_E G) p n \\<Longrightarrow> n \\<in> set (g_V G)", "proof (cases \"p = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>path_entry (g_E G) p n; p = []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)\n 2. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "case True"], ["proof (state)\nthis:\n  p = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>path_entry (g_E G) p n; p = []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)\n 2. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "assume \"path_entry (g_E G) p n\" and \"p = []\""], ["proof (state)\nthis:\n  path_entry (g_E G) p n\n  p = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>path_entry (g_E G) p n; p = []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)\n 2. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) p n\n  p = []", "show ?thesis"], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n  p = []\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "by (simp add:path_entry0_empty_conv zero_in_verts)"], ["proof (state)\nthis:\n  n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "assume \"path_entry (g_E G) p n\" and \"p \\<noteq> []\""], ["proof (state)\nthis:\n  path_entry (g_E G) p n\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) p n\n  p \\<noteq> []", "have \"(0,n)\\<in>(g_E G)\\<^sup>+\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. (0, n) \\<in> (g_E G)\\<^sup>+", "by (auto simp add:path_entry_is_trancl)"], ["proof (state)\nthis:\n  (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> n \\<in> set (g_V G)", "then"], ["proof (chain)\npicking this:\n  (0, n) \\<in> (g_E G)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "using head_is_vert2"], ["proof (prove)\nusing this:\n  (0, n) \\<in> (g_E G)\\<^sup>+\n  (?u, ?v) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow> ?v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "by simp"], ["proof (state)\nthis:\n  n \\<in> set (g_V G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_in_verts: \n  assumes \"path_entry (g_E G) l v\"\n    shows \"set l \\<subseteq> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (g_V G)", "using assms"], ["proof (prove)\nusing this:\n  path_entry (g_E G) l v\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (g_V G)", "proof (induct rule:path_entry.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set (g_V G)\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        set l \\<subseteq> set (g_V G)\\<rbrakk>\n       \\<Longrightarrow> set (u # l) \\<subseteq> set (g_V G)", "case path_entry0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set (g_V G)\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        set l \\<subseteq> set (g_V G)\\<rbrakk>\n       \\<Longrightarrow> set (u # l) \\<subseteq> set (g_V G)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [] \\<subseteq> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  set [] \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        set l \\<subseteq> set (g_V G)\\<rbrakk>\n       \\<Longrightarrow> set (u # l) \\<subseteq> set (g_V G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        set l \\<subseteq> set (g_V G)\\<rbrakk>\n       \\<Longrightarrow> set (u # l) \\<subseteq> set (g_V G)", "case (path_entry_prepend u v l)"], ["proof (state)\nthis:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  set l \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        set l \\<subseteq> set (g_V G)\\<rbrakk>\n       \\<Longrightarrow> set (u # l) \\<subseteq> set (g_V G)", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  set l \\<subseteq> set (g_V G)", "show ?case"], ["proof (prove)\nusing this:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  set l \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. set (u # l) \\<subseteq> set (g_V G)", "using path_verts"], ["proof (prove)\nusing this:\n  (u, v) \\<in> g_E G\n  path_entry (g_E G) l u\n  set l \\<subseteq> set (g_V G)\n  path_entry (g_E G) ?p ?n \\<Longrightarrow> ?n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. set (u # l) \\<subseteq> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  set (u # l) \\<subseteq> set (g_V G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma any_node_exits_path: \n  assumes \"v \\<in> set (g_V G) \"\n    shows \"\\<exists>p. path_entry (g_E G) p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p v", "proof (cases \"v = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> set (g_V G); v = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v\n 2. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "assume \"v \\<in> set (g_V G)\" and \"v = 0\""], ["proof (state)\nthis:\n  v \\<in> set (g_V G)\n  v = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> set (g_V G); v = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v\n 2. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "have \"path_entry (g_E G) [] 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry (g_E G) [] 0", "by (auto simp add:path_entry0)"], ["proof (state)\nthis:\n  path_entry (g_E G) [] 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> set (g_V G); v = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v\n 2. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) [] 0", "show ?thesis"], ["proof (prove)\nusing this:\n  path_entry (g_E G) [] 0\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p v", "using `v = 0`"], ["proof (prove)\nusing this:\n  path_entry (g_E G) [] 0\n  v = 0\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p v", "by auto"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "assume \"v \\<in> set (g_V G)\" and \"v \\<noteq> 0\""], ["proof (state)\nthis:\n  v \\<in> set (g_V G)\n  v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "with reachable"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>set (g_V G). v \\<in> (g_E G)\\<^sup>* `` {0}\n  v \\<in> set (g_V G)\n  v \\<noteq> 0", "have \"v \\<in> (g_E G)\\<^sup>* `` {0}\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (g_V G). v \\<in> (g_E G)\\<^sup>* `` {0}\n  v \\<in> set (g_V G)\n  v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v \\<in> (g_E G)\\<^sup>* `` {0}", "by auto"], ["proof (state)\nthis:\n  v \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "then"], ["proof (chain)\npicking this:\n  v \\<in> (g_E G)\\<^sup>* `` {0}", "have \"(0,v) \\<in> (g_E G)\\<^sup>*\""], ["proof (prove)\nusing this:\n  v \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. (0, v) \\<in> (g_E G)\\<^sup>*", "by (simp add:Image_iff)"], ["proof (state)\nthis:\n  (0, v) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> set (g_V G); v \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p v", "then"], ["proof (chain)\npicking this:\n  (0, v) \\<in> (g_E G)\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  (0, v) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p v", "by (auto intro:entry_rtrancl_is_path)"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma entry0_path: \"path_entry (g_E G) [] 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry (g_E G) [] 0", "by (auto simp add:path_entry.path_entry0)"], ["", "definition reachable :: \"node \\<Rightarrow> bool\" \n  where \"reachable v \\<equiv> v \\<in> (g_E G)\\<^sup>* `` {0}\""], ["", "lemma path_entry_reachable: \n  assumes \"path_entry (g_E G) p n\"\n    shows \"reachable n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable n", "using assms reachable"], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n  \\<forall>v\\<in>set (g_V G). v \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. reachable n", "by (fastforce intro:path_verts simp add:reachable_def)"], ["", "lemma nin_nodes_reachable: \"n \\<notin> set (g_V G) \\<Longrightarrow> \\<not> reachable n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> set (g_V G) \\<Longrightarrow> \\<not> reachable n", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"n \\<notin> set (g_V G)\" and nn: \" \\<not> \\<not> reachable n\""], ["proof (state)\nthis:\n  n \\<notin> set (g_V G)\n  \\<not> \\<not> reachable n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "from `n \\<notin> set (g_V G)`"], ["proof (chain)\npicking this:\n  n \\<notin> set (g_V G)", "have \"n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n \\<notin> set (g_V G)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using verts_set len_verts_gt0 entry0"], ["proof (prove)\nusing this:\n  n \\<notin> set (g_V G)\n  set (g_V G) = {0..<length (g_V G)}\n  0 < length (g_V G)\n  g_V0 G = {0}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "from nn"], ["proof (chain)\npicking this:\n  \\<not> \\<not> reachable n", "have \"reachable n\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> reachable n\n\ngoal (1 subgoal):\n 1. reachable n", "by auto"], ["proof (state)\nthis:\n  reachable n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  reachable n", "have \"n \\<in> (g_E G)\\<^sup>* `` {0}\""], ["proof (prove)\nusing this:\n  reachable n\n\ngoal (1 subgoal):\n 1. n \\<in> (g_E G)\\<^sup>* `` {0}", "by (simp add: reachable_def)"], ["proof (state)\nthis:\n  n \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n \\<in> (g_E G)\\<^sup>* `` {0}", "have \" (0, n) \\<in> (g_E G)\\<^sup>* \""], ["proof (prove)\nusing this:\n  n \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. (0, n) \\<in> (g_E G)\\<^sup>*", "by (auto simp add:Image_def)"], ["proof (state)\nthis:\n  (0, n) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "with `n \\<noteq> 0`"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  (0, n) \\<in> (g_E G)\\<^sup>*", "have \"\\<exists>n'. (0,n') \\<in> (g_E G)\\<^sup>* \\<and> (n', n) \\<in> (g_E G)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  (0, n) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>n'. (0, n') \\<in> (g_E G)\\<^sup>* \\<and> (n', n) \\<in> g_E G", "by (auto intro:rtranclE)"], ["proof (state)\nthis:\n  \\<exists>n'. (0, n') \\<in> (g_E G)\\<^sup>* \\<and> (n', n) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'. (0, n') \\<in> (g_E G)\\<^sup>* \\<and> (n', n) \\<in> g_E G", "obtain n' where \"(0,n') \\<in> (g_E G)\\<^sup>* \" and \" (n', n) \\<in> (g_E G)\""], ["proof (prove)\nusing this:\n  \\<exists>n'. (0, n') \\<in> (g_E G)\\<^sup>* \\<and> (n', n) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>(0, n') \\<in> (g_E G)\\<^sup>*; (n', n) \\<in> g_E G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (0, n') \\<in> (g_E G)\\<^sup>*\n  (n', n) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (0, n') \\<in> (g_E G)\\<^sup>*\n  (n', n) \\<in> g_E G", "have \"n \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  (0, n') \\<in> (g_E G)\\<^sup>*\n  (n', n) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "using head_is_vert"], ["proof (prove)\nusing this:\n  (0, n') \\<in> (g_E G)\\<^sup>*\n  (n', n) \\<in> g_E G\n  (?u, ?v) \\<in> g_E G \\<Longrightarrow> ?v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<notin> set (g_V G); \\<not> \\<not> reachable n\\<rbrakk>\n    \\<Longrightarrow> False", "with `n \\<notin> set (g_V G)`"], ["proof (chain)\npicking this:\n  n \\<notin> set (g_V G)\n  n \\<in> set (g_V G)", "show False"], ["proof (prove)\nusing this:\n  n \\<notin> set (g_V G)\n  n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_path_entry: \"reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n", "assume \"reachable n\""], ["proof (state)\nthis:\n  reachable n\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  reachable n", "have \"(0,n) \\<in> (g_E G)\\<^sup>*\""], ["proof (prove)\nusing this:\n  reachable n\n\ngoal (1 subgoal):\n 1. (0, n) \\<in> (g_E G)\\<^sup>*", "by (auto simp add:reachable_def Image_iff)"], ["proof (state)\nthis:\n  (0, n) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  (0, n) \\<in> (g_E G)\\<^sup>*", "have \"0 = n \\<or> 0 \\<noteq> n \\<and> (0,n) \\<in> (g_E G)\\<^sup>+\""], ["proof (prove)\nusing this:\n  (0, n) \\<in> (g_E G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. 0 = n \\<or> 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+", "by (auto simp add: rtrancl_eq_or_trancl)"], ["proof (state)\nthis:\n  0 = n \\<or> 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  0 = n \\<or> 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  0 = n \\<or> 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 = n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n\n 2. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "assume \"0 = n\""], ["proof (state)\nthis:\n  0 = n\n\ngoal (2 subgoals):\n 1. 0 = n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n\n 2. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "have \"path_entry (g_E G) [] 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry (g_E G) [] 0", "by (simp add:path_entry0)"], ["proof (state)\nthis:\n  path_entry (g_E G) [] 0\n\ngoal (2 subgoals):\n 1. 0 = n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p n\n 2. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "with `0 = n`"], ["proof (chain)\npicking this:\n  0 = n\n  path_entry (g_E G) [] 0", "show ?thesis"], ["proof (prove)\nusing this:\n  0 = n\n  path_entry (g_E G) [] 0\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p n", "by auto"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "assume \"0 \\<noteq> n \\<and> (0,n) \\<in> (g_E G)\\<^sup>+\""], ["proof (state)\nthis:\n  0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+", "have \"(0,n) \\<in> (g_E G)\\<^sup>+\""], ["proof (prove)\nusing this:\n  0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (0, n) \\<in> (g_E G)\\<^sup>+", "by (auto simp add:rtranclpD)"], ["proof (state)\nthis:\n  (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  (0, n) \\<in> (g_E G)\\<^sup>+", "have \"n \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  (0, n) \\<in> (g_E G)\\<^sup>+\n\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G)", "by (simp add:head_is_vert2)"], ["proof (state)\nthis:\n  n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> n \\<and> (0, n) \\<in> (g_E G)\\<^sup>+ \\<Longrightarrow>\n    \\<exists>p. path_entry (g_E G) p n", "then"], ["proof (chain)\npicking this:\n  n \\<in> set (g_V G)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p n", "by (rule any_node_exits_path)"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_entry_unconc:\n  assumes \"path_entry (g_E G) (la@lb) w\"\n  obtains v where \"path_entry (g_E G) lb v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        path_entry (g_E G) lb v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (la @ lb) w\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        path_entry (g_E G) lb v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (induct \"la@lb\" w arbitrary:la lb rule: path_entry.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la lb.\n       \\<lbrakk>[] = la @ lb;\n        \\<And>v. path_entry (g_E G) lb v \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>u v l la lb.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        \\<And>la lb.\n           \\<lbrakk>l = la @ lb;\n            \\<And>v.\n               path_entry (g_E G) lb v \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        u # l = la @ lb;\n        \\<And>v. path_entry (g_E G) lb v \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (fastforce intro:path_entry.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v l la lb.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        \\<And>la lb.\n           \\<lbrakk>l = la @ lb;\n            \\<And>v.\n               path_entry (g_E G) lb v \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        u # l = la @ lb;\n        \\<And>v. path_entry (g_E G) lb v \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto intro:path_entry.intros iff add: Cons_eq_append_conv)"], ["", "lemma path_entry_append_conv:\n  \"path_entry (g_E G) (v#l) w \\<longleftrightarrow> (path_entry (g_E G) l v \\<and> (v,w) \\<in> (g_E G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry (g_E G) (v # l) w =\n    (path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. path_entry (g_E G) (v # l) w \\<Longrightarrow>\n    path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\n 2. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G \\<Longrightarrow>\n    path_entry (g_E G) (v # l) w", "assume \"path_entry (g_E G) (v # l) w \""], ["proof (state)\nthis:\n  path_entry (g_E G) (v # l) w\n\ngoal (2 subgoals):\n 1. path_entry (g_E G) (v # l) w \\<Longrightarrow>\n    path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\n 2. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G \\<Longrightarrow>\n    path_entry (g_E G) (v # l) w", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) (v # l) w", "show \"path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) (v # l) w\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G", "by (auto simp add:path_entry_cons_conv)"], ["proof (state)\nthis:\n  path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G \\<Longrightarrow>\n    path_entry (g_E G) (v # l) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G \\<Longrightarrow>\n    path_entry (g_E G) (v # l) w", "assume \"path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\""], ["proof (state)\nthis:\n  path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G \\<Longrightarrow>\n    path_entry (g_E G) (v # l) w", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G", "show \"path_entry (g_E G) (v # l) w \""], ["proof (prove)\nusing this:\n  path_entry (g_E G) l v \\<and> (v, w) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (v # l) w", "by (fastforce intro: path_entry_append)"], ["proof (state)\nthis:\n  path_entry (g_E G) (v # l) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma takeWhileNot_path_entry:\n  assumes \"path_entry E p x\"\n      and \"v \\<in> set p\"\n      and \"takeWhile ((\\<noteq>) v) (rev p) = c\"\n    shows \"path_entry E (rev c) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "using assms"], ["proof (prove)\nusing this:\n  path_entry E p x\n  v \\<in> set p\n  takeWhile ((\\<noteq>) v) (rev p) = c\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "proof (induct rule: path_entry.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> set []; takeWhile ((\\<noteq>) v) (rev []) = c\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<And>u va l.\n       \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n        \\<lbrakk>v \\<in> set l;\n         takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n        \\<Longrightarrow> path_entry E (rev c) v;\n        v \\<in> set (u # l);\n        takeWhile ((\\<noteq>) v) (rev (u # l)) = c\\<rbrakk>\n       \\<Longrightarrow> path_entry E (rev c) v", "case path_entry0"], ["proof (state)\nthis:\n  v \\<in> set []\n  takeWhile ((\\<noteq>) v) (rev []) = c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> set []; takeWhile ((\\<noteq>) v) (rev []) = c\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<And>u va l.\n       \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n        \\<lbrakk>v \\<in> set l;\n         takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n        \\<Longrightarrow> path_entry E (rev c) v;\n        v \\<in> set (u # l);\n        takeWhile ((\\<noteq>) v) (rev (u # l)) = c\\<rbrakk>\n       \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> set []\n  takeWhile ((\\<noteq>) v) (rev []) = c", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> set []\n  takeWhile ((\\<noteq>) v) (rev []) = c\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "by auto"], ["proof (state)\nthis:\n  path_entry E (rev c) v\n\ngoal (1 subgoal):\n 1. \\<And>u va l.\n       \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n        \\<lbrakk>v \\<in> set l;\n         takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n        \\<Longrightarrow> path_entry E (rev c) v;\n        v \\<in> set (u # l);\n        takeWhile ((\\<noteq>) v) (rev (u # l)) = c\\<rbrakk>\n       \\<Longrightarrow> path_entry E (rev c) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u va l.\n       \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n        \\<lbrakk>v \\<in> set l;\n         takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n        \\<Longrightarrow> path_entry E (rev c) v;\n        v \\<in> set (u # l);\n        takeWhile ((\\<noteq>) v) (rev (u # l)) = c\\<rbrakk>\n       \\<Longrightarrow> path_entry E (rev c) v", "case (path_entry_prepend u va l)"], ["proof (state)\nthis:\n  (u, va) \\<in> E\n  path_entry E l u\n  \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n  \\<Longrightarrow> path_entry E (rev c) v\n  v \\<in> set (u # l)\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c\n\ngoal (1 subgoal):\n 1. \\<And>u va l.\n       \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n        \\<lbrakk>v \\<in> set l;\n         takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n        \\<Longrightarrow> path_entry E (rev c) v;\n        v \\<in> set (u # l);\n        takeWhile ((\\<noteq>) v) (rev (u # l)) = c\\<rbrakk>\n       \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  (u, va) \\<in> E\n  path_entry E l u\n  \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n  \\<Longrightarrow> path_entry E (rev c) v\n  v \\<in> set (u # l)\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c", "show ?case"], ["proof (prove)\nusing this:\n  (u, va) \\<in> E\n  path_entry E l u\n  \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n  \\<Longrightarrow> path_entry E (rev c) v\n  v \\<in> set (u # l)\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "proof(cases \"v \\<in> set l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<in> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "case True"], ["proof (state)\nthis:\n  v \\<in> set l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<in> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "note v_in = this"], ["proof (state)\nthis:\n  v \\<in> set l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<in> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> set l", "have \"takeWhile ((\\<noteq>) v) (rev (u # l)) = takeWhile ((\\<noteq>) v) (rev l)\""], ["proof (prove)\nusing this:\n  v \\<in> set l\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) v) (rev (u # l)) =\n    takeWhile ((\\<noteq>) v) (rev l)", "by auto"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = takeWhile ((\\<noteq>) v) (rev l)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<in> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "with path_entry_prepend.prems(2)"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = takeWhile ((\\<noteq>) v) (rev l)", "have \"takeWhile ((\\<noteq>) v) (rev l) = c\""], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = takeWhile ((\\<noteq>) v) (rev l)\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) v) (rev l) = c", "by simp"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) v) (rev l) = c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<in> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v\n 2. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "with v_in"], ["proof (chain)\npicking this:\n  v \\<in> set l\n  takeWhile ((\\<noteq>) v) (rev l) = c", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> set l\n  takeWhile ((\\<noteq>) v) (rev l) = c\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "using path_entry_prepend.hyps(3)"], ["proof (prove)\nusing this:\n  v \\<in> set l\n  takeWhile ((\\<noteq>) v) (rev l) = c\n  \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n  \\<Longrightarrow> path_entry E (rev c) v\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "by auto"], ["proof (state)\nthis:\n  path_entry E (rev c) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> set l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "note v_nin = this"], ["proof (state)\nthis:\n  v \\<notin> set l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "with path_entry_prepend.prems(1)"], ["proof (chain)\npicking this:\n  v \\<in> set (u # l)\n  v \\<notin> set l", "have v_u: \"v = u\""], ["proof (prove)\nusing this:\n  v \\<in> set (u # l)\n  v \\<notin> set l\n\ngoal (1 subgoal):\n 1. v = u", "by auto"], ["proof (state)\nthis:\n  v = u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  v = u", "have take_eq: \"takeWhile ((\\<noteq>) v) (rev (u # l)) = takeWhile ((\\<noteq>) v) ((rev l) @ [u])\""], ["proof (prove)\nusing this:\n  v = u\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) v) (rev (u # l)) =\n    takeWhile ((\\<noteq>) v) (rev l @ [u])", "by auto"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) =\n  takeWhile ((\\<noteq>) v) (rev l @ [u])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "from v_nin"], ["proof (chain)\npicking this:\n  v \\<notin> set l", "have \"\\<And>x. x \\<in> set (rev l) \\<Longrightarrow> ((\\<noteq>) v) x\""], ["proof (prove)\nusing this:\n  v \\<notin> set l\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (rev l) \\<Longrightarrow> v \\<noteq> x", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> set (rev l) \\<Longrightarrow> v \\<noteq> ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (rev l) \\<Longrightarrow> v \\<noteq> ?x", "have \"takeWhile ((\\<noteq>) v) ((rev l) @ [u]) = (rev l) @ takeWhile ((\\<noteq>) v) [u]\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (rev l) \\<Longrightarrow> v \\<noteq> ?x\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) v) (rev l @ [u]) =\n    rev l @ takeWhile ((\\<noteq>) v) [u]", "by (rule takeWhile_append2) simp"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) v) (rev l @ [u]) =\n  rev l @ takeWhile ((\\<noteq>) v) [u]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "with v_u take_eq"], ["proof (chain)\npicking this:\n  v = u\n  takeWhile ((\\<noteq>) v) (rev (u # l)) =\n  takeWhile ((\\<noteq>) v) (rev l @ [u])\n  takeWhile ((\\<noteq>) v) (rev l @ [u]) =\n  rev l @ takeWhile ((\\<noteq>) v) [u]", "have \"takeWhile ((\\<noteq>) v) (rev (u # l)) = (rev l)\""], ["proof (prove)\nusing this:\n  v = u\n  takeWhile ((\\<noteq>) v) (rev (u # l)) =\n  takeWhile ((\\<noteq>) v) (rev l @ [u])\n  takeWhile ((\\<noteq>) v) (rev l @ [u]) =\n  rev l @ takeWhile ((\\<noteq>) v) [u]\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) v) (rev (u # l)) = rev l", "by simp"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = rev l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, va) \\<in> E; path_entry E l u;\n     \\<lbrakk>v \\<in> set l; takeWhile ((\\<noteq>) v) (rev l) = c\\<rbrakk>\n     \\<Longrightarrow> path_entry E (rev c) v;\n     v \\<in> set (u # l); takeWhile ((\\<noteq>) v) (rev (u # l)) = c;\n     v \\<notin> set l\\<rbrakk>\n    \\<Longrightarrow> path_entry E (rev c) v", "then"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = rev l", "show ?thesis"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = rev l\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "using path_entry_prepend.prems(2) path_entry_prepend.hyps(2) v_u"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = rev l\n  takeWhile ((\\<noteq>) v) (rev (u # l)) = c\n  path_entry E l u\n  v = u\n\ngoal (1 subgoal):\n 1. path_entry E (rev c) v", "by auto"], ["proof (state)\nthis:\n  path_entry E (rev c) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_entry E (rev c) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_entry_last: \"path_entry (g_E G) p n \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> last p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last p = 0", "apply (induct rule: path_entry.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> last [] = 0\n 2. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow> last l = 0;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> last (u # l) = 0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        l \\<noteq> [] \\<Longrightarrow> last l = 0;\n        u # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> last (u # l) = 0", "apply (simp add: path_entry_cons_conv neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v l.\n       \\<lbrakk>(u, v) \\<in> g_E G; path_entry (g_E G) l u;\n        \\<exists>y ys. l = y # ys \\<Longrightarrow> last l = 0\\<rbrakk>\n       \\<Longrightarrow> l = [] \\<longrightarrow> u = 0", "apply (auto simp add:path_entry0_empty_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma path_entry_loop: \n  assumes n_path: \"path_entry (g_E G) p n\"\n      and n:      \"n \\<in> set p \"\n    shows \"\\<exists>p'.   path_entry (g_E G) p' n \\<and> n \\<notin> set p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p'. path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "using assms"], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n  n \\<in> set p\n\ngoal (1 subgoal):\n 1. \\<exists>p'. path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "let ?c = \"takeWhile ((\\<noteq>) n) (rev ( p))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "have \"\\<forall>z \\<in> set ?c. z \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>set (takeWhile ((\\<noteq>) n) (rev p)). z \\<noteq> n", "by (auto dest: set_takeWhileD)"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set (takeWhile ((\\<noteq>) n) (rev p)). z \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "then"], ["proof (chain)\npicking this:\n  \\<forall>z\\<in>set (takeWhile ((\\<noteq>) n) (rev p)). z \\<noteq> n", "have n_nin: \"n \\<notin> set (rev ?c)\""], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set (takeWhile ((\\<noteq>) n) (rev p)). z \\<noteq> n\n\ngoal (1 subgoal):\n 1. n \\<notin> set (rev (takeWhile ((\\<noteq>) n) (rev p)))", "by auto"], ["proof (state)\nthis:\n  n \\<notin> set (rev (takeWhile ((\\<noteq>) n) (rev p)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "from n_path"], ["proof (chain)\npicking this:\n  path_entry (g_E G) p n", "obtain v where \"path_entry (g_E G) ( p) v\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        path_entry (g_E G) p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path_entry_prepend_conv"], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n  \\<lbrakk>path_entry (g_E G) ?p ?n; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       path_entry (g_E G) (tl ?p) v \\<and>\n                       (v, ?n) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        path_entry (g_E G) p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) p v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "with n"], ["proof (chain)\npicking this:\n  n \\<in> set p\n  path_entry (g_E G) p v", "have \"path_entry (g_E G) (rev ?c) n\""], ["proof (prove)\nusing this:\n  n \\<in> set p\n  path_entry (g_E G) p v\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n) (rev p))) n", "by (auto intro:takeWhileNot_path_entry)"], ["proof (state)\nthis:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n) (rev p))) n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>path_entry (g_E G) p n; n \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p'.\n                         path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "with n_nin"], ["proof (chain)\npicking this:\n  n \\<notin> set (rev (takeWhile ((\\<noteq>) n) (rev p)))\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n) (rev p))) n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<notin> set (rev (takeWhile ((\\<noteq>) n) (rev p)))\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n) (rev p))) n\n\ngoal (1 subgoal):\n 1. \\<exists>p'. path_entry (g_E G) p' n \\<and> n \\<notin> set p'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>p'. path_entry (g_E G) p' n \\<and> n \\<notin> set p'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_entry_hd_edge: \n  assumes \"path_entry (g_E G) pa p \"   \n      and \"pa \\<noteq> []\"\n    shows \"(hd pa, p) \\<in> (g_E G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (hd pa, p) \\<in> g_E G", "using assms"], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa p\n  pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. (hd pa, p) \\<in> g_E G", "by (induct rule: path_entry.induct) auto"], ["", "lemma path_entry_edge: \n  assumes \"pa \\<noteq> [] \"\n      and \"path_entry (g_E G) pa p \"\n    shows \"\\<exists>u\\<in>set pa. (path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u) \\<and> (u,p) \\<in> (g_E G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>set pa.\n       path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n       (u, p) \\<in> g_E G", "using assms"], ["proof (prove)\nusing this:\n  pa \\<noteq> []\n  path_entry (g_E G) pa p\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>set pa.\n       path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n       (u, p) \\<in> g_E G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>pa \\<noteq> []; path_entry (g_E G) pa p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>set pa.\n                         path_entry (g_E G)\n                          (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n                         (u, p) \\<in> g_E G", "from assms"], ["proof (chain)\npicking this:\n  pa \\<noteq> []\n  path_entry (g_E G) pa p", "have 1: \"path_entry (g_E G) (rev (takeWhile ((\\<noteq>) (hd pa)) (rev pa))) (hd pa)\""], ["proof (prove)\nusing this:\n  pa \\<noteq> []\n  path_entry (g_E G) pa p\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) (hd pa)) (rev pa)))\n     (hd pa)", "by (auto intro:takeWhileNot_path_entry)"], ["proof (state)\nthis:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) (hd pa)) (rev pa))) (hd pa)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pa \\<noteq> []; path_entry (g_E G) pa p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>set pa.\n                         path_entry (g_E G)\n                          (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n                         (u, p) \\<in> g_E G", "from assms"], ["proof (chain)\npicking this:\n  pa \\<noteq> []\n  path_entry (g_E G) pa p", "have 2: \"(hd pa, p)\\<in> (g_E G)\""], ["proof (prove)\nusing this:\n  pa \\<noteq> []\n  path_entry (g_E G) pa p\n\ngoal (1 subgoal):\n 1. (hd pa, p) \\<in> g_E G", "by (auto intro: path_entry_hd_edge)"], ["proof (state)\nthis:\n  (hd pa, p) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pa \\<noteq> []; path_entry (g_E G) pa p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>set pa.\n                         path_entry (g_E G)\n                          (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n                         (u, p) \\<in> g_E G", "have \"hd pa \\<in> set pa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd pa \\<in> set pa", "using assms(1)"], ["proof (prove)\nusing this:\n  pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd pa \\<in> set pa", "by auto"], ["proof (state)\nthis:\n  hd pa \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pa \\<noteq> []; path_entry (g_E G) pa p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>set pa.\n                         path_entry (g_E G)\n                          (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n                         (u, p) \\<in> g_E G", "with 1 2"], ["proof (chain)\npicking this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) (hd pa)) (rev pa))) (hd pa)\n  (hd pa, p) \\<in> g_E G\n  hd pa \\<in> set pa", "show ?thesis"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) (hd pa)) (rev pa))) (hd pa)\n  (hd pa, p) \\<in> g_E G\n  hd pa \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>set pa.\n       path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n       (u, p) \\<in> g_E G", "by auto"], ["proof (state)\nthis:\n  \\<exists>u\\<in>set pa.\n     path_entry (g_E G) (rev (takeWhile ((\\<noteq>) u) (rev pa))) u \\<and>\n     (u, p) \\<in> g_E G\n\ngoal:\nNo subgoals!", "qed"], ["", "definition is_tail :: \"node \\<Rightarrow> node \\<times> node \\<Rightarrow> bool\"\n  where \"is_tail v e = (v = tail G e)\""], ["", "definition is_head :: \"node \\<Rightarrow> node \\<times> node \\<Rightarrow> bool\"\n  where \"is_head v e = (v = head G e)\""], ["", "definition succs:: \"node \\<Rightarrow> node set\"\n  where \"succs v = (g_E G) `` {v}\""], ["", "lemma succ_in_verts: \"s \\<in> succs n \\<Longrightarrow> {s,n} \\<subseteq> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> succs n \\<Longrightarrow> {s, n} \\<subseteq> set (g_V G)", "by( simp add:succs_def tail_is_vert head_is_vert)"], ["", "lemma succ0_not_nil: \"succs 0 \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succs 0 \\<noteq> {}", "using succ_of_entry0"], ["proof (prove)\nusing this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. succs 0 \\<noteq> {}", "by (auto simp add:succs_def)"], ["", "definition prevs:: \"node \\<Rightarrow> node set\" where\n  \"prevs v = (converse (g_E G))`` {v}\""], ["", "lemma \"v \\<in> succs u \\<longleftrightarrow> u \\<in> prevs v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> succs u) = (u \\<in> prevs v)", "by (auto simp add:succs_def prevs_def)"], ["", "lemma succ_edge: \"\\<forall>v \\<in> succs n. (n,v) \\<in> g_E G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>succs n. (n, v) \\<in> g_E G", "by (auto simp add:succs_def)"], ["", "lemma prev_edge: \"u \\<in> set (g_V G) \\<Longrightarrow> \\<forall>v \\<in> prevs u. (v, u) \\<in> g_E G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> set (g_V G) \\<Longrightarrow>\n    \\<forall>v\\<in>prevs u. (v, u) \\<in> g_E G", "by (auto simp add:prevs_def)"], ["", "lemma succ_in_G: \"\\<forall>v \\<in> succs n. v \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>succs n. v \\<in> set (g_V G)", "by (auto simp add: succs_def dest:head_in_verts)"], ["", "lemma succ_is_subset_of_verts: \"\\<forall>v \\<in> set (g_V G). succs v \\<subseteq> set(g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set (g_V G). succs v \\<subseteq> set (g_V G)", "by (insert succ_in_G) auto"], ["", "lemma fin_succs: \"\\<forall>v \\<in> set (g_V G). finite (succs v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set (g_V G). finite (succs v)", "by (insert succ_is_subset_of_verts) (auto intro:rev_finite_subset)"], ["", "lemma fin_succs': \"v < length (g_V G) \\<Longrightarrow> finite (succs v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v < length (g_V G) \\<Longrightarrow> finite (succs v)", "by (subgoal_tac \"v \\<in> set (g_V G)\")\n   (auto simp add: fin_succs verts_set)"], ["", "lemma succ_range: \"\\<forall>v \\<in> succs n. v < length (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>succs n. v < length (g_V G)", "by (insert succ_in_G verts_set) auto"], ["", "lemma path_entry_gt: \n  assumes \"\\<forall>p. path_entry E p n \\<longrightarrow> d \\<in> set p\"\n      and \"\\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p\"\n    shows \"\\<forall>p. path_entry E p n' \\<longrightarrow> d \\<in> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. path_entry E p n' \\<longrightarrow> d \\<in> set p", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>p. path_entry E p n \\<longrightarrow> d \\<in> set p\n  \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p\n\ngoal (1 subgoal):\n 1. \\<forall>p. path_entry E p n' \\<longrightarrow> d \\<in> set p", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "let ?npath = \"takeWhile ((\\<noteq>) n) (rev p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "have sub: \"set ?npath \\<subseteq> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n) (rev p)) \\<subseteq> set p", "apply (induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (takeWhile ((\\<noteq>) n) (rev [])) \\<subseteq> set []\n 2. \\<And>a p.\n       set (takeWhile ((\\<noteq>) n) (rev p))\n       \\<subseteq> set p \\<Longrightarrow>\n       set (takeWhile ((\\<noteq>) n) (rev (a # p))) \\<subseteq> set (a # p)", "by (auto dest:set_takeWhileD)"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n) (rev p)) \\<subseteq> set p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "assume ass: \"path_entry E p n' \""], ["proof (state)\nthis:\n  path_entry E p n'\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p\n  path_entry E p n'", "have n_in_p: \"n \\<in> set p\""], ["proof (prove)\nusing this:\n  \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p\n  path_entry E p n'\n\ngoal (1 subgoal):\n 1. n \\<in> set p", "by auto"], ["proof (state)\nthis:\n  n \\<in> set p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "then"], ["proof (chain)\npicking this:\n  n \\<in> set p", "have \"n \\<in> set (rev p)\""], ["proof (prove)\nusing this:\n  n \\<in> set p\n\ngoal (1 subgoal):\n 1. n \\<in> set (rev p)", "by auto"], ["proof (state)\nthis:\n  n \\<in> set (rev p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "with ass"], ["proof (chain)\npicking this:\n  path_entry E p n'\n  n \\<in> set (rev p)", "have \"path_entry E (rev ?npath) n\""], ["proof (prove)\nusing this:\n  path_entry E p n'\n  n \\<in> set (rev p)\n\ngoal (1 subgoal):\n 1. path_entry E (rev (takeWhile ((\\<noteq>) n) (rev p))) n", "using takeWhileNot_path_entry"], ["proof (prove)\nusing this:\n  path_entry E p n'\n  n \\<in> set (rev p)\n  \\<lbrakk>path_entry ?E ?p ?x; ?v \\<in> set ?p;\n   takeWhile ((\\<noteq>) ?v) (rev ?p) = ?c\\<rbrakk>\n  \\<Longrightarrow> path_entry ?E (rev ?c) ?v\n\ngoal (1 subgoal):\n 1. path_entry E (rev (takeWhile ((\\<noteq>) n) (rev p))) n", "by auto"], ["proof (state)\nthis:\n  path_entry E (rev (takeWhile ((\\<noteq>) n) (rev p))) n\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "with assms(1)"], ["proof (chain)\npicking this:\n  \\<forall>p. path_entry E p n \\<longrightarrow> d \\<in> set p\n  path_entry E (rev (takeWhile ((\\<noteq>) n) (rev p))) n", "have \"d \\<in> set ?npath\""], ["proof (prove)\nusing this:\n  \\<forall>p. path_entry E p n \\<longrightarrow> d \\<in> set p\n  path_entry E (rev (takeWhile ((\\<noteq>) n) (rev p))) n\n\ngoal (1 subgoal):\n 1. d \\<in> set (takeWhile ((\\<noteq>) n) (rev p))", "by fastforce"], ["proof (state)\nthis:\n  d \\<in> set (takeWhile ((\\<noteq>) n) (rev p))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   path_entry E p n \\<longrightarrow> d \\<in> set p;\n        \\<forall>p. path_entry E p n' \\<longrightarrow> n \\<in> set p;\n        path_entry E p n'\\<rbrakk>\n       \\<Longrightarrow> d \\<in> set p", "with sub"], ["proof (chain)\npicking this:\n  set (takeWhile ((\\<noteq>) n) (rev p)) \\<subseteq> set p\n  d \\<in> set (takeWhile ((\\<noteq>) n) (rev p))", "show \"d \\<in> set p\""], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n) (rev p)) \\<subseteq> set p\n  d \\<in> set (takeWhile ((\\<noteq>) n) (rev p))\n\ngoal (1 subgoal):\n 1. d \\<in> set p", "by auto"], ["proof (state)\nthis:\n  d \\<in> set p\n\ngoal:\nNo subgoals!", "qed"], ["", "definition dominate :: \"nat \\<Rightarrow> nat \\<Rightarrow> bool\" \n  where \"dominate n1 n2 \\<equiv>\n         \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> \n         (n1 \\<in> set pa \\<or> n1 = n2)\""], ["", "definition strict_dominate:: \"nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"strict_dominate n1 n2 \\<equiv> \n   \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> \n   (n1 \\<in> set pa \\<and> n1 \\<noteq> n2)\""], ["", "lemma any_dominate_unreachable: \"\\<not> reachable n \\<Longrightarrow> dominate d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> reachable n \\<Longrightarrow> dominate d n", "proof(unfold reachable_def dominate_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n", "assume ass: \"n \\<notin> (g_E G)\\<^sup>* `` {0}\""], ["proof (state)\nthis:\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n", "have \"\\<not> (\\<exists>p. path_entry (g_E G) p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>p. path_entry (g_E G) p n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "assume \" \\<not> (\\<not> (\\<exists>p. path_entry (g_E G) p n))\""], ["proof (state)\nthis:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)", "obtain p where p: \"path_entry (g_E G) p n\""], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        path_entry (g_E G) p n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) p n", "have \"n = 0 \\<or> reachable n\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> reachable n", "by (auto intro:path_entry_reachable)"], ["proof (state)\nthis:\n  n = 0 \\<or> reachable n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n = 0 \\<or> reachable n", "show False"], ["proof (prove)\nusing this:\n  n = 0 \\<or> reachable n\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> False\n 2. reachable n \\<Longrightarrow> False", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> False\n 2. reachable n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n = 0", "show False"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. False", "using ass"], ["proof (prove)\nusing this:\n  n = 0\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "assume \"reachable n\""], ["proof (state)\nthis:\n  reachable n\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  reachable n", "show False"], ["proof (prove)\nusing this:\n  reachable n\n\ngoal (1 subgoal):\n 1. False", "using ass"], ["proof (prove)\nusing this:\n  reachable n\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add:reachable_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n", "then"], ["proof (chain)\npicking this:\n  \\<nexists>p. path_entry (g_E G) p n", "show \"\\<forall>pa. path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n\""], ["proof (prove)\nusing this:\n  \\<nexists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n", "by auto"], ["proof (state)\nthis:\n  \\<forall>pa.\n     path_entry (g_E G) pa n \\<longrightarrow> d \\<in> set pa \\<or> d = n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma any_sdominate_unreachable: \"\\<not> reachable n \\<Longrightarrow> strict_dominate d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> reachable n \\<Longrightarrow> strict_dominate d n", "proof(unfold reachable_def strict_dominate_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow>\n       d \\<in> set pa \\<and> d \\<noteq> n", "assume ass:\"n \\<notin> (g_E G)\\<^sup>* `` {0} \""], ["proof (state)\nthis:\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow>\n       d \\<in> set pa \\<and> d \\<noteq> n", "have \"\\<not> (\\<exists>p. path_entry (g_E G)  p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>p. path_entry (g_E G) p n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "assume \" \\<not> (\\<not> (\\<exists>p. path_entry (g_E G) p n))\""], ["proof (state)\nthis:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)", "obtain p where p: \"path_entry (g_E G) p n\""], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>p. path_entry (g_E G) p n)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        path_entry (g_E G) p n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) p n", "have \"n = 0 \\<or> reachable n\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> reachable n", "by (auto intro:path_entry_reachable)"], ["proof (state)\nthis:\n  n = 0 \\<or> reachable n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>p. path_entry (g_E G) p n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n = 0 \\<or> reachable n", "show False"], ["proof (prove)\nusing this:\n  n = 0 \\<or> reachable n\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> False\n 2. reachable n \\<Longrightarrow> False", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> False\n 2. reachable n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n = 0", "show False"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. False", "using ass"], ["proof (prove)\nusing this:\n  n = 0\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "assume \"reachable n\""], ["proof (state)\nthis:\n  reachable n\n\ngoal (1 subgoal):\n 1. reachable n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  reachable n", "show False"], ["proof (prove)\nusing this:\n  reachable n\n\ngoal (1 subgoal):\n 1. False", "using ass"], ["proof (prove)\nusing this:\n  reachable n\n  n \\<notin> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add:reachable_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. n \\<notin> (g_E G)\\<^sup>* `` {0} \\<Longrightarrow>\n    \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow>\n       d \\<in> set pa \\<and> d \\<noteq> n", "then"], ["proof (chain)\npicking this:\n  \\<nexists>p. path_entry (g_E G) p n", "show \"\\<forall>pa. path_entry (g_E G)  pa n \\<longrightarrow> d \\<in> set pa \\<and> d \\<noteq> n\""], ["proof (prove)\nusing this:\n  \\<nexists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa n \\<longrightarrow>\n       d \\<in> set pa \\<and> d \\<noteq> n", "by auto"], ["proof (state)\nthis:\n  \\<forall>pa.\n     path_entry (g_E G) pa n \\<longrightarrow>\n     d \\<in> set pa \\<and> d \\<noteq> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dom_reachable: \"reachable n \\<Longrightarrow> dominate d n \\<Longrightarrow> reachable d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n; dominate d n\\<rbrakk>\n    \\<Longrightarrow> reachable d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n; dominate d n\\<rbrakk>\n    \\<Longrightarrow> reachable d", "assume reach_n: \"reachable n\"\n     and dom_n: \"dominate d n\""], ["proof (state)\nthis:\n  reachable n\n  dominate d n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n; dominate d n\\<rbrakk>\n    \\<Longrightarrow> reachable d", "from reach_n"], ["proof (chain)\npicking this:\n  reachable n", "have \"\\<exists>p. path_entry (g_E G)  p n\""], ["proof (prove)\nusing this:\n  reachable n\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p n", "by (rule reachable_path_entry)"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n; dominate d n\\<rbrakk>\n    \\<Longrightarrow> reachable d", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. path_entry (g_E G) p n", "obtain p where p: \"path_entry (g_E G) p n\""], ["proof (prove)\nusing this:\n  \\<exists>p. path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        path_entry (g_E G) p n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n; dominate d n\\<rbrakk>\n    \\<Longrightarrow> reachable d", "show \"reachable d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable d", "proof (cases \"d \\<noteq> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d \\<noteq> n \\<Longrightarrow> reachable d\n 2. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "case True"], ["proof (state)\nthis:\n  d \\<noteq> n\n\ngoal (2 subgoals):\n 1. d \\<noteq> n \\<Longrightarrow> reachable d\n 2. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "with dom_n p"], ["proof (chain)\npicking this:\n  dominate d n\n  path_entry (g_E G) p n\n  d \\<noteq> n", "have d_in: \"d \\<in> set p\""], ["proof (prove)\nusing this:\n  dominate d n\n  path_entry (g_E G) p n\n  d \\<noteq> n\n\ngoal (1 subgoal):\n 1. d \\<in> set p", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  d \\<in> set p\n\ngoal (2 subgoals):\n 1. d \\<noteq> n \\<Longrightarrow> reachable d\n 2. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "let ?pa = \"takeWhile ((\\<noteq>) d) (rev p)\""], ["proof (state)\ngoal (2 subgoals):\n 1. d \\<noteq> n \\<Longrightarrow> reachable d\n 2. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "from d_in p"], ["proof (chain)\npicking this:\n  d \\<in> set p\n  path_entry (g_E G) p n", "have \"path_entry (g_E G) (rev ?pa) d\""], ["proof (prove)\nusing this:\n  d \\<in> set p\n  path_entry (g_E G) p n\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d", "using takeWhileNot_path_entry"], ["proof (prove)\nusing this:\n  d \\<in> set p\n  path_entry (g_E G) p n\n  \\<lbrakk>path_entry ?E ?p ?x; ?v \\<in> set ?p;\n   takeWhile ((\\<noteq>) ?v) (rev ?p) = ?c\\<rbrakk>\n  \\<Longrightarrow> path_entry ?E (rev ?c) ?v\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d\n\ngoal (2 subgoals):\n 1. d \\<noteq> n \\<Longrightarrow> reachable d\n 2. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "then"], ["proof (chain)\npicking this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d", "show ?thesis"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d\n\ngoal (1 subgoal):\n 1. reachable d", "using path_entry_reachable"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) d) (rev p))) d\n  path_entry (g_E G) ?p ?n \\<Longrightarrow> reachable ?n\n\ngoal (1 subgoal):\n 1. reachable d", "by auto"], ["proof (state)\nthis:\n  reachable d\n\ngoal (1 subgoal):\n 1. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "case False"], ["proof (state)\nthis:\n  \\<not> d \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<not> d \\<noteq> n \\<Longrightarrow> reachable d", "with reach_n"], ["proof (chain)\npicking this:\n  reachable n\n  \\<not> d \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  reachable n\n  \\<not> d \\<noteq> n\n\ngoal (1 subgoal):\n 1. reachable d", "by auto"], ["proof (state)\nthis:\n  reachable d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reachable d\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominate_refl: \"dominate n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominate n n", "by (simp add:dominate_def)"], ["", "lemma entry0_dominates_all: \"\\<forall>p \\<in> set (g_V G). dominate 0 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (g_V G). dominate 0 p", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> set (g_V G) \\<Longrightarrow> dominate 0 p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> set (g_V G) \\<Longrightarrow> dominate 0 p", "assume \"p \\<in> set (g_V G)\""], ["proof (state)\nthis:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> set (g_V G) \\<Longrightarrow> dominate 0 p", "show \"dominate 0 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominate 0 p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> dominate 0 p\n 2. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> dominate 0 p\n 2. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "then"], ["proof (chain)\npicking this:\n  p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. dominate 0 p", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  dominate 0 p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "assume p_neq0: \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "have \"\\<forall>pa. path_entry (g_E G) pa p \\<longrightarrow> 0 \\<in> set pa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa p \\<longrightarrow> 0 \\<in> set pa", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa. path_entry (g_E G) pa p \\<Longrightarrow> 0 \\<in> set pa", "fix pa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa. path_entry (g_E G) pa p \\<Longrightarrow> 0 \\<in> set pa", "assume path_p: \"path_entry (g_E G) pa p\""], ["proof (state)\nthis:\n  path_entry (g_E G) pa p\n\ngoal (1 subgoal):\n 1. \\<And>pa. path_entry (g_E G) pa p \\<Longrightarrow> 0 \\<in> set pa", "show \"0 \\<in> set pa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> set pa", "proof (cases \"pa \\<noteq> []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa\n 2. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "case True"], ["proof (state)\nthis:\n  pa \\<noteq> []\n\ngoal (2 subgoals):\n 1. pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa\n 2. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "note pa_n_nil = this"], ["proof (state)\nthis:\n  pa \\<noteq> []\n\ngoal (2 subgoals):\n 1. pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa\n 2. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "with path_p"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa p\n  pa \\<noteq> []", "have last_pa: \"last pa = 0\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa p\n  pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. last pa = 0", "using path_entry_last"], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa p\n  pa \\<noteq> []\n  \\<lbrakk>path_entry (g_E G) ?p ?n; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p = 0\n\ngoal (1 subgoal):\n 1. last pa = 0", "by auto"], ["proof (state)\nthis:\n  last pa = 0\n\ngoal (2 subgoals):\n 1. pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa\n 2. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "from pa_n_nil"], ["proof (chain)\npicking this:\n  pa \\<noteq> []", "have \"last pa \\<in> set pa\""], ["proof (prove)\nusing this:\n  pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. last pa \\<in> set pa", "by simp"], ["proof (state)\nthis:\n  last pa \\<in> set pa\n\ngoal (2 subgoals):\n 1. pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa\n 2. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "with last_pa"], ["proof (chain)\npicking this:\n  last pa = 0\n  last pa \\<in> set pa", "show ?thesis"], ["proof (prove)\nusing this:\n  last pa = 0\n  last pa \\<in> set pa\n\ngoal (1 subgoal):\n 1. 0 \\<in> set pa", "by simp"], ["proof (state)\nthis:\n  0 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "case False"], ["proof (state)\nthis:\n  \\<not> pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "with path_p"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa p\n  \\<not> pa \\<noteq> []", "have \"p = 0\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa p\n  \\<not> pa \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = 0", "by (simp add:path_entry0_empty_conv)"], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. \\<not> pa \\<noteq> [] \\<Longrightarrow> 0 \\<in> set pa", "with p_neq0"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> set pa", "by auto"], ["proof (state)\nthis:\n  0 \\<in> set pa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<in> set pa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa p \\<longrightarrow> 0 \\<in> set pa\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> dominate 0 p", "then"], ["proof (chain)\npicking this:\n  \\<forall>pa. path_entry (g_E G) pa p \\<longrightarrow> 0 \\<in> set pa", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pa. path_entry (g_E G) pa p \\<longrightarrow> 0 \\<in> set pa\n\ngoal (1 subgoal):\n 1. dominate 0 p", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  dominate 0 p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dominate 0 p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"strict_dominate i j \\<Longrightarrow> j \\<in> set (g_V G) \\<Longrightarrow> i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "using  any_node_exits_path"], ["proof (prove)\nusing this:\n  ?v \\<in> set (g_V G) \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p ?v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "by (auto simp add:strict_dominate_def)"], ["", "definition non_strict_dominate:: \"nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"non_strict_dominate n1 n2 \\<equiv> \\<exists>pa. path_entry (g_E G) pa n2 \\<and> (n1 \\<notin> set pa)\""], ["", "lemma any_sdominate_0: \"n \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate n 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate n 0", "apply (simp add:non_strict_dominate_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> set (g_V G) \\<Longrightarrow>\n    \\<exists>pa. path_entry (g_E G) pa 0 \\<and> n \\<notin> set pa", "by (auto intro:path_entry0)"], ["", "(*\nlemma non_strict_dominate_refl: \"n \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate n n\"\nproof(unfold non_strict_dominate_def)\n  assume n_in: \"n \\<in> set (g_V G)\"\n  then obtain p where p_n: \"path_entry (g_E G) p n\" using any_node_exits_path by auto\n\n  have pa0: \"path_entry (g_E G) [] 0\" by (rule path_entry0)\n\n  show \"\\<exists>pa. path_entry (g_E G) pa n \\<and> n \\<notin> set pa\"\n  proof(cases \"n = 0\")\n    case True \n    then show ?thesis using pa0 by (auto simp add:non_strict_dominate_def)\n  next \n    case False note n_neq_0 = this \n    with p_n have \"p \\<noteq> []\" using path_entry0_empty_conv by auto \n    then show ?thesis using p_n by (auto intro: path_entry_loop)    \n  qed\nqed\n*)"], ["", "lemma non_sdominate_succ: \"(i,j ) \\<in> g_E G \\<Longrightarrow> k \\<noteq> i \\<Longrightarrow> non_strict_dominate k i \\<Longrightarrow> non_strict_dominate k j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(i, j) \\<in> g_E G; k \\<noteq> i;\n     non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(i, j) \\<in> g_E G; k \\<noteq> i;\n     non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k j", "assume i_j: \"(i,j ) \\<in> g_E G\" and k_neq_i: \"k \\<noteq> i\" and \"non_strict_dominate k i\""], ["proof (state)\nthis:\n  (i, j) \\<in> g_E G\n  k \\<noteq> i\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(i, j) \\<in> g_E G; k \\<noteq> i;\n     non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k j", "then"], ["proof (chain)\npicking this:\n  (i, j) \\<in> g_E G\n  k \\<noteq> i\n  non_strict_dominate k i", "obtain pa where \"path_entry (g_E G) pa i\" and k_nin_pa: \"k \\<notin> set pa\""], ["proof (prove)\nusing this:\n  (i, j) \\<in> g_E G\n  k \\<noteq> i\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. (\\<And>pa.\n        \\<lbrakk>path_entry (g_E G) pa i; k \\<notin> set pa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:non_strict_dominate_def)"], ["proof (state)\nthis:\n  path_entry (g_E G) pa i\n  k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(i, j) \\<in> g_E G; k \\<noteq> i;\n     non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k j", "with i_j"], ["proof (chain)\npicking this:\n  (i, j) \\<in> g_E G\n  path_entry (g_E G) pa i\n  k \\<notin> set pa", "have \"path_entry (g_E G) (i#pa) j\""], ["proof (prove)\nusing this:\n  (i, j) \\<in> g_E G\n  path_entry (g_E G) pa i\n  k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (i # pa) j", "by (auto simp add:path_entry_prepend)"], ["proof (state)\nthis:\n  path_entry (g_E G) (i # pa) j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(i, j) \\<in> g_E G; k \\<noteq> i;\n     non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k j", "with k_neq_i k_nin_pa"], ["proof (chain)\npicking this:\n  k \\<noteq> i\n  k \\<notin> set pa\n  path_entry (g_E G) (i # pa) j", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> i\n  k \\<notin> set pa\n  path_entry (g_E G) (i # pa) j\n\ngoal (1 subgoal):\n 1. non_strict_dominate k j", "by (auto simp add:non_strict_dominate_def)"], ["proof (state)\nthis:\n  non_strict_dominate k j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma any_node_non_sdom0: \"non_strict_dominate k 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate k 0", "by (auto intro:entry0_path simp add:non_strict_dominate_def)"], ["", "lemma nonstrict_eq: \"non_strict_dominate i j \\<Longrightarrow> \\<not> strict_dominate i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate i j \\<Longrightarrow> \\<not> strict_dominate i j", "by (auto simp add:non_strict_dominate_def strict_dominate_def)"], ["", "lemma dominate_trans: \n  assumes \"dominate n1 n2\"\n      and \"dominate n2 n3\"\n    shows \"dominate n1 n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominate n1 n3", "using assms"], ["proof (prove)\nusing this:\n  dominate n1 n2\n  dominate n2 n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "proof(cases \"n1 = n2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 = n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "case True"], ["proof (state)\nthis:\n  n1 = n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 = n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  n1 = n2", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 = n2\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "using assms(2)"], ["proof (prove)\nusing this:\n  n1 = n2\n  dominate n2 n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "by auto"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "case False"], ["proof (state)\nthis:\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; dominate n2 n3; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2", "show \"dominate n1 n3\""], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "proof (cases \"n1 = n3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n1 \\<noteq> n2; n1 = n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3\n 2. \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "case True"], ["proof (state)\nthis:\n  n1 = n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n1 \\<noteq> n2; n1 = n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3\n 2. \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  n1 = n3", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 = n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "case False"], ["proof (state)\nthis:\n  n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3\\<rbrakk>\n    \\<Longrightarrow> dominate n1 n3", "show \"dominate n1 n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominate n1 n3", "proof (cases \"n2 = n3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n2 = n3 \\<Longrightarrow> dominate n1 n3\n 2. n2 \\<noteq> n3 \\<Longrightarrow> dominate n1 n3", "case True"], ["proof (state)\nthis:\n  n2 = n3\n\ngoal (2 subgoals):\n 1. n2 = n3 \\<Longrightarrow> dominate n1 n3\n 2. n2 \\<noteq> n3 \\<Longrightarrow> dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  n2 = n3", "show ?thesis"], ["proof (prove)\nusing this:\n  n2 = n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "using assms(1)"], ["proof (prove)\nusing this:\n  n2 = n3\n  dominate n1 n2\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "by auto"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal (1 subgoal):\n 1. n2 \\<noteq> n3 \\<Longrightarrow> dominate n1 n3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n2 \\<noteq> n3 \\<Longrightarrow> dominate n1 n3", "case False"], ["proof (state)\nthis:\n  n2 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. n2 \\<noteq> n3 \\<Longrightarrow> dominate n1 n3", "with `n1 \\<noteq> n2` `n1 \\<noteq> n3`"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  n1 \\<noteq> n3\n  n2 \\<noteq> n3", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n1 \\<noteq> n3\n  n2 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "proof (auto simp add: dominate_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "fix pa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "assume \"n1 \\<noteq> n2\" and \"n1 \\<noteq> n3\" and \"n2 \\<noteq> n3\""], ["proof (state)\nthis:\n  n1 \\<noteq> n2\n  n1 \\<noteq> n3\n  n2 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "from `n1 \\<noteq> n2` assms(1)"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  dominate n1 n2", "have n1_n2_pa: \"\\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\""], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  dominate n1 n2\n\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "from `n2 \\<noteq> n3` assms(2)"], ["proof (chain)\npicking this:\n  n2 \\<noteq> n3\n  dominate n2 n3", "have \"\\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n2 \\<in> set pa\""], ["proof (prove)\nusing this:\n  n2 \\<noteq> n3\n  dominate n2 n3\n\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n2 \\<in> set pa", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "with n1_n2_pa"], ["proof (chain)\npicking this:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n2 \\<in> set pa", "have \"\\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n1 \\<in> set pa\""], ["proof (prove)\nusing this:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n1 \\<in> set pa", "by (rule path_entry_gt)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<And>pa.\n       \\<lbrakk>n1 \\<noteq> n2; n1 \\<noteq> n3; n2 \\<noteq> n3;\n        path_entry (g_E G) pa n3\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> set pa", "then"], ["proof (chain)\npicking this:\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n1 \\<in> set pa", "show \"\\<And>pa. path_entry (g_E G) pa n3 \\<Longrightarrow> n1 \\<in> set pa\""], ["proof (prove)\nusing this:\n  \\<forall>pa. path_entry (g_E G) pa n3 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<And>pa. path_entry (g_E G) pa n3 \\<Longrightarrow> n1 \\<in> set pa", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) ?pa n3 \\<Longrightarrow> n1 \\<in> set ?pa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_takeWhile_lt: \"x \\<in> set xs \\<Longrightarrow> length (takeWhile ((\\<noteq>) x) xs) < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) x) xs) < length xs", "by (induct xs) auto"], ["", "lemma len_takeWhile_comp: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) xs) \\<noteq> length (takeWhile ((\\<noteq>) n2) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) xs) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) xs)", "using assms"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n2 \\<in> set xs\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) xs) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) xs)", "by (induct xs) auto"], ["", "lemma len_takeWhile_comp1: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using assms len_takeWhile_comp[of \"n1\" \"rev xs\" \"n2\"]"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n2 \\<in> set xs\n  n1 \\<noteq> n2\n  \\<lbrakk>n1 \\<in> set (rev xs); n2 \\<in> set (rev xs);\n   n1 \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> length (takeWhile ((\\<noteq>) n1) (rev xs)) \\<noteq>\n                    length (takeWhile ((\\<noteq>) n2) (rev xs))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by fastforce"], ["", "lemma len_takeWhile_comp2: \n  assumes \"n1 \\<in> set xs\"\n      and \"n2 \\<notin> set xs\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using assms"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "let ?xs1 = \"takeWhile ((\\<noteq>) n1) (rev (x # xs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "let ?xs2 = \"takeWhile ((\\<noteq>) n2) (rev (x # xs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "from assms"], ["proof (chain)\npicking this:\n  n1 \\<in> set xs\n  n2 \\<notin> set xs", "have len1: \"length (takeWhile ((\\<noteq>) n1) (rev xs)) < length (rev xs)\""], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev xs)) < length (rev xs)", "using len_takeWhile_lt[of _\"rev xs\"]"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n2 \\<notin> set xs\n  ?x \\<in> set (rev xs) \\<Longrightarrow>\n  length (takeWhile ((\\<noteq>) ?x) (rev xs)) < length (rev xs)\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev xs)) < length (rev xs)", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev xs)) < length (rev xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "from assms(1)"], ["proof (chain)\npicking this:\n  n1 \\<in> set xs", "have \"?xs1 = takeWhile ((\\<noteq>) n1) (rev xs)\""], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) n1) (rev (x # xs)) =\n    takeWhile ((\\<noteq>) n1) (rev xs)", "by auto"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) n1) (rev (x # xs)) =\n  takeWhile ((\\<noteq>) n1) (rev xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) n1) (rev (x # xs)) =\n  takeWhile ((\\<noteq>) n1) (rev xs)", "have len2: \"length ?xs1 < length (rev xs)\""], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n1) (rev (x # xs)) =\n  takeWhile ((\\<noteq>) n1) (rev xs)\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) < length (rev xs)", "using len1"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n1) (rev (x # xs)) =\n  takeWhile ((\\<noteq>) n1) (rev xs)\n  length (takeWhile ((\\<noteq>) n1) (rev xs)) < length (rev xs)\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) < length (rev xs)", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) < length (rev xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "from assms(2)"], ["proof (chain)\npicking this:\n  n2 \\<notin> set xs", "have \"takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = (rev xs) @ takeWhile ((\\<noteq>) n2) [x]\""], ["proof (prove)\nusing this:\n  n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n    rev xs @ takeWhile ((\\<noteq>) n2) [x]", "by (fastforce intro:takeWhile_append2)"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]", "have \"?xs2 = (rev xs) @ takeWhile ((\\<noteq>) n2) [x]\""], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) n2) (rev (x # xs)) =\n    rev xs @ takeWhile ((\\<noteq>) n2) [x]", "by simp"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) n2) (rev (x # xs)) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) n2) (rev (x # xs)) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]", "show ?thesis"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n2) (rev (x # xs)) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using len2"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n2) (rev (x # xs)) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) < length (rev xs)\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_compare1: \n  assumes \"n1 = x\" and \"n2 \\<noteq> x\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using assms"], ["proof (prove)\nusing this:\n  n1 = x\n  n2 \\<noteq> x\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "proof(cases \"n1 \\<in> set xs \\<and> n2 \\<in> set xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     n1 \\<in> set xs \\<and> n2 \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "case True"], ["proof (state)\nthis:\n  n1 \\<in> set xs \\<and> n2 \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     n1 \\<in> set xs \\<and> n2 \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "with assms"], ["proof (chain)\npicking this:\n  n1 = x\n  n2 \\<noteq> x\n  n1 \\<in> set xs \\<and> n2 \\<in> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 = x\n  n2 \\<noteq> x\n  n1 \\<in> set xs \\<and> n2 \\<in> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using len_takeWhile_comp1"], ["proof (prove)\nusing this:\n  n1 = x\n  n2 \\<noteq> x\n  n1 \\<in> set xs \\<and> n2 \\<in> set xs\n  \\<lbrakk>?n1.0 \\<in> set ?xs; ?n2.0 \\<in> set ?xs;\n   ?n1.0 \\<noteq> ?n2.0\\<rbrakk>\n  \\<Longrightarrow> length\n                     (takeWhile ((\\<noteq>) ?n1.0)\n                       (rev (?x # ?xs))) \\<noteq>\n                    length (takeWhile ((\\<noteq>) ?n2.0) (rev (?x # ?xs)))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by fastforce"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "let ?xs1 = \"takeWhile ((\\<noteq>) n1) (rev (x # xs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "let ?xs2 = \"takeWhile ((\\<noteq>) n2) (rev (x # xs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "case False"], ["proof (state)\nthis:\n  \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)", "have \"n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<or> n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or> n1 \\<notin> set xs \\<and> n2 \\<notin>  set xs\""], ["proof (prove)\nusing this:\n  \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\n\ngoal (1 subgoal):\n 1. n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs", "by auto"], ["proof (state)\nthis:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = x; n2 \\<noteq> x;\n     \\<not> (n1 \\<in> set xs \\<and> n2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "assume \"n1 \\<in> set xs \\<and> n2 \\<notin> set xs\""], ["proof (state)\nthis:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs\n\ngoal (2 subgoals):\n 1. n1 \\<in> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by (fastforce dest: len_takeWhile_comp2)"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "assume \"n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or> n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\""], ["proof (state)\nthis:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n    n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<or>\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "assume \"n1 \\<notin> set xs \\<and> n2 \\<in> set xs\""], ["proof (state)\nthis:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs\n\ngoal (2 subgoals):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs", "have n1: \"n1 \\<notin> set xs\" and n2: \"n2 \\<in> set xs\""], ["proof (prove)\nusing this:\n  n1 \\<notin> set xs \\<and> n2 \\<in> set xs\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs &&& n2 \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  n1 \\<notin> set xs\n  n2 \\<in> set xs\n\ngoal (2 subgoals):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "have \"length ?xs2 \\<noteq> length ?xs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs)))", "using len_takeWhile_comp2[OF n2 n1]"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (rev (?x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n1) (rev (?x # xs)))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs)))", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs)))\n\ngoal (2 subgoals):\n 1. n1 \\<notin> set xs \\<and> n2 \\<in> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs)))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs)))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by simp"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "assume \"n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\""], ["proof (state)\nthis:\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs", "have n1_nin: \"n1 \\<notin> set xs\" and n2_nin: \"n2 \\<notin> set xs\""], ["proof (prove)\nusing this:\n  n1 \\<notin> set xs \\<and> n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs &&& n2 \\<notin> set xs", "by auto"], ["proof (state)\nthis:\n  n1 \\<notin> set xs\n  n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  n1 \\<notin> set xs\n  n2 \\<notin> set xs", "have t1: \"takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = (rev xs) @ takeWhile  ((\\<noteq>) n1) [x]\" \n             and     \"takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = (rev xs) @ takeWhile  ((\\<noteq>) n2) [x]\""], ["proof (prove)\nusing this:\n  n1 \\<notin> set xs\n  n2 \\<notin> set xs\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) n1) (rev xs @ [x]) =\n    rev xs @ takeWhile ((\\<noteq>) n1) [x] &&&\n    takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n    rev xs @ takeWhile ((\\<noteq>) n2) [x]", "by (fastforce intro:takeWhile_append2)+"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n1) [x]\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "with `n1 = x` `n2 \\<noteq> x`"], ["proof (chain)\npicking this:\n  n1 = x\n  n2 \\<noteq> x\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n1) [x]\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]", "have t1': \"takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\" \n                               and      \"takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = (rev xs) @ [x]\""], ["proof (prove)\nusing this:\n  n1 = x\n  n2 \\<noteq> x\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n1) [x]\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) =\n  rev xs @ takeWhile ((\\<noteq>) n2) [x]\n\ngoal (1 subgoal):\n 1. takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs &&&\n    takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x]", "by auto"], ["proof (state)\nthis:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x]\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "then"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x]", "have \"length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) = length ((rev xs) @ [x])\""], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x]\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) =\n    length (rev xs @ [x])", "using arg_cong[of \"takeWhile ((\\<noteq>) n2) (rev xs @ [x])\" \"rev xs @ [x]\" \"length\"]"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x]\n  takeWhile ((\\<noteq>) n2) (rev xs @ [x]) = rev xs @ [x] \\<Longrightarrow>\n  length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) = length (rev xs @ [x])\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) =\n    length (rev xs @ [x])", "by fastforce"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) = length (rev xs @ [x])\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set xs \\<and> n2 \\<notin> set xs \\<Longrightarrow>\n    length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "with t1'"], ["proof (chain)\npicking this:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) = length (rev xs @ [x])", "show ?thesis"], ["proof (prove)\nusing this:\n  takeWhile ((\\<noteq>) n1) (rev xs @ [x]) = rev xs\n  length (takeWhile ((\\<noteq>) n2) (rev xs @ [x])) = length (rev xs @ [x])\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_compare2: \n  assumes \"n1 \\<in> set xs\"\n      and \"n1 \\<noteq> n2\"\n    shows \"length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq> length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "using assms"], ["proof (prove)\nusing this:\n  n1 \\<in> set xs\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "apply(case_tac \"n2 \\<in> set xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n1 \\<in> set xs; n1 \\<noteq> n2; n2 \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))\n 2. \\<lbrakk>n1 \\<in> set xs; n1 \\<noteq> n2; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "apply (fastforce dest: len_takeWhile_comp1 )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> set xs; n1 \\<noteq> n2; n2 \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> length\n                       (takeWhile ((\\<noteq>) n1) (rev (x # xs))) \\<noteq>\n                      length (takeWhile ((\\<noteq>) n2) (rev (x # xs)))", "apply (fastforce dest:len_takeWhile_comp2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma len_takeWhile_set: \n  assumes \"length (takeWhile ((\\<noteq>) n1) xs) > length (takeWhile ((\\<noteq>) n2) xs)\"\n      and \"n1 \\<noteq> n2\"\n      and \"n1 \\<in> set xs\" \n      and \"n2 \\<in> set xs\"\n    shows \"set (takeWhile ((\\<noteq>) n2) xs)  \\<subseteq> set (takeWhile ((\\<noteq>) n1) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) xs)\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) xs)", "using assms"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) xs)\n  < length (takeWhile ((\\<noteq>) n1) xs)\n  n1 \\<noteq> n2\n  n1 \\<in> set xs\n  n2 \\<in> set xs\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) xs)\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) xs)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length (takeWhile ((\\<noteq>) n2) [])\n             < length (takeWhile ((\\<noteq>) n1) []);\n     n1 \\<noteq> n2; n1 \\<in> set []; n2 \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) [])\n                      \\<subseteq> set (takeWhile ((\\<noteq>) n1) [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "case Nil"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) [])\n  < length (takeWhile ((\\<noteq>) n1) [])\n  n1 \\<noteq> n2\n  n1 \\<in> set []\n  n2 \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length (takeWhile ((\\<noteq>) n2) [])\n             < length (takeWhile ((\\<noteq>) n1) []);\n     n1 \\<noteq> n2; n1 \\<in> set []; n2 \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) [])\n                      \\<subseteq> set (takeWhile ((\\<noteq>) n1) [])\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "then"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n2) [])\n  < length (takeWhile ((\\<noteq>) n1) [])\n  n1 \\<noteq> n2\n  n1 \\<in> set []\n  n2 \\<in> set []", "show ?case"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) [])\n  < length (takeWhile ((\\<noteq>) n1) [])\n  n1 \\<noteq> n2\n  n1 \\<in> set []\n  n2 \\<in> set []\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) [])\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) [])", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) [])\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>length (takeWhile ((\\<noteq>) n2) ys)\n           < length (takeWhile ((\\<noteq>) n1) ys);\n   n1 \\<noteq> n2; n1 \\<in> set ys; n2 \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) ys)\n                    \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n  n1 \\<noteq> n2\n  n1 \\<in> set (y # ys)\n  n2 \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "note ind_hyp = Cons(1)"], ["proof (state)\nthis:\n  \\<lbrakk>length (takeWhile ((\\<noteq>) n2) ys)\n           < length (takeWhile ((\\<noteq>) n1) ys);\n   n1 \\<noteq> n2; n1 \\<in> set ys; n2 \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) ys)\n                    \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "note len_n2_lt_n1_y_ys = Cons(2)"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "note n1_n_n2 = Cons(3)"], ["proof (state)\nthis:\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "note n1_in_y_ys = Cons(4)"], ["proof (state)\nthis:\n  n1 \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "note n2_in_y_ys = Cons(5)"], ["proof (state)\nthis:\n  n2 \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "let ?ys1_take = \"takeWhile ((\\<noteq>) n1) ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "let ?ys2_take = \"takeWhile ((\\<noteq>) n2) ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>length (takeWhile ((\\<noteq>) n2) xs)\n                         < length (takeWhile ((\\<noteq>) n1) xs);\n                 n1 \\<noteq> n2; n1 \\<in> set xs; n2 \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) xs)\n                                  \\<subseteq> set\n         (takeWhile ((\\<noteq>) n1) xs);\n        length (takeWhile ((\\<noteq>) n2) (a # xs))\n        < length (takeWhile ((\\<noteq>) n1) (a # xs));\n        n1 \\<noteq> n2; n1 \\<in> set (a # xs);\n        n2 \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> set (takeWhile ((\\<noteq>) n2) (a # xs))\n                         \\<subseteq> set\n(takeWhile ((\\<noteq>) n1) (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "proof(cases \"n1 \\<in> set ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n1 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case True"], ["proof (state)\nthis:\n  n1 \\<in> set ys\n\ngoal (2 subgoals):\n 1. n1 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "note n1_in_ys = this"], ["proof (state)\nthis:\n  n1 \\<in> set ys\n\ngoal (2 subgoals):\n 1. n1 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "proof(cases \"n2 \\<in> set ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n2 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case True"], ["proof (state)\nthis:\n  n2 \\<in> set ys\n\ngoal (2 subgoals):\n 1. n2 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "note n2_in_ys = this"], ["proof (state)\nthis:\n  n2 \\<in> set ys\n\ngoal (2 subgoals):\n 1. n2 \\<in> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "proof (cases \"n1 \\<noteq> y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case True"], ["proof (state)\nthis:\n  n1 \\<noteq> y\n\ngoal (2 subgoals):\n 1. n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "note n1_neq_y = this"], ["proof (state)\nthis:\n  n1 \\<noteq> y\n\ngoal (2 subgoals):\n 1. n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "proof (cases \"n2 \\<noteq> y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case True"], ["proof (state)\nthis:\n  n2 \\<noteq> y\n\ngoal (2 subgoals):\n 1. n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "note n2_neq_y = this"], ["proof (state)\nthis:\n  n2 \\<noteq> y\n\ngoal (2 subgoals):\n 1. n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "from len_n2_lt_n1_y_ys"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))", "have \"length ?ys2_take < length ?ys1_take\""], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) ys)\n    < length (takeWhile ((\\<noteq>) n1) ys)", "using n1_n_n2 n1_in_ys n2_in_ys n1_neq_y n2_neq_y"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n  n1 \\<noteq> n2\n  n1 \\<in> set ys\n  n2 \\<in> set ys\n  n1 \\<noteq> y\n  n2 \\<noteq> y\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n2) ys)\n    < length (takeWhile ((\\<noteq>) n1) ys)", "by (induct ys) auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) ys)\n  < length (takeWhile ((\\<noteq>) n1) ys)\n\ngoal (2 subgoals):\n 1. n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "from ind_hyp[OF this n1_n_n2 n1_in_ys n2_in_ys]"], ["proof (chain)\npicking this:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)", "have \"set (takeWhile ((\\<noteq>) n2) ys) \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\""], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) ys)\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n\ngoal (2 subgoals):\n 1. n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n 2. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "then"], ["proof (chain)\npicking this:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "using n1_neq_y n2_neq_y"], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n2) ys)\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) ys)\n  n1 \\<noteq> y\n  n2 \\<noteq> y\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "by (induct ys) auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> n2 \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<not> n2 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "with n1_n_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  \\<not> n2 \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  \\<not> n2 \\<noteq> y\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> n1 \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> y \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "with n1_n_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  \\<not> n1 \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  \\<not> n1 \\<noteq> y\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "using len_n2_lt_n1_y_ys"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  \\<not> n1 \\<noteq> y\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case False"], ["proof (state)\nthis:\n  n2 \\<notin> set ys\n\ngoal (1 subgoal):\n 1. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "with n2_in_y_ys"], ["proof (chain)\npicking this:\n  n2 \\<in> set (y # ys)\n  n2 \\<notin> set ys", "have \"n2 = y\""], ["proof (prove)\nusing this:\n  n2 \\<in> set (y # ys)\n  n2 \\<notin> set ys\n\ngoal (1 subgoal):\n 1. n2 = y", "by auto"], ["proof (state)\nthis:\n  n2 = y\n\ngoal (1 subgoal):\n 1. n2 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "then"], ["proof (chain)\npicking this:\n  n2 = y", "show ?thesis"], ["proof (prove)\nusing this:\n  n2 = y\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "case False"], ["proof (state)\nthis:\n  n1 \\<notin> set ys\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "with n1_in_y_ys"], ["proof (chain)\npicking this:\n  n1 \\<in> set (y # ys)\n  n1 \\<notin> set ys", "have \"n1 = y\""], ["proof (prove)\nusing this:\n  n1 \\<in> set (y # ys)\n  n1 \\<notin> set ys\n\ngoal (1 subgoal):\n 1. n1 = y", "by auto"], ["proof (state)\nthis:\n  n1 = y\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set ys \\<Longrightarrow>\n    set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "with n1_n_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  n1 = y", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n1 = y\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "using len_n2_lt_n1_y_ys"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n1 = y\n  length (takeWhile ((\\<noteq>) n2) (y # ys))\n  < length (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (y # ys))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))", "by auto"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (y # ys))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_dom_acyclic:\n  assumes \"reachable n2\"\n      and \"dominate n1 n2\"\n      and \"dominate n2 n1\"\n    shows \"n1 = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 = n2", "using assms"], ["proof (prove)\nusing this:\n  reachable n2\n  dominate n1 n2\n  dominate n2 n1\n\ngoal (1 subgoal):\n 1. n1 = n2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "from assms(1) assms(2)"], ["proof (chain)\npicking this:\n  reachable n2\n  dominate n1 n2", "have \"reachable n1\""], ["proof (prove)\nusing this:\n  reachable n2\n  dominate n1 n2\n\ngoal (1 subgoal):\n 1. reachable n1", "by (auto intro: dom_reachable)"], ["proof (state)\nthis:\n  reachable n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "then"], ["proof (chain)\npicking this:\n  reachable n1", "have \"\\<exists>pa. path_entry (g_E G) pa n1\""], ["proof (prove)\nusing this:\n  reachable n1\n\ngoal (1 subgoal):\n 1. \\<exists>pa. path_entry (g_E G) pa n1", "by (auto intro: reachable_path_entry)"], ["proof (state)\nthis:\n  \\<exists>pa. path_entry (g_E G) pa n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "then"], ["proof (chain)\npicking this:\n  \\<exists>pa. path_entry (g_E G) pa n1", "obtain pa where pa: \"path_entry (g_E G) pa n1\""], ["proof (prove)\nusing this:\n  \\<exists>pa. path_entry (g_E G) pa n1\n\ngoal (1 subgoal):\n 1. (\\<And>pa.\n        path_entry (g_E G) pa n1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) pa n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "let ?n_take_n1 = \"takeWhile ((\\<noteq>) n1) (rev pa)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "let ?n_take_n2 = \"takeWhile ((\\<noteq>) n2) (rev pa)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; dominate n1 n2; dominate n2 n1\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "show \"n1 = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 = n2", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "assume n1_neq_n2:  \"n1 \\<noteq> n2\""], ["proof (state)\nthis:\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2", "have pa_n1_n2: \"\\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\" \n          and pa_n2_n1: \"\\<forall>pa. path_entry (g_E G)  pa n1 \\<longrightarrow> n2 \\<in> set pa\""], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa &&&\n    \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  dominate n1 n2\n  dominate n2 n1\n\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa &&&\n    \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa", "have n1_n1_pa: \"\\<forall>pa. path_entry (g_E G)  pa n1 \\<longrightarrow> n1 \\<in> set pa\""], ["proof (prove)\nusing this:\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n1 \\<in> set pa", "by (rule path_entry_gt)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "with pa pa_n2_n1"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa n1\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n1 \\<in> set pa", "have n1_in_pa: \"n1 \\<in> set pa\" \n                      and n2_in_pa: \"n2 \\<in> set pa\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa n1\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. n1 \\<in> set pa &&& n2 \\<in> set pa", "by auto"], ["proof (state)\nthis:\n  n1 \\<in> set pa\n  n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "with n1_neq_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  n1 \\<in> set pa\n  n2 \\<in> set pa", "have len_neq: \"length ?n_take_n1 \\<noteq> length ?n_take_n2\""], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n1 \\<in> set pa\n  n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<noteq>\n    length (takeWhile ((\\<noteq>) n2) (rev pa))", "by (auto simp add: len_takeWhile_comp)"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "from pa n1_in_pa n2_in_pa"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa n1\n  n1 \\<in> set pa\n  n2 \\<in> set pa", "have path1: \"path_entry (g_E G) (rev ?n_take_n1) n1\"  \n                               and path2: \"path_entry (g_E G) (rev ?n_take_n2) n2\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa n1\n  n1 \\<in> set pa\n  n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1 &&&\n    path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2", "using takeWhileNot_path_entry"], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa n1\n  n1 \\<in> set pa\n  n2 \\<in> set pa\n  \\<lbrakk>path_entry ?E ?p ?x; ?v \\<in> set ?p;\n   takeWhile ((\\<noteq>) ?v) (rev ?p) = ?c\\<rbrakk>\n  \\<Longrightarrow> path_entry ?E (rev ?c) ?v\n\ngoal (1 subgoal):\n 1. path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1 &&&\n    path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "have n1_not_in: \"n1 \\<notin> set ?n_take_n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))", "by (auto dest: set_takeWhileD[of _ _ \"rev pa\"])"], ["proof (state)\nthis:\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "have n2_not_in: \"n2 \\<notin> set ?n_take_n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n2 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))", "by (auto dest: set_takeWhileD[of _ _ \"rev pa\"])"], ["proof (state)\nthis:\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2 \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"length ?n_take_n1 > length ?n_take_n2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length (takeWhile ((\\<noteq>) n2) (rev pa))\n    < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False\n 2. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "case True"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  < length (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (2 subgoals):\n 1. length (takeWhile ((\\<noteq>) n2) (rev pa))\n    < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False\n 2. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  < length (takeWhile ((\\<noteq>) n1) (rev pa))", "have \"set ?n_take_n2 \\<subseteq> set ?n_take_n1\""], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  < length (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (rev pa))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))", "using n1_in_pa n2_in_pa"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  < length (takeWhile ((\\<noteq>) n1) (rev pa))\n  n1 \\<in> set pa\n  n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n2) (rev pa))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))", "by (auto dest: len_takeWhile_set[of _ \"rev pa\"])"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (2 subgoals):\n 1. length (takeWhile ((\\<noteq>) n2) (rev pa))\n    < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False\n 2. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  set (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))", "have \"n1 \\<notin> set ?n_take_n2 \""], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))", "using n1_not_in"], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n1) (rev pa))\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))", "by auto"], ["proof (state)\nthis:\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (2 subgoals):\n 1. length (takeWhile ((\\<noteq>) n2) (rev pa))\n    < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False\n 2. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "with path2"], ["proof (chain)\npicking this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))", "show False"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. False", "using pa_n1_n2"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n2) (rev pa))) n2\n  n1 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<forall>pa. path_entry (g_E G) pa n2 \\<longrightarrow> n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "case False"], ["proof (state)\nthis:\n  \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n         < length (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "with len_neq"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n         < length (takeWhile ((\\<noteq>) n1) (rev pa))", "have \"length ?n_take_n2 > length ?n_take_n1\""], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<noteq>\n  length (takeWhile ((\\<noteq>) n2) (rev pa))\n  \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n         < length (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. length (takeWhile ((\\<noteq>) n1) (rev pa))\n    < length (takeWhile ((\\<noteq>) n2) (rev pa))", "by auto"], ["proof (state)\nthis:\n  length (takeWhile ((\\<noteq>) n1) (rev pa))\n  < length (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  length (takeWhile ((\\<noteq>) n1) (rev pa))\n  < length (takeWhile ((\\<noteq>) n2) (rev pa))", "have \"set ?n_take_n1 \\<subseteq> set ?n_take_n2\""], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n1) (rev pa))\n  < length (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n1) (rev pa))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))", "using n1_neq_n2 n2_in_pa n1_in_pa"], ["proof (prove)\nusing this:\n  length (takeWhile ((\\<noteq>) n1) (rev pa))\n  < length (takeWhile ((\\<noteq>) n2) (rev pa))\n  n1 \\<noteq> n2\n  n2 \\<in> set pa\n  n1 \\<in> set pa\n\ngoal (1 subgoal):\n 1. set (takeWhile ((\\<noteq>) n1) (rev pa))\n    \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))", "by (auto dest: len_takeWhile_set)"], ["proof (state)\nthis:\n  set (takeWhile ((\\<noteq>) n1) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  set (takeWhile ((\\<noteq>) n1) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))", "have \"n2 \\<notin> set ?n_take_n1 \""], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n1) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))", "using n2_not_in"], ["proof (prove)\nusing this:\n  set (takeWhile ((\\<noteq>) n1) (rev pa))\n  \\<subseteq> set (takeWhile ((\\<noteq>) n2) (rev pa))\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n2) (rev pa))\n\ngoal (1 subgoal):\n 1. n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))", "by auto"], ["proof (state)\nthis:\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. \\<not> length (takeWhile ((\\<noteq>) n2) (rev pa))\n           < length (takeWhile ((\\<noteq>) n1) (rev pa)) \\<Longrightarrow>\n    False", "with path1"], ["proof (chain)\npicking this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))", "show False"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))\n\ngoal (1 subgoal):\n 1. False", "using pa_n2_n1"], ["proof (prove)\nusing this:\n  path_entry (g_E G) (rev (takeWhile ((\\<noteq>) n1) (rev pa))) n1\n  n2 \\<notin> set (takeWhile ((\\<noteq>) n1) (rev pa))\n  \\<forall>pa. path_entry (g_E G) pa n1 \\<longrightarrow> n2 \\<in> set pa\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 = n2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sdom_dom: \"strict_dominate n1 n2 \\<Longrightarrow> dominate n1 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_dominate n1 n2 \\<Longrightarrow> dominate n1 n2", "by (auto simp add:strict_dominate_def dominate_def)"], ["", "lemma dominate_sdominate: \"dominate n1 n2 \\<Longrightarrow> n1 \\<noteq> n2 \\<Longrightarrow> strict_dominate n1 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; n1 \\<noteq> n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n2", "by (auto simp add:strict_dominate_def dominate_def)"], ["", "lemma sdom_neq: \n  assumes \"reachable n2\"\n      and \"strict_dominate n1 n2\"\n    shows \"n1 \\<noteq> n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2", "using assms"], ["proof (prove)\nusing this:\n  reachable n2\n  strict_dominate n1 n2\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> n1 \\<noteq> n2", "from assms(1)"], ["proof (chain)\npicking this:\n  reachable n2", "have \"\\<exists>p. path_entry (g_E G)  p n2\""], ["proof (prove)\nusing this:\n  reachable n2\n\ngoal (1 subgoal):\n 1. \\<exists>p. path_entry (g_E G) p n2", "by (rule reachable_path_entry)"], ["proof (state)\nthis:\n  \\<exists>p. path_entry (g_E G) p n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> n1 \\<noteq> n2", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. path_entry (g_E G) p n2", "obtain p where \"path_entry (g_E G)  p n2\""], ["proof (prove)\nusing this:\n  \\<exists>p. path_entry (g_E G) p n2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        path_entry (g_E G) p n2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) p n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> n1 \\<noteq> n2", "with assms(2)"], ["proof (chain)\npicking this:\n  strict_dominate n1 n2\n  path_entry (g_E G) p n2", "show ?thesis"], ["proof (prove)\nusing this:\n  strict_dominate n1 n2\n  path_entry (g_E G) p n2\n\ngoal (1 subgoal):\n 1. n1 \\<noteq> n2", "by (auto simp add:strict_dominate_def)"], ["proof (state)\nthis:\n  n1 \\<noteq> n2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_dom_acyclic2:\n  assumes \"reachable n2 \"\n      and \"strict_dominate n1 n2\"\n    shows \"\\<not> dominate n2 n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dominate n2 n1", "using assms"], ["proof (prove)\nusing this:\n  reachable n2\n  strict_dominate n1 n2\n\ngoal (1 subgoal):\n 1. \\<not> dominate n2 n1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> \\<not> dominate n2 n1", "from assms"], ["proof (chain)\npicking this:\n  reachable n2\n  strict_dominate n1 n2", "have n1_dom_n2: \"dominate n1 n2\" and n1_neq_n2: \"n1 \\<noteq> n2\""], ["proof (prove)\nusing this:\n  reachable n2\n  strict_dominate n1 n2\n\ngoal (1 subgoal):\n 1. dominate n1 n2 &&& n1 \\<noteq> n2", "by (auto simp add:sdom_dom sdom_neq)"], ["proof (state)\nthis:\n  dominate n1 n2\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> \\<not> dominate n2 n1", "with assms(1)"], ["proof (chain)\npicking this:\n  reachable n2\n  dominate n1 n2\n  n1 \\<noteq> n2", "have \"dominate n2 n1 \\<Longrightarrow> n1 = n2\""], ["proof (prove)\nusing this:\n  reachable n2\n  dominate n1 n2\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. dominate n2 n1 \\<Longrightarrow> n1 = n2", "using reachable_dom_acyclic"], ["proof (prove)\nusing this:\n  reachable n2\n  dominate n1 n2\n  n1 \\<noteq> n2\n  \\<lbrakk>reachable ?n2.0; dominate ?n1.0 ?n2.0;\n   dominate ?n2.0 ?n1.0\\<rbrakk>\n  \\<Longrightarrow> ?n1.0 = ?n2.0\n\ngoal (1 subgoal):\n 1. dominate n2 n1 \\<Longrightarrow> n1 = n2", "by auto"], ["proof (state)\nthis:\n  dominate n2 n1 \\<Longrightarrow> n1 = n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable n2; strict_dominate n1 n2\\<rbrakk>\n    \\<Longrightarrow> \\<not> dominate n2 n1", "with n1_neq_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  dominate n2 n1 \\<Longrightarrow> n1 = n2", "show ?thesis"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  dominate n2 n1 \\<Longrightarrow> n1 = n2\n\ngoal (1 subgoal):\n 1. \\<not> dominate n2 n1", "by auto"], ["proof (state)\nthis:\n  \\<not> dominate n2 n1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_dom_eq_not_sdom: \"\\<not> dominate n1 n2 \\<Longrightarrow> \\<not> strict_dominate n1 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dominate n1 n2 \\<Longrightarrow> \\<not> strict_dominate n1 n2", "by (auto simp add:strict_dominate_def dominate_def)"], ["", "lemma reachable_sdom_acyclic:\n  assumes \"reachable n2\"\n      and \"strict_dominate n1 n2\"\n    shows \"\\<not> strict_dominate n2 n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> strict_dominate n2 n1", "using assms"], ["proof (prove)\nusing this:\n  reachable n2\n  strict_dominate n1 n2\n\ngoal (1 subgoal):\n 1. \\<not> strict_dominate n2 n1", "apply (insert reachable_dom_acyclic2[OF assms(1) assms(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dominate n2 n1 \\<Longrightarrow> \\<not> strict_dominate n2 n1", "by (auto simp add:not_dom_eq_not_sdom)"], ["", "lemma strict_dominate_trans1: \n  assumes \"strict_dominate n1 n2\" \n      and \"dominate n2 n3\" \n    shows \"strict_dominate n1 n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "using assms"], ["proof (prove)\nusing this:\n  strict_dominate n1 n2\n  dominate n2 n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "proof (cases \"reachable n2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "case True"], ["proof (state)\nthis:\n  reachable n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "note reach_n2 = this"], ["proof (state)\nthis:\n  reachable n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with assms(1)"], ["proof (chain)\npicking this:\n  strict_dominate n1 n2\n  reachable n2", "have n1_dom_n2: \"dominate n1 n2\" and n1_neq_n2: \"n1 \\<noteq> n2\""], ["proof (prove)\nusing this:\n  strict_dominate n1 n2\n  reachable n2\n\ngoal (1 subgoal):\n 1. dominate n1 n2 &&& n1 \\<noteq> n2", "by (auto simp add:sdom_dom sdom_neq)"], ["proof (state)\nthis:\n  dominate n1 n2\n  n1 \\<noteq> n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with assms(2)"], ["proof (chain)\npicking this:\n  dominate n2 n3\n  dominate n1 n2\n  n1 \\<noteq> n2", "have n1_dom_n3: \"dominate n1 n3\""], ["proof (prove)\nusing this:\n  dominate n2 n3\n  dominate n1 n2\n  n1 \\<noteq> n2\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "by (auto intro: dominate_trans)"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "have n1_neq_n3: \"n1 \\<noteq> n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<noteq> n3", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "assume \"\\<not> n1 \\<noteq> n3\""], ["proof (state)\nthis:\n  \\<not> n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> n1 \\<noteq> n3", "have \"n1 = n3\""], ["proof (prove)\nusing this:\n  \\<not> n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. n1 = n3", "by simp"], ["proof (state)\nthis:\n  n1 = n3\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with assms(2)"], ["proof (chain)\npicking this:\n  dominate n2 n3\n  n1 = n3", "have n2_dom_n1: \"dominate n2 n1\""], ["proof (prove)\nusing this:\n  dominate n2 n3\n  n1 = n3\n\ngoal (1 subgoal):\n 1. dominate n2 n1", "by simp"], ["proof (state)\nthis:\n  dominate n2 n1\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with reach_n2 n1_dom_n2"], ["proof (chain)\npicking this:\n  reachable n2\n  dominate n1 n2\n  dominate n2 n1", "have \"n1 = n2\""], ["proof (prove)\nusing this:\n  reachable n2\n  dominate n1 n2\n  dominate n2 n1\n\ngoal (1 subgoal):\n 1. n1 = n2", "by (auto dest:reachable_dom_acyclic)"], ["proof (state)\nthis:\n  n1 = n2\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with n1_neq_n2"], ["proof (chain)\npicking this:\n  n1 \\<noteq> n2\n  n1 = n2", "show False"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n1 = n2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 \\<noteq> n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3; reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with n1_dom_n3"], ["proof (chain)\npicking this:\n  dominate n1 n3\n  n1 \\<noteq> n3", "show ?thesis"], ["proof (prove)\nusing this:\n  dominate n1 n3\n  n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "by (simp add:strict_dominate_def dominate_def)"], ["proof (state)\nthis:\n  strict_dominate n1 n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "case False"], ["proof (state)\nthis:\n  \\<not> reachable n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "note not_reach_n2 = this"], ["proof (state)\nthis:\n  \\<not> reachable n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "have \"\\<not> reachable n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> reachable n3", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> reachable n3 \\<Longrightarrow> False", "assume \"\\<not> \\<not> reachable n3 \""], ["proof (state)\nthis:\n  \\<not> \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> reachable n3 \\<Longrightarrow> False", "with assms(2)"], ["proof (chain)\npicking this:\n  dominate n2 n3\n  \\<not> \\<not> reachable n3", "have \"reachable n2\""], ["proof (prove)\nusing this:\n  dominate n2 n3\n  \\<not> \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. reachable n2", "by (auto intro: dom_reachable)"], ["proof (state)\nthis:\n  reachable n2\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> reachable n3 \\<Longrightarrow> False", "with not_reach_n2"], ["proof (chain)\npicking this:\n  \\<not> reachable n2\n  reachable n2", "show False"], ["proof (prove)\nusing this:\n  \\<not> reachable n2\n  reachable n2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dominate n1 n2; dominate n2 n3;\n     \\<not> reachable n2\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  \\<not> reachable n3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "by (auto intro:any_sdominate_unreachable)"], ["proof (state)\nthis:\n  strict_dominate n1 n3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_dominate_trans2: \n  assumes \"dominate n1 n2\" \n      and \"strict_dominate n2 n3\" \n    shows \"strict_dominate n1 n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "using assms"], ["proof (prove)\nusing this:\n  dominate n1 n2\n  strict_dominate n2 n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "proof (cases \"reachable n3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3; reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "case True"], ["proof (state)\nthis:\n  reachable n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3; reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with assms(2)"], ["proof (chain)\npicking this:\n  strict_dominate n2 n3\n  reachable n3", "have n2_dom_n3: \"dominate n2 n3\" and n1_neq_n2: \"n2 \\<noteq> n3\""], ["proof (prove)\nusing this:\n  strict_dominate n2 n3\n  reachable n3\n\ngoal (1 subgoal):\n 1. dominate n2 n3 &&& n2 \\<noteq> n3", "by (auto simp add:sdom_dom sdom_neq)"], ["proof (state)\nthis:\n  dominate n2 n3\n  n2 \\<noteq> n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3; reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with assms(1)"], ["proof (chain)\npicking this:\n  dominate n1 n2\n  dominate n2 n3\n  n2 \\<noteq> n3", "have n1_dom_n3: \"dominate n1 n3\""], ["proof (prove)\nusing this:\n  dominate n1 n2\n  dominate n2 n3\n  n2 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. dominate n1 n3", "by (auto intro: dominate_trans)"], ["proof (state)\nthis:\n  dominate n1 n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3; reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "have n1_neq_n3: \"n1 \\<noteq> n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<noteq> n3", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "assume \"\\<not> n1 \\<noteq> n3\""], ["proof (state)\nthis:\n  \\<not> n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> n1 \\<noteq> n3", "have \"n1 = n3\""], ["proof (prove)\nusing this:\n  \\<not> n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. n1 = n3", "by simp"], ["proof (state)\nthis:\n  n1 = n3\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  dominate n1 n2\n  n1 = n3", "have \"dominate n3 n2\""], ["proof (prove)\nusing this:\n  dominate n1 n2\n  n1 = n3\n\ngoal (1 subgoal):\n 1. dominate n3 n2", "by simp"], ["proof (state)\nthis:\n  dominate n3 n2\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with `reachable n3` n2_dom_n3"], ["proof (chain)\npicking this:\n  reachable n3\n  dominate n2 n3\n  dominate n3 n2", "have \"n2 = n3\""], ["proof (prove)\nusing this:\n  reachable n3\n  dominate n2 n3\n  dominate n3 n2\n\ngoal (1 subgoal):\n 1. n2 = n3", "by (auto dest:reachable_dom_acyclic)"], ["proof (state)\nthis:\n  n2 = n3\n\ngoal (1 subgoal):\n 1. \\<not> n1 \\<noteq> n3 \\<Longrightarrow> False", "with n1_neq_n2"], ["proof (chain)\npicking this:\n  n2 \\<noteq> n3\n  n2 = n3", "show False"], ["proof (prove)\nusing this:\n  n2 \\<noteq> n3\n  n2 = n3\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 \\<noteq> n3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3; reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "with n1_dom_n3"], ["proof (chain)\npicking this:\n  dominate n1 n3\n  n1 \\<noteq> n3", "show ?thesis"], ["proof (prove)\nusing this:\n  dominate n1 n3\n  n1 \\<noteq> n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "by (simp add:strict_dominate_def dominate_def)"], ["proof (state)\nthis:\n  strict_dominate n1 n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "case False"], ["proof (state)\nthis:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  \\<not> reachable n3", "have \"\\<not> reachable n3\""], ["proof (prove)\nusing this:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. \\<not> reachable n3", "by simp"], ["proof (state)\nthis:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dominate n1 n2; strict_dominate n2 n3;\n     \\<not> reachable n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3", "then"], ["proof (chain)\npicking this:\n  \\<not> reachable n3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> reachable n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "by (auto intro:any_sdominate_unreachable)"], ["proof (state)\nthis:\n  strict_dominate n1 n3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strict_dominate_trans: \n  assumes \"strict_dominate n1 n2\"\n      and \"strict_dominate n2 n3\"\n    shows \"strict_dominate n1 n3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "using assms"], ["proof (prove)\nusing this:\n  strict_dominate n1 n2\n  strict_dominate n2 n3\n\ngoal (1 subgoal):\n 1. strict_dominate n1 n3", "apply(subgoal_tac \"dominate n2 n3\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; strict_dominate n2 n3;\n     dominate n2 n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 n3\n 2. \\<lbrakk>strict_dominate n1 n2; strict_dominate n2 n3\\<rbrakk>\n    \\<Longrightarrow> dominate n2 n3", "apply(rule strict_dominate_trans1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>strict_dominate n1 n2; strict_dominate n2 n3;\n     dominate n2 n3\\<rbrakk>\n    \\<Longrightarrow> strict_dominate n1 ?n2.3\n 2. \\<lbrakk>strict_dominate n1 n2; strict_dominate n2 n3;\n     dominate n2 n3\\<rbrakk>\n    \\<Longrightarrow> dominate ?n2.3 n3\n 3. \\<lbrakk>strict_dominate n1 n2; strict_dominate n2 n3\\<rbrakk>\n    \\<Longrightarrow> dominate n2 n3", "apply (auto simp add: strict_dominate_def dominate_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sdominate_dominate_succs: \n  assumes i_sdom_j:    \"strict_dominate i j\"\n      and j_in_succ_k: \"j \\<in> succs k\"\n    shows              \"dominate i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dominate i k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "assume ass:\"\\<not> dominate i k\""], ["proof (state)\nthis:\n  \\<not> dominate i k\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> dominate i k", "obtain p where path_k: \"path_entry (g_E G)  p k\" and i_nin_p: \"i \\<notin> set p\""], ["proof (prove)\nusing this:\n  \\<not> dominate i k\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>path_entry (g_E G) p k; i \\<notin> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:dominate_def)"], ["proof (state)\nthis:\n  path_entry (g_E G) p k\n  i \\<notin> set p\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "with j_in_succ_k i_sdom_j"], ["proof (chain)\npicking this:\n  j \\<in> succs k\n  strict_dominate i j\n  path_entry (g_E G) p k\n  i \\<notin> set p", "have i: \"i = k \\<or> i = j\""], ["proof (prove)\nusing this:\n  j \\<in> succs k\n  strict_dominate i j\n  path_entry (g_E G) p k\n  i \\<notin> set p\n\ngoal (1 subgoal):\n 1. i = k \\<or> i = j", "by (auto intro:path_entry_append simp add:succs_def strict_dominate_def)"], ["proof (state)\nthis:\n  i = k \\<or> i = j\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "from j_in_succ_k"], ["proof (chain)\npicking this:\n  j \\<in> succs k", "have \"reachable j\""], ["proof (prove)\nusing this:\n  j \\<in> succs k\n\ngoal (1 subgoal):\n 1. reachable j", "using succ_in_verts reachable"], ["proof (prove)\nusing this:\n  j \\<in> succs k\n  ?s \\<in> succs ?n \\<Longrightarrow> {?s, ?n} \\<subseteq> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). v \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. reachable j", "by (auto simp add:reachable_def)"], ["proof (state)\nthis:\n  reachable j\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "with i_sdom_j"], ["proof (chain)\npicking this:\n  strict_dominate i j\n  reachable j", "have \"i \\<noteq> j\""], ["proof (prove)\nusing this:\n  strict_dominate i j\n  reachable j\n\ngoal (1 subgoal):\n 1. i \\<noteq> j", "by (auto simp add: sdom_neq)"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "with i"], ["proof (chain)\npicking this:\n  i = k \\<or> i = j\n  i \\<noteq> j", "have \"i = k\""], ["proof (prove)\nusing this:\n  i = k \\<or> i = j\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. i = k", "by auto"], ["proof (state)\nthis:\n  i = k\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  i = k", "have \"dominate i k\""], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. dominate i k", "by (auto simp add:dominate_refl)"], ["proof (state)\nthis:\n  dominate i k\n\ngoal (1 subgoal):\n 1. \\<not> dominate i k \\<Longrightarrow> False", "with ass"], ["proof (chain)\npicking this:\n  \\<not> dominate i k\n  dominate i k", "show False"], ["proof (prove)\nusing this:\n  \\<not> dominate i k\n  dominate i k\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}