{"file_name": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK/Dom_Kildall_Property.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dominance_CHK", "problem_names": ["lemma sorted_list_len_lt: \"x \\<subset> y \\<Longrightarrow> finite y \\<Longrightarrow> length (sorted_list_of_set x) < length (sorted_list_of_set y)\"", "lemma wf_sorted_list: \n  \"wf ((\\<lambda>(x,y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset)\"", "lemma sorted_list_psub: \n  \"sorted w \\<longrightarrow>\n   w \\<noteq> [] \\<longrightarrow>\n   (sorted_list_of_set (set (tl w)), w) \\<in> (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) ` {(A, B). A \\<subset> B \\<and> finite B}\"", "lemma is_semi: \"semilat(A,r,f)\"", "lemma Cons_less_Conss [simp]:\n  \"x#xs [\\<sqsubset>\\<^sub>r] y#ys = (x \\<sqsubset>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or> x = y \\<and> xs [\\<sqsubset>\\<^sub>r] ys)\"", "lemma acc_le_listI [intro!]:\n  \"acc r \\<Longrightarrow> acc (Listn.le r) \"", "lemma wf_listn: \"wf {(y,x). x \\<sqsubset>\\<^bsub>Listn.le r\\<^esub> y}\"", "lemma wf_listn': \"wf {(y,x). x [\\<sqsubset>\\<^sub>r] y}\"", "lemma wf_listn_termination_rel: \n  \"wf ({(y,x). x \\<sqsubset>\\<^bsub>Listn.le r\\<^esub> y}  <*lex*> (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset)\"", "lemma inA_is_sorted: \"xs \\<in> A \\<Longrightarrow> sorted (rev xs)\"", "lemma list_nA_lt_refl: \"xs \\<in> list n A \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\"", "lemma nil_inA: \"[] \\<in> A\"", "lemma upt_n_in_pow_nodes: \"{0..<n} \\<in> Pow (set nodes)\"", "lemma rev_all_inA: \"rev [0..<n] \\<in> A\"", "lemma len_start_is_n: \"length start = n\"", "lemma len_start_is_len_verts: \"length start = length (g_V G)\"", "lemma start_len_gt_0: \"length start > 0\"", "lemma start_subset_A: \"set start \\<subseteq> A\"", "lemma start_in_A : \"start \\<in> (list n A)\"", "lemma sorted_start_nth: \"i < n \\<Longrightarrow> sorted (rev (start!i))\"", "lemma start_nth0_empty: \"start!0 = []\"", "lemma start_nth_lt0_all: \"\\<forall>p\\<in>{1..< length start}. start!p = (rev [0..<n])\"", "lemma in_nodes_lt_n: \"x \\<in> set (g_V G) \\<Longrightarrow> x < n\"", "lemma start_nth0_unstable_auxi: \"\\<not> [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> (rev [0..<n])\"", "lemma start_nth0_unstable: \"\\<not> stable r step start 0\"", "lemma start_nth_unstable: \n  assumes \"p \\<in> {1 ..< length (g_V G)} \"\n      and \"succs p \\<noteq> {}\"\n    shows \"\\<not> stable r step start p\"", "lemma start_unstable_cond: \n  assumes \"succs p \\<noteq> {} \"\n      and \"p < length (g_V G)\"\n    shows \"\\<not> stable r step start p\"", "lemma unstable_start: \"unstables r step start = sorted_list_of_set ({p. succs p \\<noteq> {} \\<and> p < length start})\"", "lemma nth_merges:\n \"\\<And>ss. \\<lbrakk>p < length ss; ss \\<in> list n A; \\<forall>(p,t)\\<in>set ps. p<n \\<and> t\\<in>A \\<rbrakk> \\<Longrightarrow>\n  (merges f ps ss)!p = map snd [(p',t') \\<leftarrow> ps. p'=p] \\<Squnion>\\<^bsub>f\\<^esub> ss!p\"\n  (is \"\\<And>ss. \\<lbrakk>_; _; ?steptype ps\\<rbrakk> \\<Longrightarrow> ?P ss ps\")", "lemma length_merges [simp]:\n  \"\\<And>ss. size(merges f ps ss) = size ss\"", "lemma merges_preserves_type_lemma:\nshows \"\\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>(p,x) \\<in> set ps. p<n \\<and> x\\<in>A) \\<longrightarrow> merges f ps xs \\<in> list n A\"", "lemma merges_preserves_type [simp]:\n \"\\<lbrakk> xs \\<in> list n A; \\<forall>(p,x) \\<in> set ps. p<n \\<and> x\\<in>A \\<rbrakk> \\<Longrightarrow> merges f ps xs \\<in> list n A\"", "lemmas [simp] = Let_def Semilat.le_iff_plus_unchanged [OF Semilat.intro, symmetric]", "lemma decomp_propa: \"\\<And>ss w. \n   (\\<forall>(q,t)\\<in>set qs. q < size ss \\<and> t \\<in> A ) \\<Longrightarrow> \n   sorted w \\<Longrightarrow> \n   set ss \\<subseteq> A \\<Longrightarrow> \n   propa f qs ss w = (merges f qs ss, (sorted_list_of_set ({q. \\<exists>t.(q,t)\\<in>set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (ss!q) \\<noteq> ss!q} \\<union> set w)))\"", "lemma distinct_pair_filter_n: \"distinct (map fst xs) \\<Longrightarrow> a \\<notin> set (map fst xs) \\<Longrightarrow> (map snd (filter (\\<lambda>(x,y). x = a) xs)) = []\"", "lemma map_fst: \"map fst (map (\\<lambda>pc. (pc, x)) xs) =  xs\"", "lemma distinct_p: \"p < n \\<longrightarrow> distinct (map fst (step p (ss!p)))\"", "lemma distinct_pair_filter: \"distinct (map fst xs) \\<Longrightarrow> (a,b)\\<in> set xs \\<Longrightarrow> map snd (filter (\\<lambda>x. fst x = a) xs) = [b]\"", "lemma split_comp_eq_pair: \"(\\<lambda>x. fst x = a) = (\\<lambda>(x,y). x = a)\"", "lemma distinct_pair_filter': \"distinct (map fst xs) \\<Longrightarrow> (a,b)\\<in> set xs \\<Longrightarrow> (map snd (filter (\\<lambda>(x,y). x = a) xs)) = [b]\"", "lemma merges_property1: \n  fixes ss w qs\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and subset_ss_A:       \"set ss \\<subseteq> A \"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n    shows \"\\<forall>(q, \\<tau>) \\<in> set qs. merges f qs ss!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\"", "lemma propa_property1: \n  fixes ss w qs\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A  \"\n      and sorted_w:          \"sorted (w ::nat list)\"\n      and subset_ss_A:       \"set ss \\<subseteq> A \"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n    shows \"\\<forall>(q, \\<tau>) \\<in> set qs. (fst(propa f qs ss w))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\"", "lemma merges_property2: \n  fixes ss w qs q\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and subset_ss_A:       \"set ss \\<subseteq> A\"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n      and q_nin:             \"q \\<notin> set(map fst qs) \"\n      and q_lt_len_ss:       \"q < length ss \"\n    shows \"(merges f qs ss)!q = ss!q\"", "lemma propa_property2: \n  fixes ss w qs q\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and sorted_w:          \"sorted (w ::nat list)\"\n      and subset_ss_A:       \"set ss \\<subseteq> A\"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n      and q_nin:             \"q \\<notin> set(map fst qs) \"\n      and q_lt_len_ss:       \"q < length ss \"\n    shows \"(fst(propa f qs ss w))!q = ss!q\"", "lemma merges_incr_lemma:\n \"\\<forall>xs. xs \\<in> list n A \\<longrightarrow> distinct (map fst ps) \\<longrightarrow> (\\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x \\<in> A) \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\"", "lemma merges_incr:\n \"\\<lbrakk> xs \\<in> list n A; distinct (map fst ps); \\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x \\<in> A \\<rbrakk> \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\"", "lemma merges_same_conv [rule_format]:\n \"(\\<forall>xs. xs \\<in> list n A \\<longrightarrow> distinct (map fst ps) \\<longrightarrow>\n        (\\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x\\<in>A) \\<longrightarrow> \n        (merges f ps xs = xs) = (\\<forall>(p,x)\\<in>set ps. x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs!p))\"", "lemma list_update_le_listI [rule_format]:\n  \"set xs \\<subseteq> A \\<longrightarrow> set ys \\<subseteq> A \\<longrightarrow> xs [\\<sqsubseteq>\\<^sub>r] ys \\<longrightarrow> p < size xs \\<longrightarrow>  \n   x \\<sqsubseteq>\\<^sub>r ys!p \\<longrightarrow> semilat(A,r,f) \\<longrightarrow> x\\<in>A \\<longrightarrow> \n   xs[p := x \\<squnion>\\<^sub>f xs!p] [\\<sqsubseteq>\\<^sub>r] ys\"", "lemma merges_pres_le_ub:\n  assumes \"set ts \\<subseteq> A\"  \n          \"set ss \\<subseteq> A\"\n          \"\\<forall>(p,t)\\<in>set ps. t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p \\<and> t \\<in> A \\<and> p < size ts\"  \n          \"ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\"\n  shows \"merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\"", "lemma termination_lemma: \nshows \"\\<lbrakk>ss \\<in> list n A; distinct (map fst qs); \\<forall>(q,t)\\<in>set qs. q<n \\<and> t\\<in>A; sorted w; w \\<noteq> [] \\<rbrakk> \\<Longrightarrow> \n        ss [\\<sqsubset>\\<^sub>r] merges f qs ss \\<or> \n        merges f qs ss = ss \\<and> \n       (sorted_list_of_set ({q. \\<exists>t. (q,t)\\<in>set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> ss!q \\<noteq> ss!q} \\<union> set (tl w)),w) \\<in>\n       (\\<lambda>x. case x of (x, y) \\<Rightarrow> (sorted_list_of_set x, sorted_list_of_set y)) ` {(A, B). A \\<subset> B \\<and> finite B}\"", "lemma bounded_exec: \"bounded step n\"", "lemma bounded_exec':\n  fixes ss w a b\n  assumes w_n_nil: \" w \\<noteq> [] \"\n       and step_hdw: \" (a, b) \\<in> set (step (hd w) (ss ! hd w)) \"      \n       and w_lt_n:\"\\<forall>p\\<in>set w. p < n \"\n      shows\" a < n\"", "lemma wf_dom_w: \n  assumes \"wf_dom ss w\"\n  shows \"sorted w\"", "lemma wf_dom_w2: \n  assumes \"wf_dom ss w\"\n  shows \"(\\<forall>x\\<in>set w. x < n)\"", "lemma wf_dom_len_eq: \n  assumes \"wf_dom ss w\"\n  shows \"(length ss = n)\"", "lemma  wf_dom_inA: \n  assumes \"wf_dom ss w\"\n  shows \"ss \\<in> list n A\"", "lemma wf_dom_le: \n  assumes wf_ss_w: \"wf_dom ss w\"\n  shows \"ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\"", "lemma pres_transf:  \n  \"\\<forall>ss\\<in>A. p < n \\<longrightarrow> (\\<forall>x<length ss. p > ss!x) \\<longrightarrow> transf p ss \\<in> A\"", "lemma pres_exec: \n  assumes \"(q,\\<tau>) \\<in> set (step p (ss!p))\"\n      and \"\\<forall>n \\<in> set (ss!p). p > n\"\n      and \"ss!p \\<in> A\"\n      and \"p < n\" \n    shows \"\\<tau> \\<in> A \"", "lemma wf_hd_neq_all: \n  assumes wf_ss_w: \"wf_dom ss w \" \n      and w_n_nil: \"w \\<noteq> [] \" \n    shows \" ss!(hd w) \\<noteq> rev [0..<n]\"", "lemma pres_wf_exec: \n  fixes ss w a b\n  assumes wf_ss_w: \"wf_dom ss w \"\n      and w_n_nil: \"w \\<noteq> [] \"\n    shows \"\\<forall>(q,\\<tau>) \\<in> set (step (hd w) (ss!(hd w))). \\<tau> \\<in> A \"", "lemma propa_dom_invariant_auxi: \n  assumes wf_a_b: \"wf_dom a b\" and b_n_nil: \"b \\<noteq> [] \" \n    shows \"a!hd b \\<noteq> rev [0..<n] \\<and>\n           sorted (rev (hd b # (a!hd b))) \\<and>\n           set (hd b # (a!hd b)) \\<subseteq> set nodes \\<and>\n           hd b # (a!hd b) \\<in> A \\<and>\n           (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a!hd b)). q < length a \\<and> \\<tau> \\<in> A)\"", "lemma propa_dom_invariant_aux:\n  fixes a b ss w\nassumes propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"    \n    and b_n_nil: \"b \\<noteq> [] \" \n    and a_in_A: \"\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\"   \n    and ass: \"\\<forall>p<n.\n          sorted (rev ( (a ! p))) \\<and>\n          (a!p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set (a!p). x < p)) \\<and>\n          (a!p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in>set b. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n          (p \\<notin> set b \\<longrightarrow> stable r step a p)\"\n    and sorted_b: \"sorted b  \"\n    and len_eq:  \"length a = n  \"\n    and b_lt_n: \"\\<forall>x\\<in>set b. x < n  \"\n  shows \"(\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n         (\\<forall>p<n.\n           sorted (rev ( (ss ! p))) \\<and>\n           (ss!p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set (ss!p). x < p)) \\<and>\n           (ss!p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n         sorted w \\<and> length ss = n \\<and> (\\<forall>x\\<in>set w. x <n)\"", "lemma propa_dom_invariant_aux':\n  fixes a b ss w\nassumes propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"    \n    and b_n_nil: \"b \\<noteq> [] \" \n    and a_in_A: \"\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A  \"   \n    and ass: \"\\<forall>p<length ss0.\n          sorted (rev ( (a ! p))) \\<and>\n          (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow> (\\<forall>x\\<in>set ( (a ! p)). x < p)) \\<and>\n          (a ! p = rev [0..<length ss0] \\<longrightarrow>  (\\<exists>x\\<in> set b. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n          (p \\<notin> set b \\<longrightarrow> stable r step a p)\"\n    and sorted_b: \"sorted b  \"\n    and n_len: \"n = length ss0  \"\n    and len_eq:  \"length a = length ss0  \"\n    and b_lt_n: \"\\<forall>x\\<in>set b. x < length ss0  \"\n  shows \"(\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n         (\\<forall>p<length ss0.\n           sorted (rev ( (ss ! p))) \\<and>\n           (ss ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow> (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n           (ss ! p = rev [0..<length ss0] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n         sorted w \\<and> length ss = length ss0 \\<and> (\\<forall>x\\<in>set w. x < length ss0) \"", "lemma propa_dom_invariant: \n  assumes wf_ss_w: \"wf_dom ss w \"\n      and w_n_nil: \"w \\<noteq> []\"\n      and propa: \"propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w') \"\n    shows \"wf_dom ss' w'\"", "lemma step_dom_mono_aux: \n  fixes \\<tau> p \\<tau>' a b\n  assumes sorted: \"sorted (rev (transf p  \\<tau>)) \"\n      and a_b_step: \"(a, b) \\<in> set (step p  \\<tau>) \" \n      and \"\\<tau> \\<in> A \" and \" p < n \" and \" \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'\" \n    shows \"\\<exists>\\<tau>''. (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and> b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''\"", "lemma step_dom_mono: \n\"(\\<forall>\\<tau> p \\<tau>'. \\<tau> \\<in> A \\<and> p<n \\<and> \\<tau> \\<sqsubseteq>\\<^sub>r \\<tau>' \\<longrightarrow> \n           sorted (rev (transf p \\<tau>)) \\<longrightarrow> \n           set (step p \\<tau>) {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set (step p \\<tau>'))\"", "lemma propa_termination: \n  fixes a b\n  assumes wf_a_b: \"wf_dom a b\" \n      and b_n_nil: \"b \\<noteq> [] \"\n    shows \"(propa f (step (hd b) (a ! hd b)) a (tl b), a, b) \\<in>\n           {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*> \n           (\\<lambda>x. case x of (x, y) \\<Rightarrow> (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\"", "lemma iter_dom_invariant: \n  assumes \"wf_dom ss0 w0\"\n    shows \"iter f step ss0 w0 = (ss',w') \\<longrightarrow> wf_dom ss' w'\"", "lemma propa_dom_invariant_aux2: \n  fixes ss w ssa wa\n  assumes wf_dom_ss0_w0: \"wf_dom ss0 w0\"\n      and w_n_nil: \"w \\<noteq> [] \"     \n      and propa: \"propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa) \"\n      and wf_ss_w: \"wf_dom ss w \"\n      and ss0_lt_ss: \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\"\n      and sta: \" \\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p) \\<longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\"    \n    shows \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and> \n           (\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p) \\<longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\"", "lemma in_list_nA_refl: \"ss \\<in> list n A  \\<Longrightarrow>  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\"", "lemma iter_dom: \n assumes \"wf_dom ss0 w0\"\n shows \"iter f step ss0 w0 = (ss',w') \\<longrightarrow> \n        wf_dom ss' w' \\<and> \n        stables r step ss' \\<and> \n        ss0 [\\<sqsubseteq>\\<^sub>r] ss' \\<and>\n        (\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> ss' [\\<sqsubseteq>\\<^sub>r] ts)\"", "lemma wf_start: \"wf_dom start (unstables r step start)\"", "lemma iter_dom_properties:\n \"iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> \n  wf_dom ss' w' \\<and> \n  stables r step ss' \\<and> \n  start [\\<sqsubseteq>\\<^sub>r] ss' \\<and>\n  (\\<forall>ts\\<in>list n A. start [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> ss' [\\<sqsubseteq>\\<^sub>r] ts)\"", "lemma iter_dom_properties2:\n \"iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> ss' \\<in> list n A\"", "lemma iter_dom_termination: \n  \"iter f step start (unstables r step start) = (ss,w) \\<longrightarrow> \n   w \\<noteq> [] \\<longrightarrow>\n   propa f (step (hd w) (ss!(hd w))) ss (tl w) = (ss, tl w)\"", "lemma dom_iter_properties: \n  \"iter f step start (unstables r step start) = (ss, w) \\<longrightarrow> \n   ss!0 = [] \\<and> \n   (\\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss!p \\<noteq> (rev [0..<n]))\"", "lemma dom_iter_properties2: \n  \"iter f step start (unstables r step start) = (ss,w) \\<longrightarrow> (\\<forall>p<n.  ss!p \\<noteq> (rev [0..<n]))\"", "lemma kildall_dom_properties:\n  \"kildall r f step start \\<in> list n A \\<and> \n   stables r step (kildall r f step start) \\<and> \n   start [\\<sqsubseteq>\\<^sub>r] (kildall r f step start) \\<and>\n   (\\<forall>ts\\<in>list n A. start [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> (kildall r f step start) [\\<sqsubseteq>\\<^sub>r] ts)\"  (is \"PROP ?P\")", "lemma dom_kildall_stables: \"stables r step (dom_kildall start)\"", "lemma dom_kildall_entry: \"dom_kildall start !0 = []\"", "lemma zero_dom_zero: \"dom i 0 \\<longleftrightarrow> i = 0\"", "lemma sdom_dom_succs: \"strict_dom i j \\<Longrightarrow> j \\<in> succs k \\<Longrightarrow> dom i k\"", "lemma adom_succs: \"dom i j \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> j \\<in> succs k \\<Longrightarrow> dom i k\"", "lemma dom_kildall_is_strict: \"j < length start \\<Longrightarrow> dom_kildall start ! j = res \\<Longrightarrow> j \\<notin> set res\"", "lemma sdom_asyc: \"strict_dom i j \\<Longrightarrow> j \\<in> set (g_V G) \\<Longrightarrow> i \\<noteq> j\"", "lemma propa_dom_invariant_complete:\n  fixes i a b ss w \n  assumes b_n_nil: \"b \\<noteq> [] \"\n      and propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"\n      and wf_a_b: \"wf_dom a b\"\n      and non_strict: \"\\<forall>i. i < n \\<and>  k \\<notin> set (a!i) \\<longrightarrow> non_strict_dominate k i \"\n    shows \"wf_dom ss w \\<and> (\\<forall>i. i < n \\<and>  k \\<notin> set ( ss ! i) \\<longrightarrow> non_strict_dominate k i)\"  (is \"?PROP ?P\")", "lemma start_non_sdom: \" i < n \\<and> start!i =  res \\<and> k \\<notin> set res \\<longrightarrow> non_strict_dominate k i\"", "lemma iter_dom_invariant_complete:\n    shows \"\\<And>res.  iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> i < n \\<and> ss'!i =  res \\<and> k \\<notin> set res \\<longrightarrow> non_strict_dominate k i\""], "translations": [["", "lemma sorted_list_len_lt: \"x \\<subset> y \\<Longrightarrow> finite y \\<Longrightarrow> length (sorted_list_of_set x) < length (sorted_list_of_set y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "let ?x = \"sorted_list_of_set x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "let ?y = \"sorted_list_of_set y\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "assume x_y: \"x \\<subset> y\" and fin_y: \"finite y\""], ["proof (state)\nthis:\n  x \\<subset> y\n  finite y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "then"], ["proof (chain)\npicking this:\n  x \\<subset> y\n  finite y", "have card_x_y: \"card x < card y\" and fin_x: \"finite x\""], ["proof (prove)\nusing this:\n  x \\<subset> y\n  finite y\n\ngoal (1 subgoal):\n 1. card x < card y &&& finite x", "by (auto simp add:psubset_card_mono finite_subset)"], ["proof (state)\nthis:\n  card x < card y\n  finite x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "with fin_y"], ["proof (chain)\npicking this:\n  finite y\n  card x < card y\n  finite x", "have \"length ?x = card x\" and \"length ?y = card y\""], ["proof (prove)\nusing this:\n  finite y\n  card x < card y\n  finite x\n\ngoal (1 subgoal):\n 1. length (sorted_list_of_set x) = card x &&&\n    length (sorted_list_of_set y) = card y", "by auto"], ["proof (state)\nthis:\n  length (sorted_list_of_set x) = card x\n  length (sorted_list_of_set y) = card y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<subset> y; finite y\\<rbrakk>\n    \\<Longrightarrow> length (sorted_list_of_set x)\n                      < length (sorted_list_of_set y)", "with card_x_y"], ["proof (chain)\npicking this:\n  card x < card y\n  length (sorted_list_of_set x) = card x\n  length (sorted_list_of_set y) = card y", "show ?thesis"], ["proof (prove)\nusing this:\n  card x < card y\n  length (sorted_list_of_set x) = card x\n  length (sorted_list_of_set y) = card y\n\ngoal (1 subgoal):\n 1. length (sorted_list_of_set x) < length (sorted_list_of_set y)", "by auto"], ["proof (state)\nthis:\n  length (sorted_list_of_set x) < length (sorted_list_of_set y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_sorted_list: \n  \"wf ((\\<lambda>(x,y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)", "apply (unfold finite_psubset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        {(A, B). A \\<subset> B \\<and> finite B})", "apply (rule wf_measure [THEN wf_subset])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n    {(A, B). A \\<subset> B \\<and> finite B}\n    \\<subseteq> measure ?f1", "apply (simp add: measure_def inv_image_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>a b.\n           a \\<subset> b \\<and>\n           finite b \\<and> y = (sorted_list_of_set a, sorted_list_of_set b)}\n    \\<subseteq> {(x, y). ?f1 x < ?f1 y}", "by (auto intro: sorted_list_len_lt)"], ["", "lemma sorted_list_psub: \n  \"sorted w \\<longrightarrow>\n   w \\<noteq> [] \\<longrightarrow>\n   (sorted_list_of_set (set (tl w)), w) \\<in> (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) ` {(A, B). A \\<subset> B \\<and> finite B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w \\<longrightarrow>\n    w \\<noteq> [] \\<longrightarrow>\n    (sorted_list_of_set (set (tl w)), w)\n    \\<in> (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n          {(A, B). A \\<subset> B \\<and> finite B}", "proof(intro strip, simp add:image_iff)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "assume sorted_w: \"sorted w\" and w_n_nil: \"w \\<noteq> []\""], ["proof (state)\nthis:\n  Sorted_Less.sorted w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "let ?a = \"set (tl w)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "let ?b = \"set w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "from sorted_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have sorted_tl_w: \"sorted (tl w)\" and dist: \"distinct w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl w) &&& distinct w", "by (induct w) (auto simp add: sorted_wrt_append )"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl w)\n  distinct w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "with w_n_nil"], ["proof (chain)\npicking this:\n  w \\<noteq> []\n  Sorted_Less.sorted (tl w)\n  distinct w", "have a_psub_b: \"?a \\<subset> ?b\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  Sorted_Less.sorted (tl w)\n  distinct w\n\ngoal (1 subgoal):\n 1. set (tl w) \\<subset> set w", "by (induct w)auto"], ["proof (state)\nthis:\n  set (tl w) \\<subset> set w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "from sorted_w sorted_tl_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w\n  Sorted_Less.sorted (tl w)", "have \"w = sorted_list_of_set ?b\" and \"tl w = sorted_list_of_set (set (tl w))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n  Sorted_Less.sorted (tl w)\n\ngoal (1 subgoal):\n 1. w = sorted_list_of_set (set w) &&&\n    tl w = sorted_list_of_set (set (tl w))", "by (auto simp add: sorted_less_set_eq)"], ["proof (state)\nthis:\n  w = sorted_list_of_set (set w)\n  tl w = sorted_list_of_set (set (tl w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b.\n                         a \\<subset> b \\<and>\n                         finite b \\<and>\n                         sorted_list_of_set (set (tl w)) =\n                         sorted_list_of_set a \\<and>\n                         w = sorted_list_of_set b", "with a_psub_b"], ["proof (chain)\npicking this:\n  set (tl w) \\<subset> set w\n  w = sorted_list_of_set (set w)\n  tl w = sorted_list_of_set (set (tl w))", "show \"\\<exists>a b. a \\<subset> b \\<and> finite b \\<and> sorted_list_of_set (set (tl w)) = sorted_list_of_set a \\<and> w = sorted_list_of_set b\""], ["proof (prove)\nusing this:\n  set (tl w) \\<subset> set w\n  w = sorted_list_of_set (set w)\n  tl w = sorted_list_of_set (set (tl w))\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a \\<subset> b \\<and>\n       finite b \\<and>\n       sorted_list_of_set (set (tl w)) = sorted_list_of_set a \\<and>\n       w = sorted_list_of_set b", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b.\n     a \\<subset> b \\<and>\n     finite b \\<and>\n     sorted_list_of_set (set (tl w)) = sorted_list_of_set a \\<and>\n     w = sorted_list_of_set b\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec merges :: \"'s binop \\<Rightarrow> (nat \\<times> 's) list \\<Rightarrow> 's list \\<Rightarrow> 's list\"\nwhere\n  \"merges f []      \\<tau>s = \\<tau>s\"\n| \"merges f (p'#ps) \\<tau>s = (let (p,\\<tau>) = p' in merges f ps (\\<tau>s[p := \\<tau> \\<squnion>\\<^bsub>f\\<^esub> \\<tau>s!p]))\""], ["", "locale dom_sl = cfg_doms +\n  fixes A and r and f and step and start and n \n  defines \"A  \\<equiv> ((rev \\<circ> sorted_list_of_set) ` (Pow (set (nodes))))\" \n  defines \"r  \\<equiv> nodes_le\"\n  defines \"f  \\<equiv> nodes_sup\"\n  defines \"n  \\<equiv> (size nodes)\"\n  defines \"step \\<equiv> exec\" \n  defines \"start \\<equiv> ([] # (replicate (length (g_V G) - 1) ( (rev[0..<n]))))::state_dom list \"\n\nbegin"], ["", "lemma is_semi: \"semilat(A,r,f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (A, r, f)", "by(insert nodes_semi_is_semilat) (auto simp add:nodes_semi_def A_def r_def f_def)\n\n\\<comment>\\<open>used by acc\\_le\\_listI\\<close>"], ["", "lemma Cons_less_Conss [simp]:\n  \"x#xs [\\<sqsubset>\\<^sub>r] y#ys = (x \\<sqsubset>\\<^sub>r y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or> x = y \\<and> xs [\\<sqsubset>\\<^sub>r] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs [\\<sqsubset>\\<^bsub>r\\<^esub>] y # ys) =\n    (x \\<sqsubset>\\<^bsub>r\\<^esub> y \\<and>\n     xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n     x = y \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys)", "proof(unfold lesssub_def, rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "assume \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and> x # xs \\<noteq> y # ys \""], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys\n\ngoal (2 subgoals):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys", "have ass1: \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\" and ass2:\"x # xs \\<noteq> y # ys \""], ["proof (prove)\nusing this:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys &&&\n    x # xs \\<noteq> y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n  x # xs \\<noteq> y # ys\n\ngoal (2 subgoals):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from ass1"], ["proof (chain)\npicking this:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys", "have g1: \"x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\" and g2: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>]  ys\""], ["proof (prove)\nusing this:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq>\\<^bsub>r\\<^esub> y &&&\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (2 subgoals):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from ass2"], ["proof (chain)\npicking this:\n  x # xs \\<noteq> y # ys", "have \"x \\<noteq> y \\<or> x = y \\<and> xs \\<noteq> ys\""], ["proof (prove)\nusing this:\n  x # xs \\<noteq> y # ys\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<or> x = y \\<and> xs \\<noteq> ys", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y \\<or> x = y \\<and> xs \\<noteq> ys\n\ngoal (2 subgoals):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> y \\<or> x = y \\<and> xs \\<noteq> ys", "show \"(x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or> x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\""], ["proof (prove)\nusing this:\n  x \\<noteq> y \\<or> x = y \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "assume \"x \\<noteq> y\""], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "with g1 g2"], ["proof (chain)\npicking this:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<noteq> y", "have \"(x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \""], ["proof (prove)\nusing this:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "by auto"], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (2 subgoals):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n 2. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "then"], ["proof (chain)\npicking this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "show ?thesis"], ["proof (prove)\nusing this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "by auto"], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "assume \"x = y \\<and> xs \\<noteq> ys \""], ["proof (state)\nthis:\n  x = y \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "then"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<noteq> ys", "have \"x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "using  g2"], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<noteq> ys\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "by auto"], ["proof (state)\nthis:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<noteq> ys \\<Longrightarrow>\n    (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "then"], ["proof (chain)\npicking this:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "by auto"], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "assume  ass:\"((x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys) \\<or> (x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys)\""], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n    x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from ass"], ["proof (chain)\npicking this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "show \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and> x # xs \\<noteq> y # ys\""], ["proof (prove)\nusing this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<or>\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "assume \"(x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \""], ["proof (state)\nthis:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "have \"x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y\" and ass1: \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \""], ["proof (prove)\nusing this:\n  (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y &&&\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "have ass2: \"x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\" and ass3: \" x \\<noteq> y\""], ["proof (prove)\nusing this:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq>\\<^bsub>r\\<^esub> y &&& x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from ass3"], ["proof (chain)\npicking this:\n  x \\<noteq> y", "have g2: \"x # xs \\<noteq> y # ys\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x # xs \\<noteq> y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs \\<noteq> y # ys\n\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from ass1 ass2"], ["proof (chain)\npicking this:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y", "have g1: \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\""], ["proof (prove)\nusing this:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n\ngoal (2 subgoals):\n 1. (x \\<sqsubseteq>\\<^bsub>r\\<^esub> y \\<and> x \\<noteq> y) \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys\n 2. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "with g2"], ["proof (chain)\npicking this:\n  x # xs \\<noteq> y # ys\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys", "show \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and> x # xs \\<noteq> y # ys\""], ["proof (prove)\nusing this:\n  x # xs \\<noteq> y # ys\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "assume \"x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys \""], ["proof (state)\nthis:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys", "have \"x = y\" and \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \" and \" xs \\<noteq> ys \""], ["proof (prove)\nusing this:\n  x = y \\<and> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and> xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y &&& xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys &&& xs \\<noteq> ys", "by auto"], ["proof (state)\nthis:\n  x = y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "then"], ["proof (chain)\npicking this:\n  x = y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  xs \\<noteq> ys", "have g2: \"x # xs \\<noteq> y # ys\""], ["proof (prove)\nusing this:\n  x = y\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  xs \\<noteq> ys\n\ngoal (1 subgoal):\n 1. x # xs \\<noteq> y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs \\<noteq> y # ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "from `x = y`"], ["proof (chain)\npicking this:\n  x = y", "have \"x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\""], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq>\\<^bsub>r\\<^esub> y", "by(simp add: lesssub_def lesub_def r_def nodes_le_def )"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "with `xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys`"], ["proof (chain)\npicking this:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y", "have g1: \"x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\""], ["proof (prove)\nusing this:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> y\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n\ngoal (1 subgoal):\n 1. x = y \\<and>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<and>\n    xs \\<noteq> ys \\<Longrightarrow>\n    x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "with g2"], ["proof (chain)\npicking this:\n  x # xs \\<noteq> y # ys\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys", "show \" x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and> x # xs \\<noteq> y # ys\""], ["proof (prove)\nusing this:\n  x # xs \\<noteq> y # ys\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys\n\ngoal (1 subgoal):\n 1. x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n    x # xs \\<noteq> y # ys", "by auto"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] y # ys \\<and>\n  x # xs \\<noteq> y # ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma acc_le_listI [intro!]:\n  \"acc r \\<Longrightarrow> acc (Listn.le r) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc r \\<Longrightarrow> acc (le r)", "apply (unfold acc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y} \\<Longrightarrow>\n    wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}", "apply (subgoal_tac \"Wellfounded.wf(UN n. {(ys,xs).  size xs = n \\<and> size ys = n \\<and> xs <_(Listn.le r) ys})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n     wf (\\<Union>n.\n            {(ys, xs).\n             length xs = n \\<and>\n             length ys = n \\<and>\n             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})\\<rbrakk>\n    \\<Longrightarrow> wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}\n 2. wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y} \\<Longrightarrow>\n    wf (\\<Union>n.\n           {(ys, xs).\n            length xs = n \\<and>\n            length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (erule wf_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y} \\<Longrightarrow>\n    {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}\n    \\<subseteq> (\\<Union>n.\n                    {(ys, xs).\n                     length xs = n \\<and>\n                     length ys = n \\<and>\n                     xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})\n 2. wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y} \\<Longrightarrow>\n    wf (\\<Union>n.\n           {(ys, xs).\n            length xs = n \\<and>\n            length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (blast intro: lesssub_lengthD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y} \\<Longrightarrow>\n    wf (\\<Union>n.\n           {(ys, xs).\n            length xs = n \\<and>\n            length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys})", "apply (rule wf_UN)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\n 2. \\<And>n j.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; n \\<in> UNIV;\n        j \\<in> UNIV;\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = j \\<and>\n         length ys = j \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = j \\<and>\n                           length ys = j \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n j.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; n \\<in> UNIV;\n        j \\<in> UNIV;\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = j \\<and>\n         length ys = j \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = j \\<and>\n                           length ys = j \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac m n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; m \\<in> UNIV;\n        n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (case_tac \"m=n\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; m \\<in> UNIV;\n        n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m = n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>m n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; m \\<in> UNIV;\n        n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 3. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; m \\<in> UNIV;\n        n \\<in> UNIV;\n        {(ys, xs).\n         length xs = m \\<and>\n         length ys = m \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<noteq>\n        {(ys, xs).\n         length xs = n \\<and>\n         length ys = n \\<and> xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys};\n        m \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> Domain\n                          {(ys, xs).\n                           length xs = m \\<and>\n                           length ys = m \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} \\<inter>\n                         Range\n                          {(ys, xs).\n                           length xs = n \\<and>\n                           length ys = n \\<and>\n                           xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys} =\n                         {}\n 2. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (fast intro!: equals0I dest: not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {(ys, xs).\n                             length xs = n \\<and>\n                             length ys = n \\<and>\n                             xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y};\n        n \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = 0 \\<and>\n                                  length ys = 0 \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\n 2. \\<And>n na.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = na \\<and>\n                 length ys = na \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc na \\<and>\n                                  length ys = Suc na \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (simp add: lesssub_def cong: conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = na \\<and>\n                 length ys = na \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc na \\<and>\n                                  length ys = Suc na \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (rename_tac k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       \\<lbrakk>wf {(y, x). x \\<sqsubset>\\<^bsub>r\\<^esub> y}; n \\<in> UNIV;\n        wf {a. case a of\n               (ys, xs) \\<Rightarrow>\n                 length xs = k \\<and>\n                 length ys = k \\<and>\n                 xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}\\<rbrakk>\n       \\<Longrightarrow> wf {a. case a of\n                                (ys, xs) \\<Rightarrow>\n                                  length xs = Suc k \\<and>\n                                  length ys = Suc k \\<and>\n                                  xs [\\<sqsubset>\\<^bsub>r\\<^esub>] ys}", "apply (simp add: wf_eq_minimal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Q.\n                            (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                            (\\<exists>z\\<in>Q.\n                                \\<forall>y.\n                                   length z = Suc k \\<and>\n                                   length y = Suc k \\<and>\n                                   z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                                   y \\<notin> Q)", "apply (simp (no_asm) add: length_Suc_conv cong: conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Q.\n                            (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                            (\\<exists>z\\<in>Q.\n                                \\<forall>y.\n                                   (\\<exists>y ys.\n z = y # ys \\<and> length ys = k) \\<and>\n                                   (\\<exists>ya ys.\n y = ya # ys \\<and> length ys = k) \\<and>\n                                   z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                                   y \\<notin> Q)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        x \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> Q", "apply (rename_tac M m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (case_tac \"\\<exists>x xs. size xs = k \\<and> x#xs \\<in> M\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>m \\<in> M;\n        \\<nexists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M\n 2. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                          y \\<notin> Q);\n        \\<forall>Q.\n           (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n           (\\<exists>z\\<in>Q.\n               \\<forall>y.\n                  length z = k \\<and>\n                  length y = k \\<and>\n                  z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                  y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule_tac x = \"{a. \\<exists>xs. size xs = k \\<and> a#xs:M}\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        (\\<exists>x.\n            x \\<in> {a. \\<exists>xs.\n                           length xs = k \\<and>\n                           a # xs \\<in> M}) \\<longrightarrow>\n        (\\<exists>z\\<in>{a. \\<exists>xs.\n                               length xs = k \\<and> a # xs \\<in> M}.\n            \\<forall>y.\n               z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n               y \\<notin> {a. \\<exists>xs.\n                                 length xs = k \\<and>\n                                 a # xs \\<in> M})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> {a. \\<exists>xs.\n     length xs = k \\<and> a # xs \\<in> M}\n 2. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M; \\<exists>x xs. length xs = k \\<and> x # xs \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"\\<exists>x xs. P x xs\" for P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = k \\<and>\n                          length y = k \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<exists>z\\<in>{a. \\<exists>xs.\n                              length xs = k \\<and> a # xs \\<in> M}.\n           \\<forall>y.\n              z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n              y \\<notin> {a. \\<exists>xs.\n                                length xs = k \\<and>\n                                a # xs \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and> length ys = k) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and> length ys = k) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m z xs.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = length xs \\<and>\n                          length y = length xs \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<forall>y.\n           z \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        z # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (rename_tac maxA xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          length z = length xs \\<and>\n                          length y = length xs \\<and>\n                          z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                          y \\<notin> Q);\n        m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule_tac x = \"{ys. size ys = size xs \\<and> maxA#ys \\<in> M}\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        (\\<exists>x.\n            x \\<in> {ys.\n                     length ys = length xs \\<and>\n                     maxA # ys \\<in> M}) \\<longrightarrow>\n        (\\<exists>z\\<in>{ys.\n                         length ys = length xs \\<and> maxA # ys \\<in> M}.\n            \\<forall>y.\n               length z = length xs \\<and>\n               length y = length xs \\<and>\n               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n               y \\<notin> {ys.\n                           length ys = length xs \\<and>\n                           maxA # ys \\<in> M})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> {ys.\n                                     length ys = length xs \\<and>\n                                     maxA # ys \\<in> M}\n 2. \\<And>k M m maxA xs.\n       \\<lbrakk>m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<exists>z\\<in>{ys. length ys = length xs \\<and> maxA # ys \\<in> M}.\n           \\<forall>y.\n              length z = length xs \\<and>\n              length y = length xs \\<and>\n              z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n              y \\<notin> {ys.\n                          length ys = length xs \\<and>\n                          maxA # ys \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs.\n       \\<lbrakk>m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<exists>z\\<in>{ys. length ys = length xs \\<and> maxA # ys \\<in> M}.\n           \\<forall>y.\n              length z = length xs \\<and>\n              length y = length xs \\<and>\n              z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n              y \\<notin> {ys.\n                          length ys = length xs \\<and>\n                          maxA # ys \\<in> M}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>m \\<in> M;\n        \\<forall>y.\n           maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n           y \\<notin> {a. \\<exists>xsa.\n                             length xsa = length xs \\<and> a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"m \\<in> M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        maxA # xs \\<in> M;\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (thin_tac \"maxA#xs \\<in> M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>M.\n                            \\<forall>y.\n                               (\\<exists>y ys.\n                                   z = y # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               (\\<exists>ya ys.\n                                   y = ya # ys \\<and>\n                                   length ys = length xs) \\<and>\n                               z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                               y \\<notin> M", "apply (rule bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                ?z205 k M m maxA xs z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            ?z205 k M m maxA xs z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M\n 2. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> ?z205 k M m maxA xs z \\<in> M", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> ?z205 k M m maxA xs z \\<in> M\n 2. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                ?z205 k M m maxA xs z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            ?z205 k M m maxA xs z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z.\n       \\<lbrakk>\\<forall>y.\n                   maxA \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length z = length xs \\<and>\n           length y = length xs \\<and>\n           z [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> maxA # ys \\<in> M};\n        length z = length xs; maxA # z \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (\\<exists>y ys.\n                                maxA # z = y # ys \\<and>\n                                length ys = length xs) \\<and>\n                            (\\<exists>ya ys.\n                                y = ya # ys \\<and>\n                                length ys = length xs) \\<and>\n                            maxA # z \n                            [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n                            y \\<notin> M", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k M m maxA xs z y ya ys yb ysa.\n       \\<lbrakk>\\<forall>y.\n                   ya \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   y \\<notin> {a. \\<exists>xsa.\n                                     length xsa = length xs \\<and>\n                                     a # xsa \\<in> M};\n        \\<forall>y.\n           length ys = length xs \\<and>\n           length y = length xs \\<and>\n           ys [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           y \\<notin> {ys. length ys = length xs \\<and> ya # ys \\<in> M};\n        length ys = length xs; ya # ys \\<in> M;\n        ya # ys [\\<sqsubset>\\<^bsub>r\\<^esub>] yb # ysa;\n        length ys = length xs; length ysa = length xs;\n        yb # ysa \\<in> M\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M xs ya ys yb ysa.\n       \\<lbrakk>\\<forall>y.\n                   ya \\<sqsubset>\\<^bsub>r\\<^esub> y \\<longrightarrow>\n                   (\\<forall>xsa.\n                       length xsa = length xs \\<longrightarrow>\n                       y # xsa \\<notin> M);\n        \\<forall>y.\n           length y = length xs \\<and>\n           ys [\\<sqsubset>\\<^bsub>r\\<^esub>] y \\<longrightarrow>\n           ya # y \\<notin> M;\n        ya # ys \\<in> M;\n        ya \\<sqsubset>\\<^bsub>r\\<^esub> yb \\<and>\n        ys [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ysa \\<or>\n        ya = yb \\<and> ys [\\<sqsubset>\\<^bsub>r\\<^esub>] ysa;\n        length ys = length xs; length ysa = length xs;\n        yb # ysa \\<in> M\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wf_listn: \"wf {(y,x). x \\<sqsubset>\\<^bsub>Listn.le r\\<^esub> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}", "by(insert acc_nodes_le acc_le_listI r_def)  (simp add:acc_def)"], ["", "lemma wf_listn': \"wf {(y,x). x [\\<sqsubset>\\<^sub>r] y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y}", "by (rule wf_listn)"], ["", "lemma wf_listn_termination_rel: \n  \"wf ({(y,x). x \\<sqsubset>\\<^bsub>Listn.le r\\<^esub> y}  <*lex*> (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ({(y, x). x [\\<sqsubset>\\<^bsub>r\\<^esub>] y} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)", "by (insert wf_listn wf_sorted_list)  (fastforce dest:wf_lex_prod)"], ["", "lemma inA_is_sorted: \"xs \\<in> A \\<Longrightarrow> sorted (rev xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> A \\<Longrightarrow> Sorted_Less.sorted (rev xs)", "by (auto simp add:A_def sorted_less_sorted_list_of_set)"], ["", "lemma list_nA_lt_refl: \"xs \\<in> list n A \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "assume \"xs \\<in> list n A\""], ["proof (state)\nthis:\n  xs \\<in> list n A\n\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "then"], ["proof (chain)\npicking this:\n  xs \\<in> list n A", "have \"set xs \\<subseteq> A\""], ["proof (prove)\nusing this:\n  xs \\<in> list n A\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A", "by (rule listE_set)"], ["proof (state)\nthis:\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "then"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> A", "have \"\\<forall>i<length xs. xs!i \\<in> A\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. xs ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length xs. xs ! i \\<in> A\n\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs. xs ! i \\<in> A", "have \"\\<forall>i<length xs. sorted (rev (xs!i))\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs. xs ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. Sorted_Less.sorted (rev (xs ! i))", "by (simp add:inA_is_sorted)"], ["proof (state)\nthis:\n  \\<forall>i<length xs. Sorted_Less.sorted (rev (xs ! i))\n\ngoal (1 subgoal):\n 1. xs \\<in> list n A \\<Longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs. Sorted_Less.sorted (rev (xs ! i))", "show \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs. Sorted_Less.sorted (rev (xs ! i))\n\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs", "by(unfold Listn.le_def lesub_def) \n     (auto simp add:list_all2_conv_all_nth Listn.le_def r_def nodes_le_def)"], ["proof (state)\nthis:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nil_inA: \"[] \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> A", "apply (unfold A_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "apply (subgoal_tac \"{} \\<in> Pow (set nodes)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. {} \\<in> Pow (set nodes) \\<Longrightarrow>\n    [] \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n 2. {} \\<in> Pow (set nodes)", "apply (subgoal_tac \"[] = (\\<lambda>x. rev (sorted_list_of_set x)) {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>{} \\<in> Pow (set nodes);\n     [] = rev (sorted_list_of_set {})\\<rbrakk>\n    \\<Longrightarrow> [] \\<in> (rev \\<circ> sorted_list_of_set) `\n                               Pow (set nodes)\n 2. {} \\<in> Pow (set nodes) \\<Longrightarrow>\n    [] = rev (sorted_list_of_set {})\n 3. {} \\<in> Pow (set nodes)", "apply (fastforce intro:rev_image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {} \\<in> Pow (set nodes) \\<Longrightarrow>\n    [] = rev (sorted_list_of_set {})\n 2. {} \\<in> Pow (set nodes)", "by auto"], ["", "lemma upt_n_in_pow_nodes: \"{0..<n} \\<in> Pow (set nodes)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} \\<in> Pow (set nodes)", "by(auto simp add:n_def nodes_def verts_set)"], ["", "lemma rev_all_inA: \"rev [0..<n] \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [0..<n] \\<in> A", "proof(unfold A_def,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. rev [0..<n]\n    \\<in> (\\<lambda>x. rev (sorted_list_of_set x)) ` Pow (set nodes)", "let ?f = \"\\<lambda>x. rev (sorted_list_of_set x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. rev [0..<n]\n    \\<in> (\\<lambda>x. rev (sorted_list_of_set x)) ` Pow (set nodes)", "have \"rev [0..<n] =?f {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [0..<n] = rev (sorted_list_of_set {0..<n})", "by auto"], ["proof (state)\nthis:\n  rev [0..<n] = rev (sorted_list_of_set {0..<n})\n\ngoal (1 subgoal):\n 1. rev [0..<n]\n    \\<in> (\\<lambda>x. rev (sorted_list_of_set x)) ` Pow (set nodes)", "with upt_n_in_pow_nodes"], ["proof (chain)\npicking this:\n  {0..<n} \\<in> Pow (set nodes)\n  rev [0..<n] = rev (sorted_list_of_set {0..<n})", "show \"rev [0..<n] \\<in> ?f ` Pow (set nodes)\""], ["proof (prove)\nusing this:\n  {0..<n} \\<in> Pow (set nodes)\n  rev [0..<n] = rev (sorted_list_of_set {0..<n})\n\ngoal (1 subgoal):\n 1. rev [0..<n]\n    \\<in> (\\<lambda>x. rev (sorted_list_of_set x)) ` Pow (set nodes)", "by (fastforce intro: image_eqI)"], ["proof (state)\nthis:\n  rev [0..<n]\n  \\<in> (\\<lambda>x. rev (sorted_list_of_set x)) ` Pow (set nodes)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_start_is_n: \"length start = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length start = n", "by (insert len_verts_gt0) (auto simp add:start_def n_def nodes_def dest:Suc_pred)"], ["", "lemma len_start_is_len_verts: \"length start = length (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length start = length (g_V G)", "using len_verts_gt0"], ["proof (prove)\nusing this:\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. length start = length (g_V G)", "by (simp add:start_def)"], ["", "lemma start_len_gt_0: \"length start > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length start", "by (insert len_verts_gt0) (simp add:start_def)"], ["", "lemma start_subset_A: \"set start \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set start \\<subseteq> A", "by(auto simp add:nil_inA rev_all_inA start_def)"], ["", "lemma start_in_A : \"start \\<in> (list n A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start \\<in> list n A", "by (insert start_subset_A len_start_is_n)(fastforce intro:listI)"], ["", "lemma sorted_start_nth: \"i < n \\<Longrightarrow> sorted (rev (start!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> Sorted_Less.sorted (rev (start ! i))", "apply(subgoal_tac \"start!i \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < n; start ! i \\<in> A\\<rbrakk>\n    \\<Longrightarrow> Sorted_Less.sorted (rev (start ! i))\n 2. i < n \\<Longrightarrow> start ! i \\<in> A", "apply (fastforce dest:inA_is_sorted)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> start ! i \\<in> A", "by (auto simp add:start_subset_A  len_start_is_n)"], ["", "lemma start_nth0_empty: \"start!0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start ! 0 = []", "by (simp add:start_def)"], ["", "lemma start_nth_lt0_all: \"\\<forall>p\\<in>{1..< length start}. start!p = (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>{1..<length start}. start ! p = rev [0..<n]", "by (auto simp add:start_def)"], ["", "lemma in_nodes_lt_n: \"x \\<in> set (g_V G) \\<Longrightarrow> x < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (g_V G) \\<Longrightarrow> x < n", "by (simp add:n_def nodes_def verts_set)"], ["", "lemma start_nth0_unstable_auxi: \"\\<not> [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> rev [0..<n]", "by (insert len_verts_gt1 verts_ge_Suc0)\n  (auto simp add:r_def lesssub_def lesub_def nodes_le_def n_def nodes_def)"], ["", "lemma start_nth0_unstable: \"\\<not> stable r step start 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> stable r step start 0", "proof(rule notI,auto simp add: start_nth0_empty stable_def step_def exec_def transf_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n       [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x \\<Longrightarrow>\n    False", "assume ass: \"\\<forall>x\\<in>set (sorted_list_of_set (succs 0)). [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n     [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n       [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x \\<Longrightarrow>\n    False", "from succ_of_entry0"], ["proof (chain)\npicking this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0", "obtain s where \"s \\<in> succs 0\" and \"s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> succs 0;\n         s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using head_is_vert"], ["proof (prove)\nusing this:\n  \\<exists>s. (0, s) \\<in> g_E G \\<and> s \\<noteq> 0\n  (?u, ?v) \\<in> g_E G \\<Longrightarrow> ?v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> succs 0;\n         s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:succs_def)"], ["proof (state)\nthis:\n  s \\<in> succs 0\n  s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n       [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  s \\<in> succs 0\n  s \\<noteq> 0 \\<and> s \\<in> set (g_V G)", "have \"s \\<in> set (sorted_list_of_set (succs 0))\" \n        and \"start!s = (rev [0..<n])\""], ["proof (prove)\nusing this:\n  s \\<in> succs 0\n  s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. s \\<in> set (sorted_list_of_set (succs 0)) &&& start ! s = rev [0..<n]", "using fin_succs verts_set len_verts_gt0"], ["proof (prove)\nusing this:\n  s \\<in> succs 0\n  s \\<noteq> 0 \\<and> s \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  set (g_V G) = {0..<length (g_V G)}\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. s \\<in> set (sorted_list_of_set (succs 0)) &&& start ! s = rev [0..<n]", "by (auto simp add:start_def)"], ["proof (state)\nthis:\n  s \\<in> set (sorted_list_of_set (succs 0))\n  start ! s = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n       [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  s \\<in> set (sorted_list_of_set (succs 0))\n  start ! s = rev [0..<n]", "show False"], ["proof (prove)\nusing this:\n  s \\<in> set (sorted_list_of_set (succs 0))\n  start ! s = rev [0..<n]\n\ngoal (1 subgoal):\n 1. False", "using ass start_nth0_unstable_auxi"], ["proof (prove)\nusing this:\n  s \\<in> set (sorted_list_of_set (succs 0))\n  start ! s = rev [0..<n]\n  \\<forall>x\\<in>set (sorted_list_of_set (succs 0)).\n     [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! x\n  \\<not> [0] \\<sqsubseteq>\\<^bsub>r\\<^esub> rev [0..<n]\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma start_nth_unstable: \n  assumes \"p \\<in> {1 ..< length (g_V G)} \"\n      and \"succs p \\<noteq> {}\"\n    shows \"\\<not> stable r step start p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> stable r step start p", "proof (rule notI, unfold stable_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "let ?step_p = \"step p (start ! p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "let ?rev_all = \"rev[0..<length(g_V G)]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "assume sta: \"\\<forall>(q, \\<tau>)\\<in>set ?step_p. \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q\""], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<in> {1..<length (g_V G)}", "have n_sorted: \"\\<not> sorted (rev (p # ?rev_all))\"    \n                 and p:\"p \\<in> set (g_V G)\" and \"start!p = ?rev_all\""], ["proof (prove)\nusing this:\n  p \\<in> {1..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) &&&\n    p \\<in> set (g_V G) &&& start ! p = rev [0..<length (g_V G)]", "using verts_set"], ["proof (prove)\nusing this:\n  p \\<in> {1..<length (g_V G)}\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) &&&\n    p \\<in> set (g_V G) &&& start ! p = rev [0..<length (g_V G)]", "by (auto simp add:n_def nodes_def start_def sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  p \\<in> set (g_V G)\n  start ! p = rev [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "with sta"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  p \\<in> set (g_V G)\n  start ! p = rev [0..<length (g_V G)]", "have step_p: \"\\<forall>(q, \\<tau>)\\<in>set ?step_p. sorted (rev (p # ?rev_all)) \\<or> (p # ?rev_all = start!q)\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  p \\<in> set (g_V G)\n  start ! p = rev [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n       p # rev [0..<length (g_V G)] = start ! q", "by (auto simp add:step_def exec_def transf_def lesssub_def lesub_def r_def nodes_le_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n     p # rev [0..<length (g_V G)] = start ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "from assms(2) fin_succs p"], ["proof (chain)\npicking this:\n  succs p \\<noteq> {}\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  p \\<in> set (g_V G)", "obtain a b where a_b: \"(a, b) \\<in> set ?step_p\""], ["proof (prove)\nusing this:\n  succs p \\<noteq> {}\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        (a, b) \\<in> set (step p (start ! p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  (a, b) \\<in> set (step p (start ! p))\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "with step_p"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n     p # rev [0..<length (g_V G)] = start ! q\n  (a, b) \\<in> set (step p (start ! p))", "have \"sorted (rev (p # ?rev_all)) \\<or> (p # ?rev_all = start!a)\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n     Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n     p # rev [0..<length (g_V G)] = start ! q\n  (a, b) \\<in> set (step p (start ! p))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n    p # rev [0..<length (g_V G)] = start ! a", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n  p # rev [0..<length (g_V G)] = start ! a\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "with n_sorted"], ["proof (chain)\npicking this:\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n  p # rev [0..<length (g_V G)] = start ! a", "have eq_p_cons: \"(p # ?rev_all = start!a)\""], ["proof (prove)\nusing this:\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)])) \\<or>\n  p # rev [0..<length (g_V G)] = start ! a\n\ngoal (1 subgoal):\n 1. p # rev [0..<length (g_V G)] = start ! a", "by auto"], ["proof (state)\nthis:\n  p # rev [0..<length (g_V G)] = start ! a\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "from p"], ["proof (chain)\npicking this:\n  p \\<in> set (g_V G)", "have \"\\<forall>(q, \\<tau>)\\<in>set ?step_p. q < n\""], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n", "using succ_in_G fin_succs verts_set n_def nodes_def"], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n  \\<forall>v\\<in>succs ?n. v \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "with a_b"], ["proof (chain)\npicking this:\n  (a, b) \\<in> set (step p (start ! p))\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n", "have \"a < n\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (step p (start ! p))\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n\n\ngoal (1 subgoal):\n 1. a < n", "using len_start_is_n"], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (step p (start ! p))\n  \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)). q < n\n  length start = n\n\ngoal (1 subgoal):\n 1. a < n", "by auto"], ["proof (state)\nthis:\n  a < n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  a < n", "have \"sorted (rev (start!a))\""], ["proof (prove)\nusing this:\n  a < n\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (start ! a))", "using sorted_start_nth"], ["proof (prove)\nusing this:\n  a < n\n  ?i < n \\<Longrightarrow> Sorted_Less.sorted (rev (start ! ?i))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (start ! a))", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (start ! a))\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (start ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> start ! q \\<Longrightarrow>\n    False", "with eq_p_cons n_sorted"], ["proof (chain)\npicking this:\n  p # rev [0..<length (g_V G)] = start ! a\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  Sorted_Less.sorted (rev (start ! a))", "show False"], ["proof (prove)\nusing this:\n  p # rev [0..<length (g_V G)] = start ! a\n  \\<not> Sorted_Less.sorted (rev (p # rev [0..<length (g_V G)]))\n  Sorted_Less.sorted (rev (start ! a))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma start_unstable_cond: \n  assumes \"succs p \\<noteq> {} \"\n      and \"p < length (g_V G)\"\n    shows \"\\<not> stable r step start p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> stable r step start p", "using assms start_nth0_unstable start_nth_unstable"], ["proof (prove)\nusing this:\n  succs p \\<noteq> {}\n  p < length (g_V G)\n  \\<not> stable r step start 0\n  \\<lbrakk>?p \\<in> {1..<length (g_V G)}; succs ?p \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<not> stable r step start ?p\n\ngoal (1 subgoal):\n 1. \\<not> stable r step start p", "by(cases \"p = 0\")  auto"], ["", "lemma unstable_start: \"unstables r step start = sorted_list_of_set ({p. succs p \\<noteq> {} \\<and> p < length start})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unstables r step start =\n    sorted_list_of_set {p. succs p \\<noteq> {} \\<and> p < length start}", "using len_start_is_len_verts start_unstable_cond"], ["proof (prove)\nusing this:\n  length start = length (g_V G)\n  \\<lbrakk>succs ?p \\<noteq> {}; ?p < length (g_V G)\\<rbrakk>\n  \\<Longrightarrow> \\<not> stable r step start ?p\n\ngoal (1 subgoal):\n 1. unstables r step start =\n    sorted_list_of_set {p. succs p \\<noteq> {} \\<and> p < length start}", "by (subgoal_tac \"{p. p < length start \\<and> \\<not> stable r step start p} = {p. succs p \\<noteq> {} \\<and> p < length start}\")\n     (auto simp add: unstables_def stable_def step_def exec_def)"], ["", "lemma nth_merges:\n \"\\<And>ss. \\<lbrakk>p < length ss; ss \\<in> list n A; \\<forall>(p,t)\\<in>set ps. p<n \\<and> t\\<in>A \\<rbrakk> \\<Longrightarrow>\n  (merges f ps ss)!p = map snd [(p',t') \\<leftarrow> ps. p'=p] \\<Squnion>\\<^bsub>f\\<^esub> ss!p\"\n  (is \"\\<And>ss. \\<lbrakk>_; _; ?steptype ps\\<rbrakk> \\<Longrightarrow> ?P ss ps\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set ps. p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f ps ss ! p =\n                         map snd (filter (\\<lambda>(p', t'). p' = p) ps) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set ps. p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f ps ss ! p =\n                         map snd (filter (\\<lambda>(p', t'). p' = p) ps) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "proof (induct ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ss.\n       \\<lbrakk>p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set []. p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f [] ss ! p =\n                         map snd (filter (\\<lambda>(p', t'). p' = p) []) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p\n 2. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "show \"\\<And>ss. ?P ss []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       merges f [] ss ! p =\n       map snd\n        (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) []) \n       \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "by simp"], ["proof (state)\nthis:\n  merges f [] ?ss ! p =\n  map snd (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) []) \n  \\<Squnion>\\<^bsub>f\\<^esub> ?ss ! p\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "fix ss p' ps'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "assume ss: \"ss \\<in> list n A\""], ["proof (state)\nthis:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "assume l:  \"p < length ss\""], ["proof (state)\nthis:\n  p < length ss\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "assume \"?steptype (p'#ps')\""], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (p' # ps').\n     case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set (p' # ps').\n     case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A", "obtain a b where\n    p': \"p'=(a,b)\" and ab: \"a<n\" \"b\\<in>A\" and ps': \"?steptype ps'\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (p' # ps').\n     case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>p' = (a, b); a < n; b \\<in> A;\n         \\<forall>a\\<in>set ps'.\n            case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases p') auto"], ["proof (state)\nthis:\n  p' = (a, b)\n  a < n\n  b \\<in> A\n  \\<forall>a\\<in>set ps'.\n     case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "assume \"\\<And>ss. p< length ss \\<Longrightarrow> ss \\<in> list n A \\<Longrightarrow> ?steptype ps' \\<Longrightarrow> ?P ss ps'\""], ["proof (state)\nthis:\n  \\<lbrakk>p < length ?ss; ?ss \\<in> list n A;\n   \\<forall>a\\<in>set ps'.\n      case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\\<rbrakk>\n  \\<Longrightarrow> merges f ps' ?ss ! p =\n                    map snd\n                     (filter\n                       (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n                       ps') \n                    \\<Squnion>\\<^bsub>f\\<^esub> ?ss ! p\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "hence IH: \"\\<And>ss. ss \\<in> list n A \\<Longrightarrow> p < length ss \\<Longrightarrow> ?P ss ps'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>p < length ?ss; ?ss \\<in> list n A;\n   \\<forall>a\\<in>set ps'.\n      case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\\<rbrakk>\n  \\<Longrightarrow> merges f ps' ?ss ! p =\n                    map snd\n                     (filter\n                       (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n                       ps') \n                    \\<Squnion>\\<^bsub>f\\<^esub> ?ss ! p\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> list n A; p < length ss\\<rbrakk>\n       \\<Longrightarrow> merges f ps' ss ! p =\n                         map snd\n                          (filter\n                            (\\<lambda>a.\n                                case a of (p', t') \\<Rightarrow> p' = p)\n                            ps') \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "using ps'"], ["proof (prove)\nusing this:\n  \\<lbrakk>p < length ?ss; ?ss \\<in> list n A;\n   \\<forall>a\\<in>set ps'.\n      case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\\<rbrakk>\n  \\<Longrightarrow> merges f ps' ?ss ! p =\n                    map snd\n                     (filter\n                       (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n                       ps') \n                    \\<Squnion>\\<^bsub>f\\<^esub> ?ss ! p\n  \\<forall>a\\<in>set ps'.\n     case a of (p, t) \\<Rightarrow> p < n \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> list n A; p < length ss\\<rbrakk>\n       \\<Longrightarrow> merges f ps' ss ! p =\n                         map snd\n                          (filter\n                            (\\<lambda>a.\n                                case a of (p', t') \\<Rightarrow> p' = p)\n                            ps') \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "by iprover"], ["proof (state)\nthis:\n  \\<lbrakk>?ss \\<in> list n A; p < length ?ss\\<rbrakk>\n  \\<Longrightarrow> merges f ps' ?ss ! p =\n                    map snd\n                     (filter\n                       (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n                       ps') \n                    \\<Squnion>\\<^bsub>f\\<^esub> ?ss ! p\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "from is_semi"], ["proof (chain)\npicking this:\n  semilat (A, r, f)", "have \"closed  A f\""], ["proof (prove)\nusing this:\n  semilat (A, r, f)\n\ngoal (1 subgoal):\n 1. closed A f", "by (simp add:semilat_def)"], ["proof (state)\nthis:\n  closed A f\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "with ss ab"], ["proof (chain)\npicking this:\n  ss \\<in> list n A\n  a < n\n  b \\<in> A\n  closed A f", "have \"ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss!a] \\<in> list n A\""], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n  a < n\n  b \\<in> A\n  closed A f\n\ngoal (1 subgoal):\n 1. ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A", "by (simp add:closedD)"], ["proof (state)\nthis:\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "moreover"], ["proof (state)\nthis:\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "with l"], ["proof (chain)\npicking this:\n  p < length ss\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A", "have \"p < length (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss!a])\""], ["proof (prove)\nusing this:\n  p < length ss\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A\n\ngoal (1 subgoal):\n 1. p < length (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])", "by simp"], ["proof (state)\nthis:\n  p < length (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "ultimately"], ["proof (chain)\npicking this:\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A\n  p < length (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])", "have \"?P (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss!a]) ps'\""], ["proof (prove)\nusing this:\n  ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \\<in> list n A\n  p < length (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])\n\ngoal (1 subgoal):\n 1. merges f ps' (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) ! p =\n    map snd\n     (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) ps') \n    \\<Squnion>\\<^bsub>f\\<^esub> ss[a := b \n  \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                                p", "by (rule IH)"], ["proof (state)\nthis:\n  merges f ps' (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) ! p =\n  map snd\n   (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) ps') \n  \\<Squnion>\\<^bsub>f\\<^esub> ss[a := b \n\\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                              p\n\ngoal (1 subgoal):\n 1. \\<And>a ps ss.\n       \\<lbrakk>\\<And>ss.\n                   \\<lbrakk>p < length ss; ss \\<in> list n A;\n                    \\<forall>(p, t)\\<in>set ps.\n                       p < n \\<and> t \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> merges f ps ss ! p =\n                                     map snd\n(filter (\\<lambda>(p', t'). p' = p) ps) \n                                     \\<Squnion>\\<^bsub>f\\<^esub> ss ! p;\n        p < length ss; ss \\<in> list n A;\n        \\<forall>(p, t)\\<in>set (a # ps). p < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> merges f (a # ps) ss ! p =\n                         map snd\n                          (filter (\\<lambda>(p', t'). p' = p) (a # ps)) \n                         \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "with p' l"], ["proof (chain)\npicking this:\n  p' = (a, b)\n  p < length ss\n  merges f ps' (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) ! p =\n  map snd\n   (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) ps') \n  \\<Squnion>\\<^bsub>f\\<^esub> ss[a := b \n\\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                              p", "show \"?P ss (p'#ps')\""], ["proof (prove)\nusing this:\n  p' = (a, b)\n  p < length ss\n  merges f ps' (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) ! p =\n  map snd\n   (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p) ps') \n  \\<Squnion>\\<^bsub>f\\<^esub> ss[a := b \n\\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                              p\n\ngoal (1 subgoal):\n 1. merges f (p' # ps') ss ! p =\n    map snd\n     (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n       (p' # ps')) \n    \\<Squnion>\\<^bsub>f\\<^esub> ss ! p", "by simp"], ["proof (state)\nthis:\n  merges f (p' # ps') ss ! p =\n  map snd\n   (filter (\\<lambda>a. case a of (p', t') \\<Rightarrow> p' = p)\n     (p' # ps')) \n  \\<Squnion>\\<^bsub>f\\<^esub> ss ! p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_merges [simp]:\n  \"\\<And>ss. size(merges f ps ss) = size ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss. length (merges f ps ss) = length ss", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss. length (merges f ps ss) = length ss", "by (induct ps, auto)"], ["", "(*>*)"], ["", "lemma merges_preserves_type_lemma:\nshows \"\\<forall>xs. xs \\<in> list n A \\<longrightarrow> (\\<forall>(p,x) \\<in> set ps. p<n \\<and> x\\<in>A) \\<longrightarrow> merges f ps xs \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < n \\<and> x \\<in> A) \\<longrightarrow>\n       merges f ps xs \\<in> list n A", "apply(insert is_semi)"], ["proof (prove)\ngoal (1 subgoal):\n 1. semilat (A, r, f) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < n \\<and> x \\<in> A) \\<longrightarrow>\n       merges f ps xs \\<in> list n A", "apply (unfold semilat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (A, r, f) of\n    (A, r, f) \\<Rightarrow>\n      order r A \\<and>\n      closed A f \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             \\<forall>z\\<in>A.\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                x \\<squnion>\\<^bsub>f\\<^esub> y \n                \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < n \\<and> x \\<in> A) \\<longrightarrow>\n       merges f ps xs \\<in> list n A", "apply (unfold closed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (A, r, f) of\n    (A, r, f) \\<Rightarrow>\n      order r A \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             \\<forall>z\\<in>A.\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                x \\<squnion>\\<^bsub>f\\<^esub> y \n                \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < n \\<and> x \\<in> A) \\<longrightarrow>\n       merges f ps xs \\<in> list n A", "apply (induct ps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. case (A, r, f) of\n    (A, r, f) \\<Rightarrow>\n      order r A \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A. x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             \\<forall>z\\<in>A.\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                x \\<squnion>\\<^bsub>f\\<^esub> y \n                \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n    \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set [].\n           p < n \\<and> x \\<in> A) \\<longrightarrow>\n       merges f [] xs \\<in> list n A\n 2. \\<And>a ps.\n       \\<lbrakk>case (A, r, f) of\n                (A, r, f) \\<Rightarrow>\n                  order r A \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n                    \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n                    \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         \\<forall>z\\<in>A.\n                            x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                            y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                            x \\<squnion>\\<^bsub>f\\<^esub> y \n                            \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>(p, x)\\<in>set ps.\n                       p < n \\<and> x \\<in> A) \\<longrightarrow>\n                   merges f ps xs \\<in> list n A;\n        case (A, r, f) of\n        (A, r, f) \\<Rightarrow>\n          order r A \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n            \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n            \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 \\<forall>z\\<in>A.\n                    x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                    y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                    x \\<squnion>\\<^bsub>f\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>r\\<^esub> z)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list n A \\<longrightarrow>\n                            (\\<forall>(p, x)\\<in>set (a # ps).\n                                p < n \\<and> x \\<in> A) \\<longrightarrow>\n                            merges f (a # ps) xs \\<in> list n A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>case (A, r, f) of\n                (A, r, f) \\<Rightarrow>\n                  order r A \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n                    \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n                    \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n                  (\\<forall>x\\<in>A.\n                      \\<forall>y\\<in>A.\n                         \\<forall>z\\<in>A.\n                            x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                            y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                            x \\<squnion>\\<^bsub>f\\<^esub> y \n                            \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n                \\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (\\<forall>(p, x)\\<in>set ps.\n                       p < n \\<and> x \\<in> A) \\<longrightarrow>\n                   merges f ps xs \\<in> list n A;\n        case (A, r, f) of\n        (A, r, f) \\<Rightarrow>\n          order r A \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 x \\<squnion>\\<^bsub>f\\<^esub> y \\<in> A) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n            \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n            \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n          (\\<forall>x\\<in>A.\n              \\<forall>y\\<in>A.\n                 \\<forall>z\\<in>A.\n                    x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                    y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                    x \\<squnion>\\<^bsub>f\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>r\\<^esub> z)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            xs \\<in> list n A \\<longrightarrow>\n                            (\\<forall>(p, x)\\<in>set (a # ps).\n                                p < n \\<and> x \\<in> A) \\<longrightarrow>\n                            merges f (a # ps) xs \\<in> list n A", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma merges_preserves_type [simp]:\n \"\\<lbrakk> xs \\<in> list n A; \\<forall>(p,x) \\<in> set ps. p<n \\<and> x\\<in>A \\<rbrakk> \\<Longrightarrow> merges f ps xs \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A;\n     \\<forall>(p, x)\\<in>set ps. p < n \\<and> x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> merges f ps xs \\<in> list n A", "by (simp only: merges_preserves_type_lemma)"], ["", "declare sorted_list_of_set_insert[simp del]"], ["", "lemmas [simp] = Let_def Semilat.le_iff_plus_unchanged [OF Semilat.intro, symmetric]"], ["", "lemma decomp_propa: \"\\<And>ss w. \n   (\\<forall>(q,t)\\<in>set qs. q < size ss \\<and> t \\<in> A ) \\<Longrightarrow> \n   sorted w \\<Longrightarrow> \n   set ss \\<subseteq> A \\<Longrightarrow> \n   propa f qs ss w = (merges f qs ss, (sorted_list_of_set ({q. \\<exists>t.(q,t)\\<in>set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (ss!q) \\<noteq> ss!q} \\<union> set w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss w.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set qs. q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f qs ss w =\n                         (merges f qs ss,\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set qs \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss w.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set qs. q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f qs ss w =\n                         (merges f qs ss,\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set qs \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply (induct qs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ss w.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set []. q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f [] ss w =\n                         (merges f [] ss,\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set [] \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))\n 2. \\<And>a qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>(q, t)\\<in>set qs.\n                               q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        \\<forall>(q, t)\\<in>set (a # qs). q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f (a # qs) ss w =\n                         (merges f (a # qs) ss,\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set (a # qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply (fastforce intro:sorted_less_set_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>(q, t)\\<in>set qs.\n                               q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        \\<forall>(q, t)\\<in>set (a # qs). q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f (a # qs) ss w =\n                         (merges f (a # qs) ss,\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set (a # qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>(q, t)\\<in>set qs.\n                               q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        \\<forall>(q, t)\\<in>set (a # qs). q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (case a of\n                          (q, \\<tau>) \\<Rightarrow>\n                            propa f qs\n                             (ss[q := \\<tau> \n\\<squnion>\\<^bsub>f\\<^esub> ss ! q])\n                             (if \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q =\n                                 ss ! q\n                              then w\n                              else sorted_list_of_set (insert q (set w)))) =\n                         (case a of\n                          (p, \\<tau>) \\<Rightarrow>\n                            merges f qs\n                             (ss[p := \\<tau> \n\\<squnion>\\<^bsub>f\\<^esub> ss ! p]),\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   ((q, t) = a \\<or>\n                                    (q, t) \\<in> set qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>(q, t)\\<in>set qs.\n                               q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        \\<forall>(q, t)\\<in>set ((a, b) # qs).\n           q < length ss \\<and> t \\<in> A;\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> propa f qs\n                          (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])\n                          (if b \\<squnion>\\<^bsub>f\\<^esub> ss ! a = ss ! a\n                           then w\n                           else sorted_list_of_set (insert a (set w))) =\n                         (merges f qs\n                           (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]),\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   ((q, t) = (a, b) \\<or>\n                                    (q, t) \\<in> set qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply (simp add: sorted_less_sorted_list_of_set Semilat.closed_f[OF Semilat.intro, OF is_semi])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>x\\<in>set qs.\n                               case x of\n                               (q, t) \\<Rightarrow>\n                                 q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        a < length ss \\<and>\n        b \\<in> A \\<and>\n        (\\<forall>x\\<in>set qs.\n            case x of (q, t) \\<Rightarrow> q < length ss \\<and> t \\<in> A);\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (b \\<squnion>\\<^bsub>f\\<^esub> ss ! a =\n                          ss ! a \\<longrightarrow>\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q, t) \\<in> set qs \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w) =\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q = a \\<and> t = b \\<or>\n                                    (q, t) \\<in> set qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w)) \\<and>\n                         (b \\<squnion>\\<^bsub>f\\<^esub> ss ! a \\<noteq>\n                          ss ! a \\<longrightarrow>\n                          sorted_list_of_set\n                           (insert a\n                             ({q. \\<exists>t.\n                                     (q, t) \\<in> set qs \\<and>\n                                     t \\<squnion>\\<^bsub>f\\<^esub> ss\n                             [a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                             q \\<noteq>\n                                     ss[a :=\n    b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                                     q} \\<union>\n                              set w)) =\n                          sorted_list_of_set\n                           ({q. \\<exists>t.\n                                   (q = a \\<and> t = b \\<or>\n                                    (q, t) \\<in> set qs) \\<and>\n                                   t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                           q \\<noteq>\n                                   ss ! q} \\<union>\n                            set w))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>x\\<in>set qs.\n                               case x of\n                               (q, t) \\<Rightarrow>\n                                 q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        a < length ss \\<and>\n        b \\<in> A \\<and>\n        (\\<forall>x\\<in>set qs.\n            case x of (q, t) \\<Rightarrow> q < length ss \\<and> t \\<in> A);\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> b \\<squnion>\\<^bsub>f\\<^esub> ss ! a =\n                         ss ! a \\<longrightarrow>\n                         sorted_list_of_set\n                          ({q. \\<exists>t.\n                                  (q, t) \\<in> set qs \\<and>\n                                  t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                          q \\<noteq>\n                                  ss ! q} \\<union>\n                           set w) =\n                         sorted_list_of_set\n                          ({q. \\<exists>t.\n                                  (q = a \\<and> t = b \\<or>\n                                   (q, t) \\<in> set qs) \\<and>\n                                  t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                          q \\<noteq>\n                                  ss ! q} \\<union>\n                           set w)\n 2. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>x\\<in>set qs.\n                               case x of\n                               (q, t) \\<Rightarrow>\n                                 q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        a < length ss \\<and>\n        b \\<in> A \\<and>\n        (\\<forall>x\\<in>set qs.\n            case x of (q, t) \\<Rightarrow> q < length ss \\<and> t \\<in> A);\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> b \\<squnion>\\<^bsub>f\\<^esub> ss ! a \\<noteq>\n                         ss ! a \\<longrightarrow>\n                         sorted_list_of_set\n                          (insert a\n                            ({q. \\<exists>t.\n                                    (q, t) \\<in> set qs \\<and>\n                                    t \\<squnion>\\<^bsub>f\\<^esub> ss\n                            [a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                            q \\<noteq>\n                                    ss[a :=\n   b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                                    q} \\<union>\n                             set w)) =\n                         sorted_list_of_set\n                          ({q. \\<exists>t.\n                                  (q = a \\<and> t = b \\<or>\n                                   (q, t) \\<in> set qs) \\<and>\n                                  t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                          q \\<noteq>\n                                  ss ! q} \\<union>\n                           set w)", "apply (blast intro: arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>x\\<in>set qs.\n                               case x of\n                               (q, t) \\<Rightarrow>\n                                 q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        a < length ss \\<and>\n        b \\<in> A \\<and>\n        (\\<forall>x\\<in>set qs.\n            case x of (q, t) \\<Rightarrow> q < length ss \\<and> t \\<in> A);\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> b \\<squnion>\\<^bsub>f\\<^esub> ss ! a \\<noteq>\n                         ss ! a \\<longrightarrow>\n                         sorted_list_of_set\n                          (insert a\n                            ({q. \\<exists>t.\n                                    (q, t) \\<in> set qs \\<and>\n                                    t \\<squnion>\\<^bsub>f\\<^esub> ss\n                            [a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                            q \\<noteq>\n                                    ss[a :=\n   b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] !\n                                    q} \\<union>\n                             set w)) =\n                         sorted_list_of_set\n                          ({q. \\<exists>t.\n                                  (q = a \\<and> t = b \\<or>\n                                   (q, t) \\<in> set qs) \\<and>\n                                  t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                          q \\<noteq>\n                                  ss ! q} \\<union>\n                           set w)", "apply(simp add: nth_list_update)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b qs ss w.\n       \\<lbrakk>\\<And>ss w.\n                   \\<lbrakk>\\<forall>x\\<in>set qs.\n                               case x of\n                               (q, t) \\<Rightarrow>\n                                 q < length ss \\<and> t \\<in> A;\n                    Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n                   \\<Longrightarrow> propa f qs ss w =\n                                     (merges f qs ss,\nsorted_list_of_set\n ({q. \\<exists>t.\n         (q, t) \\<in> set qs \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set w));\n        a < length ss \\<and>\n        b \\<in> A \\<and>\n        (\\<forall>x\\<in>set qs.\n            case x of (q, t) \\<Rightarrow> q < length ss \\<and> t \\<in> A);\n        Sorted_Less.sorted w; set ss \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> b \\<squnion>\\<^bsub>f\\<^esub> ss ! a \\<noteq>\n                         ss ! a \\<longrightarrow>\n                         sorted_list_of_set\n                          (insert a\n                            ({q. (a = q \\<longrightarrow>\n                                  (\\<exists>t.\n(q, t) \\<in> set qs \\<and>\nt \\<squnion>\\<^bsub>f\\<^esub> (b \\<squnion>\\<^bsub>f\\<^esub> ss !\n                       q) \\<noteq>\nb \\<squnion>\\<^bsub>f\\<^esub> ss ! q)) \\<and>\n                                 (a \\<noteq> q \\<longrightarrow>\n                                  (\\<exists>t.\n(q, t) \\<in> set qs \\<and>\nt \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q))} \\<union>\n                             set w)) =\n                         sorted_list_of_set\n                          ({q. \\<exists>t.\n                                  (q = a \\<and> t = b \\<or>\n                                   (q, t) \\<in> set qs) \\<and>\n                                  t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                          q \\<noteq>\n                                  ss ! q} \\<union>\n                           set w)", "by (auto intro: arg_cong)"], ["", "lemma distinct_pair_filter_n: \"distinct (map fst xs) \\<Longrightarrow> a \\<notin> set (map fst xs) \\<Longrightarrow> (map snd (filter (\\<lambda>(x,y). x = a) xs)) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst xs); a \\<notin> set (map fst xs)\\<rbrakk>\n    \\<Longrightarrow> map snd (filter (\\<lambda>(x, y). x = a) xs) = []", "by (induct xs) (auto simp add: distinct_map_filter image_def)"], ["", "lemma map_fst: \"map fst (map (\\<lambda>pc. (pc, x)) xs) =  xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (map (\\<lambda>pc. (pc, x)) xs) = xs", "by (induct xs) auto"], ["", "lemma distinct_p: \"p < n \\<longrightarrow> distinct (map fst (step p (ss!p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))", "let ?qs = \"step p (ss!p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))", "have \"map fst ?qs = (rev (sorted_list_of_set(succs p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (step p (ss ! p)) = rev (sorted_list_of_set (succs p))", "using map_fst[of _ \"(rev (sorted_list_of_set(succs p)))\"]"], ["proof (prove)\nusing this:\n  map fst\n   (map (\\<lambda>pc. (pc, ?x)) (rev (sorted_list_of_set (succs p)))) =\n  rev (sorted_list_of_set (succs p))\n\ngoal (1 subgoal):\n 1. map fst (step p (ss ! p)) = rev (sorted_list_of_set (succs p))", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  map fst (step p (ss ! p)) = rev (sorted_list_of_set (succs p))\n\ngoal (1 subgoal):\n 1. p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))", "then"], ["proof (chain)\npicking this:\n  map fst (step p (ss ! p)) = rev (sorted_list_of_set (succs p))", "show ?thesis"], ["proof (prove)\nusing this:\n  map fst (step p (ss ! p)) = rev (sorted_list_of_set (succs p))\n\ngoal (1 subgoal):\n 1. p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))", "by auto"], ["proof (state)\nthis:\n  p < n \\<longrightarrow> distinct (map fst (step p (ss ! p)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distinct_pair_filter: \"distinct (map fst xs) \\<Longrightarrow> (a,b)\\<in> set xs \\<Longrightarrow> map snd (filter (\\<lambda>x. fst x = a) xs) = [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst xs); (a, b) \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> map snd (filter (\\<lambda>x. fst x = a) xs) = [b]", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (map fst []); (a, b) \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> map snd (filter (\\<lambda>x. fst x = a) []) = [b]\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); (a, b) \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> map snd\n                                   (filter (\\<lambda>x. fst x = a) xs) =\n                                  [b];\n        distinct (map fst (aa # xs)); (a, b) \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> map snd\n                          (filter (\\<lambda>x. fst x = a) (aa # xs)) =\n                         [b]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       \\<lbrakk>\\<lbrakk>distinct (map fst xs); (a, b) \\<in> set xs\\<rbrakk>\n                \\<Longrightarrow> map snd\n                                   (filter (\\<lambda>x. fst x = a) xs) =\n                                  [b];\n        distinct (map fst (aa # xs)); (a, b) \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> map snd\n                          (filter (\\<lambda>x. fst x = a) (aa # xs)) =\n                         [b]", "apply (auto simp add: distinct_map_filter image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>(a, b) \\<in> set xs \\<Longrightarrow>\n                map snd (filter (\\<lambda>x. fst x = a) xs) = [b];\n        \\<forall>x\\<in>set xs. a \\<noteq> fst x;\n        distinct (map fst xs)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x. fst x = a) xs = []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>(a, b) \\<in> set xs \\<Longrightarrow>\n                map snd (filter (\\<lambda>x. fst x = a) xs) = [b];\n        \\<forall>x\\<in>set xs. a \\<noteq> fst x;\n        distinct (map fst xs)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x. fst x = a) xs = []", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>(a, b) \\<in> set xs \\<Longrightarrow>\n                map snd (filter (\\<lambda>x. fst x = a) xs) = [b];\n        \\<forall>x\\<in>set xs. a \\<noteq> fst x;\n        distinct (map fst xs)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x. fst x = a) xs = []", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>(a, b) \\<in> set xs \\<Longrightarrow>\n                map snd (filter (\\<lambda>x. fst x = a) xs) = [b];\n        \\<forall>x\\<in>set xs. a \\<noteq> fst x;\n        distinct (map fst xs)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x. fst x = a) xs = []", "assume \"\\<forall>x\\<in>set xs. a \\<noteq> fst x \" and \" distinct (map fst xs)\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>set xs. a \\<noteq> fst x\n  distinct (map fst xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>(a, b) \\<in> set xs \\<Longrightarrow>\n                map snd (filter (\\<lambda>x. fst x = a) xs) = [b];\n        \\<forall>x\\<in>set xs. a \\<noteq> fst x;\n        distinct (map fst xs)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x. fst x = a) xs = []", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set xs. a \\<noteq> fst x\n  distinct (map fst xs)", "show \"filter (\\<lambda>x. fst x = a) xs = []\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. a \\<noteq> fst x\n  distinct (map fst xs)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. fst x = a) xs = []", "by (induct xs)  auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x. fst x = a) xs = []\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set ?xsa2. a \\<noteq> fst x;\n   distinct (map fst ?xsa2)\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>x. fst x = a) ?xsa2 = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_comp_eq_pair: \"(\\<lambda>x. fst x = a) = (\\<lambda>(x,y). x = a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. fst x = a) = (\\<lambda>(x, y). x = a)", "by (rule split_comp_eq)"], ["", "lemma distinct_pair_filter': \"distinct (map fst xs) \\<Longrightarrow> (a,b)\\<in> set xs \\<Longrightarrow> (map snd (filter (\\<lambda>(x,y). x = a) xs)) = [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst xs); (a, b) \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> map snd (filter (\\<lambda>(x, y). x = a) xs) = [b]", "using distinct_pair_filter"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct (map fst ?xs); (?a, ?b) \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> map snd (filter (\\<lambda>x. fst x = ?a) ?xs) = [?b]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst xs); (a, b) \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> map snd (filter (\\<lambda>(x, y). x = a) xs) = [b]", "by (simp only: split_comp_eq_pair)"], ["", "lemma merges_property1: \n  fixes ss w qs\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and subset_ss_A:       \"set ss \\<subseteq> A \"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n    shows \"\\<forall>(q, \\<tau>) \\<in> set qs. merges f qs ss!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "assume \"x \\<in> set qs\""], ["proof (state)\nthis:\n  x \\<in> set qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "from dist"], ["proof (chain)\npicking this:\n  distinct (map fst qs)", "have \\<tau>: \"\\<forall>(q, \\<tau>) \\<in> set qs. (map snd (filter (\\<lambda>(x,y). x = q) qs)) = [\\<tau>]\""], ["proof (prove)\nusing this:\n  distinct (map fst qs)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       map snd (filter (\\<lambda>(x, y). x = q) qs) = [\\<tau>]", "using distinct_pair_filter'"], ["proof (prove)\nusing this:\n  distinct (map fst qs)\n  \\<lbrakk>distinct (map fst ?xs); (?a, ?b) \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> map snd (filter (\\<lambda>(x, y). x = ?a) ?xs) = [?b]\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       map snd (filter (\\<lambda>(x, y). x = q) qs) = [\\<tau>]", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     map snd (filter (\\<lambda>(x, y). x = q) qs) = [\\<tau>]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "from len_ss_n subset_ss_A"], ["proof (chain)\npicking this:\n  length ss = n\n  set ss \\<subseteq> A", "have \"ss \\<in> list n A\""], ["proof (prove)\nusing this:\n  length ss = n\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A", "by (rule listI)"], ["proof (state)\nthis:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "with step_bounded_pres"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  ss \\<in> list n A", "have merge_nth: \"\\<forall>(q, \\<tau>) \\<in> set qs. (merges f qs ss)!q = map snd [(p',t') \\<leftarrow> qs. p'=q] \\<Squnion>\\<^bsub>f\\<^esub> ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       merges f qs ss ! q =\n       map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n       \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "by (fastforce intro:nth_merges) \\<comment> \\<open>use lemma:  listE_length\\<close>"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q =\n     map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n     \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "with \\<tau>"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     map snd (filter (\\<lambda>(x, y). x = q) qs) = [\\<tau>]\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q =\n     map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n     \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "have \"\\<forall>(q, \\<tau>) \\<in> set qs. (merges f qs ss)!q = [\\<tau>]\\<Squnion>\\<^bsub>f\\<^esub> ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     map snd (filter (\\<lambda>(x, y). x = q) qs) = [\\<tau>]\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q =\n     map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n     \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       merges f qs ss ! q = [\\<tau>] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q = [\\<tau>] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set qs \\<Longrightarrow>\n       case x of\n       (q, \\<tau>) \\<Rightarrow>\n         merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "then"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q = [\\<tau>] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "show \"case x of (q, \\<tau>) \\<Rightarrow> merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q = [\\<tau>] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. case x of\n    (q, \\<tau>) \\<Rightarrow>\n      merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "using `x \\<in> set qs`"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs.\n     merges f qs ss ! q = [\\<tau>] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n  x \\<in> set qs\n\ngoal (1 subgoal):\n 1. case x of\n    (q, \\<tau>) \\<Rightarrow>\n      merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by auto"], ["proof (state)\nthis:\n  case x of\n  (q, \\<tau>) \\<Rightarrow>\n    merges f qs ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_property1: \n  fixes ss w qs\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A  \"\n      and sorted_w:          \"sorted (w ::nat list)\"\n      and subset_ss_A:       \"set ss \\<subseteq> A \"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n    shows \"\\<forall>(q, \\<tau>) \\<in> set qs. (fst(propa f qs ss w))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       fst (propa f qs ss w) ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted w\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst qs)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set qs.\n       fst (propa f qs ss w) ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "apply (subgoal_tac \"fst (propa f qs ss w) = merges f qs ss\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs); fst (propa f qs ss w) = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(q, \\<tau>)\\<in>set qs.\n                         fst (propa f qs ss w) ! q =\n                         \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n 2. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs)\\<rbrakk>\n    \\<Longrightarrow> fst (propa f qs ss w) = merges f qs ss", "apply(simp add: merges_property1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs)\\<rbrakk>\n    \\<Longrightarrow> fst (propa f qs ss w) = merges f qs ss", "by (auto dest:decomp_propa)"], ["", "lemma merges_property2: \n  fixes ss w qs q\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and subset_ss_A:       \"set ss \\<subseteq> A\"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n      and q_nin:             \"q \\<notin> set(map fst qs) \"\n      and q_lt_len_ss:       \"q < length ss \"\n    shows \"(merges f qs ss)!q = ss!q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "from len_ss_n subset_ss_A"], ["proof (chain)\npicking this:\n  length ss = n\n  set ss \\<subseteq> A", "have \"ss \\<in> list n A\""], ["proof (prove)\nusing this:\n  length ss = n\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A", "by (rule listI)"], ["proof (state)\nthis:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "with step_bounded_pres q_lt_len_ss"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  q < length ss\n  ss \\<in> list n A", "have merge_nth: \"(merges f qs ss)!q = map snd [(p',t') \\<leftarrow> qs. p'=q] \\<Squnion>\\<^bsub>f\\<^esub> ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  q < length ss\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q =\n    map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n    \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "by (fastforce intro:nth_merges)"], ["proof (state)\nthis:\n  merges f qs ss ! q =\n  map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n  \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "from dist"], ["proof (chain)\npicking this:\n  distinct (map fst qs)", "have \"q \\<notin> set(map fst qs) \\<Longrightarrow> (map snd (filter (\\<lambda>(x,y). x = q) qs)) = []\""], ["proof (prove)\nusing this:\n  distinct (map fst qs)\n\ngoal (1 subgoal):\n 1. q \\<notin> set (map fst qs) \\<Longrightarrow>\n    map snd (filter (\\<lambda>(x, y). x = q) qs) = []", "using distinct_pair_filter_n"], ["proof (prove)\nusing this:\n  distinct (map fst qs)\n  \\<lbrakk>distinct (map fst ?xs); ?a \\<notin> set (map fst ?xs)\\<rbrakk>\n  \\<Longrightarrow> map snd (filter (\\<lambda>(x, y). x = ?a) ?xs) = []\n\ngoal (1 subgoal):\n 1. q \\<notin> set (map fst qs) \\<Longrightarrow>\n    map snd (filter (\\<lambda>(x, y). x = q) qs) = []", "by fastforce"], ["proof (state)\nthis:\n  q \\<notin> set (map fst qs) \\<Longrightarrow>\n  map snd (filter (\\<lambda>(x, y). x = q) qs) = []\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "with merge_nth q_nin"], ["proof (chain)\npicking this:\n  merges f qs ss ! q =\n  map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n  \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n  q \\<notin> set (map fst qs)\n  q \\<notin> set (map fst qs) \\<Longrightarrow>\n  map snd (filter (\\<lambda>(x, y). x = q) qs) = []", "have \"(merges f qs ss)!q = []\\<Squnion>\\<^bsub>f\\<^esub> ss!q\""], ["proof (prove)\nusing this:\n  merges f qs ss ! q =\n  map snd (filter (\\<lambda>(p', t'). p' = q) qs) \n  \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n  q \\<notin> set (map fst qs)\n  q \\<notin> set (map fst qs) \\<Longrightarrow>\n  map snd (filter (\\<lambda>(x, y). x = q) qs) = []\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = [] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "by fastforce"], ["proof (state)\nthis:\n  merges f qs ss ! q = [] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "then"], ["proof (chain)\npicking this:\n  merges f qs ss ! q = [] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q", "show \"(merges f qs ss)!q =  ss ! q\""], ["proof (prove)\nusing this:\n  merges f qs ss ! q = [] \\<Squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. merges f qs ss ! q = ss ! q", "by auto"], ["proof (state)\nthis:\n  merges f qs ss ! q = ss ! q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_property2: \n  fixes ss w qs q\n  assumes step_bounded_pres: \"\\<forall>(q, \\<tau>) \\<in> set qs. q < size ss \\<and> \\<tau> \\<in> A\"\n      and sorted_w:          \"sorted (w ::nat list)\"\n      and subset_ss_A:       \"set ss \\<subseteq> A\"\n      and len_ss_n:          \"length ss = n \"\n      and dist:              \"distinct (map fst qs) \"\n      and q_nin:             \"q \\<notin> set(map fst qs) \"\n      and q_lt_len_ss:       \"q < length ss \"\n    shows \"(fst(propa f qs ss w))!q = ss!q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (propa f qs ss w) ! q = ss ! q", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set qs. q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted w\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst qs)\n  q \\<notin> set (map fst qs)\n  q < length ss\n\ngoal (1 subgoal):\n 1. fst (propa f qs ss w) ! q = ss ! q", "apply (subgoal_tac \"fst (propa f qs ss w) = merges f qs ss\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs); q \\<notin> set (map fst qs); q < length ss;\n     fst (propa f qs ss w) = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> fst (propa f qs ss w) ! q = ss ! q\n 2. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs); q \\<notin> set (map fst qs);\n     q < length ss\\<rbrakk>\n    \\<Longrightarrow> fst (propa f qs ss w) = merges f qs ss", "apply(simp add: merges_property2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set qs.\n                q < length ss \\<and> \\<tau> \\<in> A;\n     Sorted_Less.sorted w; set ss \\<subseteq> A; length ss = n;\n     distinct (map fst qs); q \\<notin> set (map fst qs);\n     q < length ss\\<rbrakk>\n    \\<Longrightarrow> fst (propa f qs ss w) = merges f qs ss", "by (auto dest:decomp_propa)"], ["", "lemma merges_incr_lemma:\n \"\\<forall>xs. xs \\<in> list n A \\<longrightarrow> distinct (map fst ps) \\<longrightarrow> (\\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x \\<in> A) \\<longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       distinct (map fst ps) \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n       xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "assume xs_inA: \"xs \\<in> list n A \" \n     and step_bounded_pres: \"\\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\"\n     and dist: \"distinct (map fst ps)\""], ["proof (state)\nthis:\n  xs \\<in> list n A\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "then"], ["proof (chain)\npicking this:\n  xs \\<in> list n A\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)", "have len_xs_n: \"length xs = n\" and subset_xs_inA: \"set xs \\<subseteq> A\""], ["proof (prove)\nusing this:\n  xs \\<in> list n A\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n\ngoal (1 subgoal):\n 1. length xs = n &&& set xs \\<subseteq> A", "by (auto simp add:listE_length)"], ["proof (state)\nthis:\n  length xs = n\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "with step_bounded_pres dist"], ["proof (chain)\npicking this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A", "have merge1: \"\\<forall>(q, \\<tau>) \\<in> set ps. (merges f ps xs)!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>xs!q\""], ["proof (prove)\nusing this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set ps.\n       merges f ps xs ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> xs ! q", "using merges_property1"], ["proof (prove)\nusing this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A\n  \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set ?qs.\n              q < length ?ss \\<and> \\<tau> \\<in> A;\n   set ?ss \\<subseteq> A; length ?ss = n; distinct (map fst ?qs)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>(q, \\<tau>)\\<in>set ?qs.\n                       merges f ?qs ?ss ! q =\n                       \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ?ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set ps.\n       merges f ps xs ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> xs ! q", "by auto"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set ps.\n     merges f ps xs ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> xs ! q\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "from step_bounded_pres dist len_xs_n subset_xs_inA"], ["proof (chain)\npicking this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A", "have merge2: \"\\<And>q. q \\<notin> set(map fst ps) \\<longrightarrow> q < length xs \\<longrightarrow> (merges f ps xs)!q = xs!q\""], ["proof (prove)\nusing this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<notin> set (map fst ps) \\<longrightarrow>\n       q < length xs \\<longrightarrow> merges f ps xs ! q = xs ! q", "using merges_property2"], ["proof (prove)\nusing this:\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n  distinct (map fst ps)\n  length xs = n\n  set xs \\<subseteq> A\n  \\<lbrakk>\\<forall>(q, \\<tau>)\\<in>set ?qs.\n              q < length ?ss \\<and> \\<tau> \\<in> A;\n   set ?ss \\<subseteq> A; length ?ss = n; distinct (map fst ?qs);\n   ?q \\<notin> set (map fst ?qs); ?q < length ?ss\\<rbrakk>\n  \\<Longrightarrow> merges f ?qs ?ss ! ?q = ?ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<notin> set (map fst ps) \\<longrightarrow>\n       q < length xs \\<longrightarrow> merges f ps xs ! q = xs ! q", "by auto"], ["proof (state)\nthis:\n  ?q \\<notin> set (map fst ps) \\<longrightarrow>\n  ?q < length xs \\<longrightarrow> merges f ps xs ! ?q = xs ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "have len_eq: \"length xs = length (merges f ps xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length (merges f ps xs)", "by simp"], ["proof (state)\nthis:\n  length xs = length (merges f ps xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "have \"\\<forall>i<length xs. xs!i \\<sqsubseteq>\\<^bsub>r\\<^esub> (merges f ps xs)!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length xs.\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "assume i_lt_len_xs: \"i < length xs\""], ["proof (state)\nthis:\n  i < length xs\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "with xs_inA"], ["proof (chain)\npicking this:\n  xs \\<in> list n A\n  i < length xs", "have xs_i_inA: \"xs!i \\<in> A\""], ["proof (prove)\nusing this:\n  xs \\<in> list n A\n  i < length xs\n\ngoal (1 subgoal):\n 1. xs ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  xs ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "show \" xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> (merges f ps xs) ! i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "proof(cases \"i \\<in> set (map fst ps)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n 2. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "case True"], ["proof (state)\nthis:\n  i \\<in> set (map fst ps)\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n 2. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "then"], ["proof (chain)\npicking this:\n  i \\<in> set (map fst ps)", "obtain s' where s': \"(i, s') \\<in> set ps\""], ["proof (prove)\nusing this:\n  i \\<in> set (map fst ps)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        (i, s') \\<in> set ps \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (i, s') \\<in> set ps\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n 2. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "with merge1"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set ps.\n     merges f ps xs ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> xs ! q\n  (i, s') \\<in> set ps", "have merge1': \"(merges f ps xs)!i = s' \\<squnion>\\<^bsub>f\\<^esub> xs ! i\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set ps.\n     merges f ps xs ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> xs ! q\n  (i, s') \\<in> set ps\n\ngoal (1 subgoal):\n 1. merges f ps xs ! i = s' \\<squnion>\\<^bsub>f\\<^esub> xs ! i", "by auto"], ["proof (state)\nthis:\n  merges f ps xs ! i = s' \\<squnion>\\<^bsub>f\\<^esub> xs ! i\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n 2. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "from s' step_bounded_pres"], ["proof (chain)\npicking this:\n  (i, s') \\<in> set ps\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A", "have \"s' \\<in> A\""], ["proof (prove)\nusing this:\n  (i, s') \\<in> set ps\n  \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\n\ngoal (1 subgoal):\n 1. s' \\<in> A", "by auto"], ["proof (state)\nthis:\n  s' \\<in> A\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n 2. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "with xs_i_inA merge1'"], ["proof (chain)\npicking this:\n  xs ! i \\<in> A\n  merges f ps xs ! i = s' \\<squnion>\\<^bsub>f\\<^esub> xs ! i\n  s' \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  xs ! i \\<in> A\n  merges f ps xs ! i = s' \\<squnion>\\<^bsub>f\\<^esub> xs ! i\n  s' \\<in> A\n\ngoal (1 subgoal):\n 1. xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by (auto intro: Semilat.ub2[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "case False"], ["proof (state)\nthis:\n  i \\<notin> set (map fst ps)\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "note i_nin = this"], ["proof (state)\nthis:\n  i \\<notin> set (map fst ps)\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "with i_lt_len_xs merge2"], ["proof (chain)\npicking this:\n  i < length xs\n  ?q \\<notin> set (map fst ps) \\<longrightarrow>\n  ?q < length xs \\<longrightarrow> merges f ps xs ! ?q = xs ! ?q\n  i \\<notin> set (map fst ps)", "have \"(merges f ps xs)!i = xs!i\""], ["proof (prove)\nusing this:\n  i < length xs\n  ?q \\<notin> set (map fst ps) \\<longrightarrow>\n  ?q < length xs \\<longrightarrow> merges f ps xs ! ?q = xs ! ?q\n  i \\<notin> set (map fst ps)\n\ngoal (1 subgoal):\n 1. merges f ps xs ! i = xs ! i", "by auto"], ["proof (state)\nthis:\n  merges f ps xs ! i = xs ! i\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst ps) \\<Longrightarrow>\n    xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "with xs_i_inA"], ["proof (chain)\npicking this:\n  xs ! i \\<in> A\n  merges f ps xs ! i = xs ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  xs ! i \\<in> A\n  merges f ps xs ! i = xs ! i\n\ngoal (1 subgoal):\n 1. xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by (auto simp add:Semilat.refl_r[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "have \"\\<forall>i<length xs. xs!i \\<sqsubseteq>\\<^bsub>r\\<^esub> (merges f ps xs)!i\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs.\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "have \"\\<forall>i<length xs. lesub (xs!i) r  ((merges f ps xs)!i)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs.\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by (auto simp add:lesssub_def lesub_def)"], ["proof (state)\nthis:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "have  \"\\<forall>i<length xs. (\\<lambda>x y. lesub x r y) (xs!i)((merges f ps xs)!i)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs.\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "have nth_lt: \"\\<And>i. i <length xs \\<Longrightarrow>  (\\<lambda>x y. lesub x r y) (xs!i)((merges f ps xs)!i)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length xs.\n     xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! i", "by simp"], ["proof (state)\nthis:\n  ?i < length xs \\<Longrightarrow>\n  xs ! ?i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n        \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "with len_eq"], ["proof (chain)\npicking this:\n  length xs = length (merges f ps xs)\n  ?i < length xs \\<Longrightarrow>\n  xs ! ?i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! ?i", "show \"xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\""], ["proof (prove)\nusing this:\n  length xs = length (merges f ps xs)\n  ?i < length xs \\<Longrightarrow>\n  xs ! ?i \\<sqsubseteq>\\<^bsub>r\\<^esub> merges f ps xs ! ?i\n\ngoal (1 subgoal):\n 1. xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "by (auto simp only:list_all2_conv_all_nth Listn.le_def lesssub_def lesub_def)"], ["proof (state)\nthis:\n  xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma merges_incr:\n \"\\<lbrakk> xs \\<in> list n A; distinct (map fst ps); \\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x \\<in> A \\<rbrakk> \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> list n A; distinct (map fst ps);\n     \\<forall>(p, x)\\<in>set ps. p < length xs \\<and> x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f ps xs", "by (simp add: merges_incr_lemma)"], ["", "lemma merges_same_conv [rule_format]:\n \"(\\<forall>xs. xs \\<in> list n A \\<longrightarrow> distinct (map fst ps) \\<longrightarrow>\n        (\\<forall>(p,x)\\<in>set ps. p<size xs \\<and> x\\<in>A) \\<longrightarrow> \n        (merges f ps xs = xs) = (\\<forall>(p,x)\\<in>set ps. x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs!p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       distinct (map fst ps) \\<longrightarrow>\n       (\\<forall>(p, x)\\<in>set ps.\n           p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n       (merges f ps xs = xs) =\n       (\\<forall>(p, x)\\<in>set ps. x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)", "apply (induct_tac ps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>xs.\n       xs \\<in> list n A \\<longrightarrow>\n       distinct (map fst []) \\<longrightarrow>\n       (\\<forall>a\\<in>set [].\n           case a of\n           (p, x) \\<Rightarrow>\n             p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n       (merges f [] xs = xs) =\n       (\\<forall>a\\<in>set [].\n           case a of\n           (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\n 2. \\<And>a lista.\n       \\<forall>xs.\n          xs \\<in> list n A \\<longrightarrow>\n          distinct (map fst lista) \\<longrightarrow>\n          (\\<forall>a\\<in>set lista.\n              case a of\n              (p, x) \\<Rightarrow>\n                p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n          (merges f lista xs = xs) =\n          (\\<forall>a\\<in>set lista.\n              case a of\n              (p, x) \\<Rightarrow>\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p) \\<Longrightarrow>\n       \\<forall>xs.\n          xs \\<in> list n A \\<longrightarrow>\n          distinct (map fst (a # lista)) \\<longrightarrow>\n          (\\<forall>a\\<in>set (a # lista).\n              case a of\n              (p, x) \\<Rightarrow>\n                p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n          (merges f (a # lista) xs = xs) =\n          (\\<forall>a\\<in>set (a # lista).\n              case a of\n              (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a lista.\n       \\<forall>xs.\n          xs \\<in> list n A \\<longrightarrow>\n          distinct (map fst lista) \\<longrightarrow>\n          (\\<forall>a\\<in>set lista.\n              case a of\n              (p, x) \\<Rightarrow>\n                p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n          (merges f lista xs = xs) =\n          (\\<forall>a\\<in>set lista.\n              case a of\n              (p, x) \\<Rightarrow>\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p) \\<Longrightarrow>\n       \\<forall>xs.\n          xs \\<in> list n A \\<longrightarrow>\n          distinct (map fst (a # lista)) \\<longrightarrow>\n          (\\<forall>a\\<in>set (a # lista).\n              case a of\n              (p, x) \\<Rightarrow>\n                p < length xs \\<and> x \\<in> A) \\<longrightarrow>\n          (merges f (a # lista) xs = xs) =\n          (\\<forall>a\\<in>set (a # lista).\n              case a of\n              (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b lista xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f lista xs = xs) =\n                   (\\<forall>x\\<in>set lista.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; a \\<notin> fst ` set lista;\n        distinct (map fst lista);\n        \\<forall>x\\<in>set lista.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        a < n; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (merges f lista\n                           (xs[a := b \\<squnion>\\<^bsub>f\\<^esub> xs ! a]) =\n                          xs) =\n                         (b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a \\<and>\n                          (\\<forall>x\\<in>set lista.\n                              case x of\n                              (p, x) \\<Rightarrow>\n                                x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p))", "apply (rename_tac p x ps xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (merges f ps\n                           (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                          xs) =\n                         (x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n                          (\\<forall>x\\<in>set ps.\n                              case x of\n                              (p, x) \\<Rightarrow>\n                                x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n        xs\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n                         (\\<forall>x\\<in>set ps.\n                             case x of\n                             (p, x) \\<Rightarrow>\n                               x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (rule context_conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n        xs\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (subgoal_tac \"xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs!p] [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p] \n        [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n        xs\\<rbrakk>\n       \\<Longrightarrow> xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 4. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (fastforce dest!: le_listD \n            simp add: nth_list_update Semilat.plus_le_conv[OF Semilat.intro,OF is_semi] \n                      Semilat.ub1[OF Semilat.intro,OF is_semi] \n                      Semilat.ub2[OF Semilat.intro,OF is_semi]\nSemilat.lub[OF Semilat.intro,OF is_semi] \n )"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n        xs\\<rbrakk>\n       \\<Longrightarrow> xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] xs\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (erule subst, rule merges_incr)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]\n                         \\<in> list n A\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst ps)\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(pa, xa)\\<in>set ps.\n                            pa < length\n                                  (xs[p :=\n  x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) \\<and>\n                            xa \\<in> A\n 4. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 5. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (blast intro!: listE_set intro: closedD listE_length [THEN nth_in]\n                            Semilat.closed_f[OF Semilat.intro, OF is_semi])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst ps)\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(pa, xa)\\<in>set ps.\n                            pa < length\n                                  (xs[p :=\n  x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) \\<and>\n                            xa \\<in> A\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 4. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(pa, xa)\\<in>set ps.\n                            pa < length\n                                  (xs[p :=\n  x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) \\<and>\n                            xa \\<in> A\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply(intro strip)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs xa.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; xa \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> case xa of\n                         (pa, xa) \\<Rightarrow>\n                           pa < length\n                                 (xs[p :=\n x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) \\<and>\n                           xa \\<in> A\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set ps.\n                            case x of\n                            (p, x) \\<Rightarrow>\n                              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p \\<and>\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        (a, b) \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (erule allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        ?xs57 p x ps xs a b \\<in> list n A \\<longrightarrow>\n        (merges f ps (?xs57 p x ps xs a b) = ?xs57 p x ps xs a b) =\n        (\\<forall>xa\\<in>set ps.\n            case xa of\n            (pa, xa) \\<Rightarrow>\n              xa \\<sqsubseteq>\\<^bsub>r\\<^esub> ?xs57 p x ps xs a b !\n          pa)\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        (a, b) \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> ?xs57 p x ps xs a b \\<in> list n A\n 2. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        (merges f ps (?xs57 p x ps xs a b) = ?xs57 p x ps xs a b) =\n        (\\<forall>xa\\<in>set ps.\n            case xa of\n            (pa, xa) \\<Rightarrow>\n              xa \\<sqsubseteq>\\<^bsub>r\\<^esub> ?xs57 p x ps xs a b !\n          pa)\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        (merges f ps xs = xs) =\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (drule bspec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps); p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        (merges f ps xs = xs) =\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow>\n              x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p)\\<rbrakk>\n       \\<Longrightarrow> ?x62 p x ps xs a b \\<in> set ps\n 2. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps); p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        (merges f ps xs = xs) =\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        case ?x62 p x ps xs a b of\n        (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 3. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps); p < n; x \\<in> A;\n        merges f ps (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) = xs;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        (merges f ps xs = xs) =\n        (\\<forall>x\\<in>set ps.\n            case x of\n            (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        case (a, b) of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (simp add: Semilat.le_iff_plus_unchanged [OF Semilat.intro, OF is_semi, THEN iffD1] list_update_same_conv [THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x ps xs a b.\n       \\<lbrakk>xs \\<in> list n A; p \\<notin> fst ` set ps;\n        distinct (map fst ps); p < n; x \\<in> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p; (a, b) \\<in> set ps;\n        merges f ps xs = xs; a < n \\<and> b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! a\n 2. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x ps xs.\n       \\<lbrakk>\\<forall>xs.\n                   xs \\<in> list n A \\<longrightarrow>\n                   (merges f ps xs = xs) =\n                   (\\<forall>x\\<in>set ps.\n                       case x of\n                       (p, x) \\<Rightarrow>\n                         x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p);\n        xs \\<in> list n A; p \\<notin> fst ` set ps; distinct (map fst ps);\n        \\<forall>x\\<in>set ps.\n           case x of (p, x) \\<Rightarrow> p < n \\<and> x \\<in> A;\n        p < n; x \\<in> A; x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, x) \\<Rightarrow>\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> xs ! p\\<rbrakk>\n       \\<Longrightarrow> merges f ps\n                          (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) =\n                         xs", "apply (simp add: Semilat.le_iff_plus_unchanged[OF Semilat.intro, OF is_semi, THEN iffD1] list_update_same_conv [THEN iffD2])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma list_update_le_listI [rule_format]:\n  \"set xs \\<subseteq> A \\<longrightarrow> set ys \\<subseteq> A \\<longrightarrow> xs [\\<sqsubseteq>\\<^sub>r] ys \\<longrightarrow> p < size xs \\<longrightarrow>  \n   x \\<sqsubseteq>\\<^sub>r ys!p \\<longrightarrow> semilat(A,r,f) \\<longrightarrow> x\\<in>A \\<longrightarrow> \n   xs[p := x \\<squnion>\\<^sub>f xs!p] [\\<sqsubseteq>\\<^sub>r] ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A \\<longrightarrow>\n    set ys \\<subseteq> A \\<longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<longrightarrow>\n    p < length xs \\<longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p \\<longrightarrow>\n    semilat (A, r, f) \\<longrightarrow>\n    x \\<in> A \\<longrightarrow>\n    xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p] \n    [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A \\<longrightarrow>\n    set ys \\<subseteq> A \\<longrightarrow>\n    xs [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys \\<longrightarrow>\n    p < length xs \\<longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>r\\<^esub> ys ! p \\<longrightarrow>\n    semilat (A, r, f) \\<longrightarrow>\n    x \\<in> A \\<longrightarrow>\n    xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p] \n    [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ys", "apply (simp only: Listn.le_def lesub_def semilat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A \\<longrightarrow>\n    set ys \\<subseteq> A \\<longrightarrow>\n    list_all2 r xs ys \\<longrightarrow>\n    p < length xs \\<longrightarrow>\n    r x (ys ! p) \\<longrightarrow>\n    (case (A, r, f) of\n     (A, r, f) \\<Rightarrow>\n       order r A \\<and>\n       closed A f \\<and>\n       (\\<forall>x\\<in>A.\n           \\<forall>y\\<in>A. r x (x \\<squnion>\\<^bsub>f\\<^esub> y)) \\<and>\n       (\\<forall>x\\<in>A.\n           \\<forall>y\\<in>A. r y (x \\<squnion>\\<^bsub>f\\<^esub> y)) \\<and>\n       (\\<forall>x\\<in>A.\n           \\<forall>y\\<in>A.\n              \\<forall>z\\<in>A.\n                 r x z \\<and> r y z \\<longrightarrow>\n                 r (x \\<squnion>\\<^bsub>f\\<^esub> y) z)) \\<longrightarrow>\n    x \\<in> A \\<longrightarrow>\n    list_all2 r (xs[p := x \\<squnion>\\<^bsub>f\\<^esub> xs ! p]) ys", "apply (simp add: list_all2_conv_all_nth nth_list_update)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma merges_pres_le_ub:\n  assumes \"set ts \\<subseteq> A\"  \n          \"set ss \\<subseteq> A\"\n          \"\\<forall>(p,t)\\<in>set ps. t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p \\<and> t \\<in> A \\<and> p < size ts\"  \n          \"ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\"\n  shows \"merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "fix t ts ps"], ["proof (state)\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "have\n    \"\\<And>qs. \\<lbrakk>set ts \\<subseteq> A; \\<forall>(p,t)\\<in>set ps. t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p \\<and> t \\<in> A \\<and> p< size ts \\<rbrakk> \\<Longrightarrow>\n          set qs \\<subseteq> set ps \\<longrightarrow> (\\<forall>ss. set ss \\<subseteq> A \\<longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow> merges f qs ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts\\<rbrakk>\n       \\<Longrightarrow> set qs \\<subseteq> set ps \\<longrightarrow>\n                         (\\<forall>ss.\n                             set ss \\<subseteq> A \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                             merges f qs ss \n                             [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply (induct_tac qs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> set ps \\<longrightarrow>\n                         (\\<forall>ss.\n                             set ss \\<subseteq> A \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                             merges f [] ss \n                             [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>qs a list.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts;\n        set list \\<subseteq> set ps \\<longrightarrow>\n        (\\<forall>ss.\n            set ss \\<subseteq> A \\<longrightarrow>\n            ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n            merges f list ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\\<rbrakk>\n       \\<Longrightarrow> set (a # list) \\<subseteq> set ps \\<longrightarrow>\n                         (\\<forall>ss.\n                             set ss \\<subseteq> A \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                             merges f (a # list) ss \n                             [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>qs a list.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts;\n        set list \\<subseteq> set ps \\<longrightarrow>\n        (\\<forall>ss.\n            set ss \\<subseteq> A \\<longrightarrow>\n            ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n            merges f list ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\\<rbrakk>\n       \\<Longrightarrow> set (a # list) \\<subseteq> set ps \\<longrightarrow>\n                         (\\<forall>ss.\n                             set ss \\<subseteq> A \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                             merges f (a # list) ss \n                             [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts;\n        set list \\<subseteq> set ps \\<longrightarrow>\n        (\\<forall>ss.\n            set ss \\<subseteq> A \\<longrightarrow>\n            ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n            merges f list ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set ps \\<and>\n                         set list \\<subseteq> set ps \\<longrightarrow>\n                         (\\<forall>ss.\n                             set ss \\<subseteq> A \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                             (case a of\n                              (p, \\<tau>) \\<Rightarrow>\n                                merges f list\n                                 (ss[p :=\n \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! p])) \n                             [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>(p, t)\\<in>set ps.\n           t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n           t \\<in> A \\<and> p < length ts;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A; ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        \\<forall>ss.\n           set ss \\<subseteq> A \\<longrightarrow>\n           ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n           merges f list ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> merges f list\n                          (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, t) \\<Rightarrow>\n             t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n             t \\<in> A \\<and> p < length ss;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A; ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        \\<forall>ss.\n           set ss \\<subseteq> A \\<longrightarrow>\n           ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n           merges f list ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> merges f list\n                          (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a]) \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply (erule allE, erule impE, erule_tac [2] mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, t) \\<Rightarrow>\n             t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n             t \\<in> A \\<and> p < length ss;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> set (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])\n                         \\<subseteq> A\n 2. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, t) \\<Rightarrow>\n             t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n             t \\<in> A \\<and> p < length ss;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        case (a, b) of\n        (p, t) \\<Rightarrow>\n          t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n          t \\<in> A \\<and> p < length ss\\<rbrakk>\n       \\<Longrightarrow> set (ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a])\n                         \\<subseteq> A\n 2. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, t) \\<Rightarrow>\n             t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n             t \\<in> A \\<and> p < length ss;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply (simp add: closedD  Semilat.closed_f[OF Semilat.intro, OF is_semi])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A;\n        \\<forall>x\\<in>set ps.\n           case x of\n           (p, t) \\<Rightarrow>\n             t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n             t \\<in> A \\<and> p < length ss;\n        (a, b) \\<in> set ps; set list \\<subseteq> set ps;\n        set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        case (a, b) of\n        (p, t) \\<Rightarrow>\n          t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n          t \\<in> A \\<and> p < length ss\\<rbrakk>\n       \\<Longrightarrow> ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply (simp )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> ss[a := b \\<squnion>\\<^bsub>f\\<^esub> ss ! a] \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "apply(rule list_update_le_listI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> set ss \\<subseteq> A\n 2. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> set ts \\<subseteq> A\n 3. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n 4. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> a < length ss\n 5. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a\n 6. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> semilat (A, r, f)\n 7. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a \\<and>\n        b \\<in> A \\<and> a < length ss\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a; b \\<in> A;\n        a < length ss\\<rbrakk>\n       \\<Longrightarrow> semilat (A, r, f)", "apply(insert is_semi)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b list ss.\n       \\<lbrakk>set ts \\<subseteq> A; (a, b) \\<in> set ps;\n        set list \\<subseteq> set ps; set ss \\<subseteq> A;\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        b \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! a; b \\<in> A; a < length ss;\n        semilat (A, r, f)\\<rbrakk>\n       \\<Longrightarrow> semilat (A, r, f)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>set ts \\<subseteq> A;\n   \\<forall>(p, t)\\<in>set ps.\n      t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n      t \\<in> A \\<and> p < length ts\\<rbrakk>\n  \\<Longrightarrow> set ?qs \\<subseteq> set ps \\<longrightarrow>\n                    (\\<forall>ss.\n                        set ss \\<subseteq> A \\<longrightarrow>\n                        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<longrightarrow>\n                        merges f ?qs ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set ?tsa3 \\<subseteq> A;\n   \\<forall>(p, t)\\<in>set ?psa3.\n      t \\<sqsubseteq>\\<^bsub>r\\<^esub> ?tsa3 ! p \\<and>\n      t \\<in> A \\<and> p < length ?tsa3\\<rbrakk>\n  \\<Longrightarrow> set ?qs \\<subseteq> set ?psa3 \\<longrightarrow>\n                    (\\<forall>ss.\n                        set ss \\<subseteq> A \\<longrightarrow>\n                        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?tsa3 \\<longrightarrow>\n                        merges f ?qs ss \n                        [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?tsa3)\n\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "note this [dest]"], ["proof (state)\nthis:\n  \\<lbrakk>set ?tsa3 \\<subseteq> A;\n   \\<forall>(p, t)\\<in>set ?psa3.\n      t \\<sqsubseteq>\\<^bsub>r\\<^esub> ?tsa3 ! p \\<and>\n      t \\<in> A \\<and> p < length ?tsa3\\<rbrakk>\n  \\<Longrightarrow> set ?qs \\<subseteq> set ?psa3 \\<longrightarrow>\n                    (\\<forall>ss.\n                        set ss \\<subseteq> A \\<longrightarrow>\n                        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?tsa3 \\<longrightarrow>\n                        merges f ?qs ss \n                        [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?tsa3)\n\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "from assms"], ["proof (chain)\npicking this:\n  set ts \\<subseteq> A\n  set ss \\<subseteq> A\n  \\<forall>(p, t)\\<in>set ps.\n     t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n     t \\<in> A \\<and> p < length ts\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "show ?thesis"], ["proof (prove)\nusing this:\n  set ts \\<subseteq> A\n  set ss \\<subseteq> A\n  \\<forall>(p, t)\\<in>set ps.\n     t \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p \\<and>\n     t \\<in> A \\<and> p < length ts\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal (1 subgoal):\n 1. merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "by blast"], ["proof (state)\nthis:\n  merges f ps ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma termination_lemma: \nshows \"\\<lbrakk>ss \\<in> list n A; distinct (map fst qs); \\<forall>(q,t)\\<in>set qs. q<n \\<and> t\\<in>A; sorted w; w \\<noteq> [] \\<rbrakk> \\<Longrightarrow> \n        ss [\\<sqsubset>\\<^sub>r] merges f qs ss \\<or> \n        merges f qs ss = ss \\<and> \n       (sorted_list_of_set ({q. \\<exists>t. (q,t)\\<in>set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> ss!q \\<noteq> ss!q} \\<union> set (tl w)),w) \\<in>\n       (\\<lambda>x. case x of (x, y) \\<Rightarrow> (sorted_list_of_set x, sorted_list_of_set y)) ` {(A, B). A \\<subset> B \\<and> finite B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ss [\\<sqsubset>\\<^bsub>r\\<^esub>] merges f qs ss \\<or>\n                      merges f qs ss = ss \\<and>\n                      (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>x.\n                                case x of\n                                (x, y) \\<Rightarrow>\n                                  (sorted_list_of_set x,\n                                   sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply(insert is_semi)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f)\\<rbrakk>\n    \\<Longrightarrow> ss [\\<sqsubset>\\<^bsub>r\\<^esub>] merges f qs ss \\<or>\n                      merges f qs ss = ss \\<and>\n                      (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>x.\n                                case x of\n                                (x, y) \\<Rightarrow>\n                                  (sorted_list_of_set x,\n                                   sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (unfold lesssub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f)\\<rbrakk>\n    \\<Longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] merges f qs\n                     ss \\<and>\n                      ss \\<noteq> merges f qs ss \\<or>\n                      merges f qs ss = ss \\<and>\n                      (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>x.\n                                case x of\n                                (x, y) \\<Rightarrow>\n                                  (sorted_list_of_set x,\n                                   sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (simp (no_asm_simp) add: merges_incr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f)\\<rbrakk>\n    \\<Longrightarrow> ss = merges f qs ss \\<longrightarrow>\n                      (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (rule merges_same_conv [THEN iffD1, elim_format])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> ?xs13 \\<in> list n A\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> distinct (map fst ?ps13)\n 3. \\<And>x.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; x \\<in> set ?ps13\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (p, x) \\<Rightarrow>\n                           p < length ?xs13 \\<and> x \\<in> A\n 4. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> merges f ?ps13 ?xs13 = ?xs13\n 5. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set ?ps13.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ?xs13 ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; x \\<in> set qs\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (p, x) \\<Rightarrow> p < length ss \\<and> x \\<in> A\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> merges f qs ss = ss\n 3. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss\\<rbrakk>\n    \\<Longrightarrow> merges f qs ss = ss\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}\n 3. \\<And>x.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; x \\<in> set qs\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (p, x) \\<Rightarrow> p < length ss \\<and> x \\<in> A", "apply (rule sym, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}\n 2. \\<And>x.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; x \\<in> set qs\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (p, x) \\<Rightarrow> p < length ss \\<and> x \\<in> A", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; x \\<in> set qs\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (p, x) \\<Rightarrow> p < length ss \\<and> x \\<in> A\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (subgoal_tac \"\\<forall>q t. \\<not>((q, t) \\<in> set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>q t.\n                         \\<not> ((q, t) \\<in> set qs \\<and>\n                                 t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                         q \\<noteq>\n                                 ss ! q)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs.\n        x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>q t.\n                         \\<not> ((q, t) \\<in> set qs \\<and>\n                                 t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                         q \\<noteq>\n                                 ss ! q)\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q t.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        \\<forall>x\\<in>set qs.\n           case x of (q, t) \\<Rightarrow> q < n \\<and> t \\<in> A;\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss;\n        \\<forall>x\\<in>set qs.\n           case x of\n           (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n        (q, t) \\<in> set qs\\<rbrakk>\n       \\<Longrightarrow> t \\<squnion>\\<^bsub>f\\<^esub> ss ! q = ss ! q\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q t.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss;\n        \\<forall>x\\<in>set qs.\n           case x of\n           (p, x) \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n        (q, t) \\<in> set qs;\n        case (q, t) of (q, t) \\<Rightarrow> q < n \\<and> t \\<in> A\\<rbrakk>\n       \\<Longrightarrow> t \\<squnion>\\<^bsub>f\\<^esub> ss ! q = ss ! q\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply (drule bspec, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q t.\n       \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n        Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n        ss = merges f qs ss; (q, t) \\<in> set qs;\n        case (q, t) of (q, t) \\<Rightarrow> q < n \\<and> t \\<in> A;\n        case (q, t) of\n        (p, x) \\<Rightarrow>\n          x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\\<rbrakk>\n       \\<Longrightarrow> t \\<squnion>\\<^bsub>f\\<^esub> ss ! q = ss ! q\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}", "apply(subgoal_tac \"{q. \\<exists>t. (q, t) \\<in> set qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union> set (tl w) = set (tl w)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q);\n     {q. \\<exists>t.\n            (q, t) \\<in> set qs \\<and>\n            t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n     set (tl w) =\n     set (tl w)\\<rbrakk>\n    \\<Longrightarrow> (sorted_list_of_set\n                        ({q. \\<exists>t.\n                                (q, t) \\<in> set qs \\<and>\n                                t \\<squnion>\\<^bsub>f\\<^esub> ss !\n                        q \\<noteq>\n                                ss ! q} \\<union>\n                         set (tl w)),\n                       w)\n                      \\<in> (\\<lambda>(x, y).\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                            {(A, B). A \\<subset> B \\<and> finite B}\n 2. \\<lbrakk>ss \\<in> list n A; distinct (map fst qs);\n     \\<forall>(q, t)\\<in>set qs. q < n \\<and> t \\<in> A;\n     Sorted_Less.sorted w; w \\<noteq> []; semilat (A, r, f);\n     ss = merges f qs ss;\n     \\<forall>(p, x)\\<in>set qs. x \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p;\n     \\<forall>q t.\n        \\<not> ((q, t) \\<in> set qs \\<and>\n                t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                ss ! q)\\<rbrakk>\n    \\<Longrightarrow> {q. \\<exists>t.\n                             (q, t) \\<in> set qs \\<and>\n                             t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq>\n                             ss ! q} \\<union>\n                      set (tl w) =\n                      set (tl w)", "apply (auto simp add: sorted_list_psub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bounded_exec: \"bounded step n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded step n", "apply (insert is_semi,unfold semilat_def bounded_def step_def exec_def transf_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (A, r, f) of\n    (A, r, f) \\<Rightarrow>\n      order r A \\<and>\n      closed A f \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             x \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             y \\<sqsubseteq>\\<^bsub>r\\<^esub> x \n        \\<squnion>\\<^bsub>f\\<^esub> y) \\<and>\n      (\\<forall>x\\<in>A.\n          \\<forall>y\\<in>A.\n             \\<forall>z\\<in>A.\n                x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n                y \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<longrightarrow>\n                x \\<squnion>\\<^bsub>f\\<^esub> y \n                \\<sqsubseteq>\\<^bsub>r\\<^esub> z) \\<Longrightarrow>\n    \\<forall>p<n.\n       \\<forall>\\<tau>.\n          \\<forall>(q, \\<tau>')\n                   \\<in>set (map (\\<lambda>pc. (pc, p # \\<tau>))\n                              (rev (sorted_list_of_set (succs p)))).\n             q < n", "by (auto simp add: n_def nodes_def verts_set fin_succs' succ_range)"], ["", "lemma bounded_exec':\n  fixes ss w a b\n  assumes w_n_nil: \" w \\<noteq> [] \"\n       and step_hdw: \" (a, b) \\<in> set (step (hd w) (ss ! hd w)) \"      \n       and w_lt_n:\"\\<forall>p\\<in>set w. p < n \"\n      shows\" a < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < n", "using assms"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>p\\<in>set w. p < n\n\ngoal (1 subgoal):\n 1. a < n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<noteq> []; (a, b) \\<in> set (step (hd w) (ss ! hd w));\n     \\<forall>p\\<in>set w. p < n\\<rbrakk>\n    \\<Longrightarrow> a < n", "from w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set w. p < n", "have \"hd w < n\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set w. p < n\n\ngoal (1 subgoal):\n 1. hd w < n", "using w_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set w. p < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w < n", "by auto"], ["proof (state)\nthis:\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<noteq> []; (a, b) \\<in> set (step (hd w) (ss ! hd w));\n     \\<forall>p\\<in>set w. p < n\\<rbrakk>\n    \\<Longrightarrow> a < n", "with bounded_exec"], ["proof (chain)\npicking this:\n  bounded step n\n  hd w < n", "have \"( \\<forall>\\<tau>. \\<forall>(q,\\<tau>') \\<in> set (step (hd w) \\<tau>). q<n)\""], ["proof (prove)\nusing this:\n  bounded step n\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<forall>\\<tau>.\n       \\<forall>(q, \\<tau>')\\<in>set (step (hd w) \\<tau>). q < n", "by (auto simp add:bounded_def)"], ["proof (state)\nthis:\n  \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step (hd w) \\<tau>). q < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<noteq> []; (a, b) \\<in> set (step (hd w) (ss ! hd w));\n     \\<forall>p\\<in>set w. p < n\\<rbrakk>\n    \\<Longrightarrow> a < n", "with step_hdw"], ["proof (chain)\npicking this:\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step (hd w) \\<tau>). q < n", "show \"a < n\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step (hd w) \\<tau>). q < n\n\ngoal (1 subgoal):\n 1. a < n", "by auto"], ["proof (state)\nthis:\n  a < n\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"wf_dom ss w \\<equiv> \n    (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and> \n    (\\<forall>p < n. sorted (rev ( (ss!p))) \\<and>\n             (ss!p \\<noteq> rev [0..< n] \\<longrightarrow> (\\<forall>x\\<in>set ( (ss!p)). x < p)) \\<and>\n             (ss!p = rev [0..<n] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n             (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>              \n    sorted w \\<and> length ss = n \\<and> (\\<forall>x\\<in>set w. x < n) \""], ["", "lemma wf_dom_w: \n  assumes \"wf_dom ss w\"\n  shows \"sorted w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w", "by (auto simp add:wf_dom_def)"], ["", "lemma wf_dom_w2: \n  assumes \"wf_dom ss w\"\n  shows \"(\\<forall>x\\<in>set w. x < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x < n", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x < n", "by (auto simp add:wf_dom_def)"], ["", "lemma wf_dom_len_eq: \n  assumes \"wf_dom ss w\"\n  shows \"(length ss = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ss = n", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. length ss = n", "by (auto simp add:wf_dom_def)"], ["", "lemma  wf_dom_inA: \n  assumes \"wf_dom ss w\"\n  shows \"ss \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss \\<in> list n A", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A", "by (auto simp add:wf_dom_def intro: listI)"], ["", "lemma wf_dom_le: \n  assumes wf_ss_w: \"wf_dom ss w\"\n  shows \"ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_dom ss w \\<Longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have  \"\\<forall>i<length ss. ss!i \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ss. ss ! i \\<in> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. wf_dom ss w \\<Longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<in> A", "have  \"\\<forall>i<length ss. sorted (rev (ss!i))\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ss. Sorted_Less.sorted (rev (ss ! i))", "by (auto simp add:A_def sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  \\<forall>i<length ss. Sorted_Less.sorted (rev (ss ! i))\n\ngoal (1 subgoal):\n 1. wf_dom ss w \\<Longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. Sorted_Less.sorted (rev (ss ! i))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. Sorted_Less.sorted (rev (ss ! i))\n\ngoal (1 subgoal):\n 1. ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "by (auto simp add:Listn.le_def lesssub_def lesub_def r_def nodes_le_def intro:list_all2_all_nthI)"], ["proof (state)\nthis:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pres_transf:  \n  \"\\<forall>ss\\<in>A. p < n \\<longrightarrow> (\\<forall>x<length ss. p > ss!x) \\<longrightarrow> transf p ss \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ss\\<in>A.\n       p < n \\<longrightarrow>\n       (\\<forall>x<length ss. ss ! x < p) \\<longrightarrow>\n       transf p ss \\<in> A", "proof(intro strip, unfold transf_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "fix ss"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "assume  p_lt_n: \"p < n\" and p_gt:  \"\\<forall>x<length ss. ss!x < p\" and \\<tau>_in_A: \"ss \\<in> A\""], ["proof (state)\nthis:\n  p < n\n  \\<forall>x<length ss. ss ! x < p\n  ss \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "then"], ["proof (chain)\npicking this:\n  p < n\n  \\<forall>x<length ss. ss ! x < p\n  ss \\<in> A", "have \"set ss \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  p < n\n  \\<forall>x<length ss. ss ! x < p\n  ss \\<in> A\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> set nodes", "by (unfold A_def) (rule inpow_subset_nodes)"], ["proof (state)\nthis:\n  set ss \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "with p_lt_n"], ["proof (chain)\npicking this:\n  p < n\n  set ss \\<subseteq> set nodes", "have p_\\<tau>_in: \"set (p # ss) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  p < n\n  set ss \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (p # ss) \\<subseteq> set nodes", "by (auto simp add:n_def nodes_def verts_set)"], ["proof (state)\nthis:\n  set (p # ss) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "from \\<tau>_in_A"], ["proof (chain)\npicking this:\n  ss \\<in> A", "have sorted_\\<tau>: \"sorted (rev ss)\""], ["proof (prove)\nusing this:\n  ss \\<in> A\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev ss)", "by (simp add:inA_is_sorted)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev ss)\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "with p_gt"], ["proof (chain)\npicking this:\n  \\<forall>x<length ss. ss ! x < p\n  Sorted_Less.sorted (rev ss)", "have \"sorted (rev (p # ss))\""], ["proof (prove)\nusing this:\n  \\<forall>x<length ss. ss ! x < p\n  Sorted_Less.sorted (rev ss)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (p # ss))", "using Cons_sorted_less_nth"], ["proof (prove)\nusing this:\n  \\<forall>x<length ss. ss ! x < p\n  Sorted_Less.sorted (rev ss)\n  \\<lbrakk>\\<forall>x<length ?xs. ?xs ! x < ?p;\n   Sorted_Less.sorted (rev ?xs)\\<rbrakk>\n  \\<Longrightarrow> Sorted_Less.sorted (rev (?p # ?xs))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (p # ss))", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (p # ss))\n\ngoal (1 subgoal):\n 1. \\<And>ss.\n       \\<lbrakk>ss \\<in> A; p < n; \\<forall>x<length ss. ss ! x < p\\<rbrakk>\n       \\<Longrightarrow> p # ss \\<in> A", "with p_\\<tau>_in"], ["proof (chain)\npicking this:\n  set (p # ss) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (p # ss))", "show \"(p # ss) \\<in> A\""], ["proof (prove)\nusing this:\n  set (p # ss) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (p # ss))\n\ngoal (1 subgoal):\n 1. p # ss \\<in> A", "by (unfold A_def) (fastforce intro: subset_nodes_inpow)"], ["proof (state)\nthis:\n  p # ss \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pres_exec: \n  assumes \"(q,\\<tau>) \\<in> set (step p (ss!p))\"\n      and \"\\<forall>n \\<in> set (ss!p). p > n\"\n      and \"ss!p \\<in> A\"\n      and \"p < n\" \n    shows \"\\<tau> \\<in> A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  (q, \\<tau>) \\<in> set (step p (ss ! p))\n  \\<forall>n\\<in>set (ss ! p). n < p\n  ss ! p \\<in> A\n  p < n\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> A", "by (auto simp add:step_def exec_def pres_transf)"], ["", "lemma wf_hd_neq_all: \n  assumes wf_ss_w: \"wf_dom ss w \" \n      and w_n_nil: \"w \\<noteq> [] \" \n    shows \" ss!(hd w) \\<noteq> rev [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! hd w \\<noteq> rev [0..<n]", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "assume \"\\<not> ss ! hd w \\<noteq>  (rev [0..<n])\""], ["proof (state)\nthis:\n  \\<not> ss ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "note x = this"], ["proof (state)\nthis:\n  \\<not> ss ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have \"\\<forall>x\\<in> set w. x < n\" and \"sorted w\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x < n &&& Sorted_Less.sorted w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. x < n\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n\n  Sorted_Less.sorted w", "have \"hd w < n\" and y:\"\\<forall>x \\<in> set w. x \\<ge> hd w\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. hd w < n &&& \\<forall>x\\<in>set w. hd w \\<le> x", "using w_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  Sorted_Less.sorted w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w < n &&& \\<forall>x\\<in>set w. hd w \\<le> x", "by (induct w) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  hd w < n\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with wf_ss_w x"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  \\<not> ss ! hd w \\<noteq> rev [0..<n]\n  hd w < n\n  \\<forall>x\\<in>set w. hd w \\<le> x", "have  \"(\\<exists>x\\<in> set w. (x,hd w)\\<in> g_E G \\<and> x < hd w)\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  \\<not> ss ! hd w \\<noteq> rev [0..<n]\n  hd w < n\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set w. (x, hd w) \\<in> g_E G \\<and> x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set w. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (1 subgoal):\n 1. \\<not> ss ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with y"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. hd w \\<le> x\n  \\<exists>x\\<in>set w. (x, hd w) \\<in> g_E G \\<and> x < hd w", "show False"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. hd w \\<le> x\n  \\<exists>x\\<in>set w. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pres_wf_exec: \n  fixes ss w a b\n  assumes wf_ss_w: \"wf_dom ss w \"\n      and w_n_nil: \"w \\<noteq> [] \"\n    shows \"\\<forall>(q,\\<tau>) \\<in> set (step (hd w) (ss!(hd w))). \\<tau> \\<in> A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). \\<tau> \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). \\<tau> \\<in> A", "proof(intro strip, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "assume a_b: \"(a, b) \\<in> set (step (hd w) (ss ! hd w))\""], ["proof (state)\nthis:\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have sorted_w: \"sorted w\" and hd_w_lt_n: \"hd w < n\"  \n    and ss_hdw_inA: \"ss!hd w \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w &&& hd w < n &&& ss ! hd w \\<in> A", "using w_n_nil"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w &&& hd w < n &&& ss ! hd w \\<in> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted w\n  hd w < n\n  ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "from assms"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  w \\<noteq> []", "have ss_hd_w_neq_all: \"ss!hd w \\<noteq> (rev [0..<n])\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. ss ! hd w \\<noteq> rev [0..<n]", "by (rule wf_hd_neq_all)"], ["proof (state)\nthis:\n  ss ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "with wf_ss_w hd_w_lt_n"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  hd w < n\n  ss ! hd w \\<noteq> rev [0..<n]", "have \"\\<forall>x\\<in>set (ss!hd w). hd w > x\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  hd w < n\n  ss ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (step (hd w) (ss ! hd w)); wf_dom ss w;\n        w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> b \\<in> A", "with ss_hdw_inA hd_w_lt_n a_b"], ["proof (chain)\npicking this:\n  ss ! hd w \\<in> A\n  hd w < n\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w", "show \"b \\<in> A\""], ["proof (prove)\nusing this:\n  ss ! hd w \\<in> A\n  hd w < n\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. b \\<in> A", "using pres_exec"], ["proof (prove)\nusing this:\n  ss ! hd w \\<in> A\n  hd w < n\n  (a, b) \\<in> set (step (hd w) (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n  \\<lbrakk>(?q, ?\\<tau>) \\<in> set (step ?p (?ss ! ?p));\n   \\<forall>n\\<in>set (?ss ! ?p). n < ?p; ?ss ! ?p \\<in> A; ?p < n\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. b \\<in> A", "by auto"], ["proof (state)\nthis:\n  b \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_dom_invariant_auxi: \n  assumes wf_a_b: \"wf_dom a b\" and b_n_nil: \"b \\<noteq> [] \" \n    shows \"a!hd b \\<noteq> rev [0..<n] \\<and>\n           sorted (rev (hd b # (a!hd b))) \\<and>\n           set (hd b # (a!hd b)) \\<subseteq> set nodes \\<and>\n           hd b # (a!hd b) \\<in> A \\<and>\n           (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a!hd b)). q < length a \\<and> \\<tau> \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ! hd b \\<noteq> rev [0..<n] \\<and>\n    Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n    set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n    hd b # a ! hd b \\<in> A \\<and>\n    (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n        q < length a \\<and> \\<tau> \\<in> A)", "using assms"], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. a ! hd b \\<noteq> rev [0..<n] \\<and>\n    Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n    set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n    hd b # a ! hd b \\<in> A \\<and>\n    (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n        q < length a \\<and> \\<tau> \\<in> A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "from assms"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []", "have \"a!hd b \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\"\n              and  sorted_hdb: \"sorted (rev (a!hd b))\" \n              and hd_b_lt_n: \"hd b < n\" \n              and sorted_b: \"sorted b\" \n              and len_eq: \"length a = n\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. (a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes) &&&\n     Sorted_Less.sorted (rev (a ! hd b))) &&&\n    hd b < n &&& Sorted_Less.sorted b &&& length a = n", "by (auto simp add:A_def wf_dom_def)"], ["proof (state)\nthis:\n  a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  Sorted_Less.sorted (rev (a ! hd b))\n  hd b < n\n  Sorted_Less.sorted b\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "then"], ["proof (chain)\npicking this:\n  a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  Sorted_Less.sorted (rev (a ! hd b))\n  hd b < n\n  Sorted_Less.sorted b\n  length a = n", "have as_subset_nodes: \"set (a!hd b) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  Sorted_Less.sorted (rev (a ! hd b))\n  hd b < n\n  Sorted_Less.sorted b\n  length a = n\n\ngoal (1 subgoal):\n 1. set (a ! hd b) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes)"], ["proof (state)\nthis:\n  set (a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "with n_def verts_set assms nodes_def"], ["proof (chain)\npicking this:\n  n \\<equiv> length nodes\n  set (g_V G) = {0..<length (g_V G)}\n  wf_dom a b\n  b \\<noteq> []\n  nodes \\<equiv> g_V G\n  set (a ! hd b) \\<subseteq> set nodes", "have hdb_cons_subset_nodes: \"set (hd b # (a!hd b)) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  set (g_V G) = {0..<length (g_V G)}\n  wf_dom a b\n  b \\<noteq> []\n  nodes \\<equiv> g_V G\n  set (a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> set nodes", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "then"], ["proof (chain)\npicking this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes", "have hdb_subset_n: \"set (hd b # (a!hd b)) \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> {0..<n}", "using nodes_def verts_set n_def"], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "from wf_a_b b_n_nil"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []", "have a_hd_b_neq_all: \"a!hd b \\<noteq> (rev [0..<n])\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. a ! hd b \\<noteq> rev [0..<n]", "using wf_hd_neq_all"], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n  \\<lbrakk>wf_dom ?ss ?w; ?w \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?ss ! hd ?w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! hd b \\<noteq> rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  a ! hd b \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "with wf_a_b hd_b_lt_n sorted_hdb"], ["proof (chain)\npicking this:\n  wf_dom a b\n  hd b < n\n  Sorted_Less.sorted (rev (a ! hd b))\n  a ! hd b \\<noteq> rev [0..<n]", "have sorted_hd_b_cons: \"sorted (rev (hd b # (a!hd b)))\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  hd b < n\n  Sorted_Less.sorted (rev (a ! hd b))\n  a ! hd b \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd b # a ! hd b))", "by (fastforce simp add: wf_dom_def dest: Cons_sorted_less)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "from hdb_cons_subset_nodes"], ["proof (chain)\npicking this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes", "have  \"set ((hd b # (a!hd b))) \\<in> Pow (set (g_V G))\""], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<in> Pow (set (g_V G))", "by (auto simp add:nodes_def)"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<in> Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "then"], ["proof (chain)\npicking this:\n  set (hd b # a ! hd b) \\<in> Pow (set (g_V G))", "have pow1: \"set ((hd b # (a!hd b))) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<in> Pow (set (g_V G))\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> set nodes", "by (auto simp add:nodes_def)"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "from hdb_cons_subset_nodes sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd b # a ! hd b))", "have \"hd b # (a!hd b) \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (fastforce intro: subset_nodes_inpow)"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "then"], ["proof (chain)\npicking this:\n  hd b # a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have hd_b_cons_in_A: \"(hd b # (a!hd b)) \\<in> A\""], ["proof (prove)\nusing this:\n  hd b # a ! hd b \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<in> A", "by (unfold A_def ) (auto simp add:nodes_def)"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "have \"(\\<forall>p<n. \\<forall>\\<tau>. \\<forall>(q,\\<tau>') \\<in> set (step p \\<tau>). q<n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step p \\<tau>). q < n", "using bounded_exec"], ["proof (prove)\nusing this:\n  bounded step n\n\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step p \\<tau>). q < n", "by (auto simp add:bounded_def)"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step p \\<tau>). q < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "with hd_b_lt_n"], ["proof (chain)\npicking this:\n  hd b < n\n  \\<forall>p<n.\n     \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step p \\<tau>). q < n", "have bounded: \"\\<forall>(q,\\<tau>') \\<in> set (step (hd b) (a!hd b)). q<n\""], ["proof (prove)\nusing this:\n  hd b < n\n  \\<forall>p<n.\n     \\<forall>\\<tau>. \\<forall>(q, \\<tau>')\\<in>set (step p \\<tau>). q < n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>')\\<in>set (step (hd b) (a ! hd b)). q < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>')\\<in>set (step (hd b) (a ! hd b)). q < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "from wf_a_b b_n_nil"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []", "have pres: \"\\<forall>(q, \\<tau>)\\<in>set(step (hd b) (a!hd b)). \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A", "by (rule pres_wf_exec)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "with bounded pres"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>')\\<in>set (step (hd b) (a ! hd b)). q < n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A", "have step_pres_bounded: \"\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a!hd b)). q < length a \\<and> \\<tau> \\<in> A \""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>')\\<in>set (step (hd b) (a ! hd b)). q < n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "using  len_eq"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>')\\<in>set (step (hd b) (a ! hd b)). q < n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). \\<tau> \\<in> A\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom a b; b \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> a ! hd b \\<noteq> rev [0..<n] \\<and>\n                      Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n                      set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n                      hd b # a ! hd b \\<in> A \\<and>\n                      (\\<forall>(q, \\<tau>)\n                                \\<in>set (step (hd b) (a ! hd b)).\n                          q < length a \\<and> \\<tau> \\<in> A)", "with a_hd_b_neq_all sorted_hd_b_cons hdb_cons_subset_nodes hd_b_cons_in_A"], ["proof (chain)\npicking this:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. a ! hd b \\<noteq> rev [0..<n] \\<and>\n    Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n    set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n    hd b # a ! hd b \\<in> A \\<and>\n    (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n        q < length a \\<and> \\<tau> \\<in> A)", "by auto"], ["proof (state)\nthis:\n  a ! hd b \\<noteq> rev [0..<n] \\<and>\n  Sorted_Less.sorted (rev (hd b # a ! hd b)) \\<and>\n  set (hd b # a ! hd b) \\<subseteq> set nodes \\<and>\n  hd b # a ! hd b \\<in> A \\<and>\n  (\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n      q < length a \\<and> \\<tau> \\<in> A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_dom_invariant_aux:\n  fixes a b ss w\nassumes propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"    \n    and b_n_nil: \"b \\<noteq> [] \" \n    and a_in_A: \"\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\"   \n    and ass: \"\\<forall>p<n.\n          sorted (rev ( (a ! p))) \\<and>\n          (a!p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set (a!p). x < p)) \\<and>\n          (a!p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in>set b. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n          (p \\<notin> set b \\<longrightarrow> stable r step a p)\"\n    and sorted_b: \"sorted b  \"\n    and len_eq:  \"length a = n  \"\n    and b_lt_n: \"\\<forall>x\\<in>set b. x < n  \"\n  shows \"(\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n         (\\<forall>p<n.\n           sorted (rev ( (ss ! p))) \\<and>\n           (ss!p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set (ss!p). x < p)) \\<and>\n           (ss!p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n         sorted w \\<and> length ss = n \\<and> (\\<forall>x\\<in>set w. x <n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<n.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n    Sorted_Less.sorted w \\<and>\n    length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "using assms"], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  b \\<noteq> []\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<n.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n    Sorted_Less.sorted w \\<and>\n    length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?a_hdb = \"a!hd b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?ss_hdw = \"ss!hd w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?ss_hdb = \"ss!hd b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?a_hdw = \"a!hd w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?qs_a = \"step (hd b) ?a_hdb\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?qs_ss = \"step (hd w) ?ss_hdw\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?qs_ss_hdb = \"step (hd b) ?ss_hdb\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?q_a_wl = \"{q. \\<exists>t.(q,t)\\<in>set ?qs_a \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (a!q) \\<noteq> a!q}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "let ?q_ss_wl = \"{q. \\<exists>t.(q,t)\\<in>set ?qs_ss \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (ss!q) \\<noteq> ss!q}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from a_in_A len_eq"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  length a = n", "have a_in_list_nA: \"a \\<in> list n A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  length a = n\n\ngoal (1 subgoal):\n 1. a \\<in> list n A", "by (auto intro: listI)"], ["proof (state)\nthis:\n  a \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from a_in_A"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A", "have \"\\<forall>p< length a. a!p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length a. a ! p \\<in> A", "by (auto simp add:A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length a. a ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<length a. a ! p \\<in> A", "have a_p_subset: \"\\<forall>p< length a. set (a!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>p<length a. a ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length a. set (a ! p) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length a. set (a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from a_in_A ass sorted_b len_eq b_lt_n  b_n_nil"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []", "have wf_a_b: \"wf_dom a b\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. wf_dom a b", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  wf_dom a b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with b_n_nil"], ["proof (chain)\npicking this:\n  b \\<noteq> []\n  wf_dom a b", "have a_hd_b_neq_all: \"?a_hdb \\<noteq> rev [0..<n]\" \n                and sorted_hd_b_cons: \"sorted (rev (hd b # ?a_hdb))\"\n                and hd_b_cons_in_nodes: \"set (hd b # ?a_hdb) \\<subseteq> set nodes\" \n                and hd_b_cons_in_A: \"hd b # ?a_hdb \\<in> A\"\n                and step_pres_bounded: \"(\\<forall>(q, \\<tau>)\\<in>set (step (hd b) ?a_hdb). q < length a \\<and> \\<tau> \\<in> A)\""], ["proof (prove)\nusing this:\n  b \\<noteq> []\n  wf_dom a b\n\ngoal (1 subgoal):\n 1. (a ! hd b \\<noteq> rev [0..<n] &&&\n     Sorted_Less.sorted (rev (hd b # a ! hd b))) &&&\n    set (hd b # a ! hd b) \\<subseteq> set nodes &&&\n    hd b # a ! hd b \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "using propa_dom_invariant_auxi"], ["proof (prove)\nusing this:\n  b \\<noteq> []\n  wf_dom a b\n  \\<lbrakk>wf_dom ?a ?b; ?b \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?a ! hd ?b \\<noteq> rev [0..<n] \\<and>\n                    Sorted_Less.sorted (rev (hd ?b # ?a ! hd ?b)) \\<and>\n                    set (hd ?b # ?a ! hd ?b) \\<subseteq> set nodes \\<and>\n                    hd ?b # ?a ! hd ?b \\<in> A \\<and>\n                    (\\<forall>(q, \\<tau>)\n                              \\<in>set (step (hd ?b) (?a ! hd ?b)).\n                        q < length ?a \\<and> \\<tau> \\<in> A)\n\ngoal (1 subgoal):\n 1. (a ! hd b \\<noteq> rev [0..<n] &&&\n     Sorted_Less.sorted (rev (hd b # a ! hd b))) &&&\n    set (hd b # a ! hd b) \\<subseteq> set nodes &&&\n    hd b # a ! hd b \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A", "have hdb_subset_n: \"set (hd b # ?a_hdb) \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> {0..<n}", "using nodes_def verts_set n_def"], ["proof (prove)\nusing this:\n  a ! hd b \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  set (hd b # a ! hd b) \\<subseteq> set nodes\n  hd b # a ! hd b \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from b_lt_n b_n_nil"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []", "have hd_b_lt_n: \"hd b < n\" \n                       and tl_b_lt_n: \"\\<forall>x\\<in> set (tl b). x < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd b < n &&& \\<forall>x\\<in>set (tl b). x < n", "by (induct b)(auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  hd b < n\n  \\<forall>x\\<in>set (tl b). x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  hd b < n\n  \\<forall>x\\<in>set (tl b). x < n", "have dist: \"distinct (map fst ?qs_a)\""], ["proof (prove)\nusing this:\n  hd b < n\n  \\<forall>x\\<in>set (tl b). x < n\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "using distinct_p"], ["proof (prove)\nusing this:\n  hd b < n\n  \\<forall>x\\<in>set (tl b). x < n\n  ?p < n \\<longrightarrow> distinct (map fst (step ?p (?ss ! ?p)))\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from b_lt_n len_eq sorted_b"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b", "have sorted_tl_b: \"sorted (tl b)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl b)", "by (induct b) auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from b_lt_n verts n_def nodes_def verts_set"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x < n\n  g_V G = [0..<length (g_V G)]\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}", "have b_in_verts: \"\\<forall>x\\<in>set b. x \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  g_V G = [0..<length (g_V G)]\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set b. x \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set b. x \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x \\<in> set (g_V G)", "have hd_b_in_verts: \"hd b \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. hd b \\<in> set (g_V G)", "using b_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x \\<in> set (g_V G)\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd b \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  hd b \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  hd b \\<in> set (g_V G)", "have fin_succ_hd_b: \"finite (succs (hd b))\""], ["proof (prove)\nusing this:\n  hd b \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs (hd b))", "using fin_succs"], ["proof (prove)\nusing this:\n  hd b \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs (hd b))", "by auto"], ["proof (state)\nthis:\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have fin_q1: \"finite {q. \\<exists>t.(q,t)\\<in>set ?qs_a}\" \n   and fin_q2: \"finite ?q_a_wl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))} &&&\n    finite\n     {q. \\<exists>t.\n            (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n            t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "by (auto simp add:step_def exec_def image_def)"], ["proof (state)\nthis:\n  finite {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}\n  finite\n   {q. \\<exists>t.\n          (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n          t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  finite {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}\n  finite\n   {q. \\<exists>t.\n          (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n          t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "have fin: \"finite (?q_a_wl \\<union> set (tl b))\""], ["proof (prove)\nusing this:\n  finite {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}\n  finite\n   {q. \\<exists>t.\n          (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n          t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. finite\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))", "by auto"], ["proof (state)\nthis:\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from a_in_A"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A", "have set_a: \"set a \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. set a \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with step_pres_bounded sorted_tl_b len_eq dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))\n  set a \\<subseteq> A", "have \"\\<forall>(q, \\<tau>) \\<in> set ?qs_a. (fst(propa f ?qs_a a (tl b)))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>a!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n       \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by (auto dest:propa_property1)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have propa_ss1: \"\\<forall>(q, \\<tau>) \\<in> set ?qs_a. ss!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>a!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by simp"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have propa_ss1': \"\\<forall>(q, \\<tau>) \\<in> set ?qs_a. ss!q =  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub>a!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by (auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have succ_self_eq: \"\\<forall>(q, \\<tau>) \\<in> set ?qs_a. q = hd b \\<longrightarrow> ss!q = a!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q = hd b \\<longrightarrow> ss ! q = a ! q", "by(auto simp add: f_def nodes_sup_def plussub_def inter_sorted_cons[OF sorted_hd_b_cons])"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q = hd b \\<longrightarrow> ss ! q = a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have step_hd_b: \"\\<forall>(q,\\<tau>)\\<in>set ?qs_a. \\<tau> = (hd b # ?a_hdb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       \\<tau> = hd b # a ! hd b", "by(auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     \\<tau> = hd b # a ! hd b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from step_pres_bounded sorted_tl_b set_a len_eq dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))", "have  \"\\<And>q. q \\<notin> set(map fst ?qs_a) \\<Longrightarrow> q < length a \\<Longrightarrow> (fst(propa f ?qs_a a (tl b)))!q = a!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n        q < length a\\<rbrakk>\n       \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) !\n                         q =\n                         a ! q", "by (auto intro:propa_property2)"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q", "have exec2: \"\\<And>q. q \\<notin> set(map fst ?qs_a) \\<Longrightarrow> q < length a \\<Longrightarrow> ss!q = a!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n        q < length a\\<rbrakk>\n       \\<Longrightarrow> ss ! q = a ! q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q", "have ss_hd_b_eq_a: \"ss!hd b = a!hd b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n\ngoal (1 subgoal):\n 1. ss ! hd b = a ! hd b", "using hd_b_lt_n len_eq  fin_succ_hd_b succ_self_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  hd b < n\n  length a = n\n  finite (succs (hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q = hd b \\<longrightarrow> ss ! q = a ! q\n\ngoal (1 subgoal):\n 1. ss ! hd b = a ! hd b", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! hd b = a ! hd b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  ss ! hd b = a ! hd b", "have hdb_nin_w: \"hd b \\<notin> ?q_a_wl\""], ["proof (prove)\nusing this:\n  ss ! hd b = a ! hd b\n\ngoal (1 subgoal):\n 1. hd b\n    \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "using fin_succ_hd_b propa_ss1"], ["proof (prove)\nusing this:\n  ss ! hd b = a ! hd b\n  finite (succs (hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. hd b\n    \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  hd b\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from step_pres_bounded sorted_tl_b set_a"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A", "have \"snd (propa f ?qs_a a (tl b)) = (sorted_list_of_set (?q_a_wl \\<union> set (tl b)))\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. snd (propa f (step (hd b) (a ! hd b)) a (tl b)) =\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))", "by (fastforce dest:decomp_propa)"], ["proof (state)\nthis:\n  snd (propa f (step (hd b) (a ! hd b)) a (tl b)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  snd (propa f (step (hd b) (a ! hd b)) a (tl b)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))", "have ww: \"w = sorted_list_of_set (?q_a_wl \\<union> set (tl b))\""], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  snd (propa f (step (hd b) (a ! hd b)) a (tl b)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. w =\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))", "by simp"], ["proof (state)\nthis:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))", "have sorted_w:\"sorted w\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w", "by (simp add:sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from ww"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))", "have set_ww: \"set w =?q_a_wl \\<union> set (tl b)\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. set w =\n    {q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b)", "using fin"], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. set w =\n    {q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b)", "by auto"], ["proof (state)\nthis:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with step_pres_bounded tl_b_lt_n ww fin len_eq"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  \\<forall>x\\<in>set (tl b). x < n\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  length a = n\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)", "have w_lt_n: \"(\\<forall>x\\<in>set w. x < n)\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  \\<forall>x\\<in>set (tl b). x < n\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  length a = n\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x < n", "using len_eq"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  \\<forall>x\\<in>set (tl b). x < n\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  length a = n\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n", "have w_set': \"\\<forall>x\\<in>set w. x \\<in> {0..<n}\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x \\<in> {0..<n}", "using verts_set len_eq"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  set (g_V G) = {0..<length (g_V G)}\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x \\<in> {0..<n}", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. x \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x \\<in> {0..<n}", "have w_set: \"set w \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. set w \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  set w \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from sorted_b"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted b", "have hd_b_nin_tl_b: \"hd b \\<notin> set (tl b) \""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted b\n\ngoal (1 subgoal):\n 1. hd b \\<notin> set (tl b)", "by (induct b) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  hd b \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with hdb_nin_w ww"], ["proof (chain)\npicking this:\n  hd b\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  hd b \\<notin> set (tl b)", "have \"hd b \\<notin> set w\""], ["proof (prove)\nusing this:\n  hd b\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  hd b \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. hd b \\<notin> set w", "using fin"], ["proof (prove)\nusing this:\n  hd b\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  hd b \\<notin> set (tl b)\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. hd b \\<notin> set w", "by auto"], ["proof (state)\nthis:\n  hd b \\<notin> set w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from step_pres_bounded sorted_tl_b set_a propa"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)", "have ss_merge: \"ss = merges f ?qs_a a\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n\ngoal (1 subgoal):\n 1. ss = merges f (step (hd b) (a ! hd b)) a", "by (auto dest: decomp_propa)"], ["proof (state)\nthis:\n  ss = merges f (step (hd b) (a ! hd b)) a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from step_pres_bounded a_in_list_nA"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  a \\<in> list n A", "have \"\\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)). q < n \\<and> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  a \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < n \\<and> \\<tau> \\<in> A", "using len_eq"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  a \\<in> list n A\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < n \\<and> \\<tau> \\<in> A", "by simp"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with a_in_list_nA"], ["proof (chain)\npicking this:\n  a \\<in> list n A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A", "have \"merges f ?qs_a a  \\<in> list n A\""], ["proof (prove)\nusing this:\n  a \\<in> list n A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. merges f (step (hd b) (a ! hd b)) a \\<in> list n A", "by (rule merges_preserves_type)"], ["proof (state)\nthis:\n  merges f (step (hd b) (a ! hd b)) a \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with ss_merge"], ["proof (chain)\npicking this:\n  ss = merges f (step (hd b) (a ! hd b)) a\n  merges f (step (hd b) (a ! hd b)) a \\<in> list n A", "have ss_in_A: \"ss \\<in> list n A\""], ["proof (prove)\nusing this:\n  ss = merges f (step (hd b) (a ! hd b)) a\n  merges f (step (hd b) (a ! hd b)) a \\<in> list n A\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A", "by simp"], ["proof (state)\nthis:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  ss \\<in> list n A", "have len_ss_n: \"length ss = n\""], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. length ss = n", "using  len_eq"], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n  length a = n\n\ngoal (1 subgoal):\n 1. length ss = n", "by simp"], ["proof (state)\nthis:\n  length ss = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "with len_eq"], ["proof (chain)\npicking this:\n  length a = n\n  length ss = n", "have len_ss_n: \"length ss = n\""], ["proof (prove)\nusing this:\n  length a = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. length ss = n", "by auto"], ["proof (state)\nthis:\n  length ss = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from ss_in_A"], ["proof (chain)\npicking this:\n  ss \\<in> list n A", "have set_ss: \"set ss \\<subseteq> A \""], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> A", "by (rule listE_set)"], ["proof (state)\nthis:\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  set ss \\<subseteq> A", "have ss_inA:  \"\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A", "have ss_p_subset: \"\\<forall>p< length ss.  set (ss!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from w_lt_n len_ss_n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n\n  length ss = n", "have bounded_a: \"\\<And>a b.  w \\<noteq> [] \\<Longrightarrow> (a, b) \\<in> set ?qs_ss \\<Longrightarrow> a < length ss\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  length ss = n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>w \\<noteq> [];\n        (a, b) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n       \\<Longrightarrow> a < length ss", "by (auto simp add:bounded_exec')"], ["proof (state)\nthis:\n  \\<lbrakk>w \\<noteq> [];\n   (?a, ?b) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?a < length ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have sorted_a_hdw_n: \"w \\<noteq> [] \\<longrightarrow> sorted (rev ?a_hdw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (a ! hd w))", "using wf_a_b len_eq w_set'"], ["proof (prove)\nusing this:\n  wf_dom a b\n  length a = n\n  \\<forall>x\\<in>set w. x \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (a ! hd w))", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (a ! hd w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have sorted_ss_hdw_n: \"w \\<noteq> [] \\<longrightarrow> sorted (rev ?ss_hdw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (ss ! hd w))", "using ss_in_A inA_is_sorted w_lt_n"], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n  ?xs \\<in> A \\<Longrightarrow> Sorted_Less.sorted (rev ?xs)\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (ss ! hd w))", "by auto"], ["proof (state)\nthis:\n  w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have \"w \\<noteq> [] \\<longrightarrow> (hd w # ?ss_hdw) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<longrightarrow> hd w # ss ! hd w \\<in> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "assume w_n_nil: \"w \\<noteq> []\""], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []", "have hd_w_lt_n: \"hd w < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w < n", "by auto"], ["proof (state)\nthis:\n  hd w < n\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with a_in_A"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  hd w < n", "have a_hdw_inA: \"?a_hdw \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  hd w < n\n\ngoal (1 subgoal):\n 1. a ! hd w \\<in> A", "using len_eq"], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  hd w < n\n  length a = n\n\ngoal (1 subgoal):\n 1. a ! hd w \\<in> A", "by auto"], ["proof (state)\nthis:\n  a ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  a ! hd w \\<in> A", "have a_hdw_in_nodes: \"set ?a_hdw \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  a ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. set (a ! hd w) \\<subseteq> set nodes", "by (unfold A_def )(rule inpow_subset_nodes)"], ["proof (state)\nthis:\n  set (a ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from hd_w_lt_n"], ["proof (chain)\npicking this:\n  hd w < n", "have hdw_in_nodes: \"hd w \\<in> set nodes\""], ["proof (prove)\nusing this:\n  hd w < n\n\ngoal (1 subgoal):\n 1. hd w \\<in> set nodes", "using verts_set"], ["proof (prove)\nusing this:\n  hd w < n\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. hd w \\<in> set nodes", "by (simp add:n_def nodes_def)"], ["proof (state)\nthis:\n  hd w \\<in> set nodes\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from sorted_a_hdw_n w_n_nil"], ["proof (chain)\npicking this:\n  w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (a ! hd w))\n  w \\<noteq> []", "have sorted_a_hdw: \"sorted (rev ?a_hdw)\""], ["proof (prove)\nusing this:\n  w \\<noteq> [] \\<longrightarrow> Sorted_Less.sorted (rev (a ! hd w))\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (a ! hd w))", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (a ! hd w))\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "show \"(hd w # ?ss_hdw) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<in> A", "proof(cases \"hd w \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "case True"], ["proof (state)\nthis:\n  hd w \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  hd w \\<in> succs (hd b)", "obtain s where s: \"(hd w, s) \\<in> set ?qs_a\""], ["proof (prove)\nusing this:\n  hd w \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        (hd w, s) \\<in> set (step (hd b) (a ! hd b)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  hd w \\<in> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        (hd w, s) \\<in> set (step (hd b) (a ! hd b)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  (hd w, s) \\<in> set (step (hd b) (a ! hd b))\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with step_hd_b"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     \\<tau> = hd b # a ! hd b\n  (hd w, s) \\<in> set (step (hd b) (a ! hd b))", "have \"s = (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     \\<tau> = hd b # a ! hd b\n  (hd w, s) \\<in> set (step (hd b) (a ! hd b))\n\ngoal (1 subgoal):\n 1. s = hd b # a ! hd b", "by auto"], ["proof (state)\nthis:\n  s = hd b # a ! hd b\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with s propa_ss1"], ["proof (chain)\npicking this:\n  (hd w, s) \\<in> set (step (hd b) (a ! hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  s = hd b # a ! hd b", "have ss_hd_w: \"?ss_hdw = (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_hdw\""], ["proof (prove)\nusing this:\n  (hd w, s) \\<in> set (step (hd b) (a ! hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  s = hd b # a ! hd b\n\ngoal (1 subgoal):\n 1. ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w", "by auto"], ["proof (state)\nthis:\n  ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with hd_b_cons_in_A a_hdw_inA"], ["proof (chain)\npicking this:\n  hd b # a ! hd b \\<in> A\n  a ! hd w \\<in> A\n  ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w", "have \"?ss_hdw \\<in> A\""], ["proof (prove)\nusing this:\n  hd b # a ! hd b \\<in> A\n  a ! hd w \\<in> A\n  ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w\n\ngoal (1 subgoal):\n 1. ss ! hd w \\<in> A", "by (simp add: Semilat.closed_f[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  ss ! hd w \\<in> A\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  ss ! hd w \\<in> A", "have ss_hdw_in_nodes: \"set ?ss_hdw \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. set (ss ! hd w) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  set (ss ! hd w) \\<subseteq> set nodes\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with hdw_in_nodes"], ["proof (chain)\npicking this:\n  hd w \\<in> set nodes\n  set (ss ! hd w) \\<subseteq> set nodes", "have hdw_cons_ss_in_nodes: \"set (hd w # ?ss_hdw) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  hd w \\<in> set nodes\n  set (ss ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd w # ss ! hd w) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes", "have in_pow: \"set (hd w # ?ss_hdw) \\<in> Pow (set (g_V G))\""], ["proof (prove)\nusing this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd w # ss ! hd w) \\<in> Pow (set (g_V G))", "by (auto simp add:nodes_def)"], ["proof (state)\nthis:\n  set (hd w # ss ! hd w) \\<in> Pow (set (g_V G))\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from sorted_a_hdw ss_hd_w sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (a ! hd w))\n  ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w\n  Sorted_Less.sorted (rev (hd b # a ! hd b))", "have \"sorted (rev ?ss_hdw)\" and \"set ?ss_hdw = set (hd b # ?a_hdb) \\<inter> set ?a_hdw\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (a ! hd w))\n  ss ! hd w = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! hd w\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! hd w)) &&&\n    set (ss ! hd w) = set (hd b # a ! hd b) \\<inter> set (a ! hd w)", "by (auto simp add:f_def plussub_def nodes_sup_def inter_sorted_correct)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  set (ss ! hd w) = set (hd b # a ! hd b) \\<inter> set (a ! hd w)\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  set (ss ! hd w) = set (hd b # a ! hd b) \\<inter> set (a ! hd w)", "have sorted_ss_hdw: \"sorted (rev ?ss_hdw)\" \n            and ss_hdw_subset_a_hdb_cons: \"set ?ss_hdw \\<subseteq> set (hd b # ?a_hdb)\" \n            and ss_hdw_subset_a_hdw: \"set ?ss_hdw \\<subseteq> set ?a_hdw\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  set (ss ! hd w) = set (hd b # a ! hd b) \\<inter> set (a ! hd w)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! hd w)) &&&\n    set (ss ! hd w) \\<subseteq> set (hd b # a ! hd b) &&&\n    set (ss ! hd w) \\<subseteq> set (a ! hd w)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  set (ss ! hd w) \\<subseteq> set (hd b # a ! hd b)\n  set (ss ! hd w) \\<subseteq> set (a ! hd w)\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from  sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))", "have \"\\<forall>x\\<in> set (hd b # ?a_hdb). x \\<le> hd b\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b", "using b_n_nil"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b", "by (induct b) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with ss_hdw_subset_a_hdb_cons"], ["proof (chain)\npicking this:\n  set (ss ! hd w) \\<subseteq> set (hd b # a ! hd b)\n  \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b", "have ss_hdw_lt_hdb: \"\\<forall>x\\<in>set ?ss_hdw. x \\<le> hd b\""], ["proof (prove)\nusing this:\n  set (ss ! hd w) \\<subseteq> set (hd b # a ! hd b)\n  \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x \\<le> hd b", "using sorted_hd_b_cons"], ["proof (prove)\nusing this:\n  set (ss ! hd w) \\<subseteq> set (hd b # a ! hd b)\n  \\<forall>x\\<in>set (hd b # a ! hd b). x \\<le> hd b\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x \\<le> hd b", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x \\<le> hd b\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "have sorted_rev_hdw: \"sorted (rev (hd w # ?ss_hdw))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "proof(cases \"?a_hdw = rev [0..<n]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case True"], ["proof (state)\nthis:\n  a ! hd w = rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]", "have \"\\<exists>x\\<in> set b. (x,hd w)\\<in> g_E G \\<and> x < hd w\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "using hd_w_lt_n"], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "obtain prev_hd_w where prev_hd_w_in_b: \"prev_hd_w \\<in> set b\" \n                                and prev_hd_w: \"(prev_hd_w, hd w)\\<in> g_E G\"\n                                and prev_hd_w_lt: \"prev_hd_w < hd w\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (1 subgoal):\n 1. (\\<And>prev_hd_w.\n        \\<lbrakk>prev_hd_w \\<in> set b; (prev_hd_w, hd w) \\<in> g_E G;\n         prev_hd_w < hd w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<in> set b\n  (prev_hd_w, hd w) \\<in> g_E G\n  prev_hd_w < hd w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "proof(cases \"prev_hd_w = hd b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. prev_hd_w = hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case True"], ["proof (state)\nthis:\n  prev_hd_w = hd b\n\ngoal (2 subgoals):\n 1. prev_hd_w = hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_lt"], ["proof (chain)\npicking this:\n  prev_hd_w < hd w\n  prev_hd_w = hd b", "have \"hd b < hd w\""], ["proof (prove)\nusing this:\n  prev_hd_w < hd w\n  prev_hd_w = hd b\n\ngoal (1 subgoal):\n 1. hd b < hd w", "by auto"], ["proof (state)\nthis:\n  hd b < hd w\n\ngoal (2 subgoals):\n 1. prev_hd_w = hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with ss_hdw_lt_hdb"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (ss ! hd w). x \\<le> hd b\n  hd b < hd w", "have \"\\<forall>x\\<in>set ?ss_hdw. hd w > x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (ss ! hd w). x \\<le> hd b\n  hd b < hd w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (2 subgoals):\n 1. prev_hd_w = hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with sorted_ss_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case False"], ["proof (state)\nthis:\n  prev_hd_w \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_in_b"], ["proof (chain)\npicking this:\n  prev_hd_w \\<in> set b\n  prev_hd_w \\<noteq> hd b", "have \"prev_hd_w \\<in> set (tl b)\""], ["proof (prove)\nusing this:\n  prev_hd_w \\<in> set b\n  prev_hd_w \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<in> set (tl b)", "by (induct b) auto"], ["proof (state)\nthis:\n  prev_hd_w \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with ww"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  prev_hd_w \\<in> set (tl b)", "have prev_hd_w_nin_w: \"prev_hd_w \\<in> set w\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  prev_hd_w \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<in> set w", "using fin"], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  prev_hd_w \\<in> set (tl b)\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<in> set w", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<in> set w\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "from sorted_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have \"\\<forall>x\\<in> set w. x \\<ge> hd w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. hd w \\<le> x", "by(induct w) (auto simp add:sorted_wrt_append sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_lt"], ["proof (chain)\npicking this:\n  prev_hd_w < hd w\n  \\<forall>x\\<in>set w. hd w \\<le> x", "have \"prev_hd_w \\<notin> set w\""], ["proof (prove)\nusing this:\n  prev_hd_w < hd w\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<notin> set w", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<notin> set w\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<noteq> hd b \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_nin_w"], ["proof (chain)\npicking this:\n  prev_hd_w \\<in> set w\n  prev_hd_w \\<notin> set w", "show ?thesis"], ["proof (prove)\nusing this:\n  prev_hd_w \\<in> set w\n  prev_hd_w \\<notin> set w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case False"], ["proof (state)\nthis:\n  a ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]", "have \"(\\<forall>x\\<in>set ?a_hdw. x < hd w)\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! hd w). x < hd w", "using hd_w_lt_n"], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! hd w). x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with ss_hdw_subset_a_hdw"], ["proof (chain)\npicking this:\n  set (ss ! hd w) \\<subseteq> set (a ! hd w)\n  \\<forall>x\\<in>set (a ! hd w). x < hd w", "have \"(\\<forall>x\\<in>set ?ss_hdw. x < hd w)\""], ["proof (prove)\nusing this:\n  set (ss ! hd w) \\<subseteq> set (a ! hd w)\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with sorted_ss_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (2 subgoals):\n 1. hd w \\<in> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A\n 2. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with hdw_cons_ss_in_nodes"], ["proof (chain)\npicking this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))", "show \"hd w # ?ss_hdw \\<in> A\""], ["proof (prove)\nusing this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<in> A", "using A_def"], ["proof (prove)\nusing this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  A \\<equiv> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<in> A", "by (fastforce dest:subset_nodes_inpow)"], ["proof (state)\nthis:\n  hd w # ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "case False"], ["proof (state)\nthis:\n  hd w \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "note hd_w_nin_succ_hdb = this"], ["proof (state)\nthis:\n  hd w \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "then"], ["proof (chain)\npicking this:\n  hd w \\<notin> succs (hd b)", "have \"hd w \\<notin> set (map fst ?qs_a)\""], ["proof (prove)\nusing this:\n  hd w \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  hd w \\<notin> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with exec2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))", "have ss_hd_w_eq_a: \"?ss_hdw = ?a_hdw\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. ss ! hd w = a ! hd w", "using hd_w_lt_n len_ss_n len_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  hd w \\<notin> set (map fst (step (hd b) (a ! hd b)))\n  hd w < n\n  length ss = n\n  length a = n\n\ngoal (1 subgoal):\n 1. ss ! hd w = a ! hd w", "by auto"], ["proof (state)\nthis:\n  ss ! hd w = a ! hd w\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with a_hdw_in_nodes  sorted_a_hdw"], ["proof (chain)\npicking this:\n  set (a ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (a ! hd w))\n  ss ! hd w = a ! hd w", "have ss_hdw_in_nodes: \"set ?ss_hdw \\<subseteq> set nodes\" \n                                         and sorted_ss_hdw: \"sorted (rev ?ss_hdw)\""], ["proof (prove)\nusing this:\n  set (a ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (a ! hd w))\n  ss ! hd w = a ! hd w\n\ngoal (1 subgoal):\n 1. set (ss ! hd w) \\<subseteq> set nodes &&&\n    Sorted_Less.sorted (rev (ss ! hd w))", "by auto"], ["proof (state)\nthis:\n  set (ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with hdw_in_nodes"], ["proof (chain)\npicking this:\n  hd w \\<in> set nodes\n  set (ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (ss ! hd w))", "have hdw_cons_in_nodes: \"set (hd w # ?ss_hdw) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  hd w \\<in> set nodes\n  set (ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. set (hd w # ss ! hd w) \\<subseteq> set nodes", "by (auto)"], ["proof (state)\nthis:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from hd_w_nin_succ_hdb ww"], ["proof (chain)\npicking this:\n  hd w \\<notin> succs (hd b)\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))", "have hd_w_non: \"hd w \\<notin>{q. \\<exists>t. (q, t) \\<in> set ?qs_a \\<and> t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\""], ["proof (prove)\nusing this:\n  hd w \\<notin> succs (hd b)\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. hd w\n    \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  hd w \\<notin> succs (hd b)\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. hd w\n    \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "by (auto simp add:step_def exec_def )"], ["proof (state)\nthis:\n  hd w\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "from set_ww hd_w_non"], ["proof (chain)\npicking this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  hd w\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "have hd_w_in_tl_b: \"hd w \\<in> set (tl b)\""], ["proof (prove)\nusing this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  hd w\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. hd w \\<in> set (tl b)", "using sorted_tl_b `w \\<noteq> []`"], ["proof (prove)\nusing this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  hd w\n  \\<notin> {q. \\<exists>t.\n                  (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                  t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n  Sorted_Less.sorted (tl b)\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w \\<in> set (tl b)", "by auto"], ["proof (state)\nthis:\n  hd w \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "have sorted_rev_hdw: \"sorted (rev (hd w # ?ss_hdw))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "proof(cases \"?a_hdw = rev [0..<n]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case True"], ["proof (state)\nthis:\n  a ! hd w = rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]", "have \"\\<exists>x\\<in> set b. (x,hd w)\\<in> g_E G \\<and> x < hd w\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "using hd_w_lt_n"], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w = rev [0..<n]\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w", "obtain prev_hd_w where prev_hd_w_in_b: \"prev_hd_w \\<in> set b\" \n                                and prev_hd_w:      \"(prev_hd_w, hd w)\\<in> g_E G\" \n                                and prev_hd_w_lt:   \"prev_hd_w < hd w\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, hd w) \\<in> g_E G \\<and> x < hd w\n\ngoal (1 subgoal):\n 1. (\\<And>prev_hd_w.\n        \\<lbrakk>prev_hd_w \\<in> set b; (prev_hd_w, hd w) \\<in> g_E G;\n         prev_hd_w < hd w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<in> set b\n  (prev_hd_w, hd w) \\<in> g_E G\n  prev_hd_w < hd w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "from ww"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))", "have \"sorted w\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted w", "by(simp add:sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have \"\\<forall>x\\<in> set w. x \\<ge> hd w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. hd w \\<le> x", "using w_n_nil"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. hd w \\<le> x", "by (induct w) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_lt"], ["proof (chain)\npicking this:\n  prev_hd_w < hd w\n  \\<forall>x\\<in>set w. hd w \\<le> x", "have prev_hd_w_nin_w: \"prev_hd_w \\<notin> set w\""], ["proof (prove)\nusing this:\n  prev_hd_w < hd w\n  \\<forall>x\\<in>set w. hd w \\<le> x\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<notin> set w", "using w_n_nil"], ["proof (prove)\nusing this:\n  prev_hd_w < hd w\n  \\<forall>x\\<in>set w. hd w \\<le> x\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<notin> set w", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<notin> set w\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with set_ww"], ["proof (chain)\npicking this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  prev_hd_w \\<notin> set w", "have \"prev_hd_w \\<notin> set (tl b)\""], ["proof (prove)\nusing this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  prev_hd_w \\<notin> set w\n\ngoal (1 subgoal):\n 1. prev_hd_w \\<notin> set (tl b)", "by auto"], ["proof (state)\nthis:\n  prev_hd_w \\<notin> set (tl b)\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w_in_b"], ["proof (chain)\npicking this:\n  prev_hd_w \\<in> set b\n  prev_hd_w \\<notin> set (tl b)", "have \"prev_hd_w = hd b\""], ["proof (prove)\nusing this:\n  prev_hd_w \\<in> set b\n  prev_hd_w \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. prev_hd_w = hd b", "using sorted_b"], ["proof (prove)\nusing this:\n  prev_hd_w \\<in> set b\n  prev_hd_w \\<notin> set (tl b)\n  Sorted_Less.sorted b\n\ngoal (1 subgoal):\n 1. prev_hd_w = hd b", "by (induct b) auto"], ["proof (state)\nthis:\n  prev_hd_w = hd b\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with prev_hd_w"], ["proof (chain)\npicking this:\n  (prev_hd_w, hd w) \\<in> g_E G\n  prev_hd_w = hd b", "have \"(hd b, hd w) \\<in> g_E G\""], ["proof (prove)\nusing this:\n  (prev_hd_w, hd w) \\<in> g_E G\n  prev_hd_w = hd b\n\ngoal (1 subgoal):\n 1. (hd b, hd w) \\<in> g_E G", "by auto"], ["proof (state)\nthis:\n  (hd b, hd w) \\<in> g_E G\n\ngoal (2 subgoals):\n 1. a ! hd w = rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))\n 2. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with hd_w_nin_succ_hdb"], ["proof (chain)\npicking this:\n  hd w \\<notin> succs (hd b)\n  (hd b, hd w) \\<in> g_E G", "show ?thesis"], ["proof (prove)\nusing this:\n  hd w \\<notin> succs (hd b)\n  (hd b, hd w) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "by (auto simp add:succs_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "case False"], ["proof (state)\nthis:\n  a ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]", "have a_hdw_lt: \"(\\<forall>x\\<in>set ?a_hdw. x < hd w)\" \n                     and \"sorted (rev ?a_hdw)\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! hd w). x < hd w &&&\n    Sorted_Less.sorted (rev (a ! hd w))", "using hd_w_lt_n"], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd w \\<noteq> rev [0..<n]\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! hd w). x < hd w &&&\n    Sorted_Less.sorted (rev (a ! hd w))", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n  Sorted_Less.sorted (rev (a ! hd w))\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with ss_hd_w_eq_a"], ["proof (chain)\npicking this:\n  ss ! hd w = a ! hd w\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n  Sorted_Less.sorted (rev (a ! hd w))", "have \"sorted (rev ?ss_hdw)\""], ["proof (prove)\nusing this:\n  ss ! hd w = a ! hd w\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n  Sorted_Less.sorted (rev (a ! hd w))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! hd w))", "by simp"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "from ss_hd_w_eq_a"], ["proof (chain)\npicking this:\n  ss ! hd w = a ! hd w", "have \"?a_hdw =  ?ss_hdw\""], ["proof (prove)\nusing this:\n  ss ! hd w = a ! hd w\n\ngoal (1 subgoal):\n 1. a ! hd w = ss ! hd w", "by auto"], ["proof (state)\nthis:\n  a ! hd w = ss ! hd w\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with a_hdw_lt"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n  a ! hd w = ss ! hd w", "have \"\\<forall>x\\<in>set ?ss_hdw. x < hd w\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (a ! hd w). x < hd w\n  a ! hd w = ss ! hd w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. a ! hd w \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (hd w # ss ! hd w))", "with sorted_ss_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ss ! hd w))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. hd w \\<notin> succs (hd b) \\<Longrightarrow> hd w # ss ! hd w \\<in> A", "with hdw_cons_in_nodes"], ["proof (chain)\npicking this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))", "show \" (hd w # ss ! hd w) \\<in> A\""], ["proof (prove)\nusing this:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<in> A", "by (unfold A_def) (rule subset_nodes_inpow)"], ["proof (state)\nthis:\n  hd w # ss ! hd w \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd w # ss ! hd w \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<noteq> [] \\<longrightarrow> hd w # ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "then"], ["proof (chain)\npicking this:\n  w \\<noteq> [] \\<longrightarrow> hd w # ss ! hd w \\<in> A", "have pres_ss: \"\\<And>q \\<tau>. w \\<noteq> [] \\<Longrightarrow> (q, \\<tau>) \\<in> set (step (hd w) ?ss_hdw) \\<Longrightarrow> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  w \\<noteq> [] \\<longrightarrow> hd w # ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>q \\<tau>.\n       \\<lbrakk>w \\<noteq> [];\n        (q, \\<tau>) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<in> A", "by (auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<lbrakk>w \\<noteq> [];\n   (?q, ?\\<tau>) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have hd_b_ss_sta: \"stable r step ss (hd b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stable r step ss (hd b)", "proof(unfold stable_def, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "fix q \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "assume \"(q, \\<tau>) \\<in> set ?qs_ss_hdb \""], ["proof (state)\nthis:\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))", "have \"q \\<in> succs (hd b)\" and  \"\\<tau> = transf (hd b) ?ss_hdb\""], ["proof (prove)\nusing this:\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))\n\ngoal (1 subgoal):\n 1. q \\<in> succs (hd b) &&& \\<tau> = transf (hd b) (ss ! hd b)", "using hd_b_lt_n fin_succ_hd_b"], ["proof (prove)\nusing this:\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))\n  hd b < n\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. q \\<in> succs (hd b) &&& \\<tau> = transf (hd b) (ss ! hd b)", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  q \\<in> succs (hd b)\n  \\<tau> = transf (hd b) (ss ! hd b)\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  q \\<in> succs (hd b)\n  \\<tau> = transf (hd b) (ss ! hd b)", "have \\<tau>:\"\\<tau> =  (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  q \\<in> succs (hd b)\n  \\<tau> = transf (hd b) (ss ! hd b)\n\ngoal (1 subgoal):\n 1. \\<tau> = hd b # a ! hd b", "using ss_hd_b_eq_a"], ["proof (prove)\nusing this:\n  q \\<in> succs (hd b)\n  \\<tau> = transf (hd b) (ss ! hd b)\n  ss ! hd b = a ! hd b\n\ngoal (1 subgoal):\n 1. \\<tau> = hd b # a ! hd b", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  \\<tau> = hd b # a ! hd b\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from `q \\<in> succs (hd b)` hd_b_lt_n"], ["proof (chain)\npicking this:\n  q \\<in> succs (hd b)\n  hd b < n", "have \"q\\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  q \\<in> succs (hd b)\n  hd b < n\n\ngoal (1 subgoal):\n 1. q \\<in> set (g_V G)", "using succ_in_G"], ["proof (prove)\nusing this:\n  q \\<in> succs (hd b)\n  hd b < n\n  \\<forall>v\\<in>succs ?n. v \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. q \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  q \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  q \\<in> set (g_V G)", "have \"q < n\""], ["proof (prove)\nusing this:\n  q \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. q < n", "using verts_set"], ["proof (prove)\nusing this:\n  q \\<in> set (g_V G)\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. q < n", "by (auto simp add:n_def nodes_def)"], ["proof (state)\nthis:\n  q < n\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  q < n", "have a_q_inA: \"a!q \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  q < n\n\ngoal (1 subgoal):\n 1. a ! q \\<in> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  a ! q \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from wf_a_b a_hd_b_neq_all hd_b_lt_n"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! hd b \\<noteq> rev [0..<n]\n  hd b < n", "have \"\\<forall>x\\<in> set ( (a!hd b)). x < hd b\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! hd b \\<noteq> rev [0..<n]\n  hd b < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! hd b). x < hd b", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a ! hd b). x < hd b\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  \\<forall>x\\<in>set (a ! hd b). x < hd b", "have \"sorted (rev (hd b # ?a_hdb))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  \\<forall>x\\<in>set (a ! hd b). x < hd b\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd b # a ! hd b))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from propa_ss1 `(q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))`"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))", "have \"ss!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))\n\ngoal (1 subgoal):\n 1. ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "using `ss!hd b = a!hd b`"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  (q, \\<tau>) \\<in> set (step (hd b) (ss ! hd b))\n  ss ! hd b = a ! hd b\n\ngoal (1 subgoal):\n 1. ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by auto"], ["proof (state)\nthis:\n  ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with \\<tau>"], ["proof (chain)\npicking this:\n  \\<tau> = hd b # a ! hd b\n  ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have \"ss!q =  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> a ! q\""], ["proof (prove)\nusing this:\n  \\<tau> = hd b # a ! hd b\n  ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by simp"], ["proof (state)\nthis:\n  ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with hd_b_cons_in_A a_q_inA"], ["proof (chain)\npicking this:\n  hd b # a ! hd b \\<in> A\n  a ! q \\<in> A\n  ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have \" (hd b # ?a_hdb)\\<sqsubseteq>\\<^bsub>r\\<^esub> ss!q \""], ["proof (prove)\nusing this:\n  hd b # a ! hd b \\<in> A\n  a ! q \\<in> A\n  ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by (auto simp add: Semilat.ub1[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>a ba.\n       (a, ba) \\<in> set (step (hd b) (ss ! hd b)) \\<Longrightarrow>\n       ba \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with \\<tau>"], ["proof (chain)\npicking this:\n  \\<tau> = hd b # a ! hd b\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "show \"\\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\""], ["proof (prove)\nusing this:\n  \\<tau> = hd b # a ! hd b\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  stable r step ss (hd b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "have wf_dom_2: \"\\<forall>p<n.\n        sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set ( (ss ! p)). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "let ?a_p = \"a!p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "let ?ss_p = \"ss!p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "assume p_lt_n: \"p < n\""], ["proof (state)\nthis:\n  p < n\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  p < n", "have a_p_inA: \"?a_p \\<in> A\" \n                 and sorted_a_p: \"sorted (rev ?a_p)\" \n                 and sta_a_p: \"p \\<notin> set b \\<longrightarrow> stable r step a p\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  p < n\n\ngoal (1 subgoal):\n 1. a ! p \\<in> A &&&\n    Sorted_Less.sorted (rev (a ! p)) &&&\n    p \\<notin> set b \\<longrightarrow> stable r step a p", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  a ! p \\<in> A\n  Sorted_Less.sorted (rev (a ! p))\n  p \\<notin> set b \\<longrightarrow> stable r step a p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from p_lt_n"], ["proof (chain)\npicking this:\n  p < n", "have \"p \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  p < n\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G)", "using verts_set n_def nodes_def"], ["proof (prove)\nusing this:\n  p < n\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  p \\<in> set (g_V G)", "have fin_succ_p: \"finite (succs p)\""], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs p)", "using fin_succs"], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs p)", "by auto"], ["proof (state)\nthis:\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from set_a p_lt_n"], ["proof (chain)\npicking this:\n  set a \\<subseteq> A\n  p < n", "have a_p_inA: \"?a_p \\<in> A\""], ["proof (prove)\nusing this:\n  set a \\<subseteq> A\n  p < n\n\ngoal (1 subgoal):\n 1. a ! p \\<in> A", "using `length a = n`"], ["proof (prove)\nusing this:\n  set a \\<subseteq> A\n  p < n\n  length a = n\n\ngoal (1 subgoal):\n 1. a ! p \\<in> A", "by (auto simp add:A_def)"], ["proof (state)\nthis:\n  a ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  a ! p \\<in> A", "have \"set ?a_p \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  a ! p \\<in> A\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<subseteq> set nodes", "using inpow_subset_nodes"], ["proof (prove)\nusing this:\n  a ! p \\<in> A\n  ?xs\n  \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes) \\<Longrightarrow>\n  set ?xs \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<subseteq> set nodes", "by (auto simp add:A_def)"], ["proof (state)\nthis:\n  set (a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with p_lt_n"], ["proof (chain)\npicking this:\n  p < n\n  set (a ! p) \\<subseteq> set nodes", "have set_p_a_p: \"set (p#?a_p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  p < n\n  set (a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (p # a ! p) \\<subseteq> set nodes", "using n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  p < n\n  set (a ! p) \\<subseteq> set nodes\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. set (p # a ! p) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (p # a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from p_lt_n len_eq"], ["proof (chain)\npicking this:\n  p < n\n  length a = n", "have p_lt_len_a:  \"p < length a\""], ["proof (prove)\nusing this:\n  p < n\n  length a = n\n\ngoal (1 subgoal):\n 1. p < length a", "by auto"], ["proof (state)\nthis:\n  p < length a\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_inA"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  p < length a", "have ss_p_in_A: \"ss!p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  p < length a\n\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "using len_eq len_ss_n"], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  p < length a\n  length a = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with p_lt_n"], ["proof (chain)\npicking this:\n  p < n\n  ss ! p \\<in> A", "have sorted_ss_p: \"sorted (rev ?ss_p)\""], ["proof (prove)\nusing this:\n  p < n\n  ss ! p \\<in> A\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p))", "by (auto simp add:A_def sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have len_ss_eq_a: \"length ss = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ss = length a", "using  len_eq len_ss_n"], ["proof (prove)\nusing this:\n  length a = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. length ss = length a", "by auto"], ["proof (state)\nthis:\n  length ss = length a\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have p_nin_w_eq: \"p \\<notin> set w \\<longleftrightarrow> (p \\<notin> set b \\<or> p = hd b) \\<and> (\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow> s \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<notin> set w) =\n    ((p \\<notin> set b \\<or> p = hd b) \\<and>\n     (\\<forall>s.\n         (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n         s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<notin> set w \\<Longrightarrow>\n    (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n 2. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "assume \"p \\<notin> set w\""], ["proof (state)\nthis:\n  p \\<notin> set w\n\ngoal (2 subgoals):\n 1. p \\<notin> set w \\<Longrightarrow>\n    (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n 2. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "with set_ww"], ["proof (chain)\npicking this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  p \\<notin> set w", "have p_nin1: \"p \\<notin> {q. \\<exists>t. (q, t) \\<in> set ?qs_a\\<and> t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\" \n                   and p_nin2: \"p \\<notin> set (tl b)\""], ["proof (prove)\nusing this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  p \\<notin> set w\n\ngoal (1 subgoal):\n 1. p \\<notin> {q. \\<exists>t.\n                      (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                      t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq>\n                      a ! q} &&&\n    p \\<notin> set (tl b)", "by auto"], ["proof (state)\nthis:\n  p \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n  p \\<notin> set (tl b)\n\ngoal (2 subgoals):\n 1. p \\<notin> set w \\<Longrightarrow>\n    (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n 2. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "from p_nin1"], ["proof (chain)\npicking this:\n  p \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}", "have p_nin: \"(\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow> s \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (prove)\nusing this:\n  p \\<notin> {q. \\<exists>t.\n                    (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n                    t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q}\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n       s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (2 subgoals):\n 1. p \\<notin> set w \\<Longrightarrow>\n    (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n 2. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "from p_nin2"], ["proof (chain)\npicking this:\n  p \\<notin> set (tl b)", "have  \"p \\<notin> set b \\<or> p = hd b\""], ["proof (prove)\nusing this:\n  p \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<or> p = hd b", "by (induct b) auto"], ["proof (state)\nthis:\n  p \\<notin> set b \\<or> p = hd b\n\ngoal (2 subgoals):\n 1. p \\<notin> set w \\<Longrightarrow>\n    (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n 2. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "with p_nin"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  p \\<notin> set b \\<or> p = hd b", "show \"(p \\<notin> set b \\<or> p = hd b) \\<and> (\\<forall>s. (p, s) \\<in> set  ?qs_a \\<longrightarrow> s \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  p \\<notin> set b \\<or> p = hd b\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "by auto"], ["proof (state)\nthis:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "assume \"(p \\<notin> set b \\<or> p = hd b) \\<and> (\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow> s \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (state)\nthis:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "then"], ["proof (chain)\npicking this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "have p1: \"p \\<notin> set b \\<or> p = hd b\" \n            and p2: \"\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow> s \\<squnion>\\<^bsub>f\\<^esub> a ! p = ?a_p\""], ["proof (prove)\nusing this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<or> p = hd b &&&\n    \\<forall>s.\n       (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n       s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set b \\<or> p = hd b\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "from p1"], ["proof (chain)\npicking this:\n  p \\<notin> set b \\<or> p = hd b", "have \"p \\<notin> set (tl b)\""], ["proof (prove)\nusing this:\n  p \\<notin> set b \\<or> p = hd b\n\ngoal (1 subgoal):\n 1. p \\<notin> set (tl b)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<notin> set b \\<Longrightarrow> p \\<notin> set (tl b)\n 2. p = hd b \\<Longrightarrow> p \\<notin> set (tl b)", "assume \"p \\<notin> set b\""], ["proof (state)\nthis:\n  p \\<notin> set b\n\ngoal (2 subgoals):\n 1. p \\<notin> set b \\<Longrightarrow> p \\<notin> set (tl b)\n 2. p = hd b \\<Longrightarrow> p \\<notin> set (tl b)", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set b", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. p \\<notin> set (tl b)", "by(induct b) auto"], ["proof (state)\nthis:\n  p \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow> p \\<notin> set (tl b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow> p \\<notin> set (tl b)", "assume \"p = hd b\""], ["proof (state)\nthis:\n  p = hd b\n\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow> p \\<notin> set (tl b)", "with sorted_b"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted b\n  p = hd b", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted b\n  p = hd b\n\ngoal (1 subgoal):\n 1. p \\<notin> set (tl b)", "by (induct b) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  p \\<notin> set (tl b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p) \\<Longrightarrow>\n    p \\<notin> set w", "with p2 set_ww"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  p \\<notin> set (tl b)", "show \"p \\<notin> set w\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  p \\<notin> set (tl b)\n\ngoal (1 subgoal):\n 1. p \\<notin> set w", "using set_ww"], ["proof (prove)\nusing this:\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  p \\<notin> set (tl b)\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n\ngoal (1 subgoal):\n 1. p \\<notin> set w", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (p \\<notin> set w) =\n  ((p \\<notin> set b \\<or> p = hd b) \\<and>\n   (\\<forall>s.\n       (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n       s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have stable_ss_p: \"p \\<notin> set w \\<longrightarrow> w \\<noteq> Nil \\<longrightarrow> stable r step ss p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> set w \\<longrightarrow>\n    w \\<noteq> [] \\<longrightarrow> stable r step ss p", "proof (clarsimp simp add: stable_def split_paired_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "fix q \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "assume p_nin_w: \"p \\<notin> set w\" and w_n_nil: \"w \\<noteq> Nil\" and step_ss_p: \"(q, \\<tau>) \\<in> set (step p ?ss_p) \""], ["proof (state)\nthis:\n  p \\<notin> set w\n  w \\<noteq> []\n  (q, \\<tau>) \\<in> set (step p (ss ! p))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from p_nin_w"], ["proof (chain)\npicking this:\n  p \\<notin> set w", "have p_cond: \"(p \\<notin> set b \\<or> p = hd b) \\<and> \n                                 (\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow>  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (prove)\nusing this:\n  p \\<notin> set w\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "using p_nin_w_eq"], ["proof (prove)\nusing this:\n  p \\<notin> set w\n  (p \\<notin> set w) =\n  ((p \\<notin> set b \\<or> p = hd b) \\<and>\n   (\\<forall>s.\n       (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n       s \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p))\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b \\<or> p = hd b) \\<and>\n    (\\<forall>s.\n        (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n        hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "by (auto simp add:transf_def step_def exec_def)"], ["proof (state)\nthis:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "have p_cond1: \"(p \\<notin> set b \\<or> p = hd b)\"\n            and p_cond2: \"(\\<forall>s. (p, s) \\<in> set ?qs_a \\<longrightarrow>  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p = ?a_p)\""], ["proof (prove)\nusing this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<or> p = hd b &&&\n    \\<forall>s.\n       (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n       hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set b \\<or> p = hd b\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from bounded_a pres_ss w_n_nil"], ["proof (chain)\npicking this:\n  \\<lbrakk>w \\<noteq> [];\n   (?a, ?b) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?a < length ss\n  \\<lbrakk>w \\<noteq> [];\n   (?q, ?\\<tau>) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<in> A\n  w \\<noteq> []", "have \" \\<forall>(q, t)\\<in>set ?qs_ss. q < length ss \\<and> t \\<in> A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>w \\<noteq> [];\n   (?a, ?b) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?a < length ss\n  \\<lbrakk>w \\<noteq> [];\n   (?q, ?\\<tau>) \\<in> set (step (hd w) (ss ! hd w))\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> \\<in> A\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> t \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> t \\<in> A", "have \"\\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)). q < length ss \\<and> (transf (hd w) (ss!hd w)) \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> t \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> transf (hd w) (ss ! hd w) \\<in> A", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, t)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> transf (hd w) (ss ! hd w) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "have ss_a_p_eq: \"?ss_p = ?a_p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "proof(cases \"p \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "case True"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "note p_in_succ_hd_b = this"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "from `p \\<in> succs (hd b)` propa_ss1'"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have ss_p: \"?ss_p =  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "from p_in_succ_hd_b p_cond2"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd b)\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "have \" (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p= ?a_p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>s.\n     (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n     hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with ss_p"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "case False"], ["proof (state)\nthis:\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> succs (hd b)", "have \"p \\<notin> {q. \\<exists>t. (q, t) \\<in> set ?qs_a}\""], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. p \\<notin> {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}", "using fin fin_succ_hd_b"], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd b)\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. p \\<notin> {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  p \\<notin> {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}", "have \"p \\<notin> set ( map fst ?qs_a)\""], ["proof (prove)\nusing this:\n  p \\<notin> {q. \\<exists>t. (q, t) \\<in> set (step (hd b) (a ! hd b))}\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b)))", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with p_lt_n"], ["proof (chain)\npicking this:\n  p < n\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))", "show ?thesis"], ["proof (prove)\nusing this:\n  p < n\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "using exec2 len_eq"], ["proof (prove)\nusing this:\n  p < n\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  length a = n\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "have \"(\\<forall>(q, \\<tau>)\\<in>set (step p ?ss_p). transf p ?ss_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "proof(intro strip, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "fix succ_p z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "let ?a_succ_p = \"a!succ_p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "let ?ss_succ_p = \"ss!succ_p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "assume \"(succ_p, z)  \\<in> set (step p ?ss_p)\""], ["proof (state)\nthis:\n  (succ_p, z) \\<in> set (step p (ss ! p))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "then"], ["proof (chain)\npicking this:\n  (succ_p, z) \\<in> set (step p (ss ! p))", "have succ_p: \"succ_p \\<in> succs p\""], ["proof (prove)\nusing this:\n  (succ_p, z) \\<in> set (step p (ss ! p))\n\ngoal (1 subgoal):\n 1. succ_p \\<in> succs p", "using p_lt_n fin_succ_p"], ["proof (prove)\nusing this:\n  (succ_p, z) \\<in> set (step p (ss ! p))\n  p < n\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. succ_p \\<in> succs p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  succ_p \\<in> succs p\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with p_lt_n"], ["proof (chain)\npicking this:\n  p < n\n  succ_p \\<in> succs p", "have succ_p_lt_n: \"succ_p < n\""], ["proof (prove)\nusing this:\n  p < n\n  succ_p \\<in> succs p\n\ngoal (1 subgoal):\n 1. succ_p < n", "using succ_in_verts  n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  p < n\n  succ_p \\<in> succs p\n  ?s \\<in> succs ?n \\<Longrightarrow> {?s, ?n} \\<subseteq> set (g_V G)\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. succ_p < n", "by auto"], ["proof (state)\nthis:\n  succ_p < n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  succ_p < n", "have a_succ_p_inA: \"?a_succ_p \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  succ_p < n\n\ngoal (1 subgoal):\n 1. a ! succ_p \\<in> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  a ! succ_p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "from succ_p_lt_n ss_in_A"], ["proof (chain)\npicking this:\n  succ_p < n\n  ss \\<in> list n A", "have ss_succ_p_inA: \"?ss_succ_p \\<in> A\""], ["proof (prove)\nusing this:\n  succ_p < n\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. ss ! succ_p \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! succ_p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "have p_nin_b_ssp: \"p \\<notin> set b \\<Longrightarrow> transf p ?ss_p \\<in> A \\<and> transf p ?ss_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "assume \"p \\<notin> set b\""], ["proof (state)\nthis:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "with sta_a_p"], ["proof (chain)\npicking this:\n  p \\<notin> set b \\<longrightarrow> stable r step a p\n  p \\<notin> set b", "have \"(\\<forall>(q,\\<tau>) \\<in> set (step p ?a_p). \\<tau> \\<sqsubseteq>\\<^sub>r a!q)\""], ["proof (prove)\nusing this:\n  p \\<notin> set b \\<longrightarrow> stable r step a p\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q", "by (simp add:stable_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "with succ_p"], ["proof (chain)\npicking this:\n  succ_p \\<in> succs p\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q", "have transf_p_succp':\"transf p ?a_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "using fin_succ_p"], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by (auto simp add:stable_def step_def exec_def)"], ["proof (state)\nthis:\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "with ss_a_p_eq"], ["proof (chain)\npicking this:\n  ss ! p = a ! p\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "have transf_lt_p: \"transf p ?ss_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "from transf_p_succp'"], ["proof (chain)\npicking this:\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "have \"(p# ?a_p) \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p # a ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  p # a ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "then"], ["proof (chain)\npicking this:\n  p # a ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "have \"sorted (rev (p#?a_p)) \\<or> (p#?a_p = ?a_succ_p)\""], ["proof (prove)\nusing this:\n  p # a ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (p # a ! p)) \\<or> p # a ! p = a ! succ_p", "by (auto simp add:step_def exec_def transf_def r_def lesssub_def lesub_def nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (p # a ! p)) \\<or> p # a ! p = a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "with set_p_a_p a_succ_p_inA"], ["proof (chain)\npicking this:\n  set (p # a ! p) \\<subseteq> set nodes\n  a ! succ_p \\<in> A\n  Sorted_Less.sorted (rev (p # a ! p)) \\<or> p # a ! p = a ! succ_p", "have \"(p#?a_p) \\<in> (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes))\""], ["proof (prove)\nusing this:\n  set (p # a ! p) \\<subseteq> set nodes\n  a ! succ_p \\<in> A\n  Sorted_Less.sorted (rev (p # a ! p)) \\<or> p # a ! p = a ! succ_p\n\ngoal (1 subgoal):\n 1. p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "using subset_nodes_inpow"], ["proof (prove)\nusing this:\n  set (p # a ! p) \\<subseteq> set nodes\n  a ! succ_p \\<in> A\n  Sorted_Less.sorted (rev (p # a ! p)) \\<or> p # a ! p = a ! succ_p\n  \\<lbrakk>Sorted_Less.sorted (rev ?xs);\n   set ?xs \\<subseteq> set nodes\\<rbrakk>\n  \\<Longrightarrow> ?xs\n                    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (auto simp add:A_def)"], ["proof (state)\nthis:\n  p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "then"], ["proof (chain)\npicking this:\n  p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have \"transf p ?a_p \\<in> A\""], ["proof (prove)\nusing this:\n  p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. transf p (a ! p) \\<in> A", "using transf_def"], ["proof (prove)\nusing this:\n  p # a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n  transf ?n ?input \\<equiv> ?n # ?input\n\ngoal (1 subgoal):\n 1. transf p (a ! p) \\<in> A", "by (auto simp add:A_def transf_def)"], ["proof (state)\nthis:\n  transf p (a ! p) \\<in> A\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "then"], ["proof (chain)\npicking this:\n  transf p (a ! p) \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  transf p (a ! p) \\<in> A\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "using ss_a_p_eq transf_lt_p"], ["proof (prove)\nusing this:\n  transf p (a ! p) \\<in> A\n  ss ! p = a ! p\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A \\<and>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<in> A \\<and>\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<notin> set b \\<Longrightarrow>\n  transf p (ss ! p) \\<in> A \\<and>\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (step p (ss ! p)) \\<Longrightarrow>\n       transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "show \"transf p ?ss_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ?ss_succ_p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof(cases \"p \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case True"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "note p_in_succ_hd_b = this"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with p_cond"], ["proof (chain)\npicking this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n  p \\<in> succs (hd b)", "have \" (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p =?a_p\""], ["proof (prove)\nusing this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n  p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n  p \\<in> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "from p_in_succ_hd_b propa_ss1'"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have ss_p: \"?ss_p = (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd b)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "have transf_p2: \"transf p ?ss_p = (p # (inter_sorted_rev (hd b # ?a_hdb) ?a_p))\""], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) = p # inter_sorted_rev (hd b # a ! hd b) (a ! p)", "by (auto simp add:f_def plussub_def nodes_sup_def transf_def )"], ["proof (state)\nthis:\n  transf p (ss ! p) = p # inter_sorted_rev (hd b # a ! hd b) (a ! p)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  transf p (ss ! p) = p # inter_sorted_rev (hd b # a ! hd b) (a ! p)", "show ?thesis"], ["proof (prove)\nusing this:\n  transf p (ss ! p) = p # inter_sorted_rev (hd b # a ! hd b) (a ! p)\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof(cases \"succ_p \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<in> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case True"], ["proof (state)\nthis:\n  succ_p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<in> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "note succ_p_is_succ_hdb = this"], ["proof (state)\nthis:\n  succ_p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<in> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with propa_ss1"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  succ_p \\<in> succs (hd b)", "have ss_succ_p: \"?ss_succ_p = (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_succ_p\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  succ_p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  succ_p \\<in> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p", "by (auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<in> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with a_succ_p_inA hd_b_cons_in_A"], ["proof (chain)\npicking this:\n  a ! succ_p \\<in> A\n  hd b # a ! hd b \\<in> A\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p", "have succ_p1: \"(hd b # ?a_hdb) \\<sqsubseteq>\\<^bsub>r\\<^esub>?ss_succ_p\" \n                                               and succ_p2: \"?a_succ_p\\<sqsubseteq>\\<^bsub>r\\<^esub> ?ss_succ_p \""], ["proof (prove)\nusing this:\n  a ! succ_p \\<in> A\n  hd b # a ! hd b \\<in> A\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p &&&\n    a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto simp add:Semilat.ub1[OF Semilat.intro, OF is_semi]\n                                Semilat.ub2[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<in> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof(cases \"p \\<in> set b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case True"], ["proof (state)\nthis:\n  p \\<in> set b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "note p_in_set_b = this"], ["proof (state)\nthis:\n  p \\<in> set b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  p \\<in> set b", "have p_eq_hdb: \"p = hd b\""], ["proof (prove)\nusing this:\n  p \\<in> set b\n\ngoal (1 subgoal):\n 1. p = hd b", "using p_cond"], ["proof (prove)\nusing this:\n  p \\<in> set b\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. p = hd b", "by auto"], ["proof (state)\nthis:\n  p = hd b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p"], ["proof (chain)\npicking this:\n  succ_p \\<in> succs p\n  p = hd b", "have succ_p_is_succ_hdb: \"succ_p \\<in> succs (hd b)\""], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  p = hd b\n\ngoal (1 subgoal):\n 1. succ_p \\<in> succs (hd b)", "by auto"], ["proof (state)\nthis:\n  succ_p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "from ss_a_p_eq p_eq_hdb"], ["proof (chain)\npicking this:\n  ss ! p = a ! p\n  p = hd b", "have \"(hd b # ?ss_hdb) = hd b # ?a_hdb\""], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  p = hd b\n\ngoal (1 subgoal):\n 1. hd b # ss ! hd b = hd b # a ! hd b", "by auto"], ["proof (state)\nthis:\n  hd b # ss ! hd b = hd b # a ! hd b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p1"], ["proof (chain)\npicking this:\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n  hd b # ss ! hd b = hd b # a ! hd b", "have \"hd b # ss ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\""], ["proof (prove)\nusing this:\n  hd b # a ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n  hd b # ss ! hd b = hd b # a ! hd b\n\ngoal (1 subgoal):\n 1. hd b # ss ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by auto"], ["proof (state)\nthis:\n  hd b # ss ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with p_eq_hdb"], ["proof (chain)\npicking this:\n  p = hd b\n  hd b # ss ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "show ?thesis"], ["proof (prove)\nusing this:\n  p = hd b\n  hd b # ss ! hd b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case False"], ["proof (state)\nthis:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set b", "have \"transf p ?ss_p \\<in> A\" and \"transf p ?ss_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A &&&\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "using p_nin_b_ssp"], ["proof (prove)\nusing this:\n  p \\<notin> set b\n  p \\<notin> set b \\<Longrightarrow>\n  transf p (ss ! p) \\<in> A \\<and>\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A &&&\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<in> A\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p2 a_succ_p_inA ss_succ_p_inA"], ["proof (chain)\npicking this:\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n  a ! succ_p \\<in> A\n  ss ! succ_p \\<in> A\n  transf p (ss ! p) \\<in> A\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "show ?thesis"], ["proof (prove)\nusing this:\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n  a ! succ_p \\<in> A\n  ss ! succ_p \\<in> A\n  transf p (ss ! p) \\<in> A\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto intro: order_trans Semilat.orderI[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case False"], ["proof (state)\nthis:\n  succ_p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "note succ_p_n_succ_hdb = this"], ["proof (state)\nthis:\n  succ_p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with exec2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  succ_p \\<notin> succs (hd b)", "have ss_succ_p_eq_a: \"?ss_succ_p = ?a_succ_p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  succ_p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! succ_p = a ! succ_p", "using fin_succ_hd_b succ_p_lt_n  len_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  succ_p \\<notin> succs (hd b)\n  finite (succs (hd b))\n  succ_p < n\n  length a = n\n\ngoal (1 subgoal):\n 1. ss ! succ_p = a ! succ_p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! succ_p = a ! succ_p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>transf p (ss ! p) =\n             p # inter_sorted_rev (hd b # a ! hd b) (a ! p);\n     succ_p \\<notin> succs (hd b)\\<rbrakk>\n    \\<Longrightarrow> transf p (ss ! p) \n                      \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof(cases \"p \\<in> set b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case True"], ["proof (state)\nthis:\n  p \\<in> set b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with p_cond"], ["proof (chain)\npicking this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n  p \\<in> set b", "have p_eq_hdb: \"p = hd b\""], ["proof (prove)\nusing this:\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n  p \\<in> set b\n\ngoal (1 subgoal):\n 1. p = hd b", "by auto"], ["proof (state)\nthis:\n  p = hd b\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p"], ["proof (chain)\npicking this:\n  succ_p \\<in> succs p\n  p = hd b", "have succ_p_is_succ_hdb: \"succ_p \\<in> succs (hd b)\""], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  p = hd b\n\ngoal (1 subgoal):\n 1. succ_p \\<in> succs (hd b)", "by auto"], ["proof (state)\nthis:\n  succ_p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p_n_succ_hdb"], ["proof (chain)\npicking this:\n  succ_p \\<notin> succs (hd b)\n  succ_p \\<in> succs (hd b)", "show ?thesis"], ["proof (prove)\nusing this:\n  succ_p \\<notin> succs (hd b)\n  succ_p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case False"], ["proof (state)\nthis:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with sta_a_p"], ["proof (chain)\npicking this:\n  p \\<notin> set b \\<longrightarrow> stable r step a p\n  p \\<notin> set b", "have \"\\<forall>(q,\\<tau>) \\<in> set (step p ?a_p). \\<tau> \\<sqsubseteq>\\<^sub>r a!q\""], ["proof (prove)\nusing this:\n  p \\<notin> set b \\<longrightarrow> stable r step a p\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q", "by (simp add:stable_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p fin_succ_p"], ["proof (chain)\npicking this:\n  succ_p \\<in> succs p\n  finite (succs p)\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q", "have \"transf p ?a_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  finite (succs p)\n  \\<forall>(q, \\<tau>)\\<in>set (step p (a ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with ss_succ_p_eq_a ss_a_p_eq"], ["proof (chain)\npicking this:\n  ss ! succ_p = a ! succ_p\n  ss ! p = a ! p\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! succ_p = a ! succ_p\n  ss ! p = a ! p\n  transf p (a ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case False"], ["proof (state)\nthis:\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "note p_nin_succ_hd_b = this"], ["proof (state)\nthis:\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "from p_nin_succ_hd_b p_cond"], ["proof (chain)\npicking this:\n  p \\<notin> succs (hd b)\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)", "have \"p \\<notin> set b \\<or> p = hd b\""], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd b)\n  (p \\<notin> set b \\<or> p = hd b) \\<and>\n  (\\<forall>s.\n      (p, s) \\<in> set (step (hd b) (a ! hd b)) \\<longrightarrow>\n      hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p)\n\ngoal (1 subgoal):\n 1. p \\<notin> set b \\<or> p = hd b", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set b \\<or> p = hd b\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set b \\<or> p = hd b", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> set b \\<or> p = hd b\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "assume \"p \\<notin> set b\""], ["proof (state)\nthis:\n  p \\<notin> set b\n\ngoal (2 subgoals):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set b", "have transf_ss_p_inA: \"transf p ?ss_p \\<in> A\" and transf_lt_p: \"transf p ?ss_p \\<sqsubseteq>\\<^sub>r ?a_succ_p\""], ["proof (prove)\nusing this:\n  p \\<notin> set b\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A &&&\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "using p_nin_b_ssp"], ["proof (prove)\nusing this:\n  p \\<notin> set b\n  p \\<notin> set b \\<Longrightarrow>\n  transf p (ss ! p) \\<in> A \\<and>\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<in> A &&&\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<in> A\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n\ngoal (2 subgoals):\n 1. p \\<notin> set b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "show \"transf p ?ss_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ?ss_succ_p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "proof(cases \"succ_p \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. succ_p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case True"], ["proof (state)\nthis:\n  succ_p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. succ_p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p_lt_n propa_ss1' len_eq  fin_succ_hd_b"], ["proof (chain)\npicking this:\n  succ_p < n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  length a = n\n  finite (succs (hd b))\n  succ_p \\<in> succs (hd b)", "have \"?ss_succ_p = (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_succ_p\""], ["proof (prove)\nusing this:\n  succ_p < n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  length a = n\n  finite (succs (hd b))\n  succ_p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p\n\ngoal (2 subgoals):\n 1. succ_p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with a_succ_p_inA hd_b_cons_in_A"], ["proof (chain)\npicking this:\n  a ! succ_p \\<in> A\n  hd b # a ! hd b \\<in> A\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p", "have \"?a_succ_p \\<sqsubseteq>\\<^sub>r ?ss_succ_p\""], ["proof (prove)\nusing this:\n  a ! succ_p \\<in> A\n  hd b # a ! hd b \\<in> A\n  ss ! succ_p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! succ_p\n\ngoal (1 subgoal):\n 1. a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto simp add:Semilat.ub2[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (2 subgoals):\n 1. succ_p \\<in> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n 2. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with transf_lt_p transf_ss_p_inA a_succ_p_inA ss_succ_p_inA"], ["proof (chain)\npicking this:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n  transf p (ss ! p) \\<in> A\n  a ! succ_p \\<in> A\n  ss ! succ_p \\<in> A\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "show ?thesis"], ["proof (prove)\nusing this:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n  transf p (ss ! p) \\<in> A\n  a ! succ_p \\<in> A\n  ss ! succ_p \\<in> A\n  a ! succ_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto intro: order_trans  Semilat.orderI[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "case False"], ["proof (state)\nthis:\n  succ_p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p_lt_n exec2 len_eq  fin_succ_hd_b"], ["proof (chain)\npicking this:\n  succ_p < n\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  length a = n\n  finite (succs (hd b))\n  succ_p \\<notin> succs (hd b)", "have \"?ss_succ_p = ?a_succ_p\""], ["proof (prove)\nusing this:\n  succ_p < n\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  length a = n\n  finite (succs (hd b))\n  succ_p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! succ_p = a ! succ_p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! succ_p = a ! succ_p\n\ngoal (1 subgoal):\n 1. succ_p \\<notin> succs (hd b) \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with transf_lt_p"], ["proof (chain)\npicking this:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n  ss ! succ_p = a ! succ_p", "show ?thesis"], ["proof (prove)\nusing this:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> a ! succ_p\n  ss ! succ_p = a ! succ_p\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by auto"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "assume \"p = hd b\""], ["proof (state)\nthis:\n  p = hd b\n\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with hd_b_ss_sta"], ["proof (chain)\npicking this:\n  stable r step ss (hd b)\n  p = hd b", "have \"(\\<forall>(q,\\<tau>) \\<in> set (step p ?ss_p). \\<tau> \\<sqsubseteq>\\<^sub>r ss!q)\""], ["proof (prove)\nusing this:\n  stable r step ss (hd b)\n  p = hd b\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by (simp add:stable_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. p = hd b \\<Longrightarrow>\n    transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "with succ_p `p = hd b`"], ["proof (chain)\npicking this:\n  succ_p \\<in> succs p\n  p = hd b\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "show \"transf p ?ss_p \\<sqsubseteq>\\<^bsub>r\\<^esub> ?ss_succ_p\""], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  p = hd b\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  succ_p \\<in> succs p\n  p = hd b\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p", "by (auto simp add:stable_def step_def exec_def transf_def)"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! succ_p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>p \\<notin> set w; w \\<noteq> [];\n        (a, b) \\<in> set (step p (ss ! p))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! a", "with step_ss_p"], ["proof (chain)\npicking this:\n  (q, \\<tau>) \\<in> set (step p (ss ! p))\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "show \"\\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\""], ["proof (prove)\nusing this:\n  (q, \\<tau>) \\<in> set (step p (ss ! p))\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     transf p (ss ! p) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < n \\<Longrightarrow>\n       Sorted_Less.sorted (rev (ss ! p)) \\<and>\n       (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n        (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n       (ss ! p = rev [0..<n] \\<longrightarrow>\n        (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n       (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show \"sorted (rev ?ss_p) \\<and> \n          (?ss_p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set?ss_p. x < p)) \\<and>\n          (?ss_p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n          (p \\<notin> set w \\<longrightarrow> stable r step ss p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"w \\<noteq> []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (2 subgoals):\n 1. w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "note w_n_nil = this"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (2 subgoals):\n 1. w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof (cases \"p \\<in> set( map fst (?qs_a))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  p \\<in> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with propa_ss1"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  p \\<in> set (map fst (step (hd b) (a ! hd b)))", "have ss_p: \"?ss_p = (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> ?a_p\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  p \\<in> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "by (simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with sorted_hd_b_cons sorted_a_p"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! p))\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p", "have ss_p_lt_hdb: \"set ?ss_p \\<subseteq> set (hd b # ?a_hdb)\" \n         and ss_p_lt: \"set ?ss_p \\<subseteq> set ?a_p\" \n         and ss_p_inter: \"set ?ss_p = set (hd b # ?a_hdb) \\<inter> set ?a_p\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! p))\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (1 subgoal):\n 1. set (ss ! p) \\<subseteq> set (hd b # a ! hd b) &&&\n    set (ss ! p) \\<subseteq> set (a ! p) &&&\n    set (ss ! p) = set (hd b # a ! hd b) \\<inter> set (a ! p)", "by (auto simp add:f_def plussub_def nodes_sup_def inter_sorted_correct)"], ["proof (state)\nthis:\n  set (ss ! p) \\<subseteq> set (hd b # a ! hd b)\n  set (ss ! p) \\<subseteq> set (a ! p)\n  set (ss ! p) = set (hd b # a ! hd b) \\<inter> set (a ! p)\n\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from sorted_hd_b_cons sorted_a_p"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! p))", "have \"inter_sorted_rev (hd b # ?a_hdb) ?a_p = rev (sorted_list_of_set (set (hd b # ?a_hdb) \\<inter> set ?a_p))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! p))\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (hd b # a ! hd b) (a ! p) =\n    rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))", "by (rule inter_sorted_correct_col)"], ["proof (state)\nthis:\n  inter_sorted_rev (hd b # a ! hd b) (a ! p) =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  inter_sorted_rev (hd b # a ! hd b) (a ! p) =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))", "have ss_p2: \"?ss_p = (rev (sorted_list_of_set (set (hd b # ?a_hdb) \\<inter> set ?a_p)))\""], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  inter_sorted_rev (hd b # a ! hd b) (a ! p) =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n\ngoal (1 subgoal):\n 1. ss ! p =\n    rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))", "by (auto simp add:f_def plussub_def nodes_sup_def)"], ["proof (state)\nthis:\n  ss ! p =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n\ngoal (2 subgoals):\n 1. p \\<in> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"?a_p \\<noteq> (rev [0..<n])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "note a_p_neq_all = this"], ["proof (state)\nthis:\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  a ! p \\<noteq> rev [0..<n]", "have seta_p_neq_all: \"set ?a_p \\<noteq> {0..<n}\""], ["proof (prove)\nusing this:\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<noteq> {0..<n}", "using sorted_a_p"], ["proof (prove)\nusing this:\n  a ! p \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (a ! p))\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<noteq> {0..<n}", "by (auto intro: sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  set (a ! p) \\<noteq> {0..<n}\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from a_p_neq_all wf_a_b p_lt_n"], ["proof (chain)\npicking this:\n  a ! p \\<noteq> rev [0..<n]\n  wf_dom a b\n  p < n", "have a_lt_p: \"(\\<forall>x\\<in>set ?a_p. x < p)\""], ["proof (prove)\nusing this:\n  a ! p \\<noteq> rev [0..<n]\n  wf_dom a b\n  p < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! p). x < p", "using n_def len_eq"], ["proof (prove)\nusing this:\n  a ! p \\<noteq> rev [0..<n]\n  wf_dom a b\n  p < n\n  n \\<equiv> length nodes\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! p). x < p", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a ! p). x < p\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p_lt"], ["proof (chain)\npicking this:\n  set (ss ! p) \\<subseteq> set (a ! p)\n  \\<forall>x\\<in>set (a ! p). x < p", "have \"\\<forall>x\\<in>set ?ss_p. x < p\""], ["proof (prove)\nusing this:\n  set (ss ! p) \\<subseteq> set (a ! p)\n  \\<forall>x\\<in>set (a ! p). x < p\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! p). x < p", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (ss ! p). x < p", "have  ss_lt_p: \"?ss_p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set ?ss_p. x < p)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n    (\\<forall>x\\<in>set (ss ! p). x < p)", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"set ?ss_p \\<noteq> {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ss ! p) \\<noteq> {0..<n}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "assume \"\\<not> set ?ss_p \\<noteq> {0..<n}\""], ["proof (state)\nthis:\n  \\<not> set (ss ! p) \\<noteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "with ss_p_lt"], ["proof (chain)\npicking this:\n  set (ss ! p) \\<subseteq> set (a ! p)\n  \\<not> set (ss ! p) \\<noteq> {0..<n}", "have cc:  \"{0..<n} \\<subseteq> set ?a_p\""], ["proof (prove)\nusing this:\n  set (ss ! p) \\<subseteq> set (a ! p)\n  \\<not> set (ss ! p) \\<noteq> {0..<n}\n\ngoal (1 subgoal):\n 1. {0..<n} \\<subseteq> set (a ! p)", "by auto"], ["proof (state)\nthis:\n  {0..<n} \\<subseteq> set (a ! p)\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "from a_in_A p_lt_len_a"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  p < length a", "have \" ?a_p \\<in> ((rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  p < length a\n\ngoal (1 subgoal):\n 1. a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (auto simp add: A_def)"], ["proof (state)\nthis:\n  a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have ass_set_in_nodes: \"set ?a_p \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  a ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<subseteq> set nodes", "by (rule inpow_subset_nodes)"], ["proof (state)\nthis:\n  set (a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  set (a ! p) \\<subseteq> set nodes", "have \"set ?a_p \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  set (a ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (a ! p) \\<subseteq> {0..<n}", "by (auto simp add:nodes_def n_def verts_set)"], ["proof (state)\nthis:\n  set (a ! p) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "with cc"], ["proof (chain)\npicking this:\n  {0..<n} \\<subseteq> set (a ! p)\n  set (a ! p) \\<subseteq> {0..<n}", "have \"set ?a_p = {0..<n}\""], ["proof (prove)\nusing this:\n  {0..<n} \\<subseteq> set (a ! p)\n  set (a ! p) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (a ! p) = {0..<n}", "by auto"], ["proof (state)\nthis:\n  set (a ! p) = {0..<n}\n\ngoal (1 subgoal):\n 1. \\<not> set (ss ! p) \\<noteq> {0..<n} \\<Longrightarrow> False", "with seta_p_neq_all"], ["proof (chain)\npicking this:\n  set (a ! p) \\<noteq> {0..<n}\n  set (a ! p) = {0..<n}", "show False"], ["proof (prove)\nusing this:\n  set (a ! p) \\<noteq> {0..<n}\n  set (a ! p) = {0..<n}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (ss ! p) \\<noteq> {0..<n}\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  set (ss ! p) \\<noteq> {0..<n}", "have ss_p_not_all: \"?ss_p \\<noteq> rev [0..<n]\""], ["proof (prove)\nusing this:\n  set (ss ! p) \\<noteq> {0..<n}\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "using  sorted_ss_p"], ["proof (prove)\nusing this:\n  set (ss ! p) \\<noteq> {0..<n}\n  Sorted_Less.sorted (rev (ss ! p))\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "by (auto intro: sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  ss ! p \\<noteq> rev [0..<n]", "have \"?ss_p = rev [0..<n] \\<longrightarrow>  (\\<exists>x\\<in>set w. (x,p)\\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. ss ! p = rev [0..<n] \\<longrightarrow>\n    (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)", "by auto"], ["proof (state)\nthis:\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with sorted_ss_p ss_lt_p stable_ss_p w_n_nil"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! p))\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! p))\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by fastforce"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<not> a ! p \\<noteq> rev [0..<n]", "have a_p_all: \"?a_p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with wf_a_b p_lt_n"], ["proof (chain)\npicking this:\n  wf_dom a b\n  p < n\n  a ! p = rev [0..<n]", "have ex_lt_p: \" (\\<exists>x\\<in> set b. (x,p)\\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  p < n\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"hd b \\<in> set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd b \\<in> set b", "using b_n_nil"], ["proof (prove)\nusing this:\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd b \\<in> set b", "by auto"], ["proof (state)\nthis:\n  hd b \\<in> set b\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from a_p_all"], ["proof (chain)\npicking this:\n  a ! p = rev [0..<n]", "have \"set ?a_p = {0..<n}\""], ["proof (prove)\nusing this:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. set (a ! p) = {0..<n}", "by auto"], ["proof (state)\nthis:\n  set (a ! p) = {0..<n}\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p_inter"], ["proof (chain)\npicking this:\n  set (ss ! p) = set (hd b # a ! hd b) \\<inter> set (a ! p)\n  set (a ! p) = {0..<n}", "have \"set ?ss_p \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  set (ss ! p) = set (hd b # a ! hd b) \\<inter> set (a ! p)\n  set (a ! p) = {0..<n}\n\ngoal (1 subgoal):\n 1. set (ss ! p) \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  set (ss ! p) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p2 hdb_subset_n `set ?a_p  = {0..<n}`"], ["proof (chain)\npicking this:\n  ss ! p =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n  set (a ! p) = {0..<n}\n  set (ss ! p) \\<subseteq> {0..<n}", "have \"(set (hd b # ?a_hdb) \\<inter> set ?a_p) = set (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  ss ! p =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n  set (a ! p) = {0..<n}\n  set (ss ! p) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (hd b # a ! hd b) \\<inter> set (a ! p) = set (hd b # a ! hd b)", "by auto"], ["proof (state)\nthis:\n  set (hd b # a ! hd b) \\<inter> set (a ! p) = set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p2"], ["proof (chain)\npicking this:\n  ss ! p =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n  set (hd b # a ! hd b) \\<inter> set (a ! p) = set (hd b # a ! hd b)", "have ss_p3: \"?ss_p =  (rev (sorted_list_of_set (set (hd b # ?a_hdb))))\""], ["proof (prove)\nusing this:\n  ss ! p =\n  rev (sorted_list_of_set (set (hd b # a ! hd b) \\<inter> set (a ! p)))\n  set (hd b # a ! hd b) \\<inter> set (a ! p) = set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. ss ! p = rev (sorted_list_of_set (set (hd b # a ! hd b)))", "by auto"], ["proof (state)\nthis:\n  ss ! p = rev (sorted_list_of_set (set (hd b # a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))", "have \"sorted_list_of_set (set (hd b # ?a_hdb)) = rev (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (set (hd b # a ! hd b)) = rev (hd b # a ! hd b)", "by (fastforce dest: sorted_less_rev_set_eq)"], ["proof (state)\nthis:\n  sorted_list_of_set (set (hd b # a ! hd b)) = rev (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p3"], ["proof (chain)\npicking this:\n  ss ! p = rev (sorted_list_of_set (set (hd b # a ! hd b)))\n  sorted_list_of_set (set (hd b # a ! hd b)) = rev (hd b # a ! hd b)", "have ss_p_4: \"?ss_p = (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  ss ! p = rev (sorted_list_of_set (set (hd b # a ! hd b)))\n  sorted_list_of_set (set (hd b # a ! hd b)) = rev (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. ss ! p = hd b # a ! hd b", "by auto"], ["proof (state)\nthis:\n  ss ! p = hd b # a ! hd b\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"(?ss_p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set ?ss_p. x < p)) \\<and>\n                (?ss_p = rev [0..<n] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n                (p \\<notin> set w \\<longrightarrow> stable r step ss p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"?ss_p \\<noteq>  (rev [0..<n])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "note ss_p_n_all = this"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p_4"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b\n  ss ! p \\<noteq> rev [0..<n]", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"hd b < p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)\n 2. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "case True"], ["proof (state)\nthis:\n  hd b < p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)\n 2. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "with ss_p_4 sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  hd b < p", "have ss_p_lt_p: \"\\<forall>x\\<in>set ( (ss ! p)). x < p\""], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  hd b < p\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! p). x < p", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)\n 2. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "with ss_p_4 ss_p_n_all stable_ss_p `w \\<noteq> []`"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b\n  ss ! p \\<noteq> rev [0..<n]\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n  \\<forall>x\\<in>set (ss ! p). x < p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b\n  ss ! p \\<noteq> rev [0..<n]\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> hd b < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "note hd_b_ge_p = this"], ["proof (state)\nthis:\n  \\<not> hd b < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "from ex_lt_p"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "obtain x where \"x\\<in> set b \" and \" (x,p)\\<in> g_E G \" and \"x < p\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set b; (x, p) \\<in> g_E G; x < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set b\n  (x, p) \\<in> g_E G\n  x < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "from `x \\<in> set b` `x < p` hd_b_ge_p"], ["proof (chain)\npicking this:\n  x \\<in> set b\n  x < p\n  \\<not> hd b < p", "have \"tl b \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> set b\n  x < p\n  \\<not> hd b < p\n\ngoal (1 subgoal):\n 1. tl b \\<noteq> []", "by (induct b) auto"], ["proof (state)\nthis:\n  tl b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "with  hd_b_ge_p sorted_b"], ["proof (chain)\npicking this:\n  \\<not> hd b < p\n  Sorted_Less.sorted b\n  tl b \\<noteq> []", "have temp_t: \"\\<forall>x\\<in> set (tl b). x \\<ge> p\""], ["proof (prove)\nusing this:\n  \\<not> hd b < p\n  Sorted_Less.sorted b\n  tl b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (tl b). p \\<le> x", "by (induct b) auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (tl b). p \\<le> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "with `\\<not>hd b < p`"], ["proof (chain)\npicking this:\n  \\<not> hd b < p\n  \\<forall>x\\<in>set (tl b). p \\<le> x", "have \"x \\<in> set (tl b)\""], ["proof (prove)\nusing this:\n  \\<not> hd b < p\n  \\<forall>x\\<in>set (tl b). p \\<le> x\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl b)", "using `(x,p)\\<in> g_E G ` `x \\<in> set b` `x < p`"], ["proof (prove)\nusing this:\n  \\<not> hd b < p\n  \\<forall>x\\<in>set (tl b). p \\<le> x\n  (x, p) \\<in> g_E G\n  x \\<in> set b\n  x < p\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl b)", "by (induct b) auto"], ["proof (state)\nthis:\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "with `x < p` temp_t"], ["proof (chain)\npicking this:\n  x < p\n  \\<forall>x\\<in>set (tl b). p \\<le> x\n  x \\<in> set (tl b)", "have False"], ["proof (prove)\nusing this:\n  x < p\n  \\<forall>x\\<in>set (tl b). p \\<le> x\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ss ! p = hd b # a ! hd b; ss ! p \\<noteq> rev [0..<n];\n     \\<not> hd b < p\\<rbrakk>\n    \\<Longrightarrow> (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                      (ss ! p = rev [0..<n] \\<longrightarrow>\n                       (\\<exists>x\\<in>set w.\n                           (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                      (p \\<notin> set w \\<longrightarrow>\n                       stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]", "have \"?ss_p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. ss ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_p_4"], ["proof (chain)\npicking this:\n  ss ! p = hd b # a ! hd b\n  ss ! p = rev [0..<n]", "have hd_b_as1: \"(hd b # ?a_hdb) = rev [0..<n]\""], ["proof (prove)\nusing this:\n  ss ! p = hd b # a ! hd b\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  hd b # a ! hd b = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  hd b # a ! hd b = rev [0..<n]", "have \"hd (hd b # ?a_hdb) = hd (rev [0..<n])\""], ["proof (prove)\nusing this:\n  hd b # a ! hd b = rev [0..<n]\n\ngoal (1 subgoal):\n 1. hd (hd b # a ! hd b) = hd (rev [0..<n])", "by auto"], ["proof (state)\nthis:\n  hd (hd b # a ! hd b) = hd (rev [0..<n])\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  hd (hd b # a ! hd b) = hd (rev [0..<n])", "have hd_b: \"hd b = hd (rev [0..<n])\""], ["proof (prove)\nusing this:\n  hd (hd b # a ! hd b) = hd (rev [0..<n])\n\ngoal (1 subgoal):\n 1. hd b = hd (rev [0..<n])", "by auto"], ["proof (state)\nthis:\n  hd b = hd (rev [0..<n])\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"n > 0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using n_def nodes_def len_verts_gt0"], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. 0 < n", "by auto"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  0 < n", "have last_hd: \"last [0..<n] = hd (rev [0..<n])\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. last [0..<n] = hd (rev [0..<n])", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < 0 \\<Longrightarrow> last [0..<0] = hd (rev [0..<0])\n 2. \\<And>n.\n       \\<lbrakk>0 < n \\<Longrightarrow> last [0..<n] = hd (rev [0..<n]);\n        0 < Suc n\\<rbrakk>\n       \\<Longrightarrow> last [0..<Suc n] = hd (rev [0..<Suc n])", "by auto"], ["proof (state)\nthis:\n  last [0..<n] = hd (rev [0..<n])\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"last[0..<n] = n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last [0..<n] = n - 1", "using `n> 0`"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. last [0..<n] = n - 1", "by auto"], ["proof (state)\nthis:\n  last [0..<n] = n - 1\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  last [0..<n] = n - 1", "have \"hd (rev [0..<n]) = n - 1\""], ["proof (prove)\nusing this:\n  last [0..<n] = n - 1\n\ngoal (1 subgoal):\n 1. hd (rev [0..<n]) = n - 1", "using last_hd"], ["proof (prove)\nusing this:\n  last [0..<n] = n - 1\n  last [0..<n] = hd (rev [0..<n])\n\ngoal (1 subgoal):\n 1. hd (rev [0..<n]) = n - 1", "by auto"], ["proof (state)\nthis:\n  hd (rev [0..<n]) = n - 1\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with hd_b"], ["proof (chain)\npicking this:\n  hd b = hd (rev [0..<n])\n  hd (rev [0..<n]) = n - 1", "have hd_b_n_minus1: \"hd b = n - 1\""], ["proof (prove)\nusing this:\n  hd b = hd (rev [0..<n])\n  hd (rev [0..<n]) = n - 1\n\ngoal (1 subgoal):\n 1. hd b = n - 1", "by auto"], ["proof (state)\nthis:\n  hd b = n - 1\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"hd b < p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  hd b < p\n\ngoal (2 subgoals):\n 1. hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with hd_b_n_minus1 p_lt_n"], ["proof (chain)\npicking this:\n  hd b = n - 1\n  p < n\n  hd b < p", "show ?thesis"], ["proof (prove)\nusing this:\n  hd b = n - 1\n  p < n\n  hd b < p\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by arith"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> hd b < p\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from ex_lt_p"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "obtain x where x: \"x\\<in>set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set b \\<and>\n        (x, p) \\<in> g_E G \\<and> x < p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p", "have \"x\\<in>set b \" and \" (x, p) \\<in> g_E G \" and \" x < p\""], ["proof (prove)\nusing this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. x \\<in> set b &&& (x, p) \\<in> g_E G &&& x < p", "by auto"], ["proof (state)\nthis:\n  x \\<in> set b\n  (x, p) \\<in> g_E G\n  x < p\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from x `\\<not>hd b <p`"], ["proof (chain)\npicking this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n  \\<not> hd b < p", "have x_n_hd_b: \"x \\<noteq> hd b\""], ["proof (prove)\nusing this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n  \\<not> hd b < p\n\ngoal (1 subgoal):\n 1. x \\<noteq> hd b", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with  `x\\<in>set b `"], ["proof (chain)\npicking this:\n  x \\<in> set b\n  x \\<noteq> hd b", "have \"tl b \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> set b\n  x \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. tl b \\<noteq> []", "by (induct b) auto"], ["proof (state)\nthis:\n  tl b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with `x\\<in>set b ` x_n_hd_b"], ["proof (chain)\npicking this:\n  x \\<in> set b\n  x \\<noteq> hd b\n  tl b \\<noteq> []", "have \"x \\<in> set (tl b)\""], ["proof (prove)\nusing this:\n  x \\<in> set b\n  x \\<noteq> hd b\n  tl b \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl b)", "by (induct b) auto"], ["proof (state)\nthis:\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ww"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)", "have \"x \\<in> set w\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. x \\<in> set w", "using fin"], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. x \\<in> set w", "by auto"], ["proof (state)\nthis:\n  x \\<in> set w\n\ngoal (1 subgoal):\n 1. \\<not> hd b < p \\<Longrightarrow>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set w", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set w\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "using `ss!p =  (rev [0..<n])` `(x, p) \\<in> g_E G` `x<p` stable_ss_p `w \\<noteq> []`"], ["proof (prove)\nusing this:\n  x \\<in> set w\n  ss ! p = rev [0..<n]\n  (x, p) \\<in> g_E G\n  x < p\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show ?thesis"], ["proof (prove)\nusing this:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "using sorted_ss_p"], ["proof (prove)\nusing this:\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted (rev (ss ! p))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "note p_not_in_succ = this"], ["proof (state)\nthis:\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with exec2 p_lt_n len_eq"], ["proof (chain)\npicking this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  p < n\n  length a = n\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))", "have ss_a_p_eq: \"ss!p = a!p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  p < n\n  length a = n\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ass p_lt_n  wf_a_b"], ["proof (chain)\npicking this:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  p < n\n  wf_dom a b\n  ss ! p = a ! p", "have cond1: \"(?ss_p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set ?ss_p. x < p))\""], ["proof (prove)\nusing this:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  p < n\n  wf_dom a b\n  ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n    (\\<forall>x\\<in>set (ss ! p). x < p)", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd b) (a ! hd b))) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "proof(cases \"?a_p \\<noteq>  (rev [0..<n])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case True"], ["proof (state)\nthis:\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b\n  a ! p \\<noteq> rev [0..<n]", "have \"(\\<forall>x\\<in>set ?a_p. x < p)\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! p). x < p", "using p_lt_n  len_eq"], ["proof (prove)\nusing this:\n  wf_dom a b\n  a ! p \\<noteq> rev [0..<n]\n  p < n\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (a ! p). x < p", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (a ! p). x < p\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_a_p_eq"], ["proof (chain)\npicking this:\n  ss ! p = a ! p\n  \\<forall>x\\<in>set (a ! p). x < p", "have \"(\\<forall>x\\<in>set ?ss_p. x < p)\""], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  \\<forall>x\\<in>set (a ! p). x < p\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! p). x < p", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (2 subgoals):\n 1. a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n 2. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with cond1 sorted_ss_p"], ["proof (chain)\npicking this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<forall>x\\<in>set (ss ! p). x < p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<forall>x\\<in>set (ss ! p). x < p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "using p_lt_n  len_eq stable_ss_p w_n_nil"], ["proof (prove)\nusing this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<forall>x\\<in>set (ss ! p). x < p\n  p < n\n  length a = n\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<not> a ! p \\<noteq> rev [0..<n]", "have \"?a_p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from ss_a_p_eq ass p_lt_n  wf_a_b"], ["proof (chain)\npicking this:\n  ss ! p = a ! p\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  p < n\n  wf_dom a b", "have \"?ss_p = rev [0..<n] \\<longrightarrow>  (\\<exists>x\\<in> set b. (x,p)\\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  p < n\n  wf_dom a b\n\ngoal (1 subgoal):\n 1. ss ! p = rev [0..<n] \\<longrightarrow>\n    (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ss_a_p_eq `a!p =  (rev [0..<n])`"], ["proof (chain)\npicking this:\n  ss ! p = a ! p\n  a ! p = rev [0..<n]\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)", "have hd_b_lt_p: \" (\\<exists>x\\<in> set b. (x,p)\\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  a ! p = rev [0..<n]\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "using len_eq"], ["proof (prove)\nusing this:\n  ss ! p = a ! p\n  a ! p = rev [0..<n]\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "obtain x where \"x\\<in> set b \" and \" (x,p) \\<in>  g_E G\" and \" x < p\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set b; (x, p) \\<in> g_E G; x < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set b\n  (x, p) \\<in> g_E G\n  x < p\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from fin_succ_hd_b `(x,p) \\<in>  g_E G` p_not_in_succ"], ["proof (chain)\npicking this:\n  finite (succs (hd b))\n  (x, p) \\<in> g_E G\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))", "have \"x \\<noteq> hd b \""], ["proof (prove)\nusing this:\n  finite (succs (hd b))\n  (x, p) \\<in> g_E G\n  p \\<notin> set (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. x \\<noteq> hd b", "by (auto simp add:step_def exec_def succs_def)"], ["proof (state)\nthis:\n  x \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with `x\\<in> set b`"], ["proof (chain)\npicking this:\n  x \\<in> set b\n  x \\<noteq> hd b", "have \"x \\<in> set (tl b)\""], ["proof (prove)\nusing this:\n  x \\<in> set b\n  x \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl b)", "using b_n_nil"], ["proof (prove)\nusing this:\n  x \\<in> set b\n  x \\<noteq> hd b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> set (tl b)", "by (induct b)  auto"], ["proof (state)\nthis:\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with ww"], ["proof (chain)\npicking this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)", "have \"x \\<in> set w\""], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)\n\ngoal (1 subgoal):\n 1. x \\<in> set w", "using fin"], ["proof (prove)\nusing this:\n  w =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n  x \\<in> set (tl b)\n  finite\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n    set (tl b))\n\ngoal (1 subgoal):\n 1. x \\<in> set w", "by auto"], ["proof (state)\nthis:\n  x \\<in> set w\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with `(x,p) \\<in>  g_E G` and ` x < p`"], ["proof (chain)\npicking this:\n  (x, p) \\<in> g_E G\n  x < p\n  x \\<in> set w", "have \"(\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  (x, p) \\<in> g_E G\n  x < p\n  x \\<in> set w\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with cond1 sorted_ss_p"], ["proof (chain)\npicking this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "using stable_ss_p w_n_nil"], ["proof (prove)\nusing this:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  Sorted_Less.sorted (rev (ss ! p))\n  \\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p\n  p \\<notin> set w \\<longrightarrow>\n  w \\<noteq> [] \\<longrightarrow> stable r step ss p\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "case False"], ["proof (state)\nthis:\n  \\<not> w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<not> w \\<noteq> []", "have w_n_nil: \"w =[]\""], ["proof (prove)\nusing this:\n  \\<not> w \\<noteq> []\n\ngoal (1 subgoal):\n 1. w = []", "by auto"], ["proof (state)\nthis:\n  w = []\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with set_ww"], ["proof (chain)\npicking this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  w = []", "have \"tl b = []\" and succ_hd_b_eq: \"\\<forall>(q, t) \\<in> set ?qs_a.  t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\""], ["proof (prove)\nusing this:\n  set w =\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n  set (tl b)\n  w = []\n\ngoal (1 subgoal):\n 1. tl b = [] &&&\n    \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n       t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q", "by auto"], ["proof (state)\nthis:\n  tl b = []\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from  succ_hd_b_eq propa"], ["proof (chain)\npicking this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)", "have \"\\<forall>p<n. ss!p = a!p\""], ["proof (prove)\nusing this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n\ngoal (1 subgoal):\n 1. \\<forall>p<n. ss ! p = a ! p", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n                   t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q;\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p = a ! p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n                   t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q;\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p = a ! p", "assume ass_eq: \" \\<forall>(q, t)\\<in>set ?qs_a. t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q \"\n           and \" propa f ?qs_a a (tl b) = (ss, w) \" and p_lt_n: \" p < n \""], ["proof (state)\nthis:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  p < n\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n                   t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q;\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p = a ! p", "show \"ss ! p = a ! p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "proof(cases \"p \\<in> succs (hd b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "case True"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with fin_succ_hd_b propa_ss1"], ["proof (chain)\npicking this:\n  finite (succs (hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  p \\<in> succs (hd b)", "have ss_p_eq: \"ss!p = transf (hd b) (a!hd b)   \\<squnion>\\<^bsub>f\\<^esub> a ! p\""], ["proof (prove)\nusing this:\n  finite (succs (hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with ass_eq `p \\<in> succs (hd b)` fin_succ_hd_b"], ["proof (chain)\npicking this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  p \\<in> succs (hd b)\n  finite (succs (hd b))\n  ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p", "have \"transf (hd b) (a!hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\""], ["proof (prove)\nusing this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  p \\<in> succs (hd b)\n  finite (succs (hd b))\n  ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p\n\ngoal (1 subgoal):\n 1. transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd b) \\<Longrightarrow> ss ! p = a ! p\n 2. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with ss_p_eq"], ["proof (chain)\npicking this:\n  ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p = transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "case False"], ["proof (state)\nthis:\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd b) \\<Longrightarrow> ss ! p = a ! p", "with fin_succ_hd_b exec2 p_lt_n n_def len_eq nodes_def"], ["proof (chain)\npicking this:\n  finite (succs (hd b))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  p < n\n  n \\<equiv> length nodes\n  length a = n\n  nodes \\<equiv> g_V G\n  p \\<notin> succs (hd b)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (succs (hd b))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  p < n\n  n \\<equiv> length nodes\n  length a = n\n  nodes \\<equiv> g_V G\n  p \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! p = a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! p = a ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<n. ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<n. ss ! p = a ! p", "have \"\\<forall>p< length ss. ss!p = a!p\""], ["proof (prove)\nusing this:\n  \\<forall>p<n. ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. ss ! p = a ! p", "using `length ss = n`"], ["proof (prove)\nusing this:\n  \\<forall>p<n. ss ! p = a ! p\n  length ss = n\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. ss ! p = a ! p", "by auto"], ["proof (state)\nthis:\n  \\<forall>p<length ss. ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<length ss. ss ! p = a ! p", "have ss_eq_a: \"ss = a\""], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. ss ! p = a ! p\n\ngoal (1 subgoal):\n 1. ss = a", "using n_def len_eq nodes_def `length ss = n`"], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. ss ! p = a ! p\n  n \\<equiv> length nodes\n  length a = n\n  nodes \\<equiv> g_V G\n  length ss = n\n\ngoal (1 subgoal):\n 1. ss = a", "by (auto simp add:list_eq_iff_nth_eq)"], ["proof (state)\nthis:\n  ss = a\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with wf_a_b p_lt_n"], ["proof (chain)\npicking this:\n  wf_dom a b\n  p < n\n  ss = a", "have \n                              t3: \"(?ss_p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set ?ss_p. x < p))\" and \n                              t4:  \"(?ss_p = rev [0..<n] \\<longrightarrow> (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p))\" and \n                              sta_temp: \"(p \\<notin> set b \\<longrightarrow>  stable r step ss p)\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  p < n\n  ss = a\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n    (\\<forall>x\\<in>set (ss ! p). x < p) &&&\n    ss ! p = rev [0..<n] \\<longrightarrow>\n    (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p) &&&\n    p \\<notin> set b \\<longrightarrow> stable r step ss p", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n  p \\<notin> set b \\<longrightarrow> stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "from  `tl b = []`  `b \\<noteq> []`"], ["proof (chain)\npicking this:\n  tl b = []\n  b \\<noteq> []", "have \"p \\<notin> set b \\<longleftrightarrow> p \\<noteq> hd b \""], ["proof (prove)\nusing this:\n  tl b = []\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. (p \\<notin> set b) = (p \\<noteq> hd b)", "by (induct b) auto"], ["proof (state)\nthis:\n  (p \\<notin> set b) = (p \\<noteq> hd b)\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with sta_temp"], ["proof (chain)\npicking this:\n  p \\<notin> set b \\<longrightarrow> stable r step ss p\n  (p \\<notin> set b) = (p \\<noteq> hd b)", "have \"p \\<noteq> hd b \\<longrightarrow> stable r step ss p\""], ["proof (prove)\nusing this:\n  p \\<notin> set b \\<longrightarrow> stable r step ss p\n  (p \\<notin> set b) = (p \\<noteq> hd b)\n\ngoal (1 subgoal):\n 1. p \\<noteq> hd b \\<longrightarrow> stable r step ss p", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> hd b \\<longrightarrow> stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with hd_b_ss_sta"], ["proof (chain)\npicking this:\n  stable r step ss (hd b)\n  p \\<noteq> hd b \\<longrightarrow> stable r step ss p", "have \"stable r step ss p\""], ["proof (prove)\nusing this:\n  stable r step ss (hd b)\n  p \\<noteq> hd b \\<longrightarrow> stable r step ss p\n\ngoal (1 subgoal):\n 1. stable r step ss p", "by auto"], ["proof (state)\nthis:\n  stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "then"], ["proof (chain)\npicking this:\n  stable r step ss p", "have sta_temp': \"p \\<notin> set w \\<longrightarrow>  stable r step ss p\""], ["proof (prove)\nusing this:\n  stable r step ss p\n\ngoal (1 subgoal):\n 1. p \\<notin> set w \\<longrightarrow> stable r step ss p", "using w_n_nil"], ["proof (prove)\nusing this:\n  stable r step ss p\n  w = []\n\ngoal (1 subgoal):\n 1. p \\<notin> set w \\<longrightarrow> stable r step ss p", "by auto"], ["proof (state)\nthis:\n  p \\<notin> set w \\<longrightarrow> stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have \"?ss_p \\<noteq> (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "assume \"\\<not>?ss_p \\<noteq>  (rev [0..<n])\""], ["proof (state)\nthis:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]", "have ss_p_all: \"?ss_p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. ss ! p = rev [0..<n]", "by simp"], ["proof (state)\nthis:\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with `ss = a`"], ["proof (chain)\npicking this:\n  ss = a\n  ss ! p = rev [0..<n]", "have \"a!p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  ss = a\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from `?ss_p =  (rev [0..<n])`"], ["proof (chain)\npicking this:\n  ss ! p = rev [0..<n]", "have \" ?ss_p = rev [0..<n]\""], ["proof (prove)\nusing this:\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. ss ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with  t4"], ["proof (chain)\npicking this:\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n  ss ! p = rev [0..<n]", "have \"(\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\""], ["proof (prove)\nusing this:\n  ss ! p = rev [0..<n] \\<longrightarrow>\n  (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)\n  ss ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p", "obtain x where x: \"x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set b \\<and>\n        (x, p) \\<in> g_E G \\<and> x < p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with `tl b = []`  `b \\<noteq> []`"], ["proof (chain)\npicking this:\n  tl b = []\n  b \\<noteq> []\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p", "have \"x =hd b\""], ["proof (prove)\nusing this:\n  tl b = []\n  b \\<noteq> []\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n\ngoal (1 subgoal):\n 1. x = hd b", "by (induct b) auto"], ["proof (state)\nthis:\n  x = hd b\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n  x = hd b", "have \" (hd b, p) \\<in> g_E G\" and hdb_lt_p: \"hd b < p\""], ["proof (prove)\nusing this:\n  x \\<in> set b \\<and> (x, p) \\<in> g_E G \\<and> x < p\n  x = hd b\n\ngoal (1 subgoal):\n 1. (hd b, p) \\<in> g_E G &&& hd b < p", "by auto"], ["proof (state)\nthis:\n  (hd b, p) \\<in> g_E G\n  hd b < p\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (hd b, p) \\<in> g_E G\n  hd b < p", "have \"p \\<in> succs (hd b)\""], ["proof (prove)\nusing this:\n  (hd b, p) \\<in> g_E G\n  hd b < p\n\ngoal (1 subgoal):\n 1. p \\<in> succs (hd b)", "by (simp add:succs_def)"], ["proof (state)\nthis:\n  p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with succ_hd_b_eq"], ["proof (chain)\npicking this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  p \\<in> succs (hd b)", "have transf_hd_b_ap: \"transf (hd b) (a!hd b)  \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\""], ["proof (prove)\nusing this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  p \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  \\<forall>(q, t)\\<in>set (step (hd b) (a ! hd b)).\n     t \\<squnion>\\<^bsub>f\\<^esub> a ! q = a ! q\n  p \\<in> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "have a_p_neq_all: \"?a_p \\<noteq> (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ! p \\<noteq> rev [0..<n]", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "assume \"\\<not> ?a_p \\<noteq>  (rev [0..<n])\""], ["proof (state)\nthis:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> a ! p \\<noteq> rev [0..<n]", "have a_p_all: \"?a_p =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. a ! p = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a ! p = rev [0..<n]", "have \"transf (hd b) ?a_hdb \\<squnion>\\<^bsub>f\\<^esub> ?a_p =  (hd b # ?a_hdb)  \\<squnion>\\<^bsub>f\\<^esub>  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  a ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n    hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> rev [0..<n]", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> rev [0..<n]", "have \"transf (hd b) ?a_hdb  \\<squnion>\\<^bsub>f\\<^esub>?a_p =  ( (inter_sorted_rev (hd b # ?a_hdb) (rev [0..<n])))\""], ["proof (prove)\nusing this:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> rev [0..<n]\n\ngoal (1 subgoal):\n 1. transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n    inter_sorted_rev (hd b # a ! hd b) (rev [0..<n])", "by (auto simp add:f_def plussub_def nodes_sup_def )"], ["proof (state)\nthis:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n])\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with transf_hd_b_ap a_p_all"], ["proof (chain)\npicking this:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  a ! p = rev [0..<n]\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n])", "have \"inter_sorted_rev (hd b # ?a_hdb) (rev [0..<n]) = \n                                              (rev [0..<n])\""], ["proof (prove)\nusing this:\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p = a ! p\n  a ! p = rev [0..<n]\n  transf (hd b) (a ! hd b) \\<squnion>\\<^bsub>f\\<^esub> a ! p =\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n])\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]", "have tx: \"inter_sorted_rev (hd b # ?a_hdb) (rev [0..<n]) = (rev [0..<n])\""], ["proof (prove)\nusing this:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]\n\ngoal (1 subgoal):\n 1. inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))", "have \"set (inter_sorted_rev (hd b # ?a_hdb) (rev [0..<n])) \\<subseteq>\n                                    set (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n\ngoal (1 subgoal):\n 1. set (inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]))\n    \\<subseteq> set (hd b # a ! hd b)", "by (auto simp add: inter_sorted_correct)"], ["proof (state)\nthis:\n  set (inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]))\n  \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with tx"], ["proof (chain)\npicking this:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]\n  set (inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]))\n  \\<subseteq> set (hd b # a ! hd b)", "have \"set (rev [0..<n]) \\<subseteq> set (hd b #  ?a_hdb)\""], ["proof (prove)\nusing this:\n  inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]) = rev [0..<n]\n  set (inter_sorted_rev (hd b # a ! hd b) (rev [0..<n]))\n  \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. set (rev [0..<n]) \\<subseteq> set (hd b # a ! hd b)", "by auto"], ["proof (state)\nthis:\n  set (rev [0..<n]) \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  set (rev [0..<n]) \\<subseteq> set (hd b # a ! hd b)", "have ty: \"{0..<n} \\<subseteq> set (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  set (rev [0..<n]) \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. {0..<n} \\<subseteq> set (hd b # a ! hd b)", "by auto"], ["proof (state)\nthis:\n  {0..<n} \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from hdb_subset_n ty"], ["proof (chain)\npicking this:\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n  {0..<n} \\<subseteq> set (hd b # a ! hd b)", "have \"{0..<n} = set (hd b # ?a_hdb)\""], ["proof (prove)\nusing this:\n  set (hd b # a ! hd b) \\<subseteq> {0..<n}\n  {0..<n} \\<subseteq> set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. {0..<n} = set (hd b # a ! hd b)", "by auto"], ["proof (state)\nthis:\n  {0..<n} = set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with sorted_hd_b_cons"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  {0..<n} = set (hd b # a ! hd b)", "have tz: \"hd b # ?a_hdb = rev [0..<n]\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  {0..<n} = set (hd b # a ! hd b)\n\ngoal (1 subgoal):\n 1. hd b # a ! hd b = rev [0..<n]", "by (auto simp add:sorted_less_rev_set_unique)"], ["proof (state)\nthis:\n  hd b # a ! hd b = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from n_def nodes_def len_verts_gt0 verts"], ["proof (chain)\npicking this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n  g_V G = [0..<length (g_V G)]", "have \"n > 0\""], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n  g_V G = [0..<length (g_V G)]\n\ngoal (1 subgoal):\n 1. 0 < n", "by auto"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with tz"], ["proof (chain)\npicking this:\n  hd b # a ! hd b = rev [0..<n]\n  0 < n", "have tzz: \"hd b = n - 1\""], ["proof (prove)\nusing this:\n  hd b # a ! hd b = rev [0..<n]\n  0 < n\n\ngoal (1 subgoal):\n 1. hd b = n - 1", "by (induct n)  auto"], ["proof (state)\nthis:\n  hd b = n - 1\n\ngoal (1 subgoal):\n 1. \\<not> a ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "from p_lt_n tzz hdb_lt_p"], ["proof (chain)\npicking this:\n  p < n\n  hd b = n - 1\n  hd b < p", "show False"], ["proof (prove)\nusing this:\n  p < n\n  hd b = n - 1\n  hd b < p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> ss ! p \\<noteq> rev [0..<n] \\<Longrightarrow> False", "with  ss_p_all ss_eq_a"], ["proof (chain)\npicking this:\n  ss ! p = rev [0..<n]\n  ss = a\n  a ! p \\<noteq> rev [0..<n]", "show False"], ["proof (prove)\nusing this:\n  ss ! p = rev [0..<n]\n  ss = a\n  a ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<not> w \\<noteq> [] \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "with sta_temp' sorted_ss_p t3"], ["proof (chain)\npicking this:\n  p \\<notin> set w \\<longrightarrow> stable r step ss p\n  Sorted_Less.sorted (rev (ss ! p))\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  ss ! p \\<noteq> rev [0..<n]", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> set w \\<longrightarrow> stable r step ss p\n  Sorted_Less.sorted (rev (ss ! p))\n  ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n  (\\<forall>x\\<in>set (ss ! p). x < p)\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! p)) \\<and>\n    (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n    (ss ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n    (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! p)) \\<and>\n  (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n   (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n  (ss ! p = rev [0..<n] \\<longrightarrow>\n   (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n  (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n     b \\<noteq> []; \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (a ! p)) \\<and>\n        (a ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n        (a ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set b \\<longrightarrow> stable r step a p);\n     Sorted_Less.sorted b; length a = n;\n     \\<forall>x\\<in>set b. x < n\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                      (\\<forall>p<n.\n                          Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                          (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                           (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                          (ss ! p = rev [0..<n] \\<longrightarrow>\n                           (\\<exists>x\\<in>set w.\n                               (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                          (p \\<notin> set w \\<longrightarrow>\n                           stable r step ss p)) \\<and>\n                      Sorted_Less.sorted w \\<and>\n                      length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "from ss_inA wf_dom_2 sorted_w len_ss_n w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<n.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n    Sorted_Less.sorted w \\<and>\n    length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)", "by auto"], ["proof (state)\nthis:\n  (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n  (\\<forall>p<n.\n      Sorted_Less.sorted (rev (ss ! p)) \\<and>\n      (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n       (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n      (ss ! p = rev [0..<n] \\<longrightarrow>\n       (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n      (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n  Sorted_Less.sorted w \\<and>\n  length ss = n \\<and> (\\<forall>x\\<in>set w. x < n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_dom_invariant_aux':\n  fixes a b ss w\nassumes propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"    \n    and b_n_nil: \"b \\<noteq> [] \" \n    and a_in_A: \"\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A  \"   \n    and ass: \"\\<forall>p<length ss0.\n          sorted (rev ( (a ! p))) \\<and>\n          (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow> (\\<forall>x\\<in>set ( (a ! p)). x < p)) \\<and>\n          (a ! p = rev [0..<length ss0] \\<longrightarrow>  (\\<exists>x\\<in> set b. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n          (p \\<notin> set b \\<longrightarrow> stable r step a p)\"\n    and sorted_b: \"sorted b  \"\n    and n_len: \"n = length ss0  \"\n    and len_eq:  \"length a = length ss0  \"\n    and b_lt_n: \"\\<forall>x\\<in>set b. x < length ss0  \"\n  shows \"(\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n         (\\<forall>p<length ss0.\n           sorted (rev ( (ss ! p))) \\<and>\n           (ss ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow> (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n           (ss ! p = rev [0..<length ss0] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n         sorted w \\<and> length ss = length ss0 \\<and> (\\<forall>x\\<in>set w. x < length ss0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<length ss0.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<length ss0] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n    Sorted_Less.sorted w \\<and>\n    length ss = length ss0 \\<and> (\\<forall>x\\<in>set w. x < length ss0)", "using assms"], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  b \\<noteq> []\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  \\<forall>p<length ss0.\n     Sorted_Less.sorted (rev (a ! p)) \\<and>\n     (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n      (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n     (a ! p = rev [0..<length ss0] \\<longrightarrow>\n      (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set b \\<longrightarrow> stable r step a p)\n  Sorted_Less.sorted b\n  n = length ss0\n  length a = length ss0\n  \\<forall>x\\<in>set b. x < length ss0\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<length ss0.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<length ss0] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \\<and>\n    Sorted_Less.sorted w \\<and>\n    length ss = length ss0 \\<and> (\\<forall>x\\<in>set w. x < length ss0)", "by (auto dest: propa_dom_invariant_aux)"], ["", "lemma propa_dom_invariant: \n  assumes wf_ss_w: \"wf_dom ss w \"\n      and w_n_nil: \"w \\<noteq> []\"\n      and propa: \"propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w') \"\n    shows \"wf_dom ss' w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_dom ss' w'", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n\ngoal (1 subgoal):\n 1. wf_dom ss' w'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss w; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss' w'", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have ass:\n    \"(\\<forall>p< n. sorted (rev (ss!p)) \\<and>\n             (ss!p \\<noteq> rev [0..< n] \\<longrightarrow> (\\<forall>x\\<in>set (ss!p). x < p)) \\<and>\n             (ss!p = rev [0..< n] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n             (p \\<notin> set w \\<longrightarrow> stable r step ss p)) \"\n  and sorted_b: \"sorted w\"\n  and a_in_A: \"\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\" \n  and len_eq: \"length ss = n\"\n  and b_lt_n: \"(\\<forall>x\\<in>set w. x < n)\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. (\\<forall>p<n.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p) &&&\n     Sorted_Less.sorted w) &&&\n    \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A &&&\n    length ss = n &&& \\<forall>x\\<in>set w. x < n", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss w; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss' w'", "from propa w_n_nil a_in_A ass sorted_b len_eq b_lt_n"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  w \\<noteq> []\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  w \\<noteq> []\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. wf_dom ss' w'", "by (unfold wf_dom_def) (rule propa_dom_invariant_aux)"], ["proof (state)\nthis:\n  wf_dom ss' w'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_dom_mono_aux: \n  fixes \\<tau> p \\<tau>' a b\n  assumes sorted: \"sorted (rev (transf p  \\<tau>)) \"\n      and a_b_step: \"(a, b) \\<in> set (step p  \\<tau>) \" \n      and \"\\<tau> \\<in> A \" and \" p < n \" and \" \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'\" \n    shows \"\\<exists>\\<tau>''. (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and> b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "have step1: \"step p \\<tau> = map (\\<lambda>pc. (pc, (transf  p \\<tau>))) (rev (sorted_list_of_set(succs p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step p \\<tau> =\n    map (\\<lambda>pc. (pc, transf p \\<tau>))\n     (rev (sorted_list_of_set (succs p)))", "by (simp add:step_def exec_def)"], ["proof (state)\nthis:\n  step p \\<tau> =\n  map (\\<lambda>pc. (pc, transf p \\<tau>))\n   (rev (sorted_list_of_set (succs p)))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "from a_b_step"], ["proof (chain)\npicking this:\n  (a, b) \\<in> set (step p \\<tau>)", "have \"set (step p \\<tau>) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (step p \\<tau>)\n\ngoal (1 subgoal):\n 1. set (step p \\<tau>) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  set (step p \\<tau>) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with step1"], ["proof (chain)\npicking this:\n  step p \\<tau> =\n  map (\\<lambda>pc. (pc, transf p \\<tau>))\n   (rev (sorted_list_of_set (succs p)))\n  set (step p \\<tau>) \\<noteq> {}", "have succ_p_n_nil: \"(rev (sorted_list_of_set(succs p))) \\<noteq> []\""], ["proof (prove)\nusing this:\n  step p \\<tau> =\n  map (\\<lambda>pc. (pc, transf p \\<tau>))\n   (rev (sorted_list_of_set (succs p)))\n  set (step p \\<tau>) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rev (sorted_list_of_set (succs p)) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  rev (sorted_list_of_set (succs p)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "from `p<n`"], ["proof (chain)\npicking this:\n  p < n", "have \"p \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  p < n\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G)", "using n_def nodes_def verts_set len_verts_gt0"], ["proof (prove)\nusing this:\n  p < n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "then"], ["proof (chain)\npicking this:\n  p \\<in> set (g_V G)", "have fin: \"finite (succs p)\""], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs p)", "using fin_succs"], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs p)", "by auto"], ["proof (state)\nthis:\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with step1"], ["proof (chain)\npicking this:\n  step p \\<tau> =\n  map (\\<lambda>pc. (pc, transf p \\<tau>))\n   (rev (sorted_list_of_set (succs p)))\n  finite (succs p)", "have \"\\<forall>(x,y)\\<in> set (step p \\<tau>). x \\<in> succs p\" \n               and step2: \"\\<forall>(x,y)\\<in> set (step p \\<tau>). y = transf p \\<tau>\""], ["proof (prove)\nusing this:\n  step p \\<tau> =\n  map (\\<lambda>pc. (pc, transf p \\<tau>))\n   (rev (sorted_list_of_set (succs p)))\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. \\<forall>(x, y)\\<in>set (step p \\<tau>). x \\<in> succs p &&&\n    \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with a_b_step"], ["proof (chain)\npicking this:\n  (a, b) \\<in> set (step p \\<tau>)\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>", "have \"a \\<in> succs p\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (step p \\<tau>)\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>\n\ngoal (1 subgoal):\n 1. a \\<in> succs p", "by auto"], ["proof (state)\nthis:\n  a \\<in> succs p\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "then"], ["proof (chain)\npicking this:\n  a \\<in> succs p", "have \"succs p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  a \\<in> succs p\n\ngoal (1 subgoal):\n 1. succs p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  succs p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "from step2 a_b_step"], ["proof (chain)\npicking this:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>\n  (a, b) \\<in> set (step p \\<tau>)", "have b:  \"b = transf p \\<tau>\""], ["proof (prove)\nusing this:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>). y = transf p \\<tau>\n  (a, b) \\<in> set (step p \\<tau>)\n\ngoal (1 subgoal):\n 1. b = transf p \\<tau>", "by auto"], ["proof (state)\nthis:\n  b = transf p \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "have step2: \"step p \\<tau>' = map (\\<lambda>pc. (pc, (transf  p \\<tau>'))) (rev (sorted_list_of_set(succs p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step p \\<tau>' =\n    map (\\<lambda>pc. (pc, transf p \\<tau>'))\n     (rev (sorted_list_of_set (succs p)))", "by (simp add:step_def exec_def)"], ["proof (state)\nthis:\n  step p \\<tau>' =\n  map (\\<lambda>pc. (pc, transf p \\<tau>'))\n   (rev (sorted_list_of_set (succs p)))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with fin"], ["proof (chain)\npicking this:\n  finite (succs p)\n  step p \\<tau>' =\n  map (\\<lambda>pc. (pc, transf p \\<tau>'))\n   (rev (sorted_list_of_set (succs p)))", "have g1: \"\\<forall>(x,y)\\<in> set (step p \\<tau>'). x \\<in> succs p\" \n                and g2: \"\\<forall>(x,y)\\<in> set (step p \\<tau>'). y = transf p \\<tau>'\""], ["proof (prove)\nusing this:\n  finite (succs p)\n  step p \\<tau>' =\n  map (\\<lambda>pc. (pc, transf p \\<tau>'))\n   (rev (sorted_list_of_set (succs p)))\n\ngoal (1 subgoal):\n 1. \\<forall>(x, y)\\<in>set (step p \\<tau>'). x \\<in> succs p &&&\n    \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with `a \\<in> succs p`"], ["proof (chain)\npicking this:\n  a \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'", "have \"\\<exists>t. (a,t)\\<in> set (step p \\<tau>')\""], ["proof (prove)\nusing this:\n  a \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<exists>t. (a, t) \\<in> set (step p \\<tau>')", "using fin"], ["proof (prove)\nusing this:\n  a \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). x \\<in> succs p\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'\n  finite (succs p)\n\ngoal (1 subgoal):\n 1. \\<exists>t. (a, t) \\<in> set (step p \\<tau>')", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<exists>t. (a, t) \\<in> set (step p \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "then"], ["proof (chain)\npicking this:\n  \\<exists>t. (a, t) \\<in> set (step p \\<tau>')", "obtain t where ex: \"(a,t)\\<in> set (step p \\<tau>')\""], ["proof (prove)\nusing this:\n  \\<exists>t. (a, t) \\<in> set (step p \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        (a, t) \\<in> set (step p \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, t) \\<in> set (step p \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with g2"], ["proof (chain)\npicking this:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'\n  (a, t) \\<in> set (step p \\<tau>')", "have t: \"t = transf p \\<tau>'\""], ["proof (prove)\nusing this:\n  \\<forall>(x, y)\\<in>set (step p \\<tau>'). y = transf p \\<tau>'\n  (a, t) \\<in> set (step p \\<tau>')\n\ngoal (1 subgoal):\n 1. t = transf p \\<tau>'", "by auto"], ["proof (state)\nthis:\n  t = transf p \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "from` \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'`"], ["proof (chain)\npicking this:\n  \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'", "have g: \"sorted (rev \\<tau>) \\<and> sorted (rev \\<tau>')\\<and> set \\<tau>' \\<subseteq> set \\<tau> \\<or> \\<tau> = \\<tau>'\""], ["proof (prove)\nusing this:\n  \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev \\<tau>) \\<and>\n    Sorted_Less.sorted (rev \\<tau>') \\<and>\n    set \\<tau>' \\<subseteq> set \\<tau> \\<or>\n    \\<tau> = \\<tau>'", "by (auto simp add:r_def lesssub_def lesub_def nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev \\<tau>) \\<and>\n  Sorted_Less.sorted (rev \\<tau>') \\<and>\n  set \\<tau>' \\<subseteq> set \\<tau> \\<or>\n  \\<tau> = \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev \\<tau>) \\<and>\n  Sorted_Less.sorted (rev \\<tau>') \\<and>\n  set \\<tau>' \\<subseteq> set \\<tau> \\<or>\n  \\<tau> = \\<tau>'", "have subset_p: \"set (p#\\<tau>') \\<subseteq> set (p# \\<tau>)\" and \"set  \\<tau>' \\<subseteq> set \\<tau>\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev \\<tau>) \\<and>\n  Sorted_Less.sorted (rev \\<tau>') \\<and>\n  set \\<tau>' \\<subseteq> set \\<tau> \\<or>\n  \\<tau> = \\<tau>'\n\ngoal (1 subgoal):\n 1. set (p # \\<tau>') \\<subseteq> set (p # \\<tau>) &&&\n    set \\<tau>' \\<subseteq> set \\<tau>", "by auto"], ["proof (state)\nthis:\n  set (p # \\<tau>') \\<subseteq> set (p # \\<tau>)\n  set \\<tau>' \\<subseteq> set \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "from sorted"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (transf p \\<tau>))", "have \"\\<forall>x\\<in> set \\<tau>. x < p\" and \"sorted (rev \\<tau>')\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (transf p \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set \\<tau>. x < p &&& Sorted_Less.sorted (rev \\<tau>')", "using g"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (transf p \\<tau>))\n  Sorted_Less.sorted (rev \\<tau>) \\<and>\n  Sorted_Less.sorted (rev \\<tau>') \\<and>\n  set \\<tau>' \\<subseteq> set \\<tau> \\<or>\n  \\<tau> = \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set \\<tau>. x < p &&& Sorted_Less.sorted (rev \\<tau>')", "by (auto simp add:sorted_wrt_append transf_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set \\<tau>. x < p\n  Sorted_Less.sorted (rev \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with `set \\<tau>' \\<subseteq> set \\<tau>`"], ["proof (chain)\npicking this:\n  set \\<tau>' \\<subseteq> set \\<tau>\n  \\<forall>x\\<in>set \\<tau>. x < p\n  Sorted_Less.sorted (rev \\<tau>')", "have \"\\<forall>x\\<in> set \\<tau>'. x < p\""], ["proof (prove)\nusing this:\n  set \\<tau>' \\<subseteq> set \\<tau>\n  \\<forall>x\\<in>set \\<tau>. x < p\n  Sorted_Less.sorted (rev \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set \\<tau>'. x < p", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set \\<tau>'. x < p\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with `sorted (rev \\<tau>')`"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev \\<tau>')\n  \\<forall>x\\<in>set \\<tau>'. x < p", "have \"sorted (rev (p#\\<tau>'))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev \\<tau>')\n  \\<forall>x\\<in>set \\<tau>'. x < p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (p # \\<tau>'))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (p # \\<tau>'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with sorted b t subset_p"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (transf p \\<tau>))\n  b = transf p \\<tau>\n  t = transf p \\<tau>'\n  set (p # \\<tau>') \\<subseteq> set (p # \\<tau>)\n  Sorted_Less.sorted (rev (p # \\<tau>'))", "have \"b \\<sqsubseteq>\\<^bsub>r\\<^esub> t\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (transf p \\<tau>))\n  b = transf p \\<tau>\n  t = transf p \\<tau>'\n  set (p # \\<tau>') \\<subseteq> set (p # \\<tau>)\n  Sorted_Less.sorted (rev (p # \\<tau>'))\n\ngoal (1 subgoal):\n 1. b \\<sqsubseteq>\\<^bsub>r\\<^esub> t", "by (auto simp add:r_def lesssub_def lesub_def nodes_le_def transf_def)"], ["proof (state)\nthis:\n  b \\<sqsubseteq>\\<^bsub>r\\<^esub> t\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "with ex"], ["proof (chain)\npicking this:\n  (a, t) \\<in> set (step p \\<tau>')\n  b \\<sqsubseteq>\\<^bsub>r\\<^esub> t", "show ?thesis"], ["proof (prove)\nusing this:\n  (a, t) \\<in> set (step p \\<tau>')\n  b \\<sqsubseteq>\\<^bsub>r\\<^esub> t\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>''.\n       (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n       b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<tau>''.\n     (a, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n     b \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_dom_mono: \n\"(\\<forall>\\<tau> p \\<tau>'. \\<tau> \\<in> A \\<and> p<n \\<and> \\<tau> \\<sqsubseteq>\\<^sub>r \\<tau>' \\<longrightarrow> \n           sorted (rev (transf p \\<tau>)) \\<longrightarrow> \n           set (step p \\<tau>) {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set (step p \\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<tau> p \\<tau>'.\n       \\<tau> \\<in> A \\<and>\n       p < n \\<and>\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>' \\<longrightarrow>\n       Sorted_Less.sorted (rev (transf p \\<tau>)) \\<longrightarrow>\n       set (step p \\<tau>) \n       {\\<sqsubseteq>\\<^bsub>r\\<^esub>} set (step p \\<tau>')", "apply(unfold mono_def lesubstep_type_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<tau> p \\<tau>'.\n       \\<tau> \\<in> A \\<and>\n       p < n \\<and>\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>' \\<longrightarrow>\n       Sorted_Less.sorted (rev (transf p \\<tau>)) \\<longrightarrow>\n       (\\<forall>(pa, \\<tau>)\\<in>set (step p \\<tau>).\n           \\<exists>\\<tau>''.\n              (pa, \\<tau>'') \\<in> set (step p \\<tau>') \\<and>\n              \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> \\<tau>'')", "by(auto simp add:step_dom_mono_aux n_def nodes_def transf_def)"], ["", "lemma propa_termination: \n  fixes a b\n  assumes wf_a_b: \"wf_dom a b\" \n      and b_n_nil: \"b \\<noteq> [] \"\n    shows \"(propa f (step (hd b) (a ! hd b)) a (tl b), a, b) \\<in>\n           {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*> \n           (\\<lambda>x. case x of (x, y) \\<Rightarrow> (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "let ?qs = \"(step (hd b) (a ! hd b))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "from wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b", "have \"\\<forall>x\\<in>set b. x < n\" and n_len: \"length a = n\"  and sorted_b: \"sorted b\" \n               and set_a: \"set a \\<subseteq> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set b. x < n &&& length a = n) &&&\n    Sorted_Less.sorted b &&& set a \\<subseteq> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b\n  set a \\<subseteq> A", "have sorted_tl_b: \"sorted (tl b)\" and hd_b_lt_n: \"hd b < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl b) &&& hd b < n", "using b_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  length a = n\n  Sorted_Less.sorted b\n  set a \\<subseteq> A\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl b) &&& hd b < n", "by (induct b) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl b)\n  hd b < n\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "from set_a"], ["proof (chain)\npicking this:\n  set a \\<subseteq> A", "have a_inA: \"a \\<in> list n A\""], ["proof (prove)\nusing this:\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. a \\<in> list n A", "using n_len"], ["proof (prove)\nusing this:\n  set a \\<subseteq> A\n  length a = n\n\ngoal (1 subgoal):\n 1. a \\<in> list n A", "by (auto intro: listI)"], ["proof (state)\nthis:\n  a \\<in> list n A\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "from hd_b_lt_n"], ["proof (chain)\npicking this:\n  hd b < n", "have dist: \"distinct (map fst ?qs)\""], ["proof (prove)\nusing this:\n  hd b < n\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "using distinct_p"], ["proof (prove)\nusing this:\n  hd b < n\n  ?p < n \\<longrightarrow> distinct (map fst (step ?p (?ss ! ?p)))\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "from wf_a_b b_n_nil"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []", "have step_pres_bounded: \"\\<forall>(q, \\<tau>)\\<in>set ?qs. q < n \\<and> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < n \\<and> \\<tau> \\<in> A", "using propa_dom_invariant_auxi n_len"], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n  \\<lbrakk>wf_dom ?a ?b; ?b \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?a ! hd ?b \\<noteq> rev [0..<n] \\<and>\n                    Sorted_Less.sorted (rev (hd ?b # ?a ! hd ?b)) \\<and>\n                    set (hd ?b # ?a ! hd ?b) \\<subseteq> set nodes \\<and>\n                    hd ?b # ?a ! hd ?b \\<in> A \\<and>\n                    (\\<forall>(q, \\<tau>)\n                              \\<in>set (step (hd ?b) (?a ! hd ?b)).\n                        q < length ?a \\<and> \\<tau> \\<in> A)\n  length a = n\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < n \\<and> \\<tau> \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "with sorted_tl_b set_a n_len"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A", "have propa: \"propa f ?qs a (tl b) = (merges f ?qs a, (sorted_list_of_set ({q. \\<exists>t.(q,t)\\<in>set ?qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (a!q) \\<noteq> a!q} \\<union> set(tl b))))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. propa f (step (hd b) (a ! hd b)) a (tl b) =\n    (merges f (step (hd b) (a ! hd b)) a,\n     sorted_list_of_set\n      ({q. \\<exists>t.\n              (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n              t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n       set (tl b)))", "by (auto dest: decomp_propa)"], ["proof (state)\nthis:\n  propa f (step (hd b) (a ! hd b)) a (tl b) =\n  (merges f (step (hd b) (a ! hd b)) a,\n   sorted_list_of_set\n    ({q. \\<exists>t.\n            (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n            t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n     set (tl b)))\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "from a_inA step_pres_bounded sorted_b b_n_nil  dist"], ["proof (chain)\npicking this:\n  a \\<in> list n A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted b\n  b \\<noteq> []\n  distinct (map fst (step (hd b) (a ! hd b)))", "have \"((merges f ?qs a, (sorted_list_of_set ({q. \\<exists>t.(q,t)\\<in>set ?qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (a!q) \\<noteq> a!q} \\<union> set(tl b)))),(a,b)) \\<in>\n        {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*> (\\<lambda>x. case x of (x, y) \\<Rightarrow> (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\""], ["proof (prove)\nusing this:\n  a \\<in> list n A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < n \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted b\n  b \\<noteq> []\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. ((merges f (step (hd b) (a ! hd b)) a,\n      sorted_list_of_set\n       ({q. \\<exists>t.\n               (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n               t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n        set (tl b))),\n     a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "by (auto simp add: finite_psubset_def dest: termination_lemma)"], ["proof (state)\nthis:\n  ((merges f (step (hd b) (a ! hd b)) a,\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))),\n   a, b)\n  \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>x.\n            case x of\n            (x, y) \\<Rightarrow>\n              (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) =\n  (merges f (step (hd b) (a ! hd b)) a,\n   sorted_list_of_set\n    ({q. \\<exists>t.\n            (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n            t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n     set (tl b)))\n  ((merges f (step (hd b) (a ! hd b)) a,\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))),\n   a, b)\n  \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>x.\n            case x of\n            (x, y) \\<Rightarrow>\n              (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset", "show ?thesis"], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) =\n  (merges f (step (hd b) (a ! hd b)) a,\n   sorted_list_of_set\n    ({q. \\<exists>t.\n            (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n            t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n     set (tl b)))\n  ((merges f (step (hd b) (a ! hd b)) a,\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd b) (a ! hd b)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> a ! q \\<noteq> a ! q} \\<union>\n      set (tl b))),\n   a, b)\n  \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>x.\n            case x of\n            (x, y) \\<Rightarrow>\n              (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset\n\ngoal (1 subgoal):\n 1. (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n    \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n          (\\<lambda>x.\n              case x of\n              (x, y) \\<Rightarrow>\n                (sorted_list_of_set x, sorted_list_of_set y)) `\n          finite_psubset", "by auto"], ["proof (state)\nthis:\n  (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n  \\<in> {(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>x.\n            case x of\n            (x, y) \\<Rightarrow>\n              (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_dom_invariant: \n  assumes \"wf_dom ss0 w0\"\n    shows \"iter f step ss0 w0 = (ss',w') \\<longrightarrow> wf_dom ss' w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step ss0 w0 = (ss', w') \\<longrightarrow> wf_dom ss' w'", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss0 w0\n\ngoal (1 subgoal):\n 1. iter f step ss0 w0 = (ss', w') \\<longrightarrow> wf_dom ss' w'", "apply (unfold iter_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_dom ss0 w0 \\<Longrightarrow>\n    while (\\<lambda>(\\<tau>s, w). w \\<noteq> [])\n     (\\<lambda>(\\<tau>s, w).\n         let p = hd w in propa f (step p (\\<tau>s ! p)) \\<tau>s (tl w))\n     (ss0, w0) =\n    (ss', w') \\<longrightarrow>\n    wf_dom ss' w'", "apply(rule_tac  \n      P = \"(\\<lambda>(ss, w). wf_dom ss w )\" and\n      r = \"{(ss',ss). ss [\\<sqsubset>\\<^sub>r] ss'} <*lex*> (\\<lambda>(x,y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\" \n      in while_rule) \n  \\<comment> \\<open>Invariant holds initially:\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. wf_dom ss0 w0 \\<Longrightarrow>\n    case (ss0, w0) of (x, xa) \\<Rightarrow> wf_dom x xa\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (x, xa) \\<Rightarrow> wf_dom x xa\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 4. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 5. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (clarsimp)\n\n  \\<comment> \\<open>Invariant is preserved:\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (x, xa) \\<Rightarrow> wf_dom x xa\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(simp add: wf_dom_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(\\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A) \\<and>\n                (\\<forall>p<n.\n                    Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n                    (ss0 ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n                     (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n                    (ss0 ! p = rev [0..<n] \\<longrightarrow>\n                     (\\<exists>x\\<in>set w0.\n                         (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                    (p \\<notin> set w0 \\<longrightarrow>\n                     stable r step ss0 p)) \\<and>\n                Sorted_Less.sorted w0 \\<and>\n                length ss0 = n \\<and> (\\<forall>x\\<in>set w0. x < n);\n        case s of\n        (ss, w) \\<Rightarrow>\n          (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n          (\\<forall>p<n.\n              Sorted_Less.sorted (rev (ss ! p)) \\<and>\n              (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n               (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n              (ss ! p = rev [0..<n] \\<longrightarrow>\n               (\\<exists>x\\<in>set w.\n                   (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n              (p \\<notin> set w \\<longrightarrow>\n               stable r step ss p)) \\<and>\n          Sorted_Less.sorted w \\<and>\n          length ss = n \\<and> (\\<forall>x\\<in>set w. x < n);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                propa f (step (hd w) (\\<tau>s ! hd w))\n                                 \\<tau>s (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           (\\<forall>\\<tau>\\<in>set ss.\n                               \\<tau> \\<in> A) \\<and>\n                           (\\<forall>p<n.\n                               Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                               (ss ! p \\<noteq>\n                                rev [0..<n] \\<longrightarrow>\n                                (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                               (ss ! p = rev [0..<n] \\<longrightarrow>\n                                (\\<exists>x\\<in>set w.\n                                    (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                               (p \\<notin> set w \\<longrightarrow>\n                                stable r step ss p)) \\<and>\n                           Sorted_Less.sorted w \\<and>\n                           length ss = n \\<and>\n                           (\\<forall>x\\<in>set w. x < n)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A) \\<and>\n                         (\\<forall>p<length ss0.\n                             Sorted_Less.sorted (rev (ss ! p)) \\<and>\n                             (ss ! p \\<noteq>\n                              rev [0..<length ss0] \\<longrightarrow>\n                              (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                             (ss ! p =\n                              rev [0..<length ss0] \\<longrightarrow>\n                              (\\<exists>x\\<in>set w.\n                                  (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                             (p \\<notin> set w \\<longrightarrow>\n                              stable r step ss p)) \\<and>\n                         Sorted_Less.sorted w \\<and>\n                         length ss = length ss0 \\<and>\n                         (\\<forall>x\\<in>set w. x < length ss0)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(rule propa_dom_invariant_aux')"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> propa f\n                          (step (hd (?b16 a b ss w))\n                            (?a16 a b ss w ! hd (?b16 a b ss w)))\n                          (?a16 a b ss w) (tl (?b16 a b ss w)) =\n                         (ss, w)\n 2. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> ?b16 a b ss w \\<noteq> []\n 3. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<tau>\\<in>set (?a16 a b ss w).\n                            \\<tau> \\<in> A\n 4. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p<length ss0.\n                            Sorted_Less.sorted\n                             (rev (?a16 a b ss w ! p)) \\<and>\n                            (?a16 a b ss w ! p \\<noteq>\n                             rev [0..<length ss0] \\<longrightarrow>\n                             (\\<forall>x\\<in>set (?a16 a b ss w ! p).\n                                 x < p)) \\<and>\n                            (?a16 a b ss w ! p =\n                             rev [0..<length ss0] \\<longrightarrow>\n                             (\\<exists>x\\<in>set (?b16 a b ss w).\n                                 (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n                            (p \\<notin> set\n   (?b16 a b ss w) \\<longrightarrow>\n                             stable r step (?a16 a b ss w) p)\n 5. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> Sorted_Less.sorted (?b16 a b ss w)\n 6. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> n = length ss0\n 7. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> length (?a16 a b ss w) = length ss0\n 8. \\<And>a b ss w.\n       \\<lbrakk>b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w);\n        \\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n        \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A;\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n           (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n           (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n        \\<forall>p<length ss0.\n           Sorted_Less.sorted (rev (a ! p)) \\<and>\n           (a ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n            (\\<forall>x\\<in>set (a ! p). x < p)) \\<and>\n           (a ! p = rev [0..<length ss0] \\<longrightarrow>\n            (\\<exists>x\\<in>set b. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n           (p \\<notin> set b \\<longrightarrow> stable r step a p);\n        Sorted_Less.sorted w0; Sorted_Less.sorted b;\n        \\<forall>x\\<in>set w0. x < length ss0; n = length ss0;\n        length a = length ss0; \\<forall>x\\<in>set b. x < length ss0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (?b16 a b ss w). x < length ss0\n 9. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 10. wf_dom ss0 w0 \\<Longrightarrow>\n     wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n         (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n         finite_psubset)\nA total of 11 subgoals...", "apply assumption+\n  \\<comment> \\<open>Postcondition holds upon termination:\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow> wf_dom ss' w'\n 2. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp \n\n  \\<comment> \\<open>Well-foundedness of the termination relation:\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (simp add: wf_listn_termination_rel) \n\n  \\<comment> \\<open>Loop decreases along termination relation:\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0; case s of (x, xa) \\<Rightarrow> wf_dom x xa;\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_dom ss0 w0; wf_dom a b; b \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>x.\n                                   case x of\n                                   (x, y) \\<Rightarrow>\n                                     (sorted_list_of_set x,\nsorted_list_of_set y)) `\n                               finite_psubset", "apply (fastforce intro:propa_termination)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma propa_dom_invariant_aux2: \n  fixes ss w ssa wa\n  assumes wf_dom_ss0_w0: \"wf_dom ss0 w0\"\n      and w_n_nil: \"w \\<noteq> [] \"     \n      and propa: \"propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa) \"\n      and wf_ss_w: \"wf_dom ss w \"\n      and ss0_lt_ss: \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\"\n      and sta: \" \\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p) \\<longrightarrow> ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\"    \n    shows \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and> \n           (\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p) \\<longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss0 w0\n  w \\<noteq> []\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  wf_dom ss w\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal (1 subgoal):\n 1. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "let ?ss_hdw = \"ss!hd w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from wf_dom_ss0_w0"], ["proof (chain)\npicking this:\n  wf_dom ss0 w0", "have len_ss0: \"length ss0 = n\" and \"\\<forall>x\\<in> set ss0. x \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom ss0 w0\n\ngoal (1 subgoal):\n 1. length ss0 = n &&& \\<forall>x\\<in>set ss0. x \\<in> A", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  length ss0 = n\n  \\<forall>x\\<in>set ss0. x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  length ss0 = n\n  \\<forall>x\\<in>set ss0. x \\<in> A", "have ss0_inA:  \"ss0 \\<in> list n A\"  and set_ss0: \"set ss0 \\<subseteq> A\""], ["proof (prove)\nusing this:\n  length ss0 = n\n  \\<forall>x\\<in>set ss0. x \\<in> A\n\ngoal (1 subgoal):\n 1. ss0 \\<in> list n A &&& set ss0 \\<subseteq> A", "by (auto intro:listI)"], ["proof (state)\nthis:\n  ss0 \\<in> list n A\n  set ss0 \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  ss0 \\<in> list n A\n  set ss0 \\<subseteq> A", "have ss0_nth_inA: \"\\<forall>i<length ss0. ss0!i \\<in> A\""], ["proof (prove)\nusing this:\n  ss0 \\<in> list n A\n  set ss0 \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ss0. ss0 ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length ss0. ss0 ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss0. ss0 ! i \\<in> A", "have ss0_p_subset: \"\\<forall>p< length ss0. set (ss0!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss0. ss0 ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. set (ss0 ! p) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length ss0. set (ss0 ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from len_ss0 n_def nodes_def len_verts_gt0"], ["proof (chain)\npicking this:\n  length ss0 = n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)", "have \"0 < length ss0\""], ["proof (prove)\nusing this:\n  length ss0 = n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. 0 < length ss0", "by auto"], ["proof (state)\nthis:\n  0 < length ss0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from ss0_lt_ss"], ["proof (chain)\npicking this:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "have \"list_all2 (\\<lambda>x y. x \\<sqsubseteq>\\<^sub>r y) ss0 ss\""], ["proof (prove)\nusing this:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>x. lesub x r) ss0 ss", "by (auto simp add:lesssub_def lesub_def list_all2_def Listn.le_def)"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>x. lesub x r) ss0 ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  list_all2 (\\<lambda>x. lesub x r) ss0 ss", "have lt1: \"\\<forall>p<length ss0. ss0 !p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss!p\""], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>x. lesub x r) ss0 ss\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p", "by (auto simp add: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have  \"\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\" \n                and ass1: \"\\<forall>p<n. sorted (rev ( (ss ! p))) \\<and>\n                                (ss!p \\<noteq> rev [0..<n] \\<longrightarrow> (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n                                (ss!p = rev [0..<n] \\<longrightarrow>  (\\<exists>x\\<in> set w. (x,p)\\<in> g_E G \\<and> x < p)) \\<and>\n                                (p \\<notin> set w \\<longrightarrow> stable r step ss p)\" \n                and sorted_w: \"sorted w\" \n                and len_ss: \"length ss = n\" \n                and w_lt_n: \"\\<forall>x\\<in>set w. x < n  \""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A &&&\n     \\<forall>p<n.\n        Sorted_Less.sorted (rev (ss ! p)) \\<and>\n        (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n        (ss ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w \\<longrightarrow> stable r step ss p)) &&&\n    Sorted_Less.sorted w &&& length ss = n &&& \\<forall>x\\<in>set w. x < n", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n", "have ss_inA: \"ss \\<in> list n A\" and set_ss: \"set ss \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set ss. \\<tau> \\<in> A\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  Sorted_Less.sorted w\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A &&& set ss \\<subseteq> A", "by (auto intro:listI)"], ["proof (state)\nthis:\n  ss \\<in> list n A\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  ss \\<in> list n A\n  set ss \\<subseteq> A", "have ss_nth_inA: \"\\<forall>i<length ss. ss!i \\<in> A\""], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ss. ss ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<in> A", "have ss_p_subset: \"\\<forall>p< length ss. set (ss!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes", "have ss_hdw_nodes: \"set ?ss_hdw \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (ss ! hd w) \\<subseteq> set nodes", "using w_lt_n w_n_nil len_ss"], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. set (ss ! p) \\<subseteq> set nodes\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n  length ss = n\n\ngoal (1 subgoal):\n 1. set (ss ! hd w) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (ss ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "let ?qs = \"step (hd w) ?ss_hdw\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n", "have hd_w_lt_n: \"hd w < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. hd w < n", "using w_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w < n", "by auto"], ["proof (state)\nthis:\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  hd w < n", "have dist: \"distinct (map fst ?qs)\""], ["proof (prove)\nusing this:\n  hd w < n\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd w) (ss ! hd w)))", "using distinct_p"], ["proof (prove)\nusing this:\n  hd w < n\n  ?p < n \\<longrightarrow> distinct (map fst (step ?p (?ss ! ?p)))\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd w) (ss ! hd w)))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from ss_nth_inA"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<in> A", "have ss_hdw_inA: \"?ss_hdw \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. ss ! hd w \\<in> A", "using w_lt_n w_n_nil len_ss"], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n  length ss = n\n\ngoal (1 subgoal):\n 1. ss ! hd w \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from ass1"], ["proof (chain)\npicking this:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)", "have sorted_ss_hdw: \"sorted (rev ?ss_hdw)\""], ["proof (prove)\nusing this:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! hd w))", "using w_lt_n w_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>p<n.\n     Sorted_Less.sorted (rev (ss ! p)) \\<and>\n     (ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n      (\\<forall>x\\<in>set (ss ! p). x < p)) \\<and>\n     (ss ! p = rev [0..<n] \\<longrightarrow>\n      (\\<exists>x\\<in>set w. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n     (p \\<notin> set w \\<longrightarrow> stable r step ss p)\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! hd w))", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ss ! hd w))", "have \"\\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)", "by (auto simp add:succ_in_G)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)", "have hd_w_suc_lt_n: \"\\<forall>q\\<in>succs (hd w). q < n\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>succs (hd w). q < n", "using n_def verts_set nodes_def"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>succs (hd w). q \\<in> set (g_V G)\n  n \\<equiv> length nodes\n  set (g_V G) = {0..<length (g_V G)}\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>succs (hd w). q < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>q\\<in>succs (hd w). q < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "have hdw_in_nodes:\"hd w \\<in> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd w \\<in> set (g_V G)", "using verts_set n_def nodes_def w_lt_n w_n_nil"], ["proof (prove)\nusing this:\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  hd w \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  hd w \\<in> set (g_V G)", "have fin_succ_hd_w: \"finite (succs (hd w))\""], ["proof (prove)\nusing this:\n  hd w \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs (hd w))", "using fin_succs"], ["proof (prove)\nusing this:\n  hd w \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs (hd w))", "by auto"], ["proof (state)\nthis:\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from sorted_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have sorted_tl_w': \"sorted (tl w)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl w)", "using w_n_nil"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl w)", "by (induct w) auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from wf_ss_w w_n_nil"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  w \\<noteq> []", "have ss_hd_w_neq_all: \"?ss_hdw \\<noteq> (rev [0..<n])\" \n                        and sorted_hd_w_ss: \"sorted (rev (hd w # ?ss_hdw))\"\n                        and hdb_subset_nodes: \"set (hd w # ?ss_hdw) \\<subseteq> set nodes\"\n                        and hd_w_ss_in_A: \" (hd w # ?ss_hdw) \\<in> A\" \n                        and step_pres_bounded: \" \\<forall>(q, \\<tau>)\\<in>set (step (hd w) ?ss_hdw). q < length ss \\<and> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. (ss ! hd w \\<noteq> rev [0..<n] &&&\n     Sorted_Less.sorted (rev (hd w # ss ! hd w))) &&&\n    set (hd w # ss ! hd w) \\<subseteq> set nodes &&&\n    hd w # ss ! hd w \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> \\<tau> \\<in> A", "using propa_dom_invariant_auxi"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n  \\<lbrakk>wf_dom ?a ?b; ?b \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?a ! hd ?b \\<noteq> rev [0..<n] \\<and>\n                    Sorted_Less.sorted (rev (hd ?b # ?a ! hd ?b)) \\<and>\n                    set (hd ?b # ?a ! hd ?b) \\<subseteq> set nodes \\<and>\n                    hd ?b # ?a ! hd ?b \\<in> A \\<and>\n                    (\\<forall>(q, \\<tau>)\n                              \\<in>set (step (hd ?b) (?a ! hd ?b)).\n                        q < length ?a \\<and> \\<tau> \\<in> A)\n\ngoal (1 subgoal):\n 1. (ss ! hd w \\<noteq> rev [0..<n] &&&\n     Sorted_Less.sorted (rev (hd w # ss ! hd w))) &&&\n    set (hd w # ss ! hd w) \\<subseteq> set nodes &&&\n    hd w # ss ! hd w \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! hd w \\<noteq> rev [0..<n]\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  hd w # ss ! hd w \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from ss_hd_w_neq_all"], ["proof (chain)\npicking this:\n  ss ! hd w \\<noteq> rev [0..<n]", "have ss_lt_hd_w: \"\\<forall>x\\<in>set ?ss_hdw. x < hd w\""], ["proof (prove)\nusing this:\n  ss ! hd w \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "using hd_w_lt_n wf_ss_w"], ["proof (prove)\nusing this:\n  ss ! hd w \\<noteq> rev [0..<n]\n  hd w < n\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! hd w). x < hd w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from wf_ss_w w_n_nil propa"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  w \\<noteq> []\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)", "have wf_ssa_wa: \"wf_dom ssa wa\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n\ngoal (1 subgoal):\n 1. wf_dom ssa wa", "using propa_dom_invariant"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  \\<lbrakk>wf_dom ?ss ?w; ?w \\<noteq> [];\n   propa f (step (hd ?w) (?ss ! hd ?w)) ?ss (tl ?w) = (?ss', ?w')\\<rbrakk>\n  \\<Longrightarrow> wf_dom ?ss' ?w'\n\ngoal (1 subgoal):\n 1. wf_dom ssa wa", "by auto"], ["proof (state)\nthis:\n  wf_dom ssa wa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  wf_dom ssa wa", "have sorted_ssa_p: \"\\<forall>p<n. sorted (rev (ssa!p))\" \n        and len_ssa: \"length ssa = n\" \n        and \"\\<forall>x\\<in> set ssa. x \\<in> A\" \n        and sorted_wa: \"sorted wa\" \n        and len_ssa: \"length ssa = n\" \n        and wa_lt_n: \"\\<forall>x\\<in> set wa. x < n\""], ["proof (prove)\nusing this:\n  wf_dom ssa wa\n\ngoal (1 subgoal):\n 1. (\\<forall>p<n. Sorted_Less.sorted (rev (ssa ! p)) &&&\n     length ssa = n &&& \\<forall>x\\<in>set ssa. x \\<in> A) &&&\n    Sorted_Less.sorted wa &&&\n    length ssa = n &&& \\<forall>x\\<in>set wa. x < n", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>p<n. Sorted_Less.sorted (rev (ssa ! p))\n  length ssa = n\n  \\<forall>x\\<in>set ssa. x \\<in> A\n  Sorted_Less.sorted wa\n  length ssa = n\n  \\<forall>x\\<in>set wa. x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<n. Sorted_Less.sorted (rev (ssa ! p))\n  length ssa = n\n  \\<forall>x\\<in>set ssa. x \\<in> A\n  Sorted_Less.sorted wa\n  length ssa = n\n  \\<forall>x\\<in>set wa. x < n", "have ssa_inA: \"ssa\\<in> list n A\" and set_ssa: \"set ssa \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<forall>p<n. Sorted_Less.sorted (rev (ssa ! p))\n  length ssa = n\n  \\<forall>x\\<in>set ssa. x \\<in> A\n  Sorted_Less.sorted wa\n  length ssa = n\n  \\<forall>x\\<in>set wa. x < n\n\ngoal (1 subgoal):\n 1. ssa \\<in> list n A &&& set ssa \\<subseteq> A", "by (auto intro:listI)"], ["proof (state)\nthis:\n  ssa \\<in> list n A\n  set ssa \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  ssa \\<in> list n A\n  set ssa \\<subseteq> A", "have ssa_nth_inA: \"\\<forall>i<length ssa. ssa!i \\<in> A\""], ["proof (prove)\nusing this:\n  ssa \\<in> list n A\n  set ssa \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ssa. ssa ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ssa. ssa ! i \\<in> A", "have ssa_p_subset: \"\\<forall>p< length ssa. set (ssa!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ssa. set (ssa ! p) \\<subseteq> set nodes", "by (auto simp add:inpow_subset_nodes A_def)"], ["proof (state)\nthis:\n  \\<forall>p<length ssa. set (ssa ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from len_ss0 len_ssa"], ["proof (chain)\npicking this:\n  length ss0 = n\n  length ssa = n", "have len_ss0_ssa: \"length ss0 = length ssa\""], ["proof (prove)\nusing this:\n  length ss0 = n\n  length ssa = n\n\ngoal (1 subgoal):\n 1. length ss0 = length ssa", "by simp"], ["proof (state)\nthis:\n  length ss0 = length ssa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from len_ss0 len_ss"], ["proof (chain)\npicking this:\n  length ss0 = n\n  length ss = n", "have len_ss0_ss:  \"length ss0 = length ss\""], ["proof (prove)\nusing this:\n  length ss0 = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. length ss0 = length ss", "by simp"], ["proof (state)\nthis:\n  length ss0 = length ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "have \"\\<forall>(q, \\<tau>)\\<in>set ?qs. \\<tau> = transf (hd w) (ss!(hd w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       \\<tau> = transf (hd w) (ss ! hd w)", "by (simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = transf (hd w) (ss ! hd w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = transf (hd w) (ss ! hd w)", "have transf_ss_hd_w: \"\\<forall>(q, \\<tau>)\\<in>set ?qs. \\<tau> =  (hd w # ?ss_hdw)\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = transf (hd w) (ss ! hd w)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       \\<tau> = hd w # ss ! hd w", "by (simp add:transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = hd w # ss ! hd w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from set_ss step_pres_bounded sorted_tl_w' len_ss dist"], ["proof (chain)\npicking this:\n  set ss \\<subseteq> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))", "have \"\\<forall>(q, \\<tau>) \\<in> set ?qs. (fst(propa f ?qs ss (tl w)))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\nusing this:\n  set ss \\<subseteq> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n       \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by (auto dest:propa_property1)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "have propa_ss: \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ssa!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       ssa ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by simp"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with transf_ss_hd_w"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = hd w # ss ! hd w\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "have propa_ss1:  \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ssa!q =  (hd w # ?ss_hdw) \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     \\<tau> = hd w # ss ! hd w\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       ssa ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by auto"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from ss_nth_inA step_pres_bounded"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A", "have \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ss!q \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). ss ! q \\<in> A", "using hd_w_suc_lt_n fin_succ_hd_w"], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  \\<forall>q\\<in>succs (hd w). q < n\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). ss ! q \\<in> A", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). ss ! q \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from hd_w_ss_in_A this propa_ss1"], ["proof (chain)\npicking this:\n  hd w # ss ! hd w \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). ss ! q \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "have ss_lt_ssa_q: \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ss!q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa!q\""], ["proof (prove)\nusing this:\n  hd w # ss ! hd w \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)). ss ! q \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q", "by (fastforce dest:Semilat.ub2[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "from step_pres_bounded sorted_tl_w' set_ss len_ss dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))", "have  \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length ss \\<Longrightarrow> (fst(propa f ?qs ss (tl w)))!q = ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n        q < length ss\\<rbrakk>\n       \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) !\n                         q =\n                         ss ! q", "by (auto intro:propa_property2)"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q", "have exec2: \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length ss \\<Longrightarrow> ssa!q = ss!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n        q < length ss\\<rbrakk>\n       \\<Longrightarrow> ssa ! q = ss ! q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> ssa ! ?q = ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "have tran_ss_ssa: \"\\<forall>p<length ss. ss!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa!p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ss \\<Longrightarrow>\n       ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ss \\<Longrightarrow>\n       ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "assume \"p < length ss\""], ["proof (state)\nthis:\n  p < length ss\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ss \\<Longrightarrow>\n       ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "with ssa_nth_inA"], ["proof (chain)\npicking this:\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n  p < length ss", "have ssa_p_inA: \"ssa!p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n  p < length ss\n\ngoal (1 subgoal):\n 1. ssa ! p \\<in> A", "using `length ssa = n` `length ss = n`"], ["proof (prove)\nusing this:\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n  p < length ss\n  length ssa = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. ssa ! p \\<in> A", "by auto"], ["proof (state)\nthis:\n  ssa ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ss \\<Longrightarrow>\n       ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "from ss_nth_inA"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<in> A", "have ss_p_inA: \"ss!p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "using  `length ss = n` `p < length ss`"], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<in> A\n  length ss = n\n  p < length ss\n\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ss \\<Longrightarrow>\n       ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "show \" ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "proof(cases \"p \\<in> succs (hd w)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "case True"], ["proof (state)\nthis:\n  p \\<in> succs (hd w)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "then"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd w)", "show \"ss!p \\<sqsubseteq>\\<^bsub>r\\<^esub>  ssa!p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using ss_lt_ssa_q"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using fin_succ_hd_w"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "case False"], ["proof (state)\nthis:\n  p \\<notin> succs (hd w)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> succs (hd w)", "have \"p \\<notin> set (map fst ?qs)\""], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd w)\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "using fin_succ_hd_w"], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd w)\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using exec2 `p < length ss`"], ["proof (prove)\nusing this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> ssa ! ?q = ss ! ?q\n  p < length ss\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using ssa_p_inA ss_p_inA"], ["proof (prove)\nusing this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> ssa ! ?q = ss ! ?q\n  p < length ss\n  ssa ! p \\<in> A\n  ss ! p \\<in> A\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "by(auto simp add:step_def exec_def intro: Semilat.orderI[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<length ss. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "then"], ["proof (chain)\npicking this:\n  \\<forall>p<length ss. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "have \"\\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\""], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using len_ss0_ss"], ["proof (prove)\nusing this:\n  \\<forall>p<length ss. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n  length ss0 = length ss\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "by auto"], ["proof (state)\nthis:\n  \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with lt1"], ["proof (chain)\npicking this:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n  \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "have \"\\<forall>p<length ss0. ss0!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa!p\""], ["proof (prove)\nusing this:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n  \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using ss0_nth_inA ssa_nth_inA  ss_nth_inA"], ["proof (prove)\nusing this:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n  \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n  \\<forall>i<length ss0. ss0 ! i \\<in> A\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n  \\<forall>i<length ss. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using len_ss0_ss len_ss0_ssa"], ["proof (prove)\nusing this:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n  \\<forall>p<length ss0. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n  \\<forall>i<length ss0. ss0 ! i \\<in> A\n  \\<forall>i<length ssa. ssa ! i \\<in> A\n  \\<forall>i<length ss. ss ! i \\<in> A\n  length ss0 = length ss\n  length ss0 = length ssa\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "by (auto intro: order_trans Semilat.orderI[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with len_ss0_ssa"], ["proof (chain)\npicking this:\n  length ss0 = length ssa\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "have g1: \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa\""], ["proof (prove)\nusing this:\n  length ss0 = length ssa\n  \\<forall>p<length ss0. ss0 ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (1 subgoal):\n 1. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa", "by (auto simp only:Listn.le_def lesssub_def lesub_def intro:list_all2_all_nthI)"], ["proof (state)\nthis:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "have \"(\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p) \\<longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ts\\<in>list n A.\n       ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n       (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n       ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "fix ts"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "assume ts_inA: \"ts \\<in> list n A\" and ass: \"ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and> (\\<forall>p<n. stable r step ts p)\""], ["proof (state)\nthis:\n  ts \\<in> list n A\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n  (\\<forall>p<n. stable r step ts p)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "let ?ts_hdw = \"ts!(hd w)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "from ts_inA sta ass"], ["proof (chain)\npicking this:\n  ts \\<in> list n A\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n  (\\<forall>p<n. stable r step ts p)", "have ss_ts: \"ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\" and sta_ts: \"(\\<forall>p<n. stable r step ts p)\""], ["proof (prove)\nusing this:\n  ts \\<in> list n A\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n  (\\<forall>p<n. stable r step ts p)\n\ngoal (1 subgoal):\n 1. ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts &&&\n    \\<forall>p<n. stable r step ts p", "by auto"], ["proof (state)\nthis:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  \\<forall>p<n. stable r step ts p\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  \\<forall>p<n. stable r step ts p", "have len_ss_ts: \"length ss = length ts\" and \n              ss_ts_hdw: \"?ss_hdw \\<sqsubseteq>\\<^bsub>r\\<^esub> ?ts_hdw \""], ["proof (prove)\nusing this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  \\<forall>p<n. stable r step ts p\n\ngoal (1 subgoal):\n 1. length ss = length ts &&&\n    ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! hd w", "using le_listD len_ss hd_w_lt_n"], ["proof (prove)\nusing this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  \\<forall>p<n. stable r step ts p\n  \\<lbrakk>?xs [\\<sqsubseteq>\\<^bsub>?r\\<^esub>] ?ys;\n   ?p < length ?xs\\<rbrakk>\n  \\<Longrightarrow> ?xs ! ?p \\<sqsubseteq>\\<^bsub>?r\\<^esub> ?ys ! ?p\n  length ss = n\n  hd w < n\n\ngoal (1 subgoal):\n 1. length ss = length ts &&&\n    ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! hd w", "by auto"], ["proof (state)\nthis:\n  length ss = length ts\n  ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! hd w\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  length ss = length ts\n  ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! hd w", "have \"sorted (rev (?ts_hdw)) \\<and> set ?ts_hdw \\<subseteq> set ?ss_hdw \\<or> ?ss_hdw =?ts_hdw \""], ["proof (prove)\nusing this:\n  length ss = length ts\n  ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! hd w)) \\<and>\n    set (ts ! hd w) \\<subseteq> set (ss ! hd w) \\<or>\n    ss ! hd w = ts ! hd w", "by (auto simp add:r_def lesssub_def lesub_def  nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! hd w)) \\<and>\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w) \\<or>\n  ss ! hd w = ts ! hd w\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! hd w)) \\<and>\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w) \\<or>\n  ss ! hd w = ts ! hd w", "have sorted_ts_hdw: \"sorted (rev (?ts_hdw))\" \n          and ts_ss_subset: \"set ?ts_hdw \\<subseteq> set ?ss_hdw\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! hd w)) \\<and>\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w) \\<or>\n  ss ! hd w = ts ! hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! hd w)) &&&\n    set (ts ! hd w) \\<subseteq> set (ss ! hd w)", "using sorted_ss_hdw"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! hd w)) \\<and>\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w) \\<or>\n  ss ! hd w = ts ! hd w\n  Sorted_Less.sorted (rev (ss ! hd w))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! hd w)) &&&\n    set (ts ! hd w) \\<subseteq> set (ss ! hd w)", "by (auto simp add:r_def lesssub_def lesub_def  nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)", "have \"\\<forall>x\\<in> set ?ts_hdw. x < hd w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ts ! hd w). x < hd w", "using ss_lt_hd_w"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n  \\<forall>x\\<in>set (ss ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ts ! hd w). x < hd w", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "with sorted_ts_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w", "have sorted_hd_w_ts: \"sorted (rev (hd w # ?ts_hdw))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! hd w))\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ts ! hd w))", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "with sorted_hd_w_ss ts_ss_subset"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))", "have \"(hd w # ?ss_hdw) \\<sqsubseteq>\\<^bsub>r\\<^esub> (hd w # ?ts_hdw)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> hd w # ts ! hd w", "by (auto simp add:transf_def lesssub_def lesub_def r_def  nodes_le_def)"], ["proof (state)\nthis:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> hd w # ts ! hd w\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> hd w # ts ! hd w", "have transf_ss_ts: \"transf (hd w) ?ss_hdw \\<sqsubseteq>\\<^bsub>r\\<^esub> transf (hd w) ?ts_hdw\""], ["proof (prove)\nusing this:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> hd w # ts ! hd w\n\ngoal (1 subgoal):\n 1. transf (hd w) (ss ! hd w) \n    \\<sqsubseteq>\\<^bsub>r\\<^esub> transf (hd w) (ts ! hd w)", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  transf (hd w) (ss ! hd w) \n  \\<sqsubseteq>\\<^bsub>r\\<^esub> transf (hd w) (ts ! hd w)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "from sta_ts hd_w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>p<n. stable r step ts p\n  hd w < n", "have sta_ts_hdw: \"stable r step ts (hd w)\""], ["proof (prove)\nusing this:\n  \\<forall>p<n. stable r step ts p\n  hd w < n\n\ngoal (1 subgoal):\n 1. stable r step ts (hd w)", "by auto"], ["proof (state)\nthis:\n  stable r step ts (hd w)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "from ss_hdw_nodes ts_ss_subset"], ["proof (chain)\npicking this:\n  set (ss ! hd w) \\<subseteq> set nodes\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)", "have \"set ?ts_hdw \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  set (ss ! hd w) \\<subseteq> set nodes\n  set (ts ! hd w) \\<subseteq> set (ss ! hd w)\n\ngoal (1 subgoal):\n 1. set (ts ! hd w) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (ts ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "with hd_w_lt_n"], ["proof (chain)\npicking this:\n  hd w < n\n  set (ts ! hd w) \\<subseteq> set nodes", "have hdw_ts_subset_nodes: \"set (hd w # ?ts_hdw) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  hd w < n\n  set (ts ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. set (hd w # ts ! hd w) \\<subseteq> set nodes", "using nodes_def n_def verts_set"], ["proof (prove)\nusing this:\n  hd w < n\n  set (ts ! hd w) \\<subseteq> set nodes\n  nodes \\<equiv> g_V G\n  n \\<equiv> length nodes\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. set (hd w # ts ! hd w) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "with sorted_hd_w_ts"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  set (hd w # ts ! hd w) \\<subseteq> set nodes", "have \"(hd w # ?ts_hdw) \\<in> ( (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (fastforce intro: subset_nodes_inpow)"], ["proof (state)\nthis:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have transf_ts_inA: \"(hd w #?ts_hdw) \\<in> A\""], ["proof (prove)\nusing this:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w \\<in> A", "by (simp add:A_def)"], ["proof (state)\nthis:\n  hd w # ts ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "then"], ["proof (chain)\npicking this:\n  hd w # ts ! hd w \\<in> A", "have sorted_hdw_ts_hdw:  \"sorted (rev (hd w # ?ts_hdw))\""], ["proof (prove)\nusing this:\n  hd w # ts ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd w # ts ! hd w))", "by (rule inA_is_sorted)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "have \"\\<forall>p<length ssa. ssa!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<length ssa. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ssa \\<Longrightarrow>\n       ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ssa \\<Longrightarrow>\n       ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "assume p_lt_len_ssa: \"p < length ssa\""], ["proof (state)\nthis:\n  p < length ssa\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ssa \\<Longrightarrow>\n       ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  p < length ssa", "have \"p < length ss\" and \"p < n\""], ["proof (prove)\nusing this:\n  p < length ssa\n\ngoal (1 subgoal):\n 1. p < length ss &&& p < n", "using len_ssa len_ss"], ["proof (prove)\nusing this:\n  p < length ssa\n  length ssa = n\n  length ss = n\n\ngoal (1 subgoal):\n 1. p < length ss &&& p < n", "by auto"], ["proof (state)\nthis:\n  p < length ss\n  p < n\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ssa \\<Longrightarrow>\n       ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with ss_ts"], ["proof (chain)\npicking this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  p < length ss\n  p < n", "have ss_ts_p: \"ss!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p \""], ["proof (prove)\nusing this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  p < length ss\n  p < n\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "using le_listD"], ["proof (prove)\nusing this:\n  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n  p < length ss\n  p < n\n  \\<lbrakk>?xs [\\<sqsubseteq>\\<^bsub>?r\\<^esub>] ?ys;\n   ?p < length ?xs\\<rbrakk>\n  \\<Longrightarrow> ?xs ! ?p \\<sqsubseteq>\\<^bsub>?r\\<^esub> ?ys ! ?p\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p < length ssa \\<Longrightarrow>\n       ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "show \"ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "proof(cases \"p \\<in> succs (hd w)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "case True"], ["proof (state)\nthis:\n  p \\<in> succs (hd w)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "note p_in_succs_hdw = this"], ["proof (state)\nthis:\n  p \\<in> succs (hd w)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd w)", "have \"ss!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa!p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using ss_lt_ssa_q"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "using fin_succ_hd_w"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss ! q \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! q\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ssa ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "from p_in_succs_hdw"], ["proof (chain)\npicking this:\n  p \\<in> succs (hd w)", "have ssa_p: \"ssa!p = transf (hd w) (ss!hd w) \\<squnion>\\<^bsub>f\\<^esub>ss!p\""], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n\ngoal (1 subgoal):\n 1. ssa ! p = transf (hd w) (ss ! hd w) \\<squnion>\\<^bsub>f\\<^esub> ss ! p", "using propa_ss fin_succ_hd_w"], ["proof (prove)\nusing this:\n  p \\<in> succs (hd w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ssa ! q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. ssa ! p = transf (hd w) (ss ! hd w) \\<squnion>\\<^bsub>f\\<^esub> ss ! p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ssa ! p = transf (hd w) (ss ! hd w) \\<squnion>\\<^bsub>f\\<^esub> ss ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "from sta_ts_hdw"], ["proof (chain)\npicking this:\n  stable r step ts (hd w)", "have transf_hdw_ts_hdw: \"transf (hd w) (ts!hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p\""], ["proof (prove)\nusing this:\n  stable r step ts (hd w)\n\ngoal (1 subgoal):\n 1. transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "using p_in_succs_hdw fin_succ_hd_w"], ["proof (prove)\nusing this:\n  stable r step ts (hd w)\n  p \\<in> succs (hd w)\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by (auto simp add:step_def exec_def stable_def)"], ["proof (state)\nthis:\n  transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "have ts_p_subset: \"(hd w # ?ts_hdw) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts!p\""], ["proof (prove)\nusing this:\n  transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  hd w # ts ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  hd w # ts ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "have \"(sorted (rev (ts!p)) \\<and> set (ts!p)\\<subseteq> set (hd w # ?ts_hdw)\\<and> sorted (rev (hd w # ?ts_hdw))) \\<or> \n                   hd w # ?ts_hdw = ts!p\""], ["proof (prove)\nusing this:\n  hd w # ts ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n    Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<or>\n    hd w # ts ! hd w = ts ! p", "by (auto simp add:r_def lesssub_def lesub_def nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<or>\n  hd w # ts ! hd w = ts ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<or>\n  hd w # ts ! hd w = ts ! p", "have \"sorted (rev (ts!p)) \\<and> set (ts!p)\\<subseteq> set (hd w # ?ts_hdw)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<or>\n  hd w # ts ! hd w = ts ! p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n    Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n 2. hd w # ts ! hd w = ts ! p \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "assume \"sorted (rev (ts ! p)) \\<and> set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and> sorted (rev (hd w # ts ! hd w))\""], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (2 subgoals):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n    Sorted_Less.sorted (rev (hd w # ts ! hd w)) \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n 2. hd w # ts ! hd w = ts ! p \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w) \\<and>\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w = ts ! p \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. hd w # ts ! hd w = ts ! p \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "assume \" hd w # ts ! hd w = ts ! p\""], ["proof (state)\nthis:\n  hd w # ts ! hd w = ts ! p\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w = ts ! p \\<Longrightarrow>\n    Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "with sorted_hdw_ts_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  hd w # ts ! hd w = ts ! p", "show ?thesis"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  hd w # ts ! hd w = ts ! p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! p)) \\<and>\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "have sorted_ts_p: \"sorted (rev (ts!p))\" \n              and ts_as_subset: \"set (ts!p)\\<subseteq> set (hd w # ?ts_hdw)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! p)) \\<and>\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ts ! p)) &&&\n    set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ts ! p))\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with hdw_ts_subset_nodes"], ["proof (chain)\npicking this:\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (ts ! p))\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)", "have \"set (ts!p) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (ts ! p))\n  set (ts ! p) \\<subseteq> set (hd w # ts ! hd w)\n\ngoal (1 subgoal):\n 1. set (ts ! p) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (ts ! p) \\<subseteq> set nodes\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with sorted_ts_p"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (ts ! p))\n  set (ts ! p) \\<subseteq> set nodes", "have \"(ts!p) \\<in> ( (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (ts ! p))\n  set (ts ! p) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. ts ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (fastforce intro: subset_nodes_inpow)"], ["proof (state)\nthis:\n  ts ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  ts ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have ts_p_inA: \"ts!p \\<in> A\""], ["proof (prove)\nusing this:\n  ts ! p \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. ts ! p \\<in> A", "by (simp add:A_def)"], ["proof (state)\nthis:\n  ts ! p \\<in> A\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "from sorted_hdw_ts_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))", "have \"\\<forall>x\\<in> set ?ts_hdw. x < hd w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ts ! hd w). x < hd w", "by (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with `hd w < n`"], ["proof (chain)\npicking this:\n  hd w < n\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w", "have \"\\<forall>x\\<in> set ?ts_hdw. x < n\""], ["proof (prove)\nusing this:\n  hd w < n\n  \\<forall>x\\<in>set (ts ! hd w). x < hd w\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ts ! hd w). x < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ts ! hd w). x < n\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (ts ! hd w). x < n", "have \"set(hd w # ?ts_hdw) \\<subseteq> set nodes\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (ts ! hd w). x < n\n\ngoal (1 subgoal):\n 1. set (hd w # ts ! hd w) \\<subseteq> set nodes", "using `hd w < n` n_def verts_set nodes_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (ts ! hd w). x < n\n  hd w < n\n  n \\<equiv> length nodes\n  set (g_V G) = {0..<length (g_V G)}\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. set (hd w # ts ! hd w) \\<subseteq> set nodes", "by auto"], ["proof (state)\nthis:\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with sorted_hdw_ts_hdw"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  set (hd w # ts ! hd w) \\<subseteq> set nodes", "have \"hd w # ?ts_hdw  \\<in> ( (rev \\<circ> sorted_list_of_set) ` (Pow (set nodes)))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ts ! hd w))\n  set (hd w # ts ! hd w) \\<subseteq> set nodes\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w\n    \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "by (fastforce intro: subset_nodes_inpow)"], ["proof (state)\nthis:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)", "have \"(hd w # ?ts_hdw) \\<in> A\""], ["proof (prove)\nusing this:\n  hd w # ts ! hd w \\<in> (rev \\<circ> sorted_list_of_set) ` Pow (set nodes)\n\ngoal (1 subgoal):\n 1. hd w # ts ! hd w \\<in> A", "by (auto simp add:A_def)"], ["proof (state)\nthis:\n  hd w # ts ! hd w \\<in> A\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  hd w # ts ! hd w \\<in> A", "have trans_hdw_ts_inA: \"transf (hd w) (ts!hd w) \\<in> A\""], ["proof (prove)\nusing this:\n  hd w # ts ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. transf (hd w) (ts ! hd w) \\<in> A", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  transf (hd w) (ts ! hd w) \\<in> A\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "have transf_hdw_ss_inA: \"transf (hd w) ?ss_hdw \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transf (hd w) (ss ! hd w) \\<in> A", "using hd_w_ss_in_A"], ["proof (prove)\nusing this:\n  hd w # ss ! hd w \\<in> A\n\ngoal (1 subgoal):\n 1. transf (hd w) (ss ! hd w) \\<in> A", "by (auto simp add:transf_def)"], ["proof (state)\nthis:\n  transf (hd w) (ss ! hd w) \\<in> A\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "have ss_p_inA: \"ss!p \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "using `p<length ss` ss_inA"], ["proof (prove)\nusing this:\n  p < length ss\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. ss ! p \\<in> A", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<in> A\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "from transf_ss_ts  transf_hdw_ts_hdw transf_hdw_ss_inA trans_hdw_ts_inA  ts_p_inA"], ["proof (chain)\npicking this:\n  transf (hd w) (ss ! hd w) \n  \\<sqsubseteq>\\<^bsub>r\\<^esub> transf (hd w) (ts ! hd w)\n  transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  transf (hd w) (ss ! hd w) \\<in> A\n  transf (hd w) (ts ! hd w) \\<in> A\n  ts ! p \\<in> A", "have \"transf (hd w) ?ss_hdw \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\""], ["proof (prove)\nusing this:\n  transf (hd w) (ss ! hd w) \n  \\<sqsubseteq>\\<^bsub>r\\<^esub> transf (hd w) (ts ! hd w)\n  transf (hd w) (ts ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  transf (hd w) (ss ! hd w) \\<in> A\n  transf (hd w) (ts ! hd w) \\<in> A\n  ts ! p \\<in> A\n\ngoal (1 subgoal):\n 1. transf (hd w) (ss ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by (auto intro: order_trans  Semilat.orderI[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  transf (hd w) (ss ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (2 subgoals):\n 1. p \\<in> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n 2. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with `ss!p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p` trans_hdw_ts_inA ss_p_inA transf_hdw_ss_inA ssa_p ts_p_inA"], ["proof (chain)\npicking this:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  transf (hd w) (ts ! hd w) \\<in> A\n  ss ! p \\<in> A\n  transf (hd w) (ss ! hd w) \\<in> A\n  ssa ! p = transf (hd w) (ss ! hd w) \\<squnion>\\<^bsub>f\\<^esub> ss ! p\n  ts ! p \\<in> A\n  transf (hd w) (ss ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "show \"ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\""], ["proof (prove)\nusing this:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  transf (hd w) (ts ! hd w) \\<in> A\n  ss ! p \\<in> A\n  transf (hd w) (ss ! hd w) \\<in> A\n  ssa ! p = transf (hd w) (ss ! hd w) \\<squnion>\\<^bsub>f\\<^esub> ss ! p\n  ts ! p \\<in> A\n  transf (hd w) (ss ! hd w) \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by (auto intro: Semilat.lub[OF Semilat.intro, OF is_semi])"], ["proof (state)\nthis:\n  ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "case False"], ["proof (state)\nthis:\n  p \\<notin> succs (hd w)\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> succs (hd w)", "have \"p \\<notin> set (map fst ?qs)\""], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd w)\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "using fin_succ_hd_w"], ["proof (prove)\nusing this:\n  p \\<notin> succs (hd w)\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "then"], ["proof (chain)\npicking this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "have \"ssa!p = ss!p\""], ["proof (prove)\nusing this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. ssa ! p = ss ! p", "using exec2 p_lt_len_ssa len_ss len_ssa"], ["proof (prove)\nusing this:\n  p \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> ssa ! ?q = ss ! ?q\n  p < length ssa\n  length ss = n\n  length ssa = n\n\ngoal (1 subgoal):\n 1. ssa ! p = ss ! p", "by(auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ssa ! p = ss ! p\n\ngoal (1 subgoal):\n 1. p \\<notin> succs (hd w) \\<Longrightarrow>\n    ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "with ss_ts_p"], ["proof (chain)\npicking this:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  ssa ! p = ss ! p", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n  ssa ! p = ss ! p\n\ngoal (1 subgoal):\n 1. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "by auto"], ["proof (state)\nthis:\n  ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<length ssa. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>ts \\<in> list n A;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p)\\<rbrakk>\n       \\<Longrightarrow> ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "with `length ss = length ts` len_ss len_ssa"], ["proof (chain)\npicking this:\n  length ss = length ts\n  length ss = n\n  length ssa = n\n  \\<forall>p<length ssa. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p", "show \"ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\""], ["proof (prove)\nusing this:\n  length ss = length ts\n  length ss = n\n  length ssa = n\n  \\<forall>p<length ssa. ssa ! p \\<sqsubseteq>\\<^bsub>r\\<^esub> ts ! p\n\ngoal (1 subgoal):\n 1. ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "by (auto simp only:Listn.le_def lesssub_def lesub_def intro:list_all2_all_nthI)"], ["proof (state)\nthis:\n  ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_dom ss0 w0; w \\<noteq> [];\n     propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ssa, wa); wf_dom ss w;\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss;\n     \\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n    \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n                      (\\<forall>ts\\<in>list n A.\n                          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                          (\\<forall>p<n.\n                              stable r step ts p) \\<longrightarrow>\n                          ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "with g1"], ["proof (chain)\npicking this:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts", "show ?thesis"], ["proof (prove)\nusing this:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa\n  \\<forall>ts\\<in>list n A.\n     ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n     (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n     ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n\ngoal (1 subgoal):\n 1. ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n        ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "by auto"], ["proof (state)\nthis:\n  ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ssa \\<and>\n  (\\<forall>ts\\<in>list n A.\n      ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n      ssa [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_list_nA_refl: \"ss \\<in> list n A  \\<Longrightarrow>  ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow>\n    ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "apply (unfold Listn.le_def lesssub_def lesub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "assume \"ss \\<in> list n A\""], ["proof (state)\nthis:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "then"], ["proof (chain)\npicking this:\n  ss \\<in> list n A", "have \"set ss \\<subseteq> A\" and \"length ss = n\""], ["proof (prove)\nusing this:\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> A &&& length ss = n", "by auto"], ["proof (state)\nthis:\n  set ss \\<subseteq> A\n  length ss = n\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "then"], ["proof (chain)\npicking this:\n  set ss \\<subseteq> A\n  length ss = n", "have \"\\<forall>i<n. ss!i \\<in> A\""], ["proof (prove)\nusing this:\n  set ss \\<subseteq> A\n  length ss = n\n\ngoal (1 subgoal):\n 1. \\<forall>i<n. ss ! i \\<in> A", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<n. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<n. ss ! i \\<in> A", "have \"\\<forall>i<length ss. ss!i \\<sqsubseteq>\\<^bsub>r\\<^esub> ss!i\""], ["proof (prove)\nusing this:\n  \\<forall>i<n. ss ! i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ss. ss ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i", "by (auto simp add:r_def lesssub_def lesub_def nodes_le_def )"], ["proof (state)\nthis:\n  \\<forall>i<length ss. ss ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i\n\ngoal (1 subgoal):\n 1. ss \\<in> list n A \\<Longrightarrow> list_all2 r ss ss", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ss. ss ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i", "show \" list_all2 r ss ss\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ss. ss ! i \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i\n\ngoal (1 subgoal):\n 1. list_all2 r ss ss", "by (auto simp add:lesssub_def lesub_def intro: list_all2_all_nthI)"], ["proof (state)\nthis:\n  list_all2 r ss ss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_dom: \n assumes \"wf_dom ss0 w0\"\n shows \"iter f step ss0 w0 = (ss',w') \\<longrightarrow> \n        wf_dom ss' w' \\<and> \n        stables r step ss' \\<and> \n        ss0 [\\<sqsubseteq>\\<^sub>r] ss' \\<and>\n        (\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> ss' [\\<sqsubseteq>\\<^sub>r] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step ss0 w0 = (ss', w') \\<longrightarrow>\n    wf_dom ss' w' \\<and>\n    stables r step ss' \\<and>\n    ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        stables r step ts \\<longrightarrow>\n        ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "using assms"], ["proof (prove)\nusing this:\n  wf_dom ss0 w0\n\ngoal (1 subgoal):\n 1. iter f step ss0 w0 = (ss', w') \\<longrightarrow>\n    wf_dom ss' w' \\<and>\n    stables r step ss' \\<and>\n    ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        stables r step ts \\<longrightarrow>\n        ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply (unfold iter_def stables_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_dom ss0 w0 \\<Longrightarrow>\n    while (\\<lambda>(\\<tau>s, w). w \\<noteq> [])\n     (\\<lambda>(\\<tau>s, w).\n         let p = hd w in propa f (step p (\\<tau>s ! p)) \\<tau>s (tl w))\n     (ss0, w0) =\n    (ss', w') \\<longrightarrow>\n    wf_dom ss' w' \\<and>\n    (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n    ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n    (\\<forall>ts\\<in>list n A.\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        (\\<forall>p<length ts. stable r step ts p) \\<longrightarrow>\n        ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "apply (rule_tac P = \"\\<lambda>(ss,w). wf_dom ss w \\<and> ss0 [\\<sqsubseteq>\\<^sub>r] ss \\<and> (\\<forall>ts\\<in>list n A. ss0 [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> ss [\\<sqsubseteq>\\<^sub>r] ts)\" \n              and r =  \"{(ss',ss). ss [\\<sqsubset>\\<^sub>r] ss'} <*lex*> (\\<lambda>(x,y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\"  \n         in while_rule)\n\n  \\<comment> \\<open>Invariant holds initially:\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. wf_dom ss0 w0 \\<Longrightarrow>\n    case (ss0, w0) of\n    (ss, w) \\<Rightarrow>\n      wf_dom ss w \\<and>\n      ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n      (\\<forall>ts\\<in>list n A.\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n          stables r step ts \\<longrightarrow>\n          ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           wf_dom ss w \\<and>\n                           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                           (\\<forall>ts\\<in>list n A.\n                               ss0 \n                               [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                               stables r step ts \\<longrightarrow>\n                               ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 4. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 5. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(fastforce simp add: wf_dom_def intro:wf_dom_le)\n  \n  \\<comment> \\<open>Invariant is preserved:\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           wf_dom ss w \\<and>\n                           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                           (\\<forall>ts\\<in>list n A.\n                               ss0 \n                               [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                               stables r step ts \\<longrightarrow>\n                               ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           stables r step ts \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> wf_dom ss w \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             stables r step ts \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           stables r step ts \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> wf_dom ss w\n 2. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           stables r step ts \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             stables r step ts \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 4. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 5. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(fastforce dest:propa_dom_invariant)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           stables r step ts \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             stables r step ts \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(simp add:stables_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<n.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (rule propa_dom_invariant_aux2)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> wf_dom ss0 (?w0.124 a b ss w)\n 2. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ?w124 a b ss w \\<noteq> []\n 3. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> propa f\n                          (step (hd (?w124 a b ss w))\n                            (?ss124 a b ss w ! hd (?w124 a b ss w)))\n                          (?ss124 a b ss w) (tl (?w124 a b ss w)) =\n                         (ss, ?wa124 a b ss w)\n 4. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> wf_dom (?ss124 a b ss w) (?w124 a b ss w)\n 5. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> ss0 \n                         [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss124 a b ss w\n 6. \\<And>a b ss w.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> [];\n        propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ts\\<in>list n A.\n                            ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                            (\\<forall>p<n.\n                                stable r step ts p) \\<longrightarrow>\n                            ?ss124 a b ss w \n                            [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\n 7. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 8. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 9. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply assumption+\n\n  \\<comment> \\<open>Postcondition holds upon termination:\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         wf_dom ss' w' \\<and>\n                         (\\<forall>p<length ss'. stable r step ss' p) \\<and>\n                         ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n                         (\\<forall>ts\\<in>list n A.\n                             ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n                             (\\<forall>p<length ts.\n                                 stable r step ts p) \\<longrightarrow>\n                             ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n 2. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(clarsimp simp add: stables_def split_paired_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>wf_dom ss0 w0; wf_dom ss' [];\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss';\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        w' = []; p < length ss0\\<rbrakk>\n       \\<Longrightarrow> stable r step ss' p\n 2. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 3. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(subgoal_tac \"length ss0 = n\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>wf_dom ss0 w0; wf_dom ss' [];\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss';\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        w' = []; p < length ss0; length ss0 = n\\<rbrakk>\n       \\<Longrightarrow> stable r step ss' p\n 2. \\<And>p.\n       \\<lbrakk>wf_dom ss0 w0; wf_dom ss' [];\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss';\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           (\\<forall>p<n. stable r step ts p) \\<longrightarrow>\n           ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts;\n        w' = []; p < length ss0\\<rbrakk>\n       \\<Longrightarrow> length ss0 = n\n 3. wf_dom ss0 w0 \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 4. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(simp add:wf_dom_def)+\n\n  \\<comment> \\<open>Well-foundedness of the termination relation:\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A) \\<and>\n    (\\<forall>p<n.\n        Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n        (ss0 ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n        (ss0 ! p = rev [0..<n] \\<longrightarrow>\n         (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p)) \\<and>\n    Sorted_Less.sorted w0 \\<and>\n    length ss0 = n \\<and> (\\<forall>x\\<in>set w0. x < n) \\<Longrightarrow>\n    wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n        (\\<lambda>x.\n            case x of\n            (x, y) \\<Rightarrow>\n              (sorted_list_of_set x, sorted_list_of_set y)) `\n        finite_psubset)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>\\<tau>\\<in>set ss0. \\<tau> \\<in> A;\n     \\<forall>p<length ss0.\n        Sorted_Less.sorted (rev (ss0 ! p)) \\<and>\n        (ss0 ! p \\<noteq> rev [0..<length ss0] \\<longrightarrow>\n         (\\<forall>x\\<in>set (ss0 ! p). x < p)) \\<and>\n        (ss0 ! p = rev [0..<length ss0] \\<longrightarrow>\n         (\\<exists>x\\<in>set w0. (x, p) \\<in> g_E G \\<and> x < p)) \\<and>\n        (p \\<notin> set w0 \\<longrightarrow> stable r step ss0 p);\n     Sorted_Less.sorted w0; \\<forall>x\\<in>set w0. x < length ss0;\n     n = length ss0\\<rbrakk>\n    \\<Longrightarrow> wf ({(ss', ss).\n                           ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                          (\\<lambda>x.\n                              case x of\n                              (x, y) \\<Rightarrow>\n                                (sorted_list_of_set x,\n                                 sorted_list_of_set y)) `\n                          finite_psubset)\n 2. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply(simp add:wf_listn_termination_rel)\n\n  \\<comment> \\<open>Loop decreases along termination relation:\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>wf_dom ss0 w0;\n        case s of\n        (ss, w) \\<Rightarrow>\n          wf_dom ss w \\<and>\n          ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss \\<and>\n          (\\<forall>ts\\<in>list n A.\n              ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n              stables r step ts \\<longrightarrow>\n              ss [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_dom ss0 w0; b \\<noteq> []; wf_dom a b;\n        ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] a;\n        \\<forall>ts\\<in>list n A.\n           ss0 [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n           stables r step ts \\<longrightarrow>\n           a [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts\\<rbrakk>\n       \\<Longrightarrow> (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>x.\n                                   case x of\n                                   (x, y) \\<Rightarrow>\n                                     (sorted_list_of_set x,\nsorted_list_of_set y)) `\n                               finite_psubset", "apply (fastforce intro:propa_termination)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wf_start: \"wf_dom start (unstables r step start)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "let ?w0 = \"unstables r step start\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "have sorted_w: \"sorted ?w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (unstables r step start)", "using unstables_def"], ["proof (prove)\nusing this:\n  unstables ?r ?step ?\\<tau>s =\n  sorted_list_of_set\n   {p. p < length ?\\<tau>s \\<and> \\<not> stable ?r ?step ?\\<tau>s p}\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (unstables r step start)", "by (simp add:sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (unstables r step start)\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "have w0_lt_n: \"\\<forall>x\\<in>set ?w0. x < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (unstables r step start). x < n", "using unstables_def len_start_is_n"], ["proof (prove)\nusing this:\n  unstables ?r ?step ?\\<tau>s =\n  sorted_list_of_set\n   {p. p < length ?\\<tau>s \\<and> \\<not> stable ?r ?step ?\\<tau>s p}\n  length start = n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (unstables r step start). x < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (unstables r step start). x < n\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "have neq_all: \"\\<forall>p < n. start!p \\<noteq> rev [0..< n] \\<longrightarrow> (\\<forall>x\\<in>set (start!p). x < p) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       start ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n       (\\<forall>x\\<in>set (start ! p). x < p)", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>p < n; start ! p \\<noteq> rev [0..<n];\n        x \\<in> set (start ! p)\\<rbrakk>\n       \\<Longrightarrow> x < p", "fix p x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>p < n; start ! p \\<noteq> rev [0..<n];\n        x \\<in> set (start ! p)\\<rbrakk>\n       \\<Longrightarrow> x < p", "assume p_lt_n: \"p < n\" and p_neq_all: \"start ! p \\<noteq> rev [0..< n]\" and x_in: \"x \\<in> set (start ! p)\""], ["proof (state)\nthis:\n  p < n\n  start ! p \\<noteq> rev [0..<n]\n  x \\<in> set (start ! p)\n\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>p < n; start ! p \\<noteq> rev [0..<n];\n        x \\<in> set (start ! p)\\<rbrakk>\n       \\<Longrightarrow> x < p", "then"], ["proof (chain)\npicking this:\n  p < n\n  start ! p \\<noteq> rev [0..<n]\n  x \\<in> set (start ! p)", "have \"p = 0\""], ["proof (prove)\nusing this:\n  p < n\n  start ! p \\<noteq> rev [0..<n]\n  x \\<in> set (start ! p)\n\ngoal (1 subgoal):\n 1. p = 0", "using start_nth_lt0_all len_start_is_n"], ["proof (prove)\nusing this:\n  p < n\n  start ! p \\<noteq> rev [0..<n]\n  x \\<in> set (start ! p)\n  \\<forall>p\\<in>{1..<length start}. start ! p = rev [0..<n]\n  length start = n\n\ngoal (1 subgoal):\n 1. p = 0", "by auto"], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>p < n; start ! p \\<noteq> rev [0..<n];\n        x \\<in> set (start ! p)\\<rbrakk>\n       \\<Longrightarrow> x < p", "with start_nth0_empty"], ["proof (chain)\npicking this:\n  start ! 0 = []\n  p = 0", "show \"x < p\""], ["proof (prove)\nusing this:\n  start ! 0 = []\n  p = 0\n\ngoal (1 subgoal):\n 1. x < p", "using x_in"], ["proof (prove)\nusing this:\n  start ! 0 = []\n  p = 0\n  x \\<in> set (start ! p)\n\ngoal (1 subgoal):\n 1. x < p", "by auto"], ["proof (state)\nthis:\n  x < p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     start ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (start ! p). x < p)\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "have eq_all:\"(\\<forall>p < n. start!p = rev [0..< n] \\<longrightarrow> (\\<exists>x\\<in> set ?w0. (x,p)\\<in> g_E G \\<and> x < p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       start ! p = rev [0..<n] \\<longrightarrow>\n       (\\<exists>x\\<in>set (unstables r step start).\n           (x, p) \\<in> g_E G \\<and> x < p)", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "assume p_lt_n: \"p < n\" and p_eq_all: \"start ! p = rev [0..< n]\""], ["proof (state)\nthis:\n  p < n\n  start ! p = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "from `p < n`"], ["proof (chain)\npicking this:\n  p < n", "have \"p = 0 \\<or> p > 0 \\<and> p < length start\""], ["proof (prove)\nusing this:\n  p < n\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> 0 < p \\<and> p < length start", "using len_start_is_n"], ["proof (prove)\nusing this:\n  p < n\n  length start = n\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> 0 < p \\<and> p < length start", "by auto"], ["proof (state)\nthis:\n  p = 0 \\<or> 0 < p \\<and> p < length start\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "with p_eq_all"], ["proof (chain)\npicking this:\n  start ! p = rev [0..<n]\n  p = 0 \\<or> 0 < p \\<and> p < length start", "have \"p > 0\" and p_lt_len_start: \"p < length start\""], ["proof (prove)\nusing this:\n  start ! p = rev [0..<n]\n  p = 0 \\<or> 0 < p \\<and> p < length start\n\ngoal (1 subgoal):\n 1. 0 < p &&& p < length start", "using start_nth0_empty n_def nodes_def len_verts_gt0"], ["proof (prove)\nusing this:\n  start ! p = rev [0..<n]\n  p = 0 \\<or> 0 < p \\<and> p < length start\n  start ! 0 = []\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. 0 < p &&& p < length start", "by auto"], ["proof (state)\nthis:\n  0 < p\n  p < length start\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "then"], ["proof (chain)\npicking this:\n  0 < p\n  p < length start", "have \"p \\<in> set (g_V G) - {0}\""], ["proof (prove)\nusing this:\n  0 < p\n  p < length start\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G) - {0}", "using len_start_is_n n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  0 < p\n  p < length start\n  length start = n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G) - {0}", "by auto"], ["proof (state)\nthis:\n  p \\<in> set (g_V G) - {0}\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "with dfst"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>set (g_V G) - {0}.\n     \\<exists>prev. (prev, v) \\<in> g_E G \\<and> prev < v\n  p \\<in> set (g_V G) - {0}", "obtain prev where \"(prev, p) \\<in> g_E G\" and \"prev < p\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (g_V G) - {0}.\n     \\<exists>prev. (prev, v) \\<in> g_E G \\<and> prev < v\n  p \\<in> set (g_V G) - {0}\n\ngoal (1 subgoal):\n 1. (\\<And>prev.\n        \\<lbrakk>(prev, p) \\<in> g_E G; prev < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (prev, p) \\<in> g_E G\n  prev < p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "then"], ["proof (chain)\npicking this:\n  (prev, p) \\<in> g_E G\n  prev < p", "have \"succs prev \\<noteq> {}\" and \"prev < length start\""], ["proof (prove)\nusing this:\n  (prev, p) \\<in> g_E G\n  prev < p\n\ngoal (1 subgoal):\n 1. succs prev \\<noteq> {} &&& prev < length start", "using p_lt_len_start"], ["proof (prove)\nusing this:\n  (prev, p) \\<in> g_E G\n  prev < p\n  p < length start\n\ngoal (1 subgoal):\n 1. succs prev \\<noteq> {} &&& prev < length start", "by (auto simp add:succs_def)"], ["proof (state)\nthis:\n  succs prev \\<noteq> {}\n  prev < length start\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "with unstable_start"], ["proof (chain)\npicking this:\n  unstables r step start =\n  sorted_list_of_set {p. succs p \\<noteq> {} \\<and> p < length start}\n  succs prev \\<noteq> {}\n  prev < length start", "have \"prev \\<in> set ?w0\""], ["proof (prove)\nusing this:\n  unstables r step start =\n  sorted_list_of_set {p. succs p \\<noteq> {} \\<and> p < length start}\n  succs prev \\<noteq> {}\n  prev < length start\n\ngoal (1 subgoal):\n 1. prev \\<in> set (unstables r step start)", "by auto"], ["proof (state)\nthis:\n  prev \\<in> set (unstables r step start)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; start ! p = rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (unstables r step start).\n                            (x, p) \\<in> g_E G \\<and> x < p", "with `(prev, p) \\<in> g_E G` `prev < p`"], ["proof (chain)\npicking this:\n  (prev, p) \\<in> g_E G\n  prev < p\n  prev \\<in> set (unstables r step start)", "show \"\\<exists>x\\<in>set (unstables r step start). (x, p) \\<in> g_E G \\<and> x < p\""], ["proof (prove)\nusing this:\n  (prev, p) \\<in> g_E G\n  prev < p\n  prev \\<in> set (unstables r step start)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set (unstables r step start).\n       (x, p) \\<in> g_E G \\<and> x < p", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set (unstables r step start).\n     (x, p) \\<in> g_E G \\<and> x < p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     start ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set (unstables r step start).\n         (x, p) \\<in> g_E G \\<and> x < p)\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "have \"\\<forall>p<n. (p \\<notin> set (unstables r step start)\\<longrightarrow> stable r step start p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       p \\<notin> set (unstables r step start) \\<longrightarrow>\n       stable r step start p", "by (unfold unstables_def) (simp add:n_def start_def nodes_def)"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     p \\<notin> set (unstables r step start) \\<longrightarrow>\n     stable r step start p\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "with sorted_start_nth neq_all eq_all start_subset_A sorted_w len_start_is_n w0_lt_n"], ["proof (chain)\npicking this:\n  ?i < n \\<Longrightarrow> Sorted_Less.sorted (rev (start ! ?i))\n  \\<forall>p<n.\n     start ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (start ! p). x < p)\n  \\<forall>p<n.\n     start ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set (unstables r step start).\n         (x, p) \\<in> g_E G \\<and> x < p)\n  set start \\<subseteq> A\n  Sorted_Less.sorted (unstables r step start)\n  length start = n\n  \\<forall>x\\<in>set (unstables r step start). x < n\n  \\<forall>p<n.\n     p \\<notin> set (unstables r step start) \\<longrightarrow>\n     stable r step start p", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i < n \\<Longrightarrow> Sorted_Less.sorted (rev (start ! ?i))\n  \\<forall>p<n.\n     start ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (start ! p). x < p)\n  \\<forall>p<n.\n     start ! p = rev [0..<n] \\<longrightarrow>\n     (\\<exists>x\\<in>set (unstables r step start).\n         (x, p) \\<in> g_E G \\<and> x < p)\n  set start \\<subseteq> A\n  Sorted_Less.sorted (unstables r step start)\n  length start = n\n  \\<forall>x\\<in>set (unstables r step start). x < n\n  \\<forall>p<n.\n     p \\<notin> set (unstables r step start) \\<longrightarrow>\n     stable r step start p\n\ngoal (1 subgoal):\n 1. wf_dom start (unstables r step start)", "by (auto simp only:wf_dom_def)"], ["proof (state)\nthis:\n  wf_dom start (unstables r step start)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_dom_properties:\n \"iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> \n  wf_dom ss' w' \\<and> \n  stables r step ss' \\<and> \n  start [\\<sqsubseteq>\\<^sub>r] ss' \\<and>\n  (\\<forall>ts\\<in>list n A. start [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> ss' [\\<sqsubseteq>\\<^sub>r] ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss', w') \\<longrightarrow>\n    wf_dom ss' w' \\<and>\n    stables r step ss' \\<and>\n    start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n    (\\<forall>ts\\<in>list n A.\n        start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        stables r step ts \\<longrightarrow>\n        ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "using iter_dom[OF wf_start]"], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss', w') \\<longrightarrow>\n    wf_dom ss' w' \\<and>\n    stables r step ss' \\<and>\n    start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss' \\<and>\n    (\\<forall>ts\\<in>list n A.\n        start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        stables r step ts \\<longrightarrow>\n        ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "by auto"], ["", "lemma iter_dom_properties2:\n \"iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> ss' \\<in> list n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss', w') \\<longrightarrow>\n    ss' \\<in> list n A", "using iter_dom_properties"], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss', w') \\<longrightarrow>\n    ss' \\<in> list n A", "by (auto simp only:wf_dom_def list_def)"], ["", "lemma iter_dom_termination: \n  \"iter f step start (unstables r step start) = (ss,w) \\<longrightarrow> \n   w \\<noteq> [] \\<longrightarrow>\n   propa f (step (hd w) (ss!(hd w))) ss (tl w) = (ss, tl w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<longrightarrow>\n    w \\<noteq> [] \\<longrightarrow>\n    propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss, tl w)", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "assume iter: \"iter f step start (unstables r step start) = (ss, w)\" and w_n_nil: \"w \\<noteq> []\""], ["proof (state)\nthis:\n  iter f step start (unstables r step start) = (ss, w)\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with iter_dom_properties"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (ss, w)\n  w \\<noteq> []", "have stas: \"stables r step ss\" \n   and wf_ss_w: \"wf_dom ss w\" \n   and start_le_ss: \"start [\\<sqsubseteq>\\<^sub>r] ss\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (ss, w)\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. stables r step ss &&&\n    wf_dom ss w &&& start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "by auto"], ["proof (state)\nthis:\n  stables r step ss\n  wf_dom ss w\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from stas"], ["proof (chain)\npicking this:\n  stables r step ss", "have sta_p: \"(\\<forall>p < size ss. stable r step ss p)\""], ["proof (prove)\nusing this:\n  stables r step ss\n\ngoal (1 subgoal):\n 1. \\<forall>p<length ss. stable r step ss p", "by (auto simp add:stables_def)"], ["proof (state)\nthis:\n  \\<forall>p<length ss. stable r step ss p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w", "have n_w_sta:  \"\\<forall>p<n. p \\<notin>set w \\<longrightarrow>  stable r step ss p\" \n                      and len_eq: \"length ss = n\" \n                      and w_lt_n: \"\\<forall>x\\<in> set w. x < n\" \n                      and ss_inA: \"\\<forall>x\\<in>set ss. x \\<in>  A\" \n                      and sorted_w: \"sorted w \""], ["proof (prove)\nusing this:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. (\\<forall>p<n. p \\<notin> set w \\<longrightarrow> stable r step ss p &&&\n     length ss = n) &&&\n    \\<forall>x\\<in>set w. x < n &&&\n    \\<forall>x\\<in>set ss. x \\<in> A &&& Sorted_Less.sorted w", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>p<n. p \\<notin> set w \\<longrightarrow> stable r step ss p\n  length ss = n\n  \\<forall>x\\<in>set w. x < n\n  \\<forall>x\\<in>set ss. x \\<in> A\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from w_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set w. x < n", "have hd_w_lt_n: \"hd w < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n\ngoal (1 subgoal):\n 1. hd w < n", "using w_n_nil"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set w. x < n\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd w < n", "by auto"], ["proof (state)\nthis:\n  hd w < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "then"], ["proof (chain)\npicking this:\n  hd w < n", "have hd_w_in_verts: \"hd w \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  hd w < n\n\ngoal (1 subgoal):\n 1. hd w \\<in> set (g_V G)", "using n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  hd w < n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. hd w \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  hd w \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "then"], ["proof (chain)\npicking this:\n  hd w \\<in> set (g_V G)", "have fin_succ_hd_w: \"finite (succs (hd w))\""], ["proof (prove)\nusing this:\n  hd w \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs (hd w))", "using fin_succs hd_w_in_verts"], ["proof (prove)\nusing this:\n  hd w \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  hd w \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs (hd w))", "by auto"], ["proof (state)\nthis:\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "let ?ss_hdw = \"ss!hd w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "let ?qs = \"step (hd w) ?ss_hdw\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from hd_w_lt_n"], ["proof (chain)\npicking this:\n  hd w < n", "have dist: \"distinct (map fst ?qs)\""], ["proof (prove)\nusing this:\n  hd w < n\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd w) (ss ! hd w)))", "using distinct_p"], ["proof (prove)\nusing this:\n  hd w < n\n  ?p < n \\<longrightarrow> distinct (map fst (step ?p (?ss ! ?p)))\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd w) (ss ! hd w)))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from wf_ss_w w_n_nil"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  w \\<noteq> []", "have hdw_ss_subset_nodes: \"set (hd w # ?ss_hdw) \\<subseteq> set nodes\"\n                        and sorted_hd_w_ss: \"sorted (rev (hd w # ?ss_hdw))\" \n                        and hd_w_ss_in_A: \" ((hd w # ?ss_hdw)) \\<in> A\"\n                        and step_pres_bounded: \"\\<forall>(q, \\<tau>)\\<in>set ?qs. q < length ss \\<and> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. (set (hd w # ss ! hd w) \\<subseteq> set nodes &&&\n     Sorted_Less.sorted (rev (hd w # ss ! hd w))) &&&\n    hd w # ss ! hd w \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> \\<tau> \\<in> A", "using propa_dom_invariant_auxi"], ["proof (prove)\nusing this:\n  wf_dom ss w\n  w \\<noteq> []\n  \\<lbrakk>wf_dom ?a ?b; ?b \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?a ! hd ?b \\<noteq> rev [0..<n] \\<and>\n                    Sorted_Less.sorted (rev (hd ?b # ?a ! hd ?b)) \\<and>\n                    set (hd ?b # ?a ! hd ?b) \\<subseteq> set nodes \\<and>\n                    hd ?b # ?a ! hd ?b \\<in> A \\<and>\n                    (\\<forall>(q, \\<tau>)\n                              \\<in>set (step (hd ?b) (?a ! hd ?b)).\n                        q < length ?a \\<and> \\<tau> \\<in> A)\n\ngoal (1 subgoal):\n 1. (set (hd w # ss ! hd w) \\<subseteq> set nodes &&&\n     Sorted_Less.sorted (rev (hd w # ss ! hd w))) &&&\n    hd w # ss ! hd w \\<in> A &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       q < length ss \\<and> \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  set (hd w # ss ! hd w) \\<subseteq> set nodes\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  hd w # ss ! hd w \\<in> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "let ?res = \"propa f (step (hd w) (ss!(hd w))) ss (tl w) \""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "have \"propa f (step (hd w) (ss!(hd w))) ss (tl w) = ?res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n    propa f (step (hd w) (ss ! hd w)) ss (tl w)", "by simp"], ["proof (state)\nthis:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n  propa f (step (hd w) (ss ! hd w)) ss (tl w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "then"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n  propa f (step (hd w) (ss ! hd w)) ss (tl w)", "obtain ss' w' where propa: \"propa f (step (hd w) (ss!(hd w))) ss (tl w) = (ss', w')\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n  propa f (step (hd w) (ss ! hd w)) ss (tl w)\n\ngoal (1 subgoal):\n 1. (\\<And>ss' w'.\n        propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n        (ss', w') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases ?res) auto"], ["proof (state)\nthis:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from sorted_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have sorted_tl_b: \"sorted (tl w)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl w)", "by (induct w) auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from ss_inA"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set ss. x \\<in> A", "have set_a: \"set ss \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ss. x \\<in> A\n\ngoal (1 subgoal):\n 1. set ss \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with step_pres_bounded sorted_tl_b len_eq dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n  set ss \\<subseteq> A", "have \"\\<forall>(q, \\<tau>) \\<in> set ?qs. (fst(propa f ?qs ss (tl w)))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n  set ss \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n       \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by (auto dest:propa_property1)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "have propa_ss1:  \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ss'!q =  (hd w # ?ss_hdw) \\<squnion>\\<^bsub>f\\<^esub>ss!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n       ss' ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q", "by (simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss' ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from step_pres_bounded sorted_tl_b set_a  len_eq dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))", "have  \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length ss \\<Longrightarrow> (fst(propa f ?qs ss (tl w)))!q = ss!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n        q < length ss\\<rbrakk>\n       \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) !\n                         q =\n                         ss ! q", "by (auto intro:propa_property2)"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q", "have g2: \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length ss \\<Longrightarrow> ss'!q = ss!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! ?q =\n                    ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n        q < length ss\\<rbrakk>\n       \\<Longrightarrow> ss' ! q = ss ! q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd w) (ss ! hd w)));\n   ?q < length ss\\<rbrakk>\n  \\<Longrightarrow> ss' ! ?q = ss ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "from sorted_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted w", "have sorted_tl_w: \"sorted (tl w)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl w)", "by (induct w)  auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with step_pres_bounded set_a"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  set ss \\<subseteq> A\n  Sorted_Less.sorted (tl w)", "have fst_propa: \"fst (propa f ?qs ss (tl w)) = (merges f ?qs ss)\"   \n   and snd_propa: \"snd (propa f ?qs ss (tl w)) = (sorted_list_of_set ({q. \\<exists>t.(q,t)\\<in>set ?qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (ss!q) \\<noteq> ss!q} \\<union> set (tl w)))\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  set ss \\<subseteq> A\n  Sorted_Less.sorted (tl w)\n\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    merges f (step (hd w) (ss ! hd w)) ss &&&\n    snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n      set (tl w))", "using decomp_propa"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  set ss \\<subseteq> A\n  Sorted_Less.sorted (tl w)\n  \\<lbrakk>\\<forall>(q, t)\\<in>set ?qs. q < length ?ss \\<and> t \\<in> A;\n   Sorted_Less.sorted ?w; set ?ss \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> propa f ?qs ?ss ?w =\n                    (merges f ?qs ?ss,\n                     sorted_list_of_set\n                      ({q. \\<exists>t.\n                              (q, t) \\<in> set ?qs \\<and>\n                              t \\<squnion>\\<^bsub>f\\<^esub> ?ss ! q \\<noteq>\n                              ?ss ! q} \\<union>\n                       set ?w))\n\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    merges f (step (hd w) (ss ! hd w)) ss &&&\n    snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    sorted_list_of_set\n     ({q. \\<exists>t.\n             (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n             t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n      set (tl w))", "by auto"], ["proof (state)\nthis:\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  merges f (step (hd w) (ss ! hd w)) ss\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  merges f (step (hd w) (ss ! hd w)) ss\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))", "have len_ss_eq_ss': \"length ss' = length ss\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  merges f (step (hd w) (ss ! hd w)) ss\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n\ngoal (1 subgoal):\n 1. length ss' = length ss", "using length_merges"], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  merges f (step (hd w) (ss ! hd w)) ss\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n  length (merges f ?ps ?ss) = length ?ss\n\ngoal (1 subgoal):\n 1. length ss' = length ss", "by auto"], ["proof (state)\nthis:\n  length ss' = length ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "have ss_ss'_eq:  \"\\<forall>i<n. (fst (propa f ?qs ss (tl w)))!i = ss!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "assume \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "then"], ["proof (chain)\npicking this:\n  i < n", "have i_lt_len_ss: \"i < length ss\""], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. i < length ss", "using `length ss = n`"], ["proof (prove)\nusing this:\n  i < n\n  length ss = n\n\ngoal (1 subgoal):\n 1. i < length ss", "by auto"], ["proof (state)\nthis:\n  i < length ss\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<Longrightarrow>\n       fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "show \"fst (propa f ?qs ss (tl w)) ! i = ss ! i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "proof(cases \"i \\<in> set(map fst ?qs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "case True"], ["proof (state)\nthis:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "assume ass1: \"i \\<in> set (map fst ?qs)\""], ["proof (state)\nthis:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "with propa_ss1"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss' ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))", "have ss': \"ss'!i = (hd w # ?ss_hdw) \\<squnion>\\<^bsub>f\\<^esub>ss!i\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss' ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. ss' ! i = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! i", "by (auto simp add: step_def exec_def)"], ["proof (state)\nthis:\n  ss' ! i = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! i\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "from ass1"], ["proof (chain)\npicking this:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))", "have \"i \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. i \\<in> set (g_V G)", "using succ_in_G fin_succ_hd_w"], ["proof (prove)\nusing this:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n  \\<forall>v\\<in>succs ?n. v \\<in> set (g_V G)\n  finite (succs (hd w))\n\ngoal (1 subgoal):\n 1. i \\<in> set (g_V G)", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  i \\<in> set (g_V G)\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "then"], ["proof (chain)\npicking this:\n  i \\<in> set (g_V G)", "have q_lt_len_ss: \"i < length ss\""], ["proof (prove)\nusing this:\n  i \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. i < length ss", "using len_eq"], ["proof (prove)\nusing this:\n  i \\<in> set (g_V G)\n  length ss = n\n\ngoal (1 subgoal):\n 1. i < length ss", "by (auto simp add:n_def nodes_def verts_set)"], ["proof (state)\nthis:\n  i < length ss\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "from hd_w_lt_n len_eq stas"], ["proof (chain)\npicking this:\n  hd w < n\n  length ss = n\n  stables r step ss", "have \"stable r step ss (hd w)\""], ["proof (prove)\nusing this:\n  hd w < n\n  length ss = n\n  stables r step ss\n\ngoal (1 subgoal):\n 1. stable r step ss (hd w)", "by (auto simp add:stables_def)"], ["proof (state)\nthis:\n  stable r step ss (hd w)\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "with ass1"], ["proof (chain)\npicking this:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n  stable r step ss (hd w)", "have \"(hd w # ?ss_hdw) \\<sqsubseteq>\\<^sub>r ss!i\""], ["proof (prove)\nusing this:\n  i \\<in> set (map fst (step (hd w) (ss ! hd w)))\n  stable r step ss (hd w)\n\ngoal (1 subgoal):\n 1. hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i", "by (auto simp add:stables_def stable_def step_def exec_def transf_def)"], ["proof (state)\nthis:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "then"], ["proof (chain)\npicking this:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i", "have \"set (ss!i) \\<subseteq> set (hd w # ?ss_hdw) \\<or> (hd w # ?ss_hdw) = ss!i\""], ["proof (prove)\nusing this:\n  hd w # ss ! hd w \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! i\n\ngoal (1 subgoal):\n 1. set (ss ! i) \\<subseteq> set (hd w # ss ! hd w) \\<or>\n    hd w # ss ! hd w = ss ! i", "by (auto simp add:lesssub_def lesub_def r_def nodes_le_def)"], ["proof (state)\nthis:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w) \\<or>\n  hd w # ss ! hd w = ss ! i\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "then"], ["proof (chain)\npicking this:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w) \\<or>\n  hd w # ss ! hd w = ss ! i", "have set_ss_q_subst_hdw_ss: \"set (ss!i) \\<subseteq> set (hd w # ?ss_hdw)\""], ["proof (prove)\nusing this:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w) \\<or>\n  hd w # ss ! hd w = ss ! i\n\ngoal (1 subgoal):\n 1. set (ss ! i) \\<subseteq> set (hd w # ss ! hd w)", "by (rule disjE)(auto simp add:lesssub_def lesub_def r_def nodes_le_def)"], ["proof (state)\nthis:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w)\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "then"], ["proof (chain)\npicking this:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w)", "have ss_q: \"set (ss!i) \\<inter> set (hd w # ?ss_hdw) = set (ss!i)\""], ["proof (prove)\nusing this:\n  set (ss ! i) \\<subseteq> set (hd w # ss ! hd w)\n\ngoal (1 subgoal):\n 1. set (ss ! i) \\<inter> set (hd w # ss ! hd w) = set (ss ! i)", "by auto"], ["proof (state)\nthis:\n  set (ss ! i) \\<inter> set (hd w # ss ! hd w) = set (ss ! i)\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "from wf_ss_w q_lt_len_ss"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  i < length ss", "have sorted_ss_q: \"sorted (rev (ss!i))\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  i < length ss\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (ss ! i))", "by (simp add:wf_dom_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (ss ! i))\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "with sorted_hd_w_ss"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  Sorted_Less.sorted (rev (ss ! i))", "have ss_q': \"set (ss'!i) = set (ss!i) \\<inter> set (hd w # ?ss_hdw)\" \n                           and sorrted_ss_q': \"sorted (rev (ss'!i))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  Sorted_Less.sorted (rev (ss ! i))\n\ngoal (1 subgoal):\n 1. set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w) &&&\n    Sorted_Less.sorted (rev (ss' ! i))", "using ss'"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd w # ss ! hd w))\n  Sorted_Less.sorted (rev (ss ! i))\n  ss' ! i = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! i\n\ngoal (1 subgoal):\n 1. set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w) &&&\n    Sorted_Less.sorted (rev (ss' ! i))", "by (auto simp add:plussub_def f_def nodes_sup_def inter_sorted_correct)"], ["proof (state)\nthis:\n  set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w)\n  Sorted_Less.sorted (rev (ss' ! i))\n\ngoal (2 subgoals):\n 1. i \\<in> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n 2. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "with ss_q sorted_ss_q sorrted_ss_q'"], ["proof (chain)\npicking this:\n  set (ss ! i) \\<inter> set (hd w # ss ! hd w) = set (ss ! i)\n  Sorted_Less.sorted (rev (ss ! i))\n  Sorted_Less.sorted (rev (ss' ! i))\n  set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w)\n  Sorted_Less.sorted (rev (ss' ! i))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (ss ! i) \\<inter> set (hd w # ss ! hd w) = set (ss ! i)\n  Sorted_Less.sorted (rev (ss ! i))\n  Sorted_Less.sorted (rev (ss' ! i))\n  set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w)\n  Sorted_Less.sorted (rev (ss' ! i))\n\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "using sorted_less_rev_set_unique propa"], ["proof (prove)\nusing this:\n  set (ss ! i) \\<inter> set (hd w # ss ! hd w) = set (ss ! i)\n  Sorted_Less.sorted (rev (ss ! i))\n  Sorted_Less.sorted (rev (ss' ! i))\n  set (ss' ! i) = set (ss ! i) \\<inter> set (hd w # ss ! hd w)\n  Sorted_Less.sorted (rev (ss' ! i))\n  \\<lbrakk>Sorted_Less.sorted (rev ?xs); Sorted_Less.sorted (rev ?ys);\n   set ?xs = set ?ys\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "by auto"], ["proof (state)\nthis:\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "case False"], ["proof (state)\nthis:\n  i \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "note i_nin = this"], ["proof (state)\nthis:\n  i \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. i \\<notin> set (map fst (step (hd w) (ss ! hd w))) \\<Longrightarrow>\n    fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "from step_pres_bounded sorted_tl_b set_a len_eq dist propa i_lt_len_ss i_nin"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  i < length ss\n  i \\<notin> set (map fst (step (hd w) (ss ! hd w)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     q < length ss \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl w)\n  set ss \\<subseteq> A\n  length ss = n\n  distinct (map fst (step (hd w) (ss ! hd w)))\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  i < length ss\n  i \\<notin> set (map fst (step (hd w) (ss ! hd w)))\n\ngoal (1 subgoal):\n 1. fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "by (fastforce dest:propa_property2)"], ["proof (state)\nthis:\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<n.\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with len_ss_eq_ss'"], ["proof (chain)\npicking this:\n  length ss' = length ss\n  \\<forall>i<n.\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i", "have eq_ss: \"ss' = ss\""], ["proof (prove)\nusing this:\n  length ss' = length ss\n  \\<forall>i<n.\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n\ngoal (1 subgoal):\n 1. ss' = ss", "using len_eq propa"], ["proof (prove)\nusing this:\n  length ss' = length ss\n  \\<forall>i<n.\n     fst (propa f (step (hd w) (ss ! hd w)) ss (tl w)) ! i = ss ! i\n  length ss = n\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n\ngoal (1 subgoal):\n 1. ss' = ss", "by (auto simp add:list_eq_iff_nth_eq)"], ["proof (state)\nthis:\n  ss' = ss\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "then"], ["proof (chain)\npicking this:\n  ss' = ss", "have qs_empty: \"(({q. \\<exists>t.(q,t)\\<in>set ?qs \\<and> t \\<squnion>\\<^bsub>f\\<^esub> (ss!q) \\<noteq> ss!q} \\<union> set (tl w))) =  (set (tl w))\""], ["proof (prove)\nusing this:\n  ss' = ss\n\ngoal (1 subgoal):\n 1. {q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w) =\n    set (tl w)", "using propa_ss1 propa transf_def step_def exec_def"], ["proof (prove)\nusing this:\n  ss' = ss\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd w) (ss ! hd w)).\n     ss' ! q = hd w # ss ! hd w \\<squnion>\\<^bsub>f\\<^esub> ss ! q\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  transf ?n ?input \\<equiv> ?n # ?input\n  step \\<equiv> exec\n  exec ?n ?xs =\n  map (\\<lambda>pc. (pc, transf ?n ?xs))\n   (rev (sorted_list_of_set (succs ?n)))\n\ngoal (1 subgoal):\n 1. {q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w) =\n    set (tl w)", "by fastforce"], ["proof (state)\nthis:\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set (tl w) =\n  set (tl w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with snd_propa"], ["proof (chain)\npicking this:\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set (tl w) =\n  set (tl w)", "have \"snd (propa f ?qs ss (tl w)) = sorted_list_of_set (set (tl w))\""], ["proof (prove)\nusing this:\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set (tl w) =\n  set (tl w)\n\ngoal (1 subgoal):\n 1. snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    sorted_list_of_set (set (tl w))", "using sorted_w"], ["proof (prove)\nusing this:\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set\n   ({q. \\<exists>t.\n           (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n           t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n    set (tl w))\n  {q. \\<exists>t.\n         (q, t) \\<in> set (step (hd w) (ss ! hd w)) \\<and>\n         t \\<squnion>\\<^bsub>f\\<^esub> ss ! q \\<noteq> ss ! q} \\<union>\n  set (tl w) =\n  set (tl w)\n  Sorted_Less.sorted w\n\ngoal (1 subgoal):\n 1. snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n    sorted_list_of_set (set (tl w))", "by auto"], ["proof (state)\nthis:\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set (set (tl w))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with sorted_tl_w"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (tl w)\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set (set (tl w))", "have \"snd (propa f ?qs ss (tl w)) = tl w\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (tl w)\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) =\n  sorted_list_of_set (set (tl w))\n\ngoal (1 subgoal):\n 1. snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) = tl w", "by (fastforce dest:sorted_less_set_eq)"], ["proof (state)\nthis:\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) = tl w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) = tl w", "have \"w' = tl w\""], ["proof (prove)\nusing this:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n  snd (propa f (step (hd w) (ss ! hd w)) ss (tl w)) = tl w\n\ngoal (1 subgoal):\n 1. w' = tl w", "by simp"], ["proof (state)\nthis:\n  w' = tl w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n     w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> propa f (step (hd w) (ss ! hd w)) ss (tl w) =\n                      (ss, tl w)", "with eq_ss"], ["proof (chain)\npicking this:\n  ss' = ss\n  w' = tl w", "show \"propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss, tl w)\""], ["proof (prove)\nusing this:\n  ss' = ss\n  w' = tl w\n\ngoal (1 subgoal):\n 1. propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss, tl w)", "using propa"], ["proof (prove)\nusing this:\n  ss' = ss\n  w' = tl w\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss', w')\n\ngoal (1 subgoal):\n 1. propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss, tl w)", "by auto"], ["proof (state)\nthis:\n  propa f (step (hd w) (ss ! hd w)) ss (tl w) = (ss, tl w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dom_iter_properties: \n  \"iter f step start (unstables r step start) = (ss, w) \\<longrightarrow> \n   ss!0 = [] \\<and> \n   (\\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss!p \\<noteq> (rev [0..<n]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "assume iter: \"iter f step start (unstables r step start) = (ss, w)\""], ["proof (state)\nthis:\n  iter f step start (unstables r step start) = (ss, w)\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "with iter_dom_properties iter_dom_properties2"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  ?ss' \\<in> list n A\n  iter f step start (unstables r step start) = (ss, w)", "have \"wf_dom ss w\" \n   and stas: \"stables r step ss\" \n   and start_le_ss: \"start [\\<sqsubseteq>\\<^sub>r] ss\" \n   and ss_inA: \"ss \\<in> list n A\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  ?ss' \\<in> list n A\n  iter f step start (unstables r step start) = (ss, w)\n\ngoal (1 subgoal):\n 1. (wf_dom ss w &&& stables r step ss) &&&\n    start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss &&& ss \\<in> list n A", "by auto"], ["proof (state)\nthis:\n  wf_dom ss w\n  stables r step ss\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "then"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  stables r step ss\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n  ss \\<in> list n A", "have len_ss_n: \"length ss = n\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  stables r step ss\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n  ss \\<in> list n A\n\ngoal (1 subgoal):\n 1. length ss = n", "by auto"], ["proof (state)\nthis:\n  length ss = n\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "from start_le_ss"], ["proof (chain)\npicking this:\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss", "have \"start!0 \\<sqsubseteq>\\<^sub>r ss!0\""], ["proof (prove)\nusing this:\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n\ngoal (1 subgoal):\n 1. start ! 0 \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! 0", "using start_len_gt_0"], ["proof (prove)\nusing this:\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ss\n  0 < length start\n\ngoal (1 subgoal):\n 1. start ! 0 \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! 0", "by (unfold Listn.le_def lesssub_def lesub_def) (auto simp add:lesssub_def lesub_def intro:list_all2_nthD)"], ["proof (state)\nthis:\n  start ! 0 \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! 0\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "then"], ["proof (chain)\npicking this:\n  start ! 0 \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! 0", "have ss_0th: \"ss!0 = []\""], ["proof (prove)\nusing this:\n  start ! 0 \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! 0\n\ngoal (1 subgoal):\n 1. ss ! 0 = []", "by (auto simp add:r_def nodes_le_def lesssub_def lesub_def start_def)"], ["proof (state)\nthis:\n  ss ! 0 = []\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "have \"(\\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq>  (rev [0..<n]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n]", "proof(intro strip, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "assume p_lt_n: \"p < n\" and p_neq_0: \"p\\<noteq>0\" and ss_p_eq_all: \"\\<not> ss ! p \\<noteq> rev [0..<n]\""], ["proof (state)\nthis:\n  p < n\n  p \\<noteq> 0\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "with stas len_ss_n"], ["proof (chain)\npicking this:\n  stables r step ss\n  length ss = n\n  p < n\n  p \\<noteq> 0\n  \\<not> ss ! p \\<noteq> rev [0..<n]", "have step_sta: \"\\<forall>(q,\\<tau>) \\<in> set (step p (ss!p)). \\<tau> \\<sqsubseteq>\\<^sub>r ss!q\""], ["proof (prove)\nusing this:\n  stables r step ss\n  length ss = n\n  p < n\n  p \\<noteq> 0\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by (simp add: stables_def stable_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "from p_lt_n len_start_is_n verts_set"], ["proof (chain)\npicking this:\n  p < n\n  length start = n\n  set (g_V G) = {0..<length (g_V G)}", "have p_is_vert: \"p \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  p < n\n  length start = n\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. p \\<in> set (g_V G)", "by (auto simp add:n_def nodes_def)"], ["proof (state)\nthis:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p \\<in> set (g_V G)", "have step_p: \"\\<forall>(q,\\<tau>) \\<in> set (step p (ss!p)). q \\<in> succs p\""], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)). q \\<in> succs p", "using fin_succs"], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)). q \\<in> succs p", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step p (ss ! p)). q \\<in> succs p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "from p_is_vert p_neq_0 dfst"], ["proof (chain)\npicking this:\n  p \\<in> set (g_V G)\n  p \\<noteq> 0\n  \\<forall>v\\<in>set (g_V G) - {0}.\n     \\<exists>prev. (prev, v) \\<in> g_E G \\<and> prev < v", "obtain prev where \"(prev, p) \\<in> g_E G\" and prev_lt_p: \"prev < p\""], ["proof (prove)\nusing this:\n  p \\<in> set (g_V G)\n  p \\<noteq> 0\n  \\<forall>v\\<in>set (g_V G) - {0}.\n     \\<exists>prev. (prev, v) \\<in> g_E G \\<and> prev < v\n\ngoal (1 subgoal):\n 1. (\\<And>prev.\n        \\<lbrakk>(prev, p) \\<in> g_E G; prev < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (prev, p) \\<in> g_E G\n  prev < p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (prev, p) \\<in> g_E G\n  prev < p", "have prev_lt_n: \"prev < n\" \n         and prev_p: \"p \\<in> succs prev\" \n         and \"prev \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  (prev, p) \\<in> g_E G\n  prev < p\n\ngoal (1 subgoal):\n 1. prev < n &&& p \\<in> succs prev &&& prev \\<in> set (g_V G)", "using p_lt_n tail_is_vert"], ["proof (prove)\nusing this:\n  (prev, p) \\<in> g_E G\n  prev < p\n  p < n\n  (?u, ?v) \\<in> g_E G \\<Longrightarrow> ?u \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. prev < n &&& p \\<in> succs prev &&& prev \\<in> set (g_V G)", "by (auto simp add:succs_def)"], ["proof (state)\nthis:\n  prev < n\n  p \\<in> succs prev\n  prev \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  prev < n\n  p \\<in> succs prev\n  prev \\<in> set (g_V G)", "have fin_suc_prev : \"finite (succs prev)\""], ["proof (prove)\nusing this:\n  prev < n\n  p \\<in> succs prev\n  prev \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs prev)", "using fin_succs"], ["proof (prove)\nusing this:\n  prev < n\n  p \\<in> succs prev\n  prev \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs prev)", "by auto"], ["proof (state)\nthis:\n  finite (succs prev)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "let ?prev_\\<tau> = \"ss!prev\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "from prev_lt_n stas `length ss = n`"], ["proof (chain)\npicking this:\n  prev < n\n  stables r step ss\n  length ss = n", "have \"stable r step ss prev\""], ["proof (prove)\nusing this:\n  prev < n\n  stables r step ss\n  length ss = n\n\ngoal (1 subgoal):\n 1. stable r step ss prev", "by (auto simp add:stables_def)"], ["proof (state)\nthis:\n  stable r step ss prev\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  stable r step ss prev", "have \"\\<forall>(q,\\<tau>) \\<in> set (step prev ?prev_\\<tau>). (prev # ?prev_\\<tau>) \\<sqsubseteq>\\<^sub>r ss!q\""], ["proof (prove)\nusing this:\n  stable r step ss prev\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step prev (ss ! prev)).\n       prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "by (auto simp add: stable_def transf_def step_def exec_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step prev (ss ! prev)).\n     prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "with prev_p"], ["proof (chain)\npicking this:\n  p \\<in> succs prev\n  \\<forall>(q, \\<tau>)\\<in>set (step prev (ss ! prev)).\n     prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q", "have \"(prev # ?prev_\\<tau>) \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\""], ["proof (prove)\nusing this:\n  p \\<in> succs prev\n  \\<forall>(q, \\<tau>)\\<in>set (step prev (ss ! prev)).\n     prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n\ngoal (1 subgoal):\n 1. prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p", "using fin_suc_prev"], ["proof (prove)\nusing this:\n  p \\<in> succs prev\n  \\<forall>(q, \\<tau>)\\<in>set (step prev (ss ! prev)).\n     prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! q\n  finite (succs prev)\n\ngoal (1 subgoal):\n 1. prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p", "by (auto simp add: stable_def transf_def step_def exec_def)"], ["proof (state)\nthis:\n  prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "with ss_p_eq_all"], ["proof (chain)\npicking this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n  prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p", "have \"sorted (rev (prev # ?prev_\\<tau>)) \\<and> {0..<n} \\<subseteq> set (prev # ?prev_\\<tau>) \\<or> (prev # ss ! prev) =  (rev [0..<n])\""], ["proof (prove)\nusing this:\n  \\<not> ss ! p \\<noteq> rev [0..<n]\n  prev # ss ! prev \\<sqsubseteq>\\<^bsub>r\\<^esub> ss ! p\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n    {0..<n} \\<subseteq> set (prev # ss ! prev) \\<or>\n    prev # ss ! prev = rev [0..<n]", "by (auto simp add:r_def lesssub_def lesub_def nodes_le_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev) \\<or>\n  prev # ss ! prev = rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev) \\<or>\n  prev # ss ! prev = rev [0..<n]", "have \"sorted (rev (prev # ?prev_\\<tau>)) \\<and> {0..<n} \\<subseteq> set (prev # ?prev_\\<tau>)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev) \\<or>\n  prev # ss ! prev = rev [0..<n]\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n    {0..<n} \\<subseteq> set (prev # ss ! prev)", "by(rule disjE)  auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev)", "have sorted_rev: \"sorted (rev (prev # ?prev_\\<tau>))\" \n          and pres_subset: \"{0..<n} \\<subseteq> set (prev # ?prev_\\<tau>)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (prev # ss ! prev)) \\<and>\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (prev # ss ! prev)) &&&\n    {0..<n} \\<subseteq> set (prev # ss ! prev)", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (prev # ss ! prev))\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (prev # ss ! prev))\n  {0..<n} \\<subseteq> set (prev # ss ! prev)", "have prev_set: \"\\<forall>x\\<in> set ?prev_\\<tau>. x < prev\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (prev # ss ! prev))\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (ss ! prev). x < prev", "by (induct ?prev_\\<tau>) (auto simp add:sorted_wrt_append)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (ss ! prev). x < prev\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "from p_lt_n prev_lt_p"], ["proof (chain)\npicking this:\n  p < n\n  prev < p", "have \"prev < n - 1\""], ["proof (prove)\nusing this:\n  p < n\n  prev < p\n\ngoal (1 subgoal):\n 1. prev < n - 1", "using n_def nodes_def len_verts_gt0"], ["proof (prove)\nusing this:\n  p < n\n  prev < p\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. prev < n - 1", "by auto"], ["proof (state)\nthis:\n  prev < n - 1\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "with prev_set"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (ss ! prev). x < prev\n  prev < n - 1", "have prev_lt_n: \"\\<forall>x\\<in>set(prev # ?prev_\\<tau>). x < n - 1\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (ss ! prev). x < prev\n  prev < n - 1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prev # ss ! prev). x < n - 1", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prev # ss ! prev). x < n - 1\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "from pres_subset"], ["proof (chain)\npicking this:\n  {0..<n} \\<subseteq> set (prev # ss ! prev)", "have \"n - 1 \\<in> set (prev # ?prev_\\<tau>)\""], ["proof (prove)\nusing this:\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. n - 1 \\<in> set (prev # ss ! prev)", "using n_def nodes_def len_verts_gt0"], ["proof (prove)\nusing this:\n  {0..<n} \\<subseteq> set (prev # ss ! prev)\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. n - 1 \\<in> set (prev # ss ! prev)", "by fastforce"], ["proof (state)\nthis:\n  n - 1 \\<in> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p < n; p \\<noteq> 0;\n        \\<not> ss ! p \\<noteq> rev [0..<n]\\<rbrakk>\n       \\<Longrightarrow> False", "with prev_lt_n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prev # ss ! prev). x < n - 1\n  n - 1 \\<in> set (prev # ss ! prev)", "show False"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prev # ss ! prev). x < n - 1\n  n - 1 \\<in> set (prev # ss ! prev)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<Longrightarrow>\n    ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "with ss_0th"], ["proof (chain)\npicking this:\n  ss ! 0 = []\n  \\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n]", "show \" ss ! 0 = [] \\<and> (\\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])\""], ["proof (prove)\nusing this:\n  ss ! 0 = []\n  \\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. ss ! 0 = [] \\<and>\n    (\\<forall>p<n.\n        p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])", "by auto"], ["proof (state)\nthis:\n  ss ! 0 = [] \\<and>\n  (\\<forall>p<n. p \\<noteq> 0 \\<longrightarrow> ss ! p \\<noteq> rev [0..<n])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dom_iter_properties2: \n  \"iter f step start (unstables r step start) = (ss,w) \\<longrightarrow> (\\<forall>p<n.  ss!p \\<noteq> (rev [0..<n]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter f step start (unstables r step start) = (ss, w) \\<longrightarrow>\n    (\\<forall>p<n. ss ! p \\<noteq> rev [0..<n])", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n        p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n        p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "assume iter: \"iter f step start (unstables r step start) = (ss, w)\" and p: \"p < n\""], ["proof (state)\nthis:\n  iter f step start (unstables r step start) = (ss, w)\n  p < n\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>iter f step start (unstables r step start) = (ss, w);\n        p < n\\<rbrakk>\n       \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "show \"ss ! p \\<noteq> (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "proof(cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]\n 2. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]\n 2. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "with iter"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (ss, w)\n  p = 0", "have \"ss!p = []\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (ss, w)\n  p = 0\n\ngoal (1 subgoal):\n 1. ss ! p = []", "by  (auto simp add:dom_iter_properties)"], ["proof (state)\nthis:\n  ss ! p = []\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]\n 2. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "then"], ["proof (chain)\npicking this:\n  ss ! p = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ss ! p = []\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "using n_def nodes_def len_verts_gt0"], ["proof (prove)\nusing this:\n  ss ! p = []\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  0 < length (g_V G)\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> ss ! p \\<noteq> rev [0..<n]", "with iter p"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (ss, w)\n  p < n\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (ss, w)\n  p < n\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ss ! p \\<noteq> rev [0..<n]", "by (auto simp add:dom_iter_properties)"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! p \\<noteq> rev [0..<n]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kildall_dom_properties:\n  \"kildall r f step start \\<in> list n A \\<and> \n   stables r step (kildall r f step start) \\<and> \n   start [\\<sqsubseteq>\\<^sub>r] (kildall r f step start) \\<and>\n   (\\<forall>ts\\<in>list n A. start [\\<sqsubseteq>\\<^sub>r] ts \\<and> stables r step ts \\<longrightarrow> (kildall r f step start) [\\<sqsubseteq>\\<^sub>r] ts)\"  (is \"PROP ?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. kildall r f step start \\<in> list n A \\<and>\n    stables r step (kildall r f step start) \\<and>\n    start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] kildall r f step start \\<and>\n    (\\<forall>ts\\<in>list n A.\n        start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n        stables r step ts \\<longrightarrow>\n        kildall r f step start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)", "by (case_tac \"iter f step start (unstables r step start)\")(simp add: kildall_def iter_dom_properties iter_dom_properties2)"], ["", "lemma dom_kildall_stables: \"stables r step (dom_kildall start)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stables r step (dom_kildall start)", "using kildall_dom_properties"], ["proof (prove)\nusing this:\n  kildall r f step start \\<in> list n A \\<and>\n  stables r step (kildall r f step start) \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] kildall r f step start \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      kildall r f step start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n\ngoal (1 subgoal):\n 1. stables r step (dom_kildall start)", "by(unfold dom_kildall_def nodes_semi_def) (simp add: r_def f_def step_def)"], ["", "lemma dom_kildall_entry: \"dom_kildall start !0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_kildall start ! 0 = []", "by (case_tac \"iter f step start (unstables r step start)\")\n     (auto simp add:dom_kildall_def nodes_semi_def dom_iter_properties r_def f_def step_def kildall_def)"], ["", "lemma zero_dom_zero: \"dom i 0 \\<longleftrightarrow> i = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom i 0 = (i = 0)", "using start_def n_def nodes_def dom_kildall_entry"], ["proof (prove)\nusing this:\n  start \\<equiv> [] # replicate (length (g_V G) - 1) (rev [0..<n])\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  dom_kildall start ! 0 = []\n\ngoal (1 subgoal):\n 1. local.dom i 0 = (i = 0)", "by (simp add:dom_def)"], ["", "(*lemma sadom_succs:  \"strict_dom i j \\<Longrightarrow> j \\<in> succs k \\<Longrightarrow> strict_dom i k\"*)"], ["", "lemma sdom_dom_succs: \"strict_dom i j \\<Longrightarrow> j \\<in> succs k \\<Longrightarrow> dom i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "assume sdom_i_j: \"strict_dom i j\" and k_j: \"j \\<in> succs k\""], ["proof (state)\nthis:\n  strict_dom i j\n  j \\<in> succs k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "then"], ["proof (chain)\npicking this:\n  strict_dom i j\n  j \\<in> succs k", "have j: \"j \\<in> set (g_V G)\" \n        and k: \"k \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  strict_dom i j\n  j \\<in> succs k\n\ngoal (1 subgoal):\n 1. j \\<in> set (g_V G) &&& k \\<in> set (g_V G)", "using verts_set succ_in_verts"], ["proof (prove)\nusing this:\n  strict_dom i j\n  j \\<in> succs k\n  set (g_V G) = {0..<length (g_V G)}\n  ?s \\<in> succs ?n \\<Longrightarrow> {?s, ?n} \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. j \\<in> set (g_V G) &&& k \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  j \\<in> set (g_V G)\n  k \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "then"], ["proof (chain)\npicking this:\n  j \\<in> set (g_V G)\n  k \\<in> set (g_V G)", "have j_lt_n: \"j < n\" and k_lt_n: \"k < n\""], ["proof (prove)\nusing this:\n  j \\<in> set (g_V G)\n  k \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. j < n &&& k < n", "using n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  j \\<in> set (g_V G)\n  k \\<in> set (g_V G)\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. j < n &&& k < n", "by auto"], ["proof (state)\nthis:\n  j < n\n  k < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "have fin_succs_k: \"finite (succs k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (succs k)", "using fin_succs k"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n  k \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs k)", "by auto"], ["proof (state)\nthis:\n  finite (succs k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "with k_j"], ["proof (chain)\npicking this:\n  j \\<in> succs k\n  finite (succs k)", "have k_j2: \"j \\<in> set (rev (sorted_list_of_set(succs k)))\""], ["proof (prove)\nusing this:\n  j \\<in> succs k\n  finite (succs k)\n\ngoal (1 subgoal):\n 1. j \\<in> set (rev (sorted_list_of_set (succs k)))", "by auto"], ["proof (state)\nthis:\n  j \\<in> set (rev (sorted_list_of_set (succs k)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "let ?ss0 = \"start\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "let ?w0 = \"unstables r step start\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "let ?res = \"dom_kildall start\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "have dom_kil: \"?res = kildall r f step ?ss0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_kildall start = kildall r f step start", "by (auto simp add:dom_kildall_def r_def f_def step_def nodes_semi_def)"], ["proof (state)\nthis:\n  dom_kildall start = kildall r f step start\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "have sorted_unstables: \"sorted ?w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (unstables r step start)", "by (auto simp add:unstables_def sorted_less_sorted_list_of_set)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (unstables r step start)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "have ss: \"?res = fst (iter f step ?ss0 ?w0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom_kildall start = fst (iter f step start (unstables r step start))", "by (auto simp add:dom_kildall_def kildall_def f_def step_def nodes_semi_def start_def r_def)"], ["proof (state)\nthis:\n  dom_kildall start = fst (iter f step start (unstables r step start))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "then"], ["proof (chain)\npicking this:\n  dom_kildall start = fst (iter f step start (unstables r step start))", "obtain ww where dom_iter: \"iter f step ?ss0 ?w0 = (?res, ww)\""], ["proof (prove)\nusing this:\n  dom_kildall start = fst (iter f step start (unstables r step start))\n\ngoal (1 subgoal):\n 1. (\\<And>ww.\n        iter f step start (unstables r step start) =\n        (dom_kildall start, ww) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"iter f step ?ss0 ?w0\") auto"], ["proof (state)\nthis:\n  iter f step start (unstables r step start) = (dom_kildall start, ww)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "with iter_dom_properties"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (dom_kildall start, ww)", "have wf_res: \"wf_dom (dom_kildall start) ww\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (dom_kildall start, ww)\n\ngoal (1 subgoal):\n 1. wf_dom (dom_kildall start) ww", "by auto"], ["proof (state)\nthis:\n  wf_dom (dom_kildall start) ww\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "with sdom_i_j"], ["proof (chain)\npicking this:\n  strict_dom i j\n  wf_dom (dom_kildall start) ww", "have i_dom_j: \"i \\<in> set (?res!j)\""], ["proof (prove)\nusing this:\n  strict_dom i j\n  wf_dom (dom_kildall start) ww\n\ngoal (1 subgoal):\n 1. i \\<in> set (dom_kildall start ! j)", "by (auto simp add:strict_dom_def start_def n_def nodes_def)"], ["proof (state)\nthis:\n  i \\<in> set (dom_kildall start ! j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "from wf_res"], ["proof (chain)\npicking this:\n  wf_dom (dom_kildall start) ww", "have len_res: \"length ?res = n\""], ["proof (prove)\nusing this:\n  wf_dom (dom_kildall start) ww\n\ngoal (1 subgoal):\n 1. length (dom_kildall start) = n", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  length (dom_kildall start) = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "show \"dom i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom i k", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> local.dom i k \\<Longrightarrow> False", "assume ass: \"\\<not> dom i k\""], ["proof (state)\nthis:\n  \\<not> local.dom i k\n\ngoal (1 subgoal):\n 1. \\<not> local.dom i k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> local.dom i k", "have i_neq_k: \"i \\<noteq> k\""], ["proof (prove)\nusing this:\n  \\<not> local.dom i k\n\ngoal (1 subgoal):\n 1. i \\<noteq> k", "by (auto simp add:dom_refl)"], ["proof (state)\nthis:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<not> local.dom i k \\<Longrightarrow> False", "with ass"], ["proof (chain)\npicking this:\n  \\<not> local.dom i k\n  i \\<noteq> k", "have \"(\\<exists>res. ?res!k = res \\<and> i \\<notin> set res)\""], ["proof (prove)\nusing this:\n  \\<not> local.dom i k\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res", "using ass"], ["proof (prove)\nusing this:\n  \\<not> local.dom i k\n  i \\<noteq> k\n  \\<not> local.dom i k\n\ngoal (1 subgoal):\n 1. \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res", "by (auto simp add:dom_def start_def nodes_def n_def)"], ["proof (state)\nthis:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res\n\ngoal (1 subgoal):\n 1. \\<not> local.dom i k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res", "show False"], ["proof (prove)\nusing this:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res\n\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "assume \"\\<exists>res. ?res ! k =  res \\<and> i \\<notin> set res\""], ["proof (state)\nthis:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res", "obtain rs where k_dom: \"?res ! k = rs\" and i_notin_rs: \"i \\<notin> set rs\""], ["proof (prove)\nusing this:\n  \\<exists>res. dom_kildall start ! k = res \\<and> i \\<notin> set res\n\ngoal (1 subgoal):\n 1. (\\<And>rs.\n        \\<lbrakk>dom_kildall start ! k = rs; i \\<notin> set rs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  dom_kildall start ! k = rs\n  i \\<notin> set rs\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "from iter_dom_properties dom_iter"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (dom_kildall start, ww)", "have \"(\\<forall>p < length ?res. stable r step ?res p)\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  iter f step start (unstables r step start) = (dom_kildall start, ww)\n\ngoal (1 subgoal):\n 1. \\<forall>p<length (dom_kildall start).\n       stable r step (dom_kildall start) p", "by (auto simp add:stables_def)"], ["proof (state)\nthis:\n  \\<forall>p<length (dom_kildall start). stable r step (dom_kildall start) p\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "with k_lt_n"], ["proof (chain)\npicking this:\n  k < n\n  \\<forall>p<length (dom_kildall start). stable r step (dom_kildall start) p", "have \"stable r step ?res k\""], ["proof (prove)\nusing this:\n  k < n\n  \\<forall>p<length (dom_kildall start). stable r step (dom_kildall start) p\n\ngoal (1 subgoal):\n 1. stable r step (dom_kildall start) k", "using len_res"], ["proof (prove)\nusing this:\n  k < n\n  \\<forall>p<length (dom_kildall start). stable r step (dom_kildall start) p\n  length (dom_kildall start) = n\n\ngoal (1 subgoal):\n 1. stable r step (dom_kildall start) k", "by auto"], ["proof (state)\nthis:\n  stable r step (dom_kildall start) k\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "with k_dom"], ["proof (chain)\npicking this:\n  dom_kildall start ! k = rs\n  stable r step (dom_kildall start) k", "have aux: \"\\<forall>(q,\\<tau>) \\<in> set (map (\\<lambda>pc. (pc, (k # rs))) (rev (sorted_list_of_set(succs k)))). \\<tau> \\<sqsubseteq>\\<^sub>r ?res!q\""], ["proof (prove)\nusing this:\n  dom_kildall start ! k = rs\n  stable r step (dom_kildall start) k\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\n             \\<in>set (map (\\<lambda>pc. (pc, k # rs))\n                        (rev (sorted_list_of_set (succs k)))).\n       \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! q", "by (simp add:stable_def r_def step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\n           \\<in>set (map (\\<lambda>pc. (pc, k # rs))\n                      (rev (sorted_list_of_set (succs k)))).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! q\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "with k_j2"], ["proof (chain)\npicking this:\n  j \\<in> set (rev (sorted_list_of_set (succs k)))\n  \\<forall>(q, \\<tau>)\n           \\<in>set (map (\\<lambda>pc. (pc, k # rs))\n                      (rev (sorted_list_of_set (succs k)))).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! q", "have \"(k # rs) \\<sqsubseteq>\\<^sub>r ?res!j\""], ["proof (prove)\nusing this:\n  j \\<in> set (rev (sorted_list_of_set (succs k)))\n  \\<forall>(q, \\<tau>)\n           \\<in>set (map (\\<lambda>pc. (pc, k # rs))\n                      (rev (sorted_list_of_set (succs k)))).\n     \\<tau> \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! q\n\ngoal (1 subgoal):\n 1. k # rs \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! j", "by auto"], ["proof (state)\nthis:\n  k # rs \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! j\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  k # rs \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! j", "have \"set (?res!j) \\<subseteq> set (k # rs) \\<or> ?res!j = k#rs\""], ["proof (prove)\nusing this:\n  k # rs \\<sqsubseteq>\\<^bsub>r\\<^esub> dom_kildall start ! j\n\ngoal (1 subgoal):\n 1. set (dom_kildall start ! j) \\<subseteq> set (k # rs) \\<or>\n    dom_kildall start ! j = k # rs", "by (auto simp add:lesssub_def lesub_def nodes_semi_def nodes_le_def r_def f_def)"], ["proof (state)\nthis:\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs) \\<or>\n  dom_kildall start ! j = k # rs\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs) \\<or>\n  dom_kildall start ! j = k # rs", "have \"set (?res!j) \\<subseteq> set (k # rs)\""], ["proof (prove)\nusing this:\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs) \\<or>\n  dom_kildall start ! j = k # rs\n\ngoal (1 subgoal):\n 1. set (dom_kildall start ! j) \\<subseteq> set (k # rs)", "by auto"], ["proof (state)\nthis:\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs)\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "with i_dom_j i_neq_k"], ["proof (chain)\npicking this:\n  i \\<in> set (dom_kildall start ! j)\n  i \\<noteq> k\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs)", "have \" i \\<in> set rs\""], ["proof (prove)\nusing this:\n  i \\<in> set (dom_kildall start ! j)\n  i \\<noteq> k\n  set (dom_kildall start ! j) \\<subseteq> set (k # rs)\n\ngoal (1 subgoal):\n 1. i \\<in> set rs", "by auto"], ["proof (state)\nthis:\n  i \\<in> set rs\n\ngoal (1 subgoal):\n 1. \\<exists>res.\n       dom_kildall start ! k = res \\<and>\n       i \\<notin> set res \\<Longrightarrow>\n    False", "with i_notin_rs"], ["proof (chain)\npicking this:\n  i \\<notin> set rs\n  i \\<in> set rs", "show False"], ["proof (prove)\nusing this:\n  i \\<notin> set rs\n  i \\<in> set rs\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.dom i k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adom_succs: \"dom i j \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> j \\<in> succs k \\<Longrightarrow> dom i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.dom i j; i \\<noteq> j; j \\<in> succs k\\<rbrakk>\n    \\<Longrightarrow> local.dom i k", "by (auto intro: dom_sdom sdom_dom_succs)"], ["", "lemma dom_kildall_is_strict: \"j < length start \\<Longrightarrow> dom_kildall start ! j = res \\<Longrightarrow> j \\<notin> set res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "assume j_dom: \"dom_kildall start ! j = res\" and j_lt: \"j < length start\""], ["proof (state)\nthis:\n  dom_kildall start ! j = res\n  j < length start\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "from j_dom"], ["proof (chain)\npicking this:\n  dom_kildall start ! j = res", "have iter_fst: \"(fst (iter f step start (unstables r step start))) ! j = res\""], ["proof (prove)\nusing this:\n  dom_kildall start ! j = res\n\ngoal (1 subgoal):\n 1. fst (iter f step start (unstables r step start)) ! j = res", "by (auto simp add:dom_kildall_def r_def f_def step_def start_def nodes_semi_def kildall_def)"], ["proof (state)\nthis:\n  fst (iter f step start (unstables r step start)) ! j = res\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "then"], ["proof (chain)\npicking this:\n  fst (iter f step start (unstables r step start)) ! j = res", "obtain ss w where iter: \"iter f step start (unstables r step start) = (ss, w)\""], ["proof (prove)\nusing this:\n  fst (iter f step start (unstables r step start)) ! j = res\n\ngoal (1 subgoal):\n 1. (\\<And>ss w.\n        iter f step start (unstables r step start) =\n        (ss, w) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  iter f step start (unstables r step start) = (ss, w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "with iter_fst"], ["proof (chain)\npicking this:\n  fst (iter f step start (unstables r step start)) ! j = res\n  iter f step start (unstables r step start) = (ss, w)", "have res: \"ss!j = res\""], ["proof (prove)\nusing this:\n  fst (iter f step start (unstables r step start)) ! j = res\n  iter f step start (unstables r step start) = (ss, w)\n\ngoal (1 subgoal):\n 1. ss ! j = res", "by auto"], ["proof (state)\nthis:\n  ss ! j = res\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "with dom_iter_properties2 iter"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (?ss, ?w) \\<longrightarrow>\n  (\\<forall>p<n. ?ss ! p \\<noteq> rev [0..<n])\n  iter f step start (unstables r step start) = (ss, w)\n  ss ! j = res", "have res_neq_all: \"res \\<noteq> rev [0..<n]\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss, ?w) \\<longrightarrow>\n  (\\<forall>p<n. ?ss ! p \\<noteq> rev [0..<n])\n  iter f step start (unstables r step start) = (ss, w)\n  ss ! j = res\n\ngoal (1 subgoal):\n 1. res \\<noteq> rev [0..<n]", "using len_start_is_n  j_lt len_start_is_n"], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (?ss, ?w) \\<longrightarrow>\n  (\\<forall>p<n. ?ss ! p \\<noteq> rev [0..<n])\n  iter f step start (unstables r step start) = (ss, w)\n  ss ! j = res\n  length start = n\n  j < length start\n  length start = n\n\ngoal (1 subgoal):\n 1. res \\<noteq> rev [0..<n]", "by auto"], ["proof (state)\nthis:\n  res \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "with iter iter_dom_properties"], ["proof (chain)\npicking this:\n  iter f step start (unstables r step start) = (ss, w)\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  res \\<noteq> rev [0..<n]", "have \"\\<forall>p < n. (ss!p) \\<noteq> rev [0..< n] \\<longrightarrow> (\\<forall>x\\<in>set ( (ss!p)). x < p)\""], ["proof (prove)\nusing this:\n  iter f step start (unstables r step start) = (ss, w)\n  iter f step start (unstables r step start) = (?ss', ?w') \\<longrightarrow>\n  wf_dom ?ss' ?w' \\<and>\n  stables r step ?ss' \\<and>\n  start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ?ss' \\<and>\n  (\\<forall>ts\\<in>list n A.\n      start [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts \\<and>\n      stables r step ts \\<longrightarrow>\n      ?ss' [\\<sqsubseteq>\\<^bsub>r\\<^esub>] ts)\n  res \\<noteq> rev [0..<n]\n\ngoal (1 subgoal):\n 1. \\<forall>p<n.\n       ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n       (\\<forall>x\\<in>set (ss ! p). x < p)", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>p<n.\n     ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "with j_lt len_start_is_n res res_neq_all"], ["proof (chain)\npicking this:\n  j < length start\n  length start = n\n  ss ! j = res\n  res \\<noteq> rev [0..<n]\n  \\<forall>p<n.\n     ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)", "have \"(\\<forall>x\\<in>set res. x < j)\""], ["proof (prove)\nusing this:\n  j < length start\n  length start = n\n  ss ! j = res\n  res \\<noteq> rev [0..<n]\n  \\<forall>p<n.\n     ss ! p \\<noteq> rev [0..<n] \\<longrightarrow>\n     (\\<forall>x\\<in>set (ss ! p). x < p)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set res. x < j", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set res. x < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length start; dom_kildall start ! j = res\\<rbrakk>\n    \\<Longrightarrow> j \\<notin> set res", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set res. x < j", "show \"j \\<notin> set res\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set res. x < j\n\ngoal (1 subgoal):\n 1. j \\<notin> set res", "by auto"], ["proof (state)\nthis:\n  j \\<notin> set res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sdom_asyc: \"strict_dom i j \\<Longrightarrow> j \\<in> set (g_V G) \\<Longrightarrow> i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "assume sdom_i_j: \"strict_dom i j\" and \"j \\<in> set (g_V G)\""], ["proof (state)\nthis:\n  strict_dom i j\n  j \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "then"], ["proof (chain)\npicking this:\n  strict_dom i j\n  j \\<in> set (g_V G)", "have j_lt: \"j < length start\""], ["proof (prove)\nusing this:\n  strict_dom i j\n  j \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. j < length start", "using start_def n_def nodes_def verts_set"], ["proof (prove)\nusing this:\n  strict_dom i j\n  j \\<in> set (g_V G)\n  start \\<equiv> [] # replicate (length (g_V G) - 1) (rev [0..<n])\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. j < length start", "by auto"], ["proof (state)\nthis:\n  j < length start\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "let ?start = \" [] # (replicate (length (g_V G) - 1) ( (rev[0..<length(g_V G)])))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "have eq_start: \"?start = start\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start = start", "using n_def nodes_def start_def"], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  start \\<equiv> [] # replicate (length (g_V G) - 1) (rev [0..<n])\n\ngoal (1 subgoal):\n 1. start = start", "by simp"], ["proof (state)\nthis:\n  start = start\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "from sdom_i_j"], ["proof (chain)\npicking this:\n  strict_dom i j", "have i_in: \"i \\<in> set (dom_kildall ?start !j)\""], ["proof (prove)\nusing this:\n  strict_dom i j\n\ngoal (1 subgoal):\n 1. i \\<in> set (dom_kildall start ! j)", "by (auto simp add:strict_dom_def)"], ["proof (state)\nthis:\n  i \\<in> set (dom_kildall start ! j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "from j_lt"], ["proof (chain)\npicking this:\n  j < length start", "have j_nin: \"j \\<notin> set (dom_kildall ?start !j)\""], ["proof (prove)\nusing this:\n  j < length start\n\ngoal (1 subgoal):\n 1. j \\<notin> set (dom_kildall start ! j)", "using eq_start"], ["proof (prove)\nusing this:\n  j < length start\n  start = start\n\ngoal (1 subgoal):\n 1. j \\<notin> set (dom_kildall start ! j)", "by (simp add: dom_kildall_is_strict)"], ["proof (state)\nthis:\n  j \\<notin> set (dom_kildall start ! j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_dom i j; j \\<in> set (g_V G)\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> j", "with i_in"], ["proof (chain)\npicking this:\n  i \\<in> set (dom_kildall start ! j)\n  j \\<notin> set (dom_kildall start ! j)", "show \"i \\<noteq> j\""], ["proof (prove)\nusing this:\n  i \\<in> set (dom_kildall start ! j)\n  j \\<notin> set (dom_kildall start ! j)\n\ngoal (1 subgoal):\n 1. i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma propa_dom_invariant_complete:\n  fixes i a b ss w \n  assumes b_n_nil: \"b \\<noteq> [] \"\n      and propa: \"propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w) \"\n      and wf_a_b: \"wf_dom a b\"\n      and non_strict: \"\\<forall>i. i < n \\<and>  k \\<notin> set (a!i) \\<longrightarrow> non_strict_dominate k i \"\n    shows \"wf_dom ss w \\<and> (\\<forall>i. i < n \\<and>  k \\<notin> set ( ss ! i) \\<longrightarrow> non_strict_dominate k i)\"  (is \"?PROP ?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_dom ss w \\<and>\n    (\\<forall>i.\n        i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n        non_strict_dominate k i)", "using assms"], ["proof (prove)\nusing this:\n  b \\<noteq> []\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  wf_dom a b\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. wf_dom ss w \\<and>\n    (\\<forall>i.\n        i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n        non_strict_dominate k i)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "let ?a_hdb = \"a!hd b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "let ?qs = \"step (hd b) (a!hd b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from wf_a_b b_n_nil propa"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)", "have wf_ss_w: \"wf_dom ss w\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n\ngoal (1 subgoal):\n 1. wf_dom ss w", "using propa_dom_invariant"], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<lbrakk>wf_dom ?ss ?w; ?w \\<noteq> [];\n   propa f (step (hd ?w) (?ss ! hd ?w)) ?ss (tl ?w) = (?ss', ?w')\\<rbrakk>\n  \\<Longrightarrow> wf_dom ?ss' ?w'\n\ngoal (1 subgoal):\n 1. wf_dom ss w", "by auto"], ["proof (state)\nthis:\n  wf_dom ss w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from wf_a_b"], ["proof (chain)\npicking this:\n  wf_dom a b", "have \"\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\" \n               and sorted_b: \"sorted b\" \n               and len_a: \"length a = n\" \n               and b_lt_n: \"\\<forall>x\\<in>set b. x < n  \""], ["proof (prove)\nusing this:\n  wf_dom a b\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A &&& Sorted_Less.sorted b) &&&\n    length a = n &&& \\<forall>x\\<in>set b. x < n", "by (auto simp add:wf_dom_def)"], ["proof (state)\nthis:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n", "have set_a: \"set a \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>\\<in>set a. \\<tau> \\<in> A\n  Sorted_Less.sorted b\n  length a = n\n  \\<forall>x\\<in>set b. x < n\n\ngoal (1 subgoal):\n 1. set a \\<subseteq> A", "by (auto intro:listI)"], ["proof (state)\nthis:\n  set a \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from sorted_b"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted b", "have sorted_tl_b: \"sorted (tl b)\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted b\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl b)", "using b_n_nil"], ["proof (prove)\nusing this:\n  Sorted_Less.sorted b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (tl b)", "by (induct b) auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (tl b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from b_lt_n b_n_nil"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []", "have hd_b_lt_n: \"hd b < n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set b. x < n\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd b < n", "by auto"], ["proof (state)\nthis:\n  hd b < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "with n_def nodes_def verts_set"], ["proof (chain)\npicking this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  hd b < n", "have \"hd b \\<in> set (g_V G)\""], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  hd b < n\n\ngoal (1 subgoal):\n 1. hd b \\<in> set (g_V G)", "using b_n_nil"], ["proof (prove)\nusing this:\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  hd b < n\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd b \\<in> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  hd b \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "then"], ["proof (chain)\npicking this:\n  hd b \\<in> set (g_V G)", "have fin_succ_hd_b: \"finite (succs (hd b))\""], ["proof (prove)\nusing this:\n  hd b \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. finite (succs (hd b))", "using fin_succs"], ["proof (prove)\nusing this:\n  hd b \\<in> set (g_V G)\n  \\<forall>v\\<in>set (g_V G). finite (succs v)\n\ngoal (1 subgoal):\n 1. finite (succs (hd b))", "by auto"], ["proof (state)\nthis:\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from wf_a_b b_n_nil"], ["proof (chain)\npicking this:\n  wf_dom a b\n  b \\<noteq> []", "have sorted_hd_b_a: \"sorted (rev (hd b # ?a_hdb))\"\n                       and step_pres_bounded: \" \\<forall>(q, \\<tau>)\\<in>set (step (hd b) ?a_hdb). q < length a \\<and> \\<tau> \\<in> A\""], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd b # a ! hd b)) &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "using propa_dom_invariant_auxi"], ["proof (prove)\nusing this:\n  wf_dom a b\n  b \\<noteq> []\n  \\<lbrakk>wf_dom ?a ?b; ?b \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?a ! hd ?b \\<noteq> rev [0..<n] \\<and>\n                    Sorted_Less.sorted (rev (hd ?b # ?a ! hd ?b)) \\<and>\n                    set (hd ?b # ?a ! hd ?b) \\<subseteq> set nodes \\<and>\n                    hd ?b # ?a ! hd ?b \\<in> A \\<and>\n                    (\\<forall>(q, \\<tau>)\n                              \\<in>set (step (hd ?b) (?a ! hd ?b)).\n                        q < length ?a \\<and> \\<tau> \\<in> A)\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (hd b # a ! hd b)) &&&\n    \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       q < length a \\<and> \\<tau> \\<in> A", "by auto"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from hd_b_lt_n"], ["proof (chain)\npicking this:\n  hd b < n", "have dist: \"distinct (map fst ?qs)\""], ["proof (prove)\nusing this:\n  hd b < n\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "using distinct_p"], ["proof (prove)\nusing this:\n  hd b < n\n  ?p < n \\<longrightarrow> distinct (map fst (step ?p (?ss ! ?p)))\n\ngoal (1 subgoal):\n 1. distinct (map fst (step (hd b) (a ! hd b)))", "by auto"], ["proof (state)\nthis:\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "with set_a step_pres_bounded sorted_tl_b len_a"], ["proof (chain)\npicking this:\n  set a \\<subseteq> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))", "have \"\\<forall>(q, \\<tau>) \\<in> set ?qs. (fst(propa f ?qs a (tl b)))!q = \\<tau> \\<squnion>\\<^bsub>f\\<^esub>a!q\""], ["proof (prove)\nusing this:\n  set a \\<subseteq> A\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n       \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by (auto dest:propa_property1)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q", "have propa_ss1: \"\\<forall>(q, \\<tau>) \\<in> set ?qs. ss!q =  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub>a!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! q =\n     \\<tau> \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n       ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q", "by (auto simp add:step_def exec_def transf_def)"], ["proof (state)\nthis:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "from step_pres_bounded sorted_tl_b set_a len_a dist"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))", "have  \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length a \\<Longrightarrow> (fst(propa f ?qs a (tl b)))!q = a!q\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     q < length a \\<and> \\<tau> \\<in> A\n  Sorted_Less.sorted (tl b)\n  set a \\<subseteq> A\n  length a = n\n  distinct (map fst (step (hd b) (a ! hd b)))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n        q < length a\\<rbrakk>\n       \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) !\n                         q =\n                         a ! q", "by (auto intro:propa_property2)"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "with propa"], ["proof (chain)\npicking this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q", "have exec2: \"\\<And>q. q \\<notin> set(map fst ?qs) \\<Longrightarrow> q < length a \\<Longrightarrow> ss!q = a!q\""], ["proof (prove)\nusing this:\n  propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w)\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> fst (propa f (step (hd b) (a ! hd b)) a (tl b)) ! ?q =\n                    a ! ?q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n        q < length a\\<rbrakk>\n       \\<Longrightarrow> ss ! q = a ! q", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "have \"(\\<forall>i. i < n \\<and> k \\<notin> set ( ss ! i) \\<longrightarrow> non_strict_dominate k i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n       non_strict_dominate k i", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "let ?a_i = \"a!i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "assume \"i < n \\<and> k \\<notin> set ( ss ! i) \""], ["proof (state)\nthis:\n  i < n \\<and> k \\<notin> set (ss ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  i < n \\<and> k \\<notin> set (ss ! i)", "have i_lt_n: \"i < n\" and k_nin_ss: \"k \\<notin> set (ss ! i) \""], ["proof (prove)\nusing this:\n  i < n \\<and> k \\<notin> set (ss ! i)\n\ngoal (1 subgoal):\n 1. i < n &&& k \\<notin> set (ss ! i)", "by auto"], ["proof (state)\nthis:\n  i < n\n  k \\<notin> set (ss ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "from non_strict"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i", "have g: \"i < n \\<and> a ! i =  ?a_i \\<and> k \\<notin> set ?a_i \\<Longrightarrow> non_strict_dominate k i\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. i < n \\<and>\n    a ! i = a ! i \\<and> k \\<notin> set (a ! i) \\<Longrightarrow>\n    non_strict_dominate k i", "by auto"], ["proof (state)\nthis:\n  i < n \\<and> a ! i = a ! i \\<and> k \\<notin> set (a ! i) \\<Longrightarrow>\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "have sorted_a_i: \"sorted (rev ?a_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (a ! i))", "using wf_a_b i_lt_n"], ["proof (prove)\nusing this:\n  wf_dom a b\n  i < n\n\ngoal (1 subgoal):\n 1. Sorted_Less.sorted (rev (a ! i))", "by (auto simp add:_wf_dom_def)"], ["proof (state)\nthis:\n  Sorted_Less.sorted (rev (a ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < n \\<and> k \\<notin> set (ss ! i) \\<Longrightarrow>\n       non_strict_dominate k i", "show \"non_strict_dominate k i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "proof(cases \"i \\<in> (succs (hd b))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "case True"], ["proof (state)\nthis:\n  i \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "note i_succ_hdb = this"], ["proof (state)\nthis:\n  i \\<in> succs (hd b)\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with propa_ss1"], ["proof (chain)\npicking this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  i \\<in> succs (hd b)", "have ss_i: \"ss!i =  (hd b # ?a_hdb) \\<squnion>\\<^bsub>f\\<^esub> a!i\""], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  i \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i", "using fin_succ_hd_b"], ["proof (prove)\nusing this:\n  \\<forall>(q, \\<tau>)\\<in>set (step (hd b) (a ! hd b)).\n     ss ! q = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! q\n  i \\<in> succs (hd b)\n  finite (succs (hd b))\n\ngoal (1 subgoal):\n 1. ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i", "have \"ss!i =  (hd b # ?a_hdb ) \\<squnion>\\<^bsub>f\\<^esub> ?a_i\""], ["proof (prove)\nusing this:\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i\n\ngoal (1 subgoal):\n 1. ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i", "by auto"], ["proof (state)\nthis:\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with sorted_hd_b_a sorted_a_i"], ["proof (chain)\npicking this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! i))\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i", "have \"set (ss!i) = set (hd b # ?a_hdb) \\<inter> set ?a_i\" \n                                     and ss_i_merge: \"ss!i =  ((inter_sorted_rev (hd b # ?a_hdb) ?a_i))\""], ["proof (prove)\nusing this:\n  Sorted_Less.sorted (rev (hd b # a ! hd b))\n  Sorted_Less.sorted (rev (a ! i))\n  ss ! i = hd b # a ! hd b \\<squnion>\\<^bsub>f\\<^esub> a ! i\n\ngoal (1 subgoal):\n 1. set (ss ! i) = set (hd b # a ! hd b) \\<inter> set (a ! i) &&&\n    ss ! i = inter_sorted_rev (hd b # a ! hd b) (a ! i)", "by (auto simp add:inter_sorted_correct f_def nodes_sup_def plussub_def)"], ["proof (state)\nthis:\n  set (ss ! i) = set (hd b # a ! hd b) \\<inter> set (a ! i)\n  ss ! i = inter_sorted_rev (hd b # a ! hd b) (a ! i)\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with k_nin_ss"], ["proof (chain)\npicking this:\n  k \\<notin> set (ss ! i)\n  set (ss ! i) = set (hd b # a ! hd b) \\<inter> set (a ! i)\n  ss ! i = inter_sorted_rev (hd b # a ! hd b) (a ! i)", "have k_nin': \"k \\<notin> set (hd b # ?a_hdb) \\<inter> set ?a_i\""], ["proof (prove)\nusing this:\n  k \\<notin> set (ss ! i)\n  set (ss ! i) = set (hd b # a ! hd b) \\<inter> set (a ! i)\n  ss ! i = inter_sorted_rev (hd b # a ! hd b) (a ! i)\n\ngoal (1 subgoal):\n 1. k \\<notin> set (hd b # a ! hd b) \\<inter> set (a ! i)", "by auto"], ["proof (state)\nthis:\n  k \\<notin> set (hd b # a ! hd b) \\<inter> set (a ! i)\n\ngoal (2 subgoals):\n 1. i \\<in> succs (hd b) \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "proof(cases \"k \\<notin> set ?a_i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i\n 2. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "case True"], ["proof (state)\nthis:\n  k \\<notin> set (a ! i)\n\ngoal (2 subgoals):\n 1. k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i\n 2. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  k \\<notin> set (a ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<notin> set (a ! i)\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "using i_lt_n g"], ["proof (prove)\nusing this:\n  k \\<notin> set (a ! i)\n  i < n\n  i < n \\<and> a ! i = a ! i \\<and> k \\<notin> set (a ! i) \\<Longrightarrow>\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by auto"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "case False"], ["proof (state)\nthis:\n  \\<not> k \\<notin> set (a ! i)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "with k_nin'"], ["proof (chain)\npicking this:\n  k \\<notin> set (hd b # a ! hd b) \\<inter> set (a ! i)\n  \\<not> k \\<notin> set (a ! i)", "have \"k \\<notin> set ?a_hdb\" and k_neq_hdb: \"k \\<noteq> hd b\""], ["proof (prove)\nusing this:\n  k \\<notin> set (hd b # a ! hd b) \\<inter> set (a ! i)\n  \\<not> k \\<notin> set (a ! i)\n\ngoal (1 subgoal):\n 1. k \\<notin> set (a ! hd b) &&& k \\<noteq> hd b", "by auto"], ["proof (state)\nthis:\n  k \\<notin> set (a ! hd b)\n  k \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "with hd_b_lt_n non_strict"], ["proof (chain)\npicking this:\n  hd b < n\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n  k \\<notin> set (a ! hd b)\n  k \\<noteq> hd b", "have n_k_hdb: \"non_strict_dominate k (hd b)\""], ["proof (prove)\nusing this:\n  hd b < n\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n  k \\<notin> set (a ! hd b)\n  k \\<noteq> hd b\n\ngoal (1 subgoal):\n 1. non_strict_dominate k (hd b)", "by auto"], ["proof (state)\nthis:\n  non_strict_dominate k (hd b)\n\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "from i_succ_hdb"], ["proof (chain)\npicking this:\n  i \\<in> succs (hd b)", "have \"(hd b, i)\\<in> g_E G\""], ["proof (prove)\nusing this:\n  i \\<in> succs (hd b)\n\ngoal (1 subgoal):\n 1. (hd b, i) \\<in> g_E G", "by (auto simp add:succs_def)"], ["proof (state)\nthis:\n  (hd b, i) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. \\<not> k \\<notin> set (a ! i) \\<Longrightarrow> non_strict_dominate k i", "with n_k_hdb k_neq_hdb"], ["proof (chain)\npicking this:\n  non_strict_dominate k (hd b)\n  k \\<noteq> hd b\n  (hd b, i) \\<in> g_E G", "show ?thesis"], ["proof (prove)\nusing this:\n  non_strict_dominate k (hd b)\n  k \\<noteq> hd b\n  (hd b, i) \\<in> g_E G\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "using non_sdominate_succ"], ["proof (prove)\nusing this:\n  non_strict_dominate k (hd b)\n  k \\<noteq> hd b\n  (hd b, i) \\<in> g_E G\n  \\<lbrakk>(?i, ?j) \\<in> g_E G; ?k \\<noteq> ?i;\n   non_strict_dominate ?k ?i\\<rbrakk>\n  \\<Longrightarrow> non_strict_dominate ?k ?j\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by auto"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "case False"], ["proof (state)\nthis:\n  i \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with exec2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  i \\<notin> succs (hd b)", "have \"ss!i = a!i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  i \\<notin> succs (hd b)\n\ngoal (1 subgoal):\n 1. ss ! i = a ! i", "using fin_succ_hd_b len_a i_lt_n"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<notin> set (map fst (step (hd b) (a ! hd b)));\n   ?q < length a\\<rbrakk>\n  \\<Longrightarrow> ss ! ?q = a ! ?q\n  i \\<notin> succs (hd b)\n  finite (succs (hd b))\n  length a = n\n  i < n\n\ngoal (1 subgoal):\n 1. ss ! i = a ! i", "by (auto simp add:step_def exec_def)"], ["proof (state)\nthis:\n  ss ! i = a ! i\n\ngoal (1 subgoal):\n 1. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with k_nin_ss"], ["proof (chain)\npicking this:\n  k \\<notin> set (ss ! i)\n  ss ! i = a ! i", "have \"k \\<notin> set (a!i)\""], ["proof (prove)\nusing this:\n  k \\<notin> set (ss ! i)\n  ss ! i = a ! i\n\ngoal (1 subgoal):\n 1. k \\<notin> set (a ! i)", "by auto"], ["proof (state)\nthis:\n  k \\<notin> set (a ! i)\n\ngoal (1 subgoal):\n 1. i \\<notin> succs (hd b) \\<Longrightarrow> non_strict_dominate k i", "with non_strict"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n  k \\<notin> set (a ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n  k \\<notin> set (a ! i)\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "using i_lt_n"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n     non_strict_dominate k i\n  k \\<notin> set (a ! i)\n  i < n\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by fastforce"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n     non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> [];\n     propa f (step (hd b) (a ! hd b)) a (tl b) = (ss, w); wf_dom a b;\n     \\<forall>i.\n        i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n        non_strict_dominate k i\\<rbrakk>\n    \\<Longrightarrow> wf_dom ss w \\<and>\n                      (\\<forall>i.\n                          i < n \\<and>\n                          k \\<notin> set (ss ! i) \\<longrightarrow>\n                          non_strict_dominate k i)", "with wf_ss_w"], ["proof (chain)\npicking this:\n  wf_dom ss w\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n     non_strict_dominate k i", "show \"?PROP ?P\""], ["proof (prove)\nusing this:\n  wf_dom ss w\n  \\<forall>i.\n     i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n     non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. wf_dom ss w \\<and>\n    (\\<forall>i.\n        i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n        non_strict_dominate k i)", "by auto"], ["proof (state)\nthis:\n  wf_dom ss w \\<and>\n  (\\<forall>i.\n      i < n \\<and> k \\<notin> set (ss ! i) \\<longrightarrow>\n      non_strict_dominate k i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma start_non_sdom: \" i < n \\<and> start!i =  res \\<and> k \\<notin> set res \\<longrightarrow> non_strict_dominate k i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<and> start ! i = res \\<and> k \\<notin> set res \\<longrightarrow>\n    non_strict_dominate k i", "proof(auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < n; k \\<notin> set (start ! i); res = start ! i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k i", "assume i_lt_n: \"i < n\" and k_nin: \"k \\<notin> set (start ! i)\""], ["proof (state)\nthis:\n  i < n\n  k \\<notin> set (start ! i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < n; k \\<notin> set (start ! i); res = start ! i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  i < n\n  k \\<notin> set (start ! i)", "have reach_i: \"reachable i\""], ["proof (prove)\nusing this:\n  i < n\n  k \\<notin> set (start ! i)\n\ngoal (1 subgoal):\n 1. reachable i", "using n_def nodes_def verts_set len_verts_gt0 reachable"], ["proof (prove)\nusing this:\n  i < n\n  k \\<notin> set (start ! i)\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n  set (g_V G) = {0..<length (g_V G)}\n  0 < length (g_V G)\n  \\<forall>v\\<in>set (g_V G). v \\<in> (g_E G)\\<^sup>* `` {0}\n\ngoal (1 subgoal):\n 1. reachable i", "by  (simp add:reachable_def)"], ["proof (state)\nthis:\n  reachable i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < n; k \\<notin> set (start ! i); res = start ! i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  reachable i", "obtain pa where pa_i: \"path_entry (g_E G) pa i\""], ["proof (prove)\nusing this:\n  reachable i\n\ngoal (1 subgoal):\n 1. (\\<And>pa.\n        path_entry (g_E G) pa i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reachable_path_entry"], ["proof (prove)\nusing this:\n  reachable i\n  reachable ?n \\<Longrightarrow> \\<exists>p. path_entry (g_E G) p ?n\n\ngoal (1 subgoal):\n 1. (\\<And>pa.\n        path_entry (g_E G) pa i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path_entry (g_E G) pa i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < n; k \\<notin> set (start ! i); res = start ! i\\<rbrakk>\n    \\<Longrightarrow> non_strict_dominate k i", "show \"non_strict_dominate k i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "proof(cases \"k \\<in> set (g_V G)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate k i\n 2. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "case True"], ["proof (state)\nthis:\n  k \\<in> set (g_V G)\n\ngoal (2 subgoals):\n 1. k \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate k i\n 2. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  k \\<in> set (g_V G)", "have \"k < n\""], ["proof (prove)\nusing this:\n  k \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. k < n", "using verts_set"], ["proof (prove)\nusing this:\n  k \\<in> set (g_V G)\n  set (g_V G) = {0..<length (g_V G)}\n\ngoal (1 subgoal):\n 1. k < n", "by (auto simp add:n_def nodes_def)"], ["proof (state)\nthis:\n  k < n\n\ngoal (2 subgoals):\n 1. k \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate k i\n 2. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  k < n", "have k_in_verts: \"k \\<in> set (g_V G)\" and k_in_verts': \"k \\<in> {0..<n}\""], ["proof (prove)\nusing this:\n  k < n\n\ngoal (1 subgoal):\n 1. k \\<in> set (g_V G) &&& k \\<in> {0..<n}", "using verts_set n_def nodes_def"], ["proof (prove)\nusing this:\n  k < n\n  set (g_V G) = {0..<length (g_V G)}\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. k \\<in> set (g_V G) &&& k \\<in> {0..<n}", "by auto"], ["proof (state)\nthis:\n  k \\<in> set (g_V G)\n  k \\<in> {0..<n}\n\ngoal (2 subgoals):\n 1. k \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate k i\n 2. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "show \"non_strict_dominate k i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "proof(cases \"i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "case True"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> non_strict_dominate k i\n 2. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "using any_sdominate_0 k_in_verts"], ["proof (prove)\nusing this:\n  i = 0\n  ?n \\<in> set (g_V G) \\<Longrightarrow> non_strict_dominate ?n 0\n  k \\<in> set (g_V G)\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by auto"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> 0", "have \"start!i = (rev [0..<n])\""], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. start ! i = rev [0..<n]", "using start_def i_lt_n n_def nodes_def"], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n  start \\<equiv> [] # replicate (length (g_V G) - 1) (rev [0..<n])\n  i < n\n  n \\<equiv> length nodes\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. start ! i = rev [0..<n]", "by (simp add:start_def)"], ["proof (state)\nthis:\n  start ! i = rev [0..<n]\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> non_strict_dominate k i", "with k_nin k_in_verts'"], ["proof (chain)\npicking this:\n  k \\<notin> set (start ! i)\n  k \\<in> {0..<n}\n  start ! i = rev [0..<n]", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<notin> set (start ! i)\n  k \\<in> {0..<n}\n  start ! i = rev [0..<n]\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by auto"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "case False"], ["proof (state)\nthis:\n  k \\<notin> set (g_V G)\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "note k_nin_verts = this"], ["proof (state)\nthis:\n  k \\<notin> set (g_V G)\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "have \"\\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> set pa \\<subseteq> set (g_V G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa i \\<longrightarrow>\n       set pa \\<subseteq> set (g_V G)", "using path_in_verts nodes_def"], ["proof (prove)\nusing this:\n  path_entry (g_E G) ?l ?v \\<Longrightarrow> set ?l \\<subseteq> set (g_V G)\n  nodes \\<equiv> g_V G\n\ngoal (1 subgoal):\n 1. \\<forall>pa.\n       path_entry (g_E G) pa i \\<longrightarrow>\n       set pa \\<subseteq> set (g_V G)", "by auto"], ["proof (state)\nthis:\n  \\<forall>pa.\n     path_entry (g_E G) pa i \\<longrightarrow>\n     set pa \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "with k_nin_verts"], ["proof (chain)\npicking this:\n  k \\<notin> set (g_V G)\n  \\<forall>pa.\n     path_entry (g_E G) pa i \\<longrightarrow>\n     set pa \\<subseteq> set (g_V G)", "have k_nin: \"\\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> k \\<notin> set pa\""], ["proof (prove)\nusing this:\n  k \\<notin> set (g_V G)\n  \\<forall>pa.\n     path_entry (g_E G) pa i \\<longrightarrow>\n     set pa \\<subseteq> set (g_V G)\n\ngoal (1 subgoal):\n 1. \\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> k \\<notin> set pa", "by (fastforce dest: contra_subsetD)"], ["proof (state)\nthis:\n  \\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "with pa_i"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa i\n  \\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> k \\<notin> set pa", "have \"k \\<notin> set pa\""], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa i\n  \\<forall>pa. path_entry (g_E G) pa i \\<longrightarrow> k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. k \\<notin> set pa", "by auto"], ["proof (state)\nthis:\n  k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. k \\<notin> set (g_V G) \\<Longrightarrow> non_strict_dominate k i", "with pa_i"], ["proof (chain)\npicking this:\n  path_entry (g_E G) pa i\n  k \\<notin> set pa", "show ?thesis"], ["proof (prove)\nusing this:\n  path_entry (g_E G) pa i\n  k \\<notin> set pa\n\ngoal (1 subgoal):\n 1. non_strict_dominate k i", "by (auto simp add: non_strict_dominate_def)"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  non_strict_dominate k i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_dom_invariant_complete:\n    shows \"\\<And>res.  iter f step start (unstables r step start) = (ss',w') \\<longrightarrow> i < n \\<and> ss'!i =  res \\<and> k \\<notin> set res \\<longrightarrow> non_strict_dominate k i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>res.\n       iter f step start (unstables r step start) =\n       (ss', w') \\<longrightarrow>\n       i < n \\<and>\n       ss' ! i = res \\<and> k \\<notin> set res \\<longrightarrow>\n       non_strict_dominate k i", "apply (unfold iter_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>res.\n       while (\\<lambda>(\\<tau>s, w). w \\<noteq> [])\n        (\\<lambda>(\\<tau>s, w).\n            let p = hd w in propa f (step p (\\<tau>s ! p)) \\<tau>s (tl w))\n        (start, unstables r step start) =\n       (ss', w') \\<longrightarrow>\n       i < n \\<and>\n       ss' ! i = res \\<and> k \\<notin> set res \\<longrightarrow>\n       non_strict_dominate k i", "apply(rule_tac  \n      P = \"(\\<lambda>(ss, w). wf_dom ss w \\<and> (\\<forall>i. (\\<exists>rs. i < n \\<and> ss!i =  rs \\<and> k \\<notin> set rs) \\<longrightarrow> non_strict_dominate k i))\" and\n      r = \"{(ss',ss). ss [\\<sqsubset>\\<^sub>r] ss'} <*lex*> (\\<lambda>(x,y). (sorted_list_of_set x, sorted_list_of_set y)) ` finite_psubset\" \n      in while_rule) \n  \\<comment> \\<open>Invariant holds initially:\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>res.\n       case (start, unstables r step start) of\n       (ss, w) \\<Rightarrow>\n         wf_dom ss w \\<and>\n         (\\<forall>i.\n             (\\<exists>rs.\n                 i < n \\<and>\n                 ss ! i = rs \\<and> k \\<notin> set rs) \\<longrightarrow>\n             non_strict_dominate k i)\n 2. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           wf_dom ss w \\<and>\n                           (\\<forall>i.\n                               (\\<exists>rs.\n                                   i < n \\<and>\n                                   ss ! i = rs \\<and>\n                                   k \\<notin> set rs) \\<longrightarrow>\n                               non_strict_dominate k i)\n 3. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         i < n \\<and>\n                         ss' ! i = res \\<and>\n                         k \\<notin> set res \\<longrightarrow>\n                         non_strict_dominate k i\n 4. \\<And>res.\n       wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n           (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n           finite_psubset)\n 5. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. wf_dom start (unstables r step start) \\<and>\n    (\\<forall>i.\n        i < n \\<and> k \\<notin> set (start ! i) \\<longrightarrow>\n        non_strict_dominate k i)\n 2. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           wf_dom ss w \\<and>\n                           (\\<forall>i.\n                               (\\<exists>rs.\n                                   i < n \\<and>\n                                   ss ! i = rs \\<and>\n                                   k \\<notin> set rs) \\<longrightarrow>\n                               non_strict_dominate k i)\n 3. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         i < n \\<and>\n                         ss' ! i = res \\<and>\n                         k \\<notin> set res \\<longrightarrow>\n                         non_strict_dominate k i\n 4. \\<And>res.\n       wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n           (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n           finite_psubset)\n 5. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (fastforce simp add:start_non_sdom wf_start)\n\n  \\<comment> \\<open>Invariant is preserved:\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> case case s of\n                              (\\<tau>s, w) \\<Rightarrow>\n                                let p = hd w\n                                in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                    (tl w) of\n                         (ss, w) \\<Rightarrow>\n                           wf_dom ss w \\<and>\n                           (\\<forall>i.\n                               (\\<exists>rs.\n                                   i < n \\<and>\n                                   ss ! i = rs \\<and>\n                                   k \\<notin> set rs) \\<longrightarrow>\n                               non_strict_dominate k i)\n 2. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         i < n \\<and>\n                         ss' ! i = res \\<and>\n                         k \\<notin> set res \\<longrightarrow>\n                         non_strict_dominate k i\n 3. \\<And>res.\n       wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n           (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n           finite_psubset)\n 4. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (fastforce dest:propa_dom_invariant_complete)\n\n  \\<comment> \\<open>Postcondition holds upon termination:\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        \\<not> (case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> s = (ss', w') \\<longrightarrow>\n                         i < n \\<and>\n                         ss' ! i = res \\<and>\n                         k \\<notin> set res \\<longrightarrow>\n                         non_strict_dominate k i\n 2. \\<And>res.\n       wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n           (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n           finite_psubset)\n 3. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp    \n\n  \\<comment> \\<open>Well-foundedness of the termination relation:\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>res.\n       wf ({(ss', ss). ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n           (\\<lambda>(x, y). (sorted_list_of_set x, sorted_list_of_set y)) `\n           finite_psubset)\n 2. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply (simp add:wf_listn_termination_rel)\n\n  \\<comment> \\<open>Loop decreases along termination relation:\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>res s.\n       \\<lbrakk>case s of\n                (ss, w) \\<Rightarrow>\n                  wf_dom ss w \\<and>\n                  (\\<forall>i.\n                      (\\<exists>rs.\n                          i < n \\<and>\n                          ss ! i = rs \\<and>\n                          k \\<notin> set rs) \\<longrightarrow>\n                      non_strict_dominate k i);\n        case s of (\\<tau>s, w) \\<Rightarrow> w \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (\\<tau>s, w) \\<Rightarrow>\n                            let p = hd w\n                            in propa f (step p (\\<tau>s ! p)) \\<tau>s\n                                (tl w),\n                          s)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>(x, y).\n                                   (sorted_list_of_set x,\n                                    sorted_list_of_set y)) `\n                               finite_psubset", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>b \\<noteq> []; wf_dom a b;\n        \\<forall>i.\n           i < n \\<and> k \\<notin> set (a ! i) \\<longrightarrow>\n           non_strict_dominate k i\\<rbrakk>\n       \\<Longrightarrow> (propa f (step (hd b) (a ! hd b)) a (tl b), a, b)\n                         \\<in> {(ss', ss).\n                                ss [\\<sqsubset>\\<^bsub>r\\<^esub>] ss'} <*lex*>\n                               (\\<lambda>x.\n                                   case x of\n                                   (x, y) \\<Rightarrow>\n                                     (sorted_list_of_set x,\nsorted_list_of_set y)) `\n                               finite_psubset", "apply (fastforce dest:propa_termination)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}