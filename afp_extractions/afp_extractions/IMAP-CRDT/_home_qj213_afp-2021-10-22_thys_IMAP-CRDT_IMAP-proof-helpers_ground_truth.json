{"file_name": "/home/qj213/afp-2021-10-22/thys/IMAP-CRDT/IMAP-proof-helpers.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMAP-CRDT", "problem_names": ["lemma (in imap) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\"", "lemma (in imap) create_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Create i2 e) \\<in> set xs\"\n  shows \"i1 = i2\"", "lemma (in imap) append_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Append i2 e) \\<in> set xs\"\n  shows \"i1 = i2\"", "lemma (in imap) expunge_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Expunge e mo i2) \\<in> set xs\"\n  shows \"i1 = i2\"", "lemma (in imap) store_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Store e mo i2) \\<in> set xs\"\n  shows \"i1 = i2\"", "lemma (in imap) [simp]:\n  shows \"added_files [] e = []\"", "lemma (in imap) [simp]:\n  shows \"added_files (xs @ ys) e = added_files xs e @ added_files ys e\"", "lemma (in imap) added_files_Broadcast_collapse [simp]:\n  shows \"added_files ([Broadcast e]) e' = []\"", "lemma (in imap) added_files_Deliver_Delete_collapse [simp]:\n  shows \"added_files ([Deliver (i, Delete is e)]) e' = []\"", "lemma (in imap) added_files_Deliver_Create_collapse [simp]:\n  shows \"added_files ([Deliver (i, Create j e)]) e' = []\"", "lemma (in imap) added_files_Deliver_Expunge_collapse [simp]:\n  shows \"added_files ([Deliver (i, Expunge e mo j)]) e' = []\"", "lemma (in imap) added_files_Deliver_Append_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_files ([Deliver (i, Append j e)]) e' = []\"", "lemma (in imap) added_files_Deliver_Append_same_collapse [simp]:\n  shows \"added_files ([Deliver (i, Append j e)]) e = [j]\"", "lemma (in imap) added_files_Deliver_Store_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_files ([Deliver (i, Store e mo j)]) e' = []\"", "lemma (in imap) added_files_Deliver_Store_same_collapse [simp]:\n  shows \"added_files ([Deliver (i, Store e mo j)]) e = [j]\"", "lemma (in imap) [simp]:\n  shows \"added_ids [] e = []\"", "lemma (in imap) split_ids [simp]:\n  shows \"added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e\"", "lemma (in imap) added_ids_Broadcast_collapse [simp]:\n  shows \"added_ids ([Broadcast e]) e' = []\"", "lemma (in imap) added_ids_Deliver_Delete_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Delete is e)]) e' = []\"", "lemma (in imap) added_ids_Deliver_Append_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Append j e)]) e' = []\"", "lemma (in imap) added_ids_Deliver_Store_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Store e mo j)]) e' = []\"", "lemma (in imap) added_ids_Deliver_Create_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Create j e)]) e' = []\"", "lemma (in imap) added_ids_Deliver_Expunge_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Expunge e mo j)]) e' = []\"", "lemma (in imap) added_ids_Deliver_Create_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Create j e)]) e = [j]\"", "lemma (in imap) added_ids_Deliver_Expunge_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Expunge e mo j)]) e = [j]\"", "lemma (in imap) expunge_id_not_in_set:\n  assumes \"i1 \\<notin> set (added_ids [Deliver (i, Expunge e mo i2)] e)\"\n  shows \"i1 \\<noteq> i2\"", "lemma (in imap) apply_operations_added_ids:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"fst (f x) \\<subseteq> set (added_ids es x)\"", "lemma (in imap) apply_operations_added_files:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"snd (f x) \\<subseteq> set (added_files es x)\"", "lemma (in imap) Deliver_added_files:\n  assumes \"xs prefix of j\"\n    and \"i \\<in> set (added_files xs e)\"\n  shows \"Deliver (i, Append i e) \\<in> set xs \\<or> (\\<exists> mo . Deliver (i, Store e mo i) \\<in> set xs)\""], "translations": [["", "lemma (in imap) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "proof(induction xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (snoc x xs)"], ["proof (state)\nthis:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?case"], ["proof (prove)\nusing this:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (Broadcast e)"], ["proof (state)\nthis:\n  x = Broadcast e\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Broadcast e\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "using snoc"], ["proof (prove)\nusing this:\n  x = Broadcast e\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "by force"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = Deliver e;\n     xs prefix of i \\<Longrightarrow>\n     \\<exists>y. apply_operations xs = Some y;\n     xs @ [Deliver e] prefix of i\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         apply_operations xs \\<bind> interp_msg e = Some y", "unfolding interp_msg_def apply_operations_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = Deliver e;\n     xs prefix of i \\<Longrightarrow>\n     \\<exists>y.\n        happens_before.apply_operations\n         (\\<lambda>msg. \\<langle>snd msg\\<rangle>)\n         (node_deliver_messages xs) (\\<lambda>x. ({}, {})) =\n        Some y;\n     xs @ [Deliver e] prefix of i\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         happens_before.apply_operations\n                          (\\<lambda>msg. \\<langle>snd msg\\<rangle>)\n                          (node_deliver_messages xs)\n                          (\\<lambda>x. ({}, {})) \\<bind>\n                         \\<langle>snd e\\<rangle> =\n                         Some y", "by (metis (no_types, lifting) bind.bind_lunit interpret_op_def prefix_of_appendD)"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) create_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Create i2 e) \\<in> set xs\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2", "have \"\\<exists>s. valid_behaviours s (i1, Create i2 e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Create i2 e)", "using assms deliver_in_prefix_is_valid"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Deliver (i1, Create i2 e) \\<in> set xs\n  \\<lbrakk>?xs prefix of ?i; Deliver ?m \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>state. valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Create i2 e)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_behaviours s (i1, Create i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_behaviours s (i1, Create i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "by(simp add: valid_behaviours_def)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) append_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Append i2 e) \\<in> set xs\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2", "have \"\\<exists>s. valid_behaviours s (i1, Append i2 e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Append i2 e)", "using assms deliver_in_prefix_is_valid"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Deliver (i1, Append i2 e) \\<in> set xs\n  \\<lbrakk>?xs prefix of ?i; Deliver ?m \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>state. valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Append i2 e)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_behaviours s (i1, Append i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_behaviours s (i1, Append i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "by(simp add: valid_behaviours_def)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) expunge_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Expunge e mo i2) \\<in> set xs\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2", "have \"\\<exists>s. valid_behaviours s (i1, Expunge e mo i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Expunge e mo i2)", "using assms deliver_in_prefix_is_valid"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Deliver (i1, Expunge e mo i2) \\<in> set xs\n  \\<lbrakk>?xs prefix of ?i; Deliver ?m \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>state. valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Expunge e mo i2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_behaviours s (i1, Expunge e mo i2)\n\ngoal (1 subgoal):\n 1. i1 = i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_behaviours s (i1, Expunge e mo i2)\n\ngoal (1 subgoal):\n 1. i1 = i2", "by(simp add: valid_behaviours_def)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) store_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Store e mo i2) \\<in> set xs\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2", "have \"\\<exists>s. valid_behaviours s (i1, Store e mo i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Store e mo i2)", "using assms deliver_in_prefix_is_valid"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Deliver (i1, Store e mo i2) \\<in> set xs\n  \\<lbrakk>?xs prefix of ?i; Deliver ?m \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>state. valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Store e mo i2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_behaviours s (i1, Store e mo i2)\n\ngoal (1 subgoal):\n 1. i1 = i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_behaviours s (i1, Store e mo i2)\n\ngoal (1 subgoal):\n 1. i1 = i2", "by(simp add: valid_behaviours_def)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in imap) added_ids :: \"('id \\<times> ('id, 'b) operation) event list \\<Rightarrow> 'b \\<Rightarrow> 'id list\" where\n  \"added_ids es p \\<equiv> List.map_filter (\\<lambda>x. case x of \n    Deliver (i, Create j e) \\<Rightarrow> if e = p then Some j else None | \n    Deliver (i, Expunge e mo j) \\<Rightarrow> if e = p then Some j else None |\n    _ \\<Rightarrow> None) es\""], ["", "definition (in imap) added_files :: \"('id \\<times> ('id, 'b) operation) event list \\<Rightarrow> 'b \\<Rightarrow> 'id list\" where\n  \"added_files es p \\<equiv> List.map_filter (\\<lambda>x. case x of \n    Deliver (i, Append j e) \\<Rightarrow> if e = p then Some j else None |\n    Deliver (i, Store e mo j) \\<Rightarrow> if e = p then Some j else None |\n    _ \\<Rightarrow> None) es\"\n\n\\<comment> \\<open>added files simplifier\\<close>"], ["", "lemma (in imap) [simp]:\n  shows \"added_files [] e = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [] e = []", "by (auto simp: added_files_def map_filter_def)"], ["", "lemma (in imap) [simp]:\n  shows \"added_files (xs @ ys) e = added_files xs e @ added_files ys e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files (xs @ ys) e = added_files xs e @ added_files ys e", "by (auto simp: added_files_def map_filter_append)"], ["", "lemma (in imap) added_files_Broadcast_collapse [simp]:\n  shows \"added_files ([Broadcast e]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Broadcast e] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Delete_collapse [simp]:\n  shows \"added_files ([Deliver (i, Delete is e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Deliver (i, Delete is e)] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Create_collapse [simp]:\n  shows \"added_files ([Deliver (i, Create j e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Deliver (i, Create j e)] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Expunge_collapse [simp]:\n  shows \"added_files ([Deliver (i, Expunge e mo j)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Deliver (i, Expunge e mo j)] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Append_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_files ([Deliver (i, Append j e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> e' \\<Longrightarrow>\n    added_files [Deliver (i, Append j e)] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Append_same_collapse [simp]:\n  shows \"added_files ([Deliver (i, Append j e)]) e = [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Deliver (i, Append j e)] e = [j]", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Store_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_files ([Deliver (i, Store e mo j)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> e' \\<Longrightarrow>\n    added_files [Deliver (i, Store e mo j)] e' = []", "by (auto simp: added_files_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_files_Deliver_Store_same_collapse [simp]:\n  shows \"added_files ([Deliver (i, Store e mo j)]) e = [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_files [Deliver (i, Store e mo j)] e = [j]", "by (auto simp: added_files_def map_filter_append map_filter_def)\n\n\n\\<comment> \\<open>added ids simplifier\\<close>"], ["", "lemma (in imap) [simp]:\n  shows \"added_ids [] e = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [] e = []", "by (auto simp: added_ids_def map_filter_def)"], ["", "lemma (in imap) split_ids [simp]:\n  shows \"added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e", "by (auto simp: added_ids_def map_filter_append)"], ["", "lemma (in imap) added_ids_Broadcast_collapse [simp]:\n  shows \"added_ids ([Broadcast e]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Broadcast e] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Delete_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Delete is e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Delete is e)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Append_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Append j e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Append j e)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Store_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Store e mo j)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Store e mo j)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Create_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Create j e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> e' \\<Longrightarrow>\n    added_ids [Deliver (i, Create j e)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Expunge_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Expunge e mo j)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> e' \\<Longrightarrow>\n    added_ids [Deliver (i, Expunge e mo j)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Create_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Create j e)]) e = [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Create j e)] e = [j]", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) added_ids_Deliver_Expunge_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Expunge e mo j)]) e = [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Expunge e mo j)] e = [j]", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in imap) expunge_id_not_in_set:\n  assumes \"i1 \\<notin> set (added_ids [Deliver (i, Expunge e mo i2)] e)\"\n  shows \"i1 \\<noteq> i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2", "using assms"], ["proof (prove)\nusing this:\n  i1 \\<notin> set (added_ids [Deliver (i, Expunge e mo i2)] e)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2", "by simp"], ["", "lemma (in imap) apply_operations_added_ids:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"fst (f x) \\<subseteq> set (added_ids es x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (f x) \\<subseteq> set (added_ids es x)", "using assms"], ["proof (prove)\nusing this:\n  es prefix of j\n  apply_operations es = Some f\n\ngoal (1 subgoal):\n 1. fst (f x) \\<subseteq> set (added_ids es x)", "proof (induct es arbitrary: f rule: rev_induct, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [xa]) x)", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> fst (?f3 x) \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [xa]) x)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> fst (?f3 x) \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "proof (cases x, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "moreover"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "obtain a b where \"e = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> fst (f x)\n                                     \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e\n  e = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> fst (?f3 x) \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)", "by(case_tac b; clarsimp simp: interp_msg_def split: bind_splits,\n          force split: if_split_asm simp add: op_elem_def interpret_op_def)"], ["proof (state)\nthis:\n  fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (f x) \\<subseteq> set (added_ids (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) apply_operations_added_files:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"snd (f x) \\<subseteq> set (added_files es x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (f x) \\<subseteq> set (added_files es x)", "using assms"], ["proof (prove)\nusing this:\n  es prefix of j\n  apply_operations es = Some f\n\ngoal (1 subgoal):\n 1. snd (f x) \\<subseteq> set (added_files es x)", "proof (induct es arbitrary: f rule: rev_induct, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [xa]) x)", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> snd (?f3 x) \\<subseteq> set (added_files xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [xa]) x)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> snd (?f3 x) \\<subseteq> set (added_files xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. snd (f x) \\<subseteq> set (added_files (xs @ [x]) x)", "proof (cases x, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [x]) x)", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [x]) x)", "moreover"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [x]) x)", "obtain a b where \"e = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> snd (f x)\n                                     \\<subseteq> set (added_files xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> snd (f x)\n                         \\<subseteq> set (added_files (xs @ [x]) x)", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e\n  e = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. snd (f x) \\<subseteq> set (added_files (xs @ [x]) x)", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f3\\<rbrakk>\n  \\<Longrightarrow> snd (?f3 x) \\<subseteq> set (added_files xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. snd (f x) \\<subseteq> set (added_files (xs @ [x]) x)", "by(case_tac b; clarsimp simp: interp_msg_def split: bind_splits,\n          force split: if_split_asm simp add: op_elem_def interpret_op_def)"], ["proof (state)\nthis:\n  snd (f x) \\<subseteq> set (added_files (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (f x) \\<subseteq> set (added_files (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in imap) Deliver_added_files:\n  assumes \"xs prefix of j\"\n    and \"i \\<in> set (added_files xs e)\"\n  shows \"Deliver (i, Append i e) \\<in> set xs \\<or> (\\<exists> mo . Deliver (i, Store e mo i) \\<in> set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i, Append i e) \\<in> set xs \\<or>\n    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set xs)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of j\n  i \\<in> set (added_files xs e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Append i e) \\<in> set xs \\<or>\n    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set xs)", "proof (induct xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j;\n        i \\<in> set (added_files (xs @ [x]) e)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set xs)\n  xs @ [x] prefix of j\n  i \\<in> set (added_files (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j;\n        i \\<in> set (added_files (xs @ [x]) e)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set xs)\n  xs @ [x] prefix of j\n  i \\<in> set (added_files (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "proof (cases x, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j; i \\<in> set (added_files (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "case X: (Deliver e')"], ["proof (state)\nthis:\n  x = Deliver e'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j; i \\<in> set (added_files (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  x = Deliver e'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j; i \\<in> set (added_files (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "obtain a b where E: \"e' = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e' = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e' = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [x] prefix of j; i \\<in> set (added_files (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n                         (\\<exists>mo.\n                             Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e'\n  e' = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e'\n  e' = (a, b)\n\ngoal (1 subgoal):\n 1. Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e'\n  e' = (a, b)\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set xs)\n  xs @ [x] prefix of j\n  i \\<in> set (added_files (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n    (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set (xs @ [x]))", "apply (case_tac b; clarify)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Create x11 x12)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Create x11 x12)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Create x11 x12)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Create x11 x12)]) e);\n        x = Deliver (a, Create x11 x12); e' = (a, Create x11 x12);\n        b = Create x11 x12;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Create x11 x12)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Create x11 x12)])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Delete x21 x22)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Delete x21 x22)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Delete x21 x22)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Delete x21 x22)]) e);\n        x = Deliver (a, Delete x21 x22); e' = (a, Delete x21 x22);\n        b = Delete x21 x22;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Delete x21 x22)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Delete x21 x22)])\n 3. \\<And>x31 x32.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        x = Deliver (a, Append x31 x32); e' = (a, Append x31 x32);\n        b = Append x31 x32;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Append x31 x32)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Append x31 x32)])\n 4. \\<And>x41 x42 x43.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        x = Deliver (a, Expunge x41 x42 x43); e' = (a, Expunge x41 x42 x43);\n        b = Expunge x41 x42 x43;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "apply (simp,metis prefix_of_appendD,force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x31 x32.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        x = Deliver (a, Append x31 x32); e' = (a, Append x31 x32);\n        b = Append x31 x32;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Append x31 x32)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Append x31 x32)])\n 2. \\<And>x41 x42 x43.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        x = Deliver (a, Expunge x41 x42 x43); e' = (a, Expunge x41 x42 x43);\n        b = Expunge x41 x42 x43;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "using append_id_valid"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xs prefix of ?j;\n   Deliver (?i1.0, Append ?i2.0 ?e) \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> ?i1.0 = ?i2.0\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Append x31 x32)]) e);\n        x = Deliver (a, Append x31 x32); e' = (a, Append x31 x32);\n        b = Append x31 x32;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Append x31 x32)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Append x31 x32)])\n 2. \\<And>x41 x42 x43.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        x = Deliver (a, Expunge x41 x42 x43); e' = (a, Expunge x41 x42 x43);\n        b = Expunge x41 x42 x43;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x31 x32.\n       \\<lbrakk>i \\<in> set (added_files xs e) \\<or>\n                i \\<in> set (added_files [Deliver (a, Append x31 x32)] e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        x = Deliver (a, Append x31 x32); e' = (a, Append x31 x32);\n        b = Append x31 x32;\n        \\<forall>mo. Deliver (i, Store e mo i) \\<notin> set xs;\n        \\<And>xs j i1 i2 e.\n           \\<lbrakk>xs prefix of j;\n            Deliver (i1, Append i2 e) \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> i1 = i2\\<rbrakk>\n       \\<Longrightarrow> i = a \\<and> i = x31 \\<and> e = x32 \\<or>\n                         Deliver (i, Append i e) \\<in> set xs\n 2. \\<And>x41 x42 x43.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        x = Deliver (a, Expunge x41 x42 x43); e' = (a, Expunge x41 x42 x43);\n        b = Expunge x41 x42 x43;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "using E"], ["proof (prove)\nusing this:\n  e' = (a, b)\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32.\n       \\<lbrakk>i \\<in> set (added_files xs e) \\<or>\n                i \\<in> set (added_files [Deliver (a, Append x31 x32)] e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Append x31 x32)] prefix of j;\n        x = Deliver (a, Append x31 x32); e' = (a, Append x31 x32);\n        b = Append x31 x32;\n        \\<forall>mo. Deliver (i, Store e mo i) \\<notin> set xs;\n        \\<And>xs j i1 i2 e.\n           \\<lbrakk>xs prefix of j;\n            Deliver (i1, Append i2 e) \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> i1 = i2\\<rbrakk>\n       \\<Longrightarrow> i = a \\<and> i = x31 \\<and> e = x32 \\<or>\n                         Deliver (i, Append i e) \\<in> set xs\n 2. \\<And>x41 x42 x43.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Expunge x41 x42 x43)])\n                      e);\n        x = Deliver (a, Expunge x41 x42 x43); e' = (a, Expunge x41 x42 x43);\n        b = Expunge x41 x42 x43;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Expunge x41 x42 x43)])\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "apply (metis \n          added_files_Deliver_Append_diff_collapse added_files_Deliver_Append_same_collapse \n          empty_iff in_set_conv_decomp list.set(1) prefix_of_appendD set_ConsD, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       \\<lbrakk>i \\<in> set (added_files xs e);\n        xs prefix of j \\<Longrightarrow>\n        Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        x = Deliver (a, Expunge x41 x42 x43); b = Expunge x41 x42 x43;\n        \\<forall>mo. Deliver (i, Store e mo i) \\<notin> set xs;\n        e' = (a, Expunge x41 x42 x43)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "using E apply_operations_added_files"], ["proof (prove)\nusing this:\n  e' = (a, b)\n  \\<lbrakk>?es prefix of ?j; apply_operations ?es = Some ?f\\<rbrakk>\n  \\<Longrightarrow> snd (?f ?x) \\<subseteq> set (added_files ?es ?x)\n\ngoal (2 subgoals):\n 1. \\<And>x41 x42 x43.\n       \\<lbrakk>i \\<in> set (added_files xs e);\n        xs prefix of j \\<Longrightarrow>\n        Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Expunge x41 x42 x43)] prefix of j;\n        x = Deliver (a, Expunge x41 x42 x43); b = Expunge x41 x42 x43;\n        \\<forall>mo. Deliver (i, Store e mo i) \\<notin> set xs;\n        e' = (a, Expunge x41 x42 x43)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_files xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                                  (\\<exists>mo.\nDeliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs \\<or>\n                          (\\<exists>mo.\n                              Deliver (i, Store e mo i) \\<in> set xs);\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        i \\<in> set (added_files (xs @ [Deliver (a, Store x51 x52 x53)]) e);\n        x = Deliver (a, Store x51 x52 x53); e' = (a, Store x51 x52 x53);\n        b = Store x51 x52 x53;\n        \\<nexists>mo.\n           Deliver (i, Store e mo i)\n           \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e)\n                         \\<in> set (xs @ [Deliver (a, Store x51 x52 x53)])", "apply (blast,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53.\n       \\<lbrakk>i \\<in> set (added_files xs e) \\<or>\n                i \\<in> set (added_files [Deliver (a, Store x51 x52 x53)]\n                              e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        x = Deliver (a, Store x51 x52 x53); b = Store x51 x52 x53;\n        \\<forall>mo.\n           (mo = x52 \\<longrightarrow>\n            e = x51 \\<longrightarrow>\n            i = a \\<longrightarrow> a \\<noteq> x53) \\<and>\n           Deliver (i, Store e mo i) \\<notin> set xs;\n        e' = (a, Store x51 x52 x53);\n        \\<And>es j f x.\n           \\<lbrakk>es prefix of j; apply_operations es = Some f\\<rbrakk>\n           \\<Longrightarrow> snd (f x)\n                             \\<subseteq> set (added_files es x)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs", "using E apply_operations_added_files"], ["proof (prove)\nusing this:\n  e' = (a, b)\n  \\<lbrakk>?es prefix of ?j; apply_operations ?es = Some ?f\\<rbrakk>\n  \\<Longrightarrow> snd (?f ?x) \\<subseteq> set (added_files ?es ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x51 x52 x53.\n       \\<lbrakk>i \\<in> set (added_files xs e) \\<or>\n                i \\<in> set (added_files [Deliver (a, Store x51 x52 x53)]\n                              e);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_files xs e)\\<rbrakk>\n        \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs;\n        xs @ [Deliver (a, Store x51 x52 x53)] prefix of j;\n        x = Deliver (a, Store x51 x52 x53); b = Store x51 x52 x53;\n        \\<forall>mo.\n           (mo = x52 \\<longrightarrow>\n            e = x51 \\<longrightarrow>\n            i = a \\<longrightarrow> a \\<noteq> x53) \\<and>\n           Deliver (i, Store e mo i) \\<notin> set xs;\n        e' = (a, Store x51 x52 x53);\n        \\<And>es j f x.\n           \\<lbrakk>es prefix of j; apply_operations es = Some f\\<rbrakk>\n           \\<Longrightarrow> snd (f x)\n                             \\<subseteq> set (added_files es x)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Append i e) \\<in> set xs", "by (metis Un_iff \n          added_files_Deliver_Store_diff_collapse added_files_Deliver_Store_same_collapse empty_iff \n          empty_set list.set_intros(1) prefix_of_appendD set_ConsD set_append store_id_valid)"], ["proof (state)\nthis:\n  Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n  (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Deliver (i, Append i e) \\<in> set (xs @ [x]) \\<or>\n  (\\<exists>mo. Deliver (i, Store e mo i) \\<in> set (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}