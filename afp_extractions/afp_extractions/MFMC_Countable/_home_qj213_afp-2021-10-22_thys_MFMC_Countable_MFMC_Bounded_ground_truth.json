{"file_name": "/home/qj213/afp-2021-10-22/thys/MFMC_Countable/MFMC_Bounded.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFMC_Countable", "problem_names": ["lemma countable_A [simp]: \"countable (A \\<Gamma>)\"", "lemma unhindered_criterion [rule_format]:\n  assumes \"\\<not> hindered \\<Gamma>\"\n  shows \"\\<forall>X \\<subseteq> A \\<Gamma>. finite X \\<longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y)\"", "lemma nn_integral_count_space_top_approx:\n  fixes f :: \"nat => ennreal\" and b :: ennreal\n  assumes \"nn_integral (count_space UNIV) f = top\"\n  and \"b < top\"\n  obtains n where \"b < sum f {..<n}\"", "lemma One_le_of_nat_ennreal: \"(1 :: ennreal) \\<le> of_nat x \\<longleftrightarrow> 1 \\<le> x\"", "theorem unhindered_linkable_bounded:\n  assumes \"\\<not> hindered \\<Gamma>\"\n  shows \"linkable \\<Gamma>\"", "lemma bounded_countable_bipartite_web_of: \"bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)\"\n  (is \"bounded_countable_bipartite_web ?\\<Gamma>\")", "theorem loose_linkable_bounded:\n  assumes \"loose \\<Gamma>\"\n  shows \"linkable \\<Gamma>\"", "lemma bounded_countable_web_quotient_web: \"bounded_countable_web (quotient_web \\<Gamma> f)\" (is \"bounded_countable_web ?\\<Gamma>\")", "lemma ex_orthogonal_current:\n  \"\\<exists>f S. web_flow \\<Gamma> f \\<and> separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S\"", "lemma \\<Delta>''_bounded_countable_network: \"bounded_countable_network \\<Delta>''\"\n  if \"\\<And>x. \\<lbrakk> x \\<in> \\<^bold>V; x \\<noteq> source \\<Delta> \\<rbrakk> \\<Longrightarrow> d_OUT (capacity \\<Delta>) x < \\<top>\"", "lemma bounded_countable_web_web_of_network: \n  assumes source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and undead: \"\\<And>x y. edge \\<Delta> x y \\<Longrightarrow> (\\<exists>z. edge \\<Delta> y z) \\<or> (\\<exists>z. edge \\<Delta> z x)\"\n  and source_sink: \"\\<not> edge \\<Delta> (source \\<Delta>) (sink \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  shows \"bounded_countable_web (web_of_network \\<Delta>)\" (is \"bounded_countable_web ?\\<Gamma>\")", "lemma max_flow_min_cut'_bounded:\n  assumes source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and undead: \"\\<And>x y. edge \\<Delta> x y \\<Longrightarrow> (\\<exists>z. edge \\<Delta> y z) \\<or> (\\<exists>z. edge \\<Delta> z x)\"\n  and source_sink: \"\\<not> edge \\<Delta> (source \\<Delta>) (sink \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\"", "lemma max_flow_min_cut''_bounded:\n  assumes sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\"", "lemma max_flow_min_cut'''_bounded:\n  assumes sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\"", "lemma \\<Delta>'''_bounded_countable_network: \"bounded_countable_network \\<Delta>'''\"", "theorem max_flow_min_cut_bounded:\n  \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\""], "translations": [["", "lemma countable_A [simp]: \"countable (A \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (A \\<Gamma>)", "using A_vertex countable_V"], ["proof (prove)\nusing this:\n  A \\<Gamma> \\<subseteq> \\<^bold>V\n  countable \\<^bold>V\n\ngoal (1 subgoal):\n 1. countable (A \\<Gamma>)", "by(blast intro: countable_subset)"], ["", "lemma unhindered_criterion [rule_format]:\n  assumes \"\\<not> hindered \\<Gamma>\"\n  shows \"\\<forall>X \\<subseteq> A \\<Gamma>. finite X \\<longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<subseteq>A \\<Gamma>.\n       finite X \\<longrightarrow>\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n              (weight \\<Gamma>)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> hindered \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<subseteq>A \\<Gamma>.\n       finite X \\<longrightarrow>\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n              (weight \\<Gamma>)", "proof(rule contrapos_np)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n             finite X \\<longrightarrow>\n             integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n             \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                    (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n             finite X \\<longrightarrow>\n             integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n             \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                    (weight \\<Gamma>))", "obtain X where \"X \\<in> {X. X \\<subseteq> A \\<Gamma> \\<and> finite X \\<and> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) < (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x)}\" (is \"_ \\<in> Collect ?P\")"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n             finite X \\<longrightarrow>\n             integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n             \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                    (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        X \\<in> {X. X \\<subseteq> A \\<Gamma> \\<and>\n                    finite X \\<and>\n                    integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                     (weight \\<Gamma>)\n                    < integral\\<^sup>N (count_space X)\n                       (weight \\<Gamma>)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: not_le)"], ["proof (state)\nthis:\n  X \\<in> {X. X \\<subseteq> A \\<Gamma> \\<and>\n              finite X \\<and>\n              integral\\<^sup>N (count_space (\\<^bold>E `` X))\n               (weight \\<Gamma>)\n              < integral\\<^sup>N (count_space X) (weight \\<Gamma>)}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "from wf_eq_minimal[THEN iffD1, OF wf_finite_psubset, rule_format, OF this, simplified]"], ["proof (chain)\npicking this:\n  \\<exists>z\\<subseteq>A \\<Gamma>.\n     finite z \\<and>\n     integral\\<^sup>N (count_space {y. \\<exists>x\\<in>z. edge \\<Gamma> x y})\n      (weight \\<Gamma>)\n     < integral\\<^sup>N (count_space z) (weight \\<Gamma>) \\<and>\n     (\\<forall>y\\<subset>z.\n         finite y \\<longrightarrow>\n         y \\<subseteq> A \\<Gamma> \\<longrightarrow>\n         \\<not> integral\\<^sup>N\n                 (count_space {ya. \\<exists>x\\<in>y. edge \\<Gamma> x ya})\n                 (weight \\<Gamma>)\n                < integral\\<^sup>N (count_space y) (weight \\<Gamma>))", "obtain X where X_A: \"X \\<subseteq> A \\<Gamma>\" and fin_X [simp]: \"finite X\"\n    and less: \"(\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) < (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x)\"\n    and minimal: \"\\<And>X'. X' \\<subset> X \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X'. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X'. weight \\<Gamma> y)\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<subseteq>A \\<Gamma>.\n     finite z \\<and>\n     integral\\<^sup>N (count_space {y. \\<exists>x\\<in>z. edge \\<Gamma> x y})\n      (weight \\<Gamma>)\n     < integral\\<^sup>N (count_space z) (weight \\<Gamma>) \\<and>\n     (\\<forall>y\\<subset>z.\n         finite y \\<longrightarrow>\n         y \\<subseteq> A \\<Gamma> \\<longrightarrow>\n         \\<not> integral\\<^sup>N\n                 (count_space {ya. \\<exists>x\\<in>y. edge \\<Gamma> x ya})\n                 (weight \\<Gamma>)\n                < integral\\<^sup>N (count_space y) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<subseteq> A \\<Gamma>; finite X;\n         integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n         < integral\\<^sup>N (count_space X) (weight \\<Gamma>);\n         \\<And>X'.\n            X' \\<subset> X \\<Longrightarrow>\n            integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n            \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X'))\n                   (weight \\<Gamma>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: not_less)(meson finite_subset order_trans psubset_imp_subset)"], ["proof (state)\nthis:\n  X \\<subseteq> A \\<Gamma>\n  finite X\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  ?X' \\<subset> X \\<Longrightarrow>\n  integral\\<^sup>N (count_space ?X') (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` ?X')) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have nonempty: \"X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<noteq> {}", "using less"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  X \\<noteq> {}", "obtain xx where xx: \"xx \\<in> X\""], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>xx. xx \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "define f where\n    \"f x = (if x = xx then (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) - (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. weight \\<Gamma> x) else if x \\<in> X then weight \\<Gamma> x else 0)\" for x"], ["proof (state)\nthis:\n  f ?x =\n  (if ?x = xx\n   then integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n        integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n   else if ?x \\<in> X then weight \\<Gamma> ?x else 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "define g where\n    \"g y = (if y \\<in> \\<^bold>E `` X then weight \\<Gamma> y else 0)\" for y"], ["proof (state)\nthis:\n  g ?y = (if ?y \\<in> \\<^bold>E `` X then weight \\<Gamma> ?y else 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "define E' where \"E' \\<equiv> \\<^bold>E \\<inter> X \\<times> UNIV\""], ["proof (state)\nthis:\n  E' \\<equiv> \\<^bold>E \\<inter> X \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have Xxx: \"X - {xx} \\<subset> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X - {xx} \\<subset> X", "using xx"], ["proof (prove)\nusing this:\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. X - {xx} \\<subset> X", "by blast"], ["proof (state)\nthis:\n  X - {xx} \\<subset> X\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have E [simp]: \"E' `` X' = \\<^bold>E `` X'\" if \"X' \\<subseteq> X\" for X'"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' `` X' = \\<^bold>E `` X'", "using that"], ["proof (prove)\nusing this:\n  X' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. E' `` X' = \\<^bold>E `` X'", "by(auto simp add: E'_def)"], ["proof (state)\nthis:\n  ?X' \\<subseteq> X \\<Longrightarrow> E' `` ?X' = \\<^bold>E `` ?X'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have in_E': \"(x, y) \\<in> E' \\<longleftrightarrow> x \\<in> X \\<and> (x, y) \\<in> \\<^bold>E\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> E') = (x \\<in> X \\<and> (x, y) \\<in> \\<^bold>E)", "by(auto simp add: E'_def)"], ["proof (state)\nthis:\n  ((?x, ?y) \\<in> E') = (?x \\<in> X \\<and> (?x, ?y) \\<in> \\<^bold>E)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"(\\<Sum>\\<^sup>+ x\\<in>X. f x) = (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. f x) + (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) f =\n    integral\\<^sup>N (count_space (X - {xx})) f +\n    integral\\<^sup>N (count_space {xx}) f", "using xx"], ["proof (prove)\nusing this:\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) f =\n    integral\\<^sup>N (count_space (X - {xx})) f +\n    integral\\<^sup>N (count_space {xx}) f", "by(auto simp add: nn_integral_count_space_indicator nn_integral_add[symmetric] simp del: nn_integral_indicator_singleton intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (X - {xx})) f +\n  integral\\<^sup>N (count_space {xx}) f\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (X - {xx})) f +\n  integral\\<^sup>N (count_space {xx}) f\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. weight \\<Gamma> x) + ((\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) - (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. weight \\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X - {xx})) f +\n    integral\\<^sup>N (count_space {xx}) f =\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n    (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n     integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>))", "by(rule arg_cong2[where f=\"(+)\"])(auto simp add: f_def xx nn_integral_count_space_indicator intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X - {xx})) f +\n  integral\\<^sup>N (count_space {xx}) f =\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n  (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n   integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X - {xx})) f +\n  integral\\<^sup>N (count_space {xx}) f =\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n  (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n   integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n    (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n     integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "using minimal[OF Xxx] xx"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` (X - {xx})))\n         (weight \\<Gamma>)\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n    (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n     integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "by(subst add_diff_eq_iff_ennreal[THEN iffD2])(fastforce simp add: g_def[abs_def] nn_integral_count_space_indicator intro!: nn_integral_cong intro: nn_integral_mono elim: order_trans split: split_indicator)+"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) +\n  (integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n   integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "have sum_eq: \"(\\<Sum>\\<^sup>+ x\\<in>X. f x) = (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. g y)\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) f =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"(\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) = (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "by(auto simp add: nn_integral_count_space_indicator g_def intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g", "have fin: \"\\<dots> \\<noteq> \\<top>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) g \\<noteq> \\<top>", "using less"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) g \\<noteq> \\<top>", "by auto"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have fin2: \"(\\<Sum>\\<^sup>+ x\\<in>X'. weight \\<Gamma> x) \\<noteq> \\<top>\" if \"X' \\<subset> X\" for X'"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>", "have \"(\\<Sum>\\<^sup>+ x\\<in>\\<^bold>E `` X'. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ x\\<in>\\<^bold>E `` X. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)", "using that"], ["proof (prove)\nusing this:\n  X' \\<subset> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)", "by(auto 4 3 simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator split_indicator_asm)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>", "then"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>", "using minimal[OF that] less"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>", "by(auto simp add: top_unique)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?X' \\<subset> X \\<Longrightarrow>\n  integral\\<^sup>N (count_space ?X') (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"f xx = (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) - (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f xx =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)", "by (simp add: f_def)"], ["proof (state)\nthis:\n  f xx =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "also"], ["proof (state)\nthis:\n  f xx =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<dots> < (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) - (\\<Sum>\\<^sup>+ x\\<in>X - {xx}. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n    < integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n      integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)", "using less fin2[OF Xxx] minimal[OF Xxx]"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` (X - {xx})))\n         (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n    < integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n      integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)", "by(subst minus_less_iff_ennreal)(fastforce simp add: less_top[symmetric] nn_integral_count_space_indicator diff_add_self_ennreal intro: nn_integral_mono elim: order_trans split: split_indicator)+"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n  < integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) =\n    integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>)", "using fin2[OF Xxx] xx"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n    integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) =\n    integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>)", "apply(simp add: nn_integral_count_space_indicator del: nn_integral_indicator_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> set_nn_integral (count_space UNIV) X\n                       (weight \\<Gamma>) -\n                      set_nn_integral (count_space UNIV) (X - {xx})\n                       (weight \\<Gamma>) =\n                      set_nn_integral (count_space UNIV) {xx}\n                       (weight \\<Gamma>)", "apply(subst nn_integral_diff[symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. weight \\<Gamma> x * indicator X x)\n                      \\<in> borel_measurable (count_space UNIV)\n 2. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          weight \\<Gamma> x * indicator (X - {xx}) x)\n                      \\<in> borel_measurable (count_space UNIV)\n 3. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> set_nn_integral (count_space UNIV) (X - {xx})\n                       (weight \\<Gamma>) \\<noteq>\n                      \\<infinity>\n 4. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> AE x in count_space\n                               UNIV. weight \\<Gamma> x *\n                                     indicator (X - {xx}) x\n                                     \\<le> weight \\<Gamma> x * indicator X x\n 5. \\<lbrakk>set_nn_integral (count_space UNIV) (X - {xx})\n              (weight \\<Gamma>) \\<noteq>\n             \\<top>;\n     xx \\<in> X\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>\\<^sup>+ x.\n                         weight \\<Gamma> x * indicator X x -\n                         weight \\<Gamma> x * indicator (X - {xx}) x) =\n                      set_nn_integral (count_space UNIV) {xx}\n                       (weight \\<Gamma>)", "apply(auto simp add: AE_count_space split: split_indicator simp del: nn_integral_indicator_singleton intro!: nn_integral_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>) -\n  integral\\<^sup>N (count_space (X - {xx})) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<dots> = weight \\<Gamma> xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>) =\n    weight \\<Gamma> xx", "by(simp add: nn_integral_count_space_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space {xx}) (weight \\<Gamma>) = weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  f xx < weight \\<Gamma> xx", "have fxx: \"f xx < weight \\<Gamma> xx\""], ["proof (prove)\nusing this:\n  f xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. f xx < weight \\<Gamma> xx", "."], ["proof (state)\nthis:\n  f xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have le: \"(\\<Sum>\\<^sup>+ x\\<in>X'. f x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X'. g y)\" if \"X' \\<subseteq> X\" for X'"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "proof(cases \"X' = X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X' = X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n 2. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "case True"], ["proof (state)\nthis:\n  X' = X\n\ngoal (2 subgoals):\n 1. X' = X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n 2. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "then"], ["proof (chain)\npicking this:\n  X' = X", "show ?thesis"], ["proof (prove)\nusing this:\n  X' = X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "using sum_eq"], ["proof (prove)\nusing this:\n  X' = X\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "case False"], ["proof (state)\nthis:\n  X' \\<noteq> X\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "hence X': \"X' \\<subset> X\""], ["proof (prove)\nusing this:\n  X' \\<noteq> X\n\ngoal (1 subgoal):\n 1. X' \\<subset> X", "using that"], ["proof (prove)\nusing this:\n  X' \\<noteq> X\n  X' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. X' \\<subset> X", "by blast"], ["proof (state)\nthis:\n  X' \\<subset> X\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "have \"(\\<Sum>\\<^sup>+ x\\<in>X'. f x) = (\\<Sum>\\<^sup>+ x\\<in>X' - {xx}. f x) + (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f =\n    integral\\<^sup>N (count_space (X' - {xx})) f +\n    (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)", "by(auto simp add: nn_integral_count_space_indicator nn_integral_add[symmetric] simp del: nn_integral_indicator_singleton intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f =\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f =\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ x\\<in>X' - {xx}. f x) + (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X' - {xx})) f +\n    (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n    \\<le> integral\\<^sup>N (count_space (X' - {xx})) f +\n          (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx)", "using fxx"], ["proof (prove)\nusing this:\n  f xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X' - {xx})) f +\n    (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n    \\<le> integral\\<^sup>N (count_space (X' - {xx})) f +\n          (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx)", "by(intro add_mono)(auto split: split_indicator simp add: nn_integral_count_space_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n  \\<le> integral\\<^sup>N (count_space (X' - {xx})) f +\n        (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. f x * indicator X' xx)\n  \\<le> integral\\<^sup>N (count_space (X' - {xx})) f +\n        (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>X'. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X' - {xx})) f +\n    (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx) =\n    integral\\<^sup>N (count_space X') (weight \\<Gamma>)", "using xx that"], ["proof (prove)\nusing this:\n  xx \\<in> X\n  X' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (X' - {xx})) f +\n    (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx) =\n    integral\\<^sup>N (count_space X') (weight \\<Gamma>)", "by(auto simp add: nn_integral_count_space_indicator nn_integral_add[symmetric] f_def simp del: nn_integral_indicator_singleton intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx) =\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (X' - {xx})) f +\n  (\\<Sum>\\<^sup>+ x\\<in>{xx}. weight \\<Gamma> x * indicator X' xx) =\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X'. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)", "by(rule minimal[OF X'])"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X'. g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "using that"], ["proof (prove)\nusing this:\n  X' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "by(auto 4 3 intro!: nn_integral_cong simp add: g_def Image_iff)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) (weight \\<Gamma>) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n\ngoal (1 subgoal):\n 1. X' \\<noteq> X \\<Longrightarrow>\n    integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X')) g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?X' \\<subseteq> X \\<Longrightarrow>\n  integral\\<^sup>N (count_space ?X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` ?X')) g\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"countable X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable X", "using X_A A_vertex countable_V"], ["proof (prove)\nusing this:\n  X \\<subseteq> A \\<Gamma>\n  A \\<Gamma> \\<subseteq> \\<^bold>V\n  countable \\<^bold>V\n\ngoal (1 subgoal):\n 1. countable X", "by(blast intro: countable_subset)"], ["proof (state)\nthis:\n  countable X\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  countable X\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"\\<^bold>E `` X \\<subseteq> \\<^bold>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>E `` X \\<subseteq> \\<^bold>V", "by(auto simp add: vertex_def)"], ["proof (state)\nthis:\n  \\<^bold>E `` X \\<subseteq> \\<^bold>V\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "with countable_V"], ["proof (chain)\npicking this:\n  countable \\<^bold>V\n  \\<^bold>E `` X \\<subseteq> \\<^bold>V", "have \"countable (\\<^bold>E `` X)\""], ["proof (prove)\nusing this:\n  countable \\<^bold>V\n  \\<^bold>E `` X \\<subseteq> \\<^bold>V\n\ngoal (1 subgoal):\n 1. countable (\\<^bold>E `` X)", "by(blast intro: countable_subset)"], ["proof (state)\nthis:\n  countable (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  countable (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"E' \\<subseteq> X \\<times> \\<^bold>E `` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<subseteq> X \\<times> \\<^bold>E `` X", "by(auto simp add: E'_def)"], ["proof (state)\nthis:\n  E' \\<subseteq> X \\<times> \\<^bold>E `` X\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  countable X\n  countable (\\<^bold>E `` X)\n  E' \\<subseteq> X \\<times> \\<^bold>E `` X", "obtain h' where h'_dom: \"\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> E'\"\n    and h'_fin: \"\\<And>x y. h' x y \\<noteq> \\<top>\"\n    and h'_f: \"\\<And>x. x \\<in> X \\<Longrightarrow> (\\<Sum>\\<^sup>+ y\\<in>E' `` X. h' x y) = f x\"\n    and h'_g: \"\\<And>y. y \\<in> E' `` X \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X. h' x y) = g y\""], ["proof (prove)\nusing this:\n  countable X\n  countable (\\<^bold>E `` X)\n  E' \\<subseteq> X \\<times> \\<^bold>E `` X\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        \\<lbrakk>\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> E';\n         \\<And>x y. h' x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> X \\<Longrightarrow>\n            integral\\<^sup>N (count_space (E' `` X)) (h' x) = f x;\n         \\<And>y.\n            y \\<in> E' `` X \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>X. h' x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bounded_matrix_for_marginals_ennreal[where f=f and g=g and A=X and B=\"E' `` X\" and R=E' and thesis=thesis] sum_eq fin le"], ["proof (prove)\nusing this:\n  countable X\n  countable (\\<^bold>E `` X)\n  E' \\<subseteq> X \\<times> \\<^bold>E `` X\n  \\<lbrakk>integral\\<^sup>N (count_space X) f =\n           integral\\<^sup>N (count_space (E' `` X)) g;\n   integral\\<^sup>N (count_space (E' `` X)) g \\<noteq> \\<top>;\n   \\<And>X.\n      X \\<subseteq> X \\<Longrightarrow>\n      integral\\<^sup>N (count_space X) f\n      \\<le> integral\\<^sup>N (count_space (E' `` X)) g;\n   countable X; countable (E' `` X); E' \\<subseteq> X \\<times> E' `` X;\n   \\<And>h.\n      \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> E';\n       \\<And>x y. h x y \\<noteq> \\<top>;\n       \\<And>x.\n          x \\<in> X \\<Longrightarrow>\n          integral\\<^sup>N (count_space (E' `` X)) (h x) = f x;\n       \\<And>y.\n          y \\<in> E' `` X \\<Longrightarrow>\n          (\\<Sum>\\<^sup>+ x\\<in>X. h x y) = g y\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n  integral\\<^sup>N (count_space X) f =\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) g \\<noteq> \\<top>\n  ?X' \\<subseteq> X \\<Longrightarrow>\n  integral\\<^sup>N (count_space ?X') f\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` ?X')) g\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        \\<lbrakk>\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> E';\n         \\<And>x y. h' x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> X \\<Longrightarrow>\n            integral\\<^sup>N (count_space (E' `` X)) (h' x) = f x;\n         \\<And>y.\n            y \\<in> E' `` X \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>X. h' x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  0 < h' ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> E'\n  h' ?x ?y \\<noteq> \\<top>\n  ?x \\<in> X \\<Longrightarrow>\n  integral\\<^sup>N (count_space (E' `` X)) (h' ?x) = f ?x\n  ?y \\<in> E' `` X \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>X. h' x ?y) = g ?y\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have h'_outside: \"(x, y) \\<notin> E' \\<Longrightarrow> h' x y = 0\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<notin> E' \\<Longrightarrow> h' x y = 0", "using h'_dom[of x y] not_gr_zero"], ["proof (prove)\nusing this:\n  0 < h' x y \\<Longrightarrow> (x, y) \\<in> E'\n  (\\<not> (0::?'a) < ?n) = (?n = (0::?'a))\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> E' \\<Longrightarrow> h' x y = 0", "by(fastforce)"], ["proof (state)\nthis:\n  (?x, ?y) \\<notin> E' \\<Longrightarrow> h' ?x ?y = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "define h where \"h = (\\<lambda>(x, y). if x \\<in> X \\<and> edge \\<Gamma> x y then h' x y else 0)\""], ["proof (state)\nthis:\n  h =\n  (\\<lambda>(x, y).\n      if x \\<in> X \\<and> edge \\<Gamma> x y then h' x y else 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have h_OUT: \"d_OUT h x = (if x \\<in> X then f x else 0)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT h x = (if x \\<in> X then f x else 0)", "by(auto 4 3 simp add: h_def d_OUT_def h'_f[symmetric] E'_def nn_integral_count_space_indicator intro!: nn_integral_cong intro: h'_outside split: split_indicator)"], ["proof (state)\nthis:\n  d_OUT h ?x = (if ?x \\<in> X then f ?x else 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have h_IN: \"d_IN h y = (if y \\<in> \\<^bold>E `` X then weight \\<Gamma> y else 0)\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN h y = (if y \\<in> \\<^bold>E `` X then weight \\<Gamma> y else 0)", "using h'_g[of y, symmetric]"], ["proof (prove)\nusing this:\n  y \\<in> E' `` X \\<Longrightarrow> g y = (\\<Sum>\\<^sup>+ x\\<in>X. h' x y)\n\ngoal (1 subgoal):\n 1. d_IN h y = (if y \\<in> \\<^bold>E `` X then weight \\<Gamma> y else 0)", "by(auto 4 3 simp add: h_def d_IN_def g_def nn_integral_count_space_indicator nn_integral_0_iff_AE  in_E' intro!: nn_integral_cong intro: h'_outside split: split_indicator split_indicator_asm)"], ["proof (state)\nthis:\n  d_IN h ?y = (if ?y \\<in> \\<^bold>E `` X then weight \\<Gamma> ?y else 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have h: \"current \\<Gamma> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. current \\<Gamma> h", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. d_OUT h x \\<le> weight \\<Gamma> x\n 2. \\<And>x. d_IN h x \\<le> weight \\<Gamma> x\n 3. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> h e = 0", "show \"d_OUT h x \\<le> weight \\<Gamma> x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT h x \\<le> weight \\<Gamma> x", "using fxx"], ["proof (prove)\nusing this:\n  f xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. d_OUT h x \\<le> weight \\<Gamma> x", "by(auto simp add: h_OUT f_def)"], ["proof (state)\nthis:\n  d_OUT h ?x \\<le> weight \\<Gamma> ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. d_IN h x \\<le> weight \\<Gamma> x\n 2. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> h e = 0", "show \"d_IN h y \\<le> weight \\<Gamma> y\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN h y \\<le> weight \\<Gamma> y", "by(simp add: h_IN)"], ["proof (state)\nthis:\n  d_IN h ?y \\<le> weight \\<Gamma> ?y\n\ngoal (1 subgoal):\n 1. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> h e = 0", "show \"h e = 0\" if \"e \\<notin> \\<^bold>E\" for e"], ["proof (prove)\ngoal (1 subgoal):\n 1. h e = 0", "using that"], ["proof (prove)\nusing this:\n  e \\<notin> \\<^bold>E\n\ngoal (1 subgoal):\n 1. h e = 0", "by(cases e)(auto simp add: h_def)"], ["proof (state)\nthis:\n  ?e \\<notin> \\<^bold>E \\<Longrightarrow> h ?e = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  current \\<Gamma> h\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"separating \\<Gamma> (TER h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. separating \\<Gamma> (TER h)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y p.\n       \\<lbrakk>x \\<in> A \\<Gamma>; y \\<in> B \\<Gamma>;\n        path \\<Gamma> x p y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or>\n                         x \\<in> TER h", "fix x y p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y p.\n       \\<lbrakk>x \\<in> A \\<Gamma>; y \\<in> B \\<Gamma>;\n        path \\<Gamma> x p y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or>\n                         x \\<in> TER h", "assume x: \"x \\<in> A \\<Gamma>\" and y: \"y \\<in> B \\<Gamma>\" and p: \"path \\<Gamma> x p y\""], ["proof (state)\nthis:\n  x \\<in> A \\<Gamma>\n  y \\<in> B \\<Gamma>\n  path \\<Gamma> x p y\n\ngoal (1 subgoal):\n 1. \\<And>x y p.\n       \\<lbrakk>x \\<in> A \\<Gamma>; y \\<in> B \\<Gamma>;\n        path \\<Gamma> x p y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or>\n                         x \\<in> TER h", "then"], ["proof (chain)\npicking this:\n  x \\<in> A \\<Gamma>\n  y \\<in> B \\<Gamma>\n  path \\<Gamma> x p y", "obtain [simp]: \"p = [y]\" and xy: \"(x, y) \\<in> \\<^bold>E\""], ["proof (prove)\nusing this:\n  x \\<in> A \\<Gamma>\n  y \\<in> B \\<Gamma>\n  path \\<Gamma> x p y\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>p = [y]; (x, y) \\<in> \\<^bold>E\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using disjoint"], ["proof (prove)\nusing this:\n  x \\<in> A \\<Gamma>\n  y \\<in> B \\<Gamma>\n  path \\<Gamma> x p y\n  A \\<Gamma> \\<inter> B \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>p = [y]; (x, y) \\<in> \\<^bold>E\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule rtrancl_path.cases; auto dest: bipartite_E)+"], ["proof (state)\nthis:\n  p = [y]\n  (x, y) \\<in> \\<^bold>E\n\ngoal (1 subgoal):\n 1. \\<And>x y p.\n       \\<lbrakk>x \\<in> A \\<Gamma>; y \\<in> B \\<Gamma>;\n        path \\<Gamma> x p y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or>\n                         x \\<in> TER h", "show \"(\\<exists>z\\<in>set p. z \\<in> TER h) \\<or> x \\<in> TER h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or> x \\<in> TER h", "proof(rule disjCI)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> TER h \\<Longrightarrow> \\<exists>z\\<in>set p. z \\<in> TER h", "assume \"x \\<notin> TER h\""], ["proof (state)\nthis:\n  x \\<notin> TER h\n\ngoal (1 subgoal):\n 1. x \\<notin> TER h \\<Longrightarrow> \\<exists>z\\<in>set p. z \\<in> TER h", "hence \"x \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<notin> TER h\n\ngoal (1 subgoal):\n 1. x \\<in> X", "using x"], ["proof (prove)\nusing this:\n  x \\<notin> TER h\n  x \\<in> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by(auto simp add: SAT.simps SINK.simps h_OUT split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<notin> TER h \\<Longrightarrow> \\<exists>z\\<in>set p. z \\<in> TER h", "hence \"y \\<in> TER h\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. y \\<in> TER h", "using xy currentD_OUT[OF h y]"], ["proof (prove)\nusing this:\n  x \\<in> X\n  (x, y) \\<in> \\<^bold>E\n  d_OUT h y = 0\n\ngoal (1 subgoal):\n 1. y \\<in> TER h", "by(auto simp add: SAT.simps h_IN SINK.simps)"], ["proof (state)\nthis:\n  y \\<in> TER h\n\ngoal (1 subgoal):\n 1. x \\<notin> TER h \\<Longrightarrow> \\<exists>z\\<in>set p. z \\<in> TER h", "thus \"\\<exists>z\\<in>set p. z \\<in> TER h\""], ["proof (prove)\nusing this:\n  y \\<in> TER h\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>set p. z \\<in> TER h", "by simp"], ["proof (state)\nthis:\n  \\<exists>z\\<in>set p. z \\<in> TER h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>z\\<in>set p. z \\<in> TER h) \\<or> x \\<in> TER h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  separating \\<Gamma> (TER h)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  separating \\<Gamma> (TER h)", "have w: \"wave \\<Gamma> h\""], ["proof (prove)\nusing this:\n  separating \\<Gamma> (TER h)\n\ngoal (1 subgoal):\n 1. wave \\<Gamma> h", "using h"], ["proof (prove)\nusing this:\n  separating \\<Gamma> (TER h)\n  current \\<Gamma> h\n\ngoal (1 subgoal):\n 1. wave \\<Gamma> h", ".."], ["proof (state)\nthis:\n  wave \\<Gamma> h\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"xx \\<in> A \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xx \\<in> A \\<Gamma>", "using xx X_A"], ["proof (prove)\nusing this:\n  xx \\<in> X\n  X \\<subseteq> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. xx \\<in> A \\<Gamma>", "by blast"], ["proof (state)\nthis:\n  xx \\<in> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  xx \\<in> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"xx \\<notin> \\<E> (TER h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xx \\<notin> \\<E> (TER h)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "assume \"xx \\<in> \\<E> (TER h)\""], ["proof (state)\nthis:\n  xx \\<in> \\<E> (TER h)\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  xx \\<in> \\<E> (TER h)", "obtain p y where y: \"y \\<in> B \\<Gamma>\" and p: \"path \\<Gamma> xx p y\"\n      and bypass: \"\\<And>z. \\<lbrakk> xx \\<noteq> y; z \\<in> set p \\<rbrakk> \\<Longrightarrow> z = xx \\<or> z \\<notin> TER h\""], ["proof (prove)\nusing this:\n  xx \\<in> \\<E> (TER h)\n\ngoal (1 subgoal):\n 1. (\\<And>y p.\n        \\<lbrakk>y \\<in> B \\<Gamma>; path \\<Gamma> xx p y;\n         \\<And>z.\n            \\<lbrakk>xx \\<noteq> y; z \\<in> set p\\<rbrakk>\n            \\<Longrightarrow> z = xx \\<or> z \\<notin> TER h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule \\<E>_E) auto"], ["proof (state)\nthis:\n  y \\<in> B \\<Gamma>\n  path \\<Gamma> xx p y\n  \\<lbrakk>xx \\<noteq> y; ?z \\<in> set p\\<rbrakk>\n  \\<Longrightarrow> ?z = xx \\<or> ?z \\<notin> TER h\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "from p"], ["proof (chain)\npicking this:\n  path \\<Gamma> xx p y", "obtain [simp]: \"p = [y]\" and xy: \"edge \\<Gamma> xx y\" and neq: \"xx \\<noteq> y\""], ["proof (prove)\nusing this:\n  path \\<Gamma> xx p y\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>p = [y]; edge \\<Gamma> xx y; xx \\<noteq> y\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using disjoint X_A xx y"], ["proof (prove)\nusing this:\n  path \\<Gamma> xx p y\n  A \\<Gamma> \\<inter> B \\<Gamma> = {}\n  X \\<subseteq> A \\<Gamma>\n  xx \\<in> X\n  y \\<in> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>p = [y]; edge \\<Gamma> xx y; xx \\<noteq> y\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule rtrancl_path.cases; auto dest: bipartite_E)+"], ["proof (state)\nthis:\n  p = [y]\n  edge \\<Gamma> xx y\n  xx \\<noteq> y\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "from neq bypass[of y]"], ["proof (chain)\npicking this:\n  xx \\<noteq> y\n  \\<lbrakk>xx \\<noteq> y; y \\<in> set p\\<rbrakk>\n  \\<Longrightarrow> y = xx \\<or> y \\<notin> TER h", "have \"y \\<notin> TER h\""], ["proof (prove)\nusing this:\n  xx \\<noteq> y\n  \\<lbrakk>xx \\<noteq> y; y \\<in> set p\\<rbrakk>\n  \\<Longrightarrow> y = xx \\<or> y \\<notin> TER h\n\ngoal (1 subgoal):\n 1. y \\<notin> TER h", "by simp"], ["proof (state)\nthis:\n  y \\<notin> TER h\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y \\<notin> TER h\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "from xy xx currentD_OUT[OF h y]"], ["proof (chain)\npicking this:\n  edge \\<Gamma> xx y\n  xx \\<in> X\n  d_OUT h y = 0", "have \"y \\<in> TER h\""], ["proof (prove)\nusing this:\n  edge \\<Gamma> xx y\n  xx \\<in> X\n  d_OUT h y = 0\n\ngoal (1 subgoal):\n 1. y \\<in> TER h", "by(auto simp add: SAT.simps h_IN SINK.simps)"], ["proof (state)\nthis:\n  y \\<in> TER h\n\ngoal (1 subgoal):\n 1. xx \\<in> \\<E> (TER h) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y \\<notin> TER h\n  y \\<in> TER h", "show False"], ["proof (prove)\nusing this:\n  y \\<notin> TER h\n  y \\<in> TER h\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xx \\<notin> \\<E> (TER h)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  xx \\<notin> \\<E> (TER h)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "have \"d_OUT h xx < weight \\<Gamma> xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT h xx < weight \\<Gamma> xx", "using fxx xx"], ["proof (prove)\nusing this:\n  f xx < weight \\<Gamma> xx\n  xx \\<in> X\n\ngoal (1 subgoal):\n 1. d_OUT h xx < weight \\<Gamma> xx", "by(simp add: h_OUT)"], ["proof (state)\nthis:\n  d_OUT h xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  xx \\<in> A \\<Gamma>\n  xx \\<notin> \\<E> (TER h)\n  d_OUT h xx < weight \\<Gamma> xx", "have \"hindrance \\<Gamma> h\""], ["proof (prove)\nusing this:\n  xx \\<in> A \\<Gamma>\n  xx \\<notin> \\<E> (TER h)\n  d_OUT h xx < weight \\<Gamma> xx\n\ngoal (1 subgoal):\n 1. hindrance \\<Gamma> h", ".."], ["proof (state)\nthis:\n  hindrance \\<Gamma> h\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>X\\<subseteq>A \\<Gamma>.\n               finite X \\<longrightarrow>\n               integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n               \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                      (weight \\<Gamma>)) \\<Longrightarrow>\n    hindered \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  hindrance \\<Gamma> h", "show \"hindered \\<Gamma>\""], ["proof (prove)\nusing this:\n  hindrance \\<Gamma> h\n\ngoal (1 subgoal):\n 1. hindered \\<Gamma>", "using h w"], ["proof (prove)\nusing this:\n  hindrance \\<Gamma> h\n  current \\<Gamma> h\n  wave \\<Gamma> h\n\ngoal (1 subgoal):\n 1. hindered \\<Gamma>", ".."], ["proof (state)\nthis:\n  hindered \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma nn_integral_count_space_top_approx:\n  fixes f :: \"nat => ennreal\" and b :: ennreal\n  assumes \"nn_integral (count_space UNIV) f = top\"\n  and \"b < top\"\n  obtains n where \"b < sum f {..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. b < sum f {..<n} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space UNIV) f = \\<top>\n  b < \\<top>\n\ngoal (1 subgoal):\n 1. (\\<And>n. b < sum f {..<n} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding nn_integral_count_space_nat suminf_eq_SUP SUP_eq_top_iff"], ["proof (prove)\nusing this:\n  \\<forall>x<\\<top>. \\<exists>i\\<in>UNIV. x < sum f {..<i}\n  b < \\<top>\n\ngoal (1 subgoal):\n 1. (\\<And>n. b < sum f {..<n} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["", "lemma One_le_of_nat_ennreal: \"(1 :: ennreal) \\<le> of_nat x \\<longleftrightarrow> 1 \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 \\<le> of_nat x) = (1 \\<le> x)", "by (metis of_nat_le_iff of_nat_1)"], ["", "locale bounded_countable_bipartite_web = countable_bipartite_web \\<Gamma>\n  for \\<Gamma> :: \"('v, 'more) web_scheme\" (structure)\n  +\n  assumes bounded_B: \"x \\<in> A \\<Gamma> \\<Longrightarrow> (\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E `` {x}. weight \\<Gamma> y) < \\<top>\"\nbegin"], ["", "theorem unhindered_linkable_bounded:\n  assumes \"\\<not> hindered \\<Gamma>\"\n  shows \"linkable \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "proof(cases \"A \\<Gamma> = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<Gamma> = {} \\<Longrightarrow> linkable \\<Gamma>\n 2. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "case True"], ["proof (state)\nthis:\n  A \\<Gamma> = {}\n\ngoal (2 subgoals):\n 1. A \\<Gamma> = {} \\<Longrightarrow> linkable \\<Gamma>\n 2. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "hence \"linkage \\<Gamma> (\\<lambda>_. 0)\""], ["proof (prove)\nusing this:\n  A \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. linkage \\<Gamma> (\\<lambda>_. 0)", "by(auto simp add: linkage.simps)"], ["proof (state)\nthis:\n  linkage \\<Gamma> (\\<lambda>_. 0)\n\ngoal (2 subgoals):\n 1. A \\<Gamma> = {} \\<Longrightarrow> linkable \\<Gamma>\n 2. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  linkage \\<Gamma> (\\<lambda>_. 0)\n\ngoal (2 subgoals):\n 1. A \\<Gamma> = {} \\<Longrightarrow> linkable \\<Gamma>\n 2. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"web_flow \\<Gamma> (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. web_flow \\<Gamma> (\\<lambda>_. 0)", "by(auto simp add: web_flow.simps)"], ["proof (state)\nthis:\n  web_flow \\<Gamma> (\\<lambda>_. 0)\n\ngoal (2 subgoals):\n 1. A \\<Gamma> = {} \\<Longrightarrow> linkable \\<Gamma>\n 2. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  linkage \\<Gamma> (\\<lambda>_. 0)\n  web_flow \\<Gamma> (\\<lambda>_. 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  linkage \\<Gamma> (\\<lambda>_. 0)\n  web_flow \\<Gamma> (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "by blast"], ["proof (state)\nthis:\n  linkable \\<Gamma>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "case nonempty: False"], ["proof (state)\nthis:\n  A \\<Gamma> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define A_n :: \"nat \\<Rightarrow> 'v set\" where \"A_n n = from_nat_into (A \\<Gamma>) ` {..n}\" for n"], ["proof (state)\nthis:\n  A_n ?n = from_nat_into (A \\<Gamma>) ` {..?n}\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have fin_A_n [simp]: \"finite (A_n n)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (A_n n)", "by(simp add: A_n_def)"], ["proof (state)\nthis:\n  finite (A_n ?n)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have A_n_A: \"A_n n \\<subseteq> A \\<Gamma>\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. A_n n \\<subseteq> A \\<Gamma>", "by(auto simp add: A_n_def from_nat_into[OF nonempty])"], ["proof (state)\nthis:\n  A_n ?n \\<subseteq> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have countable2: \"countable (\\<^bold>E `` A_n n)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (\\<^bold>E `` A_n n)", "using countable_V"], ["proof (prove)\nusing this:\n  countable \\<^bold>V\n\ngoal (1 subgoal):\n 1. countable (\\<^bold>E `` A_n n)", "by(rule countable_subset[rotated])(auto simp add: vertex_def)"], ["proof (state)\nthis:\n  countable (\\<^bold>E `` A_n ?n)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"\\<exists>Y2. \\<forall>n. \\<forall>X \\<subseteq> A_n n. Y2 n X \\<subseteq> \\<^bold>E `` X \\<and> (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y2 n X. weight \\<Gamma> y) \\<and> (\\<Sum>\\<^sup>+ y\\<in>Y2 n X. weight \\<Gamma> y) \\<noteq> \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y2.\n       \\<forall>n X.\n          X \\<subseteq> A_n n \\<longrightarrow>\n          Y2 n X \\<subseteq> \\<^bold>E `` X \\<and>\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space (Y2 n X))\n                 (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>) \\<noteq>\n          \\<top>", "proof(rule choice strip ex_simps(6)[THEN iffD2])+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n X.\n       X \\<subseteq> A_n n \\<Longrightarrow>\n       \\<exists>y\\<subseteq>\\<^bold>E `` X.\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<noteq> \\<top>", "fix n X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n X.\n       X \\<subseteq> A_n n \\<Longrightarrow>\n       \\<exists>y\\<subseteq>\\<^bold>E `` X.\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<noteq> \\<top>", "assume X: \"X \\<subseteq> A_n n\""], ["proof (state)\nthis:\n  X \\<subseteq> A_n n\n\ngoal (1 subgoal):\n 1. \\<And>n X.\n       X \\<subseteq> A_n n \\<Longrightarrow>\n       \\<exists>y\\<subseteq>\\<^bold>E `` X.\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<noteq> \\<top>", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> A_n n", "have [simp]: \"finite X\""], ["proof (prove)\nusing this:\n  X \\<subseteq> A_n n\n\ngoal (1 subgoal):\n 1. finite X", "by(rule finite_subset) simp"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. \\<And>n X.\n       X \\<subseteq> A_n n \\<Longrightarrow>\n       \\<exists>y\\<subseteq>\\<^bold>E `` X.\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<noteq> \\<top>", "have X_count: \"countable (\\<^bold>E `` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (\\<^bold>E `` X)", "using countable2"], ["proof (prove)\nusing this:\n  countable (\\<^bold>E `` A_n ?n)\n\ngoal (1 subgoal):\n 1. countable (\\<^bold>E `` X)", "by(rule countable_subset[rotated])(rule Image_mono[OF order_refl X])"], ["proof (state)\nthis:\n  countable (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. \\<And>n X.\n       X \\<subseteq> A_n n \\<Longrightarrow>\n       \\<exists>y\\<subseteq>\\<^bold>E `` X.\n          integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n          \\<le> integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<and>\n          integral\\<^sup>N (count_space y) (weight \\<Gamma>) \\<noteq> \\<top>", "show \"\\<exists>Y. Y \\<subseteq> \\<^bold>E `` X \\<and> (\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y. weight \\<Gamma> y) \\<and> (\\<Sum>\\<^sup>+ y\\<in>Y. weight \\<Gamma> y) \\<noteq> \\<top>\" (is \"Ex ?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "proof(cases \"(\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) = \\<top>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "case True"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) = \\<top>\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "define Y' where \"Y' = to_nat_on (\\<^bold>E `` X) ` (\\<^bold>E `` X)\""], ["proof (state)\nthis:\n  Y' = to_nat_on (\\<^bold>E `` X) ` \\<^bold>E `` X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have inf: \"infinite (\\<^bold>E `` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (\\<^bold>E `` X)", "using True"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) = \\<top>\n\ngoal (1 subgoal):\n 1. infinite (\\<^bold>E `` X)", "by(intro notI)(auto simp add: nn_integral_count_space_finite)"], ["proof (state)\nthis:\n  infinite (\\<^bold>E `` X)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "then"], ["proof (chain)\npicking this:\n  infinite (\\<^bold>E `` X)", "have Y': \"Y' = UNIV\""], ["proof (prove)\nusing this:\n  infinite (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. Y' = UNIV", "using X_count"], ["proof (prove)\nusing this:\n  infinite (\\<^bold>E `` X)\n  countable (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. Y' = UNIV", "by(auto simp add: Y'_def intro!: image_to_nat_on)"], ["proof (state)\nthis:\n  Y' = UNIV\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"(\\<Sum>\\<^sup>+ y\\<in>\\<^bold>E `` X. weight \\<Gamma> y) = (\\<Sum>\\<^sup>+ y\\<in>from_nat_into (\\<^bold>E `` X) ` Y'. weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n     (\\<^bold>E `` X) (weight \\<Gamma>)", "using X_count"], ["proof (prove)\nusing this:\n  countable (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n     (\\<^bold>E `` X) (weight \\<Gamma>)", "by(auto simp add: nn_integral_count_space_indicator Y'_def image_image intro!: nn_integral_cong from_nat_into_to_nat_on[symmetric] rev_image_eqI split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n   (\\<^bold>E `` X) (weight \\<Gamma>)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n   (\\<^bold>E `` X) (weight \\<Gamma>)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y. weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) * indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n     (\\<^bold>E `` X) (weight \\<Gamma>) =\n    (\\<Sum>\\<^sup>+ y.\n       weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n       indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))", "using X_count inf"], ["proof (prove)\nusing this:\n  countable (\\<^bold>E `` X)\n  infinite (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n     (\\<^bold>E `` X) (weight \\<Gamma>) =\n    (\\<Sum>\\<^sup>+ y.\n       weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n       indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))", "by(subst nn_integral_count_space_reindex)(auto simp add: inj_on_def Y')"], ["proof (state)\nthis:\n  set_nn_integral (count_space (from_nat_into (\\<^bold>E `` X) ` Y'))\n   (\\<^bold>E `` X) (weight \\<Gamma>) =\n  (\\<Sum>\\<^sup>+ y.\n     weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n     indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  (\\<Sum>\\<^sup>+ y.\n     weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n     indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))", "have \"\\<dots> = \\<top>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  (\\<Sum>\\<^sup>+ y.\n     weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n     indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ y.\n       weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n       indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n    \\<top>", "using True"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n  (\\<Sum>\\<^sup>+ y.\n     weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n     indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) = \\<top>\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ y.\n       weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n       indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n    \\<top>", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y.\n     weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n     indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n  \\<top>\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "from nn_integral_count_space_top_approx[OF this, of \"sum (weight \\<Gamma>) X\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>sum (weight \\<Gamma>) X < \\<top>;\n   \\<And>n.\n      sum (weight \\<Gamma>) X\n      < (\\<Sum>y<n.\n            weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n            indicator (\\<^bold>E `` X)\n             (from_nat_into (\\<^bold>E `` X) y)) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain yy where yy: \"sum (weight \\<Gamma>) X < (\\<Sum> y<yy. weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) * indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sum (weight \\<Gamma>) X < \\<top>;\n   \\<And>n.\n      sum (weight \\<Gamma>) X\n      < (\\<Sum>y<n.\n            weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n            indicator (\\<^bold>E `` X)\n             (from_nat_into (\\<^bold>E `` X) y)) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        sum (weight \\<Gamma>) X\n        < (\\<Sum>y<yy.\n              weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n              indicator (\\<^bold>E `` X)\n               (from_nat_into (\\<^bold>E `` X) y)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: less_top[symmetric])"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) X\n  < (\\<Sum>y<yy.\n        weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n        indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "define Y where \"Y = from_nat_into (\\<^bold>E `` X) ` {..<yy} \\<inter> \\<^bold>E `` X\""], ["proof (state)\nthis:\n  Y = from_nat_into (\\<^bold>E `` X) ` {..<yy} \\<inter> \\<^bold>E `` X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have [simp]: \"finite Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite Y", "by(simp add: Y_def)"], ["proof (state)\nthis:\n  finite Y\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"(\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) = sum (weight \\<Gamma>) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X) (weight \\<Gamma>) =\n    sum (weight \\<Gamma>) X", "by(simp add: nn_integral_count_space_finite)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>) =\n  sum (weight \\<Gamma>) X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>) =\n  sum (weight \\<Gamma>) X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"\\<dots> \\<le> (\\<Sum> y<yy. weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) * indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (weight \\<Gamma>) X\n    \\<le> (\\<Sum>y<yy.\n              weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n              indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))", "using yy"], ["proof (prove)\nusing this:\n  sum (weight \\<Gamma>) X\n  < (\\<Sum>y<yy.\n        weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n        indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (1 subgoal):\n 1. sum (weight \\<Gamma>) X\n    \\<le> (\\<Sum>y<yy.\n              weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n              indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))", "by simp"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) X\n  \\<le> (\\<Sum>y<yy.\n            weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n            indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) X\n  \\<le> (\\<Sum>y<yy.\n            weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n            indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y))\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum> y \\<in> from_nat_into (\\<^bold>E `` X) ` {..<yy}. weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y<yy.\n        weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n        indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n    (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n       weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)", "using X_count inf"], ["proof (prove)\nusing this:\n  countable (\\<^bold>E `` X)\n  infinite (\\<^bold>E `` X)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y<yy.\n        weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n        indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n    (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n       weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)", "by(subst sum.reindex)(auto simp add: inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>y<yy.\n      weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n      indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n  (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n     weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  (\\<Sum>y<yy.\n      weight \\<Gamma> (from_nat_into (\\<^bold>E `` X) y) *\n      indicator (\\<^bold>E `` X) (from_nat_into (\\<^bold>E `` X) y)) =\n  (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n     weight \\<Gamma> y * indicator (\\<^bold>E `` X) y)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum> y \\<in> Y. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n       weight \\<Gamma> y * indicator (\\<^bold>E `` X) y) =\n    sum (weight \\<Gamma>) Y", "by(auto intro!: sum.cong simp add: Y_def)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n     weight \\<Gamma> y * indicator (\\<^bold>E `` X) y) =\n  sum (weight \\<Gamma>) Y\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>from_nat_into (\\<^bold>E `` X) ` {..<yy}.\n     weight \\<Gamma> y * indicator (\\<^bold>E `` X) y) =\n  sum (weight \\<Gamma>) Y\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>Y. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (weight \\<Gamma>) Y =\n    integral\\<^sup>N (count_space Y) (weight \\<Gamma>)", "by(simp add: nn_integral_count_space_finite)"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) Y =\n  integral\\<^sup>N (count_space Y) (weight \\<Gamma>)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) Y =\n  integral\\<^sup>N (count_space Y) (weight \\<Gamma>)\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"Y \\<subseteq> \\<^bold>E `` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<^bold>E `` X", "by(simp add: Y_def)"], ["proof (state)\nthis:\n  Y \\<subseteq> \\<^bold>E `` X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "moreover"], ["proof (state)\nthis:\n  Y \\<subseteq> \\<^bold>E `` X\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "have \"(\\<Sum>\\<^sup>+ y\\<in>Y. weight \\<Gamma> y) \\<noteq> \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "by(simp add: nn_integral_count_space_finite)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal (2 subgoals):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) =\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n 2. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "ultimately"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>)\n  Y \\<subseteq> \\<^bold>E `` X\n  integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>)\n  Y \\<subseteq> \\<^bold>E `` X\n  integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "by blast"], ["proof (state)\nthis:\n  \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n     integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n     \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n     integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "case False"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "with unhindered_criterion[OF assms, of X] X A_n_A[of n]"], ["proof (chain)\npicking this:\n  \\<lbrakk>X \\<subseteq> A \\<Gamma>; finite X\\<rbrakk>\n  \\<Longrightarrow> integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n                    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                           (weight \\<Gamma>)\n  X \\<subseteq> A_n n\n  A_n n \\<subseteq> A \\<Gamma>\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>", "have \"?P (\\<^bold>E `` X)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>X \\<subseteq> A \\<Gamma>; finite X\\<rbrakk>\n  \\<Longrightarrow> integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n                    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n                           (weight \\<Gamma>)\n  X \\<subseteq> A_n n\n  A_n n \\<subseteq> A \\<Gamma>\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n\ngoal (1 subgoal):\n 1. \\<^bold>E `` X \\<subseteq> \\<^bold>E `` X \\<and>\n    integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n           (weight \\<Gamma>) \\<and>\n    integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top>", "by auto"], ["proof (state)\nthis:\n  \\<^bold>E `` X \\<subseteq> \\<^bold>E `` X \\<and>\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n         (weight \\<Gamma>) \\<and>\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` X))\n     (weight \\<Gamma>) \\<noteq>\n    \\<top> \\<Longrightarrow>\n    \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", "then"], ["proof (chain)\npicking this:\n  \\<^bold>E `` X \\<subseteq> \\<^bold>E `` X \\<and>\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n         (weight \\<Gamma>) \\<and>\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<^bold>E `` X \\<subseteq> \\<^bold>E `` X \\<and>\n  integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` X))\n         (weight \\<Gamma>) \\<and>\n  integral\\<^sup>N (count_space (\\<^bold>E `` X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n\ngoal (1 subgoal):\n 1. \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n       integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n       \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n       integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>", ".."], ["proof (state)\nthis:\n  \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n     integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n     \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n     integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y\\<subseteq>\\<^bold>E `` X.\n     integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n     \\<le> integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<and>\n     integral\\<^sup>N (count_space Y) (weight \\<Gamma>) \\<noteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y2.\n     \\<forall>n X.\n        X \\<subseteq> A_n n \\<longrightarrow>\n        Y2 n X \\<subseteq> \\<^bold>E `` X \\<and>\n        integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n        \\<le> integral\\<^sup>N (count_space (Y2 n X))\n               (weight \\<Gamma>) \\<and>\n        integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>) \\<noteq>\n        \\<top>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y2.\n     \\<forall>n X.\n        X \\<subseteq> A_n n \\<longrightarrow>\n        Y2 n X \\<subseteq> \\<^bold>E `` X \\<and>\n        integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n        \\<le> integral\\<^sup>N (count_space (Y2 n X))\n               (weight \\<Gamma>) \\<and>\n        integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>) \\<noteq>\n        \\<top>", "obtain Y2\n    where Y2_A: \"Y2 n X \\<subseteq> \\<^bold>E `` X\"\n    and le: \"(\\<Sum>\\<^sup>+ x\\<in>X. weight \\<Gamma> x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y2 n X. weight \\<Gamma> y)\"\n    and finY2: \"(\\<Sum>\\<^sup>+ y\\<in>Y2 n X. weight \\<Gamma> y) \\<noteq> \\<top>\" if \"X \\<subseteq> A_n n\" for n X"], ["proof (prove)\nusing this:\n  \\<exists>Y2.\n     \\<forall>n X.\n        X \\<subseteq> A_n n \\<longrightarrow>\n        Y2 n X \\<subseteq> \\<^bold>E `` X \\<and>\n        integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n        \\<le> integral\\<^sup>N (count_space (Y2 n X))\n               (weight \\<Gamma>) \\<and>\n        integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>) \\<noteq>\n        \\<top>\n\ngoal (1 subgoal):\n 1. (\\<And>Y2.\n        \\<lbrakk>\\<And>n X.\n                    X \\<subseteq> A_n n \\<Longrightarrow>\n                    Y2 n X \\<subseteq> \\<^bold>E `` X;\n         \\<And>n X.\n            X \\<subseteq> A_n n \\<Longrightarrow>\n            integral\\<^sup>N (count_space X) (weight \\<Gamma>)\n            \\<le> integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>);\n         \\<And>n X.\n            X \\<subseteq> A_n n \\<Longrightarrow>\n            integral\\<^sup>N (count_space (Y2 n X))\n             (weight \\<Gamma>) \\<noteq>\n            \\<top>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  ?X \\<subseteq> A_n ?n \\<Longrightarrow>\n  Y2 ?n ?X \\<subseteq> \\<^bold>E `` ?X\n  ?X \\<subseteq> A_n ?n \\<Longrightarrow>\n  integral\\<^sup>N (count_space ?X) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (Y2 ?n ?X)) (weight \\<Gamma>)\n  ?X \\<subseteq> A_n ?n \\<Longrightarrow>\n  integral\\<^sup>N (count_space (Y2 ?n ?X)) (weight \\<Gamma>) \\<noteq>\n  \\<top>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define Y where \"Y n = (\\<Union> X \\<in> Pow (A_n n). Y2 n X)\" for n"], ["proof (state)\nthis:\n  Y ?n = \\<Union> (Y2 ?n ` Pow (A_n ?n))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define s where \"s n = (\\<Sum>\\<^sup>+ y\\<in>Y n. weight \\<Gamma> y)\" for n"], ["proof (state)\nthis:\n  s ?n = integral\\<^sup>N (count_space (Y ?n)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have Y_vertex: \"Y n \\<subseteq> \\<^bold>V\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. Y n \\<subseteq> \\<^bold>V", "by(auto 4 3 simp add: Y_def vertex_def dest!: Y2_A[of _ n])"], ["proof (state)\nthis:\n  Y ?n \\<subseteq> \\<^bold>V\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have Y_B: \"Y n \\<subseteq> B \\<Gamma>\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. Y n \\<subseteq> B \\<Gamma>", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (Y2 n ` Pow (A_n n)) \\<subseteq> B \\<Gamma>", "by(auto dest!: Y2_A[of _ n] dest: bipartite_E)"], ["proof (state)\nthis:\n  Y ?n \\<subseteq> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have s_top [simp]: \"s n \\<noteq> \\<top>\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "have \"\\<lbrakk>x \\<in> Y2 n X; X \\<subseteq> A_n n\\<rbrakk> \\<Longrightarrow> Suc 0 \\<le> card {X. X \\<subseteq> A_n n \\<and> x \\<in> Y2 n X}\" for x X"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Y2 n X; X \\<subseteq> A_n n\\<rbrakk>\n    \\<Longrightarrow> Suc 0\n                      \\<le> card\n                             {X. X \\<subseteq> A_n n \\<and> x \\<in> Y2 n X}", "by(subst card_le_Suc_iff)(auto intro!: exI[where x=X] exI[where x=\"{X. X \\<subseteq> A_n n \\<and> x \\<in> Y2 n X} - {X}\"])"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> Y2 n ?X; ?X \\<subseteq> A_n n\\<rbrakk>\n  \\<Longrightarrow> Suc 0\n                    \\<le> card\n                           {X. X \\<subseteq> A_n n \\<and> ?x \\<in> Y2 n X}\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> Y2 n ?X; ?X \\<subseteq> A_n n\\<rbrakk>\n  \\<Longrightarrow> Suc 0\n                    \\<le> card\n                           {X. X \\<subseteq> A_n n \\<and> ?x \\<in> Y2 n X}", "have \"(\\<Sum>\\<^sup>+ y\\<in>Y n. weight \\<Gamma> y) \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y n. \\<Sum> X\\<in>Pow (A_n n). weight \\<Gamma> y * indicator (Y2 n X) y)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> Y2 n ?X; ?X \\<subseteq> A_n n\\<rbrakk>\n  \\<Longrightarrow> Suc 0\n                    \\<le> card\n                           {X. X \\<subseteq> A_n n \\<and> ?x \\<in> Y2 n X}\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (Y n)) (weight \\<Gamma>)\n    \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y n.\n             \\<Sum>X\\<in>Pow (A_n n).\n               weight \\<Gamma> y * indicator (Y2 n X) y)", "by(intro nn_integral_mono)(auto simp add: Y_def One_le_of_nat_ennreal intro!: mult_right_mono[of \"1 :: ennreal\", simplified])"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Y n)) (weight \\<Gamma>)\n  \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y n.\n           \\<Sum>X\\<in>Pow (A_n n).\n             weight \\<Gamma> y * indicator (Y2 n X) y)\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Y n)) (weight \\<Gamma>)\n  \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y n.\n           \\<Sum>X\\<in>Pow (A_n n).\n             weight \\<Gamma> y * indicator (Y2 n X) y)\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum> X\\<in>Pow (A_n n). \\<Sum>\\<^sup>+ y\\<in>Y n. weight \\<Gamma> y * indicator (Y2 n X) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ y\\<in>Y n.\n       \\<Sum>X\\<in>Pow (A_n n). weight \\<Gamma> y * indicator (Y2 n X) y) =\n    (\\<Sum>X\\<in>Pow (A_n n).\n       set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>))", "by(subst nn_integral_sum) auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y\\<in>Y n.\n     \\<Sum>X\\<in>Pow (A_n n). weight \\<Gamma> y * indicator (Y2 n X) y) =\n  (\\<Sum>X\\<in>Pow (A_n n).\n     set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y\\<in>Y n.\n     \\<Sum>X\\<in>Pow (A_n n). weight \\<Gamma> y * indicator (Y2 n X) y) =\n  (\\<Sum>X\\<in>Pow (A_n n).\n     set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "have \"\\<dots> = (\\<Sum> X\\<in>Pow (A_n n). \\<Sum>\\<^sup>+ y\\<in>Y2 n X. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow (A_n n).\n       set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>)) =\n    (\\<Sum>X\\<in>Pow (A_n n).\n       integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>))", "by(auto intro!: sum.cong nn_integral_cong simp add: nn_integral_count_space_indicator Y_def split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow (A_n n).\n     set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>)) =\n  (\\<Sum>X\\<in>Pow (A_n n).\n     integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "also"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow (A_n n).\n     set_nn_integral (count_space (Y n)) (Y2 n X) (weight \\<Gamma>)) =\n  (\\<Sum>X\\<in>Pow (A_n n).\n     integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>))\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "have \"\\<dots> < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow (A_n n).\n       integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>))\n    < \\<top>", "by(simp add: less_top[symmetric] finY2)"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow (A_n n).\n     integral\\<^sup>N (count_space (Y2 n X)) (weight \\<Gamma>))\n  < \\<top>\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space (Y n)) (weight \\<Gamma>) < \\<top>", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (Y n)) (weight \\<Gamma>) < \\<top>\n\ngoal (1 subgoal):\n 1. s n \\<noteq> \\<top>", "by(simp add: less_top s_def)"], ["proof (state)\nthis:\n  s n \\<noteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s ?n \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define f :: \"nat \\<Rightarrow> 'v option \\<Rightarrow> real\"\n    where \"f n xo = (case xo of Some x \\<Rightarrow> if x \\<in> A_n n then enn2real (weight \\<Gamma> x) else 0 \n                    | None \\<Rightarrow> enn2real (s n - sum (weight \\<Gamma>) (A_n n)))\" for n xo"], ["proof (state)\nthis:\n  f ?n ?xo =\n  (case ?xo of\n   None \\<Rightarrow> enn2real (s ?n - sum (weight \\<Gamma>) (A_n ?n))\n   | Some x \\<Rightarrow>\n       if x \\<in> A_n ?n then enn2real (weight \\<Gamma> x) else 0)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define g :: \"nat \\<Rightarrow> 'v \\<Rightarrow> real\"\n    where \"g n y = enn2real (weight \\<Gamma> y * indicator (Y n) y)\" for n y"], ["proof (state)\nthis:\n  g ?n ?y = enn2real (weight \\<Gamma> ?y * indicator (Y ?n) ?y)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define R :: \"nat \\<Rightarrow> ('v option \\<times> 'v) set\"\n    where \"R n = map_prod Some id ` (\\<^bold>E \\<inter> A_n n \\<times> Y n) \\<union> {None} \\<times> Y n\" for n"], ["proof (state)\nthis:\n  R ?n =\n  map_prod Some id ` (\\<^bold>E \\<inter> A_n ?n \\<times> Y ?n) \\<union>\n  {None} \\<times> Y ?n\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define A_n' where \"A_n' n = Some ` A_n n \\<union> {None}\" for n"], ["proof (state)\nthis:\n  A_n' ?n = Some ` A_n ?n \\<union> {None}\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have f_simps:\n    \"f n (Some x) = (if x \\<in> A_n n then enn2real (weight \\<Gamma> x) else 0)\"\n    \"f n None = enn2real (s n - sum (weight \\<Gamma>) (A_n n))\"\n    for n x"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n (Some x) =\n    (if x \\<in> A_n n then enn2real (weight \\<Gamma> x) else 0) &&&\n    f n None = enn2real (s n - sum (weight \\<Gamma>) (A_n n))", "by(simp_all add: f_def)"], ["proof (state)\nthis:\n  f ?n (Some ?x) =\n  (if ?x \\<in> A_n ?n then enn2real (weight \\<Gamma> ?x) else 0)\n  f ?n None = enn2real (s ?n - sum (weight \\<Gamma>) (A_n ?n))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have g_s: \"(\\<Sum>\\<^sup>+ y\\<in>Y n. g n y) = s n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) = s n", "by(auto simp add: s_def g_def ennreal_enn2real_if intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x)) = s ?n\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"(\\<Sum>\\<^sup>+ x\\<in>A_n' n. f n x) = (\\<Sum>\\<^sup>+ x\\<in>Some`A_n n. weight \\<Gamma> (the x)) + (\\<Sum>\\<^sup>+ x\\<in>{None}. f n x)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. weight \\<Gamma> (the x)) +\n    (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f n x))", "by(auto simp add: nn_integral_count_space_indicator nn_integral_add[symmetric] f_simps A_n'_def ennreal_enn2real_if simp del: nn_integral_indicator_singleton intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n ?n. weight \\<Gamma> (the x)) +\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f ?n x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n ?n. weight \\<Gamma> (the x)) +\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f ?n x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"\\<dots> n = sum (weight \\<Gamma>) (A_n n) + (s n - sum (weight \\<Gamma>) (A_n n))\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. weight \\<Gamma> (the x)) +\n    (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f n x)) =\n    sum (weight \\<Gamma>) (A_n n) + (s n - sum (weight \\<Gamma>) (A_n n))", "by(subst nn_integral_count_space_reindex)(auto simp add: nn_integral_count_space_finite f_simps ennreal_enn2real_if)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n ?n. weight \\<Gamma> (the x)) +\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f ?n x)) =\n  sum (weight \\<Gamma>) (A_n ?n) + (s ?n - sum (weight \\<Gamma>) (A_n ?n))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n ?n. weight \\<Gamma> (the x)) +\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. ennreal (f ?n x)) =\n  sum (weight \\<Gamma>) (A_n ?n) + (s ?n - sum (weight \\<Gamma>) (A_n ?n))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"\\<dots> n = s n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (weight \\<Gamma>) (A_n n) + (s n - sum (weight \\<Gamma>) (A_n n)) =\n    s n", "using le[OF order_refl, of n]"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space (A_n n)) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (Y2 n (A_n n))) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. sum (weight \\<Gamma>) (A_n n) + (s n - sum (weight \\<Gamma>) (A_n n)) =\n    s n", "by(simp add: s_def nn_integral_count_space_finite)(auto elim!: order_trans simp add: nn_integral_count_space_indicator Y_def intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  sum (weight \\<Gamma>) (A_n ?n) + (s ?n - sum (weight \\<Gamma>) (A_n ?n)) =\n  s ?n\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n1. ennreal (f ?n1 x)) = s ?n1", "have sum_eq: \"(\\<Sum>\\<^sup>+ x\\<in>A_n' n. f n x) = (\\<Sum>\\<^sup>+ y\\<in>Y n. g n y)\" for n"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n1. ennreal (f ?n1 x)) = s ?n1\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))", "using g_s"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n1. ennreal (f ?n1 x)) = s ?n1\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x)) = s ?n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"\\<exists>h'. \\<forall>n. (\\<forall>x y. (x, y) \\<notin> R n \\<longrightarrow> h' n x y = 0) \\<and> (\\<forall>x y. h' n x y \\<noteq> \\<top>) \\<and> (\\<forall>x\\<in>A_n' n. (\\<Sum>\\<^sup>+ y\\<in>Y n. h' n x y) = f n x) \\<and> (\\<forall>y\\<in>Y n. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = g n y)\" \n    (is \"Ex (\\<lambda>h'. \\<forall>n. ?Q n (h' n))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h'.\n       \\<forall>n.\n          (\\<forall>x y.\n              (x, y) \\<notin> R n \\<longrightarrow> h' n x y = 0) \\<and>\n          (\\<forall>x y. h' n x y \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (h' n x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>y\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y))", "proof(rule choice allI)+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "note sum_eq"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "have \"(\\<Sum>\\<^sup>+ y\\<in>Y n. g n y) \\<noteq> \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>", "using g_s"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x)) = s ?n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "have le_fg: \"(\\<Sum>\\<^sup>+ x\\<in>X. f n x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>R n `` X. g n y)\" if \"X \\<subseteq> A_n' n\" for X"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "proof(cases \"None \\<in> X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "case True"], ["proof (state)\nthis:\n  None \\<in> X\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"(\\<Sum>\\<^sup>+ x\\<in>X. f n x) \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. f n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x))", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> A_n' n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x))", "by(auto simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x))\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x))\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>Y n. g n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))", "by(simp add: sum_eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"R n `` X = Y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R n `` X = Y n", "using True"], ["proof (prove)\nusing this:\n  None \\<in> X\n\ngoal (1 subgoal):\n 1. R n `` X = Y n", "by(auto simp add: R_def)"], ["proof (state)\nthis:\n  R n `` X = Y n\n\ngoal (2 subgoals):\n 1. None \\<in> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n 2. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))\n  R n `` X = Y n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x))\n  R n `` X = Y n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "case False"], ["proof (state)\nthis:\n  None \\<notin> X\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "then"], ["proof (chain)\npicking this:\n  None \\<notin> X", "have *: \"Some ` (the ` X) = X\""], ["proof (prove)\nusing this:\n  None \\<notin> X\n\ngoal (1 subgoal):\n 1. Some ` the ` X = X", "by(auto simp add: image_image)(metis (no_types, lifting) image_iff notin_range_Some option.sel option.collapse)+"], ["proof (state)\nthis:\n  Some ` the ` X = X\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "from False that"], ["proof (chain)\npicking this:\n  None \\<notin> X\n  X \\<subseteq> A_n' n", "have X: \"the ` X \\<subseteq> A_n n\""], ["proof (prove)\nusing this:\n  None \\<notin> X\n  X \\<subseteq> A_n' n\n\ngoal (1 subgoal):\n 1. the ` X \\<subseteq> A_n n", "by(auto simp add: A_n'_def)"], ["proof (state)\nthis:\n  the ` X \\<subseteq> A_n n\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "from *"], ["proof (chain)\npicking this:\n  Some ` the ` X = X", "have \"(\\<Sum>\\<^sup>+ x\\<in>X. f n x) = (\\<Sum>\\<^sup>+ x\\<in>Some ` (the ` X). f n x)\""], ["proof (prove)\nusing this:\n  Some ` the ` X = X\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>the ` X. f n (Some x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x)))", "by(rule nn_integral_count_space_reindex) simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x)))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` the ` X. ennreal (f n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x)))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>the ` X. weight \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x))) =\n    integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)", "using that False"], ["proof (prove)\nusing this:\n  X \\<subseteq> A_n' n\n  None \\<notin> X\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x))) =\n    integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)", "by(auto 4  3intro!: nn_integral_cong simp add: f_simps A_n'_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x))) =\n  integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>the ` X. ennreal (f n (Some x))) =\n  integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ y\\<in>Y2 n (the ` X). weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)", "using False that"], ["proof (prove)\nusing this:\n  None \\<notin> X\n  X \\<subseteq> A_n' n\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)", "by(intro le)(auto simp add: A_n'_def)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (the ` X)) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ y\\<in>R n `` X. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>)", "using False Y2_A[of \"the ` X\" n] X"], ["proof (prove)\nusing this:\n  None \\<notin> X\n  the ` X \\<subseteq> A_n n \\<Longrightarrow>\n  Y2 n (the ` X) \\<subseteq> \\<^bold>E `` the ` X\n  the ` X \\<subseteq> A_n n\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n    \\<le> integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>)", "by(auto simp add: A_n'_def nn_integral_count_space_indicator R_def Image_iff Y_def intro: rev_image_eqI intro!: nn_integral_mono split: split_indicator)\n          (drule (1) subsetD; clarify; drule (1) bspec; auto 4 3 intro: rev_image_eqI)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Y2 n (the ` X))) (weight \\<Gamma>)\n  \\<le> integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>R n `` X. g n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>) =\n    (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "by(auto intro!: nn_integral_cong simp add: R_def g_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (R n `` X)) (weight \\<Gamma>) =\n  (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n\ngoal (1 subgoal):\n 1. None \\<notin> X \\<Longrightarrow>\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n    \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` X. ennreal (g n x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?X \\<subseteq> A_n' n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>?X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` ?X. ennreal (g n x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "moreover"], ["proof (state)\nthis:\n  ?X \\<subseteq> A_n' n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>?X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` ?X. ennreal (g n x))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "have \"countable (A_n' n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (A_n' n)", "by(simp add: A_n'_def countable_finite)"], ["proof (state)\nthis:\n  countable (A_n' n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "moreover"], ["proof (state)\nthis:\n  countable (A_n' n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "have \"countable (Y2 n X)\" if \"X \\<subseteq> A_n n\" for X"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (Y2 n X)", "using Y2_A[OF that]"], ["proof (prove)\nusing this:\n  Y2 n X \\<subseteq> \\<^bold>E `` X\n\ngoal (1 subgoal):\n 1. countable (Y2 n X)", "by(rule countable_subset)(rule countable_subset[OF _ countable_V]; auto simp add: vertex_def)"], ["proof (state)\nthis:\n  ?X \\<subseteq> A_n n \\<Longrightarrow> countable (Y2 n ?X)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "then"], ["proof (chain)\npicking this:\n  ?X \\<subseteq> A_n n \\<Longrightarrow> countable (Y2 n ?X)", "have \"countable (Y n)\""], ["proof (prove)\nusing this:\n  ?X \\<subseteq> A_n n \\<Longrightarrow> countable (Y2 n ?X)\n\ngoal (1 subgoal):\n 1. countable (Y n)", "unfolding Y_def"], ["proof (prove)\nusing this:\n  ?X \\<subseteq> A_n n \\<Longrightarrow> countable (Y2 n ?X)\n\ngoal (1 subgoal):\n 1. countable (\\<Union> (Y2 n ` Pow (A_n n)))", "by(intro countable_UN)(simp_all add: countable_finite)"], ["proof (state)\nthis:\n  countable (Y n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "moreover"], ["proof (state)\nthis:\n  countable (Y n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "have \"R n \\<subseteq> A_n' n \\<times> Y n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R n \\<subseteq> A_n' n \\<times> Y n", "by(auto simp add: R_def A_n'_def)"], ["proof (state)\nthis:\n  R n \\<subseteq> A_n' n \\<times> Y n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x))\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>\n  ?X \\<subseteq> A_n' n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>?X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` ?X. ennreal (g n x))\n  countable (A_n' n)\n  countable (Y n)\n  R n \\<subseteq> A_n' n \\<times> Y n", "obtain h' where \"\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> R n\" \"\\<And>x y. h' x y \\<noteq> \\<top>\" \n      \"\\<And>x. x \\<in> A_n' n \\<Longrightarrow> (\\<Sum>\\<^sup>+ y\\<in>Y n. h' x y) = (f n x)\" \"\\<And>y. y \\<in> Y n \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x y) = g n y\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. ennreal (f ?n x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>Y ?n. ennreal (g ?n x))\n  (\\<Sum>\\<^sup>+ x\\<in>Y n. ennreal (g n x)) \\<noteq> \\<top>\n  ?X \\<subseteq> A_n' n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>?X. ennreal (f n x))\n  \\<le> (\\<Sum>\\<^sup>+ x\\<in>R n `` ?X. ennreal (g n x))\n  countable (A_n' n)\n  countable (Y n)\n  R n \\<subseteq> A_n' n \\<times> Y n\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        \\<lbrakk>\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> R n;\n         \\<And>x y. h' x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A_n' n \\<Longrightarrow>\n            integral\\<^sup>N (count_space (Y n)) (h' x) = ennreal (f n x);\n         \\<And>y.\n            y \\<in> Y n \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x y) = ennreal (g n y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule bounded_matrix_for_marginals_ennreal) blast+"], ["proof (state)\nthis:\n  0 < h' ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> R n\n  h' ?x ?y \\<noteq> \\<top>\n  ?x \\<in> A_n' n \\<Longrightarrow>\n  integral\\<^sup>N (count_space (Y n)) (h' ?x) = ennreal (f n ?x)\n  ?y \\<in> Y n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x ?y) = ennreal (g n ?y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "hence \"?Q n h'\""], ["proof (prove)\nusing this:\n  0 < h' ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> R n\n  h' ?x ?y \\<noteq> \\<top>\n  ?x \\<in> A_n' n \\<Longrightarrow>\n  integral\\<^sup>N (count_space (Y n)) (h' ?x) = ennreal (f n ?x)\n  ?y \\<in> Y n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x ?y) = ennreal (g n ?y)\n\ngoal (1 subgoal):\n 1. (\\<forall>x y. (x, y) \\<notin> R n \\<longrightarrow> h' x y = 0) \\<and>\n    (\\<forall>x y. h' x y \\<noteq> \\<top>) \\<and>\n    (\\<forall>x\\<in>A_n' n.\n        integral\\<^sup>N (count_space (Y n)) (h' x) =\n        ennreal (f n x)) \\<and>\n    (\\<forall>y\\<in>Y n.\n        (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x y) = ennreal (g n y))", "by(auto)(use not_gr_zero in blast)"], ["proof (state)\nthis:\n  (\\<forall>x y. (x, y) \\<notin> R n \\<longrightarrow> h' x y = 0) \\<and>\n  (\\<forall>x y. h' x y \\<noteq> \\<top>) \\<and>\n  (\\<forall>x\\<in>A_n' n.\n      integral\\<^sup>N (count_space (Y n)) (h' x) = ennreal (f n x)) \\<and>\n  (\\<forall>y\\<in>Y n.\n      (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x y) = ennreal (g n y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>y.\n          (\\<forall>x ya.\n              (x, ya) \\<notin> R n \\<longrightarrow> y x ya = 0) \\<and>\n          (\\<forall>x ya. y x ya \\<noteq> \\<top>) \\<and>\n          (\\<forall>x\\<in>A_n' n.\n              integral\\<^sup>N (count_space (Y n)) (y x) =\n              ennreal (f n x)) \\<and>\n          (\\<forall>ya\\<in>Y n.\n              (\\<Sum>\\<^sup>+ x\\<in>A_n' n. y x ya) = ennreal (g n ya))", "thus \"Ex (?Q n)\""], ["proof (prove)\nusing this:\n  (\\<forall>x y. (x, y) \\<notin> R n \\<longrightarrow> h' x y = 0) \\<and>\n  (\\<forall>x y. h' x y \\<noteq> \\<top>) \\<and>\n  (\\<forall>x\\<in>A_n' n.\n      integral\\<^sup>N (count_space (Y n)) (h' x) = ennreal (f n x)) \\<and>\n  (\\<forall>y\\<in>Y n.\n      (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' x y) = ennreal (g n y))\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       (\\<forall>x y.\n           (x, y) \\<notin> R n \\<longrightarrow> a x y = 0) \\<and>\n       (\\<forall>x y. a x y \\<noteq> \\<top>) \\<and>\n       (\\<forall>x\\<in>A_n' n.\n           integral\\<^sup>N (count_space (Y n)) (a x) =\n           ennreal (f n x)) \\<and>\n       (\\<forall>y\\<in>Y n.\n           (\\<Sum>\\<^sup>+ x\\<in>A_n' n. a x y) = ennreal (g n y))", "by blast"], ["proof (state)\nthis:\n  \\<exists>a.\n     (\\<forall>x y. (x, y) \\<notin> R n \\<longrightarrow> a x y = 0) \\<and>\n     (\\<forall>x y. a x y \\<noteq> \\<top>) \\<and>\n     (\\<forall>x\\<in>A_n' n.\n         integral\\<^sup>N (count_space (Y n)) (a x) =\n         ennreal (f n x)) \\<and>\n     (\\<forall>y\\<in>Y n.\n         (\\<Sum>\\<^sup>+ x\\<in>A_n' n. a x y) = ennreal (g n y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>h'.\n     \\<forall>n.\n        (\\<forall>x y.\n            (x, y) \\<notin> R n \\<longrightarrow> h' n x y = 0) \\<and>\n        (\\<forall>x y. h' n x y \\<noteq> \\<top>) \\<and>\n        (\\<forall>x\\<in>A_n' n.\n            integral\\<^sup>N (count_space (Y n)) (h' n x) =\n            ennreal (f n x)) \\<and>\n        (\\<forall>y\\<in>Y n.\n            (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>h'.\n     \\<forall>n.\n        (\\<forall>x y.\n            (x, y) \\<notin> R n \\<longrightarrow> h' n x y = 0) \\<and>\n        (\\<forall>x y. h' n x y \\<noteq> \\<top>) \\<and>\n        (\\<forall>x\\<in>A_n' n.\n            integral\\<^sup>N (count_space (Y n)) (h' n x) =\n            ennreal (f n x)) \\<and>\n        (\\<forall>y\\<in>Y n.\n            (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y))", "obtain h' where dom_h': \"\\<And>x y. (x, y) \\<notin> R n \\<Longrightarrow> h' n x y = 0\"\n    and fin_h' [simp]: \"\\<And>x y. h' n x y \\<noteq> \\<top>\"\n    and h'_f: \"\\<And>x. x \\<in> A_n' n \\<Longrightarrow> (\\<Sum>\\<^sup>+ y\\<in>Y n. h' n x y) = f n x\"\n    and h'_g: \"\\<And>y. y \\<in> Y n \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = g n y\"\n    for n"], ["proof (prove)\nusing this:\n  \\<exists>h'.\n     \\<forall>n.\n        (\\<forall>x y.\n            (x, y) \\<notin> R n \\<longrightarrow> h' n x y = 0) \\<and>\n        (\\<forall>x y. h' n x y \\<noteq> \\<top>) \\<and>\n        (\\<forall>x\\<in>A_n' n.\n            integral\\<^sup>N (count_space (Y n)) (h' n x) =\n            ennreal (f n x)) \\<and>\n        (\\<forall>y\\<in>Y n.\n            (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y))\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        \\<lbrakk>\\<And>n x y.\n                    (x, y) \\<notin> R n \\<Longrightarrow> h' n x y = 0;\n         \\<And>n x y. h' n x y \\<noteq> \\<top>;\n         \\<And>n x.\n            x \\<in> A_n' n \\<Longrightarrow>\n            integral\\<^sup>N (count_space (Y n)) (h' n x) = ennreal (f n x);\n         \\<And>n y.\n            y \\<in> Y n \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) =\n            ennreal (g n y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (?x, ?y) \\<notin> R ?n \\<Longrightarrow> h' ?n ?x ?y = 0\n  h' ?n ?x ?y \\<noteq> \\<top>\n  ?x \\<in> A_n' ?n \\<Longrightarrow>\n  integral\\<^sup>N (count_space (Y ?n)) (h' ?n ?x) = ennreal (f ?n ?x)\n  ?y \\<in> Y ?n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' ?n. h' ?n x ?y) = ennreal (g ?n ?y)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define h :: \"nat \\<Rightarrow> 'v \\<times> 'v \\<Rightarrow> real\"\n    where \"h n = (\\<lambda>(x, y). if x \\<in> A_n n \\<and> y \\<in> Y n then enn2real (h' n (Some x) y) else 0)\" for n"], ["proof (state)\nthis:\n  h ?n =\n  (\\<lambda>(x, y).\n      if x \\<in> A_n ?n \\<and> y \\<in> Y ?n then enn2real (h' ?n (Some x) y)\n      else 0)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_nonneg: \"0 \\<le> h n xy\" for n xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> h n xy", "by(simp add: h_def split_def)"], ["proof (state)\nthis:\n  0 \\<le> h ?n ?xy\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_notB: \"h n (x, y) = 0\" if \"y \\<notin> B \\<Gamma>\" for n x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "using Y_B[of n] that"], ["proof (prove)\nusing this:\n  Y n \\<subseteq> B \\<Gamma>\n  y \\<notin> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "by(auto simp add: h_def)"], ["proof (state)\nthis:\n  ?y \\<notin> B \\<Gamma> \\<Longrightarrow> h ?n (?x, ?y) = 0\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_le_weight2: \"h n (x, y) \\<le> weight \\<Gamma> y\" for n x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "proof(cases \"x \\<in> A_n n \\<and> y \\<in> Y n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> A_n n \\<and> y \\<in> Y n \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n 2. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "case True"], ["proof (state)\nthis:\n  x \\<in> A_n n \\<and> y \\<in> Y n\n\ngoal (2 subgoals):\n 1. x \\<in> A_n n \\<and> y \\<in> Y n \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n 2. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "have \"h' n (Some x) y \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h' n (Some x) y \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y)", "by(rule nn_integral_ge_point)(auto simp add: A_n'_def True)"], ["proof (state)\nthis:\n  h' n (Some x) y \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y)\n\ngoal (2 subgoals):\n 1. x \\<in> A_n n \\<and> y \\<in> Y n \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n 2. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "also"], ["proof (state)\nthis:\n  h' n (Some x) y \\<le> (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y)\n\ngoal (2 subgoals):\n 1. x \\<in> A_n n \\<and> y \\<in> Y n \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n 2. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "have \"\\<dots> \\<le> weight \\<Gamma> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) \\<le> weight \\<Gamma> y", "using h'_g[of y n] True"], ["proof (prove)\nusing this:\n  y \\<in> Y n \\<Longrightarrow>\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y)\n  x \\<in> A_n n \\<and> y \\<in> Y n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) \\<le> weight \\<Gamma> y", "by(simp add: g_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) \\<le> weight \\<Gamma> y\n\ngoal (2 subgoals):\n 1. x \\<in> A_n n \\<and> y \\<in> Y n \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n 2. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "finally"], ["proof (chain)\npicking this:\n  h' n (Some x) y \\<le> weight \\<Gamma> y", "show ?thesis"], ["proof (prove)\nusing this:\n  h' n (Some x) y \\<le> weight \\<Gamma> y\n\ngoal (1 subgoal):\n 1. ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "using True"], ["proof (prove)\nusing this:\n  h' n (Some x) y \\<le> weight \\<Gamma> y\n  x \\<in> A_n n \\<and> y \\<in> Y n\n\ngoal (1 subgoal):\n 1. ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "by(simp add: h_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  ennreal (h n (x, y)) \\<le> weight \\<Gamma> y\n\ngoal (1 subgoal):\n 1. \\<not> (x \\<in> A_n n \\<and> y \\<in> Y n) \\<Longrightarrow>\n    ennreal (h n (x, y)) \\<le> weight \\<Gamma> y", "qed(auto simp add: h_def)"], ["proof (state)\nthis:\n  ennreal (h ?n (?x, ?y)) \\<le> weight \\<Gamma> ?y\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_OUT: \"d_OUT (h n) x = (if x \\<in> A_n n then weight \\<Gamma> x else 0)\" for n x"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (h n x)) x =\n    (if x \\<in> A_n n then weight \\<Gamma> x else 0)", "using h'_f[of \"Some x\" n, symmetric]"], ["proof (prove)\nusing this:\n  Some x \\<in> A_n' n \\<Longrightarrow>\n  ennreal (f n (Some x)) =\n  integral\\<^sup>N (count_space (Y n)) (h' n (Some x))\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (h n x)) x =\n    (if x \\<in> A_n n then weight \\<Gamma> x else 0)", "by(auto simp add: h_def d_OUT_def A_n'_def f_simps ennreal_enn2real_if nn_integral_count_space_indicator intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  d_OUT (\\<lambda>x. ennreal (h ?n x)) ?x =\n  (if ?x \\<in> A_n ?n then weight \\<Gamma> ?x else 0)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_IN: \"d_IN (h n) y = (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\" for n y"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "proof(cases \"y \\<in> Y n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "case True"], ["proof (state)\nthis:\n  y \\<in> Y n\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "have \"d_IN (h n) y = (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (h n x)) y =\n    (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y)", "by(subst nn_integral_count_space_reindex)\n        (auto simp add: d_IN_def h_def nn_integral_count_space_indicator ennreal_enn2real_if R_def intro!: nn_integral_cong dom_h' split: split_indicator)"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (h n x)) y =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y)\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "also"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (h n x)) y =\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y)\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) - (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y) =\n    (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n    (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y)", "apply(simp add: nn_integral_count_space_indicator del: nn_integral_indicator_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+x\\<in>Some ` A_n n. h' n x y\n    \\<partial>count_space UNIV =\n    (\\<integral>\\<^sup>+x\\<in>A_n' n. h' n x y\\<partial>count_space UNIV) -\n    (\\<integral>\\<^sup>+x\\<in>{None}. h' n x y\\<partial>count_space UNIV)", "apply(subst nn_integral_diff[symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. (\\<lambda>x. h' n x y * indicator (A_n' n) x)\n    \\<in> borel_measurable (count_space UNIV)\n 2. (\\<lambda>x. h' n x y * indicator {None} x)\n    \\<in> borel_measurable (count_space UNIV)\n 3. \\<integral>\\<^sup>+x\\<in>{None}. h' n x y\n    \\<partial>count_space UNIV \\<noteq>\n    \\<infinity>\n 4. AE x in count_space\n             UNIV. h' n x y * indicator {None} x\n                   \\<le> h' n x y * indicator (A_n' n) x\n 5. \\<integral>\\<^sup>+x\\<in>Some ` A_n n. h' n x y\n    \\<partial>count_space UNIV =\n    (\\<Sum>\\<^sup>+ x.\n       h' n x y * indicator (A_n' n) x - h' n x y * indicator {None} x)", "apply(auto simp add: AE_count_space A_n'_def nn_integral_count_space_indicator split: split_indicator intro!: nn_integral_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y) =\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y)\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>Some ` A_n n. h' n x y) =\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y)\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "have \"\\<dots> = g n y - h' n None y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n    (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y) =\n    ennreal (g n y) - h' n None y", "using h'_g[OF True]"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) = ennreal (g n y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n    (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y) =\n    ennreal (g n y) - h' n None y", "by(simp add: nn_integral_count_space_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A_n' n. h' n x y) -\n  (\\<Sum>\\<^sup>+ x\\<in>{None}. h' n x y) =\n  ennreal (g n y) - h' n None y\n\ngoal (2 subgoals):\n 1. y \\<in> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n 2. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "finally"], ["proof (chain)\npicking this:\n  d_IN (\\<lambda>x. ennreal (h n x)) y = ennreal (g n y) - h' n None y", "show ?thesis"], ["proof (prove)\nusing this:\n  d_IN (\\<lambda>x. ennreal (h n x)) y = ennreal (g n y) - h' n None y\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "using True"], ["proof (prove)\nusing this:\n  d_IN (\\<lambda>x. ennreal (h n x)) y = ennreal (g n y) - h' n None y\n  y \\<in> Y n\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "by(simp add: g_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (h n x)) y =\n  ennreal\n   (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)\n\ngoal (1 subgoal):\n 1. y \\<notin> Y n \\<Longrightarrow>\n    d_IN (\\<lambda>x. ennreal (h n x)) y =\n    ennreal\n     (if y \\<in> Y n then enn2real (weight \\<Gamma> y - h' n None y) else 0)", "qed(auto simp add: d_IN_def ennreal_enn2real_if nn_integral_0_iff_AE AE_count_space h_def g_def)"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (h ?n x)) ?y =\n  ennreal\n   (if ?y \\<in> Y ?n then enn2real (weight \\<Gamma> ?y - h' ?n None ?y)\n    else 0)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "let ?Q = \"\\<^bold>V \\<times> \\<^bold>V\""], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"bounded (range (\\<lambda>n. h n xy))\" if \"xy \\<in> ?Q\" for xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. h n xy))", "unfolding bounded_def dist_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       \\<forall>y\\<in>range (\\<lambda>n. h n xy). \\<bar>x - y\\<bar> \\<le> e", "proof(rule exI strip|erule imageE|hypsubst)+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "obtain x y where [simp]: \"xy = (x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. xy = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases xy)"], ["proof (state)\nthis:\n  xy = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "have \"h n (x, y) \\<le> d_OUT (h n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (h n (x, y)) \\<le> d_OUT (\\<lambda>x. ennreal (h n x)) x", "unfolding d_OUT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (h n (x, y)) \\<le> (\\<Sum>\\<^sup>+ y. ennreal (h n (x, y)))", "by(rule nn_integral_ge_point) simp"], ["proof (state)\nthis:\n  ennreal (h n (x, y)) \\<le> d_OUT (\\<lambda>x. ennreal (h n x)) x\n\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "also"], ["proof (state)\nthis:\n  ennreal (h n (x, y)) \\<le> d_OUT (\\<lambda>x. ennreal (h n x)) x\n\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "have \"\\<dots> \\<le> weight \\<Gamma> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (h n x)) x \\<le> weight \\<Gamma> x", "by(simp add: h_OUT)"], ["proof (state)\nthis:\n  d_OUT (\\<lambda>x. ennreal (h n x)) x \\<le> weight \\<Gamma> x\n\ngoal (1 subgoal):\n 1. \\<And>y n.\n       n \\<in> UNIV \\<Longrightarrow> \\<bar>?x - h n xy\\<bar> \\<le> ?e2", "finally"], ["proof (chain)\npicking this:\n  ennreal (h n (x, y)) \\<le> weight \\<Gamma> x", "show \"\\<bar>0 - h n xy\\<bar> \\<le> enn2real (weight \\<Gamma> (fst xy))\""], ["proof (prove)\nusing this:\n  ennreal (h n (x, y)) \\<le> weight \\<Gamma> x\n\ngoal (1 subgoal):\n 1. \\<bar>0 - h n xy\\<bar> \\<le> enn2real (weight \\<Gamma> (fst xy))", "by(simp add: h_nonneg)(metis enn2real_ennreal ennreal_cases ennreal_le_iff weight_finite)"], ["proof (state)\nthis:\n  \\<bar>0 - h n xy\\<bar> \\<le> enn2real (weight \\<Gamma> (fst xy))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  bounded (range (\\<lambda>n. h n ?xy))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  ?xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  bounded (range (\\<lambda>n. h n ?xy))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"countable ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (\\<^bold>V \\<times> \\<^bold>V)", "using countable_V"], ["proof (prove)\nusing this:\n  countable \\<^bold>V\n\ngoal (1 subgoal):\n 1. countable (\\<^bold>V \\<times> \\<^bold>V)", "by(simp)"], ["proof (state)\nthis:\n  countable (\\<^bold>V \\<times> \\<^bold>V)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  ?xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  bounded (range (\\<lambda>n. h n ?xy))\n  countable (\\<^bold>V \\<times> \\<^bold>V)", "obtain k where k: \"strict_mono k\" \n    and conv: \"\\<And>xy. xy \\<in> ?Q \\<Longrightarrow> convergent (\\<lambda>n. h (k n) xy)\""], ["proof (prove)\nusing this:\n  ?xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  bounded (range (\\<lambda>n. h n ?xy))\n  countable (\\<^bold>V \\<times> \\<^bold>V)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>xy.\n            xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n            convergent (\\<lambda>n. h (k n) xy)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule convergent_bounded_family) blast+"], ["proof (state)\nthis:\n  strict_mono k\n  ?xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  convergent (\\<lambda>n. h (k n) ?xy)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_outside: \"h n xy = 0\" if \"xy \\<notin> ?Q\" for xy n"], ["proof (prove)\ngoal (1 subgoal):\n 1. h n xy = 0", "using that A_n_A[of n] A_vertex Y_vertex"], ["proof (prove)\nusing this:\n  xy \\<notin> \\<^bold>V \\<times> \\<^bold>V\n  A_n n \\<subseteq> A \\<Gamma>\n  A \\<Gamma> \\<subseteq> \\<^bold>V\n  Y ?n \\<subseteq> \\<^bold>V\n\ngoal (1 subgoal):\n 1. h n xy = 0", "by(auto simp add: h_def split: prod.split)"], ["proof (state)\nthis:\n  ?xy \\<notin> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow> h ?n ?xy = 0\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_outside_AB: \"h n (x, y) = 0\" if \"x \\<notin> A \\<Gamma> \\<or> y \\<notin> B \\<Gamma>\" for n x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "using that A_n_A[of n] Y_B[of n]"], ["proof (prove)\nusing this:\n  x \\<notin> A \\<Gamma> \\<or> y \\<notin> B \\<Gamma>\n  A_n n \\<subseteq> A \\<Gamma>\n  Y n \\<subseteq> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "by(auto simp add: h_def)"], ["proof (state)\nthis:\n  ?x \\<notin> A \\<Gamma> \\<or> ?y \\<notin> B \\<Gamma> \\<Longrightarrow>\n  h ?n (?x, ?y) = 0\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have h_outside_E: \"h n (x, y) = 0\" if \"(x, y) \\<notin> \\<^bold>E\" for n x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "using that"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> \\<^bold>E\n\ngoal (1 subgoal):\n 1. h n (x, y) = 0", "unfolding h_def"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> \\<^bold>E\n\ngoal (1 subgoal):\n 1. (case (x, y) of\n     (x, y) \\<Rightarrow>\n       if x \\<in> A_n n \\<and> y \\<in> Y n then enn2real (h' n (Some x) y)\n       else 0) =\n    0", "by(clarsimp)(subst dom_h', auto simp add: R_def)"], ["proof (state)\nthis:\n  (?x, ?y) \\<notin> \\<^bold>E \\<Longrightarrow> h ?n (?x, ?y) = 0\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "define H where \"H xy = lim (\\<lambda>n. h (k n) xy)\" for xy"], ["proof (state)\nthis:\n  H ?xy = lim (\\<lambda>n. h (k n) ?xy)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have H: \"(\\<lambda>n. h (k n) xy) \\<longlonglongrightarrow> H xy\" for xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. h (k n) xy) \\<longlonglongrightarrow> H xy", "using conv[of xy]"], ["proof (prove)\nusing this:\n  xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  convergent (\\<lambda>n. h (k n) xy)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. h (k n) xy) \\<longlonglongrightarrow> H xy", "unfolding H_def"], ["proof (prove)\nusing this:\n  xy \\<in> \\<^bold>V \\<times> \\<^bold>V \\<Longrightarrow>\n  convergent (\\<lambda>n. h (k n) xy)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. h (k n) xy)\n    \\<longlonglongrightarrow> lim (\\<lambda>n. h (k n) xy)", "by(cases \"xy \\<in> ?Q\")(auto simp add: convergent_LIMSEQ_iff h_outside)"], ["proof (state)\nthis:\n  (\\<lambda>n. h (k n) ?xy) \\<longlonglongrightarrow> H ?xy\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have H_outside: \"H (x, y) = 0\" if \"x \\<notin> A \\<Gamma> \\<or> y \\<notin> B \\<Gamma>\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. H (x, y) = 0", "using that"], ["proof (prove)\nusing this:\n  x \\<notin> A \\<Gamma> \\<or> y \\<notin> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. H (x, y) = 0", "by(simp add: H_def convergent_LIMSEQ_iff h_outside_AB)"], ["proof (state)\nthis:\n  ?x \\<notin> A \\<Gamma> \\<or> ?y \\<notin> B \\<Gamma> \\<Longrightarrow>\n  H (?x, ?y) = 0\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have H': \"(\\<lambda>n. ennreal (h (k n) xy)) \\<longlonglongrightarrow> H xy\" for xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) xy))\n    \\<longlonglongrightarrow> ennreal (H xy)", "using H"], ["proof (prove)\nusing this:\n  (\\<lambda>n. h (k n) ?xy) \\<longlonglongrightarrow> H ?xy\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) xy))\n    \\<longlonglongrightarrow> ennreal (H xy)", "by(rule tendsto_ennrealI)"], ["proof (state)\nthis:\n  (\\<lambda>n. ennreal (h (k n) ?xy))\n  \\<longlonglongrightarrow> ennreal (H ?xy)\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have H_def': \"H xy = lim (\\<lambda>n. ennreal (h (k n) xy))\" for xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (H xy) = lim (\\<lambda>n. ennreal (h (k n) xy))", "by (metis H' limI)"], ["proof (state)\nthis:\n  ennreal (H ?xy) = lim (\\<lambda>n. ennreal (h (k n) ?xy))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have H_OUT: \"d_OUT H x = weight \\<Gamma> x\" if x: \"x \\<in> A \\<Gamma>\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "let ?w = \"\\<lambda>y. if (x, y) \\<in> \\<^bold>E then weight \\<Gamma> y else 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "have sum_w: \"(\\<Sum>\\<^sup>+ y. if edge \\<Gamma> x y then weight \\<Gamma> y else 0) = (\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E `` {x}. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ y. if edge \\<Gamma> x y then weight \\<Gamma> y else 0) =\n    integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)", "by(simp add: nn_integral_count_space_indicator indicator_def if_distrib cong: if_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y. if edge \\<Gamma> x y then weight \\<Gamma> y else 0) =\n  integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "have \"(\\<lambda>n. d_OUT (h (k n)) x) \\<longlonglongrightarrow> d_OUT H x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n    \\<longlonglongrightarrow> d_OUT (\\<lambda>x. ennreal (H x)) x", "unfolding d_OUT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<Sum>\\<^sup>+ y. ennreal (h (k n) (x, y)))\n    \\<longlonglongrightarrow> (\\<Sum>\\<^sup>+ y. ennreal (H (x, y)))", "by(rule nn_integral_dominated_convergence[where w=\"?w\"])(use bounded_B x in \\<open>simp_all add: AE_count_space H h_outside_E h_le_weight2 sum_w\\<close>)"], ["proof (state)\nthis:\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> d_OUT (\\<lambda>x. ennreal (H x)) x\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> d_OUT (\\<lambda>x. ennreal (H x)) x\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "define n_x where \"n_x = to_nat_on (A \\<Gamma>) x\""], ["proof (state)\nthis:\n  n_x = to_nat_on (A \\<Gamma>) x\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "have x': \"x \\<in> A_n (k n)\" if \"n \\<ge> n_x\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A_n (k n)", "using that seq_suble[OF k, of n] x"], ["proof (prove)\nusing this:\n  n_x \\<le> n\n  n \\<le> k n\n  x \\<in> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> A_n (k n)", "unfolding A_n_def"], ["proof (prove)\nusing this:\n  n_x \\<le> n\n  n \\<le> k n\n  x \\<in> A \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> from_nat_into (A \\<Gamma>) ` {..k n}", "by(intro rev_image_eqI[where x=n_x])(simp_all add: A_n_def n_x_def)"], ["proof (state)\nthis:\n  n_x \\<le> ?n \\<Longrightarrow> x \\<in> A_n (k ?n)\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "have \"(\\<lambda>n. d_OUT (h (k n)) x) \\<longlonglongrightarrow> weight \\<Gamma> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n    \\<longlonglongrightarrow> weight \\<Gamma> x", "by(intro tendsto_eventually eventually_sequentiallyI[where c=\"n_x\"])(simp add: h_OUT x')"], ["proof (state)\nthis:\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> weight \\<Gamma> x\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> d_OUT (\\<lambda>x. ennreal (H x)) x\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> weight \\<Gamma> x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> d_OUT (\\<lambda>x. ennreal (H x)) x\n  (\\<lambda>n. d_OUT (\\<lambda>x. ennreal (h (k n) x)) x)\n  \\<longlonglongrightarrow> weight \\<Gamma> x\n\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x", "by(rule LIMSEQ_unique)"], ["proof (state)\nthis:\n  d_OUT (\\<lambda>x. ennreal (H x)) x = weight \\<Gamma> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Gamma> \\<Longrightarrow>\n  d_OUT (\\<lambda>x. ennreal (H x)) ?x = weight \\<Gamma> ?x\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Gamma> \\<Longrightarrow>\n  d_OUT (\\<lambda>x. ennreal (H x)) ?x = weight \\<Gamma> ?x", "have \"linkage \\<Gamma> H\""], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Gamma> \\<Longrightarrow>\n  d_OUT (\\<lambda>x. ennreal (H x)) ?x = weight \\<Gamma> ?x\n\ngoal (1 subgoal):\n 1. linkage \\<Gamma> (\\<lambda>x. ennreal (H x))", ".."], ["proof (state)\nthis:\n  linkage \\<Gamma> (\\<lambda>x. ennreal (H x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  linkage \\<Gamma> (\\<lambda>x. ennreal (H x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "have \"web_flow \\<Gamma> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. web_flow \\<Gamma> (\\<lambda>x. ennreal (H x))", "unfolding web_flow_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. current \\<Gamma> (\\<lambda>x. ennreal (H x))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. d_OUT (\\<lambda>x. ennreal (H x)) x \\<le> weight \\<Gamma> x\n 2. \\<And>x. d_IN (\\<lambda>x. ennreal (H x)) x \\<le> weight \\<Gamma> x\n 3. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> ennreal (H e) = 0", "show \"d_OUT H x \\<le> weight \\<Gamma> x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (\\<lambda>x. ennreal (H x)) x \\<le> weight \\<Gamma> x", "by(cases \"x \\<in> A \\<Gamma>\")(simp_all add: H_OUT[unfolded d_OUT_def] H_outside d_OUT_def)"], ["proof (state)\nthis:\n  d_OUT (\\<lambda>x. ennreal (H x)) ?x \\<le> weight \\<Gamma> ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. d_IN (\\<lambda>x. ennreal (H x)) x \\<le> weight \\<Gamma> x\n 2. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> ennreal (H e) = 0", "show \"d_IN H y \\<le> weight \\<Gamma> y\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "have \"d_IN H y = (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y =\n    (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))", "unfolding d_IN_def H_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. lim (\\<lambda>n. ennreal (h (k n) (x, y)))) =\n    (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))", "by(rule nn_integral_cong convergent_liminf_cl[symmetric] convergentI H')+"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (H x)) y =\n  (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "also"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (H x)) y =\n  (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "have \"\\<dots> \\<le> liminf (\\<lambda>n. d_IN (h (k n)) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n    \\<le> liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)", "unfolding d_IN_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n    \\<le> liminf (\\<lambda>n. \\<Sum>\\<^sup>+ x. ennreal (h (k n) (x, y)))", "by(rule nn_integral_liminf) simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n  \\<le> liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. liminf (\\<lambda>n. ennreal (h (k n) (x, y))))\n  \\<le> liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "have \"\\<dots> \\<le> liminf (\\<lambda>n. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)\n    \\<le> liminf (\\<lambda>n. weight \\<Gamma> y)", "unfolding h_IN"], ["proof (prove)\ngoal (1 subgoal):\n 1. liminf\n     (\\<lambda>n.\n         ennreal\n          (if y \\<in> Y (k n)\n           then enn2real (weight \\<Gamma> y - h' (k n) None y) else 0))\n    \\<le> liminf (\\<lambda>n. weight \\<Gamma> y)", "by(rule Liminf_mono)(auto simp add: ennreal_enn2real_if)"], ["proof (state)\nthis:\n  liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)\n  \\<le> liminf (\\<lambda>n. weight \\<Gamma> y)\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "also"], ["proof (state)\nthis:\n  liminf (\\<lambda>n. d_IN (\\<lambda>x. ennreal (h (k n) x)) y)\n  \\<le> liminf (\\<lambda>n. weight \\<Gamma> y)\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "have \"\\<dots> = weight \\<Gamma> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liminf (\\<lambda>n. weight \\<Gamma> y) = weight \\<Gamma> y", "by(simp add: Liminf_const)"], ["proof (state)\nthis:\n  liminf (\\<lambda>n. weight \\<Gamma> y) = weight \\<Gamma> y\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "finally"], ["proof (chain)\npicking this:\n  d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "show \"?thesis\""], ["proof (prove)\nusing this:\n  d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y\n\ngoal (1 subgoal):\n 1. d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y", "."], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (H x)) y \\<le> weight \\<Gamma> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d_IN (\\<lambda>x. ennreal (H x)) ?y \\<le> weight \\<Gamma> ?y\n\ngoal (1 subgoal):\n 1. \\<And>e. e \\<notin> \\<^bold>E \\<Longrightarrow> ennreal (H e) = 0", "show \"ennreal (H e) = 0\" if \"e \\<notin> \\<^bold>E\" for e"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (H e) = 0", "proof(rule LIMSEQ_unique[OF H'])"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0", "obtain x y where [simp]: \"e = (x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. e = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases e)"], ["proof (state)\nthis:\n  e = (x, y)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0", "have \"ennreal (h (k n) (x, y)) = 0\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (h (k n) (x, y)) = 0", "using dom_h'[of \"Some x\" y \"k n\"] that"], ["proof (prove)\nusing this:\n  (Some x, y) \\<notin> R (k n) \\<Longrightarrow> h' (k n) (Some x) y = 0\n  e \\<notin> \\<^bold>E\n\ngoal (1 subgoal):\n 1. ennreal (h (k n) (x, y)) = 0", "by(auto simp add: h_def R_def enn2real_eq_0_iff elim: meta_mp)"], ["proof (state)\nthis:\n  ennreal (h (k ?n) (x, y)) = 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0", "then"], ["proof (chain)\npicking this:\n  ennreal (h (k ?n) (x, y)) = 0", "show \"(\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  ennreal (h (k ?n) (x, y)) = 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0", "using that"], ["proof (prove)\nusing this:\n  ennreal (h (k ?n) (x, y)) = 0\n  e \\<notin> \\<^bold>E\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0", "by(intro tendsto_eventually eventually_sequentiallyI) simp"], ["proof (state)\nthis:\n  (\\<lambda>n. ennreal (h (k n) e)) \\<longlonglongrightarrow> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?e \\<notin> \\<^bold>E \\<Longrightarrow> ennreal (H ?e) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  web_flow \\<Gamma> (\\<lambda>x. ennreal (H x))\n\ngoal (1 subgoal):\n 1. A \\<Gamma> \\<noteq> {} \\<Longrightarrow> linkable \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  linkage \\<Gamma> (\\<lambda>x. ennreal (H x))\n  web_flow \\<Gamma> (\\<lambda>x. ennreal (H x))", "show ?thesis"], ["proof (prove)\nusing this:\n  linkage \\<Gamma> (\\<lambda>x. ennreal (H x))\n  web_flow \\<Gamma> (\\<lambda>x. ennreal (H x))\n\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "by blast"], ["proof (state)\nthis:\n  linkable \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Glueing the reductions together\\<close>"], ["", "locale bounded_countable_web = countable_web \\<Gamma>\n  for \\<Gamma> :: \"('v, 'more) web_scheme\" (structure)\n  +\n  assumes bounded_out: \"x \\<in> \\<^bold>V - B \\<Gamma> \\<Longrightarrow> (\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E `` {x}. weight \\<Gamma> y) < \\<top>\"\nbegin"], ["", "lemma bounded_countable_bipartite_web_of: \"bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)\"\n  (is \"bounded_countable_bipartite_web ?\\<Gamma>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)", "interpret bi: countable_bipartite_web ?\\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_bipartite_web (bipartite_web_of \\<Gamma>)", "by(rule countable_bipartite_web_of)"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "assume \"x \\<in> A ?\\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> A (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "then"], ["proof (chain)\npicking this:\n  x \\<in> A (bipartite_web_of \\<Gamma>)", "obtain x' where x: \"x = Inl x'\" and x': \"vertex \\<Gamma> x'\" \"x' \\<notin> B \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> A (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x = Inl x'; vertex \\<Gamma> x';\n         x' \\<notin> B \\<Gamma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = Inl x'\n  vertex \\<Gamma> x'\n  x' \\<notin> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "have \"\\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {x} \\<subseteq> Inr ` ({x'} \\<union> (\\<^bold>E `` {x'}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}\n    \\<subseteq> Inr ` ({x'} \\<union> \\<^bold>E `` {x'})", "using x"], ["proof (prove)\nusing this:\n  x = Inl x'\n\ngoal (1 subgoal):\n 1. \\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}\n    \\<subseteq> Inr ` ({x'} \\<union> \\<^bold>E `` {x'})", "by(auto simp add: bipartite_web_of_def vertex_def split: sum.split_asm)"], ["proof (state)\nthis:\n  \\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}\n  \\<subseteq> Inr ` ({x'} \\<union> \\<^bold>E `` {x'})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "hence \"(\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {x}. weight ?\\<Gamma> y) \\<le> (\\<Sum>\\<^sup>+ y \\<in> \\<dots>. weight ?\\<Gamma> y)\""], ["proof (prove)\nusing this:\n  \\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}\n  \\<subseteq> Inr ` ({x'} \\<union> \\<^bold>E `` {x'})\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space\n       (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n     (weight (bipartite_web_of \\<Gamma>))\n    \\<le> integral\\<^sup>N\n           (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n           (weight (bipartite_web_of \\<Gamma>))", "by(auto simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n   (weight (bipartite_web_of \\<Gamma>))\n  \\<le> integral\\<^sup>N\n         (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n         (weight (bipartite_web_of \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n   (weight (bipartite_web_of \\<Gamma>))\n  \\<le> integral\\<^sup>N\n         (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n         (weight (bipartite_web_of \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> (\\<^bold>E `` {x'}). weight (bipartite_web_of \\<Gamma>) (Inr y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n     (weight (bipartite_web_of \\<Gamma>)) =\n    (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n       weight (bipartite_web_of \\<Gamma>) (Inr y))", "by(rule nn_integral_count_space_reindex)(auto)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n   (weight (bipartite_web_of \\<Gamma>)) =\n  (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n     weight (bipartite_web_of \\<Gamma>) (Inr y))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (Inr ` ({x'} \\<union> \\<^bold>E `` {x'})))\n   (weight (bipartite_web_of \\<Gamma>)) =\n  (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n     weight (bipartite_web_of \\<Gamma>) (Inr y))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "have \"\\<dots> \\<le> weight \\<Gamma> x' + (\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E `` {x'}. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n       weight (bipartite_web_of \\<Gamma>) (Inr y))\n    \\<le> weight \\<Gamma> x' +\n          integral\\<^sup>N (count_space (\\<^bold>E `` {x'}))\n           (weight \\<Gamma>)", "apply(subst (1 2) nn_integral_count_space_indicator, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+x\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n                       weight (bipartite_web_of \\<Gamma>) (Inr x)\n    \\<partial>count_space UNIV\n    \\<le> weight \\<Gamma> x' +\n          set_nn_integral (count_space UNIV) (\\<^bold>E `` {x'})\n           (weight \\<Gamma>)", "apply(cases \"\\<not> edge \\<Gamma> x' x'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    \\<integral>\\<^sup>+x\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n                       weight (bipartite_web_of \\<Gamma>) (Inr x)\n    \\<partial>count_space UNIV\n    \\<le> weight \\<Gamma> x' +\n          set_nn_integral (count_space UNIV) (\\<^bold>E `` {x'})\n           (weight \\<Gamma>)\n 2. \\<not> \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    \\<integral>\\<^sup>+x\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n                       weight (bipartite_web_of \\<Gamma>) (Inr x)\n    \\<partial>count_space UNIV\n    \\<le> weight \\<Gamma> x' +\n          set_nn_integral (count_space UNIV) (\\<^bold>E `` {x'})\n           (weight \\<Gamma>)", "apply(subst nn_integral_disjoint_pair)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    (\\<lambda>x. weight (bipartite_web_of \\<Gamma>) (Inr x))\n    \\<in> borel_measurable (count_space UNIV)\n 2. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    {x'} \\<in> sets (count_space UNIV)\n 3. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    \\<^bold>E `` {x'} \\<in> sets (count_space UNIV)\n 4. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    {x'} \\<inter> \\<^bold>E `` {x'} = {}\n 5. \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    (\\<integral>\\<^sup>+x\\<in>{x'}.\n                        weight (bipartite_web_of \\<Gamma>) (Inr x)\n     \\<partial>count_space UNIV) +\n    (\\<integral>\\<^sup>+x\\<in>\\<^bold>E `` {x'}.\n                        weight (bipartite_web_of \\<Gamma>) (Inr x)\n     \\<partial>count_space UNIV)\n    \\<le> weight \\<Gamma> x' +\n          set_nn_integral (count_space UNIV) (\\<^bold>E `` {x'})\n           (weight \\<Gamma>)\n 6. \\<not> \\<not> edge \\<Gamma> x' x' \\<Longrightarrow>\n    \\<integral>\\<^sup>+x\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n                       weight (bipartite_web_of \\<Gamma>) (Inr x)\n    \\<partial>count_space UNIV\n    \\<le> weight \\<Gamma> x' +\n          set_nn_integral (count_space UNIV) (\\<^bold>E `` {x'})\n           (weight \\<Gamma>)", "apply(auto intro!: nn_integral_mono add_increasing split: split_indicator)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n     weight (bipartite_web_of \\<Gamma>) (Inr y))\n  \\<le> weight \\<Gamma> x' +\n        integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ y\\<in>{x'} \\<union> \\<^bold>E `` {x'}.\n     weight (bipartite_web_of \\<Gamma>) (Inr y))\n  \\<le> weight \\<Gamma> x' +\n        integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "have \"\\<dots> < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight \\<Gamma> x' +\n    integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n    < \\<top>", "using bounded_out[of x'] x'"], ["proof (prove)\nusing this:\n  x' \\<in> \\<^bold>V - B \\<Gamma> \\<Longrightarrow>\n  integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n  < \\<top>\n  vertex \\<Gamma> x'\n  x' \\<notin> B \\<Gamma>\n\ngoal (1 subgoal):\n 1. weight \\<Gamma> x' +\n    integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n    < \\<top>", "using weight_finite[of x']"], ["proof (prove)\nusing this:\n  x' \\<in> \\<^bold>V - B \\<Gamma> \\<Longrightarrow>\n  integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n  < \\<top>\n  vertex \\<Gamma> x'\n  x' \\<notin> B \\<Gamma>\n  weight \\<Gamma> x' \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. weight \\<Gamma> x' +\n    integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n    < \\<top>", "by(simp del: weight_finite add: less_top)"], ["proof (state)\nthis:\n  weight \\<Gamma> x' +\n  integral\\<^sup>N (count_space (\\<^bold>E `` {x'})) (weight \\<Gamma>)\n  < \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A (bipartite_web_of \\<Gamma>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n        (weight (bipartite_web_of \\<Gamma>))\n       < \\<top>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n   (weight (bipartite_web_of \\<Gamma>))\n  < \\<top>", "show \"(\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {x}. weight ?\\<Gamma> y) < \\<top>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n   (weight (bipartite_web_of \\<Gamma>))\n  < \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space\n       (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n     (weight (bipartite_web_of \\<Gamma>))\n    < \\<top>", "."], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>bipartite_web_of \\<Gamma>\\<^esub> `` {x}))\n   (weight (bipartite_web_of \\<Gamma>))\n  < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem loose_linkable_bounded:\n  assumes \"loose \\<Gamma>\"\n  shows \"linkable \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "interpret bi: bounded_countable_bipartite_web \"bipartite_web_of \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_bipartite_web (bipartite_web_of \\<Gamma>)", "by(rule bounded_countable_bipartite_web_of)"], ["proof (state)\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "have \"\\<not> hindered (bipartite_web_of \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> hindered (bipartite_web_of \\<Gamma>)", "using assms"], ["proof (prove)\nusing this:\n  loose \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<not> hindered (bipartite_web_of \\<Gamma>)", "by(rule unhindered_bipartite_web_of)"], ["proof (state)\nthis:\n  \\<not> hindered (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<not> hindered (bipartite_web_of \\<Gamma>)", "have \"linkable (bipartite_web_of \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<not> hindered (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. linkable (bipartite_web_of \\<Gamma>)", "by(rule bi.unhindered_linkable_bounded)"], ["proof (state)\nthis:\n  linkable (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  linkable (bipartite_web_of \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  linkable (bipartite_web_of \\<Gamma>)\n\ngoal (1 subgoal):\n 1. linkable \\<Gamma>", "by(rule linkable_bipartite_web_ofD) simp"], ["proof (state)\nthis:\n  linkable \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bounded_countable_web_quotient_web: \"bounded_countable_web (quotient_web \\<Gamma> f)\" (is \"bounded_countable_web ?\\<Gamma>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_web (quotient_web \\<Gamma> f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_web (quotient_web \\<Gamma> f)", "interpret r: countable_web ?\\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_web (quotient_web \\<Gamma> f)", "by(rule countable_web_quotient_web)"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_web (quotient_web \\<Gamma> f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_web (quotient_web \\<Gamma> f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "assume \"x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> - B (quotient_web \\<Gamma> f)\""], ["proof (state)\nthis:\n  x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n          B (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n          B (quotient_web \\<Gamma> f)", "have x: \"x \\<in> \\<^bold>V - B \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n          B (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<^bold>V - B \\<Gamma>", "by(auto dest: vertex_quotient_webD)"], ["proof (state)\nthis:\n  x \\<in> \\<^bold>V - B \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "have \"(\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {x}. weight ?\\<Gamma> y) \\<le> (\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E `` {x}. weight \\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n     (weight (quotient_web \\<Gamma> f))\n    \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` {x}))\n           (weight \\<Gamma>)", "by(auto simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n   (weight (quotient_web \\<Gamma> f))\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n   (weight (quotient_web \\<Gamma> f))\n  \\<le> integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "have \"\\<dots> < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n    < \\<top>", "using x"], ["proof (prove)\nusing this:\n  x \\<in> \\<^bold>V - B \\<Gamma>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n    < \\<top>", "by(rule bounded_out)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E `` {x})) (weight \\<Gamma>)\n  < \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>quotient_web \\<Gamma> f\\<^esub> -\n               B (quotient_web \\<Gamma> f) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n        (weight (quotient_web \\<Gamma> f))\n       < \\<top>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n   (weight (quotient_web \\<Gamma> f))\n  < \\<top>", "show \"(\\<Sum>\\<^sup>+ y \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {x}. weight ?\\<Gamma> y) < \\<top>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n   (weight (quotient_web \\<Gamma> f))\n  < \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n     (weight (quotient_web \\<Gamma> f))\n    < \\<top>", "."], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>quotient_web \\<Gamma> f\\<^esub> `` {x}))\n   (weight (quotient_web \\<Gamma> f))\n  < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_countable_web (quotient_web \\<Gamma> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_orthogonal_current:\n  \"\\<exists>f S. web_flow \\<Gamma> f \\<and> separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "from ex_maximal_wave[OF countable]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     current \\<Gamma> f \\<and>\n     wave \\<Gamma> f \\<and>\n     (\\<forall>w.\n         current \\<Gamma> w \\<and>\n         wave \\<Gamma> w \\<and> f \\<le> w \\<longrightarrow>\n         f = w)", "obtain f where f: \"current \\<Gamma> f\"\n    and w: \"wave \\<Gamma> f\"\n    and maximal: \"\\<And>w. \\<lbrakk> current \\<Gamma> w; wave \\<Gamma> w; f \\<le> w \\<rbrakk> \\<Longrightarrow> f = w\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     current \\<Gamma> f \\<and>\n     wave \\<Gamma> f \\<and>\n     (\\<forall>w.\n         current \\<Gamma> w \\<and>\n         wave \\<Gamma> w \\<and> f \\<le> w \\<longrightarrow>\n         f = w)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>current \\<Gamma> f; wave \\<Gamma> f;\n         \\<And>w.\n            \\<lbrakk>current \\<Gamma> w; wave \\<Gamma> w; f \\<le> w\\<rbrakk>\n            \\<Longrightarrow> f = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  current \\<Gamma> f\n  wave \\<Gamma> f\n  \\<lbrakk>current \\<Gamma> ?w; wave \\<Gamma> ?w; f \\<le> ?w\\<rbrakk>\n  \\<Longrightarrow> f = ?w\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "from ex_trimming[OF f w countable weight_finite]"], ["proof (chain)\npicking this:\n  \\<exists>g. trimming \\<Gamma> f g", "obtain h where h: \"trimming \\<Gamma> f h\""], ["proof (prove)\nusing this:\n  \\<exists>g. trimming \\<Gamma> f g\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        trimming \\<Gamma> f h \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  trimming \\<Gamma> f h\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "let ?\\<Gamma> = \"quotient_web \\<Gamma> f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "interpret \\<Gamma>: bounded_countable_web \"?\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_web (quotient_web \\<Gamma> f)", "by(rule bounded_countable_web_quotient_web)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "have \"loose ?\\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose (quotient_web \\<Gamma> f)", "using f w maximal"], ["proof (prove)\nusing this:\n  current \\<Gamma> f\n  wave \\<Gamma> f\n  \\<lbrakk>current \\<Gamma> ?w; wave \\<Gamma> ?w; f \\<le> ?w\\<rbrakk>\n  \\<Longrightarrow> f = ?w\n\ngoal (1 subgoal):\n 1. loose (quotient_web \\<Gamma> f)", "by(rule loose_quotient_web[OF  weight_finite])"], ["proof (state)\nthis:\n  loose (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "then"], ["proof (chain)\npicking this:\n  loose (quotient_web \\<Gamma> f)", "have \"linkable ?\\<Gamma>\""], ["proof (prove)\nusing this:\n  loose (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. linkable (quotient_web \\<Gamma> f)", "by(rule \\<Gamma>.loose_linkable_bounded)"], ["proof (state)\nthis:\n  linkable (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "then"], ["proof (chain)\npicking this:\n  linkable (quotient_web \\<Gamma> f)", "obtain g where wg: \"web_flow ?\\<Gamma> g\" and link: \"linkage ?\\<Gamma> g\""], ["proof (prove)\nusing this:\n  linkable (quotient_web \\<Gamma> f)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>web_flow (quotient_web \\<Gamma> f) g;\n         linkage (quotient_web \\<Gamma> f) g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  web_flow (quotient_web \\<Gamma> f) g\n  linkage (quotient_web \\<Gamma> f) g\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "let ?k = \"plus_current h g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "have \"web_flow \\<Gamma> ?k\" \"orthogonal_current \\<Gamma> ?k (\\<E> (TER f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. web_flow \\<Gamma> (plus_current h g) &&&\n    orthogonal_current \\<Gamma> (plus_current h g) (\\<E> (TER f))", "by(rule linkage_quotient_webD[OF f w wg link h])+"], ["proof (state)\nthis:\n  web_flow \\<Gamma> (plus_current h g)\n  orthogonal_current \\<Gamma> (plus_current h g) (\\<E> (TER f))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "moreover"], ["proof (state)\nthis:\n  web_flow \\<Gamma> (plus_current h g)\n  orthogonal_current \\<Gamma> (plus_current h g) (\\<E> (TER f))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "have \"separating \\<Gamma> (\\<E> (TER f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. separating \\<Gamma> (\\<E> (TER f))", "using waveD_separating[OF w]"], ["proof (prove)\nusing this:\n  separating \\<Gamma> (TER f)\n\ngoal (1 subgoal):\n 1. separating \\<Gamma> (\\<E> (TER f))", "by(rule separating_essential)"], ["proof (state)\nthis:\n  separating \\<Gamma> (\\<E> (TER f))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "ultimately"], ["proof (chain)\npicking this:\n  web_flow \\<Gamma> (plus_current h g)\n  orthogonal_current \\<Gamma> (plus_current h g) (\\<E> (TER f))\n  separating \\<Gamma> (\\<E> (TER f))", "show ?thesis"], ["proof (prove)\nusing this:\n  web_flow \\<Gamma> (plus_current h g)\n  orthogonal_current \\<Gamma> (plus_current h g) (\\<E> (TER f))\n  separating \\<Gamma> (\\<E> (TER f))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       web_flow \\<Gamma> f \\<and>\n       separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S", "by blast"], ["proof (state)\nthis:\n  \\<exists>f S.\n     web_flow \\<Gamma> f \\<and>\n     separating \\<Gamma> S \\<and> orthogonal_current \\<Gamma> f S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bounded_countable_network = countable_network \\<Delta>\n  for \\<Delta> :: \"('v, 'more) network_scheme\" (structure) +\n  assumes out: \"\\<lbrakk> x \\<in> \\<^bold>V; x \\<noteq> source \\<Delta> \\<rbrakk> \\<Longrightarrow> d_OUT (capacity \\<Delta>) x < \\<top>\""], ["", "context antiparallel_edges begin"], ["", "lemma \\<Delta>''_bounded_countable_network: \"bounded_countable_network \\<Delta>''\"\n  if \"\\<And>x. \\<lbrakk> x \\<in> \\<^bold>V; x \\<noteq> source \\<Delta> \\<rbrakk> \\<Longrightarrow> d_OUT (capacity \\<Delta>) x < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "interpret ae: countable_network \\<Delta>''"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_network \\<Delta>''", "by(rule \\<Delta>''_countable_network)"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>;\n        x \\<noteq> source \\<Delta>''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>;\n        x \\<noteq> source \\<Delta>''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "assume x: \"x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>\" and not_source: \"x \\<noteq> source \\<Delta>''\""], ["proof (state)\nthis:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>\n  x \\<noteq> source \\<Delta>''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>;\n        x \\<noteq> source \\<Delta>''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "from x"], ["proof (chain)\npicking this:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>", "consider (Vertex) x' where \"x = Vertex x'\" \"x' \\<in> \\<^bold>V\" | (Edge) y z where \"x = Edge y z\" \"edge \\<Delta> y z\""], ["proof (prove)\nusing this:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x'.\n                \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>y z.\n        \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding \"\\<^bold>V_\\<Delta>''\""], ["proof (prove)\nusing this:\n  x \\<in> Vertex ` \\<^bold>V \\<union>\n          (\\<lambda>(x, y). Edge x y) ` \\<^bold>E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x'.\n                \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>y z.\n        \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x'.\n              \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<And>y z.\n      \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>;\n        x \\<noteq> source \\<Delta>''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x'.\n              \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<And>y z.\n      \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"d_OUT (capacity \\<Delta>'') x < \\<top>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x'.\n              \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<And>y z.\n      \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>'') x < \\<top>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x'.\n       \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>\n 2. \\<And>y z.\n       \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "case Vertex"], ["proof (state)\nthis:\n  x = Vertex x'\n  x' \\<in> \\<^bold>V\n\ngoal (2 subgoals):\n 1. \\<And>x'.\n       \\<lbrakk>x = Vertex x'; x' \\<in> \\<^bold>V\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>\n 2. \\<And>y z.\n       \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "then"], ["proof (chain)\npicking this:\n  x = Vertex x'\n  x' \\<in> \\<^bold>V", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Vertex x'\n  x' \\<in> \\<^bold>V\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>'') x < \\<top>", "using x not_source that[of x']"], ["proof (prove)\nusing this:\n  x = Vertex x'\n  x' \\<in> \\<^bold>V\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>''\\<^esub>\n  x \\<noteq> source \\<Delta>''\n  \\<lbrakk>x' \\<in> \\<^bold>V; x' \\<noteq> source \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> d_OUT (capacity \\<Delta>) x' < \\<top>\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>'') x < \\<top>", "by auto"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>'') x < \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "case Edge"], ["proof (state)\nthis:\n  x = Edge y z\n  edge \\<Delta> y z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>x = Edge y z; edge \\<Delta> y z\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>'') x < \\<top>", "then"], ["proof (chain)\npicking this:\n  x = Edge y z\n  edge \\<Delta> y z", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Edge y z\n  edge \\<Delta> y z\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>'') x < \\<top>", "using capacity_finite[of \"(y, z)\"]"], ["proof (prove)\nusing this:\n  x = Edge y z\n  edge \\<Delta> y z\n  capacity \\<Delta> (y, z) \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>'') x < \\<top>", "by(simp del: capacity_finite add: less_top)"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>'') x < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>'') x < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_countable_network \\<Delta>''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context bounded_countable_network begin"], ["", "lemma bounded_countable_web_web_of_network: \n  assumes source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and undead: \"\\<And>x y. edge \\<Delta> x y \\<Longrightarrow> (\\<exists>z. edge \\<Delta> y z) \\<or> (\\<exists>z. edge \\<Delta> z x)\"\n  and source_sink: \"\\<not> edge \\<Delta> (source \\<Delta>) (sink \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  shows \"bounded_countable_web (web_of_network \\<Delta>)\" (is \"bounded_countable_web ?\\<Gamma>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_web (web_of_network \\<Delta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_web (web_of_network \\<Delta>)", "interpret web: countable_web ?\\<Gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_web (web_of_network \\<Delta>)", "by(rule countable_web_web_of_network) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_web (web_of_network \\<Delta>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_web (web_of_network \\<Delta>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "assume \"e \\<in> \\<^bold>V\\<^bsub>?\\<Gamma>\\<^esub> - B ?\\<Gamma>\""], ["proof (state)\nthis:\n  e \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n          B (web_of_network \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "then"], ["proof (chain)\npicking this:\n  e \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n          B (web_of_network \\<Delta>)", "obtain x y where e: \"e = (x, y)\" and xy: \"edge \\<Delta> x y\""], ["proof (prove)\nusing this:\n  e \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n          B (web_of_network \\<Delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>e = (x, y); edge \\<Delta> x y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases e) simp"], ["proof (state)\nthis:\n  e = (x, y)\n  edge \\<Delta> x y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "from xy"], ["proof (chain)\npicking this:\n  edge \\<Delta> x y", "have y: \"y \\<noteq> source \\<Delta>\""], ["proof (prove)\nusing this:\n  edge \\<Delta> x y\n\ngoal (1 subgoal):\n 1. y \\<noteq> source \\<Delta>", "using source_in[of x]"], ["proof (prove)\nusing this:\n  edge \\<Delta> x y\n  \\<not> edge \\<Delta> x (source \\<Delta>)\n\ngoal (1 subgoal):\n 1. y \\<noteq> source \\<Delta>", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> source \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "have \"\\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {e} \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}\n    \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV", "using e"], ["proof (prove)\nusing this:\n  e = (x, y)\n\ngoal (1 subgoal):\n 1. \\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}\n    \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  \\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}\n  \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "hence \"(\\<Sum>\\<^sup>+ e' \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {e}. weight ?\\<Gamma> e') \\<le> (\\<Sum>\\<^sup>+ e \\<in> \\<^bold>E \\<inter> {y} \\<times> UNIV. capacity \\<Delta> e)\""], ["proof (prove)\nusing this:\n  \\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}\n  \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n     (weight (web_of_network \\<Delta>))\n    \\<le> integral\\<^sup>N\n           (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n           (capacity \\<Delta>)", "using e"], ["proof (prove)\nusing this:\n  \\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}\n  \\<subseteq> \\<^bold>E \\<inter> {y} \\<times> UNIV\n  e = (x, y)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n     (weight (web_of_network \\<Delta>))\n    \\<le> integral\\<^sup>N\n           (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n           (capacity \\<Delta>)", "by(auto simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n   (weight (web_of_network \\<Delta>))\n  \\<le> integral\\<^sup>N\n         (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n         (capacity \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n   (weight (web_of_network \\<Delta>))\n  \\<le> integral\\<^sup>N\n         (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n         (capacity \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ e \\<in> Pair y ` UNIV. capacity \\<Delta> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n     (capacity \\<Delta>)\n    \\<le> integral\\<^sup>N (count_space (range (Pair y)))\n           (capacity \\<Delta>)", "by(auto simp add: nn_integral_count_space_indicator intro!: nn_integral_mono split: split_indicator)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n   (capacity \\<Delta>)\n  \\<le> integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (\\<^bold>E \\<inter> {y} \\<times> UNIV))\n   (capacity \\<Delta>)\n  \\<le> integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "have \"\\<dots> = d_OUT (capacity \\<Delta>) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>) =\n    d_OUT (capacity \\<Delta>) y", "unfolding d_OUT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>) =\n    (\\<Sum>\\<^sup>+ ya. capacity \\<Delta> (y, ya))", "by(rule nn_integral_count_space_reindex) simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>) =\n  d_OUT (capacity \\<Delta>) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (range (Pair y))) (capacity \\<Delta>) =\n  d_OUT (capacity \\<Delta>) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "have \"\\<dots> < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>) y < \\<top>", "using out[of y] xy y"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<in> \\<^bold>V; y \\<noteq> source \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> d_OUT (capacity \\<Delta>) y < \\<top>\n  edge \\<Delta> x y\n  y \\<noteq> source \\<Delta>\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>) y < \\<top>", "by(auto simp add: vertex_def)"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>) y < \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<^bold>V\\<^bsub>web_of_network \\<Delta>\\<^esub> -\n               B (web_of_network \\<Delta>) \\<Longrightarrow>\n       integral\\<^sup>N\n        (count_space\n          (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {x}))\n        (weight (web_of_network \\<Delta>))\n       < \\<top>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n   (weight (web_of_network \\<Delta>))\n  < \\<top>", "show \"(\\<Sum>\\<^sup>+ e' \\<in> \\<^bold>E\\<^bsub>?\\<Gamma>\\<^esub> `` {e}. weight ?\\<Gamma> e') < \\<top>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n   (weight (web_of_network \\<Delta>))\n  < \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n     (weight (web_of_network \\<Delta>))\n    < \\<top>", "."], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (count_space (\\<^bold>E\\<^bsub>web_of_network \\<Delta>\\<^esub> `` {e}))\n   (weight (web_of_network \\<Delta>))\n  < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_countable_web (web_of_network \\<Delta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "qualified"], ["", "lemma max_flow_min_cut'_bounded:\n  assumes source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and undead: \"\\<And>x y. edge \\<Delta> x y \\<Longrightarrow> (\\<exists>z. edge \\<Delta> y z) \\<or> (\\<exists>z. edge \\<Delta> z x)\"\n  and source_sink: \"\\<not> edge \\<Delta> (source \\<Delta>) (sink \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "by(rule max_flow_min_cut')(rule bounded_countable_web.ex_orthogonal_current[OF bounded_countable_web_web_of_network], fact+)"], ["", "qualified"], ["", "lemma max_flow_min_cut''_bounded:\n  assumes sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and no_loop: \"\\<And>x. \\<not> edge \\<Delta> x x\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "interpret antiparallel_edges \\<Delta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. antiparallel_edges \\<Delta>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "interpret \\<Delta>'': bounded_countable_network \\<Delta>''"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "by(rule \\<Delta>''_bounded_countable_network)(rule out)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"\\<exists>f S. flow \\<Delta>'' f \\<and> cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta>'' f \\<and>\n       MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S", "by(rule \\<Delta>''.max_flow_min_cut'_bounded)(auto simp add: sink_out source_in no_loop capacity_pos elim: edg.cases)"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "then"], ["proof (chain)\npicking this:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S", "obtain f S where f: \"flow \\<Delta>'' f\" and cut: \"cut \\<Delta>'' S\" and ortho: \"orthogonal \\<Delta>'' f S\""], ["proof (prove)\nusing this:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. (\\<And>f S.\n        \\<lbrakk>flow \\<Delta>'' f; MFMC_Network.cut \\<Delta>'' S;\n         orthogonal \\<Delta>'' f S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  flow \\<Delta>'' f\n  MFMC_Network.cut \\<Delta>'' S\n  orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"flow \\<Delta> (collect f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))", "using f"], ["proof (prove)\nusing this:\n  flow \\<Delta>'' f\n\ngoal (1 subgoal):\n 1. flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))", "by(rule flow_collect)"], ["proof (state)\nthis:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "moreover"], ["proof (state)\nthis:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"cut \\<Delta> (cut' S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFMC_Network.cut \\<Delta> (Vertex -` S)", "using cut"], ["proof (prove)\nusing this:\n  MFMC_Network.cut \\<Delta>'' S\n\ngoal (1 subgoal):\n 1. MFMC_Network.cut \\<Delta> (Vertex -` S)", "by(rule cut_cut')"], ["proof (state)\nthis:\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "moreover"], ["proof (state)\nthis:\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"orthogonal \\<Delta> (collect f) (cut' S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n     (Vertex -` S)", "using ortho f"], ["proof (prove)\nusing this:\n  orthogonal \\<Delta>'' f S\n  flow \\<Delta>'' f\n\ngoal (1 subgoal):\n 1. orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n     (Vertex -` S)", "by(rule orthogonal_cut')"], ["proof (state)\nthis:\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "ultimately"], ["proof (chain)\npicking this:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)", "show ?thesis"], ["proof (prove)\nusing this:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "by blast"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta> f \\<and>\n     MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\n\ngoal:\nNo subgoals!", "qed"], ["", "qualified"], ["", "lemma max_flow_min_cut'''_bounded:\n  assumes sink_out: \"\\<And>y. \\<not> edge \\<Delta> (sink \\<Delta>) y\"\n  and source_in: \"\\<And>x. \\<not> edge \\<Delta> x (source \\<Delta>)\"\n  and capacity_pos: \"\\<And>e. e \\<in> \\<^bold>E \\<Longrightarrow> capacity \\<Delta> e > 0\"\n  shows \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "interpret antiparallel_edges \\<Delta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. antiparallel_edges \\<Delta>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "interpret \\<Delta>'': bounded_countable_network \\<Delta>''"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>''", "by(rule \\<Delta>''_bounded_countable_network)(rule out)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"\\<exists>f S. flow \\<Delta>'' f \\<and> cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta>'' f \\<and>\n       MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S", "by(rule \\<Delta>''.max_flow_min_cut''_bounded)(auto simp add: sink_out source_in capacity_pos elim: edg.cases)"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "then"], ["proof (chain)\npicking this:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S", "obtain f S where f: \"flow \\<Delta>'' f\" and cut: \"cut \\<Delta>'' S\" and ortho: \"orthogonal \\<Delta>'' f S\""], ["proof (prove)\nusing this:\n  \\<exists>f S.\n     flow \\<Delta>'' f \\<and>\n     MFMC_Network.cut \\<Delta>'' S \\<and> orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. (\\<And>f S.\n        \\<lbrakk>flow \\<Delta>'' f; MFMC_Network.cut \\<Delta>'' S;\n         orthogonal \\<Delta>'' f S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  flow \\<Delta>'' f\n  MFMC_Network.cut \\<Delta>'' S\n  orthogonal \\<Delta>'' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"flow \\<Delta> (collect f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))", "using f"], ["proof (prove)\nusing this:\n  flow \\<Delta>'' f\n\ngoal (1 subgoal):\n 1. flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))", "by(rule flow_collect)"], ["proof (state)\nthis:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "moreover"], ["proof (state)\nthis:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"cut \\<Delta> (cut' S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFMC_Network.cut \\<Delta> (Vertex -` S)", "using cut"], ["proof (prove)\nusing this:\n  MFMC_Network.cut \\<Delta>'' S\n\ngoal (1 subgoal):\n 1. MFMC_Network.cut \\<Delta> (Vertex -` S)", "by(rule cut_cut')"], ["proof (state)\nthis:\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "moreover"], ["proof (state)\nthis:\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"orthogonal \\<Delta> (collect f) (cut' S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n     (Vertex -` S)", "using ortho f"], ["proof (prove)\nusing this:\n  orthogonal \\<Delta>'' f S\n  flow \\<Delta>'' f\n\ngoal (1 subgoal):\n 1. orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n     (Vertex -` S)", "by(rule orthogonal_cut')"], ["proof (state)\nthis:\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "ultimately"], ["proof (chain)\npicking this:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)", "show ?thesis"], ["proof (prove)\nusing this:\n  flow \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n  MFMC_Network.cut \\<Delta> (Vertex -` S)\n  orthogonal \\<Delta> (\\<lambda>(x, y). f (Edge x y, Vertex y))\n   (Vertex -` S)\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "by blast"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta> f \\<and>\n     MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Delta>'''_bounded_countable_network: \"bounded_countable_network \\<Delta>'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>'''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>'''", "interpret \\<Delta>''': countable_network \\<Delta>'''"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_network \\<Delta>'''", "by(rule \\<Delta>'''_countable_network)"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>'''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>'''", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "assume x: \"x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>\" and not_source: \"x \\<noteq> source \\<Delta>'''\""], ["proof (state)\nthis:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>\n  x \\<noteq> source \\<Delta>'''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "from x"], ["proof (chain)\npicking this:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>", "have x': \"x \\<in> \\<^bold>V\""], ["proof (prove)\nusing this:\n  x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<^bold>V", "by(auto simp add: vertex_def)"], ["proof (state)\nthis:\n  x \\<in> \\<^bold>V\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "have \"d_OUT (capacity \\<Delta>''') x \\<le> d_OUT (capacity \\<Delta>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>''') x \\<le> d_OUT (capacity \\<Delta>) x", "by(rule d_OUT_mono) simp"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>''') x \\<le> d_OUT (capacity \\<Delta>) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "also"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>''') x \\<le> d_OUT (capacity \\<Delta>) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "have \"\\<dots> < \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>) x < \\<top>", "using x' not_source"], ["proof (prove)\nusing this:\n  x \\<in> \\<^bold>V\n  x \\<noteq> source \\<Delta>'''\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>) x < \\<top>", "by(simp add: out)"], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>) x < \\<top>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<^bold>V\\<^bsub>\\<Delta>'''\\<^esub>;\n        x \\<noteq> source \\<Delta>'''\\<rbrakk>\n       \\<Longrightarrow> d_OUT (capacity \\<Delta>''') x < \\<top>", "finally"], ["proof (chain)\npicking this:\n  d_OUT (capacity \\<Delta>''') x < \\<top>", "show \"d_OUT (capacity \\<Delta>''') x < \\<top>\""], ["proof (prove)\nusing this:\n  d_OUT (capacity \\<Delta>''') x < \\<top>\n\ngoal (1 subgoal):\n 1. d_OUT (capacity \\<Delta>''') x < \\<top>", "."], ["proof (state)\nthis:\n  d_OUT (capacity \\<Delta>''') x < \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_countable_network \\<Delta>'''\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem max_flow_min_cut_bounded:\n  \"\\<exists>f S. flow \\<Delta> f \\<and> cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "interpret \\<Delta>': bounded_countable_network \\<Delta>'''"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_countable_network \\<Delta>'''", "by(rule \\<Delta>'''_bounded_countable_network)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "have \"\\<exists>f S. flow \\<Delta>''' f \\<and> cut \\<Delta>''' S \\<and> orthogonal \\<Delta>''' f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta>''' f \\<and>\n       MFMC_Network.cut \\<Delta>''' S \\<and> orthogonal \\<Delta>''' f S", "by(rule \\<Delta>'.max_flow_min_cut'''_bounded) auto"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta>''' f \\<and>\n     MFMC_Network.cut \\<Delta>''' S \\<and> orthogonal \\<Delta>''' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "then"], ["proof (chain)\npicking this:\n  \\<exists>f S.\n     flow \\<Delta>''' f \\<and>\n     MFMC_Network.cut \\<Delta>''' S \\<and> orthogonal \\<Delta>''' f S", "obtain f S where f: \"flow \\<Delta>''' f\" and cut: \"cut \\<Delta>''' S\" and ortho: \"orthogonal \\<Delta>''' f S\""], ["proof (prove)\nusing this:\n  \\<exists>f S.\n     flow \\<Delta>''' f \\<and>\n     MFMC_Network.cut \\<Delta>''' S \\<and> orthogonal \\<Delta>''' f S\n\ngoal (1 subgoal):\n 1. (\\<And>f S.\n        \\<lbrakk>flow \\<Delta>''' f; MFMC_Network.cut \\<Delta>''' S;\n         orthogonal \\<Delta>''' f S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  flow \\<Delta>''' f\n  MFMC_Network.cut \\<Delta>''' S\n  orthogonal \\<Delta>''' f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "from flow_\\<Delta>'''[OF this]"], ["proof (chain)\npicking this:\n  flow \\<Delta> f\n  MFMC_Network.cut \\<Delta> S\n  orthogonal \\<Delta> f S", "show ?thesis"], ["proof (prove)\nusing this:\n  flow \\<Delta> f\n  MFMC_Network.cut \\<Delta> S\n  orthogonal \\<Delta> f S\n\ngoal (1 subgoal):\n 1. \\<exists>f S.\n       flow \\<Delta> f \\<and>\n       MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S", "by blast"], ["proof (state)\nthis:\n  \\<exists>f S.\n     flow \\<Delta> f \\<and>\n     MFMC_Network.cut \\<Delta> S \\<and> orthogonal \\<Delta> f S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"]]}