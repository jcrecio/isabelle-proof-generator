{"file_name": "/home/qj213/afp-2021-10-22/thys/MFMC_Countable/Matrix_For_Marginals.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFMC_Countable", "problem_names": ["lemma bounded_matrix_for_marginals_finite:\n  fixes f g :: \"nat \\<Rightarrow> real\"\n    and n :: nat\n    and R :: \"(nat \\<times> nat) set\"\n  assumes eq_sum: \"sum f {..n} = sum g {..n}\"\n    and le: \"\\<And>X. X \\<subseteq> {..n} \\<Longrightarrow> sum f X \\<le> sum g (R `` X)\"\n    and f_nonneg: \"\\<And>x. 0 \\<le> f x\"\n    and g_nonneg: \"\\<And>y. 0 \\<le> g y\"\n    and R: \"R \\<subseteq> {..n} \\<times> {..n}\"\n  obtains h :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"\\<And>x y. \\<lbrakk> x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> 0 \\<le> h x y\"\n    and \"\\<And>x y. \\<lbrakk> 0 < h x y; x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n}\"\n    and \"\\<And>y. y \\<le> n \\<Longrightarrow> g y = sum (\\<lambda>x. h x y) {..n}\"", "lemma convergent_bounded_family_nat:\n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n  assumes bounded: \"\\<And>x. bounded (range (\\<lambda>n. f n x))\"\n  obtains k where \"strict_mono k\" \"\\<And>x. convergent (\\<lambda>n. f (k n) x)\"", "lemma convergent_bounded_family:\n  fixes f :: \"nat \\<Rightarrow> 'a \\<Rightarrow> real\"\n  assumes bounded: \"\\<And>x. x \\<in> A \\<Longrightarrow> bounded (range (\\<lambda>n. f n x))\"\n  and A: \"countable A\"\n  obtains k where \"strict_mono k\" \"\\<And>x. x \\<in> A \\<Longrightarrow> convergent (\\<lambda>n. f (k n) x)\"", "lemma zero_on_le [simp]: fixes f :: \"'a \\<Rightarrow> 'b :: {preorder, zero}\" shows\n  \"zero_on f X x \\<le> f x \\<longleftrightarrow> (x \\<in> X \\<longrightarrow> 0 \\<le> f x)\"", "lemma zero_on_nonneg: fixes f :: \"'a \\<Rightarrow> 'b :: {preorder, zero}\" shows\n  \"0 \\<le> zero_on f X x \\<longleftrightarrow> (x \\<notin> X \\<longrightarrow> 0 \\<le> f x)\"", "lemma sums_zero_on:\n  fixes f :: \"nat \\<Rightarrow> 'a::real_normed_vector\"\n  assumes f: \"f sums s\"\n    and X: \"finite X\"\n  shows \"zero_on f X sums (s - sum f X)\"", "lemma \n  fixes f :: \"nat \\<Rightarrow> 'a::real_normed_vector\"\n  assumes f: \"summable f\"\n  and X: \"finite X\"\n  shows summable_zero_on [simp]: \"summable (zero_on f X)\" (is ?thesis1)\n  and suminf_zero_on: \"suminf (zero_on f X) = suminf f - sum f X\" (is ?thesis2)", "lemma summable_zero_on_nonneg:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {ordered_comm_monoid_add,linorder_topology,conditionally_complete_linorder}\"\n  assumes f: \"summable f\"\n  and nonneg: \"\\<And>x. 0 \\<le> f x\"\n  shows \"summable (zero_on f X)\"", "lemma zero_on_ennreal [simp]: \"zero_on (\\<lambda>x. ennreal (f x)) A = (\\<lambda>x. ennreal (zero_on f A x))\"", "lemma sum_lessThan_conv_atMost_nat:\n  fixes f :: \"nat \\<Rightarrow> 'b :: ab_group_add\"\n  shows \"sum f {..<n} = sum f {..n} - f n\"", "lemma Collect_disjoint_atLeast:\n  \"Collect P \\<inter> {x..} = {} \\<longleftrightarrow> (\\<forall>y\\<ge>x. \\<not> P y)\"", "lemma bounded_matrix_for_marginals_nat:\n  fixes f g :: \"nat \\<Rightarrow> real\"\n    and R :: \"(nat \\<times> nat) set\"\n    and s :: real\n  assumes sum_f: \"f sums s\" and sum_g: \"g sums s\"\n    and f_nonneg: \"\\<And>x. 0 \\<le> f x\" and g_nonneg: \"\\<And>y. 0 \\<le> g y\"\n    and f_le_g: \"\\<And>X. suminf (zero_on f (- X)) \\<le> suminf (zero_on g (- R `` X))\"\n  obtains h :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"\\<And>x y. 0 \\<le> h x y\"\n    and \"\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x. h x sums f x\"\n    and \"\\<And>y. (\\<lambda>x. h x y) sums g y\"", "lemma bounded_matrix_for_marginals_ennreal:\n  assumes sum_eq: \"(\\<Sum>\\<^sup>+ x\\<in>A. f x) = (\\<Sum>\\<^sup>+ y\\<in>B. g y)\"\n    and finite: \"(\\<Sum>\\<^sup>+ x\\<in>B. g x) \\<noteq> \\<top>\"\n    and le: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X. f x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>R `` X. g y)\"\n    and countable [simp]: \"countable A\" \"countable B\"\n    and R: \"R \\<subseteq> A \\<times> B\"\n  obtains h where \"\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x y. h x y \\<noteq> \\<top>\"\n    and \"\\<And>x. x \\<in> A \\<Longrightarrow> (\\<Sum>\\<^sup>+ y\\<in>B. h x y) = f x\"\n    and \"\\<And>y. y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\""], "translations": [["", "lemma bounded_matrix_for_marginals_finite:\n  fixes f g :: \"nat \\<Rightarrow> real\"\n    and n :: nat\n    and R :: \"(nat \\<times> nat) set\"\n  assumes eq_sum: \"sum f {..n} = sum g {..n}\"\n    and le: \"\\<And>X. X \\<subseteq> {..n} \\<Longrightarrow> sum f X \\<le> sum g (R `` X)\"\n    and f_nonneg: \"\\<And>x. 0 \\<le> f x\"\n    and g_nonneg: \"\\<And>y. 0 \\<le> g y\"\n    and R: \"R \\<subseteq> {..n} \\<times> {..n}\"\n  obtains h :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"\\<And>x y. \\<lbrakk> x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> 0 \\<le> h x y\"\n    and \"\\<And>x y. \\<lbrakk> 0 < h x y; x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n}\"\n    and \"\\<And>y. y \\<le> n \\<Longrightarrow> g y = sum (\\<lambda>x. h x y) {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y.\n                    \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> 0 \\<le> h x y;\n         \\<And>x y.\n            \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n            \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n         \\<And>y.\n            y \\<le> n \\<Longrightarrow>\n            g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"\\<exists>x\\<le>n. f x > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> (\\<exists>x\\<le>n. 0 < f x)\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<le>n. 0 < f x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> (\\<exists>x\\<le>n. 0 < f x)\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence f: \"f x = 0\" if \"x \\<le> n\" for x"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<le>n. 0 < f x)\n\ngoal (1 subgoal):\n 1. f x = 0", "using f_nonneg[of x] that"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<le>n. 0 < f x)\n  0 \\<le> f x\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. f x = 0", "by(auto simp add: not_less)"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow> f ?x = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> (\\<exists>x\\<le>n. 0 < f x)\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"sum g {..n} = 0\""], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow> f ?x = 0\n\ngoal (1 subgoal):\n 1. sum g {..n} = 0", "using eq_sum"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow> f ?x = 0\n  sum f {..n} = sum g {..n}\n\ngoal (1 subgoal):\n 1. sum g {..n} = 0", "by simp"], ["proof (state)\nthis:\n  sum g {..n} = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> (\\<exists>x\\<le>n. 0 < f x)\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"g y = 0\" if \"y \\<le> n\" for y"], ["proof (prove)\nusing this:\n  sum g {..n} = 0\n\ngoal (1 subgoal):\n 1. g y = 0", "using g_nonneg that"], ["proof (prove)\nusing this:\n  sum g {..n} = 0\n  0 \\<le> g ?y\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. g y = 0", "by(simp add: sum_nonneg_eq_0_iff)"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow> g ?y = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> (\\<exists>x\\<le>n. 0 < f x)\\<rbrakk>\n    \\<Longrightarrow> thesis", "with f"], ["proof (chain)\npicking this:\n  ?x \\<le> n \\<Longrightarrow> f ?x = 0\n  ?y \\<le> n \\<Longrightarrow> g ?y = 0", "show thesis"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow> f ?x = 0\n  ?y \\<le> n \\<Longrightarrow> g ?y = 0\n\ngoal (1 subgoal):\n 1. thesis", "by(auto intro!: that[of \"\\<lambda>_ _. 0\"])"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  \\<exists>x\\<le>n. 0 < f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<le>n. 0 < f x", "obtain x0 where x0: \"x0 \\<le> n\" \"f x0 > 0\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<le>n. 0 < f x\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x0 \\<le> n; 0 < f x0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x0 \\<le> n\n  0 < f x0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "define R' where \"R' = R \\<inter> {x. f x > 0} \\<times> {y. g y > 0}\""], ["proof (state)\nthis:\n  R' = R \\<inter> {x. 0 < f x} \\<times> {y. 0 < g y}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have [simp]: \"finite (R `` A)\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R `` A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (R `` A)", "have \"R `` A \\<subseteq> {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` A \\<subseteq> {..n}", "using R"], ["proof (prove)\nusing this:\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. R `` A \\<subseteq> {..n}", "by auto"], ["proof (state)\nthis:\n  R `` A \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  R `` A \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. finite (R `` A)", "by(rule finite_subset) auto"], ["proof (state)\nthis:\n  finite (R `` A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (R `` ?A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have R': \"R' \\<subseteq> {..n} \\<times> {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R' \\<subseteq> {..n} \\<times> {..n}", "using R"], ["proof (prove)\nusing this:\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. R' \\<subseteq> {..n} \\<times> {..n}", "by(auto simp add: R'_def)"], ["proof (state)\nthis:\n  R' \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have R'': \"R' `` A \\<subseteq> {..n}\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. R' `` A \\<subseteq> {..n}", "using R"], ["proof (prove)\nusing this:\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. R' `` A \\<subseteq> {..n}", "by(auto simp add: R'_def)"], ["proof (state)\nthis:\n  R' `` ?A \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have [simp]: \"finite (R' `` A)\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R' `` A)", "using R''[of A]"], ["proof (prove)\nusing this:\n  R' `` A \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. finite (R' `` A)", "by(rule finite_subset) auto"], ["proof (state)\nthis:\n  finite (R' `` ?A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have hop: \"\\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> g y0 > 0\" if x0: \"x0 \\<le> n\" \"f x0 > 0\" for x0"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> 0 < g y0", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> 0 < g y0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> 0 < g y0)", "have \"g y0 = 0\" if \"(x0, y0) \\<in> R\" \"y0 \\<le> n\" for y0"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> 0 < g y0)\n\ngoal (1 subgoal):\n 1. g y0 = 0", "using g_nonneg[of y0] that"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>y0\\<le>n. (x0, y0) \\<in> R \\<and> 0 < g y0)\n  0 \\<le> g y0\n  (x0, y0) \\<in> R\n  y0 \\<le> n\n\ngoal (1 subgoal):\n 1. g y0 = 0", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>(x0, ?y0.0) \\<in> R; ?y0.0 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> g ?y0.0 = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>(x0, ?y0.0) \\<in> R; ?y0.0 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> g ?y0.0 = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "from R"], ["proof (chain)\npicking this:\n  R \\<subseteq> {..n} \\<times> {..n}", "have \"R `` {x0} \\<subseteq> {..n}\""], ["proof (prove)\nusing this:\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. R `` {x0} \\<subseteq> {..n}", "by auto"], ["proof (state)\nthis:\n  R `` {x0} \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>(x0, ?y0.0) \\<in> R; ?y0.0 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> g ?y0.0 = 0\n  R `` {x0} \\<subseteq> {..n}", "have \"sum g (R `` {x0}) = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(x0, ?y0.0) \\<in> R; ?y0.0 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> g ?y0.0 = 0\n  R `` {x0} \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. sum g (R `` {x0}) = 0", "using g_nonneg"], ["proof (prove)\nusing this:\n  \\<lbrakk>(x0, ?y0.0) \\<in> R; ?y0.0 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> g ?y0.0 = 0\n  R `` {x0} \\<subseteq> {..n}\n  0 \\<le> g ?y\n\ngoal (1 subgoal):\n 1. sum g (R `` {x0}) = 0", "by(auto intro!: sum_nonneg_eq_0_iff[THEN iffD2])"], ["proof (state)\nthis:\n  sum g (R `` {x0}) = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  sum g (R `` {x0}) = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "have \"{x0} \\<subseteq> {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x0} \\<subseteq> {..n}", "using x0"], ["proof (prove)\nusing this:\n  x0 \\<le> n\n  0 < f x0\n\ngoal (1 subgoal):\n 1. {x0} \\<subseteq> {..n}", "by auto"], ["proof (state)\nthis:\n  {x0} \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "from le[OF this] x0"], ["proof (chain)\npicking this:\n  sum f {x0} \\<le> sum g (R `` {x0})\n  x0 \\<le> n\n  0 < f x0", "have \"R `` {x0} \\<noteq> {}\" \"sum g (R `` {x0}) > 0\""], ["proof (prove)\nusing this:\n  sum f {x0} \\<le> sum g (R `` {x0})\n  x0 \\<le> n\n  0 < f x0\n\ngoal (1 subgoal):\n 1. R `` {x0} \\<noteq> {} &&& 0 < sum g (R `` {x0})", "by auto"], ["proof (state)\nthis:\n  R `` {x0} \\<noteq> {}\n  0 < sum g (R `` {x0})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>y0\\<le>n.\n               (x0, y0) \\<in> R \\<and> 0 < g y0) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  sum g (R `` {x0}) = 0\n  R `` {x0} \\<noteq> {}\n  0 < sum g (R `` {x0})", "show False"], ["proof (prove)\nusing this:\n  sum g (R `` {x0}) = 0\n  R `` {x0} \\<noteq> {}\n  0 < sum g (R `` {x0})\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x0.0 \\<le> n; 0 < f ?x0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y0\\<le>n. (?x0.0, y0) \\<in> R \\<and> 0 < g y0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x0.0 \\<le> n; 0 < f ?x0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y0\\<le>n. (?x0.0, y0) \\<in> R \\<and> 0 < g y0", "obtain y0 where y0: \"y0 \\<le> n\" \"(x0, y0) \\<in> R'\" \"g y0 > 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x0.0 \\<le> n; 0 < f ?x0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y0\\<le>n. (?x0.0, y0) \\<in> R \\<and> 0 < g y0\n\ngoal (1 subgoal):\n 1. (\\<And>y0.\n        \\<lbrakk>y0 \\<le> n; (x0, y0) \\<in> R'; 0 < g y0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x0"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x0.0 \\<le> n; 0 < f ?x0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y0\\<le>n. (?x0.0, y0) \\<in> R \\<and> 0 < g y0\n  x0 \\<le> n\n  0 < f x0\n\ngoal (1 subgoal):\n 1. (\\<And>y0.\n        \\<lbrakk>y0 \\<le> n; (x0, y0) \\<in> R'; 0 < g y0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: R'_def)"], ["proof (state)\nthis:\n  y0 \\<le> n\n  (x0, y0) \\<in> R'\n  0 < g y0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "define LARGE where \"LARGE = sum f {..n} + 1\""], ["proof (state)\nthis:\n  LARGE = sum f {..n} + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"1 \\<le> LARGE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> LARGE", "using f_nonneg"], ["proof (prove)\nusing this:\n  0 \\<le> f ?x\n\ngoal (1 subgoal):\n 1. 1 \\<le> LARGE", "by(simp add: LARGE_def sum_nonneg)"], ["proof (state)\nthis:\n  1 \\<le> LARGE\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence [simp]: \"LARGE \\<noteq> 0\" \"0 \\<noteq> LARGE\" \"0 < LARGE\" \"0 \\<le> LARGE\""], ["proof (prove)\nusing this:\n  1 \\<le> LARGE\n\ngoal (1 subgoal):\n 1. (LARGE \\<noteq> 0 &&& 0 \\<noteq> LARGE) &&& 0 < LARGE &&& 0 \\<le> LARGE", "by simp_all"], ["proof (state)\nthis:\n  LARGE \\<noteq> 0\n  0 \\<noteq> LARGE\n  0 < LARGE\n  0 \\<le> LARGE\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "define s where \"s = 2 * n + 2\""], ["proof (state)\nthis:\n  s = 2 * n + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "define t where \"t = 2 * n + 3\""], ["proof (state)\nthis:\n  t = 2 * n + 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "define c where \"c = (\\<lambda>(x, y).\n     if x = s \\<and> y \\<le> n then f y\n     else if x \\<le> n \\<and> n < y \\<and> y \\<le> 2 * n + 1 \\<and> (x, y - n - 1) \\<in> R' then LARGE\n     else if n < x \\<and> x \\<le> 2 * n + 1 \\<and> y = t then g (x - n - 1)\n     else 0)\""], ["proof (state)\nthis:\n  c =\n  (\\<lambda>(x, y).\n      if x = s \\<and> y \\<le> n then f y\n      else if x \\<le> n \\<and>\n              n < y \\<and> y \\<le> 2 * n + 1 \\<and> (x, y - n - 1) \\<in> R'\n           then LARGE\n           else if n < x \\<and> x \\<le> 2 * n + 1 \\<and> y = t\n                then g (x - n - 1) else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have st [simp]: \"\\<not> s \\<le> n\" \"\\<not> s \\<le> Suc (2 * n)\" \"s \\<noteq> t\" \"t \\<noteq> s\" \"\\<not> t \\<le> n\" \"\\<not> t \\<le> Suc (2 * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> s \\<le> n &&& \\<not> s \\<le> Suc (2 * n) &&& s \\<noteq> t) &&&\n    t \\<noteq> s &&& \\<not> t \\<le> n &&& \\<not> t \\<le> Suc (2 * n)", "by(simp_all add: s_def t_def)"], ["proof (state)\nthis:\n  \\<not> s \\<le> n\n  \\<not> s \\<le> Suc (2 * n)\n  s \\<noteq> t\n  t \\<noteq> s\n  \\<not> t \\<le> n\n  \\<not> t \\<le> Suc (2 * n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have c_simps: \"c (x, y) = \n    (if x = s \\<and> y \\<le> n then f y\n     else if x \\<le> n \\<and> n < y \\<and> y \\<le> 2 * n + 1 \\<and> (x, y - n - 1) \\<in> R' then LARGE\n     else if n < x \\<and> x \\<le> 2 * n + 1 \\<and> y = t then g (x - n - 1)\n     else 0)\"\n    for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. c (x, y) =\n    (if x = s \\<and> y \\<le> n then f y\n     else if x \\<le> n \\<and>\n             n < y \\<and> y \\<le> 2 * n + 1 \\<and> (x, y - n - 1) \\<in> R'\n          then LARGE\n          else if n < x \\<and> x \\<le> 2 * n + 1 \\<and> y = t\n               then g (x - n - 1) else 0)", "by(simp add: c_def)"], ["proof (state)\nthis:\n  c (?x, ?y) =\n  (if ?x = s \\<and> ?y \\<le> n then f ?y\n   else if ?x \\<le> n \\<and>\n           n < ?y \\<and> ?y \\<le> 2 * n + 1 \\<and> (?x, ?y - n - 1) \\<in> R'\n        then LARGE\n        else if n < ?x \\<and> ?x \\<le> 2 * n + 1 \\<and> ?y = t\n             then g (?x - n - 1) else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have cs [simp]: \"c (s, y) = (if y \\<le> n then f y else 0)\"\n    and ct [simp]: \"c (x, t) = (if n < x \\<and> x \\<le> 2 * n + 1 then g (x - n - 1) else 0)\"\n    for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. c (s, y) = (if y \\<le> n then f y else 0) &&&\n    c (x, t) = (if n < x \\<and> x \\<le> 2 * n + 1 then g (x - n - 1) else 0)", "by(auto simp add: c_simps)"], ["proof (state)\nthis:\n  c (s, ?y) = (if ?y \\<le> n then f ?y else 0)\n  c (?x, t) =\n  (if n < ?x \\<and> ?x \\<le> 2 * n + 1 then g (?x - n - 1) else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "interpret Graph c"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "note [simp del] = zero_cap_simp"], ["proof (state)\nthis:\n  (?u, ?v) \\<notin> E \\<Longrightarrow> c (?u, ?v) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "interpret Network c s t"], ["proof (prove)\ngoal (1 subgoal):\n 1. Network c s t", "proof"], ["proof (state)\ngoal (9 subgoals):\n 1. s \\<in> V\n 2. t \\<in> V\n 3. s \\<noteq> t\n 4. \\<forall>u v. 0 \\<le> c (u, v)\n 5. \\<forall>u. (u, s) \\<notin> E\n 6. \\<forall>u. (t, u) \\<notin> E\n 7. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 8. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 9. finite (reachableNodes s)", "have \"(s, x0) \\<in> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, x0) \\<in> E", "using x0"], ["proof (prove)\nusing this:\n  x0 \\<le> n\n  0 < f x0\n\ngoal (1 subgoal):\n 1. (s, x0) \\<in> E", "by(simp add: E_def)"], ["proof (state)\nthis:\n  (s, x0) \\<in> E\n\ngoal (9 subgoals):\n 1. s \\<in> V\n 2. t \\<in> V\n 3. s \\<noteq> t\n 4. \\<forall>u v. 0 \\<le> c (u, v)\n 5. \\<forall>u. (u, s) \\<notin> E\n 6. \\<forall>u. (t, u) \\<notin> E\n 7. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 8. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 9. finite (reachableNodes s)", "thus \"s \\<in> V\""], ["proof (prove)\nusing this:\n  (s, x0) \\<in> E\n\ngoal (1 subgoal):\n 1. s \\<in> V", "by(auto simp add: V_def)"], ["proof (state)\nthis:\n  s \\<in> V\n\ngoal (8 subgoals):\n 1. t \\<in> V\n 2. s \\<noteq> t\n 3. \\<forall>u v. 0 \\<le> c (u, v)\n 4. \\<forall>u. (u, s) \\<notin> E\n 5. \\<forall>u. (t, u) \\<notin> E\n 6. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 7. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 8. finite (reachableNodes s)", "have \"(y0 + n + 1, t) \\<in> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y0 + n + 1, t) \\<in> E", "using y0"], ["proof (prove)\nusing this:\n  y0 \\<le> n\n  (x0, y0) \\<in> R'\n  0 < g y0\n\ngoal (1 subgoal):\n 1. (y0 + n + 1, t) \\<in> E", "by(simp add: E_def)"], ["proof (state)\nthis:\n  (y0 + n + 1, t) \\<in> E\n\ngoal (8 subgoals):\n 1. t \\<in> V\n 2. s \\<noteq> t\n 3. \\<forall>u v. 0 \\<le> c (u, v)\n 4. \\<forall>u. (u, s) \\<notin> E\n 5. \\<forall>u. (t, u) \\<notin> E\n 6. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 7. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 8. finite (reachableNodes s)", "thus \"t \\<in> V\""], ["proof (prove)\nusing this:\n  (y0 + n + 1, t) \\<in> E\n\ngoal (1 subgoal):\n 1. t \\<in> V", "by(auto simp add: V_def)"], ["proof (state)\nthis:\n  t \\<in> V\n\ngoal (7 subgoals):\n 1. s \\<noteq> t\n 2. \\<forall>u v. 0 \\<le> c (u, v)\n 3. \\<forall>u. (u, s) \\<notin> E\n 4. \\<forall>u. (t, u) \\<notin> E\n 5. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 6. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 7. finite (reachableNodes s)", "show \"s \\<noteq> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<noteq> t", "by simp"], ["proof (state)\nthis:\n  s \\<noteq> t\n\ngoal (6 subgoals):\n 1. \\<forall>u v. 0 \\<le> c (u, v)\n 2. \\<forall>u. (u, s) \\<notin> E\n 3. \\<forall>u. (t, u) \\<notin> E\n 4. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 5. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 6. finite (reachableNodes s)", "show \"\\<forall>u v. 0 \\<le> c (u, v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u v. 0 \\<le> c (u, v)", "by(simp add: c_simps f_nonneg g_nonneg max_def)"], ["proof (state)\nthis:\n  \\<forall>u v. 0 \\<le> c (u, v)\n\ngoal (5 subgoals):\n 1. \\<forall>u. (u, s) \\<notin> E\n 2. \\<forall>u. (t, u) \\<notin> E\n 3. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 4. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 5. finite (reachableNodes s)", "show \"\\<forall>u. (u, s) \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. (u, s) \\<notin> E", "by(simp add: E_def c_simps)"], ["proof (state)\nthis:\n  \\<forall>u. (u, s) \\<notin> E\n\ngoal (4 subgoals):\n 1. \\<forall>u. (t, u) \\<notin> E\n 2. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 3. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 4. finite (reachableNodes s)", "show \"\\<forall>u. (t, u) \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. (t, u) \\<notin> E", "by(simp add: E_def c_simps)"], ["proof (state)\nthis:\n  \\<forall>u. (t, u) \\<notin> E\n\ngoal (3 subgoals):\n 1. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n 2. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 3. finite (reachableNodes s)", "show \"\\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E", "by(simp add: E_def c_simps)"], ["proof (state)\nthis:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 2. finite (reachableNodes s)", "have \"isPath s [(s, x0), (x0, y0 + n + 1), (y0 + n + 1, t)] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isPath s [(s, x0), (x0, y0 + n + 1), (y0 + n + 1, t)] t", "using x0 y0"], ["proof (prove)\nusing this:\n  x0 \\<le> n\n  0 < f x0\n  y0 \\<le> n\n  (x0, y0) \\<in> R'\n  0 < g y0\n\ngoal (1 subgoal):\n 1. isPath s [(s, x0), (x0, y0 + n + 1), (y0 + n + 1, t)] t", "by(auto simp add: E_def c_simps)"], ["proof (state)\nthis:\n  isPath s [(s, x0), (x0, y0 + n + 1), (y0 + n + 1, t)] t\n\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 2. finite (reachableNodes s)", "hence st: \"connected s t\""], ["proof (prove)\nusing this:\n  isPath s [(s, x0), (x0, y0 + n + 1), (y0 + n + 1, t)] t\n\ngoal (1 subgoal):\n 1. local.connected s t", "by(auto simp add: connected_def simp del: isPath.simps)"], ["proof (state)\nthis:\n  local.connected s t\n\ngoal (2 subgoals):\n 1. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n 2. finite (reachableNodes s)", "show \"\\<forall>v\\<in>V. connected s v \\<and> connected v t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t", "proof(intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       local.connected s v \\<and> local.connected v t", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       local.connected s v \\<and> local.connected v t", "assume v: \"v \\<in> V\""], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       local.connected s v \\<and> local.connected v t", "hence \"v \\<le> 2 * n + 3\""], ["proof (prove)\nusing this:\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. v \\<le> 2 * n + 3", "by(auto simp add: V_def E_def c_simps t_def s_def split: if_split_asm)"], ["proof (state)\nthis:\n  v \\<le> 2 * n + 3\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       local.connected s v \\<and> local.connected v t", "then"], ["proof (chain)\npicking this:\n  v \\<le> 2 * n + 3", "consider (left) \"v \\<le> n\" | (right) \"n < v\" \"v \\<le> 2 * n + 1\" | (s) \"v = s\" | (t) \"v = t\""], ["proof (prove)\nusing this:\n  v \\<le> 2 * n + 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<le> n \\<Longrightarrow> thesis;\n     \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk> \\<Longrightarrow> thesis;\n     v = s \\<Longrightarrow> thesis; v = t \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(fastforce simp add: s_def t_def)"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<le> n \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk> \\<Longrightarrow> ?thesis;\n   v = s \\<Longrightarrow> ?thesis; v = t \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       local.connected s v \\<and> local.connected v t", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>v \\<le> n \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk> \\<Longrightarrow> ?thesis;\n   v = s \\<Longrightarrow> ?thesis; v = t \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"connected s v \\<and> connected v t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v \\<le> n \\<Longrightarrow> ?thesis;\n   \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk> \\<Longrightarrow> ?thesis;\n   v = s \\<Longrightarrow> ?thesis; v = t \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. local.connected s v \\<and> local.connected v t", "proof cases"], ["proof (state)\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "case left"], ["proof (state)\nthis:\n  v \\<le> n\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "have sv: \"(s, v) \\<in> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, v) \\<in> E", "using v left"], ["proof (prove)\nusing this:\n  v \\<in> V\n  v \\<le> n\n\ngoal (1 subgoal):\n 1. (s, v) \\<in> E", "by(fastforce simp add: E_def V_def c_simps max_def R'_def split: if_split_asm)"], ["proof (state)\nthis:\n  (s, v) \\<in> E\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence \"connected s v\""], ["proof (prove)\nusing this:\n  (s, v) \\<in> E\n\ngoal (1 subgoal):\n 1. local.connected s v", "by(auto simp add: connected_def intro!: exI[where x=\"[(s, v)]\"])"], ["proof (state)\nthis:\n  local.connected s v\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "moreover"], ["proof (state)\nthis:\n  local.connected s v\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "from sv left f_nonneg[of v]"], ["proof (chain)\npicking this:\n  (s, v) \\<in> E\n  v \\<le> n\n  0 \\<le> f v", "have \"f v > 0\""], ["proof (prove)\nusing this:\n  (s, v) \\<in> E\n  v \\<le> n\n  0 \\<le> f v\n\ngoal (1 subgoal):\n 1. 0 < f v", "by(simp add: E_def)"], ["proof (state)\nthis:\n  0 < f v\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "from hop[OF left this]"], ["proof (chain)\npicking this:\n  \\<exists>y0\\<le>n. (v, y0) \\<in> R \\<and> 0 < g y0", "obtain v' where \"(v, v') \\<in> R\" \"v' \\<le> n\" \"g v' > 0\""], ["proof (prove)\nusing this:\n  \\<exists>y0\\<le>n. (v, y0) \\<in> R \\<and> 0 < g y0\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>(v, v') \\<in> R; v' \\<le> n; 0 < g v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v, v') \\<in> R\n  v' \\<le> n\n  0 < g v'\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence \"isPath v [(v, v' + n + 1), (v' + n + 1, t)] t\""], ["proof (prove)\nusing this:\n  (v, v') \\<in> R\n  v' \\<le> n\n  0 < g v'\n\ngoal (1 subgoal):\n 1. isPath v [(v, v' + n + 1), (v' + n + 1, t)] t", "using left \\<open>f v > 0\\<close>"], ["proof (prove)\nusing this:\n  (v, v') \\<in> R\n  v' \\<le> n\n  0 < g v'\n  v \\<le> n\n  0 < f v\n\ngoal (1 subgoal):\n 1. isPath v [(v, v' + n + 1), (v' + n + 1, t)] t", "by(auto simp add: E_def c_simps R'_def)"], ["proof (state)\nthis:\n  isPath v [(v, v' + n + 1), (v' + n + 1, t)] t\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence \"connected v t\""], ["proof (prove)\nusing this:\n  isPath v [(v, v' + n + 1), (v' + n + 1, t)] t\n\ngoal (1 subgoal):\n 1. local.connected v t", "by(auto simp add: connected_def simp del: isPath.simps)"], ["proof (state)\nthis:\n  local.connected v t\n\ngoal (4 subgoals):\n 1. v \\<le> n \\<Longrightarrow>\n    local.connected s v \\<and> local.connected v t\n 2. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 4. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "ultimately"], ["proof (chain)\npicking this:\n  local.connected s v\n  local.connected v t", "show ?thesis"], ["proof (prove)\nusing this:\n  local.connected s v\n  local.connected v t\n\ngoal (1 subgoal):\n 1. local.connected s v \\<and> local.connected v t", ".."], ["proof (state)\nthis:\n  local.connected s v \\<and> local.connected v t\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "case right"], ["proof (state)\nthis:\n  n < v\n  v \\<le> 2 * n + 1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence vt: \"(v, t) \\<in> E\""], ["proof (prove)\nusing this:\n  n < v\n  v \\<le> 2 * n + 1\n\ngoal (1 subgoal):\n 1. (v, t) \\<in> E", "using v"], ["proof (prove)\nusing this:\n  n < v\n  v \\<le> 2 * n + 1\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. (v, t) \\<in> E", "by(auto simp add: V_def E_def c_simps max_def R'_def split: if_split_asm)"], ["proof (state)\nthis:\n  (v, t) \\<in> E\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence \"connected v t\""], ["proof (prove)\nusing this:\n  (v, t) \\<in> E\n\ngoal (1 subgoal):\n 1. local.connected v t", "by(auto simp add: connected_def intro!: exI[where x=\"[(v, t)]\"])"], ["proof (state)\nthis:\n  local.connected v t\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "moreover"], ["proof (state)\nthis:\n  local.connected v t\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "have *: \"g (v - n - 1) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < g (v - n - 1)", "using vt g_nonneg[of \"v - n - 1\"] right"], ["proof (prove)\nusing this:\n  (v, t) \\<in> E\n  0 \\<le> g (v - n - 1)\n  n < v\n  v \\<le> 2 * n + 1\n\ngoal (1 subgoal):\n 1. 0 < g (v - n - 1)", "by(simp add: E_def )"], ["proof (state)\nthis:\n  0 < g (v - n - 1)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "have \"\\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> f v' > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "hence zero: \"\\<lbrakk> v' \\<le> n; (v', v - n - 1) \\<in> R \\<rbrakk> \\<Longrightarrow> f v' = 0\" for v'"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<le> n; (v', v - n - 1) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> f v' = 0", "using f_nonneg[of v']"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v')\n  0 \\<le> f v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<le> n; (v', v - n - 1) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> f v' = 0", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?v' \\<le> n; (?v', v - n - 1) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> f ?v' = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"sum f {..n} = sum f {x. x \\<le> n \\<and> x \\<notin> R^-1 `` {v - n - 1}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..n} =\n    sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}", "by(rule sum.mono_neutral_cong_right)(auto dest: zero)"], ["proof (state)\nthis:\n  sum f {..n} =\n  sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum f {..n} =\n  sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"\\<dots> \\<le> sum g (R `` {x. x \\<le> n \\<and> x \\<notin> R^-1 `` {v - n - 1}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}\n    \\<le> sum g\n           (R ``\n            {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})", "by(rule le) auto"], ["proof (state)\nthis:\n  sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}\n  \\<le> sum g\n         (R `` {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum f {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}}\n  \\<le> sum g\n         (R `` {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"\\<dots> \\<le> sum g ({..n} - {v - n - 1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g (R `` {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})\n    \\<le> sum g ({..n} - {v - n - 1})", "by(rule sum_mono2)(use R in \\<open>auto simp add: g_nonneg\\<close>)"], ["proof (state)\nthis:\n  sum g (R `` {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})\n  \\<le> sum g ({..n} - {v - n - 1})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum g (R `` {x. x \\<le> n \\<and> x \\<notin> R\\<inverse> `` {v - n - 1}})\n  \\<le> sum g ({..n} - {v - n - 1})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"\\<dots> = sum g {..n} - g (v - n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g ({..n} - {v - n - 1}) = sum g {..n} - g (v - n - 1)", "using right"], ["proof (prove)\nusing this:\n  n < v\n  v \\<le> 2 * n + 1\n\ngoal (1 subgoal):\n 1. sum g ({..n} - {v - n - 1}) = sum g {..n} - g (v - n - 1)", "by(subst sum_diff) auto"], ["proof (state)\nthis:\n  sum g ({..n} - {v - n - 1}) = sum g {..n} - g (v - n - 1)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum g ({..n} - {v - n - 1}) = sum g {..n} - g (v - n - 1)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"\\<dots> < sum g {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g {..n} - g (v - n - 1) < sum g {..n}", "using *"], ["proof (prove)\nusing this:\n  0 < g (v - n - 1)\n\ngoal (1 subgoal):\n 1. sum g {..n} - g (v - n - 1) < sum g {..n}", "by simp"], ["proof (state)\nthis:\n  sum g {..n} - g (v - n - 1) < sum g {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum g {..n} - g (v - n - 1) < sum g {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "have \"\\<dots> = sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g {..n} = sum f {..n}", "by(simp add: eq_sum)"], ["proof (state)\nthis:\n  sum g {..n} = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>v'\\<le>n.\n               (v', v - n - 1) \\<in> R \\<and> 0 < f v') \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  sum f {..n} < sum f {..n}", "show False"], ["proof (prove)\nusing this:\n  sum f {..n} < sum f {..n}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "then"], ["proof (chain)\npicking this:\n  \\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v'", "obtain v' where \"v' \\<le> n\" \"(v', v - n - 1) \\<in> R\" \"f v' > 0\""], ["proof (prove)\nusing this:\n  \\<exists>v'\\<le>n. (v', v - n - 1) \\<in> R \\<and> 0 < f v'\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<le> n; (v', v - n - 1) \\<in> R; 0 < f v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v' \\<le> n\n  (v', v - n - 1) \\<in> R\n  0 < f v'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "with right *"], ["proof (chain)\npicking this:\n  n < v\n  v \\<le> 2 * n + 1\n  0 < g (v - n - 1)\n  v' \\<le> n\n  (v', v - n - 1) \\<in> R\n  0 < f v'", "have \"isPath s [(s, v'), (v', v)] v\""], ["proof (prove)\nusing this:\n  n < v\n  v \\<le> 2 * n + 1\n  0 < g (v - n - 1)\n  v' \\<le> n\n  (v', v - n - 1) \\<in> R\n  0 < f v'\n\ngoal (1 subgoal):\n 1. isPath s [(s, v'), (v', v)] v", "by(auto simp add: E_def c_simps R'_def)"], ["proof (state)\nthis:\n  isPath s [(s, v'), (v', v)] v\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "hence \"connected s v\""], ["proof (prove)\nusing this:\n  isPath s [(s, v'), (v', v)] v\n\ngoal (1 subgoal):\n 1. local.connected s v", "by(auto simp add: connected_def simp del: isPath.simps)"], ["proof (state)\nthis:\n  local.connected s v\n\ngoal (3 subgoals):\n 1. \\<lbrakk>n < v; v \\<le> 2 * n + 1\\<rbrakk>\n    \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 3. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "ultimately"], ["proof (chain)\npicking this:\n  local.connected v t\n  local.connected s v", "show ?thesis"], ["proof (prove)\nusing this:\n  local.connected v t\n  local.connected s v\n\ngoal (1 subgoal):\n 1. local.connected s v \\<and> local.connected v t", "by blast"], ["proof (state)\nthis:\n  local.connected s v \\<and> local.connected v t\n\ngoal (2 subgoals):\n 1. v = s \\<Longrightarrow> local.connected s v \\<and> local.connected v t\n 2. v = t \\<Longrightarrow> local.connected s v \\<and> local.connected v t", "qed(simp_all add: st)"], ["proof (state)\nthis:\n  local.connected s v \\<and> local.connected v t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V. local.connected s v \\<and> local.connected v t\n\ngoal (1 subgoal):\n 1. finite (reachableNodes s)", "have \"reachableNodes s \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachableNodes s \\<subseteq> V", "using \\<open>s \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  s \\<in> V\n\ngoal (1 subgoal):\n 1. reachableNodes s \\<subseteq> V", "by(rule reachable_ss_V)"], ["proof (state)\nthis:\n  reachableNodes s \\<subseteq> V\n\ngoal (1 subgoal):\n 1. finite (reachableNodes s)", "also"], ["proof (state)\nthis:\n  reachableNodes s \\<subseteq> V\n\ngoal (1 subgoal):\n 1. finite (reachableNodes s)", "have \"V \\<subseteq> {..2 * n + 3}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> {..2 * n + 3}", "by(clarsimp simp add: V_def E_def)(simp_all add: c_simps s_def t_def split: if_split_asm)"], ["proof (state)\nthis:\n  V \\<subseteq> {..2 * n + 3}\n\ngoal (1 subgoal):\n 1. finite (reachableNodes s)", "finally"], ["proof (chain)\npicking this:\n  reachableNodes s \\<subseteq> {..2 * n + 3}", "show \"finite (reachableNodes s)\""], ["proof (prove)\nusing this:\n  reachableNodes s \\<subseteq> {..2 * n + 3}\n\ngoal (1 subgoal):\n 1. finite (reachableNodes s)", "by(rule finite_subset) simp"], ["proof (state)\nthis:\n  finite (reachableNodes s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "interpret h: NFlow c s t max_flow"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t max_flow", "by(rule max_flow)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "let ?h = \"\\<lambda>x y. max_flow (x, y + n + 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "from max_flow(2)[THEN h.fofu_II_III]"], ["proof (chain)\npicking this:\n  \\<exists>k'. NCut c s t k' \\<and> h.val = NCut.cap c k'", "obtain C where C: \"NCut c s t C\" \n    and eq: \"h.val = NCut.cap c C\""], ["proof (prove)\nusing this:\n  \\<exists>k'. NCut c s t k' \\<and> h.val = NCut.cap c k'\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>NCut c s t C; h.val = NCut.cap c C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  NCut c s t C\n  h.val = NCut.cap c C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "interpret C: NCut c s t C"], ["proof (prove)\ngoal (1 subgoal):\n 1. NCut c s t C", "using C"], ["proof (prove)\nusing this:\n  NCut c s t C\n\ngoal (1 subgoal):\n 1. NCut c s t C", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"sum c (outgoing s) = sum (\\<lambda>(_, x). f x) (Pair s ` {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c (outgoing s) = (\\<Sum>(uu_, x)\\<in>Pair s ` {..n}. f x)", "by(rule sum.mono_neutral_cong_left)(auto simp add: outgoing_def E_def)"], ["proof (state)\nthis:\n  sum c (outgoing s) = (\\<Sum>(uu_, x)\\<in>Pair s ` {..n}. f x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  sum c (outgoing s) = (\\<Sum>(uu_, x)\\<in>Pair s ` {..n}. f x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"\\<dots> = sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(uu_, x)\\<in>Pair s ` {..n}. f x) = sum f {..n}", "by(subst sum.reindex)(auto simp add: inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>(uu_, x)\\<in>Pair s ` {..n}. f x) = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "finally"], ["proof (chain)\npicking this:\n  sum c (outgoing s) = sum f {..n}", "have out: \"sum c (outgoing s) = sum f {..n}\""], ["proof (prove)\nusing this:\n  sum c (outgoing s) = sum f {..n}\n\ngoal (1 subgoal):\n 1. sum c (outgoing s) = sum f {..n}", "."], ["proof (state)\nthis:\n  sum c (outgoing s) = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have no_leaving: \"(\\<lambda>y. y + n + 1) ` (R' `` (C \\<inter> {..n})) \\<subseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C", "obtain x y where *: \"(x, y) \\<in> R'\" \"x \\<le> n\" \"x \\<in> C\" \"y + n + 1 \\<notin> C\""], ["proof (prove)\nusing this:\n  \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>(x, y) \\<in> R'; x \\<le> n; x \\<in> C;\n         y + n + 1 \\<notin> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C", "have xy: \"(x, y + n + 1) \\<in> E\" \"y \\<le> n\" \"c (x, y + n + 1) = LARGE\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n\ngoal (1 subgoal):\n 1. (x, y + n + 1) \\<in> E &&& y \\<le> n &&& c (x, y + n + 1) = LARGE", "using R"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. (x, y + n + 1) \\<in> E &&& y \\<le> n &&& c (x, y + n + 1) = LARGE", "by(auto simp add: E_def c_simps R'_def)"], ["proof (state)\nthis:\n  (x, y + n + 1) \\<in> E\n  y \\<le> n\n  c (x, y + n + 1) = LARGE\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "have \"h.val \\<le> sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h.val \\<le> sum f {..n}", "using h.val_bounded(2) out"], ["proof (prove)\nusing this:\n  h.val \\<le> sum c (outgoing s)\n  sum c (outgoing s) = sum f {..n}\n\ngoal (1 subgoal):\n 1. h.val \\<le> sum f {..n}", "by simp"], ["proof (state)\nthis:\n  h.val \\<le> sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  h.val \\<le> sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "have \"\\<dots> < sum c {(x, y + n + 1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..n} < sum c {(x, y + n + 1)}", "using xy *"], ["proof (prove)\nusing this:\n  (x, y + n + 1) \\<in> E\n  y \\<le> n\n  c (x, y + n + 1) = LARGE\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n\ngoal (1 subgoal):\n 1. sum f {..n} < sum c {(x, y + n + 1)}", "by(simp add: LARGE_def)"], ["proof (state)\nthis:\n  sum f {..n} < sum c {(x, y + n + 1)}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum f {..n} < sum c {(x, y + n + 1)}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "have \"\\<dots> \\<le> C.cap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c {(x, y + n + 1)} \\<le> C.cap", "using * xy"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n  (x, y + n + 1) \\<in> E\n  y \\<le> n\n  c (x, y + n + 1) = LARGE\n\ngoal (1 subgoal):\n 1. sum c {(x, y + n + 1)} \\<le> C.cap", "unfolding C.cap_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R'\n  x \\<le> n\n  x \\<in> C\n  y + n + 1 \\<notin> C\n  (x, y + n + 1) \\<in> E\n  y \\<le> n\n  c (x, y + n + 1) = LARGE\n\ngoal (1 subgoal):\n 1. sum c {(x, y + n + 1)} \\<le> sum c (outgoing' C)", "by(intro sum_mono2[OF finite_outgoing'])(auto simp add: outgoing'_def cap_non_negative)"], ["proof (state)\nthis:\n  sum c {(x, y + n + 1)} \\<le> C.cap\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum c {(x, y + n + 1)} \\<le> C.cap\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "have \"\\<dots> = h.val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cap = h.val", "by(simp add: eq)"], ["proof (state)\nthis:\n  C.cap = h.val\n\ngoal (1 subgoal):\n 1. \\<not> (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n           \\<subseteq> C \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  h.val < h.val", "show False"], ["proof (prove)\nusing this:\n  h.val < h.val\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"C.cap \\<le> sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cap \\<le> sum f {..n}", "using out h.val_bounded(2) eq"], ["proof (prove)\nusing this:\n  sum c (outgoing s) = sum f {..n}\n  h.val \\<le> sum c (outgoing s)\n  h.val = C.cap\n\ngoal (1 subgoal):\n 1. C.cap \\<le> sum f {..n}", "by simp"], ["proof (state)\nthis:\n  C.cap \\<le> sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  C.cap \\<le> sum f {..n}", "have cap: \"C.cap = sum f {..n}\""], ["proof (prove)\nusing this:\n  C.cap \\<le> sum f {..n}\n\ngoal (1 subgoal):\n 1. C.cap = sum f {..n}", "proof(rule antisym)"], ["proof (state)\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "let ?L = \"{x. x \\<le> n \\<and> x \\<in> C \\<and> f x > 0}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "let ?R = \"(\\<lambda>y. y + n + 1) ` (R' `` ?L)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"sum f {..n} = sum f ?L + sum f ({..n} - ?L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..n} =\n    sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} +\n    sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "by(subst sum_diff) auto"], ["proof (state)\nthis:\n  sum f {..n} =\n  sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} +\n  sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum f {..n} =\n  sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} +\n  sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"sum f ?L \\<le> sum g (R `` ?L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}\n    \\<le> sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "by(rule le) auto"], ["proof (state)\nthis:\n  sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}\n  \\<le> sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum f {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}\n  \\<le> sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"\\<dots> = sum g (R' `` ?L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n    sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "using g_nonneg"], ["proof (prove)\nusing this:\n  0 \\<le> g ?y\n\ngoal (1 subgoal):\n 1. sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n    sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "by(intro sum.mono_neutral_cong_right)(auto 4 3 simp add: R'_def Image_iff intro: antisym)"], ["proof (state)\nthis:\n  sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum g (R `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"\\<dots> = sum c ((\\<lambda>y. (y + n + 1, t)) ` (R' `` ?L))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n    sum c\n     ((\\<lambda>y. (y + n + 1, t)) `\n      R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "using R"], ["proof (prove)\nusing this:\n  R \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n    sum c\n     ((\\<lambda>y. (y + n + 1, t)) `\n      R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})", "by(subst sum.reindex)(auto intro!: sum.cong simp add: inj_on_def R'_def)"], ["proof (state)\nthis:\n  sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum g (R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"sum f ({..n} - ?L) = sum c (Pair s ` ({..n} - ?L))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n    sum c\n     (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))", "by(simp add: sum.reindex inj_on_def)"], ["proof (state)\nthis:\n  sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum c (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) =\n  sum c (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"sum c ((\\<lambda>y. (y + n + 1, t)) ` (R' `` ?L)) + \\<dots> = \n      sum c (((\\<lambda>y. (y + n + 1, t)) ` (R' `` ?L)) \\<union> (Pair s ` ({..n} - ?L)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c\n     ((\\<lambda>y. (y + n + 1, t)) `\n      R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) +\n    sum c\n     (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})) =\n    sum c\n     ((\\<lambda>y. (y + n + 1, t)) `\n      R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n      Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))", "by(subst sum.union_disjoint) auto"], ["proof (state)\nthis:\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) +\n  sum c\n   (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})) =\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) +\n  sum c\n   (Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})) =\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"\\<dots> \\<le> sum c (((\\<lambda>y. (y + n + 1, t)) ` (R' `` ?L)) \\<union> (Pair s ` ({..n} - ?L)) \\<union> {(x, t) | x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c\n     ((\\<lambda>y. (y + n + 1, t)) `\n      R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n      Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n    \\<le> sum c\n           ((\\<lambda>y. (y + n + 1, t)) `\n            R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n            Pair s `\n            ({..n} -\n             {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n            {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1})", "by(rule sum_mono2)(auto simp add: g_nonneg)"], ["proof (state)\nthis:\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n  \\<le> sum c\n         ((\\<lambda>y. (y + n + 1, t)) `\n          R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n          Pair s `\n          ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n          {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum c\n   ((\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}))\n  \\<le> sum c\n         ((\\<lambda>y. (y + n + 1, t)) `\n          R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n          Pair s `\n          ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n          {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1})\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"(((\\<lambda>y. (y + n + 1, t)) ` (R' `` ?L)) \\<union> (Pair s ` ({..n} - ?L)) \\<union> {(x, t) | x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}) = (Pair s ` ({..n} - ?L)) \\<union>  {(x, t) | x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1} =\n    Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}", "using no_leaving R'"], ["proof (prove)\nusing this:\n  (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C\n  R' \\<subseteq> {..n} \\<times> {..n}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. (y + n + 1, t)) `\n    R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n    Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1} =\n    Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}", "by(fastforce simp add: Image_iff intro: rev_image_eqI)"], ["proof (state)\nthis:\n  (\\<lambda>y. (y + n + 1, t)) `\n  R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n  Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n  {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1} =\n  Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n  {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  (\\<lambda>y. (y + n + 1, t)) `\n  R' `` {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x} \\<union>\n  Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n  {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1} =\n  Pair s ` ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n  {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"sum c \\<dots> = sum c (outgoing' C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c\n     (Pair s `\n      ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n      {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}) =\n    sum c (outgoing' C)", "using C.s_in_cut C.t_ni_cut f_nonneg no_leaving"], ["proof (prove)\nusing this:\n  s \\<in> C\n  t \\<notin> C\n  0 \\<le> f ?x\n  (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C\n\ngoal (1 subgoal):\n 1. sum c\n     (Pair s `\n      ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n      {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}) =\n    sum c (outgoing' C)", "apply(intro sum.mono_neutral_cong_right)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n     (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n     \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> finite\n                       (Pair s `\n                        ({..n} -\n                         {x. x \\<le> n \\<and>\n                             x \\<in> C \\<and> 0 < f x}) \\<union>\n                        {(x, t) |x.\n                         x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1})\n 2. \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n     (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n     \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> outgoing' C\n                      \\<subseteq> Pair s `\n                                  ({..n} -\n                                   {x. x \\<le> n \\<and>\n x \\<in> C \\<and> 0 < f x}) \\<union>\n                                  {(x, t) |x.\n                                   x \\<in> C \\<and>\n                                   n < x \\<and> x \\<le> 2 * n + 1}\n 3. \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n     (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n})\n     \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>Pair s `\n                                     ({..n} -\n{x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n                                     {(x, t) |x.\nx \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1} -\n                                     outgoing' C.\n                         c i = 0\n 4. \\<And>x.\n       \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n        (\\<lambda>y. y + n + 1) ` R' `` (C \\<inter> {..n}) \\<subseteq> C;\n        x \\<in> outgoing' C\\<rbrakk>\n       \\<Longrightarrow> c x = c x", "apply(auto simp add: outgoing'_def E_def intro: le_neq_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>u v.\n       \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n        (\\<lambda>x. Suc (x + n)) ` R' `` (C \\<inter> {..n}) \\<subseteq> C;\n        (v, u)\n        \\<notin> Pair s `\n                 ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x});\n        u \\<notin> C; v \\<in> C; c (v, u) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> u = t\n 2. \\<And>u v.\n       \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n        (\\<lambda>x. Suc (x + n)) ` R' `` (C \\<inter> {..n}) \\<subseteq> C;\n        (v, u)\n        \\<notin> Pair s `\n                 ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x});\n        u \\<notin> C; v \\<in> C; c (v, u) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> n < v\n 3. \\<And>u v.\n       \\<lbrakk>s \\<in> C; t \\<notin> C; \\<And>x. 0 \\<le> f x;\n        (\\<lambda>x. Suc (x + n)) ` R' `` (C \\<inter> {..n}) \\<subseteq> C;\n        (v, u)\n        \\<notin> Pair s `\n                 ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x});\n        u \\<notin> C; v \\<in> C; c (v, u) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> v \\<le> Suc (2 * n)", "apply(fastforce simp add: c_simps Image_iff intro: rev_image_eqI split: if_split_asm)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum c\n   (Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}) =\n  sum c (outgoing' C)\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "also"], ["proof (state)\nthis:\n  sum c\n   (Pair s `\n    ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x}) \\<union>\n    {(x, t) |x. x \\<in> C \\<and> n < x \\<and> x \\<le> 2 * n + 1}) =\n  sum c (outgoing' C)\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "have \"\\<dots> = C.cap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c (outgoing' C) = C.cap", "by(simp add: C.cap_def)"], ["proof (state)\nthis:\n  sum c (outgoing' C) = C.cap\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n      \\<le> y +\n            sum f\n             ({..n} -\n              {x. x \\<le> n \\<and>\n                  x \\<in> C \\<and> 0 < f x})) \\<Longrightarrow>\n  sum f {..n} \\<le> C.cap", "show \"sum f {..n} \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + sum f ({..n} - {x. x \\<le> n \\<and> x \\<in> C \\<and> 0 < f x})\n      \\<le> y +\n            sum f\n             ({..n} -\n              {x. x \\<le> n \\<and>\n                  x \\<in> C \\<and> 0 < f x})) \\<Longrightarrow>\n  sum f {..n} \\<le> C.cap\n\ngoal (1 subgoal):\n 1. sum f {..n} \\<le> C.cap", "by simp"], ["proof (state)\nthis:\n  sum f {..n} \\<le> C.cap\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.cap = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>x y.\n                            \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h x y;\n                 \\<And>x y.\n                    \\<lbrakk>0 < h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R;\n                 \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (h x) {..n};\n                 \\<And>y.\n                    y \\<le> n \\<Longrightarrow>\n                    g y = (\\<Sum>x\\<le>n. h x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x\\<le>n. 0 < f x\\<rbrakk>\n    \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> ?h x y\n 2. \\<And>x y.\n       \\<lbrakk>0 < ?h x y; x \\<le> n; y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> R\n 3. \\<And>x. x \\<le> n \\<Longrightarrow> f x = sum (?h x) {..n}\n 4. \\<And>y. y \\<le> n \\<Longrightarrow> g y = (\\<Sum>x\\<le>n. ?h x y)", "show \"0 \\<le> ?h x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> max_flow (x, y + n + 1)", "by(rule h.f_non_negative)"], ["proof (state)\nthis:\n  0 \\<le> max_flow (?x, ?y + n + 1)\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>0 < max_flow (?x8 x y, ?y8 x y + n + 1); x \\<le> n;\n        y \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> R\n 2. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (?x8 x y, ?y8 x y + n + 1))\n 3. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (?x8 x y, ?y8 x y + n + 1))", "show \"(x, y) \\<in> R\" if \"0 < ?h x y\" \"x \\<le> n\" \"y \\<le> n\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> R", "using h.capacity_const[rule_format, of \"(x, y + n + 1)\"] that"], ["proof (prove)\nusing this:\n  0 \\<le> max_flow (x, y + n + 1) \\<and>\n  max_flow (x, y + n + 1) \\<le> c (x, y + n + 1)\n  0 < max_flow (x, y + n + 1)\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> R", "by(simp add: c_simps R'_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < max_flow (?x, ?y + n + 1); ?x \\<le> n; ?y \\<le> n\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n 2. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "have sum_h: \"sum (?h x) {..n} = max_flow (s, x)\" if \"x \\<le> n\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "have \"sum (?h x) {..n} = sum max_flow (Pair x ` ((+) (n + 1)) ` {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow (Pair x ` (+) (n + 1) ` {..n})", "by(simp add: sum.reindex add.commute inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow (Pair x ` (+) (n + 1) ` {..n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow (Pair x ` (+) (n + 1) ` {..n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "have \"\\<dots> = sum max_flow (outgoing x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (Pair x ` (+) (n + 1) ` {..n}) = sum max_flow (outgoing x)", "using that"], ["proof (prove)\nusing this:\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow (Pair x ` (+) (n + 1) ` {..n}) = sum max_flow (outgoing x)", "apply(intro sum.mono_neutral_cong_right)"], ["proof (prove)\ngoal (4 subgoals):\n 1. x \\<le> n \\<Longrightarrow> finite (Pair x ` (+) (n + 1) ` {..n})\n 2. x \\<le> n \\<Longrightarrow>\n    outgoing x \\<subseteq> Pair x ` (+) (n + 1) ` {..n}\n 3. x \\<le> n \\<Longrightarrow>\n    \\<forall>i\\<in>Pair x ` (+) (n + 1) ` {..n} - outgoing x. max_flow i = 0\n 4. \\<And>xa.\n       \\<lbrakk>x \\<le> n; xa \\<in> outgoing x\\<rbrakk>\n       \\<Longrightarrow> max_flow xa = max_flow xa", "apply(auto simp add: outgoing_def E_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>x \\<le> n; c (x, u) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (x, u)\n                         \\<in> Pair x ` (\\<lambda>x. Suc (n + x)) ` {..n}", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; c (x, y) \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (x, y)\n                      \\<in> Pair x ` (\\<lambda>x. Suc (n + x)) ` {..n}", "by(auto 4 3 simp add: c_simps max_def split: if_split_asm intro: rev_image_eqI[where x=\"y - n - 1\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum max_flow (Pair x ` (+) (n + 1) ` {..n}) = sum max_flow (outgoing x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "also"], ["proof (state)\nthis:\n  sum max_flow (Pair x ` (+) (n + 1) ` {..n}) = sum max_flow (outgoing x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "have \"\\<dots> = sum max_flow (incoming x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (outgoing x) = sum max_flow (incoming x)", "using that"], ["proof (prove)\nusing this:\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow (outgoing x) = sum max_flow (incoming x)", "by(subst h.conservation) auto"], ["proof (state)\nthis:\n  sum max_flow (outgoing x) = sum max_flow (incoming x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "also"], ["proof (state)\nthis:\n  sum max_flow (outgoing x) = sum max_flow (incoming x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "have \"\\<dots> = sum max_flow {(s, x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (incoming x) = sum max_flow {(s, x)}", "using that"], ["proof (prove)\nusing this:\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow (incoming x) = sum max_flow {(s, x)}", "by(intro sum.mono_neutral_cong_left; auto simp add: incoming_def E_def; simp add: c_simps split: if_split_asm)"], ["proof (state)\nthis:\n  sum max_flow (incoming x) = sum max_flow {(s, x)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = sum max_flow {(s, x)}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = sum max_flow {(s, x)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) = max_flow (s, ?x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n 2. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "hence le: \"sum (?h x) {..n} \\<le> f x\" if \"x \\<le> n\" for x"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) = max_flow (s, ?x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<le> f x", "using sum_h[OF that] h.capacity_const[rule_format, of \"(s, x)\"] that"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) = max_flow (s, ?x)\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) = max_flow (s, x)\n  0 \\<le> max_flow (s, x) \\<and> max_flow (s, x) \\<le> c (s, x)\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<le> f x", "by simp"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n 2. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "moreover"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n 2. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "have \"f x \\<le> sum (?h x) {..n}\" if \"x \\<le> n\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> f x \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "hence \"sum (?h x) {..n} < f x\""], ["proof (prove)\nusing this:\n  \\<not> f x \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < f x", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < f x\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "hence \"sum (\\<lambda>x. (sum (?h x) {..n})) {..n} < sum f {..n}\""], ["proof (prove)\nusing this:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < f x\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < sum f {..n}", "using le that"], ["proof (prove)\nusing this:\n  (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < f x\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < sum f {..n}", "by(intro sum_strict_mono_ex1) auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) < sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"sum (\\<lambda>x. (sum (?h x) {..n})) {..n} = sum max_flow (Pair s ` {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow (Pair s ` {..n})", "using sum_h"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) = max_flow (s, ?x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow (Pair s ` {..n})", "by(simp add: sum.reindex inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow (Pair s ` {..n})\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. \\<Sum>y\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow (Pair s ` {..n})\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"\\<dots> = sum max_flow (outgoing s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (Pair s ` {..n}) = sum max_flow (outgoing s)", "by(rule sum.mono_neutral_right)(auto simp add: outgoing_def E_def)"], ["proof (state)\nthis:\n  sum max_flow (Pair s ` {..n}) = sum max_flow (outgoing s)\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum max_flow (Pair s ` {..n}) = sum max_flow (outgoing s)\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"\\<dots> = sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (outgoing s) = sum f {..n}", "using eq cap"], ["proof (prove)\nusing this:\n  h.val = C.cap\n  C.cap = sum f {..n}\n\ngoal (1 subgoal):\n 1. sum max_flow (outgoing s) = sum f {..n}", "by(simp add: h.val_alt)"], ["proof (state)\nthis:\n  sum max_flow (outgoing s) = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> f x\n           \\<le> (\\<Sum>y\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  sum f {..n} < sum f {..n}", "show False"], ["proof (prove)\nusing this:\n  sum f {..n} < sum f {..n}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow>\n  f ?x \\<le> (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> n \\<Longrightarrow>\n       f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))\n 2. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "ultimately"], ["proof (chain)\npicking this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n  ?x \\<le> n \\<Longrightarrow>\n  f ?x \\<le> (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1))", "show \"f x = sum (?h x) {..n}\" if \"x \\<le> n\" for x"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n  ?x \\<le> n \\<Longrightarrow>\n  f ?x \\<le> (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1))\n\ngoal (1 subgoal):\n 1. f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))", "using that"], ["proof (prove)\nusing this:\n  ?x \\<le> n \\<Longrightarrow>\n  (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1)) \\<le> f ?x\n  ?x \\<le> n \\<Longrightarrow>\n  f ?x \\<le> (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1))\n  x \\<le> n\n\ngoal (1 subgoal):\n 1. f x = (\\<Sum>y\\<le>n. max_flow (x, y + n + 1))", "by(auto intro: antisym)"], ["proof (state)\nthis:\n  ?x \\<le> n \\<Longrightarrow>\n  f ?x = (\\<Sum>y\\<le>n. max_flow (?x, y + n + 1))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "have sum_h': \"sum (\\<lambda>x. ?h x y) {..n} = max_flow (y + n + 1, t)\" if \"y \\<le> n\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "have \"sum (\\<lambda>x. ?h x y) {..n} = sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n})", "by(simp add: sum.reindex inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "have \"\\<dots> = sum max_flow (incoming (y + n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n}) =\n    sum max_flow (incoming (y + n + 1))", "using that"], ["proof (prove)\nusing this:\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n}) =\n    sum max_flow (incoming (y + n + 1))", "apply(intro sum.mono_neutral_cong_right)"], ["proof (prove)\ngoal (4 subgoals):\n 1. y \\<le> n \\<Longrightarrow>\n    finite ((\\<lambda>x. (x, y + n + 1)) ` {..n})\n 2. y \\<le> n \\<Longrightarrow>\n    incoming (y + n + 1) \\<subseteq> (\\<lambda>x. (x, y + n + 1)) ` {..n}\n 3. y \\<le> n \\<Longrightarrow>\n    \\<forall>i\\<in>(\\<lambda>x. (x, y + n + 1)) ` {..n} -\n                   incoming (y + n + 1).\n       max_flow i = 0\n 4. \\<And>x.\n       \\<lbrakk>y \\<le> n; x \\<in> incoming (y + n + 1)\\<rbrakk>\n       \\<Longrightarrow> max_flow x = max_flow x", "apply(auto simp add: incoming_def E_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>y \\<le> n; c (u, Suc (y + n)) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (u, Suc (y + n))\n                         \\<in> (\\<lambda>x. (x, Suc (y + n))) ` {..n}", "apply(auto simp add: c_simps t_def split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n}) =\n  sum max_flow (incoming (y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "also"], ["proof (state)\nthis:\n  sum max_flow ((\\<lambda>x. (x, y + n + 1)) ` {..n}) =\n  sum max_flow (incoming (y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "have \"\\<dots> = sum max_flow (outgoing (y + n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (incoming (y + n + 1)) =\n    sum max_flow (outgoing (y + n + 1))", "using that"], ["proof (prove)\nusing this:\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow (incoming (y + n + 1)) =\n    sum max_flow (outgoing (y + n + 1))", "by(subst h.conservation)(auto simp add: s_def t_def)"], ["proof (state)\nthis:\n  sum max_flow (incoming (y + n + 1)) = sum max_flow (outgoing (y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "also"], ["proof (state)\nthis:\n  sum max_flow (incoming (y + n + 1)) = sum max_flow (outgoing (y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "have \"\\<dots> = sum max_flow {(y + n + 1, t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (outgoing (y + n + 1)) = sum max_flow {(y + n + 1, t)}", "using that"], ["proof (prove)\nusing this:\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. sum max_flow (outgoing (y + n + 1)) = sum max_flow {(y + n + 1, t)}", "by(intro sum.mono_neutral_cong_left; auto simp add: outgoing_def E_def; simp add: s_def c_simps split: if_split_asm)"], ["proof (state)\nthis:\n  sum max_flow (outgoing (y + n + 1)) = sum max_flow {(y + n + 1, t)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = sum max_flow {(y + n + 1, t)}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = sum max_flow {(y + n + 1, t)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) = max_flow (?y + n + 1, t)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "hence le': \"sum (\\<lambda>x. ?h x y) {..n} \\<le> g y\" if \"y \\<le> n\" for y"], ["proof (prove)\nusing this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) = max_flow (?y + n + 1, t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<le> g y", "using sum_h'[OF that] h.capacity_const[rule_format, of \"(y + n + 1, t)\"] that"], ["proof (prove)\nusing this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) = max_flow (?y + n + 1, t)\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) = max_flow (y + n + 1, t)\n  0 \\<le> max_flow (y + n + 1, t) \\<and>\n  max_flow (y + n + 1, t) \\<le> c (y + n + 1, t)\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<le> g y", "by simp"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "moreover"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "have \"g y \\<le> sum (\\<lambda>x. ?h x y) {..n}\" if \"y \\<le> n\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> g y \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "hence \"sum (\\<lambda>x. ?h x y) {..n} < g y\""], ["proof (prove)\nusing this:\n  \\<not> g y \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < g y", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < g y\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "hence \"sum (\\<lambda>y. (sum (\\<lambda>x. ?h x y) {..n})) {..n} < sum g {..n}\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < sum g {..n}", "using le' that"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < g y\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < sum g {..n}", "by(intro sum_strict_mono_ex1) auto"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < sum g {..n}\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) < sum g {..n}\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"sum (\\<lambda>y. (sum (\\<lambda>x. ?h x y) {..n})) {..n} = sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n})", "using sum_h'"], ["proof (prove)\nusing this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) = max_flow (?y + n + 1, t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n    sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n})", "by(simp add: sum.reindex inj_on_def)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n})\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<le>n. \\<Sum>x\\<le>n. max_flow (x, y + n + 1)) =\n  sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n})\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"\\<dots> = sum max_flow (incoming t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n}) =\n    sum max_flow (incoming t)", "apply(rule sum.mono_neutral_right)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite ((\\<lambda>y. (y + n + 1, t)) ` {..n})\n 2. incoming t \\<subseteq> (\\<lambda>y. (y + n + 1, t)) ` {..n}\n 3. \\<forall>i\\<in>(\\<lambda>y. (y + n + 1, t)) ` {..n} - incoming t.\n       max_flow i = 0", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. incoming t \\<subseteq> (\\<lambda>y. (y + n + 1, t)) ` {..n}\n 2. \\<forall>i\\<in>(\\<lambda>y. (y + n + 1, t)) ` {..n} - incoming t.\n       max_flow i = 0", "apply(auto simp add: incoming_def E_def cong: rev_conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>g (u - Suc n) \\<noteq> 0; n < u;\n        u \\<le> Suc (2 * n)\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (\\<lambda>x. (Suc (x + n), t)) ` {..n}", "subgoal for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g (u - Suc n) \\<noteq> 0; n < u; u \\<le> Suc (2 * n)\\<rbrakk>\n    \\<Longrightarrow> (u, t) \\<in> (\\<lambda>x. (Suc (x + n), t)) ` {..n}", "by(auto intro: rev_image_eqI[where x=\"u - n - 1\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n}) =\n  sum max_flow (incoming t)\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum max_flow ((\\<lambda>y. (y + n + 1, t)) ` {..n}) =\n  sum max_flow (incoming t)\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"\\<dots> = sum max_flow (outgoing s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (incoming t) = sum max_flow (outgoing s)", "by(rule h.inflow_t_outflow_s)"], ["proof (state)\nthis:\n  sum max_flow (incoming t) = sum max_flow (outgoing s)\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  sum max_flow (incoming t) = sum max_flow (outgoing s)\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "have \"\\<dots> = sum f {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum max_flow (outgoing s) = sum f {..n}", "using eq cap"], ["proof (prove)\nusing this:\n  h.val = C.cap\n  C.cap = sum f {..n}\n\ngoal (1 subgoal):\n 1. sum max_flow (outgoing s) = sum f {..n}", "by(simp add: h.val_alt)"], ["proof (state)\nthis:\n  sum max_flow (outgoing s) = sum f {..n}\n\ngoal (1 subgoal):\n 1. \\<not> g y\n           \\<le> (\\<Sum>x\\<le>n. max_flow (x, y + n + 1)) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  sum f {..n} < sum g {..n}", "show False"], ["proof (prove)\nusing this:\n  sum f {..n} < sum g {..n}\n\ngoal (1 subgoal):\n 1. False", "using eq_sum"], ["proof (prove)\nusing this:\n  sum f {..n} < sum g {..n}\n  sum f {..n} = sum g {..n}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow>\n  g ?y \\<le> (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<le> n \\<Longrightarrow>\n       g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "ultimately"], ["proof (chain)\npicking this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n  ?y \\<le> n \\<Longrightarrow>\n  g ?y \\<le> (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1))", "show \"g y = sum (\\<lambda>x. ?h x y) {..n}\" if \"y \\<le> n\" for y"], ["proof (prove)\nusing this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n  ?y \\<le> n \\<Longrightarrow>\n  g ?y \\<le> (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1))\n\ngoal (1 subgoal):\n 1. g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "using that"], ["proof (prove)\nusing this:\n  ?y \\<le> n \\<Longrightarrow>\n  (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1)) \\<le> g ?y\n  ?y \\<le> n \\<Longrightarrow>\n  g ?y \\<le> (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1))\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. g y = (\\<Sum>x\\<le>n. max_flow (x, y + n + 1))", "by(auto intro: antisym)"], ["proof (state)\nthis:\n  ?y \\<le> n \\<Longrightarrow>\n  g ?y = (\\<Sum>x\\<le>n. max_flow (x, ?y + n + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergent_bounded_family_nat:\n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n  assumes bounded: \"\\<And>x. bounded (range (\\<lambda>n. f n x))\"\n  obtains k where \"strict_mono k\" \"\\<And>x. convergent (\\<lambda>n. f (k n) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret subseqs \"\\<lambda>x k. convergent (\\<lambda>n. f (k n) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_Subsequence.subseqs\n     (\\<lambda>x k. convergent (\\<lambda>n. f (k n) x))", "proof(unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s.\n       strict_mono s \\<Longrightarrow>\n       \\<exists>r'.\n          strict_mono r' \\<and>\n          convergent (\\<lambda>na. f ((s \\<circ> r') na) n)", "fix x and s :: \"nat \\<Rightarrow> nat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s.\n       strict_mono s \\<Longrightarrow>\n       \\<exists>r'.\n          strict_mono r' \\<and>\n          convergent (\\<lambda>na. f ((s \\<circ> r') na) n)", "have \"bounded (range (\\<lambda>n. f (s n) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. f (s n) x))", "using bounded"], ["proof (prove)\nusing this:\n  bounded (range (\\<lambda>n. f n ?x))\n\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. f (s n) x))", "by(rule bounded_subset) auto"], ["proof (state)\nthis:\n  bounded (range (\\<lambda>n. f (s n) x))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       strict_mono s \\<Longrightarrow>\n       \\<exists>r'.\n          strict_mono r' \\<and>\n          convergent (\\<lambda>na. f ((s \\<circ> r') na) n)", "from bounded_imp_convergent_subsequence[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>l r.\n     strict_mono r \\<and>\n     ((\\<lambda>n. f (s n) x) \\<circ> r) \\<longlonglongrightarrow> l", "show \"\\<exists>r. strict_mono r \\<and> convergent (\\<lambda>n. f ((s \\<circ> r) n) x)\""], ["proof (prove)\nusing this:\n  \\<exists>l r.\n     strict_mono r \\<and>\n     ((\\<lambda>n. f (s n) x) \\<circ> r) \\<longlonglongrightarrow> l\n\ngoal (1 subgoal):\n 1. \\<exists>r.\n       strict_mono r \\<and> convergent (\\<lambda>n. f ((s \\<circ> r) n) x)", "by(auto simp add: o_def convergent_def)"], ["proof (state)\nthis:\n  \\<exists>r.\n     strict_mono r \\<and> convergent (\\<lambda>n. f ((s \\<circ> r) n) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"convergent (\\<lambda>n. f ((diagseq \\<circ> (+) (Suc k)) n) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. f ((diagseq \\<circ> (+) (Suc k)) n) k)", "by(rule diagseq_holds)(auto dest: convergent_subseq_convergent simp add: o_def)"], ["proof (state)\nthis:\n  convergent (\\<lambda>n. f ((diagseq \\<circ> (+) (Suc k)) n) k)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"convergent (\\<lambda>n. f (diagseq n) k)\""], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. f ((diagseq \\<circ> (+) (Suc k)) n) k)\n\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. f (diagseq n) k)", "unfolding o_def"], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. f (diagseq (Suc k + n)) k)\n\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. f (diagseq n) k)", "by(subst (asm) add.commute)(simp only: convergent_ignore_initial_segment[where f=\"\\<lambda>x. f (diagseq x) k\"])"], ["proof (state)\nthis:\n  convergent (\\<lambda>n. f (diagseq n) k)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  convergent (\\<lambda>n. f (diagseq n) ?k2)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with subseq_diagseq"], ["proof (chain)\npicking this:\n  strict_mono diagseq\n  convergent (\\<lambda>n. f (diagseq n) ?k2)", "show ?thesis"], ["proof (prove)\nusing this:\n  strict_mono diagseq\n  convergent (\\<lambda>n. f (diagseq n) ?k2)\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convergent_bounded_family:\n  fixes f :: \"nat \\<Rightarrow> 'a \\<Rightarrow> real\"\n  assumes bounded: \"\\<And>x. x \\<in> A \\<Longrightarrow> bounded (range (\\<lambda>n. f n x))\"\n  and A: \"countable A\"\n  obtains k where \"strict_mono k\" \"\\<And>x. x \\<in> A \\<Longrightarrow> convergent (\\<lambda>n. f (k n) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "define f' where \"f' n x = f n (from_nat_into A x)\" for n x"], ["proof (state)\nthis:\n  f' ?n ?x = f ?n (from_nat_into A ?x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"bounded (range (\\<lambda>n. f' n x))\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. f' n x))", "unfolding f'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. f n (from_nat_into A x)))", "using from_nat_into[OF False]"], ["proof (prove)\nusing this:\n  from_nat_into A ?n \\<in> A\n\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. f n (from_nat_into A x)))", "by(rule bounded)"], ["proof (state)\nthis:\n  bounded (range (\\<lambda>n. f' n ?x))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  bounded (range (\\<lambda>n. f' n ?x))", "obtain k where k: \"strict_mono k\" \n    and conv: \"convergent (\\<lambda>n. f' (k n) x)\" for x"], ["proof (prove)\nusing this:\n  bounded (range (\\<lambda>n. f' n ?x))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>x. convergent (\\<lambda>n. f' (k n) x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule convergent_bounded_family_nat) iprover"], ["proof (state)\nthis:\n  strict_mono k\n  convergent (\\<lambda>n. f' (k n) ?x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"convergent (\\<lambda>n. f (k n) x)\" if \"x \\<in> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. f (k n) x)", "using conv[of \"to_nat_on A x\"] A that"], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. f' (k n) (to_nat_on A x))\n  countable A\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. f (k n) x)", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> convergent (\\<lambda>n. f (k n) ?x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "with k"], ["proof (chain)\npicking this:\n  strict_mono k\n  ?x \\<in> A \\<Longrightarrow> convergent (\\<lambda>n. f (k n) ?x)", "show thesis"], ["proof (prove)\nusing this:\n  strict_mono k\n  ?x \\<in> A \\<Longrightarrow> convergent (\\<lambda>n. f (k n) ?x)\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  A = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>strict_mono k;\n                 \\<And>x.\n                    x \\<in> A \\<Longrightarrow>\n                    convergent (\\<lambda>n. f (k n) x)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     A = {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "with strict_mono_id"], ["proof (chain)\npicking this:\n  strict_mono id\n  A = {}", "show thesis"], ["proof (prove)\nusing this:\n  strict_mono id\n  A = {}\n\ngoal (1 subgoal):\n 1. thesis", "by(blast intro!: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation zero_on :: \"('a \\<Rightarrow> 'b :: zero) \\<Rightarrow> 'a set \\<Rightarrow> 'a \\<Rightarrow> 'b\"\nwhere \"zero_on f \\<equiv> override_on f (\\<lambda>_. 0)\""], ["", "lemma zero_on_le [simp]: fixes f :: \"'a \\<Rightarrow> 'b :: {preorder, zero}\" shows\n  \"zero_on f X x \\<le> f x \\<longleftrightarrow> (x \\<in> X \\<longrightarrow> 0 \\<le> f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zero_on f X x \\<le> f x) =\n    (x \\<in> X \\<longrightarrow> (0::'b) \\<le> f x)", "by(auto simp add: override_on_def)"], ["", "lemma zero_on_nonneg: fixes f :: \"'a \\<Rightarrow> 'b :: {preorder, zero}\" shows\n  \"0 \\<le> zero_on f X x \\<longleftrightarrow> (x \\<notin> X \\<longrightarrow> 0 \\<le> f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0::'b) \\<le> zero_on f X x) =\n    (x \\<notin> X \\<longrightarrow> (0::'b) \\<le> f x)", "by(auto simp add: override_on_def)"], ["", "lemma sums_zero_on:\n  fixes f :: \"nat \\<Rightarrow> 'a::real_normed_vector\"\n  assumes f: \"f sums s\"\n    and X: \"finite X\"\n  shows \"zero_on f X sums (s - sum f X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero_on f X sums (s - sum f X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. zero_on f X sums (s - sum f X)", "have \"(\\<lambda>x. if x \\<in> X then f x else 0) sums sum (\\<lambda>x. f x) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> X then f x else (0::'a)) sums sum f X", "using X"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> X then f x else (0::'a)) sums sum f X", "by(rule sums_If_finite_set)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> X then f x else (0::'a)) sums sum f X\n\ngoal (1 subgoal):\n 1. zero_on f X sums (s - sum f X)", "from sums_diff[OF f this]"], ["proof (chain)\npicking this:\n  (\\<lambda>n. f n - (if n \\<in> X then f n else (0::'a))) sums\n  (s - sum f X)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. f n - (if n \\<in> X then f n else (0::'a))) sums\n  (s - sum f X)\n\ngoal (1 subgoal):\n 1. zero_on f X sums (s - sum f X)", "by(simp add: sum_negf override_on_def if_distrib cong del: if_weak_cong)"], ["proof (state)\nthis:\n  zero_on f X sums (s - sum f X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  fixes f :: \"nat \\<Rightarrow> 'a::real_normed_vector\"\n  assumes f: \"summable f\"\n  and X: \"finite X\"\n  shows summable_zero_on [simp]: \"summable (zero_on f X)\" (is ?thesis1)\n  and suminf_zero_on: \"suminf (zero_on f X) = suminf f - sum f X\" (is ?thesis2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (zero_on f X) &&& suminf (zero_on f X) = suminf f - sum f X", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (zero_on f X)\n 2. suminf (zero_on f X) = suminf f - sum f X", "from f"], ["proof (chain)\npicking this:\n  summable f", "obtain s where \"f sums s\""], ["proof (prove)\nusing this:\n  summable f\n\ngoal (1 subgoal):\n 1. (\\<And>s. f sums s \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding summable_def"], ["proof (prove)\nusing this:\n  Ex ((sums) f)\n\ngoal (1 subgoal):\n 1. (\\<And>s. f sums s \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  f sums s\n\ngoal (2 subgoals):\n 1. summable (zero_on f X)\n 2. suminf (zero_on f X) = suminf f - sum f X", "with sums_zero_on[OF this X]"], ["proof (chain)\npicking this:\n  zero_on f X sums (s - sum f X)\n  f sums s", "show ?thesis1 ?thesis2"], ["proof (prove)\nusing this:\n  zero_on f X sums (s - sum f X)\n  f sums s\n\ngoal (1 subgoal):\n 1. summable (zero_on f X) &&& suminf (zero_on f X) = suminf f - sum f X", "by(auto simp add: summable_def sums_unique[symmetric])"], ["proof (state)\nthis:\n  summable (zero_on f X)\n  suminf (zero_on f X) = suminf f - sum f X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma summable_zero_on_nonneg:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {ordered_comm_monoid_add,linorder_topology,conditionally_complete_linorder}\"\n  assumes f: \"summable f\"\n  and nonneg: \"\\<And>x. 0 \\<le> f x\"\n  shows \"summable (zero_on f X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (zero_on f X)", "proof(rule summableI_nonneg_bounded)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n\n 2. \\<And>n. sum (zero_on f X) {..<n} \\<le> ?x", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n\n 2. \\<And>n. sum (zero_on f X) {..<n} \\<le> ?x", "have \"sum (zero_on f X) {..<n} \\<le> sum f {..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (zero_on f X) {..<n} \\<le> sum f {..<n}", "by(rule sum_mono)(simp add: nonneg)"], ["proof (state)\nthis:\n  sum (zero_on f X) {..<n} \\<le> sum f {..<n}\n\ngoal (2 subgoals):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n\n 2. \\<And>n. sum (zero_on f X) {..<n} \\<le> ?x", "also"], ["proof (state)\nthis:\n  sum (zero_on f X) {..<n} \\<le> sum f {..<n}\n\ngoal (2 subgoals):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n\n 2. \\<And>n. sum (zero_on f X) {..<n} \\<le> ?x", "have \"\\<dots> \\<le> suminf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<n} \\<le> suminf f", "using f"], ["proof (prove)\nusing this:\n  summable f\n\ngoal (1 subgoal):\n 1. sum f {..<n} \\<le> suminf f", "by(rule sum_le_suminf)(auto simp add: nonneg)"], ["proof (state)\nthis:\n  sum f {..<n} \\<le> suminf f\n\ngoal (2 subgoals):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n\n 2. \\<And>n. sum (zero_on f X) {..<n} \\<le> ?x", "finally"], ["proof (chain)\npicking this:\n  sum (zero_on f X) {..<n} \\<le> suminf f", "show \"sum (zero_on f X) {..<n} \\<le> suminf f\""], ["proof (prove)\nusing this:\n  sum (zero_on f X) {..<n} \\<le> suminf f\n\ngoal (1 subgoal):\n 1. sum (zero_on f X) {..<n} \\<le> suminf f", "."], ["proof (state)\nthis:\n  sum (zero_on f X) {..<n} \\<le> suminf f\n\ngoal (1 subgoal):\n 1. \\<And>n. (0::'a) \\<le> zero_on f X n", "qed(simp add: zero_on_nonneg nonneg)"], ["", "lemma zero_on_ennreal [simp]: \"zero_on (\\<lambda>x. ennreal (f x)) A = (\\<lambda>x. ennreal (zero_on f A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero_on (\\<lambda>x. ennreal (f x)) A =\n    (\\<lambda>x. ennreal (zero_on f A x))", "by(simp add: override_on_def fun_eq_iff)"], ["", "lemma sum_lessThan_conv_atMost_nat:\n  fixes f :: \"nat \\<Rightarrow> 'b :: ab_group_add\"\n  shows \"sum f {..<n} = sum f {..n} - f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {..<n} = sum f {..n} - f n", "by (metis Groups.add_ac(2) add_diff_cancel_left' lessThan_Suc_atMost sum.lessThan_Suc)"], ["", "lemma Collect_disjoint_atLeast:\n  \"Collect P \\<inter> {x..} = {} \\<longleftrightarrow> (\\<forall>y\\<ge>x. \\<not> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Collect P \\<inter> {x..} = {}) = (\\<forall>y\\<ge>x. \\<not> P y)", "by(auto simp add: atLeast_def)"], ["", "lemma bounded_matrix_for_marginals_nat:\n  fixes f g :: \"nat \\<Rightarrow> real\"\n    and R :: \"(nat \\<times> nat) set\"\n    and s :: real\n  assumes sum_f: \"f sums s\" and sum_g: \"g sums s\"\n    and f_nonneg: \"\\<And>x. 0 \\<le> f x\" and g_nonneg: \"\\<And>y. 0 \\<le> g y\"\n    and f_le_g: \"\\<And>X. suminf (zero_on f (- X)) \\<le> suminf (zero_on g (- R `` X))\"\n  obtains h :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"\\<And>x y. 0 \\<le> h x y\"\n    and \"\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x. h x sums f x\"\n    and \"\\<And>y. (\\<lambda>x. h x y) sums g y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have summ_f: \"summable f\" and summ_g: \"summable g\" and sum_fg: \"suminf f = suminf g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable f &&& summable g &&& suminf f = suminf g", "using sum_f sum_g"], ["proof (prove)\nusing this:\n  f sums s\n  g sums s\n\ngoal (1 subgoal):\n 1. summable f &&& summable g &&& suminf f = suminf g", "by(auto simp add: summable_def sums_unique[symmetric])"], ["proof (state)\nthis:\n  summable f\n  summable g\n  suminf f = suminf g\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have summ_zf: \"summable (zero_on f A)\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (zero_on f A)", "using summ_f f_nonneg"], ["proof (prove)\nusing this:\n  summable f\n  0 \\<le> f ?x\n\ngoal (1 subgoal):\n 1. summable (zero_on f A)", "by(rule summable_zero_on_nonneg)"], ["proof (state)\nthis:\n  summable (zero_on f ?A)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have summ_zg: \"summable (zero_on g A)\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (zero_on g A)", "using summ_g g_nonneg"], ["proof (prove)\nusing this:\n  summable g\n  0 \\<le> g ?y\n\ngoal (1 subgoal):\n 1. summable (zero_on g A)", "by(rule summable_zero_on_nonneg)"], ["proof (state)\nthis:\n  summable (zero_on g ?A)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define f' :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"f' n x = (if x \\<le> n then f x else if x = Suc n then \\<Sum> k. f (k + (n + 1)) else 0)\" for n x"], ["proof (state)\nthis:\n  f' ?n ?x =\n  (if ?x \\<le> ?n then f ?x\n   else if ?x = Suc ?n then \\<Sum>k. f (k + (?n + 1)) else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define g' :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"g' n y = (if y \\<le> n then g y else if y = Suc n then \\<Sum> k. g (k + (n + 1)) else 0)\" for n y"], ["proof (state)\nthis:\n  g' ?n ?y =\n  (if ?y \\<le> ?n then g ?y\n   else if ?y = Suc ?n then \\<Sum>k. g (k + (?n + 1)) else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define R' :: \"nat \\<Rightarrow> (nat \\<times> nat) set\"\n    where \"R' n = \n      R \\<inter> {..n} \\<times> {..n} \\<union> \n      {(n + 1, y) | y. \\<exists>x'>n. (x', y) \\<in> R \\<and> y \\<le> n} \\<union>\n      {(x, n + 1) | x. \\<exists>y'>n. (x, y') \\<in> R \\<and> x \\<le> n} \\<union>\n      (if \\<exists>x>n. \\<exists>y>n. (x, y) \\<in> R then {(n + 1, n + 1)} else {})\"\n    for n"], ["proof (state)\nthis:\n  R' ?n =\n  Restr R {..?n} \\<union>\n  {(?n + 1, y) |y.\n   \\<exists>x'>?n. (x', y) \\<in> R \\<and> y \\<le> ?n} \\<union>\n  {(x, ?n + 1) |x.\n   \\<exists>y'>?n. (x, y') \\<in> R \\<and> x \\<le> ?n} \\<union>\n  (if \\<exists>x>?n. \\<exists>y>?n. (x, y) \\<in> R then {(?n + 1, ?n + 1)}\n   else {})\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have R'_simps [simplified, simp]:\n    \"\\<lbrakk> x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R' n \\<longleftrightarrow> (x, y) \\<in> R\"\n    \"y \\<le> n \\<Longrightarrow> (n + 1, y) \\<in> R' n \\<longleftrightarrow> (\\<exists>x'>n. (x', y) \\<in> R)\"\n    \"x \\<le> n \\<Longrightarrow> (x, n + 1) \\<in> R' n \\<longleftrightarrow> (\\<exists>y'>n. (x, y') \\<in> R)\"\n    \"(n + 1, n + 1) \\<in> R' n \\<longleftrightarrow> (\\<exists>x'>n. \\<exists>y'>n. (x', y') \\<in> R)\"\n    \"x > n + 1 \\<or> y > n + 1 \\<Longrightarrow> (x, y) \\<notin> R' n\"\n    for x y n"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n      \\<Longrightarrow> ((x, y) \\<in> R' n) = ((x, y) \\<in> R)) &&&\n     (y \\<le> n \\<Longrightarrow>\n      ((n + 1, y) \\<in> R' n) = (\\<exists>x'>n. (x', y) \\<in> R))) &&&\n    (x \\<le> n \\<Longrightarrow>\n     ((x, n + 1) \\<in> R' n) = (\\<exists>y'>n. (x, y') \\<in> R)) &&&\n    ((n + 1, n + 1) \\<in> R' n) =\n    (\\<exists>x'>n. \\<exists>y'>n. (x', y') \\<in> R) &&&\n    (n + 1 < x \\<or> n + 1 < y \\<Longrightarrow> (x, y) \\<notin> R' n)", "by(auto simp add: R'_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<le> ?n; ?y \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> ((?x, ?y) \\<in> R' ?n) = ((?x, ?y) \\<in> R)\n  ?y \\<le> ?n \\<Longrightarrow>\n  ((Suc ?n, ?y) \\<in> R' ?n) = (\\<exists>x'>?n. (x', ?y) \\<in> R)\n  ?x \\<le> ?n \\<Longrightarrow>\n  ((?x, Suc ?n) \\<in> R' ?n) = (\\<exists>y'>?n. (?x, y') \\<in> R)\n  ((Suc ?n, Suc ?n) \\<in> R' ?n) =\n  (\\<exists>x'>?n. \\<exists>y'>?n. (x', y') \\<in> R)\n  Suc ?n < ?x \\<or> Suc ?n < ?y \\<Longrightarrow> (?x, ?y) \\<notin> R' ?n\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have R'_cases: thesis if \"(x, y) \\<in> R' n\"\n    and \"\\<lbrakk> x \\<le> n; y \\<le> n; (x, y) \\<in> R \\<rbrakk> \\<Longrightarrow> thesis\"\n    and \"\\<And>x'. \\<lbrakk> x = n + 1; y \\<le> n; n < x'; (x', y) \\<in> R \\<rbrakk> \\<Longrightarrow> thesis\"\n    and \"\\<And>y'. \\<lbrakk> x \\<le> n; y = n + 1; n < y'; (x, y') \\<in> R \\<rbrakk> \\<Longrightarrow> thesis\"\n    and \"\\<And>x' y'. \\<lbrakk> x = n + 1; y = n + 1; n < x'; n < y'; (x', y') \\<in> R \\<rbrakk> \\<Longrightarrow> thesis\"\n    for thesis x y n"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R' n\n  \\<lbrakk>x \\<le> n; y \\<le> n; (x, y) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = n + 1; y \\<le> n; n < ?x'; (?x', y) \\<in> R\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x \\<le> n; y = n + 1; n < ?y'; (x, ?y') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>x = n + 1; y = n + 1; n < ?x'; n < ?y';\n   (?x', ?y') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by(auto simp add: R'_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> R' ?n;\n   \\<lbrakk>?x \\<le> ?n; ?y \\<le> ?n; (?x, ?y) \\<in> R\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<And>x'.\n      \\<lbrakk>?x = ?n + 1; ?y \\<le> ?n; ?n < x'; (x', ?y) \\<in> R\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   \\<And>y'.\n      \\<lbrakk>?x \\<le> ?n; ?y = ?n + 1; ?n < y'; (?x, y') \\<in> R\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   \\<And>x' y'.\n      \\<lbrakk>?x = ?n + 1; ?y = ?n + 1; ?n < x'; ?n < y';\n       (x', y') \\<in> R\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have R'_intros:\n    \"\\<lbrakk> (x, y) \\<in> R; x \\<le> n; y \\<le> n \\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R' n\"\n    \"\\<lbrakk> (x', y) \\<in> R; n < x'; y \\<le> n \\<rbrakk> \\<Longrightarrow> (n + 1, y) \\<in> R' n\"\n    \"\\<lbrakk> (x, y') \\<in> R; x \\<le> n; n < y' \\<rbrakk> \\<Longrightarrow> (x, n + 1) \\<in> R' n\"\n    \"\\<lbrakk> (x', y') \\<in> R; n < x'; n < y' \\<rbrakk> \\<Longrightarrow> (n + 1, n + 1) \\<in> R' n\"\n    for n x y x' y'"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>(x, y) \\<in> R; x \\<le> n; y \\<le> n\\<rbrakk>\n      \\<Longrightarrow> (x, y) \\<in> R' n) &&&\n     (\\<lbrakk>(x', y) \\<in> R; n < x'; y \\<le> n\\<rbrakk>\n      \\<Longrightarrow> (n + 1, y) \\<in> R' n)) &&&\n    (\\<lbrakk>(x, y') \\<in> R; x \\<le> n; n < y'\\<rbrakk>\n     \\<Longrightarrow> (x, n + 1) \\<in> R' n) &&&\n    (\\<lbrakk>(x', y') \\<in> R; n < x'; n < y'\\<rbrakk>\n     \\<Longrightarrow> (n + 1, n + 1) \\<in> R' n)", "by(auto)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> R; ?x \\<le> ?n; ?y \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> R' ?n\n  \\<lbrakk>(?x', ?y) \\<in> R; ?n < ?x'; ?y \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> (?n + 1, ?y) \\<in> R' ?n\n  \\<lbrakk>(?x, ?y') \\<in> R; ?x \\<le> ?n; ?n < ?y'\\<rbrakk>\n  \\<Longrightarrow> (?x, ?n + 1) \\<in> R' ?n\n  \\<lbrakk>(?x', ?y') \\<in> R; ?n < ?x'; ?n < ?y'\\<rbrakk>\n  \\<Longrightarrow> (?n + 1, ?n + 1) \\<in> R' ?n\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have Image_R':\n    \"R' n `` X = (R `` (X \\<inter> {..n})) \\<inter> {..n} \\<union> \n    (if n + 1 \\<in> X then (R `` {n+1..}) \\<inter> {..n} else {}) \\<union>\n    (if (R `` (X \\<inter> {..n})) \\<inter> {n+1..} = {} then {} else {n + 1}) \\<union>\n    (if n + 1 \\<in> X \\<and> (R `` {n+1..}) \\<inter> {n+1..} \\<noteq> {} then {n + 1} else {})\" for n X"], ["proof (prove)\ngoal (1 subgoal):\n 1. R' n `` X =\n    R `` (X \\<inter> {..n}) \\<inter> {..n} \\<union>\n    (if n + 1 \\<in> X then R `` {n + 1..} \\<inter> {..n} else {}) \\<union>\n    (if R `` (X \\<inter> {..n}) \\<inter> {n + 1..} = {} then {}\n     else {n + 1}) \\<union>\n    (if n + 1 \\<in> X \\<and> R `` {n + 1..} \\<inter> {n + 1..} \\<noteq> {}\n     then {n + 1} else {})", "apply(simp add: Image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc n \\<in> X \\<longrightarrow>\n     ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n      {Suc n..} =\n      {} \\<longrightarrow>\n      ({y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter>\n       {Suc n..} \\<noteq>\n       {} \\<longrightarrow>\n       {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n       insert (Suc n)\n        ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n         {..n} \\<union>\n         {y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter>\n         {..n})) \\<and>\n      ({y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter> {Suc n..} =\n       {} \\<longrightarrow>\n       {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n       {y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n       {..n} \\<union>\n       {y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter> {..n})) \\<and>\n     ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n      {Suc n..} \\<noteq>\n      {} \\<longrightarrow>\n      ({y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter>\n       {Suc n..} \\<noteq>\n       {} \\<longrightarrow>\n       {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n       insert (Suc n)\n        ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n         {..n} \\<union>\n         {y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter>\n         {..n})) \\<and>\n      ({y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter> {Suc n..} =\n       {} \\<longrightarrow>\n       {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n       insert (Suc n)\n        ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n         {..n} \\<union>\n         {y. \\<exists>x\\<in>{Suc n..}. (x, y) \\<in> R} \\<inter>\n         {..n})))) \\<and>\n    (Suc n \\<notin> X \\<longrightarrow>\n     ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n      {Suc n..} =\n      {} \\<longrightarrow>\n      {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n      {y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n      {..n}) \\<and>\n     ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n      {Suc n..} \\<noteq>\n      {} \\<longrightarrow>\n      {y. \\<exists>x\\<in>X. (x, y) \\<in> R' n} =\n      insert (Suc n)\n       ({y. \\<exists>x\\<in>X \\<inter> {..n}. (x, y) \\<in> R} \\<inter>\n        {..n})))", "apply(safe elim!: R'_cases; auto simp add: Collect_disjoint_atLeast intro: R'_intros simp add: Suc_le_eq dest: Suc_le_lessD)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Suc n \\<in> X;\n        \\<forall>y>n. \\<forall>x\\<in>X \\<inter> {..n}. (x, y) \\<notin> R;\n        n < x; (xa, x) \\<in> R; n < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. (x, Suc n) \\<in> R' n\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>Suc n \\<in> X; n < x; (xa, x) \\<in> R; xa \\<in> X;\n        xa \\<le> n; n < xb; (xc, xb) \\<in> R; n < xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. (x, Suc n) \\<in> R' n\n 3. \\<And>x xa.\n       \\<lbrakk>Suc n \\<in> X; n < x; (xa, x) \\<in> R; xa \\<in> X;\n        xa \\<le> n;\n        \\<forall>y>n. \\<forall>x\\<in>{Suc n..}. (x, y) \\<notin> R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. (x, Suc n) \\<in> R' n\n 4. \\<And>x xa.\n       \\<lbrakk>Suc n \\<notin> X; n < x; (xa, x) \\<in> R; xa \\<in> X;\n        xa \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. (x, Suc n) \\<in> R' n", "apply(metis R'_simps(4) R'_intros(3) Suc_eq_plus1)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  R' ?n `` ?X =\n  R `` (?X \\<inter> {..?n}) \\<inter> {..?n} \\<union>\n  (if ?n + 1 \\<in> ?X then R `` {?n + 1..} \\<inter> {..?n} else {}) \\<union>\n  (if R `` (?X \\<inter> {..?n}) \\<inter> {?n + 1..} = {} then {}\n   else {?n + 1}) \\<union>\n  (if ?n + 1 \\<in> ?X \\<and> R `` {?n + 1..} \\<inter> {?n + 1..} \\<noteq> {}\n   then {?n + 1} else {})\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  R' ?n `` ?X =\n  R `` (?X \\<inter> {..?n}) \\<inter> {..?n} \\<union>\n  (if ?n + 1 \\<in> ?X then R `` {?n + 1..} \\<inter> {..?n} else {}) \\<union>\n  (if R `` (?X \\<inter> {..?n}) \\<inter> {?n + 1..} = {} then {}\n   else {?n + 1}) \\<union>\n  (if ?n + 1 \\<in> ?X \\<and> R `` {?n + 1..} \\<inter> {?n + 1..} \\<noteq> {}\n   then {?n + 1} else {})\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"sum (f' n) {..n + 1} = sum (g' n) {..n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f' n) {..n + 1} = sum (g' n) {..n + 1}", "using sum_fg"], ["proof (prove)\nusing this:\n  suminf f = suminf g\n\ngoal (1 subgoal):\n 1. sum (f' n) {..n + 1} = sum (g' n) {..n + 1}", "unfolding f'_def g'_def suminf_minus_initial_segment[OF summ_f] suminf_minus_initial_segment[OF summ_g]"], ["proof (prove)\nusing this:\n  suminf f = suminf g\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n + 1.\n        if x \\<le> n then f x\n        else if x = Suc n then suminf f - sum f {..<n + 1} else 0) =\n    (\\<Sum>y\\<le>n + 1.\n        if y \\<le> n then g y\n        else if y = Suc n then suminf g - sum g {..<n + 1} else 0)", "by(simp)(metis (no_types, hide_lams) add.commute add.left_inverse atLeast0AtMost atLeast0LessThan atLeastLessThanSuc_atLeastAtMost minus_add_distrib sum.lessThan_Suc uminus_add_conv_diff)"], ["proof (state)\nthis:\n  sum (f' n) {..n + 1} = sum (g' n) {..n + 1}\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  sum (f' n) {..n + 1} = sum (g' n) {..n + 1}\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"sum (f' n) X \\<le> sum (g' n) (R' n `` X)\" if \"X \\<subseteq> {..n + 1}\" for X"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "from that"], ["proof (chain)\npicking this:\n  X \\<subseteq> {..n + 1}", "have [simp]: \"finite X\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {..n + 1}\n\ngoal (1 subgoal):\n 1. finite X", "by(rule finite_subset) simp"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "define X' where \"X' \\<equiv> if n + 1 \\<in> X then X \\<union> {n+1..} else X\""], ["proof (state)\nthis:\n  X' \\<equiv> if n + 1 \\<in> X then X \\<union> {n + 1..} else X\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "define Y' where \"Y' \\<equiv> if R `` X' \\<inter> {n+1..} = {} then R `` X' else R `` X' \\<union> {n+1..}\""], ["proof (state)\nthis:\n  Y' \\<equiv>\n  if R `` X' \\<inter> {n + 1..} = {} then R `` X'\n  else R `` X' \\<union> {n + 1..}\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"sum (f' n) X = sum (f' n) (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f' n) X =\n    sum (f' n) (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0)", "by(simp add: sum.remove)"], ["proof (state)\nthis:\n  sum (f' n) X =\n  sum (f' n) (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0)\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  sum (f' n) X =\n  sum (f' n) (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0)\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"sum (f' n) (X - {n + 1}) = sum f (X - {n + 1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f' n) (X - {n + 1}) = sum f (X - {n + 1})", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> {..n + 1}\n\ngoal (1 subgoal):\n 1. sum (f' n) (X - {n + 1}) = sum f (X - {n + 1})", "by(intro sum.cong)(auto simp add: f'_def)"], ["proof (state)\nthis:\n  sum (f' n) (X - {n + 1}) = sum f (X - {n + 1})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  sum (f' n) (X - {n + 1}) = sum f (X - {n + 1})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> + (if n + 1 \\<in> X then f' n (n + 1) else 0) = suminf (zero_on f (- X'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "proof(cases \"n + 1 \\<in> X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n + 1 \\<in> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))\n 2. n + 1 \\<notin> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "case True"], ["proof (state)\nthis:\n  n + 1 \\<in> X\n\ngoal (2 subgoals):\n 1. n + 1 \\<in> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))\n 2. n + 1 \\<notin> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "with sum_f that"], ["proof (chain)\npicking this:\n  f sums s\n  X \\<subseteq> {..n + 1}\n  n + 1 \\<in> X", "show ?thesis"], ["proof (prove)\nusing this:\n  f sums s\n  X \\<subseteq> {..n + 1}\n  n + 1 \\<in> X\n\ngoal (1 subgoal):\n 1. sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "apply(simp add: summable_def X'_def f'_def suminf_zero_on[OF sums_summable] del: One_nat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f sums s; X \\<subseteq> {..n + 1}; n + 1 \\<in> X\\<rbrakk>\n    \\<Longrightarrow> sum f (X - {n + 1}) + (\\<Sum>k. f (k + (n + 1))) =\n                      suminf f - sum f (- X \\<inter> {..<n + 1})", "apply(subst suminf_minus_initial_segment[OF summ_f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f sums s; X \\<subseteq> {..n + 1}; n + 1 \\<in> X\\<rbrakk>\n    \\<Longrightarrow> sum f (X - {n + 1}) + (suminf f - sum f {..<n + 1}) =\n                      suminf f - sum f (- X \\<inter> {..<n + 1})", "apply(simp add: algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f sums s; X \\<subseteq> {..Suc n}; Suc n \\<in> X\\<rbrakk>\n    \\<Longrightarrow> sum f (X - {Suc n}) +\n                      sum f (- X \\<inter> {..<Suc n}) =\n                      f n + sum f {..<n}", "apply(subst sum.union_disjoint[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f sums s; X \\<subseteq> {..Suc n}; Suc n \\<in> X\\<rbrakk>\n    \\<Longrightarrow> finite (X - {Suc n})\n 2. \\<lbrakk>f sums s; X \\<subseteq> {..Suc n}; Suc n \\<in> X\\<rbrakk>\n    \\<Longrightarrow> finite (- X \\<inter> {..<Suc n})\n 3. \\<lbrakk>f sums s; X \\<subseteq> {..Suc n}; Suc n \\<in> X\\<rbrakk>\n    \\<Longrightarrow> (X - {Suc n}) \\<inter> (- X \\<inter> {..<Suc n}) = {}\n 4. \\<lbrakk>f sums s; X \\<subseteq> {..Suc n}; Suc n \\<in> X\\<rbrakk>\n    \\<Longrightarrow> sum f (X - {Suc n} \\<union> - X \\<inter> {..<Suc n}) =\n                      f n + sum f {..<n}", "apply(auto simp add: sum_lessThan_conv_atMost_nat intro!: sum.cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n  suminf (zero_on f (- X'))\n\ngoal (1 subgoal):\n 1. n + 1 \\<notin> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n + 1 \\<notin> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "case False"], ["proof (state)\nthis:\n  n + 1 \\<notin> X\n\ngoal (1 subgoal):\n 1. n + 1 \\<notin> X \\<Longrightarrow>\n    sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "with sum_f"], ["proof (chain)\npicking this:\n  f sums s\n  n + 1 \\<notin> X", "show ?thesis"], ["proof (prove)\nusing this:\n  f sums s\n  n + 1 \\<notin> X\n\ngoal (1 subgoal):\n 1. sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n    suminf (zero_on f (- X'))", "by(simp add: X'_def suminf_finite[where N=X])"], ["proof (state)\nthis:\n  sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n  suminf (zero_on f (- X'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n  suminf (zero_on f (- X'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  sum f (X - {n + 1}) + (if n + 1 \\<in> X then f' n (n + 1) else 0) =\n  suminf (zero_on f (- X'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> \\<le> suminf (zero_on g (- R `` X'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on f (- X')) \\<le> suminf (zero_on g (- R `` X'))", "by(rule f_le_g)"], ["proof (state)\nthis:\n  suminf (zero_on f (- X')) \\<le> suminf (zero_on g (- R `` X'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  suminf (zero_on f (- X')) \\<le> suminf (zero_on g (- R `` X'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> \\<le> suminf (zero_on g (- Y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on g (- R `` X')) \\<le> suminf (zero_on g (- Y'))", "by(rule suminf_le[OF _ summ_zg summ_zg])(clarsimp simp add: override_on_def g_nonneg Y'_def summ_zg)"], ["proof (state)\nthis:\n  suminf (zero_on g (- R `` X')) \\<le> suminf (zero_on g (- Y'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  suminf (zero_on g (- R `` X')) \\<le> suminf (zero_on g (- Y'))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> = suminf (\\<lambda>k. zero_on g (- Y') (k + (n + 1))) + sum (zero_on g (- Y')) {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on g (- Y')) =\n    (\\<Sum>k. zero_on g (- Y') (k + (n + 1))) + sum (zero_on g (- Y')) {..n}", "by(subst suminf_split_initial_segment[OF summ_zg, of _ \"n + 1\"])(simp add: sum_lessThan_conv_atMost_nat)"], ["proof (state)\nthis:\n  suminf (zero_on g (- Y')) =\n  (\\<Sum>k. zero_on g (- Y') (k + (n + 1))) + sum (zero_on g (- Y')) {..n}\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  suminf (zero_on g (- Y')) =\n  (\\<Sum>k. zero_on g (- Y') (k + (n + 1))) + sum (zero_on g (- Y')) {..n}\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"sum (zero_on g (- Y')) {..n} = sum g (Y' \\<inter> {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (zero_on g (- Y')) {..n} = sum g (Y' \\<inter> {..n})", "by(rule sum.mono_neutral_cong_right)(auto simp add: override_on_def)"], ["proof (state)\nthis:\n  sum (zero_on g (- Y')) {..n} = sum g (Y' \\<inter> {..n})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  sum (zero_on g (- Y')) {..n} = sum g (Y' \\<inter> {..n})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> = sum (g' n) (Y' \\<inter> {..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g (Y' \\<inter> {..n}) = sum (g' n) (Y' \\<inter> {..n})", "by(rule sum.cong)(auto simp add: g'_def)"], ["proof (state)\nthis:\n  sum g (Y' \\<inter> {..n}) = sum (g' n) (Y' \\<inter> {..n})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  sum g (Y' \\<inter> {..n}) = sum (g' n) (Y' \\<inter> {..n})\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"suminf (\\<lambda>k. zero_on g (- Y') (k + (n + 1))) \\<le> (if R `` X' \\<inter> {n+1..} = {} then 0 else g' n (n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. zero_on g (- Y') (k + (n + 1)))\n    \\<le> (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1))", "apply(clarsimp simp add: Y'_def g'_def simp del: One_nat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow>\n    (\\<Sum>k. zero_on g (- R `` X') (k + (n + 1))) \\<le> 0", "apply(subst suminf_eq_zero_iff[THEN iffD2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow>\n    summable (\\<lambda>k. zero_on g (- R `` X') (k + (n + 1)))\n 2. \\<And>na.\n       R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow>\n       0 \\<le> zero_on g (- R `` X') (na + (n + 1))\n 3. R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow>\n    \\<forall>na. zero_on g (- R `` X') (na + (n + 1)) = 0\n 4. R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow> 0 \\<le> 0", "apply(auto simp del: One_nat_def simp add: summable_iff_shift summ_zg zero_on_nonneg g_nonneg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       R `` X' \\<inter> {n + 1..} = {} \\<Longrightarrow>\n       zero_on g (- R `` X') (na + (n + 1)) = 0", "apply(auto simp add: override_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>k. zero_on g (- Y') (k + (n + 1)))\n  \\<le> (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k. zero_on g (- Y') (k + (n + 1)))\n  \\<le> (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1))\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "have \"\\<dots> + sum (g' n) (Y' \\<inter> {..n}) = sum (g' n) (R' n `` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1)) +\n    sum (g' n) (Y' \\<inter> {..n}) =\n    sum (g' n) (R' n `` X)", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> {..n + 1}\n\ngoal (1 subgoal):\n 1. (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1)) +\n    sum (g' n) (Y' \\<inter> {..n}) =\n    sum (g' n) (R' n `` X)", "by(fastforce simp add: Image_R' Y'_def X'_def atMost_Suc intro: sum.cong[OF _ refl])"], ["proof (state)\nthis:\n  (if R `` X' \\<inter> {n + 1..} = {} then 0 else g' n (n + 1)) +\n  sum (g' n) (Y' \\<inter> {..n}) =\n  sum (g' n) (R' n `` X)\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + sum (g' n) (Y' \\<inter> {..n})\n      \\<le> y + sum (g' n) (Y' \\<inter> {..n})) \\<Longrightarrow>\n  sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + sum (g' n) (Y' \\<inter> {..n})\n      \\<le> y + sum (g' n) (Y' \\<inter> {..n})) \\<Longrightarrow>\n  sum (f' n) X \\<le> sum (g' n) (R' n `` X)\n\ngoal (1 subgoal):\n 1. sum (f' n) X \\<le> sum (g' n) (R' n `` X)", "by simp"], ["proof (state)\nthis:\n  sum (f' n) X \\<le> sum (g' n) (R' n `` X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?X \\<subseteq> {..n + 1} \\<Longrightarrow>\n  sum (f' n) ?X \\<le> sum (g' n) (R' n `` ?X)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  ?X \\<subseteq> {..n + 1} \\<Longrightarrow>\n  sum (f' n) ?X \\<le> sum (g' n) (R' n `` ?X)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<And>x. 0 \\<le> f' n x\" \"\\<And>y. 0 \\<le> g' n y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. 0 \\<le> f' n x) &&& (\\<And>y. 0 \\<le> g' n y)", "by(auto simp add: f'_def g'_def f_nonneg g_nonneg summable_iff_shift summ_f summ_g intro!: suminf_nonneg simp del: One_nat_def)"], ["proof (state)\nthis:\n  0 \\<le> f' n ?x\n  0 \\<le> g' n ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  0 \\<le> f' n ?x\n  0 \\<le> g' n ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"R' n \\<subseteq> {..n+1} \\<times> {..n+1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R' n \\<subseteq> {..n + 1} \\<times> {..n + 1}", "by(auto elim!: R'_cases)"], ["proof (state)\nthis:\n  R' n \\<subseteq> {..n + 1} \\<times> {..n + 1}\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  sum (f' n) {..n + 1} = sum (g' n) {..n + 1}\n  ?X \\<subseteq> {..n + 1} \\<Longrightarrow>\n  sum (f' n) ?X \\<le> sum (g' n) (R' n `` ?X)\n  0 \\<le> f' n ?x\n  0 \\<le> g' n ?y\n  R' n \\<subseteq> {..n + 1} \\<times> {..n + 1}", "obtain h \n      where \"\\<And>x y. \\<lbrakk> x \\<le> n + 1; y \\<le> n + 1\\<rbrakk> \\<Longrightarrow> 0 \\<le> h x y\"\n      and \"\\<And>x y. \\<lbrakk> 0 < h x y; x \\<le> n + 1; y \\<le> n + 1\\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R' n\"\n      and \"\\<And>x. x \\<le> n + 1 \\<Longrightarrow> f' n x = sum (h x) {..n + 1}\"\n      and \"\\<And>y. y \\<le> n + 1 \\<Longrightarrow> g' n y = sum (\\<lambda>x. h x y) {..n + 1}\""], ["proof (prove)\nusing this:\n  sum (f' n) {..n + 1} = sum (g' n) {..n + 1}\n  ?X \\<subseteq> {..n + 1} \\<Longrightarrow>\n  sum (f' n) ?X \\<le> sum (g' n) (R' n `` ?X)\n  0 \\<le> f' n ?x\n  0 \\<le> g' n ?y\n  R' n \\<subseteq> {..n + 1} \\<times> {..n + 1}\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y.\n                    \\<lbrakk>x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n                    \\<Longrightarrow> 0 \\<le> h x y;\n         \\<And>x y.\n            \\<lbrakk>0 < h x y; x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n            \\<Longrightarrow> (x, y) \\<in> R' n;\n         \\<And>x.\n            x \\<le> n + 1 \\<Longrightarrow> f' n x = sum (h x) {..n + 1};\n         \\<And>y.\n            y \\<le> n + 1 \\<Longrightarrow>\n            g' n y = (\\<Sum>x\\<le>n + 1. h x y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule bounded_matrix_for_marginals_finite) blast+"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<le> n + 1; ?y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> h ?x ?y\n  \\<lbrakk>0 < h ?x ?y; ?x \\<le> n + 1; ?y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> R' n\n  ?x \\<le> n + 1 \\<Longrightarrow> f' n ?x = sum (h ?x) {..n + 1}\n  ?y \\<le> n + 1 \\<Longrightarrow> g' n ?y = (\\<Sum>x\\<le>n + 1. h x ?y)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"\\<exists>h. (\\<forall>x y. x \\<le> n + 1 \\<longrightarrow> y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h x y) \\<and>\n       (\\<forall>x y. 0 < h x y \\<longrightarrow> x \\<le> n + 1 \\<longrightarrow> y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n       (\\<forall>x. x \\<le> n + 1 \\<longrightarrow> f' n x = sum (h x) {..n + 1}) \\<and>\n       (\\<forall>y. y \\<le> n + 1 \\<longrightarrow> g' n y = sum (\\<lambda>x. h x y) {..n + 1})\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> n + 1; ?y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> h ?x ?y\n  \\<lbrakk>0 < h ?x ?y; ?x \\<le> n + 1; ?y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> R' n\n  ?x \\<le> n + 1 \\<Longrightarrow> f' n ?x = sum (h ?x) {..n + 1}\n  ?y \\<le> n + 1 \\<Longrightarrow> g' n ?y = (\\<Sum>x\\<le>n + 1. h x ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>h.\n       (\\<forall>x y.\n           x \\<le> n + 1 \\<longrightarrow>\n           y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h x y) \\<and>\n       (\\<forall>x y.\n           0 < h x y \\<longrightarrow>\n           x \\<le> n + 1 \\<longrightarrow>\n           y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n       (\\<forall>x\\<le>n + 1. f' n x = sum (h x) {..n + 1}) \\<and>\n       (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h x y))", "by blast"], ["proof (state)\nthis:\n  \\<exists>h.\n     (\\<forall>x y.\n         x \\<le> n + 1 \\<longrightarrow>\n         y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h x y) \\<and>\n     (\\<forall>x y.\n         0 < h x y \\<longrightarrow>\n         x \\<le> n + 1 \\<longrightarrow>\n         y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n     (\\<forall>x\\<le>n + 1. f' n x = sum (h x) {..n + 1}) \\<and>\n     (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h x y))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<exists>h.\n     (\\<forall>x y.\n         x \\<le> ?n2 + 1 \\<longrightarrow>\n         y \\<le> ?n2 + 1 \\<longrightarrow> 0 \\<le> h x y) \\<and>\n     (\\<forall>x y.\n         0 < h x y \\<longrightarrow>\n         x \\<le> ?n2 + 1 \\<longrightarrow>\n         y \\<le> ?n2 + 1 \\<longrightarrow> (x, y) \\<in> R' ?n2) \\<and>\n     (\\<forall>x\\<le>?n2 + 1. f' ?n2 x = sum (h x) {..?n2 + 1}) \\<and>\n     (\\<forall>y\\<le>?n2 + 1. g' ?n2 y = (\\<Sum>x\\<le>?n2 + 1. h x y))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"\\<exists>h. \\<forall>n. (\\<forall>x y. x \\<le> n + 1 \\<longrightarrow> y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n       (\\<forall>x y. 0 < h n x y \\<longrightarrow> x \\<le> n + 1 \\<longrightarrow> y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n       (\\<forall>x. x \\<le> n + 1 \\<longrightarrow> f' n x = sum (h n x) {..n + 1}) \\<and>\n       (\\<forall>y. y \\<le> n + 1 \\<longrightarrow> g' n y = sum (\\<lambda>x. h n x y) {..n + 1})\""], ["proof (prove)\nusing this:\n  \\<exists>h.\n     (\\<forall>x y.\n         x \\<le> ?n2 + 1 \\<longrightarrow>\n         y \\<le> ?n2 + 1 \\<longrightarrow> 0 \\<le> h x y) \\<and>\n     (\\<forall>x y.\n         0 < h x y \\<longrightarrow>\n         x \\<le> ?n2 + 1 \\<longrightarrow>\n         y \\<le> ?n2 + 1 \\<longrightarrow> (x, y) \\<in> R' ?n2) \\<and>\n     (\\<forall>x\\<le>?n2 + 1. f' ?n2 x = sum (h x) {..?n2 + 1}) \\<and>\n     (\\<forall>y\\<le>?n2 + 1. g' ?n2 y = (\\<Sum>x\\<le>?n2 + 1. h x y))\n\ngoal (1 subgoal):\n 1. \\<exists>h.\n       \\<forall>n.\n          (\\<forall>x y.\n              x \\<le> n + 1 \\<longrightarrow>\n              y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n          (\\<forall>x y.\n              0 < h n x y \\<longrightarrow>\n              x \\<le> n + 1 \\<longrightarrow>\n              y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n          (\\<forall>x\\<le>n + 1. f' n x = sum (h n x) {..n + 1}) \\<and>\n          (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h n x y))", "by(subst choice_iff[symmetric]) blast"], ["proof (state)\nthis:\n  \\<exists>h.\n     \\<forall>n.\n        (\\<forall>x y.\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n        (\\<forall>x y.\n            0 < h n x y \\<longrightarrow>\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n        (\\<forall>x\\<le>n + 1. f' n x = sum (h n x) {..n + 1}) \\<and>\n        (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h n x y))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>h.\n     \\<forall>n.\n        (\\<forall>x y.\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n        (\\<forall>x y.\n            0 < h n x y \\<longrightarrow>\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n        (\\<forall>x\\<le>n + 1. f' n x = sum (h n x) {..n + 1}) \\<and>\n        (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h n x y))", "obtain h where h_nonneg: \"\\<And>n x y. \\<lbrakk> x \\<le> n + 1; y \\<le> n + 1\\<rbrakk> \\<Longrightarrow> 0 \\<le> h n x y\"\n    and h_R: \"\\<And>n x y. \\<lbrakk> 0 < h n x y; x \\<le> n + 1; y \\<le> n + 1\\<rbrakk> \\<Longrightarrow> (x, y) \\<in> R' n\"\n    and h_f: \"\\<And>n x. x \\<le> n + 1 \\<Longrightarrow> f' n x = sum (h n x) {..n + 1}\"\n    and h_g: \"\\<And>n y. y \\<le> n + 1 \\<Longrightarrow> g' n y = sum (\\<lambda>x. h n x y) {..n + 1}\""], ["proof (prove)\nusing this:\n  \\<exists>h.\n     \\<forall>n.\n        (\\<forall>x y.\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n        (\\<forall>x y.\n            0 < h n x y \\<longrightarrow>\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n        (\\<forall>x\\<le>n + 1. f' n x = sum (h n x) {..n + 1}) \\<and>\n        (\\<forall>y\\<le>n + 1. g' n y = (\\<Sum>x\\<le>n + 1. h n x y))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>n x y.\n                    \\<lbrakk>x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n                    \\<Longrightarrow> 0 \\<le> h n x y;\n         \\<And>n x y.\n            \\<lbrakk>0 < h n x y; x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n            \\<Longrightarrow> (x, y) \\<in> R' n;\n         \\<And>n x.\n            x \\<le> n + 1 \\<Longrightarrow> f' n x = sum (h n x) {..n + 1};\n         \\<And>n y.\n            y \\<le> n + 1 \\<Longrightarrow>\n            g' n y = (\\<Sum>x\\<le>n + 1. h n x y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply(rule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>h.\n                   \\<lbrakk>\\<And>n x y.\n                               \\<lbrakk>x \\<le> n + 1;\n                                y \\<le> n + 1\\<rbrakk>\n                               \\<Longrightarrow> 0 \\<le> h n x y;\n                    \\<And>n x y.\n                       \\<lbrakk>0 < h n x y; x \\<le> n + 1;\n                        y \\<le> n + 1\\<rbrakk>\n                       \\<Longrightarrow> (x, y) \\<in> R' n;\n                    \\<And>n x.\n                       x \\<le> n + 1 \\<Longrightarrow>\n                       f' n x = sum (h n x) {..n + 1};\n                    \\<And>n y.\n                       y \\<le> n + 1 \\<Longrightarrow>\n                       g' n y = (\\<Sum>x\\<le>n + 1. h n x y)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<forall>n.\n           (\\<forall>xa y.\n               xa \\<le> n + 1 \\<longrightarrow>\n               y \\<le> n + 1 \\<longrightarrow> 0 \\<le> x n xa y) \\<and>\n           (\\<forall>xa y.\n               0 < x n xa y \\<longrightarrow>\n               xa \\<le> n + 1 \\<longrightarrow>\n               y \\<le> n + 1 \\<longrightarrow> (xa, y) \\<in> R' n) \\<and>\n           (\\<forall>xa\\<le>n + 1. f' n xa = sum (x n xa) {..n + 1}) \\<and>\n           (\\<forall>y\\<le>n + 1.\n               g' n y = (\\<Sum>xa\\<le>n + 1. x n xa y))\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal for h"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h.\n                \\<lbrakk>\\<And>n x y.\n                            \\<lbrakk>x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n                            \\<Longrightarrow> 0 \\<le> h n x y;\n                 \\<And>n x y.\n                    \\<lbrakk>0 < h n x y; x \\<le> n + 1;\n                     y \\<le> n + 1\\<rbrakk>\n                    \\<Longrightarrow> (x, y) \\<in> R' n;\n                 \\<And>n x.\n                    x \\<le> n + 1 \\<Longrightarrow>\n                    f' n x = sum (h n x) {..n + 1};\n                 \\<And>n y.\n                    y \\<le> n + 1 \\<Longrightarrow>\n                    g' n y = (\\<Sum>x\\<le>n + 1. h n x y)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>n.\n        (\\<forall>x y.\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> 0 \\<le> h n x y) \\<and>\n        (\\<forall>x y.\n            0 < h n x y \\<longrightarrow>\n            x \\<le> n + 1 \\<longrightarrow>\n            y \\<le> n + 1 \\<longrightarrow> (x, y) \\<in> R' n) \\<and>\n        (\\<forall>x\\<le>n + 1. f' n x = sum (h n x) {..n + 1}) \\<and>\n        (\\<forall>y\\<le>n + 1.\n            g' n y = (\\<Sum>x\\<le>n + 1. h n x y))\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(erule meta_allE[of _ h]) blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<le> ?n + 1; ?y \\<le> ?n + 1\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> h ?n ?x ?y\n  \\<lbrakk>0 < h ?n ?x ?y; ?x \\<le> ?n + 1; ?y \\<le> ?n + 1\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> R' ?n\n  ?x \\<le> ?n + 1 \\<Longrightarrow> f' ?n ?x = sum (h ?n ?x) {..?n + 1}\n  ?y \\<le> ?n + 1 \\<Longrightarrow>\n  g' ?n ?y = (\\<Sum>x\\<le>?n + 1. h ?n x ?y)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define h' :: \"nat \\<Rightarrow> nat \\<times> nat \\<Rightarrow> real\"\n    where \"h' n = (\\<lambda>(x, y). if x \\<le> n \\<and> y \\<le> n then h n x y else 0)\" for n"], ["proof (state)\nthis:\n  h' ?n =\n  (\\<lambda>(x, y). if x \\<le> ?n \\<and> y \\<le> ?n then h ?n x y else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have h'_nonneg: \"h' n xy \\<ge> 0\" for n xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> h' n xy", "by(simp add: h'_def h_nonneg split: prod.split)"], ["proof (state)\nthis:\n  0 \\<le> h' ?n ?xy\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"h' n xy \\<le> s\" for n xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. h' n xy \\<le> s", "proof(cases xy)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. xy = (a, b) \\<Longrightarrow> h' n xy \\<le> s", "case [simp]: (Pair x y)"], ["proof (state)\nthis:\n  xy = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>a b. xy = (a, b) \\<Longrightarrow> h' n xy \\<le> s", "consider (le) \"x \\<le> n\" \"y \\<le> n\" | (beyond) \"x > n \\<or> y > n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     n < x \\<or> n < y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   n < x \\<or> n < y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>a b. xy = (a, b) \\<Longrightarrow> h' n xy \\<le> s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   n < x \\<or> n < y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   n < x \\<or> n < y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. h' n xy \\<le> s", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "case le"], ["proof (state)\nthis:\n  x \\<le> n\n  y \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"h' n xy = h n x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h' n xy = h n x y", "by(simp add: h'_def le)"], ["proof (state)\nthis:\n  h' n xy = h n x y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  h' n xy = h n x y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> \\<le> h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h n x y \\<le> h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1}", "using h_nonneg le"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> ?n + 1; ?y \\<le> ?n + 1\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> h ?n ?x ?y\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. h n x y \\<le> h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1}", "by(auto intro!: sum_nonneg add_nonneg_nonneg)"], ["proof (state)\nthis:\n  h n x y \\<le> h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  h n x y \\<le> h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = sum (h n x) {..y} +  sum (h n x) {y<..n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1} =\n    sum (h n x) {..y} + sum (h n x) {y<..n + 1}", "by(simp add: sum_lessThan_conv_atMost_nat)"], ["proof (state)\nthis:\n  h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1} =\n  sum (h n x) {..y} + sum (h n x) {y<..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  h n x y + sum (h n x) {..<y} + sum (h n x) {y<..n + 1} =\n  sum (h n x) {..y} + sum (h n x) {y<..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = sum (h n x) {..n+1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h n x) {..y} + sum (h n x) {y<..n + 1} = sum (h n x) {..n + 1}", "using le"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. sum (h n x) {..y} + sum (h n x) {y<..n + 1} = sum (h n x) {..n + 1}", "by(subst sum.union_disjoint[symmetric])(auto simp del: One_nat_def intro!: sum.cong)"], ["proof (state)\nthis:\n  sum (h n x) {..y} + sum (h n x) {y<..n + 1} = sum (h n x) {..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  sum (h n x) {..y} + sum (h n x) {y<..n + 1} = sum (h n x) {..n + 1}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = f' n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h n x) {..n + 1} = f' n x", "using le"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. sum (h n x) {..n + 1} = f' n x", "by(simp add: h_f)"], ["proof (state)\nthis:\n  sum (h n x) {..n + 1} = f' n x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  sum (h n x) {..n + 1} = f' n x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' n x = f x", "using le"], ["proof (prove)\nusing this:\n  x \\<le> n\n  y \\<le> n\n\ngoal (1 subgoal):\n 1. f' n x = f x", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  f' n x = f x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  f' n x = f x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = suminf (zero_on f (- {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = suminf (zero_on f (- {x}))", "by(subst suminf_finite[where N=\"{x}\"]) simp_all"], ["proof (state)\nthis:\n  f x = suminf (zero_on f (- {x}))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  f x = suminf (zero_on f (- {x}))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> \\<le> suminf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on f (- {x})) \\<le> suminf f", "by(rule suminf_le)(auto simp add: f_nonneg summ_zf summ_f)"], ["proof (state)\nthis:\n  suminf (zero_on f (- {x})) \\<le> suminf f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  suminf (zero_on f (- {x})) \\<le> suminf f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"\\<dots> = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf f = s", "using sum_f"], ["proof (prove)\nusing this:\n  f sums s\n\ngoal (1 subgoal):\n 1. suminf f = s", "by(simp add: sums_unique[symmetric])"], ["proof (state)\nthis:\n  suminf f = s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> h' n xy \\<le> s\n 2. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "finally"], ["proof (chain)\npicking this:\n  h' n xy \\<le> s", "show ?thesis"], ["proof (prove)\nusing this:\n  h' n xy \\<le> s\n\ngoal (1 subgoal):\n 1. h' n xy \\<le> s", "."], ["proof (state)\nthis:\n  h' n xy \\<le> s\n\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "case beyond"], ["proof (state)\nthis:\n  n < x \\<or> n < y\n\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "then"], ["proof (chain)\npicking this:\n  n < x \\<or> n < y", "have \"h' n xy = 0\""], ["proof (prove)\nusing this:\n  n < x \\<or> n < y\n\ngoal (1 subgoal):\n 1. h' n xy = 0", "by(auto simp add: h'_def)"], ["proof (state)\nthis:\n  h' n xy = 0\n\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "also"], ["proof (state)\nthis:\n  h' n xy = 0\n\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "have \"0 \\<le> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> s", "using summ_f"], ["proof (prove)\nusing this:\n  summable f\n\ngoal (1 subgoal):\n 1. 0 \\<le> s", "by(simp add: sums_unique[OF sum_f] suminf_nonneg f_nonneg)"], ["proof (state)\nthis:\n  0 \\<le> s\n\ngoal (1 subgoal):\n 1. n < x \\<or> n < y \\<Longrightarrow> h' n xy \\<le> s", "finally"], ["proof (chain)\npicking this:\n  h' n xy \\<le> s", "show ?thesis"], ["proof (prove)\nusing this:\n  h' n xy \\<le> s\n\ngoal (1 subgoal):\n 1. h' n xy \\<le> s", "."], ["proof (state)\nthis:\n  h' n xy \\<le> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h' n xy \\<le> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h' ?n ?xy \\<le> s\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  h' ?n ?xy \\<le> s", "have \"bounded (range (\\<lambda>n. h' n x))\" for x"], ["proof (prove)\nusing this:\n  h' ?n ?xy \\<le> s\n\ngoal (1 subgoal):\n 1. bounded (range (\\<lambda>n. h' n x))", "unfolding bounded_def"], ["proof (prove)\nusing this:\n  h' ?n ?xy \\<le> s\n\ngoal (1 subgoal):\n 1. \\<exists>xa e.\n       \\<forall>y\\<in>range (\\<lambda>n. h' n x). dist xa y \\<le> e", "by(intro exI[of _ 0] exI[of _ s]; simp add: h'_nonneg)"], ["proof (state)\nthis:\n  bounded (range (\\<lambda>n. h' n ?x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from convergent_bounded_family[OF this, of UNIV \"%x. x\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>countable UNIV;\n   \\<And>k.\n      \\<lbrakk>strict_mono k;\n       \\<And>x.\n          x \\<in> UNIV \\<Longrightarrow>\n          convergent (\\<lambda>n. h' (k n) x)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain k \n    where k: \"strict_mono k\" and conv: \"\\<And>xy. convergent (\\<lambda>n. h' (k n) xy)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>countable UNIV;\n   \\<And>k.\n      \\<lbrakk>strict_mono k;\n       \\<And>x.\n          x \\<in> UNIV \\<Longrightarrow>\n          convergent (\\<lambda>n. h' (k n) x)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>strict_mono k;\n         \\<And>xy. convergent (\\<lambda>n. h' (k n) xy)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  strict_mono k\n  convergent (\\<lambda>n. h' (k n) ?xy)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define H :: \"nat \\<Rightarrow> nat \\<Rightarrow> real\"\n    where \"H x y = lim (\\<lambda>n. h' (k n) (x, y))\" for x y"], ["proof (state)\nthis:\n  H ?x ?y = lim (\\<lambda>n. h' (k n) (?x, ?y))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have H: \"(\\<lambda>n. h' (k n) (x, y)) \\<longlonglongrightarrow> H x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. h' (k n) (x, y)) \\<longlonglongrightarrow> H x y", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. h' (k n) (x, y))\n    \\<longlonglongrightarrow> lim (\\<lambda>n. h' (k n) (x, y))", "using conv[of \"(x, y)\"]"], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. h' (k n) (x, y))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. h' (k n) (x, y))\n    \\<longlonglongrightarrow> lim (\\<lambda>n. h' (k n) (x, y))", "by(simp add: convergent_LIMSEQ_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n. h' (k n) (?x, ?y)) \\<longlonglongrightarrow> H ?x ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h x y;\n         \\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x. h x sums f x;\n         \\<And>y. (\\<lambda>x. h x y) sums g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof(rule that)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. 0 \\<le> ?h x y\n 2. \\<And>x y. 0 < ?h x y \\<Longrightarrow> (x, y) \\<in> R\n 3. \\<And>x. ?h x sums f x\n 4. \\<And>y. (\\<lambda>x. ?h x y) sums g y", "show H_nonneg: \"0 \\<le> H x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> H x y", "using H[of x y]"], ["proof (prove)\nusing this:\n  (\\<lambda>n. h' (k n) (x, y)) \\<longlonglongrightarrow> H x y\n\ngoal (1 subgoal):\n 1. 0 \\<le> H x y", "by(rule LIMSEQ_le_const)(simp add: h'_nonneg)"], ["proof (state)\nthis:\n  0 \\<le> H ?x ?y\n\ngoal (3 subgoals):\n 1. \\<And>x y. 0 < H (?x8 x y) (?y8 x y) \\<Longrightarrow> (x, y) \\<in> R\n 2. \\<And>x. (\\<lambda>y. H (?x8 x y) (?y8 x y)) sums f x\n 3. \\<And>y. (\\<lambda>x. H (?x8 x y) (?y8 x y)) sums g y", "show \"(x, y) \\<in> R\" if \"0 < H x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> R", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<notin> R \\<Longrightarrow> False", "assume \"(x, y) \\<notin> R\""], ["proof (state)\nthis:\n  (x, y) \\<notin> R\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> R \\<Longrightarrow> False", "hence \"h' n (x, y) = 0\" for n"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> R\n\ngoal (1 subgoal):\n 1. h' n (x, y) = 0", "using h_nonneg[of x n y] h_R[of n x y]"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> R\n  \\<lbrakk>x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> 0 \\<le> h n x y\n  \\<lbrakk>0 < h n x y; x \\<le> n + 1; y \\<le> n + 1\\<rbrakk>\n  \\<Longrightarrow> (x, y) \\<in> R' n\n\ngoal (1 subgoal):\n 1. h' n (x, y) = 0", "by(fastforce simp add: h'_def)"], ["proof (state)\nthis:\n  h' ?n (x, y) = 0\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> R \\<Longrightarrow> False", "hence \"H x y = 0\""], ["proof (prove)\nusing this:\n  h' ?n (x, y) = 0\n\ngoal (1 subgoal):\n 1. H x y = 0", "using H[of x y]"], ["proof (prove)\nusing this:\n  h' ?n (x, y) = 0\n  (\\<lambda>n. h' (k n) (x, y)) \\<longlonglongrightarrow> H x y\n\ngoal (1 subgoal):\n 1. H x y = 0", "by(simp add: LIMSEQ_const_iff)"], ["proof (state)\nthis:\n  H x y = 0\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> R \\<Longrightarrow> False", "with that"], ["proof (chain)\npicking this:\n  0 < H x y\n  H x y = 0", "show False"], ["proof (prove)\nusing this:\n  0 < H x y\n  H x y = 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < H ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>x. H x sums f x\n 2. \\<And>y. (\\<lambda>x. H x y) sums g y", "show \"H x sums f x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. H x sums f x", "unfolding sums_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (H x) \\<and> suminf (H x) = f x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (H x)\n 2. suminf (H x) = f x", "have sum_H: \"sum (H x) {..<m} \\<le> f x\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (H x) {..<m} \\<le> f x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (H x) {..<m} \\<le> f x", "have \"sum (\\<lambda>y. h' (k n) (x, y)) {..<m} \\<le> f x\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "proof(cases \"x \\<le> k n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "case True"], ["proof (state)\nthis:\n  x \\<le> k n\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "from k"], ["proof (chain)\npicking this:\n  strict_mono k", "have \"n \\<le> k n\""], ["proof (prove)\nusing this:\n  strict_mono k\n\ngoal (1 subgoal):\n 1. n \\<le> k n", "by(rule seq_suble)"], ["proof (state)\nthis:\n  n \\<le> k n\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "have \"sum (\\<lambda>y. h' (k n) (x, y)) {..<m} = sum (\\<lambda>y. h' (k n) (x, y)) {..<min m (k n + 1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y<m. h' (k n) (x, y)) =\n    (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))", "by(rule sum.mono_neutral_right)(auto simp add: h'_def min_def)"], ["proof (state)\nthis:\n  (\\<Sum>y<m. h' (k n) (x, y)) = (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "also"], ["proof (state)\nthis:\n  (\\<Sum>y<m. h' (k n) (x, y)) = (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "have \"\\<dots> \\<le> sum (\\<lambda>y. h (k n) x y) {..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n    \\<le> sum (h (k n) x) {..k n + 1}", "using True"], ["proof (prove)\nusing this:\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n    \\<le> sum (h (k n) x) {..k n + 1}", "by(intro sum_le_included[where i=\"id\"])(auto simp add: h'_def h_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n  \\<le> sum (h (k n) x) {..k n + 1}\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "also"], ["proof (state)\nthis:\n  (\\<Sum>y<min m (k n + 1). h' (k n) (x, y))\n  \\<le> sum (h (k n) x) {..k n + 1}\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "have \"\\<dots> = f' (k n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..k n + 1} = f' (k n) x", "using h_f True"], ["proof (prove)\nusing this:\n  ?x \\<le> ?n + 1 \\<Longrightarrow> f' ?n ?x = sum (h ?n ?x) {..?n + 1}\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..k n + 1} = f' (k n) x", "by simp"], ["proof (state)\nthis:\n  sum (h (k n) x) {..k n + 1} = f' (k n) x\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "also"], ["proof (state)\nthis:\n  sum (h (k n) x) {..k n + 1} = f' (k n) x\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "have \"\\<dots> = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (k n) x = f x", "using True"], ["proof (prove)\nusing this:\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. f' (k n) x = f x", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  f' (k n) x = f x\n\ngoal (2 subgoals):\n 1. x \\<le> k n \\<Longrightarrow> (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n 2. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n\ngoal (1 subgoal):\n 1. (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "."], ["proof (state)\nthis:\n  (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<not> x \\<le> k n \\<Longrightarrow>\n    (\\<Sum>y<m. h' (k n) (x, y)) \\<le> f x", "qed(simp add: f_nonneg h'_def)"], ["proof (state)\nthis:\n  (\\<Sum>y<m. h' (k ?n) (x, y)) \\<le> f x\n\ngoal (1 subgoal):\n 1. sum (H x) {..<m} \\<le> f x", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>y<m. h' (k ?n) (x, y)) \\<le> f x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>y<m. h' (k ?n) (x, y)) \\<le> f x\n\ngoal (1 subgoal):\n 1. sum (H x) {..<m} \\<le> f x", "by -((rule LIMSEQ_le_const2 tendsto_sum H)+, simp)"], ["proof (state)\nthis:\n  sum (H x) {..<m} \\<le> f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum (H x) {..<?m} \\<le> f x\n\ngoal (2 subgoals):\n 1. summable (H x)\n 2. suminf (H x) = f x", "with H_nonneg"], ["proof (chain)\npicking this:\n  0 \\<le> H ?x ?y\n  sum (H x) {..<?m} \\<le> f x", "show summ_H: \"summable (H x)\""], ["proof (prove)\nusing this:\n  0 \\<le> H ?x ?y\n  sum (H x) {..<?m} \\<le> f x\n\ngoal (1 subgoal):\n 1. summable (H x)", "by(rule summableI_nonneg_bounded)"], ["proof (state)\nthis:\n  summable (H x)\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "hence \"suminf (H x) \\<le> f x\""], ["proof (prove)\nusing this:\n  summable (H x)\n\ngoal (1 subgoal):\n 1. suminf (H x) \\<le> f x", "using sum_H"], ["proof (prove)\nusing this:\n  summable (H x)\n  sum (H x) {..<?m} \\<le> f x\n\ngoal (1 subgoal):\n 1. suminf (H x) \\<le> f x", "by(rule suminf_le_const)"], ["proof (state)\nthis:\n  suminf (H x) \\<le> f x\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "moreover"], ["proof (state)\nthis:\n  suminf (H x) \\<le> f x\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "have \"(\\<lambda>m. sum (H x) {..<m} + suminf (\\<lambda>n. g (n + m))) \\<longlonglongrightarrow> suminf (H x) + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m. sum (H x) {..<m} + (\\<Sum>n. g (n + m)))\n    \\<longlonglongrightarrow> suminf (H x) + 0", "by(rule tendsto_intros summable_LIMSEQ summ_H suminf_exist_split2 summ_g)+"], ["proof (state)\nthis:\n  (\\<lambda>m. sum (H x) {..<m} + (\\<Sum>n. g (n + m)))\n  \\<longlonglongrightarrow> suminf (H x) + 0\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "hence \"f x \\<le> suminf (H x) + 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>m. sum (H x) {..<m} + (\\<Sum>n. g (n + m)))\n  \\<longlonglongrightarrow> suminf (H x) + 0\n\ngoal (1 subgoal):\n 1. f x \\<le> suminf (H x) + 0", "proof(rule LIMSEQ_le_const)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N. f x \\<le> sum (H x) {..<n} + (\\<Sum>na. g (na + n))", "have \"f x \\<le> sum (H x) {..<m} + suminf (\\<lambda>n. g (n + m))\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "have \"(\\<lambda>n. sum (\\<lambda>y. h' (k n) (x, y)) {..<m} + suminf (\\<lambda>i. g (i + m))) \\<longlonglongrightarrow> sum (H x) {..<m} + suminf (\\<lambda>i. g (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m)))\n    \\<longlonglongrightarrow> sum (H x) {..<m} + (\\<Sum>i. g (i + m))", "by(rule tendsto_intros H)+"], ["proof (state)\nthis:\n  (\\<lambda>n. (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m)))\n  \\<longlonglongrightarrow> sum (H x) {..<m} + (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m)))\n  \\<longlonglongrightarrow> sum (H x) {..<m} + (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "have \"\\<exists>N. \\<forall>n\\<ge>N. f x \\<le> sum (\\<lambda>y. h' (k n) (x, y)) {..<m} + suminf (\\<lambda>i. g (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "proof(intro exI strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "assume \"max x m \\<le> n\""], ["proof (state)\nthis:\n  max x m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "with seq_suble[OF k, of n]"], ["proof (chain)\npicking this:\n  n \\<le> k n\n  max x m \\<le> n", "have x: \"x \\<le> k n\" and m: \"m \\<le> k n\""], ["proof (prove)\nusing this:\n  n \\<le> k n\n  max x m \\<le> n\n\ngoal (1 subgoal):\n 1. x \\<le> k n &&& m \\<le> k n", "by auto"], ["proof (state)\nthis:\n  x \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"f x = f' (k n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = f' (k n) x", "using x"], ["proof (prove)\nusing this:\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. f x = f' (k n) x", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  f x = f' (k n) x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  f x = f' (k n) x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> = sum (h (k n) x) {..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (k n) x = sum (h (k n) x) {..k n + 1}", "using x"], ["proof (prove)\nusing this:\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. f' (k n) x = sum (h (k n) x) {..k n + 1}", "by(simp add: h_f)"], ["proof (state)\nthis:\n  f' (k n) x = sum (h (k n) x) {..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  f' (k n) x = sum (h (k n) x) {..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> = sum (h (k n) x) {..<m} + sum (h (k n) x) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..k n + 1} =\n    sum (h (k n) x) {..<m} + sum (h (k n) x) {m..k n + 1}", "using x m"], ["proof (prove)\nusing this:\n  x \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..k n + 1} =\n    sum (h (k n) x) {..<m} + sum (h (k n) x) {m..k n + 1}", "by(subst sum.union_disjoint[symmetric])(auto intro!: sum.cong simp del: One_nat_def)"], ["proof (state)\nthis:\n  sum (h (k n) x) {..k n + 1} =\n  sum (h (k n) x) {..<m} + sum (h (k n) x) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  sum (h (k n) x) {..k n + 1} =\n  sum (h (k n) x) {..<m} + sum (h (k n) x) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"sum (h (k n) x) {..<m} = sum (\\<lambda>y. h' (k n) (x, y)) {..<m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..<m} = (\\<Sum>y<m. h' (k n) (x, y))", "using x m"], ["proof (prove)\nusing this:\n  x \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum (h (k n) x) {..<m} = (\\<Sum>y<m. h' (k n) (x, y))", "by(auto simp add: h'_def)"], ["proof (state)\nthis:\n  sum (h (k n) x) {..<m} = (\\<Sum>y<m. h' (k n) (x, y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  sum (h (k n) x) {..<m} = (\\<Sum>y<m. h' (k n) (x, y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"sum (h (k n) x) {m..k n + 1} = sum (\\<lambda>y. sum (\\<lambda>x. h (k n) x y) {x}) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (h (k n) x) {m..k n + 1} =\n    (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)", "by simp"], ["proof (state)\nthis:\n  sum (h (k n) x) {m..k n + 1} =\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  sum (h (k n) x) {m..k n + 1} =\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> \\<le> sum (\\<lambda>y. sum (\\<lambda>x. h (k n) x y) {..k n + 1}) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n    \\<le> (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y)", "using x"], ["proof (prove)\nusing this:\n  x \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n    \\<le> (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y)", "by(intro sum_mono sum_mono2)(auto simp add: h_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n  \\<le> (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<in>{x}. h (k n) x y)\n  \\<le> (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> = sum (g' (k n)) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y) =\n    sum (g' (k n)) {m..k n + 1}", "by(simp add: h_g del: One_nat_def)"], ["proof (state)\nthis:\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y) =\n  sum (g' (k n)) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y = m..k n + 1. \\<Sum>x\\<le>k n + 1. h (k n) x y) =\n  sum (g' (k n)) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> = sum g {m..k n} + suminf (\\<lambda>i. g (i + (k n + 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (g' (k n)) {m..k n + 1} =\n    sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1)))", "using m"], ["proof (prove)\nusing this:\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum (g' (k n)) {m..k n + 1} =\n    sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1)))", "by(simp add: g'_def)"], ["proof (state)\nthis:\n  sum (g' (k n)) {m..k n + 1} =\n  sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "also"], ["proof (state)\nthis:\n  sum (g' (k n)) {m..k n + 1} =\n  sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "have \"\\<dots> = suminf (\\<lambda>i. g (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1))) = (\\<Sum>i. g (i + m))", "using m"], ["proof (prove)\nusing this:\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1))) = (\\<Sum>i. g (i + m))", "apply(subst (2) suminf_split_initial_segment[where k=\"k n + 1 - m\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<le> k n \\<Longrightarrow> summable (\\<lambda>i. g (i + m))\n 2. m \\<le> k n \\<Longrightarrow>\n    sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1))) =\n    (\\<Sum>na. g (na + (k n + 1 - m) + m)) +\n    (\\<Sum>i<k n + 1 - m. g (i + m))", "apply(simp_all add: summable_iff_shift summ_g)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> k n \\<Longrightarrow>\n    sum g {m..k n} = (\\<Sum>i<Suc (k n) - m. g (i + m))", "apply(rule sum.reindex_cong[OF _ _ refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<le> k n \\<Longrightarrow>\n    inj_on (\\<lambda>x. x + m) {..<Suc (k n) - m}\n 2. m \\<le> k n \\<Longrightarrow>\n    {m..k n} = (\\<lambda>x. x + m) ` {..<Suc (k n) - m}", "apply(simp_all add: Suc_diff_le lessThan_Suc_atMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> k n \\<Longrightarrow>\n    {m..k n} = (\\<lambda>x. x + m) ` {..k n - m}", "apply(safe; clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<le> x; x \\<le> k n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<lambda>x. x + m) ` {..k n - m}\n 2. \\<And>xa.\n       \\<lbrakk>m \\<le> k n; xa \\<le> k n - m\\<rbrakk>\n       \\<Longrightarrow> xa + m \\<le> k n", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> x; x \\<le> k n\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (\\<lambda>x. x + m) ` {..k n - m}", "by(rule image_eqI[where x=\"x - m\"]) auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>m \\<le> k n; xa \\<le> k n - m\\<rbrakk>\n       \\<Longrightarrow> xa + m \\<le> k n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> k n; xa_ \\<le> k n - m\\<rbrakk>\n    \\<Longrightarrow> xa_ + m \\<le> k n", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum g {m..k n} + (\\<Sum>i. g (i + (k n + 1))) = (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "finally"], ["proof (chain)\npicking this:\n  (\\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      (\\<Sum>y<m. h' (k n) (x, y)) + xa\n      \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + y) \\<Longrightarrow>\n  f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "show \"f x \\<le> sum (\\<lambda>y. h' (k n) (x, y)) {..<m} + \\<dots>\""], ["proof (prove)\nusing this:\n  (\\<And>xa y.\n      xa \\<le> y \\<Longrightarrow>\n      (\\<Sum>y<m. h' (k n) (x, y)) + xa\n      \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + y) \\<Longrightarrow>\n  f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "by simp"], ["proof (state)\nthis:\n  f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m)))\n  \\<longlonglongrightarrow> sum (H x) {..<m} + (\\<Sum>i. g (i + m))\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m)))\n  \\<longlonglongrightarrow> sum (H x) {..<m} + (\\<Sum>i. g (i + m))\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        f x \\<le> (\\<Sum>y<m. h' (k n) (x, y)) + (\\<Sum>i. g (i + m))\n\ngoal (1 subgoal):\n 1. f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))", "by(rule LIMSEQ_le_const)"], ["proof (state)\nthis:\n  f x \\<le> sum (H x) {..<m} + (\\<Sum>n. g (n + m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x \\<le> sum (H x) {..<?m} + (\\<Sum>n. g (n + ?m))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N. f x \\<le> sum (H x) {..<n} + (\\<Sum>na. g (na + n))", "thus \"\\<exists>N. \\<forall>n\\<ge>N. f x \\<le> sum (H x) {..<n} + (\\<Sum>i. g (i + n))\""], ["proof (prove)\nusing this:\n  f x \\<le> sum (H x) {..<?m} + (\\<Sum>n. g (n + ?m))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N. f x \\<le> sum (H x) {..<n} + (\\<Sum>i. g (i + n))", "by auto"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n\\<ge>N. f x \\<le> sum (H x) {..<n} + (\\<Sum>i. g (i + n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x \\<le> suminf (H x) + 0\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "ultimately"], ["proof (chain)\npicking this:\n  suminf (H x) \\<le> f x\n  f x \\<le> suminf (H x) + 0", "show \"suminf (H x) = f x\""], ["proof (prove)\nusing this:\n  suminf (H x) \\<le> f x\n  f x \\<le> suminf (H x) + 0\n\ngoal (1 subgoal):\n 1. suminf (H x) = f x", "by simp"], ["proof (state)\nthis:\n  suminf (H x) = f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H ?x sums f ?x\n\ngoal (1 subgoal):\n 1. \\<And>y. (\\<lambda>x. H x y) sums g y", "show \"(\\<lambda>x. H x y) sums g y\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. H x y) sums g y", "unfolding sums_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. H x y) \\<and> (\\<Sum>x. H x y) = g y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>x. H x y)\n 2. (\\<Sum>x. H x y) = g y", "have sum_H: \"sum (\\<lambda>x. H x y) {..<m} \\<le> g y\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. H x y) \\<le> g y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. H x y) \\<le> g y", "have \"sum (\\<lambda>x. h' (k n) (x, y)) {..<m} \\<le> g y\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "proof(cases \"y \\<le> k n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "case True"], ["proof (state)\nthis:\n  y \\<le> k n\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "from k"], ["proof (chain)\npicking this:\n  strict_mono k", "have \"n \\<le> k n\""], ["proof (prove)\nusing this:\n  strict_mono k\n\ngoal (1 subgoal):\n 1. n \\<le> k n", "by(rule seq_suble)"], ["proof (state)\nthis:\n  n \\<le> k n\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "have \"sum (\\<lambda>x. h' (k n) (x, y)) {..<m} = sum (\\<lambda>x. h' (k n) (x, y)) {..<min m (k n + 1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. h' (k n) (x, y)) =\n    (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))", "by(rule sum.mono_neutral_right)(auto simp add: h'_def min_def)"], ["proof (state)\nthis:\n  (\\<Sum>x<m. h' (k n) (x, y)) = (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>x<m. h' (k n) (x, y)) = (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "have \"\\<dots> \\<le> sum (\\<lambda>x. h (k n) x y) {..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n    \\<le> (\\<Sum>x\\<le>k n + 1. h (k n) x y)", "using True"], ["proof (prove)\nusing this:\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n    \\<le> (\\<Sum>x\\<le>k n + 1. h (k n) x y)", "by(intro sum_le_included[where i=\"id\"])(auto simp add: h'_def h_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n  \\<le> (\\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>x<min m (k n + 1). h' (k n) (x, y))\n  \\<le> (\\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "have \"\\<dots> = g' (k n) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>k n + 1. h (k n) x y) = g' (k n) y", "using h_g True"], ["proof (prove)\nusing this:\n  ?y \\<le> ?n + 1 \\<Longrightarrow>\n  g' ?n ?y = (\\<Sum>x\\<le>?n + 1. h ?n x ?y)\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>k n + 1. h (k n) x y) = g' (k n) y", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>k n + 1. h (k n) x y) = g' (k n) y\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>k n + 1. h (k n) x y) = g' (k n) y\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "have \"\\<dots> = g y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (k n) y = g y", "using True"], ["proof (prove)\nusing this:\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. g' (k n) y = g y", "by(simp add: g'_def)"], ["proof (state)\nthis:\n  g' (k n) y = g y\n\ngoal (2 subgoals):\n 1. y \\<le> k n \\<Longrightarrow> (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n 2. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "."], ["proof (state)\nthis:\n  (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> k n \\<Longrightarrow>\n    (\\<Sum>x<m. h' (k n) (x, y)) \\<le> g y", "qed(simp add: g_nonneg h'_def)"], ["proof (state)\nthis:\n  (\\<Sum>x<m. h' (k ?n) (x, y)) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. H x y) \\<le> g y", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x<m. h' (k ?n) (x, y)) \\<le> g y", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x<m. h' (k ?n) (x, y)) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. H x y) \\<le> g y", "by -((rule LIMSEQ_le_const2 tendsto_sum H)+, simp)"], ["proof (state)\nthis:\n  (\\<Sum>x<m. H x y) \\<le> g y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x<?m. H x y) \\<le> g y\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>x. H x y)\n 2. (\\<Sum>x. H x y) = g y", "with H_nonneg"], ["proof (chain)\npicking this:\n  0 \\<le> H ?x ?y\n  (\\<Sum>x<?m. H x y) \\<le> g y", "show summ_H: \"summable (\\<lambda>x. H x  y)\""], ["proof (prove)\nusing this:\n  0 \\<le> H ?x ?y\n  (\\<Sum>x<?m. H x y) \\<le> g y\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. H x y)", "by(rule summableI_nonneg_bounded)"], ["proof (state)\nthis:\n  summable (\\<lambda>x. H x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "hence \"suminf (\\<lambda>x. H x y) \\<le> g y\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. H x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) \\<le> g y", "using sum_H"], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. H x y)\n  (\\<Sum>x<?m. H x y) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) \\<le> g y", "by(rule suminf_le_const)"], ["proof (state)\nthis:\n  (\\<Sum>x. H x y) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>x. H x y) \\<le> g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "have \"(\\<lambda>m. sum (\\<lambda>x. H x y) {..<m} + suminf (\\<lambda>n. f (n + m))) \\<longlonglongrightarrow> suminf (\\<lambda>x. H x y) + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m. (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m)))\n    \\<longlonglongrightarrow> (\\<Sum>x. H x y) + 0", "by(rule tendsto_intros summable_LIMSEQ summ_H suminf_exist_split2 summ_f)+"], ["proof (state)\nthis:\n  (\\<lambda>m. (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x. H x y) + 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "hence \"g y \\<le> suminf (\\<lambda>x. H x y) + 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>m. (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x. H x y) + 0\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x. H x y) + 0", "proof(rule LIMSEQ_le_const)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          g y \\<le> (\\<Sum>x<n. H x y) + (\\<Sum>na. f (na + n))", "have \"g y \\<le> sum (\\<lambda>x. H x y) {..<m} + suminf (\\<lambda>n. f (n + m))\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "have \"(\\<lambda>n. sum (\\<lambda>x. h' (k n) (x, y)) {..<m} + suminf (\\<lambda>i. f (i + m))) \\<longlonglongrightarrow> sum (\\<lambda>x. H x y) {..<m} + suminf (\\<lambda>i. f (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m)))\n    \\<longlonglongrightarrow> (\\<Sum>x<m. H x y) + (\\<Sum>i. f (i + m))", "by(rule tendsto_intros H)+"], ["proof (state)\nthis:\n  (\\<lambda>n. (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x<m. H x y) + (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x<m. H x y) + (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "have \"\\<exists>N. \\<forall>n\\<ge>N. g y \\<le> sum (\\<lambda>x. h' (k n) (x, y)) {..<m} + suminf (\\<lambda>i. f (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "proof(intro exI strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "assume \"max y m \\<le> n\""], ["proof (state)\nthis:\n  max y m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "with seq_suble[OF k, of n]"], ["proof (chain)\npicking this:\n  n \\<le> k n\n  max y m \\<le> n", "have y: \"y \\<le> k n\" and m: \"m \\<le> k n\""], ["proof (prove)\nusing this:\n  n \\<le> k n\n  max y m \\<le> n\n\ngoal (1 subgoal):\n 1. y \\<le> k n &&& m \\<le> k n", "by auto"], ["proof (state)\nthis:\n  y \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"g y = g' (k n) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g y = g' (k n) y", "using y"], ["proof (prove)\nusing this:\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. g y = g' (k n) y", "by(simp add: g'_def)"], ["proof (state)\nthis:\n  g y = g' (k n) y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  g y = g' (k n) y\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> = sum (\\<lambda>x. h (k n) x y) {..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (k n) y = (\\<Sum>x\\<le>k n + 1. h (k n) x y)", "using y"], ["proof (prove)\nusing this:\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. g' (k n) y = (\\<Sum>x\\<le>k n + 1. h (k n) x y)", "by(simp add: h_g)"], ["proof (state)\nthis:\n  g' (k n) y = (\\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  g' (k n) y = (\\<Sum>x\\<le>k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> = sum (\\<lambda>x. h (k n) x y) {..<m} + sum (\\<lambda>x. h (k n) x y) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>k n + 1. h (k n) x y) =\n    (\\<Sum>x<m. h (k n) x y) + (\\<Sum>x = m..k n + 1. h (k n) x y)", "using y m"], ["proof (prove)\nusing this:\n  y \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>k n + 1. h (k n) x y) =\n    (\\<Sum>x<m. h (k n) x y) + (\\<Sum>x = m..k n + 1. h (k n) x y)", "by(subst sum.union_disjoint[symmetric])(auto intro!: sum.cong simp del: One_nat_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>k n + 1. h (k n) x y) =\n  (\\<Sum>x<m. h (k n) x y) + (\\<Sum>x = m..k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>k n + 1. h (k n) x y) =\n  (\\<Sum>x<m. h (k n) x y) + (\\<Sum>x = m..k n + 1. h (k n) x y)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"sum (\\<lambda>x. h (k n) x y) {..<m} = sum (\\<lambda>x. h' (k n) (x, y)) {..<m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. h (k n) x y) = (\\<Sum>x<m. h' (k n) (x, y))", "using y m"], ["proof (prove)\nusing this:\n  y \\<le> k n\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x<m. h (k n) x y) = (\\<Sum>x<m. h' (k n) (x, y))", "by(auto simp add: h'_def)"], ["proof (state)\nthis:\n  (\\<Sum>x<m. h (k n) x y) = (\\<Sum>x<m. h' (k n) (x, y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x<m. h (k n) x y) = (\\<Sum>x<m. h' (k n) (x, y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"sum (\\<lambda>x. h (k n) x y) {m..k n + 1} = sum (\\<lambda>x. sum (\\<lambda>y. h (k n) x y) {y}) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = m..k n + 1. h (k n) x y) =\n    (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. h (k n) x y) =\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. h (k n) x y) =\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> \\<le> sum (\\<lambda>x. sum (\\<lambda>y. h (k n) x y) {..k n + 1}) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n    \\<le> (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1})", "using y"], ["proof (prove)\nusing this:\n  y \\<le> k n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n    \\<le> (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1})", "by(intro sum_mono sum_mono2)(auto simp add: h_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n  \\<le> (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {y})\n  \\<le> (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> = sum (f' (k n)) {m..k n + 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1}) =\n    sum (f' (k n)) {m..k n + 1}", "by(simp add: h_f del: One_nat_def)"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1}) =\n  sum (f' (k n)) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x = m..k n + 1. sum (h (k n) x) {..k n + 1}) =\n  sum (f' (k n)) {m..k n + 1}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> = sum f {m..k n} + suminf (\\<lambda>i. f (i + (k n + 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f' (k n)) {m..k n + 1} =\n    sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1)))", "using m"], ["proof (prove)\nusing this:\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum (f' (k n)) {m..k n + 1} =\n    sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1)))", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  sum (f' (k n)) {m..k n + 1} =\n  sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "also"], ["proof (state)\nthis:\n  sum (f' (k n)) {m..k n + 1} =\n  sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "have \"\\<dots> = suminf (\\<lambda>i. f (i + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1))) = (\\<Sum>i. f (i + m))", "using m"], ["proof (prove)\nusing this:\n  m \\<le> k n\n\ngoal (1 subgoal):\n 1. sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1))) = (\\<Sum>i. f (i + m))", "apply(subst (2) suminf_split_initial_segment[where k=\"k n + 1 - m\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<le> k n \\<Longrightarrow> summable (\\<lambda>i. f (i + m))\n 2. m \\<le> k n \\<Longrightarrow>\n    sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1))) =\n    (\\<Sum>na. f (na + (k n + 1 - m) + m)) +\n    (\\<Sum>i<k n + 1 - m. f (i + m))", "apply(simp_all add: summable_iff_shift summ_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> k n \\<Longrightarrow>\n    sum f {m..k n} = (\\<Sum>i<Suc (k n) - m. f (i + m))", "apply(rule sum.reindex_cong[OF _ _ refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<le> k n \\<Longrightarrow>\n    inj_on (\\<lambda>x. x + m) {..<Suc (k n) - m}\n 2. m \\<le> k n \\<Longrightarrow>\n    {m..k n} = (\\<lambda>x. x + m) ` {..<Suc (k n) - m}", "apply(simp_all add: Suc_diff_le lessThan_Suc_atMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> k n \\<Longrightarrow>\n    {m..k n} = (\\<lambda>x. x + m) ` {..k n - m}", "apply(safe; clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<le> x; x \\<le> k n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<lambda>x. x + m) ` {..k n - m}\n 2. \\<And>xa.\n       \\<lbrakk>m \\<le> k n; xa \\<le> k n - m\\<rbrakk>\n       \\<Longrightarrow> xa + m \\<le> k n", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> x; x \\<le> k n\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (\\<lambda>x. x + m) ` {..k n - m}", "by(rule image_eqI[where x=\"x - m\"]) auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>m \\<le> k n; xa \\<le> k n - m\\<rbrakk>\n       \\<Longrightarrow> xa + m \\<le> k n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> k n; xa_ \\<le> k n - m\\<rbrakk>\n    \\<Longrightarrow> xa_ + m \\<le> k n", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum f {m..k n} + (\\<Sum>i. f (i + (k n + 1))) = (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N \\<le> n \\<Longrightarrow>\n       g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x ya.\n      x \\<le> ya \\<Longrightarrow>\n      (\\<Sum>x<m. h' (k n) (x, y)) + x\n      \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + ya) \\<Longrightarrow>\n  g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "show \"g y \\<le> sum (\\<lambda>x. h' (k n) (x, y)) {..<m} + \\<dots>\""], ["proof (prove)\nusing this:\n  (\\<And>x ya.\n      x \\<le> ya \\<Longrightarrow>\n      (\\<Sum>x<m. h' (k n) (x, y)) + x\n      \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + ya) \\<Longrightarrow>\n  g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "by simp"], ["proof (state)\nthis:\n  g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x<m. H x y) + (\\<Sum>i. f (i + m))\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m)))\n  \\<longlonglongrightarrow> (\\<Sum>x<m. H x y) + (\\<Sum>i. f (i + m))\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        g y \\<le> (\\<Sum>x<m. h' (k n) (x, y)) + (\\<Sum>i. f (i + m))\n\ngoal (1 subgoal):\n 1. g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))", "by(rule LIMSEQ_le_const)"], ["proof (state)\nthis:\n  g y \\<le> (\\<Sum>x<m. H x y) + (\\<Sum>n. f (n + m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g y \\<le> (\\<Sum>x<?m. H x y) + (\\<Sum>n. f (n + ?m))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          g y \\<le> (\\<Sum>x<n. H x y) + (\\<Sum>na. f (na + n))", "thus \"\\<exists>N. \\<forall>n\\<ge>N. g y \\<le> sum (\\<lambda>x. H x y) {..<n} + (\\<Sum>i. f (i + n))\""], ["proof (prove)\nusing this:\n  g y \\<le> (\\<Sum>x<?m. H x y) + (\\<Sum>n. f (n + ?m))\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N. g y \\<le> (\\<Sum>x<n. H x y) + (\\<Sum>i. f (i + n))", "by auto"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n\\<ge>N. g y \\<le> (\\<Sum>x<n. H x y) + (\\<Sum>i. f (i + n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g y \\<le> (\\<Sum>x. H x y) + 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>x. H x y) \\<le> g y\n  g y \\<le> (\\<Sum>x. H x y) + 0", "show \"suminf (\\<lambda>x. H x y) = g y\""], ["proof (prove)\nusing this:\n  (\\<Sum>x. H x y) \\<le> g y\n  g y \\<le> (\\<Sum>x. H x y) + 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. H x y) = g y", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x. H x y) = g y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. H x ?y) sums g ?y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bounded_matrix_for_marginals_ennreal:\n  assumes sum_eq: \"(\\<Sum>\\<^sup>+ x\\<in>A. f x) = (\\<Sum>\\<^sup>+ y\\<in>B. g y)\"\n    and finite: \"(\\<Sum>\\<^sup>+ x\\<in>B. g x) \\<noteq> \\<top>\"\n    and le: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>X. f x) \\<le> (\\<Sum>\\<^sup>+ y\\<in>R `` X. g y)\"\n    and countable [simp]: \"countable A\" \"countable B\"\n    and R: \"R \\<subseteq> A \\<times> B\"\n  obtains h where \"\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R\"\n    and \"\\<And>x y. h x y \\<noteq> \\<top>\"\n    and \"\\<And>x. x \\<in> A \\<Longrightarrow> (\\<Sum>\\<^sup>+ y\\<in>B. h x y) = f x\"\n    and \"\\<And>y. y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have fin_g [simp]: \"g y \\<noteq> \\<top>\" if \"y \\<in> B\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. g y \\<noteq> \\<top>", "using finite"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space B) g \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. g y \\<noteq> \\<top>", "by(rule neq_top_trans)(rule nn_integral_ge_point[OF that])"], ["proof (state)\nthis:\n  ?y \\<in> B \\<Longrightarrow> g ?y \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have fin_f [simp]: \"f x \\<noteq> \\<top>\" if \"x \\<in> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<noteq> \\<top>", "using finite"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space B) g \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. f x \\<noteq> \\<top>", "unfolding sum_eq[symmetric]"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space A) f \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. f x \\<noteq> \\<top>", "by(rule neq_top_trans)(rule nn_integral_ge_point[OF that])"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> f ?x \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define f' where \"f' x = (if x \\<in> to_nat_on A ` A then enn2real (f (from_nat_into A x)) else 0)\" for x"], ["proof (state)\nthis:\n  f' ?x =\n  (if ?x \\<in> to_nat_on A ` A then enn2real (f (from_nat_into A ?x))\n   else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define g' where \"g' y = (if y \\<in> to_nat_on B ` B then enn2real (g (from_nat_into B y)) else 0)\" for y"], ["proof (state)\nthis:\n  g' ?y =\n  (if ?y \\<in> to_nat_on B ` B then enn2real (g (from_nat_into B ?y))\n   else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define s where \"s = enn2real (\\<Sum>\\<^sup>+ x\\<in>B. g x)\""], ["proof (state)\nthis:\n  s = enn2real (integral\\<^sup>N (count_space B) g)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define R' where \"R' = map_prod (to_nat_on A) (to_nat_on B) ` R\""], ["proof (state)\nthis:\n  R' = map_prod (to_nat_on A) (to_nat_on B) ` R\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have f'_nonneg: \"f' x \\<ge> 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> f' x", "by(simp add: f'_def)"], ["proof (state)\nthis:\n  0 \\<le> f' ?x\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have g'_nonneg: \"g' y \\<ge> 0\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> g' y", "by(simp add: g'_def)"], ["proof (state)\nthis:\n  0 \\<le> g' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"(\\<Sum>\\<^sup>+ x. f' x) = (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal (f' x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (f' x))", "by(auto simp add: nn_integral_count_space_indicator f'_def intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>A. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (f' x)) =\n    integral\\<^sup>N (count_space A) f", "by(subst nn_integral_count_space_reindex)(auto simp add: inj_on_to_nat_on f'_def ennreal_enn2real_if intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (f' x)) =\n  integral\\<^sup>N (count_space A) f\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f", "have sum_f': \"(\\<Sum>\\<^sup>+ x. f' x) = (\\<Sum>\\<^sup>+ x\\<in>A. f x)\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"(\\<Sum>\\<^sup>+ y. g' y) = (\\<Sum>\\<^sup>+ y\\<in>to_nat_on B ` B. g' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal (g' x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` B. ennreal (g' x))", "by(auto simp add: nn_integral_count_space_indicator g'_def intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` B. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` B. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y\\<in>B. g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` B. ennreal (g' x)) =\n    integral\\<^sup>N (count_space B) g", "by(subst nn_integral_count_space_reindex)(auto simp add: inj_on_to_nat_on g'_def ennreal_enn2real_if intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` B. ennreal (g' x)) =\n  integral\\<^sup>N (count_space B) g\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g", "have sum_g': \"(\\<Sum>\\<^sup>+ y. g' y) = (\\<Sum>\\<^sup>+ y\\<in>B. g y)\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have summ_f': \"summable f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable f'", "proof(rule summableI_nonneg_bounded)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> f' n\n 2. \\<And>n. sum f' {..<n} \\<le> ?x", "show \"sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. f' x)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "have \"sum f' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))", "by(simp add: nn_integral_count_space_finite f'_nonneg sum_nonneg)"], ["proof (state)\nthis:\n  sum f' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "also"], ["proof (state)\nthis:\n  sum f' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "have \"enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. f' x) \\<le> enn2real (\\<Sum>\\<^sup>+ x. f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))\n    \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "using finite sum_eq[symmetric]"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space B) g \\<noteq> \\<top>\n  integral\\<^sup>N (count_space B) g = integral\\<^sup>N (count_space A) f\n\ngoal (1 subgoal):\n 1. enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))\n    \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "by(auto simp add: nn_integral_count_space_indicator sum_f'[symmetric] less_top intro!: nn_integral_mono enn2real_mono split: split_indicator)"], ["proof (state)\nthis:\n  enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (f' x))\n  \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "finally"], ["proof (chain)\npicking this:\n  sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "show ?thesis"], ["proof (prove)\nusing this:\n  sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "."], ["proof (state)\nthis:\n  sum f' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum f' {..<?n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 \\<le> f' n", "qed(rule f'_nonneg)"], ["proof (state)\nthis:\n  summable f'\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have suminf_f': \"suminf f' = enn2real (\\<Sum>\\<^sup>+ y. f' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf f' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "by(simp add: nn_integral_count_space_nat suminf_ennreal2[OF f'_nonneg summ_f'] suminf_nonneg[OF summ_f'] f'_nonneg)"], ["proof (state)\nthis:\n  suminf f' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with summ_f' sum_f' sum_eq"], ["proof (chain)\npicking this:\n  summable f'\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f\n  integral\\<^sup>N (count_space A) f = integral\\<^sup>N (count_space B) g\n  suminf f' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))", "have sums_f: \"f' sums s\""], ["proof (prove)\nusing this:\n  summable f'\n  (\\<Sum>\\<^sup>+ x. ennreal (f' x)) = integral\\<^sup>N (count_space A) f\n  integral\\<^sup>N (count_space A) f = integral\\<^sup>N (count_space B) g\n  suminf f' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. f' sums s", "by(simp add: s_def sums_iff)"], ["proof (state)\nthis:\n  f' sums s\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  f' sums s\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have summ_g': \"summable g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable g'", "proof(rule summableI_nonneg_bounded)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> g' n\n 2. \\<And>n. sum g' {..<n} \\<le> ?x", "show \"sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ y. g' y)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "have \"sum g' {..<n} = enn2real (\\<Sum>\\<^sup>+ y\\<in>{..<n}. g' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum g' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))", "by(simp add: nn_integral_count_space_finite g'_nonneg sum_nonneg)"], ["proof (state)\nthis:\n  sum g' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "also"], ["proof (state)\nthis:\n  sum g' {..<n} = enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "have \"enn2real (\\<Sum>\\<^sup>+ y\\<in>{..<n}. g' y) \\<le> enn2real (\\<Sum>\\<^sup>+ y. g' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))\n    \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "using finite"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space B) g \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))\n    \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "by(auto simp add: nn_integral_count_space_indicator sum_g'[symmetric] less_top intro!: nn_integral_mono enn2real_mono split: split_indicator)"], ["proof (state)\nthis:\n  enn2real (\\<Sum>\\<^sup>+ x\\<in>{..<n}. ennreal (g' x))\n  \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "finally"], ["proof (chain)\npicking this:\n  sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "show ?thesis"], ["proof (prove)\nusing this:\n  sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "."], ["proof (state)\nthis:\n  sum g' {..<n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum g' {..<?n} \\<le> enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 \\<le> g' n", "qed(rule g'_nonneg)"], ["proof (state)\nthis:\n  summable g'\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have suminf_g': \"suminf g' = enn2real (\\<Sum>\\<^sup>+ y. g' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf g' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "by(simp add: nn_integral_count_space_nat suminf_ennreal2[OF g'_nonneg summ_g'] suminf_nonneg[OF summ_g'] g'_nonneg)"], ["proof (state)\nthis:\n  suminf g' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with summ_g' sum_g'"], ["proof (chain)\npicking this:\n  summable g'\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g\n  suminf g' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))", "have sums_g: \"g' sums s\""], ["proof (prove)\nusing this:\n  summable g'\n  (\\<Sum>\\<^sup>+ x. ennreal (g' x)) = integral\\<^sup>N (count_space B) g\n  suminf g' = enn2real (\\<Sum>\\<^sup>+ x. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. g' sums s", "by(simp add: s_def sums_iff)"], ["proof (state)\nthis:\n  g' sums s\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  g' sums s\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note f'_nonneg g'_nonneg"], ["proof (state)\nthis:\n  0 \\<le> f' ?x\n  0 \\<le> g' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  0 \\<le> f' ?x\n  0 \\<le> g' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))\" for X"], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "define X' where \"X' = from_nat_into A ` (X \\<inter> to_nat_on A ` A)\""], ["proof (state)\nthis:\n  X' = from_nat_into A ` (X \\<inter> to_nat_on A ` A)\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have X': \"to_nat_on A ` X' = X \\<inter> (to_nat_on A ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat_on A ` X' = X \\<inter> to_nat_on A ` A", "by(auto 4 3 simp add: X'_def intro: rev_image_eqI)"], ["proof (state)\nthis:\n  to_nat_on A ` X' = X \\<inter> to_nat_on A ` A\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"ennreal (suminf (zero_on f' (- X))) = suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (suminf (zero_on f' (- X))) =\n    suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X))", "by(simp add: suminf_ennreal2 zero_on_nonneg f'_nonneg summable_zero_on_nonneg summ_f')"], ["proof (state)\nthis:\n  ennreal (suminf (zero_on f' (- X))) =\n  suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  ennreal (suminf (zero_on f' (- X))) =\n  suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>X. f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X)) =\n    (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x))", "by(auto simp add: nn_integral_count_space_nat[symmetric] nn_integral_count_space_indicator intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X)) =\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  suminf (zero_on (\\<lambda>x. ennreal (f' x)) (- X)) =\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x))", "using X'"], ["proof (prove)\nusing this:\n  to_nat_on A ` X' = X \\<inter> to_nat_on A ` A\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x)) =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x))", "by(auto simp add: nn_integral_count_space_indicator f'_def intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>X. ennreal (f' x)) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x \\<in> X'. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x)) =\n    integral\\<^sup>N (count_space X') f", "by(subst nn_integral_count_space_reindex)(auto simp add: X'_def inj_on_def f'_def ennreal_enn2real_if intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x)) =\n  integral\\<^sup>N (count_space X') f\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` X'. ennreal (f' x)) =\n  integral\\<^sup>N (count_space X') f\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> \\<le> (\\<Sum>\\<^sup>+ y \\<in> R `` X'. g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space X') f\n    \\<le> integral\\<^sup>N (count_space (R `` X')) g", "by(rule le)(auto simp add: X'_def)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (R `` X')) g\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space X') f\n  \\<le> integral\\<^sup>N (count_space (R `` X')) g\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y \\<in> to_nat_on B ` (R `` X'). g' y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (R `` X')) g =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` R `` X'. ennreal (g' x))", "using R fin_g"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> B\n  ?y \\<in> B \\<Longrightarrow> g ?y \\<noteq> \\<top>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (R `` X')) g =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` R `` X'. ennreal (g' x))", "by(subst nn_integral_count_space_reindex)(auto 4 3 simp add: X'_def inj_on_def g'_def ennreal_enn2real_if simp del: fin_g intro!: nn_integral_cong from_nat_into dest: to_nat_on_inj[THEN iffD1, rotated -1])"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (R `` X')) g =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` R `` X'. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (R `` X')) g =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on B ` R `` X'. ennreal (g' x))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"to_nat_on B ` (R `` X') = R' `` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat_on B ` R `` X' = R' `` X", "using R"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> B\n\ngoal (1 subgoal):\n 1. to_nat_on B ` R `` X' = R' `` X", "by(auto 4 4 simp add: X'_def R'_def Image_iff intro: rev_image_eqI rev_bexI intro!: imageI)"], ["proof (state)\nthis:\n  to_nat_on B ` R `` X' = R' `` X\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  to_nat_on B ` R `` X' = R' `` X\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"(\\<Sum>\\<^sup>+ y\\<in>\\<dots>. g' y) = suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- \\<dots>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>R' `` X. ennreal (g' x)) =\n    suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- R' `` X))", "by(auto simp add: nn_integral_count_space_nat[symmetric] nn_integral_count_space_indicator intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>R' `` X. ennreal (g' x)) =\n  suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- R' `` X))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>R' `` X. ennreal (g' x)) =\n  suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- R' `` X))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "have \"\\<dots> = ennreal (suminf (zero_on g' (- R' `` X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- R' `` X)) =\n    ennreal (suminf (zero_on g' (- R' `` X)))", "by(simp add: suminf_ennreal2 zero_on_nonneg g'_nonneg summable_zero_on_nonneg summ_g')"], ["proof (state)\nthis:\n  suminf (zero_on (\\<lambda>y. ennreal (g' y)) (- R' `` X)) =\n  ennreal (suminf (zero_on g' (- R' `` X)))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "finally"], ["proof (chain)\npicking this:\n  ennreal (\\<Sum>a. zero_on f' (- X) a)\n  \\<le> ennreal (suminf (zero_on g' (- R' `` X)))", "show ?thesis"], ["proof (prove)\nusing this:\n  ennreal (\\<Sum>a. zero_on f' (- X) a)\n  \\<le> ennreal (suminf (zero_on g' (- R' `` X)))\n\ngoal (1 subgoal):\n 1. suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))", "by(simp add: suminf_nonneg summable_zero_on_nonneg[OF summ_g' g'_nonneg] zero_on_nonneg g'_nonneg)"], ["proof (state)\nthis:\n  suminf (zero_on f' (- X)) \\<le> suminf (zero_on g' (- R' `` X))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  suminf (zero_on f' (- ?X)) \\<le> suminf (zero_on g' (- R' `` ?X))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  f' sums s\n  g' sums s\n  0 \\<le> f' ?x\n  0 \\<le> g' ?y\n  suminf (zero_on f' (- ?X)) \\<le> suminf (zero_on g' (- R' `` ?X))", "obtain h' where h'_nonneg: \"\\<And>x y. 0 \\<le> h' x y\"\n    and dom_h': \"\\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> R'\"\n    and h'_f: \"\\<And>x. h' x sums f' x\"\n    and h'_g: \"\\<And>y. (\\<lambda>x. h' x y) sums g' y\""], ["proof (prove)\nusing this:\n  f' sums s\n  g' sums s\n  0 \\<le> f' ?x\n  0 \\<le> g' ?y\n  suminf (zero_on f' (- ?X)) \\<le> suminf (zero_on g' (- R' `` ?X))\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        \\<lbrakk>\\<And>x y. 0 \\<le> h' x y;\n         \\<And>x y. 0 < h' x y \\<Longrightarrow> (x, y) \\<in> R';\n         \\<And>x. h' x sums f' x;\n         \\<And>y. (\\<lambda>x. h' x y) sums g' y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule bounded_matrix_for_marginals_nat) blast"], ["proof (state)\nthis:\n  0 \\<le> h' ?x ?y\n  0 < h' ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> R'\n  h' ?x sums f' ?x\n  (\\<lambda>x. h' x ?y) sums g' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define h where \"h x y = ennreal (if x \\<in> A \\<and> y \\<in> B then h' (to_nat_on A x) (to_nat_on B y) else 0)\" for x y"], ["proof (state)\nthis:\n  h ?x ?y =\n  ennreal\n   (if ?x \\<in> A \\<and> ?y \\<in> B\n    then h' (to_nat_on A ?x) (to_nat_on B ?y) else 0)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>x y. 0 < h x y \\<Longrightarrow> (x, y) \\<in> R;\n         \\<And>x y. h x y \\<noteq> \\<top>;\n         \\<And>x.\n            x \\<in> A \\<Longrightarrow>\n            integral\\<^sup>N (count_space B) (h x) = f x;\n         \\<And>y.\n            y \\<in> B \\<Longrightarrow>\n            (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. 0 < ?h x y \\<Longrightarrow> (x, y) \\<in> R\n 2. \\<And>x y. ?h x y \\<noteq> \\<top>\n 3. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (?h x) = f x\n 4. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. ?h x y) = g y", "show \"(x, y) \\<in> R\" if \"0 < h x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> R", "using that dom_h'[of \"to_nat_on A x\" \"to_nat_on B y\"] R"], ["proof (prove)\nusing this:\n  0 < h x y\n  0 < h' (to_nat_on A x) (to_nat_on B y) \\<Longrightarrow>\n  (to_nat_on A x, to_nat_on B y) \\<in> R'\n  R \\<subseteq> A \\<times> B\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> R", "by(auto simp add: h_def R'_def dest: to_nat_on_inj[THEN iffD1, rotated -1] split: if_split_asm)"], ["proof (state)\nthis:\n  0 < h ?x ?y \\<Longrightarrow> (?x, ?y) \\<in> R\n\ngoal (3 subgoals):\n 1. \\<And>x y. h x y \\<noteq> \\<top>\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 3. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "show \"h x y \\<noteq> \\<top>\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. h x y \\<noteq> \\<top>", "by(simp add: h_def)"], ["proof (state)\nthis:\n  h ?x ?y \\<noteq> \\<top>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "assume x: \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"(\\<Sum>\\<^sup>+ y\\<in>B. h x y) = (\\<Sum>\\<^sup>+ y\\<in>to_nat_on B ` B. h' (to_nat_on A x) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space B) (h x) =\n    (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B. ennreal (h' (to_nat_on A x) xa))", "by(subst nn_integral_count_space_reindex)(auto simp add: inj_on_to_nat_on h_def x intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space B) (h x) =\n  (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B. ennreal (h' (to_nat_on A x) xa))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space B) (h x) =\n  (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B. ennreal (h' (to_nat_on A x) xa))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = (\\<Sum>\\<^sup>+ y. h' (to_nat_on A x) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B.\n       ennreal (h' (to_nat_on A x) xa)) =\n    (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa))", "using dom_h'[of \"to_nat_on A x\"] h'_nonneg R"], ["proof (prove)\nusing this:\n  0 < h' (to_nat_on A x) ?y \\<Longrightarrow> (to_nat_on A x, ?y) \\<in> R'\n  0 \\<le> h' ?x ?y\n  R \\<subseteq> A \\<times> B\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B.\n       ennreal (h' (to_nat_on A x) xa)) =\n    (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa))", "by(fastforce intro!: nn_integral_cong intro: rev_image_eqI simp add: nn_integral_count_space_indicator R'_def less_le split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B. ennreal (h' (to_nat_on A x) xa)) =\n  (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ xa\\<in>to_nat_on B ` B. ennreal (h' (to_nat_on A x) xa)) =\n  (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = ennreal (suminf (h' (to_nat_on A x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa)) =\n    ennreal (suminf (h' (to_nat_on A x)))", "by(simp add: nn_integral_count_space_nat suminf_ennreal_eq[OF _ h'_f] h'_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa)) =\n  ennreal (suminf (h' (to_nat_on A x)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ xa. ennreal (h' (to_nat_on A x) xa)) =\n  ennreal (suminf (h' (to_nat_on A x)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = ennreal (f' (to_nat_on A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (suminf (h' (to_nat_on A x))) = ennreal (f' (to_nat_on A x))", "using h'_f[of \"to_nat_on A x\"]"], ["proof (prove)\nusing this:\n  h' (to_nat_on A x) sums f' (to_nat_on A x)\n\ngoal (1 subgoal):\n 1. ennreal (suminf (h' (to_nat_on A x))) = ennreal (f' (to_nat_on A x))", "by(simp add: sums_iff)"], ["proof (state)\nthis:\n  ennreal (suminf (h' (to_nat_on A x))) = ennreal (f' (to_nat_on A x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  ennreal (suminf (h' (to_nat_on A x))) = ennreal (f' (to_nat_on A x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (f' (to_nat_on A x)) = f x", "using x"], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. ennreal (f' (to_nat_on A x)) = f x", "by(simp add: f'_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  ennreal (f' (to_nat_on A x)) = f x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       integral\\<^sup>N (count_space B) (h x) = f x\n 2. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (count_space B) (h x) = f x", "show \"(\\<Sum>\\<^sup>+ y\\<in>B. h x y) = f x\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (count_space B) (h x) = f x\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space B) (h x) = f x", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space B) (h x) = f x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "assume y: \"y \\<in> B\""], ["proof (state)\nthis:\n  y \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"(\\<Sum>\\<^sup>+ x\\<in>A. h x y) = (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. h' x (to_nat_on B y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A. h x y) =\n    (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y)))", "by(subst nn_integral_count_space_reindex)(auto simp add: inj_on_to_nat_on h_def y intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A. h x y) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y)))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A. h x y) =\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y)))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = (\\<Sum>\\<^sup>+ x. h' x (to_nat_on B y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y))) =\n    (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y)))", "using dom_h'[of _ \"to_nat_on B y\"] h'_nonneg R"], ["proof (prove)\nusing this:\n  0 < h' ?x (to_nat_on B y) \\<Longrightarrow> (?x, to_nat_on B y) \\<in> R'\n  0 \\<le> h' ?x ?y\n  R \\<subseteq> A \\<times> B\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y))) =\n    (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y)))", "by(fastforce intro!: nn_integral_cong intro: rev_image_eqI simp add: nn_integral_count_space_indicator R'_def less_le split: split_indicator)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y))) =\n  (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y)))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>to_nat_on A ` A. ennreal (h' x (to_nat_on B y))) =\n  (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y)))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = ennreal (suminf (\\<lambda>x. h' x (to_nat_on B y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y))) =\n    ennreal (\\<Sum>x. h' x (to_nat_on B y))", "by(simp add: nn_integral_count_space_nat suminf_ennreal_eq[OF _ h'_g] h'_nonneg)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y))) =\n  ennreal (\\<Sum>x. h' x (to_nat_on B y))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal (h' x (to_nat_on B y))) =\n  ennreal (\\<Sum>x. h' x (to_nat_on B y))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = ennreal (g' (to_nat_on B y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (\\<Sum>x. h' x (to_nat_on B y)) = ennreal (g' (to_nat_on B y))", "using h'_g[of \"to_nat_on B y\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>x. h' x (to_nat_on B y)) sums g' (to_nat_on B y)\n\ngoal (1 subgoal):\n 1. ennreal (\\<Sum>x. h' x (to_nat_on B y)) = ennreal (g' (to_nat_on B y))", "by(simp add: sums_iff)"], ["proof (state)\nthis:\n  ennreal (\\<Sum>x. h' x (to_nat_on B y)) = ennreal (g' (to_nat_on B y))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "also"], ["proof (state)\nthis:\n  ennreal (\\<Sum>x. h' x (to_nat_on B y)) = ennreal (g' (to_nat_on B y))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "have \"\\<dots> = g y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (g' (to_nat_on B y)) = g y", "using y"], ["proof (prove)\nusing this:\n  y \\<in> B\n\ngoal (1 subgoal):\n 1. ennreal (g' (to_nat_on B y)) = g y", "by(simp add: g'_def ennreal_enn2real_if)"], ["proof (state)\nthis:\n  ennreal (g' (to_nat_on B y)) = g y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> B \\<Longrightarrow> (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "show \"(\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x\\<in>A. h x y) = g y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}