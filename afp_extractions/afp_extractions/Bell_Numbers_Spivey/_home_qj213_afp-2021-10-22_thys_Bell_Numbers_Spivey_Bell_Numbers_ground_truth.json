{"file_name": "/home/qj213/afp-2021-10-22/thys/Bell_Numbers_Spivey/Bell_Numbers.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Bell_Numbers_Spivey", "problem_names": ["lemma extensional_funcset_ext:\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\" \"g \\<in> A \\<rightarrow>\\<^sub>E B\"\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> f x = g x\"\n  shows \"f = g\"", "lemma inj_on_impl_inj_on_image:\n  assumes \"inj_on f A\"\n  assumes \"\\<And>x. x \\<in> X \\<Longrightarrow> x \\<subseteq> A\"\n  shows \"inj_on ((`) f) X\"", "lemma injectivity_union:\n  assumes \"A \\<union> B = C \\<union> D\"\n  assumes \"P A\" \"P C\"\n  assumes \"Q B\" \"Q D\"\n    \"\\<And>S T. P S \\<Longrightarrow> Q T \\<Longrightarrow> S \\<inter> T = {}\"\n  shows \"A = C \\<and> B = D\"", "lemma injectivity_image:\n  assumes \"f ` A = g ` A\"\n  assumes \"\\<forall>x\\<in>A. invert (f x) = x \\<and> invert (g x) = x\"\n  shows \"\\<forall>x\\<in>A. f x = g x\"", "lemma injectivity_image_union:\n  assumes \"(\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\"\n  assumes \"\\<forall>X \\<in> P. X \\<subseteq> A\" \"\\<forall>X \\<in> P'. X \\<subseteq> A\"\n  assumes \"\\<forall>X \\<in> P. \\<forall>y\\<in>F X. y \\<notin> A\" \"\\<forall>X \\<in> P'. \\<forall>y\\<in>G X. y \\<notin> A\"\n  shows \"P = P'\"", "lemma Bell_altdef:\n  assumes \"finite A\"\n  shows \"Bell (card A) = card {P. partition_on A P}\"", "lemma Bell_0:\n  \"Bell 0 = 1\"", "lemma construct_partition_on:\n  assumes \"finite B\" \"finite C\"\n  assumes \"B \\<inter> C = {}\"\n  shows \"construct_partition_on B C = {P. partition_on (B \\<union> C) P}\"", "lemma injectivity:\n  assumes \"B \\<inter> C = {}\"\n  assumes P: \"(partition_on C P \\<and> card P = j) \\<and> (partition_on C P' \\<and> card P' = j')\"\n  assumes B': \"(B' \\<subseteq> B \\<and> card B' = k) \\<and> (B'' \\<subseteq> B \\<and> card B'' = k')\"\n  assumes Q: \"partition_on B' Q \\<and> partition_on B'' Q'\"\n  assumes f: \"f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and> g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'\"\n  assumes P': \"P'' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<and>\n    P''' = (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\"\n  assumes eq_result: \"P'' \\<union> Q = P''' \\<union> Q'\"\n  shows \"f = g\" and \"Q = Q'\" and \"B' = B''\"\n    and \"P = P'\" and \"j = j'\" and \"k = k'\"", "theorem Bell_eq:\n  \"Bell (n + m) = (\\<Sum>k\\<le>n. \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\""], "translations": [["", "lemma extensional_funcset_ext:\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\" \"g \\<in> A \\<rightarrow>\\<^sub>E B\"\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> f x = g x\"\n  shows \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  g \\<in> A \\<rightarrow>\\<^sub>E B\n  ?x \\<in> A \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. f = g", "by (metis PiE_iff extensionalityI)"], ["", "subsubsection \\<open>Additions for Injectivity Proofs\\<close>"], ["", "lemma inj_on_impl_inj_on_image:\n  assumes \"inj_on f A\"\n  assumes \"\\<And>x. x \\<in> X \\<Longrightarrow> x \\<subseteq> A\"\n  shows \"inj_on ((`) f) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) f) X", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A\n  ?x \\<in> X \\<Longrightarrow> ?x \\<subseteq> A\n\ngoal (1 subgoal):\n 1. inj_on ((`) f) X", "by (meson inj_onI inj_on_image_eq_iff)"], ["", "lemma injectivity_union:\n  assumes \"A \\<union> B = C \\<union> D\"\n  assumes \"P A\" \"P C\"\n  assumes \"Q B\" \"Q D\"\n    \"\\<And>S T. P S \\<Longrightarrow> Q T \\<Longrightarrow> S \\<inter> T = {}\"\n  shows \"A = C \\<and> B = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = C \\<and> B = D", "using assms Int_Un_distrib Int_commute inf_sup_absorb"], ["proof (prove)\nusing this:\n  A \\<union> B = C \\<union> D\n  P A\n  P C\n  Q B\n  Q D\n  \\<lbrakk>P ?S; Q ?T\\<rbrakk> \\<Longrightarrow> ?S \\<inter> ?T = {}\n  ?A \\<inter> (?B \\<union> ?C) = ?A \\<inter> ?B \\<union> ?A \\<inter> ?C\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n  inf ?x (sup ?x ?y) = ?x\n\ngoal (1 subgoal):\n 1. A = C \\<and> B = D", "by blast+"], ["", "lemma injectivity_image:\n  assumes \"f ` A = g ` A\"\n  assumes \"\\<forall>x\\<in>A. invert (f x) = x \\<and> invert (g x) = x\"\n  shows \"\\<forall>x\\<in>A. f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = g x", "using assms"], ["proof (prove)\nusing this:\n  f ` A = g ` A\n  \\<forall>x\\<in>A. invert (f x) = x \\<and> invert (g x) = x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = g x", "by (metis (no_types, lifting) image_iff)"], ["", "lemma injectivity_image_union:\n  assumes \"(\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\"\n  assumes \"\\<forall>X \\<in> P. X \\<subseteq> A\" \"\\<forall>X \\<in> P'. X \\<subseteq> A\"\n  assumes \"\\<forall>X \\<in> P. \\<forall>y\\<in>F X. y \\<notin> A\" \"\\<forall>X \\<in> P'. \\<forall>y\\<in>G X. y \\<notin> A\"\n  shows \"P = P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = P'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<subseteq> P'\n 2. P' \\<subseteq> P", "show \"P \\<subseteq> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<subseteq> P'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "assume \"X \\<in> P\""], ["proof (state)\nthis:\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "from assms(1) this"], ["proof (chain)\npicking this:\n  (\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\n  X \\<in> P", "obtain X' where \"X' \\<in> P'\" and \"X \\<union> F X = X' \\<union> G X'\""], ["proof (prove)\nusing this:\n  (\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>X' \\<in> P'; X \\<union> F X = X' \\<union> G X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE image_eqI)"], ["proof (state)\nthis:\n  X' \\<in> P'\n  X \\<union> F X = X' \\<union> G X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "moreover"], ["proof (state)\nthis:\n  X' \\<in> P'\n  X \\<union> F X = X' \\<union> G X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "from assms(2,4) \\<open>X \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P. X \\<subseteq> A\n  \\<forall>X\\<in>P. \\<forall>y\\<in>F X. y \\<notin> A\n  X \\<in> P", "have X: \"(X \\<union> F X) \\<inter> A = X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P. X \\<subseteq> A\n  \\<forall>X\\<in>P. \\<forall>y\\<in>F X. y \\<notin> A\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. (X \\<union> F X) \\<inter> A = X", "by auto"], ["proof (state)\nthis:\n  (X \\<union> F X) \\<inter> A = X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "moreover"], ["proof (state)\nthis:\n  (X \\<union> F X) \\<inter> A = X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "from assms(3,5) \\<open>X' \\<in> P'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P'. X \\<subseteq> A\n  \\<forall>X\\<in>P'. \\<forall>y\\<in>G X. y \\<notin> A\n  X' \\<in> P'", "have X': \"(X' \\<union> G X') \\<inter> A = X'\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. X \\<subseteq> A\n  \\<forall>X\\<in>P'. \\<forall>y\\<in>G X. y \\<notin> A\n  X' \\<in> P'\n\ngoal (1 subgoal):\n 1. (X' \\<union> G X') \\<inter> A = X'", "by auto"], ["proof (state)\nthis:\n  (X' \\<union> G X') \\<inter> A = X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "ultimately"], ["proof (chain)\npicking this:\n  X' \\<in> P'\n  X \\<union> F X = X' \\<union> G X'\n  (X \\<union> F X) \\<inter> A = X\n  (X' \\<union> G X') \\<inter> A = X'", "have \"X = X'\""], ["proof (prove)\nusing this:\n  X' \\<in> P'\n  X \\<union> F X = X' \\<union> G X'\n  (X \\<union> F X) \\<inter> A = X\n  (X' \\<union> G X') \\<inter> A = X'\n\ngoal (1 subgoal):\n 1. X = X'", "by simp"], ["proof (state)\nthis:\n  X = X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> P'", "from this \\<open>X' \\<in> P'\\<close>"], ["proof (chain)\npicking this:\n  X = X'\n  X' \\<in> P'", "show \"X \\<in> P'\""], ["proof (prove)\nusing this:\n  X = X'\n  X' \\<in> P'\n\ngoal (1 subgoal):\n 1. X \\<in> P'", "by auto"], ["proof (state)\nthis:\n  X \\<in> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<subseteq> P'\n\ngoal (1 subgoal):\n 1. P' \\<subseteq> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<subseteq> P", "show \"P' \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<subseteq> P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "fix X'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "assume \"X' \\<in> P'\""], ["proof (state)\nthis:\n  X' \\<in> P'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "from assms(1) this"], ["proof (chain)\npicking this:\n  (\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\n  X' \\<in> P'", "obtain X where \"X \\<in> P\" and \"X \\<union> F X = X' \\<union> G X'\""], ["proof (prove)\nusing this:\n  (\\<lambda>X. X \\<union> F X) ` P = (\\<lambda>X. X \\<union> G X) ` P'\n  X' \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<in> P; X \\<union> F X = X' \\<union> G X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE image_eqI)"], ["proof (state)\nthis:\n  X \\<in> P\n  X \\<union> F X = X' \\<union> G X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "moreover"], ["proof (state)\nthis:\n  X \\<in> P\n  X \\<union> F X = X' \\<union> G X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "from assms(2,4) \\<open>X \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P. X \\<subseteq> A\n  \\<forall>X\\<in>P. \\<forall>y\\<in>F X. y \\<notin> A\n  X \\<in> P", "have X: \"(X \\<union> F X) \\<inter> A = X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P. X \\<subseteq> A\n  \\<forall>X\\<in>P. \\<forall>y\\<in>F X. y \\<notin> A\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. (X \\<union> F X) \\<inter> A = X", "by auto"], ["proof (state)\nthis:\n  (X \\<union> F X) \\<inter> A = X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "moreover"], ["proof (state)\nthis:\n  (X \\<union> F X) \\<inter> A = X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "from assms(3,5) \\<open>X' \\<in> P'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P'. X \\<subseteq> A\n  \\<forall>X\\<in>P'. \\<forall>y\\<in>G X. y \\<notin> A\n  X' \\<in> P'", "have X': \"(X' \\<union> G X') \\<inter> A = X'\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. X \\<subseteq> A\n  \\<forall>X\\<in>P'. \\<forall>y\\<in>G X. y \\<notin> A\n  X' \\<in> P'\n\ngoal (1 subgoal):\n 1. (X' \\<union> G X') \\<inter> A = X'", "by auto"], ["proof (state)\nthis:\n  (X' \\<union> G X') \\<inter> A = X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "ultimately"], ["proof (chain)\npicking this:\n  X \\<in> P\n  X \\<union> F X = X' \\<union> G X'\n  (X \\<union> F X) \\<inter> A = X\n  (X' \\<union> G X') \\<inter> A = X'", "have \"X = X'\""], ["proof (prove)\nusing this:\n  X \\<in> P\n  X \\<union> F X = X' \\<union> G X'\n  (X \\<union> F X) \\<inter> A = X\n  (X' \\<union> G X') \\<inter> A = X'\n\ngoal (1 subgoal):\n 1. X = X'", "by simp"], ["proof (state)\nthis:\n  X = X'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P' \\<Longrightarrow> x \\<in> P", "from this \\<open>X \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  X = X'\n  X \\<in> P", "show \"X' \\<in> P\""], ["proof (prove)\nusing this:\n  X = X'\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. X' \\<in> P", "by auto"], ["proof (state)\nthis:\n  X' \\<in> P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' \\<subseteq> P\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Definition of Bell Numbers\\<close>"], ["", "definition Bell :: \"nat \\<Rightarrow> nat\"\nwhere\n  \"Bell n = card {P. partition_on {0..<n} P}\""], ["", "lemma Bell_altdef:\n  assumes \"finite A\"\n  shows \"Bell (card A) = card {P. partition_on A P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  finite A", "obtain f where bij: \"bij_betw f {0..<card A} A\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        bij_betw f {0..<card A} A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_bij_betw_nat_finite"], ["proof (prove)\nusing this:\n  finite A\n  finite ?M \\<Longrightarrow> \\<exists>h. bij_betw h {0..<card ?M} ?M\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        bij_betw f {0..<card A} A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij_betw f {0..<card A} A\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from this"], ["proof (chain)\npicking this:\n  bij_betw f {0..<card A} A", "have inj: \"inj_on f {0..<card A}\""], ["proof (prove)\nusing this:\n  bij_betw f {0..<card A} A\n\ngoal (1 subgoal):\n 1. inj_on f {0..<card A}", "using bij_betw_imp_inj_on"], ["proof (prove)\nusing this:\n  bij_betw f {0..<card A} A\n  bij_betw ?f ?A ?B \\<Longrightarrow> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on f {0..<card A}", "by blast"], ["proof (state)\nthis:\n  inj_on f {0..<card A}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from bij"], ["proof (chain)\npicking this:\n  bij_betw f {0..<card A} A", "have image_f_eq: \"A = f ` {0..<card A}\""], ["proof (prove)\nusing this:\n  bij_betw f {0..<card A} A\n\ngoal (1 subgoal):\n 1. A = f ` {0..<card A}", "using bij_betw_imp_surj_on"], ["proof (prove)\nusing this:\n  bij_betw f {0..<card A} A\n  bij_betw ?f ?A ?B \\<Longrightarrow> ?f ` ?A = ?B\n\ngoal (1 subgoal):\n 1. A = f ` {0..<card A}", "by blast"], ["proof (state)\nthis:\n  A = f ` {0..<card A}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "have \"\\<forall>x \\<in> {P. partition_on {0..<card A} P}. x \\<subseteq> Pow {0..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{P. partition_on {0..<card A} P}.\n       x \\<subseteq> Pow {0..<card A}", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{P. partition_on {0..<card A} P}.\n     x \\<subseteq> Pow {0..<card A}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from this inj"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>{P. partition_on {0..<card A} P}.\n     x \\<subseteq> Pow {0..<card A}\n  inj_on f {0..<card A}", "have \"inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{P. partition_on {0..<card A} P}.\n     x \\<subseteq> Pow {0..<card A}\n  inj_on f {0..<card A}\n\ngoal (1 subgoal):\n 1. inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}", "by (intro inj_on_impl_inj_on_image[of _ \"Pow {0..<card A}\"]\n     inj_on_impl_inj_on_image[of _ \"{0..<card A}\"]) blast+"], ["proof (state)\nthis:\n  inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "moreover"], ["proof (state)\nthis:\n  inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from inj"], ["proof (chain)\npicking this:\n  inj_on f {0..<card A}", "have \"(`) ((`) f) ` {P. partition_on {0..<card A} P} = {P. partition_on A P}\""], ["proof (prove)\nusing this:\n  inj_on f {0..<card A}\n\ngoal (1 subgoal):\n 1. (`) ((`) f) ` {P. partition_on {0..<card A} P} = {P. partition_on A P}", "by (subst image_f_eq, auto elim!: set_of_partition_on_map)"], ["proof (state)\nthis:\n  (`) ((`) f) ` {P. partition_on {0..<card A} P} = {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "ultimately"], ["proof (chain)\npicking this:\n  inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}\n  (`) ((`) f) ` {P. partition_on {0..<card A} P} = {P. partition_on A P}", "have \"bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P} {P. partition_on A P}\""], ["proof (prove)\nusing this:\n  inj_on ((`) ((`) f)) {P. partition_on {0..<card A} P}\n  (`) ((`) f) ` {P. partition_on {0..<card A} P} = {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P}\n     {P. partition_on A P}", "by (auto intro: bij_betw_imageI)"], ["proof (state)\nthis:\n  bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P}\n   {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "from this \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P}\n   {P. partition_on A P}\n  finite A", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P}\n   {P. partition_on A P}\n  finite A\n\ngoal (1 subgoal):\n 1. Bell (card A) = card {P. partition_on A P}", "unfolding Bell_def"], ["proof (prove)\nusing this:\n  bij_betw ((`) ((`) f)) {P. partition_on {0..<card A} P}\n   {P. partition_on A P}\n  finite A\n\ngoal (1 subgoal):\n 1. card (Collect (partition_on {0..<card A})) = card {P. partition_on A P}", "by (subst bij_betw_iff_card[symmetric]) (auto intro: finitely_many_partition_on)"], ["proof (state)\nthis:\n  Bell (card A) = card {P. partition_on A P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bell_0:\n  \"Bell 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell 0 = 1", "by (auto simp add: Bell_def partition_on_empty)"], ["", "subsection \\<open>Construction of the Partitions\\<close>"], ["", "definition construct_partition_on :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> 'a set set set\"\nwhere\n  \"construct_partition_on B C =\n    do {\n       k  \\<leftarrow> {0..card B};\n       j  \\<leftarrow> {0..card C};\n       P  \\<leftarrow> {P. partition_on C P \\<and> card P = j};\n       B' \\<leftarrow> {B'. B' \\<subseteq> B \\<and> card B' = k};\n       Q  \\<leftarrow> {Q. partition_on B' Q};\n       f  \\<leftarrow> (B - B') \\<rightarrow>\\<^sub>E P;\n       P'  \\<leftarrow> {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P};\n       {P' \\<union> Q}\n    }\""], ["", "lemma construct_partition_on:\n  assumes \"finite B\" \"finite C\"\n  assumes \"B \\<inter> C = {}\"\n  shows \"construct_partition_on B C = {P. partition_on (B \\<union> C) P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. construct_partition_on B C = {P. partition_on (B \\<union> C) P}", "proof (rule set_eqI')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "fix Q'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "assume \"Q' \\<in> construct_partition_on B C\""], ["proof (state)\nthis:\n  Q' \\<in> construct_partition_on B C\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from this"], ["proof (chain)\npicking this:\n  Q' \\<in> construct_partition_on B C", "obtain j k P P' Q B' f\n    where \"j \\<le> card C\"\n    and \"k \\<le> card B\"\n    and P: \"partition_on C P \\<and> card P = j\"\n    and B': \"B' \\<subseteq> B \\<and> card B' = k\"\n    and Q: \"partition_on B' Q\"\n    and f: \"f \\<in> B - B' \\<rightarrow>\\<^sub>E P\"\n    and P': \"P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\"\n    and Q': \"Q' = P' \\<union> Q\""], ["proof (prove)\nusing this:\n  Q' \\<in> construct_partition_on B C\n\ngoal (1 subgoal):\n 1. (\\<And>j k P B' Q f P'.\n        \\<lbrakk>j \\<le> card C; k \\<le> card B;\n         partition_on C P \\<and> card P = j;\n         B' \\<subseteq> B \\<and> card B' = k; partition_on B' Q;\n         f \\<in> B - B' \\<rightarrow>\\<^sub>E P;\n         P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P;\n         Q' = P' \\<union> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding construct_partition_on_def"], ["proof (prove)\nusing this:\n  Q' \\<in> {0..card B} \\<bind>\n           (\\<lambda>k.\n               {0..card C} \\<bind>\n               (\\<lambda>j.\n                   {P. partition_on C P \\<and> card P = j} \\<bind>\n                   (\\<lambda>P.\n                       {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n                       (\\<lambda>B'.\n                           Collect (partition_on B') \\<bind>\n                           (\\<lambda>Q.\n                               B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                               (\\<lambda>f.\n                                   {(\\<lambda>X.\n  X \\<union> {x \\<in> B - B'. f x = X}) `\n                                    P} \\<bind>\n                                   (\\<lambda>P'. {P' \\<union> Q})))))))\n\ngoal (1 subgoal):\n 1. (\\<And>j k P B' Q f P'.\n        \\<lbrakk>j \\<le> card C; k \\<le> card B;\n         partition_on C P \\<and> card P = j;\n         B' \\<subseteq> B \\<and> card B' = k; partition_on B' Q;\n         f \\<in> B - B' \\<rightarrow>\\<^sub>E P;\n         P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P;\n         Q' = P' \\<union> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> card C\n  k \\<le> card B\n  partition_on C P \\<and> card P = j\n  B' \\<subseteq> B \\<and> card B' = k\n  partition_on B' Q\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n  P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n  Q' = P' \\<union> Q\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from P f"], ["proof (chain)\npicking this:\n  partition_on C P \\<and> card P = j\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P", "have \"partition_on (B - B' \\<union> C) P'\""], ["proof (prove)\nusing this:\n  partition_on C P \\<and> card P = j\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C) P'", "unfolding P'"], ["proof (prove)\nusing this:\n  partition_on C P \\<and> card P = j\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C)\n     ((\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P)", "using \\<open>B \\<inter> C = {}\\<close>"], ["proof (prove)\nusing this:\n  partition_on C P \\<and> card P = j\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C)\n     ((\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P)", "by (intro partition_on_insert_elements) auto"], ["proof (state)\nthis:\n  partition_on (B - B' \\<union> C) P'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from this Q"], ["proof (chain)\npicking this:\n  partition_on (B - B' \\<union> C) P'\n  partition_on B' Q", "have \"partition_on ((B - B' \\<union> C) \\<union> B') Q'\""], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  partition_on B' Q\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C \\<union> B') Q'", "unfolding Q'"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  partition_on B' Q\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C \\<union> B') (P' \\<union> Q)", "using B' \\<open>B \\<inter> C = {}\\<close>"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  partition_on B' Q\n  B' \\<subseteq> B \\<and> card B' = k\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C \\<union> B') (P' \\<union> Q)", "by (auto intro: partition_on_union)"], ["proof (state)\nthis:\n  partition_on (B - B' \\<union> C \\<union> B') Q'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from this"], ["proof (chain)\npicking this:\n  partition_on (B - B' \\<union> C \\<union> B') Q'", "have \"partition_on (B \\<union> C) Q'\""], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C \\<union> B') Q'\n\ngoal (1 subgoal):\n 1. partition_on (B \\<union> C) Q'", "using B'"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C \\<union> B') Q'\n  B' \\<subseteq> B \\<and> card B' = k\n\ngoal (1 subgoal):\n 1. partition_on (B \\<union> C) Q'", "by (metis Diff_partition sup.assoc sup.commute)"], ["proof (state)\nthis:\n  partition_on (B \\<union> C) Q'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> construct_partition_on B C \\<Longrightarrow>\n       x \\<in> {P. partition_on (B \\<union> C) P}\n 2. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from this"], ["proof (chain)\npicking this:\n  partition_on (B \\<union> C) Q'", "show \"Q' \\<in> {P. partition_on (B \\<union> C) P}\""], ["proof (prove)\nusing this:\n  partition_on (B \\<union> C) Q'\n\ngoal (1 subgoal):\n 1. Q' \\<in> {P. partition_on (B \\<union> C) P}", "by auto"], ["proof (state)\nthis:\n  Q' \\<in> {P. partition_on (B \\<union> C) P}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "fix Q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "assume Q': \"Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\""], ["proof (state)\nthis:\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from Q'"], ["proof (chain)\npicking this:\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}", "have \"{} \\<notin> Q'\""], ["proof (prove)\nusing this:\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n\ngoal (1 subgoal):\n 1. {} \\<notin> Q'", "by (auto elim!: partition_onE)"], ["proof (state)\nthis:\n  {} \\<notin> Q'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain Q where Q: \"Q = ((\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q') - {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        Q =\n        (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' -\n        {{}} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Q = (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' - {{}}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain P' where P': \"P' = ((\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q') - {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        P' =\n        (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' -\n        {{}} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P' = (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from P' Q \\<open>{} \\<notin> Q'\\<close>"], ["proof (chain)\npicking this:\n  P' = (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}}\n  Q = (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' - {{}}\n  {} \\<notin> Q'", "have Q'_prop: \"Q' = P' \\<union> Q\""], ["proof (prove)\nusing this:\n  P' = (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}}\n  Q = (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' - {{}}\n  {} \\<notin> Q'\n\ngoal (1 subgoal):\n 1. Q' = P' \\<union> Q", "by auto"], ["proof (state)\nthis:\n  Q' = P' \\<union> Q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "have P'_nosubset: \"\\<forall>X \\<in> P'. \\<not> X \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B", "unfolding P'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>(\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' -\n                   {{}}.\n       \\<not> X \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "moreover"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "have \"\\<forall>X \\<in> P'. X \\<subseteq> B \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C", "using Q' P'"], ["proof (prove)\nusing this:\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n  P' = (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}}\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n  \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C", "have P'_witness: \"\\<forall>X \\<in> P'. \\<exists>x. x \\<in> X \\<inter> C\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n  \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C", "using \\<open>B \\<inter> C = {}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n  \\<forall>X\\<in>P'. X \\<subseteq> B \\<union> C\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain B' where B': \"B' = \\<Union>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B'. B' = \\<Union> Q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  B' = \\<Union> Q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "have Q_prop: \"partition_on B' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partition_on B' Q", "using B' Q' Q'_prop partition_on_split2 mem_Collect_eq"], ["proof (prove)\nusing this:\n  B' = \\<Union> Q\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n  Q' = P' \\<union> Q\n  partition_on ?A (?P \\<union> ?Q) \\<Longrightarrow>\n  partition_on (\\<Union> ?Q) ?Q\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. partition_on B' Q", "by blast"], ["proof (state)\nthis:\n  partition_on B' Q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "have \"\\<Union>P' = B - B' \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> P' = B - B' \\<union> C", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Union> P' \\<subseteq> B - B' \\<union> C\n 2. B - B' \\<union> C \\<subseteq> \\<Union> P'", "have \"\\<Union>Q' = B \\<union> C\" \"\\<forall>X\\<in>Q'. \\<forall>X'\\<in>Q'. X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> Q' = B \\<union> C &&&\n    \\<forall>X\\<in>Q'.\n       \\<forall>X'\\<in>Q'.\n          X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}", "using Q'"], ["proof (prove)\nusing this:\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n\ngoal (1 subgoal):\n 1. \\<Union> Q' = B \\<union> C &&&\n    \\<forall>X\\<in>Q'.\n       \\<forall>X'\\<in>Q'.\n          X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}", "unfolding partition_on_def disjoint_def"], ["proof (prove)\nusing this:\n  Q' \\<in> {Q'.\n            \\<Union> Q' = B \\<union> C \\<and>\n            (\\<forall>a\\<in>Q'.\n                \\<forall>b\\<in>Q'.\n                   a \\<noteq> b \\<longrightarrow> a \\<inter> b = {}) \\<and>\n            {} \\<notin> Q'}\n\ngoal (1 subgoal):\n 1. \\<Union> Q' = B \\<union> C &&&\n    \\<forall>X\\<in>Q'.\n       \\<forall>X'\\<in>Q'.\n          X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}", "by auto"], ["proof (state)\nthis:\n  \\<Union> Q' = B \\<union> C\n  \\<forall>X\\<in>Q'.\n     \\<forall>X'\\<in>Q'. X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}\n\ngoal (2 subgoals):\n 1. \\<Union> P' \\<subseteq> B - B' \\<union> C\n 2. B - B' \\<union> C \\<subseteq> \\<Union> P'", "from this"], ["proof (chain)\npicking this:\n  \\<Union> Q' = B \\<union> C\n  \\<forall>X\\<in>Q'.\n     \\<forall>X'\\<in>Q'. X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}", "show \"\\<Union>P' \\<subseteq> B - B' \\<union> C\""], ["proof (prove)\nusing this:\n  \\<Union> Q' = B \\<union> C\n  \\<forall>X\\<in>Q'.\n     \\<forall>X'\\<in>Q'. X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}\n\ngoal (1 subgoal):\n 1. \\<Union> P' \\<subseteq> B - B' \\<union> C", "unfolding P' B' Q"], ["proof (prove)\nusing this:\n  \\<Union> Q' = B \\<union> C\n  \\<forall>X\\<in>Q'.\n     \\<forall>X'\\<in>Q'. X \\<noteq> X' \\<longrightarrow> X \\<inter> X' = {}\n\ngoal (1 subgoal):\n 1. \\<Union> ((\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}})\n    \\<subseteq> B -\n                \\<Union>\n                 ((\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' -\n                  {{}}) \\<union>\n                C", "by auto blast"], ["proof (state)\nthis:\n  \\<Union> P' \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. B - B' \\<union> C \\<subseteq> \\<Union> P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. B - B' \\<union> C \\<subseteq> \\<Union> P'", "show \"B - B' \\<union> C \\<subseteq> \\<Union>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B - B' \\<union> C \\<subseteq> \\<Union> P'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "assume \"x \\<in> B - B' \\<union> C\""], ["proof (state)\nthis:\n  x \\<in> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "from this"], ["proof (chain)\npicking this:\n  x \\<in> B - B' \\<union> C", "obtain X where X: \"x \\<in> X\" \"X \\<in> Q'\""], ["proof (prove)\nusing this:\n  x \\<in> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>x \\<in> X; X \\<in> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Q'"], ["proof (prove)\nusing this:\n  x \\<in> B - B' \\<union> C\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>x \\<in> X; X \\<in> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Diff_iff Un_iff mem_Collect_eq partition_on_partition_on_unique)"], ["proof (state)\nthis:\n  x \\<in> X\n  X \\<in> Q'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "have \"\\<forall>X \\<in> Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'", "unfolding B' Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>Q'.\n       X \\<subseteq> B \\<longrightarrow>\n       X \\<subseteq> \\<Union>\n                      ((\\<lambda>X. if X \\<subseteq> B then X else {}) `\n                       Q' -\n                       {{}})", "by auto"], ["proof (state)\nthis:\n  \\<forall>X\\<in>Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "from this X \\<open>x \\<in> B - B' \\<union> C\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'\n  x \\<in> X\n  X \\<in> Q'\n  x \\<in> B - B' \\<union> C", "have \"\\<not> X \\<subseteq> B\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'\n  x \\<in> X\n  X \\<in> Q'\n  x \\<in> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B", "using \\<open>B \\<inter> C = {}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>Q'. X \\<subseteq> B \\<longrightarrow> X \\<subseteq> B'\n  x \\<in> X\n  X \\<in> Q'\n  x \\<in> B - B' \\<union> C\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "from this \\<open>X \\<in> Q'\\<close>"], ["proof (chain)\npicking this:\n  \\<not> X \\<subseteq> B\n  X \\<in> Q'", "have \"X \\<in> P'\""], ["proof (prove)\nusing this:\n  \\<not> X \\<subseteq> B\n  X \\<in> Q'\n\ngoal (1 subgoal):\n 1. X \\<in> P'", "using P'"], ["proof (prove)\nusing this:\n  \\<not> X \\<subseteq> B\n  X \\<in> Q'\n  P' = (\\<lambda>X. if X \\<subseteq> B then {} else X) ` Q' - {{}}\n\ngoal (1 subgoal):\n 1. X \\<in> P'", "by auto"], ["proof (state)\nthis:\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B - B' \\<union> C \\<Longrightarrow> x \\<in> \\<Union> P'", "from this \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  X \\<in> P'\n  x \\<in> X", "show \"x \\<in> \\<Union>P'\""], ["proof (prove)\nusing this:\n  X \\<in> P'\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> P'", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<Union> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B - B' \\<union> C \\<subseteq> \\<Union> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> P' = B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from this"], ["proof (chain)\npicking this:\n  \\<Union> P' = B - B' \\<union> C", "have partition_on_P': \"partition_on (B - B' \\<union> C) P'\""], ["proof (prove)\nusing this:\n  \\<Union> P' = B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C) P'", "using partition_on_split1 Q'_prop Q' mem_Collect_eq"], ["proof (prove)\nusing this:\n  \\<Union> P' = B - B' \\<union> C\n  partition_on ?A (?P \\<union> ?Q) \\<Longrightarrow>\n  partition_on (\\<Union> ?P) ?P\n  Q' = P' \\<union> Q\n  Q' \\<in> {Q'. partition_on (B \\<union> C) Q'}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. partition_on (B - B' \\<union> C) P'", "by fastforce"], ["proof (state)\nthis:\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain P where P: \"P = (\\<lambda>X. X \\<inter> C) ` P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        P = (\\<lambda>X. X \\<inter> C) ` P' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P = (\\<lambda>X. X \\<inter> C) ` P'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from P partition_on_P' P'_witness"], ["proof (chain)\npicking this:\n  P = (\\<lambda>X. X \\<inter> C) ` P'\n  partition_on (B - B' \\<union> C) P'\n  \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C", "have \"partition_on C P\""], ["proof (prove)\nusing this:\n  P = (\\<lambda>X. X \\<inter> C) ` P'\n  partition_on (B - B' \\<union> C) P'\n  \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C\n\ngoal (1 subgoal):\n 1. partition_on C P", "using partition_on_intersect_on_elements"], ["proof (prove)\nusing this:\n  P = (\\<lambda>X. X \\<inter> C) ` P'\n  partition_on (B - B' \\<union> C) P'\n  \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C\n  \\<lbrakk>partition_on (?A \\<union> ?C) ?P;\n   \\<forall>X\\<in>?P. \\<exists>x. x \\<in> X \\<inter> ?C\\<rbrakk>\n  \\<Longrightarrow> partition_on ?C ((\\<lambda>X. X \\<inter> ?C) ` ?P)\n\ngoal (1 subgoal):\n 1. partition_on C P", "by auto"], ["proof (state)\nthis:\n  partition_on C P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain f where f: \"f = (\\<lambda>x. if x \\<in> B - B' then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C else undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f =\n        (\\<lambda>x.\n            if x \\<in> B - B'\n            then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n            else undefined) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f =\n  (\\<lambda>x.\n      if x \\<in> B - B' then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n      else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "have P'_prop: \"P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "assume \"X \\<in> P'\""], ["proof (state)\nthis:\n  X \\<in> P'\n\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "have X_subset: \"X \\<subseteq> (B - B') \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> B - B' \\<union> C", "using partition_on_P' \\<open>X \\<in> P'\\<close>"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. X \\<subseteq> B - B' \\<union> C", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "have \"X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "assume  \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "from this X_subset"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<subseteq> B - B' \\<union> C", "have \"x \\<in> (B - B') \\<union> C\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. x \\<in> B - B' \\<union> C", "by auto"], ["proof (state)\nthis:\n  x \\<in> B - B' \\<union> C\n\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "from this"], ["proof (chain)\npicking this:\n  x \\<in> B - B' \\<union> C", "have \"x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\""], ["proof (prove)\nusing this:\n  x \\<in> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n 2. x \\<in> C \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "assume \"x \\<in> C\""], ["proof (state)\nthis:\n  x \\<in> C\n\ngoal (2 subgoals):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n 2. x \\<in> C \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "from this \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> C\n  x \\<in> X", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> C\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "by simp"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "assume \"x \\<in> B - B'\""], ["proof (state)\nthis:\n  x \\<in> B - B'\n\ngoal (1 subgoal):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "from partition_on_P' \\<open>x \\<in> X\\<close> \\<open>X \\<in> P'\\<close>"], ["proof (chain)\npicking this:\n  partition_on (B - B' \\<union> C) P'\n  x \\<in> X\n  X \\<in> P'", "have \"(THE X. x \\<in> X \\<and> X \\<in> P') = X\""], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  x \\<in> X\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') = X", "by (simp add: partition_on_the_part_eq)"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (1 subgoal):\n 1. x \\<in> B - B' \\<Longrightarrow>\n    x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "from \\<open>x \\<in> B - B'\\<close> this"], ["proof (chain)\npicking this:\n  x \\<in> B - B'\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "unfolding f"], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> C \\<union>\n            {xa \\<in> B - B'.\n             (if xa \\<in> B - B'\n              then (THE X. xa \\<in> X \\<and> X \\<in> P') \\<inter> C\n              else undefined) =\n             X \\<inter> C}", "by auto"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow>\n  ?x2 \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n\ngoal (2 subgoals):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n 2. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "from this"], ["proof (chain)\npicking this:\n  ?x2 \\<in> X \\<Longrightarrow>\n  ?x2 \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}", "show \"X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> X \\<Longrightarrow>\n  ?x2 \\<in> X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C} \\<subseteq> X", "show \"X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C} \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C}\n    \\<subseteq> X", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<inter> C \\<union>\n               {xa \\<in> B - B'. f xa = X \\<inter> C} \\<Longrightarrow>\n       x \\<in> X", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<inter> C \\<union>\n               {xa \\<in> B - B'. f xa = X \\<inter> C} \\<Longrightarrow>\n       x \\<in> X", "assume \"x \\<in> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\""], ["proof (state)\nthis:\n  x \\<in> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<inter> C \\<union>\n               {xa \\<in> B - B'. f xa = X \\<inter> C} \\<Longrightarrow>\n       x \\<in> X", "from this"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}", "show \"x \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. x \\<in> X", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<inter> C \\<Longrightarrow> x \\<in> X\n 2. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "assume \"x \\<in> X \\<inter> C\""], ["proof (state)\nthis:\n  x \\<in> X \\<inter> C\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<inter> C \\<Longrightarrow> x \\<in> X\n 2. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> C", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> C\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by simp"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "assume x_in: \"x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\""], ["proof (state)\nthis:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this"], ["proof (chain)\npicking this:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}", "have ex1: \"\\<exists>!X. x \\<in> X \\<and> X \\<in> P'\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "using partition_on_P'"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "by (auto intro!: partition_on_partition_on_unique)"], ["proof (state)\nthis:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from x_in X_subset"], ["proof (chain)\npicking this:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\n  X \\<subseteq> B - B' \\<union> C", "have eq: \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> B - B'. f x = X \\<inter> C}\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "unfolding f"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> B - B'.\n           (if x \\<in> B - B'\n            then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n            else undefined) =\n           X \\<inter> C}\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "by auto"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from P'_nosubset \\<open>X \\<in> P'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n  X \\<in> P'", "have \"\\<not> X \\<subseteq> B\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. \\<not> X \\<subseteq> B\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B", "by simp"], ["proof (state)\nthis:\n  \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this"], ["proof (chain)\npicking this:\n  \\<not> X \\<subseteq> B", "have \"X \\<inter> C \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. X \\<inter> C \\<noteq> {}", "using X_subset assms(3)"], ["proof (prove)\nusing this:\n  \\<not> X \\<subseteq> B\n  X \\<subseteq> B - B' \\<union> C\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. X \\<inter> C \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  X \\<inter> C \\<noteq> {}\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this"], ["proof (chain)\npicking this:\n  X \\<inter> C \\<noteq> {}", "obtain y where y: \"y \\<in> X \\<inter> C\""], ["proof (prove)\nusing this:\n  X \\<inter> C \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> X \\<inter> C \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> X \\<inter> C\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this eq"], ["proof (chain)\npicking this:\n  y \\<in> X \\<inter> C\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "have y_in: \"y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\""], ["proof (prove)\nusing this:\n  y \\<in> X \\<inter> C\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\n\ngoal (1 subgoal):\n 1. y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C", "by simp"], ["proof (state)\nthis:\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from y y_in"], ["proof (chain)\npicking this:\n  y \\<in> X \\<inter> C\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C", "have \"y \\<in> X\" \"y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\""], ["proof (prove)\nusing this:\n  y \\<in> X \\<inter> C\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n\ngoal (1 subgoal):\n 1. y \\<in> X &&& y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')", "by auto"], ["proof (state)\nthis:\n  y \\<in> X\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "moreover"], ["proof (state)\nthis:\n  y \\<in> X\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from y"], ["proof (chain)\npicking this:\n  y \\<in> X \\<inter> C", "have \"\\<exists>!X. y \\<in> X \\<and> X \\<in> P'\""], ["proof (prove)\nusing this:\n  y \\<in> X \\<inter> C\n\ngoal (1 subgoal):\n 1. \\<exists>!X. y \\<in> X \\<and> X \\<in> P'", "using partition_on_P'"], ["proof (prove)\nusing this:\n  y \\<in> X \\<inter> C\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. \\<exists>!X. y \\<in> X \\<and> X \\<in> P'", "by (simp add: partition_on_partition_on_unique)"], ["proof (state)\nthis:\n  \\<exists>!X. y \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "moreover"], ["proof (state)\nthis:\n  \\<exists>!X. y \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "have \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'", "using ex1"], ["proof (prove)\nusing this:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'", "by (rule the1I2) auto"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> X\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n  \\<exists>!X. y \\<in> X \\<and> X \\<in> P'\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'", "have \"(THE X. x \\<in> X \\<and> X \\<in> P') = X\""], ["proof (prove)\nusing this:\n  y \\<in> X\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n  \\<exists>!X. y \\<in> X \\<and> X \\<in> P'\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') = X", "using \\<open>X \\<in> P'\\<close>"], ["proof (prove)\nusing this:\n  y \\<in> X\n  y \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n  \\<exists>!X. y \\<in> X \\<and> X \\<in> P'\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') = X", "by auto"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> B - B'. f x = X \\<inter> C} \\<Longrightarrow> x \\<in> X", "from this ex1"], ["proof (chain)\npicking this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by (auto intro: the1I2)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X \\<inter> C \\<union> {xa \\<in> B - B'. f xa = X \\<inter> C} \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "from \\<open>X \\<in> P'\\<close> this"], ["proof (chain)\npicking this:\n  X \\<in> P'\n  X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}", "have \"X \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\""], ["proof (prove)\nusing this:\n  X \\<in> P'\n  X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. X \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P", "unfolding P"], ["proof (prove)\nusing this:\n  X \\<in> P'\n  X = X \\<inter> C \\<union> {x \\<in> B - B'. f x = X \\<inter> C}\n\ngoal (1 subgoal):\n 1. X \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n            (\\<lambda>X. X \\<inter> C) ` P'", "by simp"], ["proof (state)\nthis:\n  X \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "}"], ["proof (state)\nthis:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (2 subgoals):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n 2. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "from this"], ["proof (chain)\npicking this:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P", "show \"P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\""], ["proof (prove)\nusing this:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P", ".."], ["proof (state)\nthis:\n  P' \\<subseteq> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "assume x_in_image: \"x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "{"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "assume \"X \\<in> P'\""], ["proof (state)\nthis:\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "have \"{x \\<in> B - B'. f x = X \\<inter> C} =  {x \\<in> B - B'. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "assume \"x \\<in> B - B'\""], ["proof (state)\nthis:\n  x \\<in> B - B'\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "from this"], ["proof (chain)\npicking this:\n  x \\<in> B - B'", "have ex1: \"\\<exists>!X. x \\<in> X \\<and> X \\<in> P'\""], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n\ngoal (1 subgoal):\n 1. \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "using partition_on_P'"], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "by (auto intro!: partition_on_partition_on_unique)"], ["proof (state)\nthis:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "from this"], ["proof (chain)\npicking this:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'", "have in_p: \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\"\n              and x_in: \"x \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\""], ["proof (prove)\nusing this:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P' &&&\n    x \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')", "by (metis (mono_tags, lifting) theI)+"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\n  x \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "have \"f x = X \\<inter> C \\<longleftrightarrow> (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x = X \\<inter> C) =\n    ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C)", "using \\<open>x \\<in> B - B'\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n\ngoal (1 subgoal):\n 1. (f x = X \\<inter> C) =\n    ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C)", "unfolding f"], ["proof (prove)\nusing this:\n  x \\<in> B - B'\n\ngoal (1 subgoal):\n 1. ((if x \\<in> B - B' then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C\n      else undefined) =\n     X \\<inter> C) =\n    ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C)", "by auto"], ["proof (state)\nthis:\n  (f x = X \\<inter> C) =\n  ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "also"], ["proof (state)\nthis:\n  (f x = X \\<inter> C) =\n  ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "have \"... \\<longleftrightarrow> (THE X. x \\<in> X \\<and> X \\<in> P') = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C) =\n    ((THE X. x \\<in> X \\<and> X \\<in> P') = X)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X\n 2. (THE X. x \\<in> X \\<and> X \\<in> P') = X \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "assume \"(THE X. x \\<in> X \\<and> X \\<in> P') = X\""], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (2 subgoals):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X\n 2. (THE X. x \\<in> X \\<and> X \\<in> P') = X \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "from this"], ["proof (chain)\npicking this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X", "show \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\""], ["proof (prove)\nusing this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C", "by auto"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X", "assume \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\""], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X", "have \"(THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}", "using P'_witness \\<open>(THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\\<close> \\<open>X \\<in> P'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P'. \\<exists>x. x \\<in> X \\<inter> C\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C =\n    X \\<inter> C \\<Longrightarrow>\n    (THE X. x \\<in> X \\<and> X \\<in> P') = X", "from this"], ["proof (chain)\npicking this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}", "show \"(THE X. x \\<in> X \\<and> X \\<in> P') = X\""], ["proof (prove)\nusing this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') = X", "using partition_on_P'[unfolded partition_on_def disjoint_def] in_p \\<open>X \\<in> P'\\<close>"], ["proof (prove)\nusing this:\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> X \\<noteq> {}\n  \\<Union> P' = B - B' \\<union> C \\<and>\n  (\\<forall>a\\<in>P'.\n      \\<forall>b\\<in>P'.\n         a \\<noteq> b \\<longrightarrow> a \\<inter> b = {}) \\<and>\n  {} \\<notin> P'\n  (THE X. x \\<in> X \\<and> X \\<in> P') \\<in> P'\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. (THE X. x \\<in> X \\<and> X \\<in> P') = X", "by metis"], ["proof (state)\nthis:\n  (THE X. x \\<in> X \\<and> X \\<in> P') = X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C) =\n  ((THE X. x \\<in> X \\<and> X \\<in> P') = X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "also"], ["proof (state)\nthis:\n  ((THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C = X \\<inter> C) =\n  ((THE X. x \\<in> X \\<and> X \\<in> P') = X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "have \"... \\<longleftrightarrow> x \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((THE X. x \\<in> X \\<and> X \\<in> P') = X) = (x \\<in> X)", "using ex1 \\<open>X \\<in> P'\\<close> x_in"], ["proof (prove)\nusing this:\n  \\<exists>!X. x \\<in> X \\<and> X \\<in> P'\n  X \\<in> P'\n  x \\<in> (THE X. x \\<in> X \\<and> X \\<in> P')\n\ngoal (1 subgoal):\n 1. ((THE X. x \\<in> X \\<and> X \\<in> P') = X) = (x \\<in> X)", "by (auto; metis (no_types, lifting) the_equality)"], ["proof (state)\nthis:\n  ((THE X. x \\<in> X \\<and> X \\<in> P') = X) = (x \\<in> X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "finally"], ["proof (chain)\npicking this:\n  (f x = X \\<inter> C) = (x \\<in> X)", "have \"f x = X \\<inter> C \\<longleftrightarrow> x \\<in> X\""], ["proof (prove)\nusing this:\n  (f x = X \\<inter> C) = (x \\<in> X)\n\ngoal (1 subgoal):\n 1. (f x = X \\<inter> C) = (x \\<in> X)", "."], ["proof (state)\nthis:\n  (f x = X \\<inter> C) = (x \\<in> X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "}"], ["proof (state)\nthis:\n  ?xa2 \\<in> B - B' \\<Longrightarrow>\n  (f ?xa2 = X \\<inter> C) = (?xa2 \\<in> X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "from this"], ["proof (chain)\npicking this:\n  ?xa2 \\<in> B - B' \\<Longrightarrow>\n  (f ?xa2 = X \\<inter> C) = (?xa2 \\<in> X)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?xa2 \\<in> B - B' \\<Longrightarrow>\n  (f ?xa2 = X \\<inter> C) = (?xa2 \\<in> X)\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}", "by auto"], ["proof (state)\nthis:\n  {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "moreover"], ["proof (state)\nthis:\n  {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "have  \"X \\<subseteq> B - B' \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> B - B' \\<union> C", "using partition_on_P' \\<open>X \\<in> P'\\<close>"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n  X \\<in> P'\n\ngoal (1 subgoal):\n 1. X \\<subseteq> B - B' \\<union> C", "by (blast elim: partition_onE)"], ["proof (state)\nthis:\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "ultimately"], ["proof (chain)\npicking this:\n  {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}\n  X \\<subseteq> B - B' \\<union> C", "have \"X \\<inter> C \\<union> {x \\<in> B. x \\<notin> B' \\<and> f x = X \\<inter> C} = X\""], ["proof (prove)\nusing this:\n  {x \\<in> B - B'. f x = X \\<inter> C} = {x \\<in> B - B'. x \\<in> X}\n  X \\<subseteq> B - B' \\<union> C\n\ngoal (1 subgoal):\n 1. X \\<inter> C \\<union>\n    {x \\<in> B. x \\<notin> B' \\<and> f x = X \\<inter> C} =\n    X", "by auto"], ["proof (state)\nthis:\n  X \\<inter> C \\<union>\n  {x \\<in> B. x \\<notin> B' \\<and> f x = X \\<inter> C} =\n  X\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "}"], ["proof (state)\nthis:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<inter> C \\<union>\n  {x \\<in> B. x \\<notin> B' \\<and> f x = ?X2 \\<inter> C} =\n  ?X2\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "from this x_in_image"], ["proof (chain)\npicking this:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<inter> C \\<union>\n  {x \\<in> B. x \\<notin> B' \\<and> f x = ?X2 \\<inter> C} =\n  ?X2\n  x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P", "have \"x \\<in> P'\""], ["proof (prove)\nusing this:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<inter> C \\<union>\n  {x \\<in> B. x \\<notin> B' \\<and> f x = ?X2 \\<inter> C} =\n  ?X2\n  x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. x \\<in> P'", "unfolding P"], ["proof (prove)\nusing this:\n  ?X2 \\<in> P' \\<Longrightarrow>\n  ?X2 \\<inter> C \\<union>\n  {x \\<in> B. x \\<notin> B' \\<and> f x = ?X2 \\<inter> C} =\n  ?X2\n  x \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n          (\\<lambda>X. X \\<inter> C) ` P'\n\ngoal (1 subgoal):\n 1. x \\<in> P'", "by auto"], ["proof (state)\nthis:\n  x \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n        P \\<Longrightarrow>\n  ?x2 \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", "from this"], ["proof (chain)\npicking this:\n  ?x2\n  \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n        P \\<Longrightarrow>\n  ?x2 \\<in> P'", "show \"(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'\""], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n        P \\<Longrightarrow>\n  ?x2 \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'", ".."], ["proof (state)\nthis:\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<subseteq> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from partition_on_P'"], ["proof (chain)\npicking this:\n  partition_on (B - B' \\<union> C) P'", "have f_prop: \"f \\<in> (B - B') \\<rightarrow>\\<^sub>E P\""], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. f \\<in> B - B' \\<rightarrow>\\<^sub>E P", "unfolding f P"], ["proof (prove)\nusing this:\n  partition_on (B - B' \\<union> C) P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> B - B'\n        then (THE X. x \\<in> X \\<and> X \\<in> P') \\<inter> C else undefined)\n    \\<in> B - B' \\<rightarrow>\\<^sub>E (\\<lambda>X. X \\<inter> C) ` P'", "by (auto simp add: partition_on_the_part_mem)"], ["proof (state)\nthis:\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from Q B'"], ["proof (chain)\npicking this:\n  Q = (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' - {{}}\n  B' = \\<Union> Q", "have \"B' \\<subseteq> B\""], ["proof (prove)\nusing this:\n  Q = (\\<lambda>X. if X \\<subseteq> B then X else {}) ` Q' - {{}}\n  B' = \\<Union> Q\n\ngoal (1 subgoal):\n 1. B' \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  B' \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain k where k: \"k = card B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k. k = card B' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  k = card B'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from \\<open>finite B\\<close> \\<open>B' \\<subseteq> B\\<close> k"], ["proof (chain)\npicking this:\n  finite B\n  B' \\<subseteq> B\n  k = card B'", "have k_prop: \"k \\<in> {0..card B}\""], ["proof (prove)\nusing this:\n  finite B\n  B' \\<subseteq> B\n  k = card B'\n\ngoal (1 subgoal):\n 1. k \\<in> {0..card B}", "by (simp add: card_mono)"], ["proof (state)\nthis:\n  k \\<in> {0..card B}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "obtain j where j: \"j = card P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. j = card P \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  j = card P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from j \\<open>partition_on C P\\<close>"], ["proof (chain)\npicking this:\n  j = card P\n  partition_on C P", "have j_prop: \"j \\<in> {0..card C}\""], ["proof (prove)\nusing this:\n  j = card P\n  partition_on C P\n\ngoal (1 subgoal):\n 1. j \\<in> {0..card C}", "by (simp add: assms(2) partition_on_le_set_elements)"], ["proof (state)\nthis:\n  j \\<in> {0..card C}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from \\<open>partition_on C P\\<close> j"], ["proof (chain)\npicking this:\n  partition_on C P\n  j = card P", "have P_prop: \"partition_on C P \\<and> card P = j\""], ["proof (prove)\nusing this:\n  partition_on C P\n  j = card P\n\ngoal (1 subgoal):\n 1. partition_on C P \\<and> card P = j", "by auto"], ["proof (state)\nthis:\n  partition_on C P \\<and> card P = j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "from k \\<open>B' \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  k = card B'\n  B' \\<subseteq> B", "have B'_prop: \"B' \\<subseteq> B \\<and> card B' = k\""], ["proof (prove)\nusing this:\n  k = card B'\n  B' \\<subseteq> B\n\ngoal (1 subgoal):\n 1. B' \\<subseteq> B \\<and> card B' = k", "by auto"], ["proof (state)\nthis:\n  B' \\<subseteq> B \\<and> card B' = k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. partition_on (B \\<union> C) P} \\<Longrightarrow>\n       x \\<in> construct_partition_on B C", "show \"Q' \\<in> construct_partition_on B C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q' \\<in> construct_partition_on B C", "using j_prop k_prop P_prop B'_prop Q_prop P'_prop f_prop Q'_prop"], ["proof (prove)\nusing this:\n  j \\<in> {0..card C}\n  k \\<in> {0..card B}\n  partition_on C P \\<and> card P = j\n  B' \\<subseteq> B \\<and> card B' = k\n  partition_on B' Q\n  P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n  Q' = P' \\<union> Q\n\ngoal (1 subgoal):\n 1. Q' \\<in> construct_partition_on B C", "unfolding construct_partition_on_def"], ["proof (prove)\nusing this:\n  j \\<in> {0..card C}\n  k \\<in> {0..card B}\n  partition_on C P \\<and> card P = j\n  B' \\<subseteq> B \\<and> card B' = k\n  partition_on B' Q\n  P' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n  Q' = P' \\<union> Q\n\ngoal (1 subgoal):\n 1. Q' \\<in> {0..card B} \\<bind>\n             (\\<lambda>k.\n                 {0..card C} \\<bind>\n                 (\\<lambda>j.\n                     {P. partition_on C P \\<and> card P = j} \\<bind>\n                     (\\<lambda>P.\n                         {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n                         (\\<lambda>B'.\n                             Collect (partition_on B') \\<bind>\n                             (\\<lambda>Q.\n                                 B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                                 (\\<lambda>f.\n                                     {(\\<lambda>X.\n    X \\<union> {x \\<in> B - B'. f x = X}) `\nP} \\<bind>\n                                     (\\<lambda>P'. {P' \\<union> Q})))))))", "by (auto simp del: atLeastAtMost_iff) blast"], ["proof (state)\nthis:\n  Q' \\<in> construct_partition_on B C\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Injectivity of the Set Construction\\<close>"], ["", "lemma injectivity:\n  assumes \"B \\<inter> C = {}\"\n  assumes P: \"(partition_on C P \\<and> card P = j) \\<and> (partition_on C P' \\<and> card P' = j')\"\n  assumes B': \"(B' \\<subseteq> B \\<and> card B' = k) \\<and> (B'' \\<subseteq> B \\<and> card B'' = k')\"\n  assumes Q: \"partition_on B' Q \\<and> partition_on B'' Q'\"\n  assumes f: \"f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and> g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'\"\n  assumes P': \"P'' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<and>\n    P''' = (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\"\n  assumes eq_result: \"P'' \\<union> Q = P''' \\<union> Q'\"\n  shows \"f = g\" and \"Q = Q'\" and \"B' = B''\"\n    and \"P = P'\" and \"j = j'\" and \"k = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g &&& Q = Q' &&& B' = B'') &&& P = P' &&& j = j' &&& k = k'", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. f = g\n 2. Q = Q'\n 3. B' = B''\n 4. P = P'\n 5. j = j'\n 6. k = k'", "have P_nonempty_sets: \"\\<forall>X\\<in>P. \\<exists>c\\<in>C. c \\<in> X\" \"\\<forall>X\\<in>P'. \\<exists>c\\<in>C. c \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. \\<exists>c\\<in>C. c \\<in> X &&&\n    \\<forall>X\\<in>P'. \\<exists>c\\<in>C. c \\<in> X", "using P"], ["proof (prove)\nusing this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. \\<exists>c\\<in>C. c \\<in> X &&&\n    \\<forall>X\\<in>P'. \\<exists>c\\<in>C. c \\<in> X", "by (force elim: partition_onE)+"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P. \\<exists>c\\<in>C. c \\<in> X\n  \\<forall>X\\<in>P'. \\<exists>c\\<in>C. c \\<in> X\n\ngoal (6 subgoals):\n 1. f = g\n 2. Q = Q'\n 3. B' = B''\n 4. P = P'\n 5. j = j'\n 6. k = k'", "have 1: \"\\<forall>X\\<in>P''. \\<exists>c\\<in>C. c \\<in> X\" \"\\<forall>X\\<in>P'''. \\<exists>c\\<in>C. c \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P''. \\<exists>c\\<in>C. c \\<in> X &&&\n    \\<forall>X\\<in>P'''. \\<exists>c\\<in>C. c \\<in> X", "using P' P_nonempty_sets"], ["proof (prove)\nusing this:\n  P'' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<and>\n  P''' = (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n  \\<forall>X\\<in>P. \\<exists>c\\<in>C. c \\<in> X\n  \\<forall>X\\<in>P'. \\<exists>c\\<in>C. c \\<in> X\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P''. \\<exists>c\\<in>C. c \\<in> X &&&\n    \\<forall>X\\<in>P'''. \\<exists>c\\<in>C. c \\<in> X", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P''. \\<exists>c\\<in>C. c \\<in> X\n  \\<forall>X\\<in>P'''. \\<exists>c\\<in>C. c \\<in> X\n\ngoal (6 subgoals):\n 1. f = g\n 2. Q = Q'\n 3. B' = B''\n 4. P = P'\n 5. j = j'\n 6. k = k'", "have 2: \"\\<forall>X\\<in>Q. \\<forall>x\\<in>X. x \\<notin> C\" \"\\<forall>X\\<in>Q'. \\<forall>x\\<in>X. x \\<notin> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>Q. \\<forall>x\\<in>X. x \\<notin> C &&&\n    \\<forall>X\\<in>Q'. \\<forall>x\\<in>X. x \\<notin> C", "using \\<open>B \\<inter> C = {}\\<close> Q B'"], ["proof (prove)\nusing this:\n  B \\<inter> C = {}\n  partition_on B' Q \\<and> partition_on B'' Q'\n  (B' \\<subseteq> B \\<and> card B' = k) \\<and>\n  B'' \\<subseteq> B \\<and> card B'' = k'\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>Q. \\<forall>x\\<in>X. x \\<notin> C &&&\n    \\<forall>X\\<in>Q'. \\<forall>x\\<in>X. x \\<notin> C", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  \\<forall>X\\<in>Q. \\<forall>x\\<in>X. x \\<notin> C\n  \\<forall>X\\<in>Q'. \\<forall>x\\<in>X. x \\<notin> C\n\ngoal (6 subgoals):\n 1. f = g\n 2. Q = Q'\n 3. B' = B''\n 4. P = P'\n 5. j = j'\n 6. k = k'", "from eq_result"], ["proof (chain)\npicking this:\n  P'' \\<union> Q = P''' \\<union> Q'", "have \"P'' = P'''\" and \"Q = Q'\""], ["proof (prove)\nusing this:\n  P'' \\<union> Q = P''' \\<union> Q'\n\ngoal (1 subgoal):\n 1. P'' = P''' &&& Q = Q'", "by (auto dest: injectivity_union[OF _ 1 2])"], ["proof (state)\nthis:\n  P'' = P'''\n  Q = Q'\n\ngoal (6 subgoals):\n 1. f = g\n 2. Q = Q'\n 3. B' = B''\n 4. P = P'\n 5. j = j'\n 6. k = k'", "from this Q"], ["proof (chain)\npicking this:\n  P'' = P'''\n  Q = Q'\n  partition_on B' Q \\<and> partition_on B'' Q'", "show \"Q = Q'\" and \"B' = B''\""], ["proof (prove)\nusing this:\n  P'' = P'''\n  Q = Q'\n  partition_on B' Q \\<and> partition_on B'' Q'\n\ngoal (1 subgoal):\n 1. Q = Q' &&& B' = B''", "by (auto intro!: partition_on_eq_implies_eq_carrier)"], ["proof (state)\nthis:\n  Q = Q'\n  B' = B''\n\ngoal (4 subgoals):\n 1. f = g\n 2. P = P'\n 3. j = j'\n 4. k = k'", "have subset_C: \"\\<forall>X\\<in>P. X \\<subseteq> C\" \"\\<forall>X\\<in>P'. X \\<subseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. X \\<subseteq> C &&& \\<forall>X\\<in>P'. X \\<subseteq> C", "using P"], ["proof (prove)\nusing this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. X \\<subseteq> C &&& \\<forall>X\\<in>P'. X \\<subseteq> C", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P. X \\<subseteq> C\n  \\<forall>X\\<in>P'. X \\<subseteq> C\n\ngoal (4 subgoals):\n 1. f = g\n 2. P = P'\n 3. j = j'\n 4. k = k'", "have eq_image: \"(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P = (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n    (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'", "using P' \\<open>P'' = P'''\\<close>"], ["proof (prove)\nusing this:\n  P'' = (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P \\<and>\n  P''' = (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n  P'' = P'''\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n    (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n  (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n\ngoal (4 subgoals):\n 1. f = g\n 2. P = P'\n 3. j = j'\n 4. k = k'", "from this \\<open>B \\<inter> C = {}\\<close>"], ["proof (chain)\npicking this:\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n  (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n  B \\<inter> C = {}", "show \"P = P'\""], ["proof (prove)\nusing this:\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n  (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n  B \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. P = P'", "by (auto dest: injectivity_image_union[OF _ subset_C])"], ["proof (state)\nthis:\n  P = P'\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "have eq2: \"(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P = (\\<lambda>X. X \\<union> {x \\<in> B - B'. g x = X}) ` P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n    (\\<lambda>X. X \\<union> {x \\<in> B - B'. g x = X}) ` P", "using \\<open>P = P'\\<close> \\<open>B' = B''\\<close> eq_image"], ["proof (prove)\nusing this:\n  P = P'\n  B' = B''\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n  (\\<lambda>X. X \\<union> {x \\<in> B - B''. g x = X}) ` P'\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n    (\\<lambda>X. X \\<union> {x \\<in> B - B'. g x = X}) ` P", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P =\n  (\\<lambda>X. X \\<union> {x \\<in> B - B'. g x = X}) ` P\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "from P"], ["proof (chain)\npicking this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'", "have P_props: \"\\<forall>X \\<in> P. X \\<subseteq> C\" \"\\<forall>X \\<in> P. X \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. X \\<subseteq> C &&& \\<forall>X\\<in>P. X \\<noteq> {}", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P. X \\<subseteq> C\n  \\<forall>X\\<in>P. X \\<noteq> {}\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "have invert: \"\\<forall>X\\<in>P. (X \\<union> {x \\<in> B - B'. f x = X}) \\<inter> C = X \\<and> (X \\<union> {x \\<in> B - B'. g x = X}) \\<inter> C = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P.\n       (X \\<union> {x \\<in> B - B'. f x = X}) \\<inter> C = X \\<and>\n       (X \\<union> {x \\<in> B - B'. g x = X}) \\<inter> C = X", "using \\<open>B \\<inter> C = {}\\<close> P_props"], ["proof (prove)\nusing this:\n  B \\<inter> C = {}\n  \\<forall>X\\<in>P. X \\<subseteq> C\n  \\<forall>X\\<in>P. X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P.\n       (X \\<union> {x \\<in> B - B'. f x = X}) \\<inter> C = X \\<and>\n       (X \\<union> {x \\<in> B - B'. g x = X}) \\<inter> C = X", "by auto"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P.\n     (X \\<union> {x \\<in> B - B'. f x = X}) \\<inter> C = X \\<and>\n     (X \\<union> {x \\<in> B - B'. g x = X}) \\<inter> C = X\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "have eq3: \"\\<forall>X \\<in> P. (X \\<union> {x \\<in> B - B'. f x = X}) = (X \\<union> {x \\<in> B - B'. g x = X})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P.\n       X \\<union> {x \\<in> B - B'. f x = X} =\n       X \\<union> {x \\<in> B - B'. g x = X}", "using injectivity_image[OF eq2 invert]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>P.\n     x \\<union> {xa \\<in> B - B'. f xa = x} =\n     x \\<union> {xa \\<in> B - B'. g xa = x}\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P.\n       X \\<union> {x \\<in> B - B'. f x = X} =\n       X \\<union> {x \\<in> B - B'. g x = X}", "by blast"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P.\n     X \\<union> {x \\<in> B - B'. f x = X} =\n     X \\<union> {x \\<in> B - B'. g x = X}\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "have eq4: \"\\<forall>X \\<in> P. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "assume \"X \\<in> P\""], ["proof (state)\nthis:\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "from this P"], ["proof (chain)\npicking this:\n  X \\<in> P\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'", "have \"X \\<subseteq> C\""], ["proof (prove)\nusing this:\n  X \\<in> P\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n\ngoal (1 subgoal):\n 1. X \\<subseteq> C", "by (auto elim: partition_onE)"], ["proof (state)\nthis:\n  X \\<subseteq> C\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "have disjoint: \"X \\<inter> {x \\<in> B - B'. f x = X} = {}\" \"X \\<inter> {x \\<in> B - B'. g x = X} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> {x \\<in> B - B'. f x = X} = {} &&&\n    X \\<inter> {x \\<in> B - B'. g x = X} = {}", "using \\<open>B \\<inter> C = {}\\<close> \\<open>X \\<subseteq> C\\<close>"], ["proof (prove)\nusing this:\n  B \\<inter> C = {}\n  X \\<subseteq> C\n\ngoal (1 subgoal):\n 1. X \\<inter> {x \\<in> B - B'. f x = X} = {} &&&\n    X \\<inter> {x \\<in> B - B'. g x = X} = {}", "by auto"], ["proof (state)\nthis:\n  X \\<inter> {x \\<in> B - B'. f x = X} = {}\n  X \\<inter> {x \\<in> B - B'. g x = X} = {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "from eq3 \\<open>X \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P.\n     X \\<union> {x \\<in> B - B'. f x = X} =\n     X \\<union> {x \\<in> B - B'. g x = X}\n  X \\<in> P", "have \"X \\<union> {x \\<in> B - B'. f x = X} = X \\<union> {x \\<in> B - B'. g x = X}\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P.\n     X \\<union> {x \\<in> B - B'. f x = X} =\n     X \\<union> {x \\<in> B - B'. g x = X}\n  X \\<in> P\n\ngoal (1 subgoal):\n 1. X \\<union> {x \\<in> B - B'. f x = X} =\n    X \\<union> {x \\<in> B - B'. g x = X}", "by auto"], ["proof (state)\nthis:\n  X \\<union> {x \\<in> B - B'. f x = X} =\n  X \\<union> {x \\<in> B - B'. g x = X}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> P \\<Longrightarrow>\n       {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "from this disjoint"], ["proof (chain)\npicking this:\n  X \\<union> {x \\<in> B - B'. f x = X} =\n  X \\<union> {x \\<in> B - B'. g x = X}\n  X \\<inter> {x \\<in> B - B'. f x = X} = {}\n  X \\<inter> {x \\<in> B - B'. g x = X} = {}", "show \"{x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\""], ["proof (prove)\nusing this:\n  X \\<union> {x \\<in> B - B'. f x = X} =\n  X \\<union> {x \\<in> B - B'. g x = X}\n  X \\<inter> {x \\<in> B - B'. f x = X} = {}\n  X \\<inter> {x \\<in> B - B'. g x = X} = {}\n\ngoal (1 subgoal):\n 1. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}", "by (auto intro: injectivity_union)"], ["proof (state)\nthis:\n  {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>P. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "from eq4 f"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>P. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and>\n  g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'", "have eq5: \"\\<forall>b\\<in>B - B'. f b = g b\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>P. {x \\<in> B - B'. f x = X} = {x \\<in> B - B'. g x = X}\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and>\n  g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>B - B'. f b = g b", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>B - B'. f b = g b\n\ngoal (3 subgoals):\n 1. f = g\n 2. j = j'\n 3. k = k'", "from eq5 f \\<open>B' = B''\\<close> \\<open>P = P'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>B - B'. f b = g b\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and>\n  g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'\n  B' = B''\n  P = P'", "show eq6: \"f = g\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>B - B'. f b = g b\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<and>\n  g \\<in> B - B'' \\<rightarrow>\\<^sub>E P'\n  B' = B''\n  P = P'\n\ngoal (1 subgoal):\n 1. f = g", "by (auto intro: extensional_funcset_ext)"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. j = j'\n 2. k = k'", "from P \\<open>P = P'\\<close>"], ["proof (chain)\npicking this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n  P = P'", "show \"j = j'\""], ["proof (prove)\nusing this:\n  (partition_on C P \\<and> card P = j) \\<and>\n  partition_on C P' \\<and> card P' = j'\n  P = P'\n\ngoal (1 subgoal):\n 1. j = j'", "by simp"], ["proof (state)\nthis:\n  j = j'\n\ngoal (1 subgoal):\n 1. k = k'", "from B' \\<open>B' = B''\\<close>"], ["proof (chain)\npicking this:\n  (B' \\<subseteq> B \\<and> card B' = k) \\<and>\n  B'' \\<subseteq> B \\<and> card B'' = k'\n  B' = B''", "show \"k = k'\""], ["proof (prove)\nusing this:\n  (B' \\<subseteq> B \\<and> card B' = k) \\<and>\n  B'' \\<subseteq> B \\<and> card B'' = k'\n  B' = B''\n\ngoal (1 subgoal):\n 1. k = k'", "by simp"], ["proof (state)\nthis:\n  k = k'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The Generalized Bell Recurrence Relation\\<close>"], ["", "theorem Bell_eq:\n  \"Bell (n + m) = (\\<Sum>k\\<le>n. \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "define A where \"A = {0..<n + m}\""], ["proof (state)\nthis:\n  A = {0..<n + m}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "define B where \"B = {0..<n}\""], ["proof (state)\nthis:\n  B = {0..<n}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "define C where \"C = {n..<n + m}\""], ["proof (state)\nthis:\n  C = {n..<n + m}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"A = B \\<union> C\" \"B \\<inter> C = {}\" \"finite B\" \"card B = n\" \"finite C\" \"card C = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A = B \\<union> C &&& B \\<inter> C = {} &&& finite B) &&&\n    card B = n &&& finite C &&& card C = m", "unfolding A_def B_def C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({0..<n + m} = {0..<n} \\<union> {n..<n + m} &&&\n     {0..<n} \\<inter> {n..<n + m} = {} &&& finite {0..<n}) &&&\n    card {0..<n} = n &&& finite {n..<n + m} &&& card {n..<n + m} = m", "by auto"], ["proof (state)\nthis:\n  A = B \\<union> C\n  B \\<inter> C = {}\n  finite B\n  card B = n\n  finite C\n  card C = m\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have step1: \"Bell (n + m) = card {P. partition_on A P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell (n + m) = card {P. partition_on A P}", "unfolding Bell_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Collect (partition_on {0..<n + m})) =\n    card {P. partition_on {0..<n + m} P}", ".."], ["proof (state)\nthis:\n  Bell (n + m) = card {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from \\<open>A = B \\<union> C\\<close> \\<open>B \\<inter> C = {}\\<close> \\<open>finite B\\<close> \\<open>finite C\\<close>"], ["proof (chain)\npicking this:\n  A = B \\<union> C\n  B \\<inter> C = {}\n  finite B\n  finite C", "have step2: \"card {P. partition_on A P} = card (construct_partition_on B C)\""], ["proof (prove)\nusing this:\n  A = B \\<union> C\n  B \\<inter> C = {}\n  finite B\n  finite C\n\ngoal (1 subgoal):\n 1. card {P. partition_on A P} = card (construct_partition_on B C)", "by (simp add: construct_partition_on)"], ["proof (state)\nthis:\n  card {P. partition_on A P} = card (construct_partition_on B C)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note injectivity = injectivity[OF \\<open>B \\<inter> C = {}\\<close>]"], ["proof (state)\nthis:\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?f = ?g\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?Q = ?Q'\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?B' = ?B''\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?P = ?P'\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?j = ?j'\n  \\<lbrakk>(partition_on C ?P \\<and> card ?P = ?j) \\<and>\n           partition_on C ?P' \\<and> card ?P' = ?j';\n   (?B' \\<subseteq> B \\<and> card ?B' = ?k) \\<and>\n   ?B'' \\<subseteq> B \\<and> card ?B'' = ?k';\n   partition_on ?B' ?Q \\<and> partition_on ?B'' ?Q';\n   ?f \\<in> B - ?B' \\<rightarrow>\\<^sub>E ?P \\<and>\n   ?g \\<in> B - ?B'' \\<rightarrow>\\<^sub>E ?P';\n   ?P'' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B'. ?f x = X}) ` ?P \\<and>\n   ?P''' = (\\<lambda>X. X \\<union> {x \\<in> B - ?B''. ?g x = X}) ` ?P';\n   ?P'' \\<union> ?Q = ?P''' \\<union> ?Q'\\<rbrakk>\n  \\<Longrightarrow> ?k = ?k'\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"do {\n    k  \\<leftarrow> {0..card B};\n    j  \\<leftarrow> {0..card C};\n    P  \\<leftarrow> {P. partition_on C P \\<and> card P = j};\n    B' \\<leftarrow> {B'. B' \\<subseteq> B \\<and> card B' = k};\n    Q  \\<leftarrow> {Q. partition_on B' Q};\n    f  \\<leftarrow> (B - B') \\<rightarrow>\\<^sub>E P;\n    P'  \\<leftarrow> {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P};\n    {P' \\<union> Q}\n  }\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume k: \"k \\<in> {..card B}\""], ["proof (state)\nthis:\n  k \\<in> {..card B}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp k\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume \"j \\<in> {.. card C}\""], ["proof (state)\nthis:\n  j \\<in> {..card C}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp j\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from \\<open>finite C\\<close>"], ["proof (chain)\npicking this:\n  finite C", "have \"finite ?S\""], ["proof (prove)\nusing this:\n  finite C\n\ngoal (1 subgoal):\n 1. finite {P. partition_on C P \\<and> card P = j}", "by (intro finite_Collect_conjI disjI1 finitely_many_partition_on)"], ["proof (state)\nthis:\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\nthis:\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume P: \"P \\<in> {P. partition_on C P \\<and> card P = j}\""], ["proof (state)\nthis:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from this"], ["proof (chain)\npicking this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}", "have \"partition_on C P\""], ["proof (prove)\nusing this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. partition_on C P", "by simp"], ["proof (state)\nthis:\n  partition_on C P\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp P\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P", "using P \\<open>finite C\\<close>"], ["proof (prove)\nusing this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n  finite C\n\ngoal (1 subgoal):\n 1. finite P", "by (auto intro: finite_elements)"], ["proof (state)\nthis:\n  finite P\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from \\<open>finite B\\<close>"], ["proof (chain)\npicking this:\n  finite B", "have \"finite ?S\""], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. finite {B'. B' \\<subseteq> B \\<and> card B' = k}", "by (auto simp add: finite_subset)"], ["proof (state)\nthis:\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\nthis:\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix B'"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume B': \"B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\""], ["proof (state)\nthis:\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from this"], ["proof (chain)\npicking this:\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}", "have \"B' \\<subseteq> B\""], ["proof (prove)\nusing this:\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. B' \\<subseteq> B", "by simp"], ["proof (state)\nthis:\n  B' \\<subseteq> B\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp B'\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from \\<open>finite B\\<close>"], ["proof (chain)\npicking this:\n  finite B", "have \"finite B'\""], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. finite B'", "using B'"], ["proof (prove)\nusing this:\n  finite B\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. finite B'", "by (auto simp add: finite_subset)"], ["proof (state)\nthis:\n  finite B'\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from \\<open>finite B'\\<close>"], ["proof (chain)\npicking this:\n  finite B'", "have \"finite {Q. partition_on B' Q}\""], ["proof (prove)\nusing this:\n  finite B'\n\ngoal (1 subgoal):\n 1. finite {Q. partition_on B' Q}", "by (rule finitely_many_partition_on)"], ["proof (state)\nthis:\n  finite {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\nthis:\n  finite {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix Q"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume Q: \"Q \\<in> {Q. partition_on B' Q}\""], ["proof (state)\nthis:\n  Q \\<in> {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp Q\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "assume \"f \\<in> B - B' \\<rightarrow>\\<^sub>E P\""], ["proof (state)\nthis:\n  f \\<in> B - B' \\<rightarrow>\\<^sub>E P\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let ?expr = \"?comp f\""], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on (\\<lambda>P'. {P' \\<union> Q})\n     {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P}", "by (auto intro: disjoint_family_onI)"], ["proof (state)\nthis:\n  disjoint_family_on (\\<lambda>P'. {P' \\<union> Q})\n   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from this"], ["proof (chain)\npicking this:\n  disjoint_family_on (\\<lambda>P'. {P' \\<union> Q})\n   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P}", "have \"card ?expr = 1\""], ["proof (prove)\nusing this:\n  disjoint_family_on (\\<lambda>P'. {P' \\<union> Q})\n   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P}\n\ngoal (1 subgoal):\n 1. card\n     ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n      (\\<lambda>P'. {P' \\<union> Q})) =\n    1", "by (simp add: card_bind_constant)"], ["proof (state)\nthis:\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n      (\\<lambda>P'. {P' \\<union> Q}))", "by (simp add: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q}))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q}))", "have \"finite ?expr \\<and> card ?expr = 1\""], ["proof (prove)\nusing this:\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q}))\n\ngoal (1 subgoal):\n 1. finite\n     ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n      (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n    card\n     ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n      (\\<lambda>P'. {P' \\<union> Q})) =\n    1", "by blast"], ["proof (state)\nthis:\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?f2 \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<Longrightarrow>\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?f2 \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<Longrightarrow>\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (B - B' \\<rightarrow>\\<^sub>E P)", "using \\<open>finite B\\<close> \\<open>finite P\\<close>"], ["proof (prove)\nusing this:\n  finite B\n  finite P\n\ngoal (1 subgoal):\n 1. finite (B - B' \\<rightarrow>\\<^sub>E P)", "by (auto intro: finite_PiE)"], ["proof (state)\nthis:\n  finite (B - B' \\<rightarrow>\\<^sub>E P)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite (B - B' \\<rightarrow>\\<^sub>E P)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>f.\n         {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n         (\\<lambda>P'. {P' \\<union> Q}))\n     (B - B' \\<rightarrow>\\<^sub>E P)", "using P B' Q"], ["proof (prove)\nusing this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n  Q \\<in> {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>f.\n         {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n         (\\<lambda>P'. {P' \\<union> Q}))\n     (B - B' \\<rightarrow>\\<^sub>E P)", "by (injectivity_solver rule: local.injectivity(1))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>f.\n       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n       (\\<lambda>P'. {P' \\<union> Q}))\n   (B - B' \\<rightarrow>\\<^sub>E P)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>f.\n       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n       (\\<lambda>P'. {P' \\<union> Q}))\n   (B - B' \\<rightarrow>\\<^sub>E P)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"card ?S = j ^ (n - k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "have \"card (B - B') = n - k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (B - B') = n - k", "using B' \\<open>finite B'\\<close> \\<open>card B = n\\<close>"], ["proof (prove)\nusing this:\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n  finite B'\n  card B = n\n\ngoal (1 subgoal):\n 1. card (B - B') = n - k", "by (subst card_Diff_subset) auto"], ["proof (state)\nthis:\n  card (B - B') = n - k\n\ngoal (1 subgoal):\n 1. card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "from this"], ["proof (chain)\npicking this:\n  card (B - B') = n - k", "show ?thesis"], ["proof (prove)\nusing this:\n  card (B - B') = n - k\n\ngoal (1 subgoal):\n 1. card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "using \\<open>finite B\\<close> P"], ["proof (prove)\nusing this:\n  card (B - B') = n - k\n  finite B\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "by (subst card_PiE) (simp add: prod_constant)+"], ["proof (state)\nthis:\n  card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  ?f2 \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<Longrightarrow>\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n  finite (B - B' \\<rightarrow>\\<^sub>E P)\n  disjoint_family_on\n   (\\<lambda>f.\n       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n       (\\<lambda>P'. {P' \\<union> Q}))\n   (B - B' \\<rightarrow>\\<^sub>E P)\n  card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)", "have \"card ?expr = j ^ (n - k)\""], ["proof (prove)\nusing this:\n  ?f2 \\<in> B - B' \\<rightarrow>\\<^sub>E P \\<Longrightarrow>\n  finite\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) \\<and>\n  card\n   ({(\\<lambda>X. X \\<union> {x \\<in> B - B'. ?f2 x = X}) ` P} \\<bind>\n    (\\<lambda>P'. {P' \\<union> Q})) =\n  1\n  finite (B - B' \\<rightarrow>\\<^sub>E P)\n  disjoint_family_on\n   (\\<lambda>f.\n       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n       (\\<lambda>P'. {P' \\<union> Q}))\n   (B - B' \\<rightarrow>\\<^sub>E P)\n  card (B - B' \\<rightarrow>\\<^sub>E P) = j ^ (n - k)\n\ngoal (1 subgoal):\n 1. card\n     (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n      (\\<lambda>f.\n          {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n          (\\<lambda>P'. {P' \\<union> Q}))) =\n    j ^ (n - k)", "by (simp add: card_bind_constant)"], ["proof (state)\nthis:\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n      (\\<lambda>f.\n          {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n          (\\<lambda>P'. {P' \\<union> Q})))", "using \\<open>finite ?S\\<close> \\<open>finite {P. partition_on C P \\<and> card P = j}\\<close>"], ["proof (prove)\nusing this:\n  finite (B - B' \\<rightarrow>\\<^sub>E P)\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. finite\n     (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n      (\\<lambda>f.\n          {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n          (\\<lambda>P'. {P' \\<union> Q})))", "by (auto intro!: finite_bind)"], ["proof (state)\nthis:\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q})))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) =\n  j ^ (n - k)\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q})))", "have \"finite ?expr \\<and> card ?expr = j ^ (n - k)\""], ["proof (prove)\nusing this:\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) =\n  j ^ (n - k)\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q})))\n\ngoal (1 subgoal):\n 1. finite\n     (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n      (\\<lambda>f.\n          {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n          (\\<lambda>P'. {P' \\<union> Q}))) \\<and>\n    card\n     (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n      (\\<lambda>f.\n          {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n          (\\<lambda>P'. {P' \\<union> Q}))) =\n    j ^ (n - k)", "by blast"], ["proof (state)\nthis:\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> Q}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note inner = this"], ["proof (state)\nthis:\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"card ?S = Bell k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {Q. partition_on B' Q} = Bell k", "using B' \\<open>finite B'\\<close>"], ["proof (prove)\nusing this:\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n  finite B'\n\ngoal (1 subgoal):\n 1. card {Q. partition_on B' Q} = Bell k", "by (auto simp add: Bell_altdef[symmetric])"], ["proof (state)\nthis:\n  card {Q. partition_on B' Q} = Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card {Q. partition_on B' Q} = Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>Q.\n         B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n         (\\<lambda>f.\n             {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n              P} \\<bind>\n             (\\<lambda>P'. {P' \\<union> Q})))\n     {Q. partition_on B' Q}", "using P B'"], ["proof (prove)\nusing this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n  B' \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>Q.\n         B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n         (\\<lambda>f.\n             {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n              P} \\<bind>\n             (\\<lambda>P'. {P' \\<union> Q})))\n     {Q. partition_on B' Q}", "by (injectivity_solver rule: local.injectivity(2))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>Q.\n       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n       (\\<lambda>f.\n           {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n           (\\<lambda>P'. {P' \\<union> Q})))\n   {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  finite {Q. partition_on B' Q}\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n  card {Q. partition_on B' Q} = Bell k\n  disjoint_family_on\n   (\\<lambda>Q.\n       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n       (\\<lambda>f.\n           {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n           (\\<lambda>P'. {P' \\<union> Q})))\n   {Q. partition_on B' Q}", "have \"card ?expr = j ^ (n - k) * Bell k\""], ["proof (prove)\nusing this:\n  finite {Q. partition_on B' Q}\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n  card {Q. partition_on B' Q} = Bell k\n  disjoint_family_on\n   (\\<lambda>Q.\n       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n       (\\<lambda>f.\n           {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n           (\\<lambda>P'. {P' \\<union> Q})))\n   {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. card\n     ({Q. partition_on B' Q} \\<bind>\n      (\\<lambda>Q.\n          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n          (\\<lambda>f.\n              {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n               P} \\<bind>\n              (\\<lambda>P'. {P' \\<union> Q})))) =\n    j ^ (n - k) * Bell k", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({Q. partition_on B' Q} \\<bind>\n      (\\<lambda>Q.\n          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n          (\\<lambda>f.\n              {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n               P} \\<bind>\n              (\\<lambda>P'. {P' \\<union> Q}))))", "using inner \\<open>finite ?S\\<close>"], ["proof (prove)\nusing this:\n  ?Q2 \\<in> {Q. partition_on B' Q} \\<Longrightarrow>\n  finite\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) \\<and>\n  card\n   (B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n    (\\<lambda>f.\n        {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n        (\\<lambda>P'. {P' \\<union> ?Q2}))) =\n  j ^ (n - k)\n  finite {Q. partition_on B' Q}\n\ngoal (1 subgoal):\n 1. finite\n     ({Q. partition_on B' Q} \\<bind>\n      (\\<lambda>Q.\n          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n          (\\<lambda>f.\n              {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n               P} \\<bind>\n              (\\<lambda>P'. {P' \\<union> Q}))))", "by (auto intro: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q}))))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n  finite\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q}))))", "have \"finite ?expr \\<and> card ?expr = j ^ (n - k) * Bell k\""], ["proof (prove)\nusing this:\n  card\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n  finite\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q}))))\n\ngoal (1 subgoal):\n 1. finite\n     ({Q. partition_on B' Q} \\<bind>\n      (\\<lambda>Q.\n          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n          (\\<lambda>f.\n              {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n               P} \\<bind>\n              (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n    card\n     ({Q. partition_on B' Q} \\<bind>\n      (\\<lambda>Q.\n          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n          (\\<lambda>f.\n              {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n               P} \\<bind>\n              (\\<lambda>P'. {P' \\<union> Q})))) =\n    j ^ (n - k) * Bell k", "by blast"], ["proof (state)\nthis:\n  finite\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on B' Q} \\<bind>\n    (\\<lambda>Q.\n        B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) ` P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note inner = this"], ["proof (state)\nthis:\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"card ?S = n choose k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k", "using \\<open>card B = n\\<close> \\<open>finite B\\<close>"], ["proof (prove)\nusing this:\n  card B = n\n  finite B\n\ngoal (1 subgoal):\n 1. card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k", "by (simp add: n_subsets)"], ["proof (state)\nthis:\n  card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>B'.\n         {Q. partition_on B' Q} \\<bind>\n         (\\<lambda>Q.\n             B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n             (\\<lambda>f.\n                 {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                  P} \\<bind>\n                 (\\<lambda>P'. {P' \\<union> Q}))))\n     {B'. B' \\<subseteq> B \\<and> card B' = k}", "using P"], ["proof (prove)\nusing this:\n  P \\<in> {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>B'.\n         {Q. partition_on B' Q} \\<bind>\n         (\\<lambda>Q.\n             B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n             (\\<lambda>f.\n                 {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                  P} \\<bind>\n                 (\\<lambda>P'. {P' \\<union> Q}))))\n     {B'. B' \\<subseteq> B \\<and> card B' = k}", "by (injectivity_solver rule: local.injectivity(3))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>B'.\n       {Q. partition_on B' Q} \\<bind>\n       (\\<lambda>Q.\n           B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n           (\\<lambda>f.\n               {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                P} \\<bind>\n               (\\<lambda>P'. {P' \\<union> Q}))))\n   {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n  card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k\n  disjoint_family_on\n   (\\<lambda>B'.\n       {Q. partition_on B' Q} \\<bind>\n       (\\<lambda>Q.\n           B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n           (\\<lambda>f.\n               {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                P} \\<bind>\n               (\\<lambda>P'. {P' \\<union> Q}))))\n   {B'. B' \\<subseteq> B \\<and> card B' = k}", "have \"card ?expr = j ^ (n - k) * (n choose k) * Bell k\""], ["proof (prove)\nusing this:\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n  card {B'. B' \\<subseteq> B \\<and> card B' = k} = n choose k\n  disjoint_family_on\n   (\\<lambda>B'.\n       {Q. partition_on B' Q} \\<bind>\n       (\\<lambda>Q.\n           B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n           (\\<lambda>f.\n               {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                P} \\<bind>\n               (\\<lambda>P'. {P' \\<union> Q}))))\n   {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n      (\\<lambda>B'.\n          {Q. partition_on B' Q} \\<bind>\n          (\\<lambda>Q.\n              B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n              (\\<lambda>f.\n                  {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                   P} \\<bind>\n                  (\\<lambda>P'. {P' \\<union> Q}))))) =\n    j ^ (n - k) * (n choose k) * Bell k", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n      (\\<lambda>B'.\n          {Q. partition_on B' Q} \\<bind>\n          (\\<lambda>Q.\n              B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n              (\\<lambda>f.\n                  {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                   P} \\<bind>\n                  (\\<lambda>P'. {P' \\<union> Q})))))", "using inner \\<open>finite ?S\\<close>"], ["proof (prove)\nusing this:\n  ?B'2 \\<in> {B'. B' \\<subseteq> B \\<and> card B' = k} \\<Longrightarrow>\n  finite\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) \\<and>\n  card\n   ({Q. partition_on ?B'2 Q} \\<bind>\n    (\\<lambda>Q.\n        B - ?B'2 \\<rightarrow>\\<^sub>E P \\<bind>\n        (\\<lambda>f.\n            {(\\<lambda>X. X \\<union> {x \\<in> B - ?B'2. f x = X}) `\n             P} \\<bind>\n            (\\<lambda>P'. {P' \\<union> Q})))) =\n  j ^ (n - k) * Bell k\n  finite {B'. B' \\<subseteq> B \\<and> card B' = k}\n\ngoal (1 subgoal):\n 1. finite\n     ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n      (\\<lambda>B'.\n          {Q. partition_on B' Q} \\<bind>\n          (\\<lambda>Q.\n              B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n              (\\<lambda>f.\n                  {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                   P} \\<bind>\n                  (\\<lambda>P'. {P' \\<union> Q})))))", "by (auto intro: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q})))))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q})))))", "have \"finite ?expr \\<and> card ?expr = j ^ (n - k) * (n choose k) * Bell k\""], ["proof (prove)\nusing this:\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q})))))\n\ngoal (1 subgoal):\n 1. finite\n     ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n      (\\<lambda>B'.\n          {Q. partition_on B' Q} \\<bind>\n          (\\<lambda>Q.\n              B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n              (\\<lambda>f.\n                  {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                   P} \\<bind>\n                  (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n    card\n     ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n      (\\<lambda>B'.\n          {Q. partition_on B' Q} \\<bind>\n          (\\<lambda>Q.\n              B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n              (\\<lambda>f.\n                  {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                   P} \\<bind>\n                  (\\<lambda>P'. {P' \\<union> Q}))))) =\n    j ^ (n - k) * (n choose k) * Bell k", "by blast"], ["proof (state)\nthis:\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 P} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note inner = this"], ["proof (state)\nthis:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note \\<open>finite ?S\\<close>"], ["proof (state)\nthis:\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"card ?S = Stirling m j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {P. partition_on C P \\<and> card P = j} = Stirling m j", "using \\<open>finite C\\<close> \\<open>card C = m\\<close>"], ["proof (prove)\nusing this:\n  finite C\n  card C = m\n\ngoal (1 subgoal):\n 1. card {P. partition_on C P \\<and> card P = j} = Stirling m j", "by (simp add: card_partition_on)"], ["proof (state)\nthis:\n  card {P. partition_on C P \\<and> card P = j} = Stirling m j\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card {P. partition_on C P \\<and> card P = j} = Stirling m j\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>P.\n         {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n         (\\<lambda>B'.\n             {Q. partition_on B' Q} \\<bind>\n             (\\<lambda>Q.\n                 B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                 (\\<lambda>f.\n                     {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                      P} \\<bind>\n                     (\\<lambda>P'. {P' \\<union> Q})))))\n     {P. partition_on C P \\<and> card P = j}", "by (injectivity_solver rule: local.injectivity(4))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>P.\n       {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n       (\\<lambda>B'.\n           {Q. partition_on B' Q} \\<bind>\n           (\\<lambda>Q.\n               B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n               (\\<lambda>f.\n                   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                    P} \\<bind>\n                   (\\<lambda>P'. {P' \\<union> Q})))))\n   {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n  finite {P. partition_on C P \\<and> card P = j}\n  card {P. partition_on C P \\<and> card P = j} = Stirling m j\n  disjoint_family_on\n   (\\<lambda>P.\n       {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n       (\\<lambda>B'.\n           {Q. partition_on B' Q} \\<bind>\n           (\\<lambda>Q.\n               B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n               (\\<lambda>f.\n                   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                    P} \\<bind>\n                   (\\<lambda>P'. {P' \\<union> Q})))))\n   {P. partition_on C P \\<and> card P = j}", "have \"card ?expr = j ^ (n - k) * Stirling m j * (n choose k) * Bell k\""], ["proof (prove)\nusing this:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n  finite {P. partition_on C P \\<and> card P = j}\n  card {P. partition_on C P \\<and> card P = j} = Stirling m j\n  disjoint_family_on\n   (\\<lambda>P.\n       {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n       (\\<lambda>B'.\n           {Q. partition_on B' Q} \\<bind>\n           (\\<lambda>Q.\n               B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n               (\\<lambda>f.\n                   {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                    P} \\<bind>\n                   (\\<lambda>P'. {P' \\<union> Q})))))\n   {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. card\n     ({P. partition_on C P \\<and> card P = j} \\<bind>\n      (\\<lambda>P.\n          {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n          (\\<lambda>B'.\n              {Q. partition_on B' Q} \\<bind>\n              (\\<lambda>Q.\n                  B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                  (\\<lambda>f.\n                      {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                       P} \\<bind>\n                      (\\<lambda>P'. {P' \\<union> Q})))))) =\n    j ^ (n - k) * Stirling m j * (n choose k) * Bell k", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  j ^ (n - k) * Stirling m j * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  j ^ (n - k) * Stirling m j * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({P. partition_on C P \\<and> card P = j} \\<bind>\n      (\\<lambda>P.\n          {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n          (\\<lambda>B'.\n              {Q. partition_on B' Q} \\<bind>\n              (\\<lambda>Q.\n                  B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                  (\\<lambda>f.\n                      {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                       P} \\<bind>\n                      (\\<lambda>P'. {P' \\<union> Q}))))))", "using inner \\<open>finite ?S\\<close>"], ["proof (prove)\nusing this:\n  ?P2 \\<in> {P. partition_on C P \\<and> card P = j} \\<Longrightarrow>\n  finite\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) \\<and>\n  card\n   ({B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n    (\\<lambda>B'.\n        {Q. partition_on B' Q} \\<bind>\n        (\\<lambda>Q.\n            B - B' \\<rightarrow>\\<^sub>E ?P2 \\<bind>\n            (\\<lambda>f.\n                {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                 ?P2} \\<bind>\n                (\\<lambda>P'. {P' \\<union> Q}))))) =\n  j ^ (n - k) * (n choose k) * Bell k\n  finite {P. partition_on C P \\<and> card P = j}\n\ngoal (1 subgoal):\n 1. finite\n     ({P. partition_on C P \\<and> card P = j} \\<bind>\n      (\\<lambda>P.\n          {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n          (\\<lambda>B'.\n              {Q. partition_on B' Q} \\<bind>\n              (\\<lambda>Q.\n                  B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                  (\\<lambda>f.\n                      {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                       P} \\<bind>\n                      (\\<lambda>P'. {P' \\<union> Q}))))))", "by (auto intro: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q}))))))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  j ^ (n - k) * Stirling m j * (n choose k) * Bell k\n  finite\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q}))))))", "have \"finite ?expr \\<and> card ?expr = j ^ (n - k) * Stirling m j * (n choose k) * Bell k\""], ["proof (prove)\nusing this:\n  card\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  j ^ (n - k) * Stirling m j * (n choose k) * Bell k\n  finite\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q}))))))\n\ngoal (1 subgoal):\n 1. finite\n     ({P. partition_on C P \\<and> card P = j} \\<bind>\n      (\\<lambda>P.\n          {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n          (\\<lambda>B'.\n              {Q. partition_on B' Q} \\<bind>\n              (\\<lambda>Q.\n                  B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                  (\\<lambda>f.\n                      {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                       P} \\<bind>\n                      (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n    card\n     ({P. partition_on C P \\<and> card P = j} \\<bind>\n      (\\<lambda>P.\n          {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n          (\\<lambda>B'.\n              {Q. partition_on B' Q} \\<bind>\n              (\\<lambda>Q.\n                  B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                  (\\<lambda>f.\n                      {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                       P} \\<bind>\n                      (\\<lambda>P'. {P' \\<union> Q})))))) =\n    j ^ (n - k) * Stirling m j * (n choose k) * Bell k", "by blast"], ["proof (state)\nthis:\n  finite\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = j} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  j ^ (n - k) * Stirling m j * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "note inner = this"], ["proof (state)\nthis:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..card C}", "by simp"], ["proof (state)\nthis:\n  finite {0..card C}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {0..card C}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>j.\n         {P. partition_on C P \\<and> card P = j} \\<bind>\n         (\\<lambda>P.\n             {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n             (\\<lambda>B'.\n                 {Q. partition_on B' Q} \\<bind>\n                 (\\<lambda>Q.\n                     B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                     (\\<lambda>f.\n                         {(\\<lambda>X.\n                              X \\<union> {x \\<in> B - B'. f x = X}) `\n                          P} \\<bind>\n                         (\\<lambda>P'. {P' \\<union> Q}))))))\n     {0..card C}", "by (injectivity_solver rule: local.injectivity(5))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>j.\n       {P. partition_on C P \\<and> card P = j} \\<bind>\n       (\\<lambda>P.\n           {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n           (\\<lambda>B'.\n               {Q. partition_on B' Q} \\<bind>\n               (\\<lambda>Q.\n                   B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                   (\\<lambda>f.\n                       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                        P} \\<bind>\n                       (\\<lambda>P'. {P' \\<union> Q}))))))\n   {0..card C}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n  finite {0..card C}\n  disjoint_family_on\n   (\\<lambda>j.\n       {P. partition_on C P \\<and> card P = j} \\<bind>\n       (\\<lambda>P.\n           {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n           (\\<lambda>B'.\n               {Q. partition_on B' Q} \\<bind>\n               (\\<lambda>Q.\n                   B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                   (\\<lambda>f.\n                       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                        P} \\<bind>\n                       (\\<lambda>P'. {P' \\<union> Q}))))))\n   {0..card C}", "have \"card ?expr = (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\" (is \"_ = ?formula\")"], ["proof (prove)\nusing this:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n  finite {0..card C}\n  disjoint_family_on\n   (\\<lambda>j.\n       {P. partition_on C P \\<and> card P = j} \\<bind>\n       (\\<lambda>P.\n           {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n           (\\<lambda>B'.\n               {Q. partition_on B' Q} \\<bind>\n               (\\<lambda>Q.\n                   B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                   (\\<lambda>f.\n                       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                        P} \\<bind>\n                       (\\<lambda>P'. {P' \\<union> Q}))))))\n   {0..card C}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q}))))))) =\n    (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "using \\<open>card C = m\\<close>"], ["proof (prove)\nusing this:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n  finite {0..card C}\n  disjoint_family_on\n   (\\<lambda>j.\n       {P. partition_on C P \\<and> card P = j} \\<bind>\n       (\\<lambda>P.\n           {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n           (\\<lambda>B'.\n               {Q. partition_on B' Q} \\<bind>\n               (\\<lambda>Q.\n                   B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                   (\\<lambda>f.\n                       {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                        P} \\<bind>\n                       (\\<lambda>P'. {P' \\<union> Q}))))))\n   {0..card C}\n  card C = m\n\ngoal (1 subgoal):\n 1. card\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q}))))))) =\n    (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "by (subst card_bind) (auto intro: sum.cong)"], ["proof (state)\nthis:\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q})))))))", "using inner \\<open>finite ?S\\<close>"], ["proof (prove)\nusing this:\n  ?j2 \\<in> {..card C} \\<Longrightarrow>\n  finite\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) \\<and>\n  card\n   ({P. partition_on C P \\<and> card P = ?j2} \\<bind>\n    (\\<lambda>P.\n        {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n        (\\<lambda>B'.\n            {Q. partition_on B' Q} \\<bind>\n            (\\<lambda>Q.\n                B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                (\\<lambda>f.\n                    {(\\<lambda>X. X \\<union> {x \\<in> B - B'. f x = X}) `\n                     P} \\<bind>\n                    (\\<lambda>P'. {P' \\<union> Q})))))) =\n  ?j2 ^ (n - k) * Stirling m ?j2 * (n choose k) * Bell k\n  finite {0..card C}\n\ngoal (1 subgoal):\n 1. finite\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q})))))))", "by (auto intro: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q})))))))\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q})))))))", "have \"finite ?expr \\<and> card ?expr = ?formula\""], ["proof (prove)\nusing this:\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q})))))))\n\ngoal (1 subgoal):\n 1. finite\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n    card\n     ({0..card C} \\<bind>\n      (\\<lambda>j.\n          {P. partition_on C P \\<and> card P = j} \\<bind>\n          (\\<lambda>P.\n              {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n              (\\<lambda>B'.\n                  {Q. partition_on B' Q} \\<bind>\n                  (\\<lambda>Q.\n                      B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                      (\\<lambda>f.\n                          {(\\<lambda>X.\n                               X \\<union> {x \\<in> B - B'. f x = X}) `\n                           P} \\<bind>\n                          (\\<lambda>P'. {P' \\<union> Q}))))))) =\n    (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "by blast"], ["proof (state)\nthis:\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..card B}", "by simp"], ["proof (state)\nthis:\n  finite {0..card B}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {0..card B}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>k.\n         {0..card C} \\<bind>\n         (\\<lambda>j.\n             {P. partition_on C P \\<and> card P = j} \\<bind>\n             (\\<lambda>P.\n                 {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n                 (\\<lambda>B'.\n                     {Q. partition_on B' Q} \\<bind>\n                     (\\<lambda>Q.\n                         B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                         (\\<lambda>f.\n                             {(\\<lambda>X.\n                                  X \\<union> {x \\<in> B - B'. f x = X}) `\n                              P} \\<bind>\n                             (\\<lambda>P'. {P' \\<union> Q})))))))\n     {0..card B}", "by (injectivity_solver rule: local.injectivity(6))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>k.\n       {0..card C} \\<bind>\n       (\\<lambda>j.\n           {P. partition_on C P \\<and> card P = j} \\<bind>\n           (\\<lambda>P.\n               {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n               (\\<lambda>B'.\n                   {Q. partition_on B' Q} \\<bind>\n                   (\\<lambda>Q.\n                       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                       (\\<lambda>f.\n                           {(\\<lambda>X.\n                                X \\<union> {x \\<in> B - B'. f x = X}) `\n                            P} \\<bind>\n                           (\\<lambda>P'. {P' \\<union> Q})))))))\n   {0..card B}\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n  finite {0..card B}\n  disjoint_family_on\n   (\\<lambda>k.\n       {0..card C} \\<bind>\n       (\\<lambda>j.\n           {P. partition_on C P \\<and> card P = j} \\<bind>\n           (\\<lambda>P.\n               {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n               (\\<lambda>B'.\n                   {Q. partition_on B' Q} \\<bind>\n                   (\\<lambda>Q.\n                       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                       (\\<lambda>f.\n                           {(\\<lambda>X.\n                                X \\<union> {x \\<in> B - B'. f x = X}) `\n                            P} \\<bind>\n                           (\\<lambda>P'. {P' \\<union> Q})))))))\n   {0..card B}", "have step3: \"card (construct_partition_on B C) = (\\<Sum>k\\<le>n. \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\""], ["proof (prove)\nusing this:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n  finite {0..card B}\n  disjoint_family_on\n   (\\<lambda>k.\n       {0..card C} \\<bind>\n       (\\<lambda>j.\n           {P. partition_on C P \\<and> card P = j} \\<bind>\n           (\\<lambda>P.\n               {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n               (\\<lambda>B'.\n                   {Q. partition_on B' Q} \\<bind>\n                   (\\<lambda>Q.\n                       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                       (\\<lambda>f.\n                           {(\\<lambda>X.\n                                X \\<union> {x \\<in> B - B'. f x = X}) `\n                            P} \\<bind>\n                           (\\<lambda>P'. {P' \\<union> Q})))))))\n   {0..card B}\n\ngoal (1 subgoal):\n 1. card (construct_partition_on B C) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "unfolding construct_partition_on_def"], ["proof (prove)\nusing this:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n  finite {0..card B}\n  disjoint_family_on\n   (\\<lambda>k.\n       {0..card C} \\<bind>\n       (\\<lambda>j.\n           {P. partition_on C P \\<and> card P = j} \\<bind>\n           (\\<lambda>P.\n               {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n               (\\<lambda>B'.\n                   {Q. partition_on B' Q} \\<bind>\n                   (\\<lambda>Q.\n                       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                       (\\<lambda>f.\n                           {(\\<lambda>X.\n                                X \\<union> {x \\<in> B - B'. f x = X}) `\n                            P} \\<bind>\n                           (\\<lambda>P'. {P' \\<union> Q})))))))\n   {0..card B}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card B} \\<bind>\n      (\\<lambda>k.\n          {0..card C} \\<bind>\n          (\\<lambda>j.\n              {P. partition_on C P \\<and> card P = j} \\<bind>\n              (\\<lambda>P.\n                  {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n                  (\\<lambda>B'.\n                      Collect (partition_on B') \\<bind>\n                      (\\<lambda>Q.\n                          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                          (\\<lambda>f.\n                              {(\\<lambda>X.\n                                   X \\<union> {x \\<in> B - B'. f x = X}) `\n                               P} \\<bind>\n                              (\\<lambda>P'. {P' \\<union> Q})))))))) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "using \\<open>card B = n\\<close>"], ["proof (prove)\nusing this:\n  ?k2 \\<in> {..card B} \\<Longrightarrow>\n  finite\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) \\<and>\n  card\n   ({0..card C} \\<bind>\n    (\\<lambda>j.\n        {P. partition_on C P \\<and> card P = j} \\<bind>\n        (\\<lambda>P.\n            {B'. B' \\<subseteq> B \\<and> card B' = ?k2} \\<bind>\n            (\\<lambda>B'.\n                {Q. partition_on B' Q} \\<bind>\n                (\\<lambda>Q.\n                    B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                    (\\<lambda>f.\n                        {(\\<lambda>X.\n                             X \\<union> {x \\<in> B - B'. f x = X}) `\n                         P} \\<bind>\n                        (\\<lambda>P'. {P' \\<union> Q}))))))) =\n  (\\<Sum>j\\<le>m. j ^ (n - ?k2) * Stirling m j * (n choose ?k2) * Bell ?k2)\n  finite {0..card B}\n  disjoint_family_on\n   (\\<lambda>k.\n       {0..card C} \\<bind>\n       (\\<lambda>j.\n           {P. partition_on C P \\<and> card P = j} \\<bind>\n           (\\<lambda>P.\n               {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n               (\\<lambda>B'.\n                   {Q. partition_on B' Q} \\<bind>\n                   (\\<lambda>Q.\n                       B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                       (\\<lambda>f.\n                           {(\\<lambda>X.\n                                X \\<union> {x \\<in> B - B'. f x = X}) `\n                            P} \\<bind>\n                           (\\<lambda>P'. {P' \\<union> Q})))))))\n   {0..card B}\n  card B = n\n\ngoal (1 subgoal):\n 1. card\n     ({0..card B} \\<bind>\n      (\\<lambda>k.\n          {0..card C} \\<bind>\n          (\\<lambda>j.\n              {P. partition_on C P \\<and> card P = j} \\<bind>\n              (\\<lambda>P.\n                  {B'. B' \\<subseteq> B \\<and> card B' = k} \\<bind>\n                  (\\<lambda>B'.\n                      Collect (partition_on B') \\<bind>\n                      (\\<lambda>Q.\n                          B - B' \\<rightarrow>\\<^sub>E P \\<bind>\n                          (\\<lambda>f.\n                              {(\\<lambda>X.\n                                   X \\<union> {x \\<in> B - B'. f x = X}) `\n                               P} \\<bind>\n                              (\\<lambda>P'. {P' \\<union> Q})))))))) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "by (subst card_bind) (auto intro: sum.cong)"], ["proof (state)\nthis:\n  card (construct_partition_on B C) =\n  (\\<Sum>k\\<le>n.\n      \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "from step1 step2 step3"], ["proof (chain)\npicking this:\n  Bell (n + m) = card {P. partition_on A P}\n  card {P. partition_on A P} = card (construct_partition_on B C)\n  card (construct_partition_on B C) =\n  (\\<Sum>k\\<le>n.\n      \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "show ?thesis"], ["proof (prove)\nusing this:\n  Bell (n + m) = card {P. partition_on A P}\n  card {P. partition_on A P} = card (construct_partition_on B C)\n  card (construct_partition_on B C) =\n  (\\<Sum>k\\<le>n.\n      \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. Bell (n + m) =\n    (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)", "by auto"], ["proof (state)\nthis:\n  Bell (n + m) =\n  (\\<Sum>k\\<le>n.\n      \\<Sum>j\\<le>m. j ^ (n - k) * Stirling m j * (n choose k) * Bell k)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Corollaries of the Generalized Bell Recurrence\\<close>"], ["", "corollary Bell_Stirling_eq:\n  \"Bell m = (\\<Sum>j\\<le>m. Stirling m j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "have \"Bell m = Bell (0 + m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell m = Bell (0 + m)", "by simp"], ["proof (state)\nthis:\n  Bell m = Bell (0 + m)\n\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "also"], ["proof (state)\nthis:\n  Bell m = Bell (0 + m)\n\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "have \"... = (\\<Sum>j\\<le>m. Stirling m j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell (0 + m) = sum (Stirling m) {..m}", "unfolding Bell_eq[of 0]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>0.\n        \\<Sum>j\\<le>m. j ^ (0 - k) * Stirling m j * (0 choose k) * Bell k) =\n    sum (Stirling m) {..m}", "by (simp add: Bell_0)"], ["proof (state)\nthis:\n  Bell (0 + m) = sum (Stirling m) {..m}\n\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "finally"], ["proof (chain)\npicking this:\n  Bell m = sum (Stirling m) {..m}", "show ?thesis"], ["proof (prove)\nusing this:\n  Bell m = sum (Stirling m) {..m}\n\ngoal (1 subgoal):\n 1. Bell m = sum (Stirling m) {..m}", "."], ["proof (state)\nthis:\n  Bell m = sum (Stirling m) {..m}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Bell_recursive_eq:\n  \"Bell (n + 1) = (\\<Sum>k\\<le>n. (n choose k) * Bell k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bell (n + 1) = (\\<Sum>k\\<le>n. (n choose k) * Bell k)", "unfolding Bell_eq[of _ 1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>n.\n        \\<Sum>j\\<le>1. j ^ (n - k) * Stirling 1 j * (n choose k) * Bell k) =\n    (\\<Sum>k\\<le>n. (n choose k) * Bell k)", "by simp"], ["", "end"]]}