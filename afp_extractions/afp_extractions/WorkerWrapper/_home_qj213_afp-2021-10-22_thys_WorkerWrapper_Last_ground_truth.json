{"file_name": "/home/qj213/afp-2021-10-22/thys/WorkerWrapper/Last.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WorkerWrapper", "problem_names": ["lemma llast_strict[simp]: \"llast\\<cdot>\\<bottom> = \\<bottom>\"", "lemma llast_llast_body: \"llast = fix\\<cdot>llast_body\"", "lemma unwrap_strict[simp]: \"unwrap\\<cdot>\\<bottom> = \\<bottom>\"", "lemma wrap_unwrap_ID: \"wrap oo unwrap oo llast_body = llast_body\"", "lemma llast_worker_llast_body: \"llast_worker = unwrap oo llast_body oo wrap\"", "lemma llast'_llast: \"llast' = llast\" (is \"?lhs = ?rhs\")"], "translations": [["", "lemma llast_strict[simp]: \"llast\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast\\<cdot>\\<bottom> = \\<bottom>", "by fixrec_simp"], ["", "fixrec llast_body :: \"('a llist \\<rightarrow> 'a) \\<rightarrow> 'a llist \\<rightarrow> 'a\"\nwhere\n  \"llast_body\\<cdot>f\\<cdot>(x :@ yys) = (case yys of lnil \\<Rightarrow> x | y :@ ys \\<Rightarrow> f\\<cdot>yys)\""], ["", "lemma llast_llast_body: \"llast = fix\\<cdot>llast_body\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast = fix\\<cdot>llast_body", "by (rule cfun_eqI, subst llast_def, subst llast_body.unfold, simp)"], ["", "definition wrap :: \"('a \\<rightarrow> 'a llist \\<rightarrow> 'a) \\<rightarrow> ('a llist \\<rightarrow> 'a)\" where\n  \"wrap \\<equiv> \\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs\""], ["", "definition unwrap :: \"('a llist \\<rightarrow> 'a) \\<rightarrow> ('a \\<rightarrow> 'a llist \\<rightarrow> 'a)\" where\n  \"unwrap \\<equiv> \\<Lambda> f x xs. f\\<cdot>(x :@ xs)\""], ["", "lemma unwrap_strict[simp]: \"unwrap\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unwrap\\<cdot>\\<bottom> = \\<bottom>", "unfolding unwrap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> f x xs. f\\<cdot>(x :@ xs))\\<cdot>\\<bottom> = \\<bottom>", "by ((rule cfun_eqI)+, simp)"], ["", "lemma wrap_unwrap_ID: \"wrap oo unwrap oo llast_body = llast_body\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap oo unwrap oo llast_body = llast_body", "unfolding llast_body_def wrap_def unwrap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs) oo\n    (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n    (\\<mu> llast_body.\n        \\<Lambda> f v.\n           Fixrec.run\\<cdot>\n           (match_lcons\\<cdot>v\\<cdot>\n            (\\<Lambda> x yys.\n                Fixrec.succeed\\<cdot>\n                (case yys of lnil \\<Rightarrow> x\n                 | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) =\n    (\\<mu> llast_body.\n        \\<Lambda> f v.\n           Fixrec.run\\<cdot>\n           (match_lcons\\<cdot>v\\<cdot>\n            (\\<Lambda> x yys.\n                Fixrec.succeed\\<cdot>\n                (case yys of lnil \\<Rightarrow> x\n                 | y :@ ys \\<Rightarrow> f\\<cdot>yys))))", "apply (rule cfun_eqI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       ((\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs) oo\n        (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))))\\<cdot>\n       x\\<cdot>\n       xa =\n       (\\<mu> llast_body.\n           \\<Lambda> f v.\n              Fixrec.run\\<cdot>\n              (match_lcons\\<cdot>v\\<cdot>\n               (\\<Lambda> x yys.\n                   Fixrec.succeed\\<cdot>\n                   (case yys of lnil \\<Rightarrow> x\n                    | y :@ ys \\<Rightarrow> f\\<cdot>yys))))\\<cdot>\n       x\\<cdot>\n       xa", "apply (case_tac xa)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       xa = \\<bottom> \\<Longrightarrow>\n       ((\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs) oo\n        (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))))\\<cdot>\n       x\\<cdot>\n       xa =\n       (\\<mu> llast_body.\n           \\<Lambda> f v.\n              Fixrec.run\\<cdot>\n              (match_lcons\\<cdot>v\\<cdot>\n               (\\<Lambda> x yys.\n                   Fixrec.succeed\\<cdot>\n                   (case yys of lnil \\<Rightarrow> x\n                    | y :@ ys \\<Rightarrow> f\\<cdot>yys))))\\<cdot>\n       x\\<cdot>\n       xa\n 2. \\<And>x xa.\n       xa = lnil \\<Longrightarrow>\n       ((\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs) oo\n        (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))))\\<cdot>\n       x\\<cdot>\n       xa =\n       (\\<mu> llast_body.\n           \\<Lambda> f v.\n              Fixrec.run\\<cdot>\n              (match_lcons\\<cdot>v\\<cdot>\n               (\\<Lambda> x yys.\n                   Fixrec.succeed\\<cdot>\n                   (case yys of lnil \\<Rightarrow> x\n                    | y :@ ys \\<Rightarrow> f\\<cdot>yys))))\\<cdot>\n       x\\<cdot>\n       xa\n 3. \\<And>x xa a llist.\n       xa = a :@ llist \\<Longrightarrow>\n       ((\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs) oo\n        (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))))\\<cdot>\n       x\\<cdot>\n       xa =\n       (\\<mu> llast_body.\n           \\<Lambda> f v.\n              Fixrec.run\\<cdot>\n              (match_lcons\\<cdot>v\\<cdot>\n               (\\<Lambda> x yys.\n                   Fixrec.succeed\\<cdot>\n                   (case yys of lnil \\<Rightarrow> x\n                    | y :@ ys \\<Rightarrow> f\\<cdot>yys))))\\<cdot>\n       x\\<cdot>\n       xa", "apply (simp_all add: fix_const)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition llast_worker :: \"('a \\<rightarrow> 'a llist \\<rightarrow> 'a) \\<rightarrow> 'a \\<rightarrow> 'a llist \\<rightarrow> 'a\" where\n  \"llast_worker \\<equiv> \\<Lambda> r x yys. case yys of lnil \\<Rightarrow> x | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys\""], ["", "definition llast' :: \"'a llist \\<rightarrow> 'a\" where\n  \"llast' \\<equiv> wrap\\<cdot>(fix\\<cdot>llast_worker)\""], ["", "lemma llast_worker_llast_body: \"llast_worker = unwrap oo llast_body oo wrap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast_worker = unwrap oo llast_body oo wrap", "unfolding llast_worker_def llast_body_def wrap_def unwrap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> r x yys.\n        case yys of lnil \\<Rightarrow> x\n        | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys) =\n    (\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n    (\\<mu> llast_body.\n        \\<Lambda> f v.\n           Fixrec.run\\<cdot>\n           (match_lcons\\<cdot>v\\<cdot>\n            (\\<Lambda> x yys.\n                Fixrec.succeed\\<cdot>\n                (case yys of lnil \\<Rightarrow> x\n                 | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) oo\n    (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs)", "apply (rule cfun_eqI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       (\\<Lambda> r x yys.\n           case yys of lnil \\<Rightarrow> x\n           | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys)\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb =\n       ((\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) oo\n        (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs))\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb", "apply (case_tac xb)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa xb.\n       xb = \\<bottom> \\<Longrightarrow>\n       (\\<Lambda> r x yys.\n           case yys of lnil \\<Rightarrow> x\n           | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys)\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb =\n       ((\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) oo\n        (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs))\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb\n 2. \\<And>x xa xb.\n       xb = lnil \\<Longrightarrow>\n       (\\<Lambda> r x yys.\n           case yys of lnil \\<Rightarrow> x\n           | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys)\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb =\n       ((\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) oo\n        (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs))\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb\n 3. \\<And>x xa xb a llist.\n       xb = a :@ llist \\<Longrightarrow>\n       (\\<Lambda> r x yys.\n           case yys of lnil \\<Rightarrow> x\n           | y :@ ys \\<Rightarrow> r\\<cdot>y\\<cdot>ys)\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb =\n       ((\\<Lambda> f x xs. f\\<cdot>(x :@ xs)) oo\n        (\\<mu> llast_body.\n            \\<Lambda> f v.\n               Fixrec.run\\<cdot>\n               (match_lcons\\<cdot>v\\<cdot>\n                (\\<Lambda> x yys.\n                    Fixrec.succeed\\<cdot>\n                    (case yys of lnil \\<Rightarrow> x\n                     | y :@ ys \\<Rightarrow> f\\<cdot>yys)))) oo\n        (\\<Lambda> f (x :@ xs). f\\<cdot>x\\<cdot>xs))\\<cdot>\n       x\\<cdot>\n       xa\\<cdot>\n       xb", "apply (simp_all add: fix_const)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma llast'_llast: \"llast' = llast\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. llast' = llast", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. llast' = llast", "have \"?rhs = fix\\<cdot>llast_body\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast = fix\\<cdot>llast_body", "by (simp only: llast_llast_body)"], ["proof (state)\nthis:\n  llast = fix\\<cdot>llast_body\n\ngoal (1 subgoal):\n 1. llast' = llast", "also"], ["proof (state)\nthis:\n  llast = fix\\<cdot>llast_body\n\ngoal (1 subgoal):\n 1. llast' = llast", "have \"\\<dots> = wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>llast_body =\n    wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap))", "by (simp only: worker_wrapper_body[OF wrap_unwrap_ID])"], ["proof (state)\nthis:\n  fix\\<cdot>llast_body =\n  wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap))\n\ngoal (1 subgoal):\n 1. llast' = llast", "also"], ["proof (state)\nthis:\n  fix\\<cdot>llast_body =\n  wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap))\n\ngoal (1 subgoal):\n 1. llast' = llast", "have \"\\<dots> = wrap\\<cdot>(fix\\<cdot>(llast_worker))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap)) =\n    wrap\\<cdot>(fix\\<cdot>llast_worker)", "by (simp only: llast_worker_llast_body)"], ["proof (state)\nthis:\n  wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap)) =\n  wrap\\<cdot>(fix\\<cdot>llast_worker)\n\ngoal (1 subgoal):\n 1. llast' = llast", "also"], ["proof (state)\nthis:\n  wrap\\<cdot>(fix\\<cdot>(unwrap oo llast_body oo wrap)) =\n  wrap\\<cdot>(fix\\<cdot>llast_worker)\n\ngoal (1 subgoal):\n 1. llast' = llast", "have \"... = ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap\\<cdot>(fix\\<cdot>llast_worker) = llast'", "unfolding llast'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap\\<cdot>(fix\\<cdot>llast_worker) =\n    wrap\\<cdot>(fix\\<cdot>llast_worker)", "by simp"], ["proof (state)\nthis:\n  wrap\\<cdot>(fix\\<cdot>llast_worker) = llast'\n\ngoal (1 subgoal):\n 1. llast' = llast", "finally"], ["proof (chain)\npicking this:\n  llast = llast'", "show ?thesis"], ["proof (prove)\nusing this:\n  llast = llast'\n\ngoal (1 subgoal):\n 1. llast' = llast", "by simp"], ["proof (state)\nthis:\n  llast' = llast\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}