{"file_name": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form/SNF_Algorithm_HOL_Analysis.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form", "problem_names": ["lemma is_SNF_Smith_mxn_HMA:\n  fixes A::\"'a::comm_ring_1 ^ 'n::mod_type ^ 'm::mod_type\"\n  assumes PSQ: \"(P,S,Q) = Smith_mxn_HMA Smith_1x2 Smith_2x2 div_op A\"\n  and SNF_1x2_works: \"\\<forall>A. let (S',Q) = Smith_1x2 A in S' $h 1 = 0 \\<and> invertible Q \\<and> S' = A v* Q\"\n    and SNF_2x2_works: \"\\<forall>A. is_SNF_HMA A (Smith_2x2 A)\"\n    and d: \"is_div_op div_op\"\n  shows \"is_SNF_HMA A (P,S,Q)\""], "translations": [["", "lemma is_SNF_Smith_mxn_HMA:\n  fixes A::\"'a::comm_ring_1 ^ 'n::mod_type ^ 'm::mod_type\"\n  assumes PSQ: \"(P,S,Q) = Smith_mxn_HMA Smith_1x2 Smith_2x2 div_op A\"\n  and SNF_1x2_works: \"\\<forall>A. let (S',Q) = Smith_1x2 A in S' $h 1 = 0 \\<and> invertible Q \\<and> S' = A v* Q\"\n    and SNF_2x2_works: \"\\<forall>A. is_SNF_HMA A (Smith_2x2 A)\"\n    and d: \"is_div_op div_op\"\n  shows \"is_SNF_HMA A (P,S,Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "let ?A = \"Mod_Type_Connect.from_hma\\<^sub>m A\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "define Smith_1x2_JNF where \"Smith_1x2_JNF = (\\<lambda>A'. let (S',Q') \n    = Smith_1x2 (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))\n    in (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S'), Mod_Type_Connect.from_hma\\<^sub>m Q'))\""], ["proof (state)\nthis:\n  Smith_1x2_JNF =\n  (\\<lambda>A'.\n      let (S', Q') =\n            Smith_1x2 (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))\n      in (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S'),\n          Mod_Type_Connect.from_hma\\<^sub>m Q'))\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "define Smith_2x2_JNF where \"Smith_2x2_JNF = (\\<lambda>A'. let (P', S',Q') = Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A') \n    in (Mod_Type_Connect.from_hma\\<^sub>m P', Mod_Type_Connect.from_hma\\<^sub>m S', Mod_Type_Connect.from_hma\\<^sub>m Q'))\""], ["proof (state)\nthis:\n  Smith_2x2_JNF =\n  (\\<lambda>A'.\n      let (P', S', Q') = Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A')\n      in (Mod_Type_Connect.from_hma\\<^sub>m P',\n          Mod_Type_Connect.from_hma\\<^sub>m S',\n          Mod_Type_Connect.from_hma\\<^sub>m Q'))\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "obtain P' S' Q' where P'S'Q': \"(P',S',Q') = Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P' S' Q'.\n        (P', S', Q') =\n        Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op\n         (Mod_Type_Connect.from_hma\\<^sub>m A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (P', S', Q') =\n  Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op\n   (Mod_Type_Connect.from_hma\\<^sub>m A)\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have PSQ_P'S'Q': \"(P,S,Q) = \n      (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S', Mod_Type_Connect.to_hma\\<^sub>m Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P, S, Q) =\n    (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n     Mod_Type_Connect.to_hma\\<^sub>m Q')", "using PSQ P'S'Q' Smith_1x2_JNF_def Smith_2x2_JNF_def"], ["proof (prove)\nusing this:\n  (P, S, Q) = Smith_mxn_HMA Smith_1x2 Smith_2x2 div_op A\n  (P', S', Q') =\n  Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op\n   (Mod_Type_Connect.from_hma\\<^sub>m A)\n  Smith_1x2_JNF =\n  (\\<lambda>A'.\n      let (S', Q') =\n            Smith_1x2 (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))\n      in (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S'),\n          Mod_Type_Connect.from_hma\\<^sub>m Q'))\n  Smith_2x2_JNF =\n  (\\<lambda>A'.\n      let (P', S', Q') = Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A')\n      in (Mod_Type_Connect.from_hma\\<^sub>m P',\n          Mod_Type_Connect.from_hma\\<^sub>m S',\n          Mod_Type_Connect.from_hma\\<^sub>m Q'))\n\ngoal (1 subgoal):\n 1. (P, S, Q) =\n    (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n     Mod_Type_Connect.to_hma\\<^sub>m Q')", "unfolding Smith_mxn_HMA_def Let_def"], ["proof (prove)\nusing this:\n  (P, S, Q) =\n  (case Smith_Impl.Smith_mxn\n         (\\<lambda>A'.\n             case Smith_1x2\n                   (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)) of\n             (S', Q') \\<Rightarrow>\n               (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S'),\n                Mod_Type_Connect.from_hma\\<^sub>m Q'))\n         (\\<lambda>A'.\n             case Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A') of\n             (P', S', Q') \\<Rightarrow>\n               (Mod_Type_Connect.from_hma\\<^sub>m P',\n                Mod_Type_Connect.from_hma\\<^sub>m S',\n                Mod_Type_Connect.from_hma\\<^sub>m Q'))\n         div_op (Mod_Type_Connect.from_hma\\<^sub>m A) of\n   (P, S, Q) \\<Rightarrow>\n     (Mod_Type_Connect.to_hma\\<^sub>m P, Mod_Type_Connect.to_hma\\<^sub>m S,\n      Mod_Type_Connect.to_hma\\<^sub>m Q))\n  (P', S', Q') =\n  Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op\n   (Mod_Type_Connect.from_hma\\<^sub>m A)\n  Smith_1x2_JNF =\n  (\\<lambda>A'.\n      case Smith_1x2 (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)) of\n      (S', Q') \\<Rightarrow>\n        (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S'),\n         Mod_Type_Connect.from_hma\\<^sub>m Q'))\n  Smith_2x2_JNF =\n  (\\<lambda>A'.\n      case Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A') of\n      (P', S', Q') \\<Rightarrow>\n        (Mod_Type_Connect.from_hma\\<^sub>m P',\n         Mod_Type_Connect.from_hma\\<^sub>m S',\n         Mod_Type_Connect.from_hma\\<^sub>m Q'))\n\ngoal (1 subgoal):\n 1. (P, S, Q) =\n    (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n     Mod_Type_Connect.to_hma\\<^sub>m Q')", "by (metis case_prod_conv)"], ["proof (state)\nthis:\n  (P, S, Q) =\n  (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n   Mod_Type_Connect.to_hma\\<^sub>m Q')\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have SNF_1x2_works': \"\\<forall>(A::'a mat) \\<in> carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, (Smith_1x2_JNF A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "proof (rule+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "fix A'::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "assume A': \"A' \\<in> carrier_mat 1 2\""], ["proof (state)\nthis:\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "let ?A' = \"(Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))::'a^2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "obtain S2 Q2 where S'Q': \"(S2,Q2) = Smith_1x2 ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S2 Q2.\n        (S2, Q2) =\n        Smith_1x2\n         (Mod_Type_Connect.to_hma\\<^sub>v\n           (Matrix.row A' 0)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  (S2, Q2) = Smith_1x2 (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "let ?S2 = \"(Mod_Type_Connect.from_hma\\<^sub>v S2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "let ?S' = \"mat_of_row ?S2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "let ?Q' = \"Mod_Type_Connect.from_hma\\<^sub>m Q2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "have [transfer_rule]: \"Mod_Type_Connect.HMA_V ?S2 S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.HMA_V (Mod_Type_Connect.from_hma\\<^sub>v S2) S2", "unfolding Mod_Type_Connect.HMA_V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 =\n    Mod_Type_Connect.from_hma\\<^sub>v S2", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_V (Mod_Type_Connect.from_hma\\<^sub>v S2) S2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "have [transfer_rule]: \"Mod_Type_Connect.HMA_M ?Q' Q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m Q2) Q2", "unfolding Mod_Type_Connect.HMA_M_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m Q2 =\n    Mod_Type_Connect.from_hma\\<^sub>m Q2", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m Q2) Q2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "have [transfer_rule]: \"Mod_Type_Connect.HMA_I 1 (1::2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.HMA_I 1 1", "unfolding Mod_Type_Connect.HMA_I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = mod_type_class.to_nat 1", "by (simp add: to_nat_1)"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_I 1 1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "have c[transfer_rule]: \"Mod_Type_Connect.HMA_V ((Matrix.row A' 0)) ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.HMA_V (Matrix.row A' 0)\n     (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))", "unfolding Mod_Type_Connect.HMA_V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A' 0 =\n    Mod_Type_Connect.from_hma\\<^sub>v\n     (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))", "by (rule from_hma_to_hma\\<^sub>v[symmetric], insert A', auto simp add: Matrix.row_def)"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_V (Matrix.row A' 0)\n   (Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "have *: \"Smith_1x2_JNF A' = (?S', ?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_1x2_JNF A' =\n    (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2),\n     Mod_Type_Connect.from_hma\\<^sub>m Q2)", "by (metis Smith_1x2_JNF_def S'Q' case_prod_conv)"], ["proof (state)\nthis:\n  Smith_1x2_JNF A' =\n  (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2),\n   Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)", "show \"is_SNF A' (1\\<^sub>m 1, Smith_1x2_JNF A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF A' (1\\<^sub>m 1, Smith_1x2_JNF A')", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF A'\n     (1\\<^sub>m 1, mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2),\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "proof (rule is_SNF_intro)"], ["proof (state)\ngoal (6 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. Smith_normal_form_mat\n     (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))\n 6. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "let ?row_A' = \"(Matrix.row A' 0)\""], ["proof (state)\ngoal (6 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. Smith_normal_form_mat\n     (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))\n 6. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "have w: \"S2 $h 1 = 0 \\<and> invertible Q2 \\<and> S2 = ?A' v* Q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 $h 1 = (0::'a) \\<and>\n    invertible Q2 \\<and>\n    S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2", "using SNF_1x2_works"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     let (S', Q) = Smith_1x2 A\n     in S' $h 1 = (0::'a) \\<and> invertible Q \\<and> S' = A v* Q\n\ngoal (1 subgoal):\n 1. S2 $h 1 = (0::'a) \\<and>\n    invertible Q2 \\<and>\n    S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2", "by (metis (mono_tags, lifting) S'Q' fst_conv prod.case_eq_if snd_conv)"], ["proof (state)\nthis:\n  S2 $h 1 = (0::'a) \\<and>\n  invertible Q2 \\<and>\n  S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2\n\ngoal (6 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. Smith_normal_form_mat\n     (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))\n 6. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "have \"?S2 $v 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a)", "using w[untransferred]"], ["proof (prove)\nusing this:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2\n\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a)", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a)\n\ngoal (6 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. Smith_normal_form_mat\n     (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))\n 6. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "thus \"Smith_normal_form_mat ?S'\""], ["proof (prove)\nusing this:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat\n     (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))", "unfolding Smith_normal_form_mat_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<forall>a.\n        a + 1\n        < min (dim_row (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)))\n           (dim_col\n             (mat_of_row\n               (Mod_Type_Connect.from_hma\\<^sub>v S2))) \\<longrightarrow>\n        mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (a, a) dvd\n        mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n        (a + 1, a + 1)) \\<and>\n    (\\<forall>i j.\n        i \\<noteq> j \\<and>\n        i < dim_row\n             (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) \\<and>\n        j < dim_col\n             (mat_of_row\n               (Mod_Type_Connect.from_hma\\<^sub>v S2)) \\<longrightarrow>\n        mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n        (0::'a))", "by (auto simp add: less_2_cases_iff)"], ["proof (state)\nthis:\n  Smith_normal_form_mat (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2))\n\ngoal (5 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "have S2_Q2_A: \"S2 = transpose Q2 *v ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 =\n    Finite_Cartesian_Product.transpose Q2 *v\n    Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)", "using w transpose_matrix_vector"], ["proof (prove)\nusing this:\n  S2 $h 1 = (0::'a) \\<and>\n  invertible Q2 \\<and>\n  S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2\n  Finite_Cartesian_Product.transpose ?A *v ?x = ?x v* ?A\n\ngoal (1 subgoal):\n 1. S2 =\n    Finite_Cartesian_Product.transpose Q2 *v\n    Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)", "by auto"], ["proof (state)\nthis:\n  S2 =\n  Finite_Cartesian_Product.transpose Q2 *v\n  Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)\n\ngoal (5 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "have S2_Q2_A': \"?S2 = transpose_mat ?Q' *\\<^sub>v ((Matrix.row A' 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 =\n    (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v Matrix.row A' 0", "using S2_Q2_A"], ["proof (prove)\nusing this:\n  S2 =\n  Finite_Cartesian_Product.transpose Q2 *v\n  Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0)\n\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 =\n    (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v Matrix.row A' 0", "by transfer'"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 =\n  (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v Matrix.row A' 0\n\ngoal (5 subgoals):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n 2. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 3. invertible_mat (1\\<^sub>m 1)\n 4. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 5. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "show \"1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')", "using A'"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')", "by auto"], ["proof (state)\nthis:\n  1\\<^sub>m 1 \\<in> carrier_mat (dim_row A') (dim_row A')\n\ngoal (4 subgoals):\n 1. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')\n 2. invertible_mat (1\\<^sub>m 1)\n 3. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 4. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "show \"?Q' \\<in> carrier_mat (dim_col A') (dim_col A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')", "using A'"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  \\<in> carrier_mat (dim_col A') (dim_col A')\n\ngoal (3 subgoals):\n 1. invertible_mat (1\\<^sub>m 1)\n 2. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 3. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "show \"invertible_mat (1\\<^sub>m 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (1\\<^sub>m 1)", "by auto"], ["proof (state)\nthis:\n  invertible_mat (1\\<^sub>m 1)\n\ngoal (2 subgoals):\n 1. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 2. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "show \"invertible_mat ?Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)", "using w[untransferred]"], ["proof (prove)\nusing this:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v 1 = (0::'a) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  S2 = Mod_Type_Connect.to_hma\\<^sub>v (Matrix.row A' 0) v* Q2\n\ngoal (1 subgoal):\n 1. invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)", "by auto"], ["proof (state)\nthis:\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "have \"?S' = A' * ?Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "proof (rule eq_matI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)\n 2. dim_row (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n 3. dim_col (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)", "show \"dim_row ?S' = dim_row (A' * ?Q')\" and \"dim_col ?S' = dim_col (A' * ?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) &&&\n    dim_col (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)", "using A'"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. dim_row (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) &&&\n    dim_col (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n    dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)", "by auto"], ["proof (state)\nthis:\n  dim_row (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n  dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n  dim_col (mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2)) =\n  dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "assume i: \"i < dim_row (A' * ?Q')\" and j: \"j < dim_col (A' * ?Q')\""], ["proof (state)\nthis:\n  i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n  j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"?S' $$ (i, j) = ?S' $$ (0, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n    mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j)", "by (metis A' One_nat_def carrier_matD(1) i index_mult_mat(2) less_Suc0)"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... =?S2 $v j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j) =\n    Mod_Type_Connect.from_hma\\<^sub>v S2 $v j", "using j"], ["proof (prove)\nusing this:\n  j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j) =\n    Mod_Type_Connect.from_hma\\<^sub>v S2 $v j", "by auto"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j) =\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (0, j) =\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... = (transpose_mat ?Q' *\\<^sub>v ?row_A') $v j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>v S2 $v j =\n    ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n     Matrix.row A' 0) $v\n    j", "unfolding S2_Q2_A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n     Matrix.row A' 0) $v\n    j =\n    ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n     Matrix.row A' 0) $v\n    j", "by simp"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v j =\n  ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n   Matrix.row A' 0) $v\n  j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>v S2 $v j =\n  ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n   Matrix.row A' 0) $v\n  j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... = Matrix.row (transpose_mat ?Q') j \\<bullet> ?row_A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n     Matrix.row A' 0) $v\n    j =\n    Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n    Matrix.row A' 0", "by (rule index_mult_mat_vec, insert j, auto)"], ["proof (state)\nthis:\n  ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n   Matrix.row A' 0) $v\n  j =\n  Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n  Matrix.row A' 0\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  ((Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T *\\<^sub>v\n   Matrix.row A' 0) $v\n  j =\n  Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n  Matrix.row A' 0\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... = Matrix.col ?Q' j \\<bullet> ?row_A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n    Matrix.row A' 0 =\n    col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0", "using j"], ["proof (prove)\nusing this:\n  j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n    Matrix.row A' 0 =\n    col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0", "by auto"], ["proof (state)\nthis:\n  Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n  Matrix.row A' 0 =\n  col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.row (Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<^sup>T j \\<bullet>\n  Matrix.row A' 0 =\n  col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... = ?row_A' \\<bullet> Matrix.col ?Q' j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0 =\n    Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j", "by (metis (no_types, lifting) Mod_Type_Connect.HMA_V_def Mod_Type_Connect.from_hma\\<^sub>m_def \n              Mod_Type_Connect.from_hma\\<^sub>v_def c col_def comm_scalar_prod dim_row_mat(1) vec_carrier)"], ["proof (state)\nthis:\n  col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0 =\n  Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "also"], ["proof (state)\nthis:\n  col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j \\<bullet> Matrix.row A' 0 =\n  Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "have \"... = (A' * ?Q') $$ (0, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j =\n    (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)", "using A' j"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 1 2\n  j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j =\n    (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)", "by auto"], ["proof (state)\nthis:\n  Matrix.row A' 0 \\<bullet> col (Mod_Type_Connect.from_hma\\<^sub>m Q2) j =\n  (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2);\n        j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\\<rbrakk>\n       \\<Longrightarrow> mat_of_row\n                          (Mod_Type_Connect.from_hma\\<^sub>v S2) $$\n                         (i, j) =\n                         (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$\n                         (i, j)", "finally"], ["proof (chain)\npicking this:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)", "show \"?S' $$ (i, j) = (A' * ?Q') $$ (i, j)\""], ["proof (prove)\nusing this:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n    (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (i, j)", "using i j A'"], ["proof (prove)\nusing this:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (0, j)\n  i < dim_row (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n  j < dim_col (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2)\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n    (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) $$ (i, j) =\n  (A' * Mod_Type_Connect.from_hma\\<^sub>m Q2) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n  A' * Mod_Type_Connect.from_hma\\<^sub>m Q2\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "thus \"?S' = 1\\<^sub>m 1 * A' * ?Q'\""], ["proof (prove)\nusing this:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n  A' * Mod_Type_Connect.from_hma\\<^sub>m Q2\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "using A'"], ["proof (prove)\nusing this:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n  A' * Mod_Type_Connect.from_hma\\<^sub>m Q2\n  A' \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n    1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2", "by auto"], ["proof (state)\nthis:\n  mat_of_row (Mod_Type_Connect.from_hma\\<^sub>v S2) =\n  1\\<^sub>m 1 * A' * Mod_Type_Connect.from_hma\\<^sub>m Q2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_SNF A' (1\\<^sub>m 1, Smith_1x2_JNF A')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have SNF_2x2_works': \"\\<forall>(A::'a mat) \\<in> carrier_mat 2 2. is_SNF A (Smith_2x2_JNF A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2_JNF A)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "fix A'::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "assume A': \"A' \\<in> carrier_mat 2 2\""], ["proof (state)\nthis:\n  A' \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "let ?A' = \"Mod_Type_Connect.to_hma\\<^sub>m A'::'a^2^2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "obtain P2 S2 Q2 where P2S2Q2: \"(P2, S2, Q2) = Smith_2x2 ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P2 S2 Q2.\n        (P2, S2, Q2) =\n        Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (P2, S2, Q2) = Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A')\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "let ?P2 = \"Mod_Type_Connect.from_hma\\<^sub>m P2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "let ?S2 = \"Mod_Type_Connect.from_hma\\<^sub>m S2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "let ?Q2 = \"Mod_Type_Connect.from_hma\\<^sub>m Q2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "have [transfer_rule]: \"Mod_Type_Connect.HMA_M ?Q2 Q2\"\n      and [transfer_rule]: \"Mod_Type_Connect.HMA_M ?P2 P2\"\n      and [transfer_rule]: \"Mod_Type_Connect.HMA_M ?S2 S2\"\n      and [transfer_rule]: \"Mod_Type_Connect.HMA_M A' ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m Q2) Q2 &&&\n     Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m P2) P2) &&&\n    Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m S2) S2 &&&\n    Mod_Type_Connect.HMA_M A' (Mod_Type_Connect.to_hma\\<^sub>m A')", "unfolding Mod_Type_Connect.HMA_M_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Mod_Type_Connect.from_hma\\<^sub>m Q2 =\n     Mod_Type_Connect.from_hma\\<^sub>m Q2 &&&\n     Mod_Type_Connect.from_hma\\<^sub>m P2 =\n     Mod_Type_Connect.from_hma\\<^sub>m P2) &&&\n    Mod_Type_Connect.from_hma\\<^sub>m S2 =\n    Mod_Type_Connect.from_hma\\<^sub>m S2 &&&\n    A' =\n    Mod_Type_Connect.from_hma\\<^sub>m (Mod_Type_Connect.to_hma\\<^sub>m A')", "using A'"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. (Mod_Type_Connect.from_hma\\<^sub>m Q2 =\n     Mod_Type_Connect.from_hma\\<^sub>m Q2 &&&\n     Mod_Type_Connect.from_hma\\<^sub>m P2 =\n     Mod_Type_Connect.from_hma\\<^sub>m P2) &&&\n    Mod_Type_Connect.from_hma\\<^sub>m S2 =\n    Mod_Type_Connect.from_hma\\<^sub>m S2 &&&\n    A' =\n    Mod_Type_Connect.from_hma\\<^sub>m (Mod_Type_Connect.to_hma\\<^sub>m A')", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m Q2) Q2\n  Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m P2) P2\n  Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m S2) S2\n  Mod_Type_Connect.HMA_M A' (Mod_Type_Connect.to_hma\\<^sub>m A')\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "have \"is_SNF A' (?P2,?S2,?Q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "have P2: \"?P2 \\<in> carrier_mat (dim_row A') (dim_row A')\" and \n        Q2: \"?Q2 \\<in> carrier_mat (dim_col A') (dim_col A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m P2\n    \\<in> carrier_mat (dim_row A') (dim_row A') &&&\n    Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')", "using A'"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m P2\n    \\<in> carrier_mat (dim_row A') (dim_row A') &&&\n    Mod_Type_Connect.from_hma\\<^sub>m Q2\n    \\<in> carrier_mat (dim_col A') (dim_col A')", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>m P2\n  \\<in> carrier_mat (dim_row A') (dim_row A')\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  \\<in> carrier_mat (dim_col A') (dim_col A')\n\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "have \"is_SNF_HMA ?A' (P2,S2,Q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF_HMA (Mod_Type_Connect.to_hma\\<^sub>m A') (P2, S2, Q2)", "using SNF_2x2_works"], ["proof (prove)\nusing this:\n  \\<forall>A. is_SNF_HMA A (Smith_2x2 A)\n\ngoal (1 subgoal):\n 1. is_SNF_HMA (Mod_Type_Connect.to_hma\\<^sub>m A') (P2, S2, Q2)", "by (simp add: P2S2Q2)"], ["proof (state)\nthis:\n  is_SNF_HMA (Mod_Type_Connect.to_hma\\<^sub>m A') (P2, S2, Q2)\n\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "hence \"invertible P2 \\<and> invertible Q2 \\<and> Smith_normal_form S2 \\<and> S2 = P2 ** ?A' ** Q2\""], ["proof (prove)\nusing this:\n  is_SNF_HMA (Mod_Type_Connect.to_hma\\<^sub>m A') (P2, S2, Q2)\n\ngoal (1 subgoal):\n 1. invertible P2 \\<and>\n    invertible Q2 \\<and>\n    Smith_normal_form S2 \\<and>\n    S2 = P2 ** Mod_Type_Connect.to_hma\\<^sub>m A' ** Q2", "unfolding is_SNF_HMA_def"], ["proof (prove)\nusing this:\n  case (P2, S2, Q2) of\n  (P, S, Q) \\<Rightarrow>\n    invertible P \\<and>\n    invertible Q \\<and>\n    Smith_normal_form S \\<and>\n    S = P ** Mod_Type_Connect.to_hma\\<^sub>m A' ** Q\n\ngoal (1 subgoal):\n 1. invertible P2 \\<and>\n    invertible Q2 \\<and>\n    Smith_normal_form S2 \\<and>\n    S2 = P2 ** Mod_Type_Connect.to_hma\\<^sub>m A' ** Q2", "by auto"], ["proof (state)\nthis:\n  invertible P2 \\<and>\n  invertible Q2 \\<and>\n  Smith_normal_form S2 \\<and>\n  S2 = P2 ** Mod_Type_Connect.to_hma\\<^sub>m A' ** Q2\n\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "from this[untransferred]"], ["proof (chain)\npicking this:\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m P2) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  Smith_normal_form_mat (Mod_Type_Connect.from_hma\\<^sub>m S2) \\<and>\n  Mod_Type_Connect.from_hma\\<^sub>m S2 =\n  Mod_Type_Connect.from_hma\\<^sub>m P2 * A' *\n  Mod_Type_Connect.from_hma\\<^sub>m Q2", "show ?thesis"], ["proof (prove)\nusing this:\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m P2) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  Smith_normal_form_mat (Mod_Type_Connect.from_hma\\<^sub>m S2) \\<and>\n  Mod_Type_Connect.from_hma\\<^sub>m S2 =\n  Mod_Type_Connect.from_hma\\<^sub>m P2 * A' *\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "using P2 Q2"], ["proof (prove)\nusing this:\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m P2) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  Smith_normal_form_mat (Mod_Type_Connect.from_hma\\<^sub>m S2) \\<and>\n  Mod_Type_Connect.from_hma\\<^sub>m S2 =\n  Mod_Type_Connect.from_hma\\<^sub>m P2 * A' *\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  Mod_Type_Connect.from_hma\\<^sub>m P2\n  \\<in> carrier_mat (dim_row A') (dim_row A')\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  \\<in> carrier_mat (dim_col A') (dim_col A')\n\ngoal (1 subgoal):\n 1. is_SNF A'\n     (Mod_Type_Connect.from_hma\\<^sub>m P2,\n      Mod_Type_Connect.from_hma\\<^sub>m S2,\n      Mod_Type_Connect.from_hma\\<^sub>m Q2)", "unfolding is_SNF_def"], ["proof (prove)\nusing this:\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m P2) \\<and>\n  invertible_mat (Mod_Type_Connect.from_hma\\<^sub>m Q2) \\<and>\n  Smith_normal_form_mat (Mod_Type_Connect.from_hma\\<^sub>m S2) \\<and>\n  Mod_Type_Connect.from_hma\\<^sub>m S2 =\n  Mod_Type_Connect.from_hma\\<^sub>m P2 * A' *\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  Mod_Type_Connect.from_hma\\<^sub>m P2\n  \\<in> carrier_mat (dim_row A') (dim_row A')\n  Mod_Type_Connect.from_hma\\<^sub>m Q2\n  \\<in> carrier_mat (dim_col A') (dim_col A')\n\ngoal (1 subgoal):\n 1. case (Mod_Type_Connect.from_hma\\<^sub>m P2,\n          Mod_Type_Connect.from_hma\\<^sub>m S2,\n          Mod_Type_Connect.from_hma\\<^sub>m Q2) of\n    (P, S, Q) \\<Rightarrow>\n      P \\<in> carrier_mat (dim_row A') (dim_row A') \\<and>\n      Q \\<in> carrier_mat (dim_col A') (dim_col A') \\<and>\n      invertible_mat P \\<and>\n      invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A' * Q", "by auto"], ["proof (state)\nthis:\n  is_SNF A'\n   (Mod_Type_Connect.from_hma\\<^sub>m P2,\n    Mod_Type_Connect.from_hma\\<^sub>m S2,\n    Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_SNF A'\n   (Mod_Type_Connect.from_hma\\<^sub>m P2,\n    Mod_Type_Connect.from_hma\\<^sub>m S2,\n    Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> is_SNF A (Smith_2x2_JNF A)", "thus \"is_SNF A' (Smith_2x2_JNF A')\""], ["proof (prove)\nusing this:\n  is_SNF A'\n   (Mod_Type_Connect.from_hma\\<^sub>m P2,\n    Mod_Type_Connect.from_hma\\<^sub>m S2,\n    Mod_Type_Connect.from_hma\\<^sub>m Q2)\n\ngoal (1 subgoal):\n 1. is_SNF A' (Smith_2x2_JNF A')", "using P2S2Q2"], ["proof (prove)\nusing this:\n  is_SNF A'\n   (Mod_Type_Connect.from_hma\\<^sub>m P2,\n    Mod_Type_Connect.from_hma\\<^sub>m S2,\n    Mod_Type_Connect.from_hma\\<^sub>m Q2)\n  (P2, S2, Q2) = Smith_2x2 (Mod_Type_Connect.to_hma\\<^sub>m A')\n\ngoal (1 subgoal):\n 1. is_SNF A' (Smith_2x2_JNF A')", "by (metis Smith_2x2_JNF_def case_prod_conv)"], ["proof (state)\nthis:\n  is_SNF A' (Smith_2x2_JNF A')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2_JNF A)\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "interpret Smith_Impl Smith_1x2_JNF Smith_2x2_JNF div_op"], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_Impl Smith_1x2_JNF Smith_2x2_JNF div_op", "using SNF_2x2_works' SNF_1x2_works' d"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2_JNF A)\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2_JNF A)\n  is_div_op div_op\n\ngoal (1 subgoal):\n 1. Smith_Impl Smith_1x2_JNF Smith_2x2_JNF div_op", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have A: \"?A \\<in> carrier_mat CARD('m) CARD('n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mod_Type_Connect.from_hma\\<^sub>m A \\<in> carrier_mat CARD('m) CARD('n)", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.from_hma\\<^sub>m A \\<in> carrier_mat CARD('m) CARD('n)\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have \"is_SNF ?A (Smith_Impl.Smith_mxn Smith_1x2_JNF Smith_2x2_JNF div_op ?A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF (Mod_Type_Connect.from_hma\\<^sub>m A)\n     (Smith_mxn (Mod_Type_Connect.from_hma\\<^sub>m A))", "by (rule is_SNF_Smith_mxn[OF A])"], ["proof (state)\nthis:\n  is_SNF (Mod_Type_Connect.from_hma\\<^sub>m A)\n   (Smith_mxn (Mod_Type_Connect.from_hma\\<^sub>m A))\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "hence inv_P': \"invertible_mat P'\" \n    and Smith_S': \"Smith_normal_form_mat S'\" and inv_Q': \"invertible_mat Q'\" \n    and S'_P'AQ': \"S' = P' * ?A * Q'\" \n    and P': \"P' \\<in> carrier_mat (dim_row ?A) (dim_row ?A)\"\n    and Q': \"Q' \\<in> carrier_mat (dim_col ?A) (dim_col ?A)\""], ["proof (prove)\nusing this:\n  is_SNF (Mod_Type_Connect.from_hma\\<^sub>m A)\n   (Smith_mxn (Mod_Type_Connect.from_hma\\<^sub>m A))\n\ngoal (1 subgoal):\n 1. (invertible_mat P' &&&\n     Smith_normal_form_mat S' &&& invertible_mat Q') &&&\n    S' = P' * Mod_Type_Connect.from_hma\\<^sub>m A * Q' &&&\n    P' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A)) &&&\n    Q' \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))", "unfolding is_SNF_def P'S'Q'[symmetric]"], ["proof (prove)\nusing this:\n  case (P', S', Q') of\n  (P, S, Q) \\<Rightarrow>\n    P \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n             (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A)) \\<and>\n    Q \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n             (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A)) \\<and>\n    invertible_mat P \\<and>\n    invertible_mat Q \\<and>\n    Smith_normal_form_mat S \\<and>\n    S = P * Mod_Type_Connect.from_hma\\<^sub>m A * Q\n\ngoal (1 subgoal):\n 1. (invertible_mat P' &&&\n     Smith_normal_form_mat S' &&& invertible_mat Q') &&&\n    S' = P' * Mod_Type_Connect.from_hma\\<^sub>m A * Q' &&&\n    P' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A)) &&&\n    Q' \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))", "by auto"], ["proof (state)\nthis:\n  invertible_mat P'\n  Smith_normal_form_mat S'\n  invertible_mat Q'\n  S' = P' * Mod_Type_Connect.from_hma\\<^sub>m A * Q'\n  P' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n  Q' \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have S': \"S' \\<in> carrier_mat (dim_row ?A) (dim_col ?A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))", "using P' Q' S'_P'AQ'"], ["proof (prove)\nusing this:\n  P' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n  Q' \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n  S' = P' * Mod_Type_Connect.from_hma\\<^sub>m A * Q'\n\ngoal (1 subgoal):\n 1. S' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n              (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))", "by auto"], ["proof (state)\nthis:\n  S' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have [transfer_rule]: \"Mod_Type_Connect.HMA_M P' P\"    \n  and [transfer_rule]: \"Mod_Type_Connect.HMA_M S' S\" \n  and [transfer_rule]: \"Mod_Type_Connect.HMA_M Q' Q\" \n  and [transfer_rule]: \"Mod_Type_Connect.HMA_M ?A A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Mod_Type_Connect.HMA_M P' P &&& Mod_Type_Connect.HMA_M S' S) &&&\n    Mod_Type_Connect.HMA_M Q' Q &&&\n    Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m A) A", "unfolding Mod_Type_Connect.HMA_M_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' = Mod_Type_Connect.from_hma\\<^sub>m P &&&\n     S' = Mod_Type_Connect.from_hma\\<^sub>m S) &&&\n    Q' = Mod_Type_Connect.from_hma\\<^sub>m Q &&&\n    Mod_Type_Connect.from_hma\\<^sub>m A =\n    Mod_Type_Connect.from_hma\\<^sub>m A", "using PSQ_P'S'Q'"], ["proof (prove)\nusing this:\n  (P, S, Q) =\n  (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n   Mod_Type_Connect.to_hma\\<^sub>m Q')\n\ngoal (1 subgoal):\n 1. (P' = Mod_Type_Connect.from_hma\\<^sub>m P &&&\n     S' = Mod_Type_Connect.from_hma\\<^sub>m S) &&&\n    Q' = Mod_Type_Connect.from_hma\\<^sub>m Q &&&\n    Mod_Type_Connect.from_hma\\<^sub>m A =\n    Mod_Type_Connect.from_hma\\<^sub>m A", "using from_hma_to_hma\\<^sub>m[symmetric] P' A Q' S'"], ["proof (prove)\nusing this:\n  (P, S, Q) =\n  (Mod_Type_Connect.to_hma\\<^sub>m P', Mod_Type_Connect.to_hma\\<^sub>m S',\n   Mod_Type_Connect.to_hma\\<^sub>m Q')\n  ?t \\<in> carrier_mat CARD(?'nr) CARD(?'nc) \\<Longrightarrow>\n  ?t = from_hma\\<^sub>m (to_hma\\<^sub>m ?t)\n  P' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n  Mod_Type_Connect.from_hma\\<^sub>m A \\<in> carrier_mat CARD('m) CARD('n)\n  Q' \\<in> carrier_mat (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n  S' \\<in> carrier_mat (dim_row (Mod_Type_Connect.from_hma\\<^sub>m A))\n            (dim_col (Mod_Type_Connect.from_hma\\<^sub>m A))\n\ngoal (1 subgoal):\n 1. (P' = Mod_Type_Connect.from_hma\\<^sub>m P &&&\n     S' = Mod_Type_Connect.from_hma\\<^sub>m S) &&&\n    Q' = Mod_Type_Connect.from_hma\\<^sub>m Q &&&\n    Mod_Type_Connect.from_hma\\<^sub>m A =\n    Mod_Type_Connect.from_hma\\<^sub>m A", "by auto"], ["proof (state)\nthis:\n  Mod_Type_Connect.HMA_M P' P\n  Mod_Type_Connect.HMA_M S' S\n  Mod_Type_Connect.HMA_M Q' Q\n  Mod_Type_Connect.HMA_M (Mod_Type_Connect.from_hma\\<^sub>m A) A\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have inv_Q: \"invertible Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible Q", "using inv_Q'"], ["proof (prove)\nusing this:\n  invertible_mat Q'\n\ngoal (1 subgoal):\n 1. invertible Q", "by transfer"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "moreover"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have Smith_S: \"Smith_normal_form S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form S", "using Smith_S'"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat S'\n\ngoal (1 subgoal):\n 1. Smith_normal_form S", "by transfer"], ["proof (state)\nthis:\n  Smith_normal_form S\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "moreover"], ["proof (state)\nthis:\n  Smith_normal_form S\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have inv_P: \"invertible P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible P", "using inv_P'"], ["proof (prove)\nusing this:\n  invertible_mat P'\n\ngoal (1 subgoal):\n 1. invertible P", "by transfer"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "moreover"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "have \"S = P ** A ** Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = P ** A ** Q", "using S'_P'AQ'"], ["proof (prove)\nusing this:\n  S' = P' * Mod_Type_Connect.from_hma\\<^sub>m A * Q'\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q", "by transfer"], ["proof (state)\nthis:\n  S = P ** A ** Q\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S = P ** A ** Q\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "using inv_Q inv_P Smith_S"], ["proof (prove)\nusing this:\n  S = P ** A ** Q\n  invertible Q\n  invertible P\n  Smith_normal_form S\n\ngoal (1 subgoal):\n 1. is_SNF_HMA A (P, S, Q)", "unfolding is_SNF_HMA_def"], ["proof (prove)\nusing this:\n  S = P ** A ** Q\n  invertible Q\n  invertible P\n  Smith_normal_form S\n\ngoal (1 subgoal):\n 1. case (P, S, Q) of\n    (P, S, Q) \\<Rightarrow>\n      invertible P \\<and>\n      invertible Q \\<and> Smith_normal_form S \\<and> S = P ** A ** Q", "by auto"], ["proof (state)\nthis:\n  is_SNF_HMA A (P, S, Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}