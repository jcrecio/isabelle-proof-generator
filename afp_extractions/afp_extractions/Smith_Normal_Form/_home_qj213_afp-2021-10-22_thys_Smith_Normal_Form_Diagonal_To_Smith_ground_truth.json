{"file_name": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form/Diagonal_To_Smith.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form", "problem_names": ["lemma invertible_mat_1: \"invertible (mat (1::'a::comm_ring_1))\"", "lemma diagonal_step_code [code abstract]:\n  \"vec_nth (diagonal_step_row A i j c v a) = (%b. if a = from_nat i \\<and> b = from_nat i then c else \n               if a = from_nat j \\<and> b = from_nat j \n               then v * (A $ (from_nat j) $ (from_nat j)) else A $ a $ b)\"", "lemma diagonal_step_code_nth [code abstract]: \"vec_nth (diagonal_step A i j c v) \n  = diagonal_step_row A i j c v\"", "lemma euclid_ext2_code[code]:\n \"euclid_ext2 a b = (let ((p,q),d) = euclid_ext a b in (p,q, - b div d, a div d, d))\"", "lemma nrows_diagonal_step[simp]: \"nrows (diagonal_step A i j c v) = nrows A\"", "lemma ncols_diagonal_step[simp]: \"ncols (diagonal_step A i j c v) = ncols A\"", "lemma split_beta_bezout: \"bezout a b = \n  (fst(bezout a b),\n  fst (snd (bezout a b)),\n  fst (snd(snd (bezout a b))),\n  fst (snd(snd(snd (bezout a b)))),\n  snd (snd(snd(snd (bezout a b)))))\"", "lemma diagonal_to_Smith_i_preserves_previous_diagonal:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes i_min: \"i < min (nrows A) (ncols A)\" \n  and \"to_nat a \\<notin> set xs\" and \"to_nat a = to_nat b\"\n  and \"to_nat a \\<noteq> i\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  shows \"(diagonal_to_Smith_i xs A i bezout) $ a $ b = A $ a $ b\"", "lemma diagonal_step_dvd1[simp]:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\" and j i\n  defines \"v==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\"\n  and \"d==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\"\n shows \"diagonal_step A i j d v $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\"", "lemma diagonal_step_dvd2[simp]:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\" and j i\n  defines \"v==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\"\n  and \"d==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\"\n shows \"diagonal_step A i j d v $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\"", "lemma diagonal_to_Smith_i_dvd_ii:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  shows \"diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\"", "lemma diagonal_to_Smith_i_dvd_jj:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\" \n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and \"to_nat a \\<in> set xs\"\n  and \"to_nat a = to_nat b\"\n  and \"to_nat a \\<noteq> i\"\n  and \"distinct xs\"\nshows \"(diagonal_to_Smith_i xs A i bezout) $ (from_nat i) $ (from_nat i) \n       dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\"", "lemma diagonal_to_Smith_i_preserves_previous:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n    and i_min: \"i < min (nrows A) (ncols A)\"\n  and a_not_b: \"to_nat a \\<noteq> to_nat b\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  shows \"(diagonal_to_Smith_i xs A i bezout) $ a $ b = A $ a $ b\"", "lemma diagonal_step_preserves:\n  fixes A::\"'a::{times}^'b::mod_type^'c::mod_type\"\n  assumes ai: \"a \\<noteq> i\" and aj: \"a \\<noteq> j\" and a_min: \"a < min (nrows A) (ncols A)\" \n    and i_min: \"i < min (nrows A) (ncols A)\"\n  and j_min: \"j < min (nrows A) (ncols A)\"\n  shows \"diagonal_step A i j d v $ from_nat a $ from_nat b = A $ from_nat a $ from_nat b\"", "lemma gcd_greatest: \n  assumes \"is_gcd gcd'\" and \"c dvd a\" and \"c dvd b\" \n  shows \"c dvd gcd' a b\"", "lemma diagonal_to_Smith_i_dvd:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and \"\\<forall>a b. to_nat a\\<in>insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and \"c \\<notin> (set xs)\" and c: \"c<min (nrows A) (ncols A)\"\n  and \"distinct xs\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd \n  (diagonal_to_Smith_i xs A i bezout) $ (from_nat i) $ (from_nat i)\"", "lemma diagonal_to_Smith_i_dvd2:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\" \n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and c_notin: \"c \\<notin> (set xs)\" \n  and c: \"c < min (nrows A) (ncols A)\"\n  and distinct: \"distinct xs\"\n  and ab: \"to_nat a = to_nat b\" \n  and a_in: \"to_nat a \\<in> insert i (set xs)\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\"", "lemma diagonal_to_Smith_i_dvd2_k:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\" \n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<k\" and \"k\\<le>min (nrows A) (ncols A)\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and c_notin: \"c \\<notin> (set xs)\" \n  and c: \"c < min (nrows A) (ncols A)\"\n  and distinct: \"distinct xs\"\n  and ab: \"to_nat a = to_nat b\" \n  and a_in: \"to_nat a \\<in> insert i (set xs)\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\"", "lemma diagonal_to_Smith_row_i_preserves_previous:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and a_not_b: \"to_nat a \\<noteq> to_nat b\"  \n  shows \"Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b\"", "lemma diagonal_to_Smith_row_i_preserves_previous_diagonal:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"  \n  and a_notin: \"to_nat a \\<notin> set [i + 1..<min (nrows A) (ncols A)]\"\n  and ab: \"to_nat a = to_nat b\"\n  and ai: \"to_nat a \\<noteq> i\" \n  shows \"Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b\"", "lemma diagonal_to_Smith_row_i_dvd_jj:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes \"to_nat a \\<in> {i..<min (nrows A) (ncols A)}\"\n  and \"to_nat a = to_nat b\"\n  shows \"(Diagonal_to_Smith_row_i A i bezout) $ (from_nat i) $ (from_nat i) \n          dvd (Diagonal_to_Smith_row_i A i bezout) $ a $ b\"", "lemma diagonal_to_Smith_row_i_dvd_ii:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  shows \"Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\"", "lemma diagonal_to_Smith_row_i_dvd_jj':\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes a_in: \"to_nat a \\<in> {i..<min (nrows A) (ncols A)}\"\n  and ab: \"to_nat a = to_nat b\" \n  and ci: \"c\\<le>i\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> (set [i..<min (nrows A) (ncols A)]) \\<and> to_nat a = to_nat b \n    \\<longrightarrow> A $ from_nat c $ from_nat c dvd A $ a $ b\"\n  shows \"(Diagonal_to_Smith_row_i A i bezout) $ (from_nat c) $ (from_nat c) \n          dvd (Diagonal_to_Smith_row_i A i bezout) $ a $ b\"", "lemma diagonal_to_Smith_aux_append:\n  \"diagonal_to_Smith_aux A (xs @ ys) bezout \n    = diagonal_to_Smith_aux (diagonal_to_Smith_aux A xs bezout) ys bezout\"", "lemma diagonal_to_Smith_aux_append2[simp]:\n  \"diagonal_to_Smith_aux A (xs @ [ys]) bezout \n    = Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A xs bezout) ys bezout\"", "lemma isDiagonal_eq_upt_k_min:\n\"isDiagonal A = isDiagonal_upt_k A (min (nrows A) (ncols A))\"", "lemma isDiagonal_eq_upt_k_max:\n\"isDiagonal A = isDiagonal_upt_k A (max (nrows A) (ncols A))\"", "lemma isDiagonal: \n  assumes \"isDiagonal A\"\n    and \"to_nat a \\<noteq> to_nat b\" shows \"A $ a $ b = 0\"", "lemma nrows_diagonal_to_Smith_aux[simp]: \n  shows \"nrows (diagonal_to_Smith_aux A xs bezout) = nrows A\"", "lemma ncols_diagonal_to_Smith_aux[simp]:\n  shows \"ncols (diagonal_to_Smith_aux A xs bezout) = ncols A\"", "lemma isDiagonal_diagonal_to_Smith_aux:\n  assumes diag_A: \"isDiagonal A\" and k: \"k < min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout)\"", "lemma to_nat_less_nrows[simp]:\n  fixes A::\"'a^'b::mod_type^'c::mod_type\"\n    and a::'c\n  shows \"to_nat a < nrows A\"", "lemma to_nat_less_ncols[simp]:\n  fixes A::\"'a^'b::mod_type^'c::mod_type\"\n    and a::'b\n  shows \"to_nat a < ncols A\"", "lemma diagonal_to_Smith_aux_dvd:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ab: \"to_nat a = to_nat b\"\n  and c: \"c < k\" and ca: \"c \\<le> to_nat a\" and k: \"k<min (nrows A) (ncols A)\"\n  shows \"diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c\n    dvd diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\"", "lemma Smith_normal_form_upt_k_Suc_imp_k:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes s: \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\"\n  and k: \"k<min (nrows A) (ncols A)\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\"", "lemma Smith_normal_form_upt_k_le:\n  assumes \"a\\<le>k\" and \"Smith_normal_form_upt_k A k\"\n  shows \"Smith_normal_form_upt_k A a\"", "lemma Smith_normal_form_upt_k_imp_Suc_k:\n  assumes s: \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\"\n  and k: \"k<min (nrows A) (ncols A)\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\"", "lemma nrows_diagonal_to_Smith_i[simp]: \"nrows (diagonal_to_Smith_i xs A i bezout) = nrows A\"", "lemma ncols_diagonal_to_Smith_i[simp]: \"ncols (diagonal_to_Smith_i xs A i bezout) = ncols A\"", "lemma nrows_Diagonal_to_Smith_row_i[simp]: \"nrows (Diagonal_to_Smith_row_i A i bezout) = nrows A\"", "lemma ncols_Diagonal_to_Smith_row_i[simp]: \"ncols (Diagonal_to_Smith_row_i A i bezout) = ncols A\"", "lemma isDiagonal_diagonal_step:\n  assumes diag_A: \"isDiagonal A\" and i: \"i<min (nrows A) (ncols A)\"\n    and j: \"j<min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_step A i j d v)\"", "lemma isDiagonal_diagonal_to_Smith_i:\n  assumes \"isDiagonal A\"\n    and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\" \n    and \"i<min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_to_Smith_i xs A i bezout)\"", "lemma isDiagonal_Diagonal_to_Smith_row_i:\n  assumes \"isDiagonal A\" and \"i < min (nrows A) (ncols A)\"\n  shows \"isDiagonal (Diagonal_to_Smith_row_i A i bezout)\"", "lemma isDiagonal_diagonal_to_Smith_aux_general:\n  assumes elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\" \n  and \"isDiagonal A\"\nshows \"isDiagonal (diagonal_to_Smith_aux A xs bezout)\"", "lemma Smith_normal_form_upt_k_diagonal_to_Smith_aux:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes \"k<min (nrows A) (ncols A)\" and d: \"isDiagonal A\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\"", "lemma nrows_diagonal_to_Smith[simp]: \"nrows (diagonal_to_Smith A bezout) = nrows A\"", "lemma ncols_diagonal_to_Smith[simp]: \"ncols (diagonal_to_Smith A bezout) = ncols A\"", "lemma isDiagonal_diagonal_to_Smith:\n  assumes d: \"isDiagonal A\"\n  shows \"isDiagonal (diagonal_to_Smith A bezout)\"", "lemma Smith_normal_form_diagonal_to_Smith:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and d: \"isDiagonal A\"\n  shows \"Smith_normal_form (diagonal_to_Smith A bezout)\"", "lemmas diagonal_step_PQ_def = diagonal_step_PQ.simps", "lemma from_nat_neq_rows:\n  fixes A::\"'a^'cols::mod_type^'rows::mod_type\"\n  assumes i: \"i<(nrows A)\" and k: \"k<(nrows A)\" and ik: \"i \\<noteq> k\"\n  shows \"from_nat i \\<noteq> (from_nat k::'rows)\"", "lemma from_nat_neq_cols:\n  fixes A::\"'a^'cols::mod_type^'rows::mod_type\"\n  assumes i: \"i<(ncols A)\" and k: \"k<(ncols A)\" and ik: \"i \\<noteq> k\"\n  shows \"from_nat i \\<noteq> (from_nat k::'cols)\"", "lemma diagonal_step_PQ_invertible_P:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i_not_k: \"i \\<noteq> k\" \n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\"\nshows \"invertible P\"", "lemma diagonal_step_PQ_invertible_Q:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i_not_k: \"i \\<noteq> k\" \n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\"\nshows \"invertible Q\"", "lemma mat_q_1[simp]: \"mat q $ a $ a = q\"", "lemma mat_q_0[simp]:\n  assumes ab: \"a \\<noteq> b\" \n  shows \"mat q $ a $ b = 0\"", "lemma diagonal_step_PQ_P_alt:\nfixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\nshows \"\n  P = (\\<chi> a b. \n  if a = from_nat i \\<and> b = from_nat i then p else \n  if a = from_nat i \\<and> b = from_nat k then 1 else\n  if a = from_nat k \\<and> b = from_nat i then -v * p + 1 else\n  if a = from_nat k \\<and> b = from_nat k then -v else\n  if a = b then 1 else 0)\"", "lemma diagonal_step_PQ_Q_alt:\nfixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\nshows \"\n  Q = (\\<chi> a b. \n  if a = from_nat i \\<and> b = from_nat i then 1 else \n  if a = from_nat i \\<and> b = from_nat k then -u else\n  if a = from_nat k \\<and> b = from_nat i then q else\n  if a = from_nat k \\<and> b = from_nat k then -q*u-1 else\n  if a = b then 1 else 0)\"", "lemma diagonal_step_PQ_PA:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\nshows \"P**A = row_add (interchange_rows \n  (row_add A (from_nat k) (from_nat i) p) (from_nat i) (from_nat k)) (from_nat k) (from_nat i) (- v)\"", "lemma diagonal_step_PQ_PAQ':\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  shows \"P**A**Q = (mult_column (column_add (column_add (P**A) (from_nat i) (from_nat k) q) \n                   (from_nat k) (from_nat i) u) (from_nat k) (- 1))\"", "lemma isDiagonal_imp_0: \n  assumes \"isDiagonal A\"\n  and \"from_nat a \\<noteq> from_nat b\"\n  and \"a < min (nrows A) (ncols A)\"\n  and \"b < min (nrows A) (ncols A)\"\n  shows \"A $ from_nat a $ from_nat b = 0\"", "lemma diagonal_step_PQ:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\n  and ib: \"is_bezout_ext bezout\" and diag: \"isDiagonal A\"\n  shows \"diagonal_step A i k d v = P**A**Q\"", "lemmas Diagonal_to_Smith_row_i_PQ_def = Diagonal_to_Smith_row_i_PQ.simps", "lemma diagonal_to_Smith_aux_PQ_append:\n  \"diagonal_to_Smith_aux_PQ (xs @ ys) bezout (P,A,Q)\n    = diagonal_to_Smith_aux_PQ ys bezout (diagonal_to_Smith_aux_PQ xs bezout (P,A,Q))\"", "lemma diagonal_to_Smith_aux_PQ_append2[simp]:\n  \"diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (P,A,Q) \n    = Diagonal_to_Smith_row_i_PQ ys bezout (diagonal_to_Smith_aux_PQ xs bezout (P,A,Q))\"", "lemma diagonal_to_Smith_i_PQ_eq:\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_i_PQ xs i bezout (P,B,Q)\"\n  and xs: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\" \n  and diag: \"isDiagonal B\" and i_notin: \"i \\<notin> set xs\" and i: \"i<min (nrows A) (ncols A)\"\nshows \"B' = diagonal_to_Smith_i xs B i bezout\"", "lemma diagonal_to_Smith_i_PQ':\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_i_PQ xs i bezout (P,B,Q)\"\n  and xs: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\" \n  and diag: \"isDiagonal B\" and i_notin: \"i \\<notin> set xs\" and i: \"i<min (nrows A) (ncols A)\"\nshows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q'\"", "lemma Diagonal_to_Smith_row_i_PQ_eq:\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = Diagonal_to_Smith_row_i B i bezout\"", "lemma Diagonal_to_Smith_row_i_PQ':\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q'\"", "lemma Diagonal_to_Smith_row_i_PQ:\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q' \\<and> B' = Diagonal_to_Smith_row_i B i bezout\"", "lemma diagonal_to_Smith_aux_PQ:\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_aux_PQ [0..<k] bezout (P,B,Q)\"\n  and diag: \"isDiagonal B\" and k:\"k<min (nrows A) (ncols A)\"\nshows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<k] bezout\"", "lemmas diagonal_to_Smith_PQ_def = diagonal_to_Smith_PQ.simps", "lemma diagonal_to_Smith_PQ:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\" and ib: \"is_bezout_ext bezout\"\n  assumes PBQ: \"(P,B,Q) = diagonal_to_Smith_PQ A bezout\"\n  shows \"B = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\"", "lemma diagonal_to_Smith_PQ_exists:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\"\n  shows \"\\<exists>P Q. \n         invertible (P::'a^'rows::{mod_type}^'rows::{mod_type}) \n       \\<and> invertible (Q::'a^'cols::{mod_type}^'cols::{mod_type})\n       \\<and> Smith_normal_form (P**A**Q)\"", "lemma diagonal_to_Smith_PQ':\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\" and ib: \"is_bezout_ext bezout\"\n  assumes PBQ: \"(P,S,Q) = diagonal_to_Smith_PQ A bezout\"\n  shows \"S = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> Smith_normal_form S\""], "translations": [["", "lemma invertible_mat_1: \"invertible (mat (1::'a::comm_ring_1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (mat (1::'a))", "unfolding invertible_iff_is_unit"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (1::'a)) dvd (1::'a)", "by simp"], ["", "subsection \\<open>Implementation of the algorithm\\<close>"], ["", "type_synonym 'a bezout = \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\""], ["", "hide_const Countable.from_nat"], ["", "hide_const Countable.to_nat"], ["", "text \\<open>The algorithm is based on the one presented by Bradley in his article entitled \n  ``Algorithms for Hermite and Smith normal matrices and linear diophantine equations''. \n  Some improvements have been introduced to get a general version for any matrix (including\n  non-square and singular ones).\\<close>"], ["", "text \\<open>I also introduced another improvement: the element in the position j does not need \nto be checked each time, since the element $A_{ii}$ will already divide $A_{jj}$ (where $j \\le k$). \nThe gcd will be placed in $A_{ii}$.\\<close>"], ["", "(*This version is a valid implementation and permits the formalization, \n  but it would not be executable due to the abstraction*)\n\n(*\nprimrec diagonal_to_Smith_i :: \"nat list \\<Rightarrow> 'a:: {gcd,divide}^'n::mod_type^'n::mod_type \\<Rightarrow> 'n::mod_type \\<Rightarrow> 'a^'n::mod_type^'n::mod_type\" \n where\n\"diagonal_to_Smith_i [] A i  = A\" |\n\"diagonal_to_Smith_i (j#xs) A i  = (\n  if A $ i $ i dvd A $ (from_nat j) $ (from_nat j) then diagonal_to_Smith_i xs A i  (*If it divides, then we proceed.*)\n  else \n      let c = gcd (A$i$i) (A$(from_nat j)$(from_nat j));\n          A' = (\\<chi> a b. if a = i \\<and> b = i then c else \n               if a = from_nat j \\<and> b = from_nat j \n               then A$ i $ i * (A $ (from_nat j) $ (from_nat j) div c) else A $ a $ b)\n      in diagonal_to_Smith_i xs A' i (*We do the step and proceed*)\n  )\n  \"\n*)"], ["", "text \\<open>This function transforms the element $A_{jj}$ in order to be divisible by $A_{ii}$\n(and it changes $A_{ii}$ as well).\n\nThe use of @{text \"from_nat\"} and @{text \"from_nat\"} is mandatory since the same \nindex $i$ cannot be used for both rows\nand columns at the same time, since they could have different type, concretely, \nwhen the matrix is rectangular.\\<close>"], ["", "text\\<open>The following definition is valid, but since execution requires the trick of converting\nall operations in terms of rows, then we would be recalculating the B\\'ezout coefficients each time.\\<close>"], ["", "(*\ndefinition \"diagonal_step A i j bezout = (let\n              (p, q, u, v, d) = bezout (A $ from_nat i $ from_nat i) (A $ (from_nat j) $ (from_nat j)) in \n              (\\<chi> a b. if a = from_nat i \\<and> b = from_nat i then d else \n               if a = from_nat j \\<and> b = from_nat j \n               then  v * (A $ (from_nat j) $ (from_nat j)) else A $ a $ b))\"\n*)"], ["", "text\\<open>Thus, the definition is parameterized by the necessary elements instead of the operation, \n     to avoid recalculations.\\<close>"], ["", "definition \"diagonal_step A i j d v =               \n              (\\<chi> a b. if a = from_nat i \\<and> b = from_nat i then d else \n               if a = from_nat j \\<and> b = from_nat j \n               then  v * (A $ (from_nat j) $ (from_nat j)) else A $ a $ b)\""], ["", "fun diagonal_to_Smith_i :: \n\"nat list \\<Rightarrow> 'a::{bezout_ring}^'cols::mod_type^'rows::mod_type \\<Rightarrow> nat \\<Rightarrow> ('a bezout) \n  \\<Rightarrow> 'a^'cols::mod_type^'rows::mod_type\" \n where\n\"diagonal_to_Smith_i [] A i bezout = A\" |\n\"diagonal_to_Smith_i (j#xs) A i bezout = (\n  if A $ (from_nat i) $ (from_nat i) dvd A $ (from_nat j) $ (from_nat j) \n      then diagonal_to_Smith_i xs A i bezout\n  else let (p, q, u, v, d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j); \n          A' = diagonal_step A i j d v\n      in diagonal_to_Smith_i xs A' i bezout\n  )\n  \""], ["", "definition \"Diagonal_to_Smith_row_i A i bezout \n  = diagonal_to_Smith_i [i+1..<min (nrows A) (ncols A)] A i bezout\""], ["", "fun diagonal_to_Smith_aux :: \" 'a::{bezout_ring}^'cols::mod_type^'rows::mod_type \n  \\<Rightarrow> nat list \\<Rightarrow> ('a bezout) \\<Rightarrow>  'a^'cols::mod_type^'rows::mod_type\"\n  where\n  \"diagonal_to_Smith_aux A [] bezout = A\" |\n  \"diagonal_to_Smith_aux A (i#xs) bezout \n          = diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout\""], ["", "text\\<open>The minimum arises to include the case of non-square matrices (we do not \n  demand the input diagonal matrix to be square, just have zeros in non-diagonal entries).\n\n  This iteration does not need to be performed until the last element of the diagonal, \n  because in the second-to-last step the matrix will be already in Smith normal form.\\<close>"], ["", "definition \"diagonal_to_Smith A bezout \n  = diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout\""], ["", "subsection\\<open>Code equations to get an executable version\\<close>"], ["", "definition diagonal_step_row \n  where \"diagonal_step_row A i j c v a = vec_lambda (%b. if a = from_nat i \\<and> b = from_nat i then c else \n               if a = from_nat j \\<and> b = from_nat j \n               then v * (A $ (from_nat j) $ (from_nat j)) else A $ a $ b)\""], ["", "lemma diagonal_step_code [code abstract]:\n  \"vec_nth (diagonal_step_row A i j c v a) = (%b. if a = from_nat i \\<and> b = from_nat i then c else \n               if a = from_nat j \\<and> b = from_nat j \n               then v * (A $ (from_nat j) $ (from_nat j)) else A $ a $ b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (diagonal_step_row A i j c v a) =\n    (\\<lambda>b.\n        if a = from_nat i \\<and> b = from_nat i then c\n        else if a = from_nat j \\<and> b = from_nat j\n             then v * A $ from_nat j $ from_nat j else A $ a $ b)", "unfolding diagonal_step_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>b.\n            if a = from_nat i \\<and> b = from_nat i then c\n            else if a = from_nat j \\<and> b = from_nat j\n                 then v * A $ from_nat j $ from_nat j else A $ a $ b) =\n    (\\<lambda>b.\n        if a = from_nat i \\<and> b = from_nat i then c\n        else if a = from_nat j \\<and> b = from_nat j\n             then v * A $ from_nat j $ from_nat j else A $ a $ b)", "by auto"], ["", "lemma diagonal_step_code_nth [code abstract]: \"vec_nth (diagonal_step A i j c v) \n  = diagonal_step_row A i j c v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (diagonal_step A i j c v) = diagonal_step_row A i j c v", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>a b.\n            if a = from_nat i \\<and> b = from_nat i then c\n            else if a = from_nat j \\<and> b = from_nat j\n                 then v * A $ from_nat j $ from_nat j else A $ a $ b) =\n    diagonal_step_row A i j c v", "unfolding diagonal_step_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>a b.\n            if a = from_nat i \\<and> b = from_nat i then c\n            else if a = from_nat j \\<and> b = from_nat j\n                 then v * A $ from_nat j $ from_nat j else A $ a $ b) =\n    (\\<lambda>a.\n        \\<chi>b.\n           if a = from_nat i \\<and> b = from_nat i then c\n           else if a = from_nat j \\<and> b = from_nat j\n                then v * A $ from_nat j $ from_nat j else A $ a $ b)", "by auto"], ["", "text\\<open>Code equation to avoid recalculations when computing the Bezout coefficients. \\<close>"], ["", "lemma euclid_ext2_code[code]:\n \"euclid_ext2 a b = (let ((p,q),d) = euclid_ext a b in (p,q, - b div d, a div d, d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euclid_ext2 a b =\n    (let ((p, q), d) = euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b\n     in (p, q, - b div d, a div d, d))", "unfolding euclid_ext2_def split_beta Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (bezout_coefficients a b), snd (bezout_coefficients a b),\n     - b div gcd a b, a div gcd a b, gcd a b) =\n    (fst (fst (euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b)),\n     snd (fst (euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b)),\n     - b div snd (euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b),\n     a div snd (euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b),\n     snd (euclid_ext_aux (1::'a) (0::'a) (0::'a) (1::'a) a b))", "by auto"], ["", "subsection\\<open>Examples of execution\\<close>"], ["", "value \"let A= list_of_list_to_matrix [[12,0,0::int],[0,6,0::int],[0,0,2::int]]::int^3^3 \n  in matrix_to_list_of_list (diagonal_to_Smith A euclid_ext2)\""], ["", "text\\<open>Example obtained from:\n\\url{https://math.stackexchange.com/questions/77063/how-do-i-get-this-matrix-in-smith-normal-form-and-is-smith-normal-form-unique}\n\\<close>"], ["", "value \"let A= list_of_list_to_matrix \n    [\n    [[:-3,1:],0,0,0],\n    [0,[:1,1:],0,0],\n    [0,0,[:1,1:],0],\n    [0,0,0,[:1,1:]]]::rat poly^4^4 \n  in matrix_to_list_of_list (diagonal_to_Smith A euclid_ext2)\""], ["", "text\\<open>Polynomial matrix\\<close>"], ["", "value \"let A = list_of_list_to_matrix \n      [\n        [[:-3,1:],0,0,0],\n        [0,[:1,1:],0,0],\n        [0,0,[:1,1:],0],\n        [0,0,0,[:1,1:]],\n        [0,0,0,0]]::rat poly^4^5 \n  in matrix_to_list_of_list (diagonal_to_Smith A euclid_ext2)\""], ["", "subsection\\<open>Soundness of the algorithm\\<close>"], ["", "lemma nrows_diagonal_step[simp]: \"nrows (diagonal_step A i j c v) = nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows (diagonal_step A i j c v) = nrows A", "by (simp add: nrows_def)"], ["", "lemma ncols_diagonal_step[simp]: \"ncols (diagonal_step A i j c v) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols (diagonal_step A i j c v) = ncols A", "by (simp add: ncols_def)"], ["", "context\n  fixes bezout::\"'a::{bezout_ring} \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\"\n  assumes ib: \"is_bezout_ext bezout\"\nbegin"], ["", "lemma split_beta_bezout: \"bezout a b = \n  (fst(bezout a b),\n  fst (snd (bezout a b)),\n  fst (snd(snd (bezout a b))),\n  fst (snd(snd(snd (bezout a b)))),\n  snd (snd(snd(snd (bezout a b)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bezout a b =\n    (fst (bezout a b), fst (snd (bezout a b)), fst (snd (snd (bezout a b))),\n     fst (snd (snd (snd (bezout a b)))), snd (snd (snd (snd (bezout a b)))))", "unfolding split_beta"], ["proof (prove)\ngoal (1 subgoal):\n 1. bezout a b =\n    (fst (bezout a b), fst (snd (bezout a b)), fst (snd (snd (bezout a b))),\n     fst (snd (snd (snd (bezout a b)))), snd (snd (snd (snd (bezout a b)))))", "by (auto simp add: split_beta)"], ["", "text\\<open>The following lemma shows that @{text \"diagonal_to_Smith_i\"} preserves the previous element. \n  We use the assumption @{text \"to_nat a = to_nat b\"} in order to ensure that we are treating with \n  a diagonal entry. Since the matrix could be rectangular, the types of a and b can be different, \n  and thus we cannot write either @{text \"a = b\"} or @{text \"A $ a $ b\"}.\\<close>"], ["", "lemma diagonal_to_Smith_i_preserves_previous_diagonal:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes i_min: \"i < min (nrows A) (ncols A)\" \n  and \"to_nat a \\<notin> set xs\" and \"to_nat a = to_nat b\"\n  and \"to_nat a \\<noteq> i\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  shows \"(diagonal_to_Smith_i xs A i bezout) $ a $ b = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b", "using assms"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set xs\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>i < min (nrows A) (ncols A); to_nat a \\<notin> set [];\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ a $ b =\n                         A $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "case (1 A i bezout)"], ["proof (state)\nthis:\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>i < min (nrows A) (ncols A); to_nat a \\<notin> set [];\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ a $ b =\n                         A $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "then"], ["proof (chain)\npicking this:\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)", "show ?case"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [] A i bezout $ a $ b = A $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i [] A i bezout $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n   to_nat a = to_nat b; to_nat a \\<noteq> i;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; i < min (nrows ?xe) (ncols ?xe);\n   to_nat a \\<notin> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow>\n      x < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ a $ b =\n                    ?xe $ a $ b\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set (j # xs)\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n                 to_nat a = to_nat b; to_nat a \\<noteq> i;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; i < min (nrows xe) (ncols xe);\n            to_nat a \\<notin> set xs; to_nat a = to_nat b;\n            to_nat a \\<noteq> i;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        i < min (nrows A) (ncols A); to_nat a \\<notin> set (j # xs);\n        to_nat a = to_nat b; to_nat a \\<noteq> i;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "then"], ["proof (chain)\npicking this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "using \"2.hyps\" \"2.prems\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   i < min (nrows A) (ncols A); to_nat a \\<notin> set xs;\n   to_nat a = to_nat b; to_nat a \\<noteq> i;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; i < min (nrows ?xe) (ncols ?xe);\n   to_nat a \\<notin> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow>\n      x < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ a $ b =\n                    ?xe $ a $ b\n  i < min (nrows A) (ncols A)\n  to_nat a \\<notin> set (j # xs)\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note i_min = 2(3)"], ["proof (state)\nthis:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note hyp = 2(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; i < min (nrows ?xe) (ncols ?xe);\n   to_nat a \\<notin> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow>\n      x < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ a $ b =\n                    ?xe $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note i_notin = 2(4)"], ["proof (state)\nthis:\n  to_nat a \\<notin> set (j # xs)\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note a_eq_b = \"2.prems\"(3)"], ["proof (state)\nthis:\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note elements_xs = 2(7)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note a_not_i = 2(6)"], ["proof (state)\nthis:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have a_not_j: \"a \\<noteq> from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat j", "by (metis elements_xs i_notin list.set_intros(1) min_less_iff_conj nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  a \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"... $ a $ b = ?A' $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    a $\n    b =\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "by (rule hyp[OF False], insert i_notin i_min a_eq_b a_not_i pquvd elements_xs, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"... = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b =\n    A $ a $ b", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    a $\n    b =\n    A $ a $ b", "using a_not_j a_not_i"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat j\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    a $\n    b =\n    A $ a $ b", "by (smt i_min min.strict_boundedE nrows_def to_nat_from_nat_id vec_lambda_beta)"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b =\n  A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_step_dvd1[simp]:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\" and j i\n  defines \"v==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\"\n  and \"d==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\"\n shows \"diagonal_step A i j d v $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "unfolding is_bezout_ext_def diagonal_step_def v_def d_def"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "by (auto simp add: split_beta)"], ["", "lemma diagonal_step_dvd2[simp]:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\" and j i\n  defines \"v==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\"\n  and \"d==case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\"\n shows \"diagonal_step A i j d v $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j", "unfolding is_bezout_ext_def diagonal_step_def v_def d_def"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat j $ from_nat j", "by (auto simp add: split_beta)"], ["", "end"], ["", "text\\<open>Once the step is carried out, the new element ${A'}_{ii}$ will divide the element $A_{ii}$\\<close>"], ["", "lemma diagonal_to_Smith_i_dvd_ii:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  shows \"diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       is_bezout_ext bezout \\<Longrightarrow>\n       diagonal_to_Smith_i [] A i bezout $ from_nat i $ from_nat i dvd\n       A $ from_nat i $ from_nat i\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "case (1 A i bezout)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       is_bezout_ext bezout \\<Longrightarrow>\n       diagonal_to_Smith_i [] A i bezout $ from_nat i $ from_nat i dvd\n       A $ from_nat i $ from_nat i\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "then"], ["proof (chain)\npicking this:\n  is_bezout_ext bezout", "show ?case"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [] A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i [] A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i dvd\n                    A $ from_nat i $ from_nat i\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i dvd\n                    ?xe $ from_nat i $ from_nat i\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "note ib = \"2.prems\"(1)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  A $ from_nat i $ from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             xe $ from_nat i $ from_nat i;\n        is_bezout_ext bezout\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         A $ from_nat i $ from_nat i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "then"], ["proof (chain)\npicking this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "using \"2.hyps\"(1) \"2.prems\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i dvd\n                    A $ from_nat i $ from_nat i\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "note hyp = \"2.hyps\"(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i dvd\n                    ?xe $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "have \"... $ from_nat i $ from_nat i dvd ?A' $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    from_nat i $\n    from_nat i dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat i $\n    from_nat i", "by (rule hyp[OF False], insert pquvd ib, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "have \"... dvd A $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "unfolding is_bezout_ext_def"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Once the step is carried out, the new element ${A'}_{ii}$ \n  divides the rest of elements of the diagonal. This proof requires commutativity (already\n  included in the type restriction @{text \"bezout_ring\"}).\\<close>"], ["", "lemma diagonal_to_Smith_i_dvd_jj:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\" \n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and \"to_nat a \\<in> set xs\"\n  and \"to_nat a = to_nat b\"\n  and \"to_nat a \\<noteq> i\"\n  and \"distinct xs\"\nshows \"(diagonal_to_Smith_i xs A i bezout) $ (from_nat i) $ (from_nat i) \n       dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "using assms"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  to_nat a \\<in> set xs\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  distinct xs\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        to_nat a \\<in> set []; to_nat a = to_nat b; to_nat a \\<noteq> i;\n        distinct []\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i [] A i bezout $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case (1 A i)"], ["proof (state)\nthis:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  to_nat a \\<in> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  distinct []\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        to_nat a \\<in> set []; to_nat a = to_nat b; to_nat a \\<noteq> i;\n        distinct []\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i [] A i bezout $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "then"], ["proof (chain)\npicking this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  to_nat a \\<in> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  distinct []", "show ?case"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  to_nat a \\<in> set []\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  distinct []\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [] A i bezout_ $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i [] A i bezout_ $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i [] A i bezout_ $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i [] A i bezout_ $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n   distinct xs\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i dvd\n                    diagonal_to_Smith_i xs A i bezout $ a $ b\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe);\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n   distinct xs\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i dvd\n                    diagonal_to_Smith_i xs ?xe i bezout $ a $ b\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  to_nat a \\<in> set (j # xs)\n  to_nat a = to_nat b\n  to_nat a \\<noteq> i\n  distinct (j # xs)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note ib = \"2.prems\"(1)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note to_nat_a_not_i = 2(8)"], ["proof (state)\nthis:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note i_min = 2(4)"], ["proof (state)\nthis:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note elements_xs = \"2.prems\"(3)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note a_eq_b = \"2.prems\"(5)"], ["proof (state)\nthis:\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note a_in_j_xs = 2(6)"], ["proof (state)\nthis:\n  to_nat a \\<in> set (j # xs)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note distinct = 2(9)"], ["proof (state)\nthis:\n  distinct (j # xs)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 to_nat a \\<in> set xs; to_nat a = to_nat b;\n                 to_nat a \\<noteq> i; distinct xs\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i dvd\n                                  diagonal_to_Smith_i xs A i bezout $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            to_nat a \\<in> set xs; to_nat a = to_nat b; to_nat a \\<noteq> i;\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i dvd\n                             diagonal_to_Smith_i xs xe i bezout $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        to_nat a \\<in> set (j # xs); to_nat a = to_nat b;\n        to_nat a \\<noteq> i; distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note Aii_dvd_Ajj = True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "proof (cases \"to_nat a = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  to_nat a = j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have a: \"a = (from_nat j::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = from_nat j", "using True"], ["proof (prove)\nusing this:\n  to_nat a = j\n\ngoal (1 subgoal):\n 1. a = from_nat j", "by auto"], ["proof (state)\nthis:\n  a = from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have b: \"b = (from_nat j::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = from_nat j", "using True a_eq_b"], ["proof (prove)\nusing this:\n  to_nat a = j\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. b = from_nat j", "by auto"], ["proof (state)\nthis:\n  b = from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs A i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs A i bezout", "using Aii_dvd_Ajj"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs A i bezout", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs A i bezout\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs A i bezout\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"... $ from_nat j $ from_nat j = A $ from_nat j $ from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat j $ from_nat j =\n    A $ from_nat j $ from_nat j", "proof (rule diagonal_to_Smith_i_preserves_previous_diagonal[OF ib i_min])"], ["proof (state)\ngoal (4 subgoals):\n 1. to_nat (from_nat j) \\<notin> set xs\n 2. to_nat (from_nat j) = to_nat (from_nat j)\n 3. to_nat (from_nat j) \\<noteq> i\n 4. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "show \"to_nat (from_nat j::'c) \\<notin> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat j) \\<notin> set xs", "using True a_in_j_xs distinct"], ["proof (prove)\nusing this:\n  to_nat a = j\n  to_nat a \\<in> set (j # xs)\n  distinct (j # xs)\n\ngoal (1 subgoal):\n 1. to_nat (from_nat j) \\<notin> set xs", "by auto"], ["proof (state)\nthis:\n  to_nat (from_nat j) \\<notin> set xs\n\ngoal (3 subgoals):\n 1. to_nat (from_nat j) = to_nat (from_nat j)\n 2. to_nat (from_nat j) \\<noteq> i\n 3. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "show \"to_nat (from_nat j::'c) = to_nat (from_nat j::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat j) = to_nat (from_nat j)", "by (metis True a_eq_b from_nat_to_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat j) = to_nat (from_nat j)\n\ngoal (2 subgoals):\n 1. to_nat (from_nat j) \\<noteq> i\n 2. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "show \"to_nat (from_nat j::'c) \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat j) \\<noteq> i", "using True to_nat_a_not_i"], ["proof (prove)\nusing this:\n  to_nat a = j\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. to_nat (from_nat j) \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  to_nat (from_nat j) \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "show \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "using elements_xs"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j", "have \"diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j \n        = A $ from_nat j $ from_nat j \""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n    A $ from_nat j $ from_nat j", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "hence \"diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = ?Ajj\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n    A $ from_nat j $ from_nat j", "unfolding a b"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n  A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat j $ from_nat j =\n    A $ from_nat j $ from_nat j", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "moreover"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd ?Aii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "by (rule diagonal_to_Smith_i_dvd_ii[OF ib])"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (2 subgoals):\n 1. to_nat a = j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "ultimately"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  A $ from_nat j $ from_nat j\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  A $ from_nat j $ from_nat j\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "using Aii_dvd_Ajj dvd_trans"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  A $ from_nat j $ from_nat j\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  A $ from_nat i $ from_nat i\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  to_nat a \\<noteq> j\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have a_in_xs: \"to_nat a \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a \\<in> set xs", "using False"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> j\n\ngoal (1 subgoal):\n 1. to_nat a \\<in> set xs", "using \"2.prems\"(4)"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> j\n  to_nat a \\<in> set (j # xs)\n\ngoal (1 subgoal):\n 1. to_nat a \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<in> set xs\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs A i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs A i bezout", "using True"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs A i bezout", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs A i bezout\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs A i bezout\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"...  $ (from_nat i) $ (from_nat i) dvd diagonal_to_Smith_i xs A i bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "by (rule \"2.hyps\"(1)[OF True ib i_min _ a_in_xs a_eq_b to_nat_a_not_i]) \n           (insert elements_xs distinct, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note Aii_not_dvd_Ajj = False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "proof (cases \"to_nat a \\<in> set xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  to_nat a \\<in> set xs\n\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "note a_in_xs = True"], ["proof (state)\nthis:\n  to_nat a \\<in> set xs\n\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"... $ from_nat i $ from_nat i dvd diagonal_to_Smith_i xs ?A' i bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    from_nat i $\n    from_nat i dvd\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    a $\n    b", "by (rule \"2.hyps\"(2)[OF False _ _ _ _ _ _ _ _ _ a_in_xs a_eq_b to_nat_a_not_i ])\n           (insert elements_xs distinct i_min ib pquvd, auto simp add: nrows_def ncols_def)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i dvd\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b\n\ngoal (2 subgoals):\n 1. to_nat a \\<in> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n 2. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  to_nat a \\<notin> set xs\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have to_nat_a_eq_j: \"to_nat a = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a = j", "using False a_in_j_xs"], ["proof (prove)\nusing this:\n  to_nat a \\<notin> set xs\n  to_nat a \\<in> set (j # xs)\n\ngoal (1 subgoal):\n 1. to_nat a = j", "by auto"], ["proof (state)\nthis:\n  to_nat a = j\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have a: \"a = (from_nat j::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = from_nat j", "using to_nat_a_eq_j"], ["proof (prove)\nusing this:\n  to_nat a = j\n\ngoal (1 subgoal):\n 1. a = from_nat j", "by auto"], ["proof (state)\nthis:\n  a = from_nat j\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have b: \"b = (from_nat j::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = from_nat j", "using to_nat_a_eq_j a_eq_b"], ["proof (prove)\nusing this:\n  to_nat a = j\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. b = from_nat j", "by auto"], ["proof (state)\nthis:\n  b = from_nat j\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have d_eq: \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using Aii_not_dvd_Ajj"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"... $ a $ b = ?A' $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    a $\n    b =\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "by (rule diagonal_to_Smith_i_preserves_previous_diagonal[OF ib _ False a_eq_b to_nat_a_not_i])\n           (insert i_min elements_xs ib, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b", "have \"diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = ?A' $ a $ b\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "moreover"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i \n        dvd ?A' $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat i $\n    from_nat i", "using d_eq diagonal_to_Smith_i_dvd_ii[OF ib]"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n  diagonal_to_Smith_i ?xs ?A ?i bezout $ from_nat ?i $ from_nat ?i dvd\n  ?A $ from_nat ?i $ from_nat ?i\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat i $\n    from_nat i", "by simp"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "moreover"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "have \"?A' $ from_nat i $ from_nat i dvd ?A' $ from_nat j $ from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat i $\n    from_nat i dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat j $\n    from_nat j", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat j $\n    from_nat j", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat j $\n    from_nat j", "unfolding is_bezout_ext_def split_beta"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     let prod = bezout a b\n     in fst prod * a + fst (snd prod) * b =\n        snd (snd (snd (snd prod))) \\<and>\n        snd (snd (snd (snd prod))) dvd a \\<and>\n        snd (snd (snd (snd prod))) dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd snd (snd (snd (snd prod)))) \\<and>\n        snd (snd (snd (snd prod))) * fst (snd (snd prod)) = - b \\<and>\n        snd (snd (snd (snd prod))) * fst (snd (snd (snd prod))) = a\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then snd (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                                  (A $ from_nat j $ from_nat j)))))\n        else if a = from_nat j \\<and> b = from_nat j\n             then fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n (A $ from_nat j $ from_nat j))))) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat i $\n    from_nat i dvd\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then snd (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                                  (A $ from_nat j $ from_nat j)))))\n        else if a = from_nat j \\<and> b = from_nat j\n             then fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n (A $ from_nat j $ from_nat j))))) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat j $\n    from_nat j", "by (auto, meson dvd_mult)+"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat j $\n  from_nat j\n\ngoal (1 subgoal):\n 1. to_nat a \\<notin> set xs \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "ultimately"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat j $\n  from_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat j $\n  from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "using dvd_trans a b"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat i $\n  from_nat i dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat j $\n  from_nat j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n  a = from_nat j\n  b = from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The step preserves everything that is not in the diagonal\\<close>"], ["", "lemma diagonal_to_Smith_i_preserves_previous:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n    and i_min: \"i < min (nrows A) (ncols A)\"\n  and a_not_b: \"to_nat a \\<noteq> to_nat b\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  shows \"(diagonal_to_Smith_i xs A i bezout) $ a $ b = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b", "using assms"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ a $ b =\n                         A $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "case (1 A i)"], ["proof (state)\nthis:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i [] A i bezout $ a $ b =\n                         A $ a $ b\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "then"], ["proof (chain)\npicking this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)", "show ?case"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [] A i bezout_ $ a $ b = A $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i [] A i bezout_ $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   to_nat a \\<noteq> to_nat b;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe); to_nat a \\<noteq> to_nat b;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow>\n      x < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ a $ b =\n                    ?xe $ a $ b\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "note ib = \"2.prems\"(1)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 to_nat a \\<noteq> to_nat b;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $\n                                  b =\n                                  A $ a $ b;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe); to_nat a \\<noteq> to_nat b;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> diagonal_to_Smith_i xs xe i bezout $ a $ b =\n                             xe $ a $ b;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        to_nat a \\<noteq> to_nat b;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_i (j # xs) A i bezout $ a $ b =\n                         A $ a $ b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "then"], ["proof (chain)\npicking this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "using \"2.hyps\"(1) \"2.prems\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   to_nat a \\<noteq> to_nat b;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs A i bezout $ a $ b = A $ a $ b\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  to_nat a \\<noteq> to_nat b\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "note hyp = \"2.hyps\"(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe); to_nat a \\<noteq> to_nat b;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow>\n      x < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_i xs ?xe i bezout $ a $ b =\n                    ?xe $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have a1: \"a = from_nat i \\<longrightarrow> b \\<noteq> from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = from_nat i \\<longrightarrow> b \\<noteq> from_nat i", "by (metis \"2.prems\" a_not_b from_nat_not_eq min.strict_boundedE ncols_def nrows_def)"], ["proof (state)\nthis:\n  a = from_nat i \\<longrightarrow> b \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have a2: \"a = from_nat j \\<longrightarrow> b \\<noteq> from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = from_nat j \\<longrightarrow> b \\<noteq> from_nat j", "by (metis \"2.prems\" a_not_b list.set_intros(1) min_less_iff_conj \n          ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  a = from_nat j \\<longrightarrow> b \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"... $ a $ b = ?A' $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    a $\n    b =\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "by (rule hyp[OF False], insert \"2.prems\" ib pquvd, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  a $\n  b =\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "have \"... = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b =\n    A $ a $ b", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    a $\n    b =\n    A $ a $ b", "using a1 a2"], ["proof (prove)\nusing this:\n  a = from_nat i \\<longrightarrow> b \\<noteq> from_nat i\n  a = from_nat j \\<longrightarrow> b \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    a $\n    b =\n    A $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b =\n  A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout $ a $ b = A $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_step_preserves:\n  fixes A::\"'a::{times}^'b::mod_type^'c::mod_type\"\n  assumes ai: \"a \\<noteq> i\" and aj: \"a \\<noteq> j\" and a_min: \"a < min (nrows A) (ncols A)\" \n    and i_min: \"i < min (nrows A) (ncols A)\"\n  and j_min: \"j < min (nrows A) (ncols A)\"\n  shows \"diagonal_step A i j d v $ from_nat a $ from_nat b = A $ from_nat a $ from_nat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "have 1: \"(from_nat a::'c) \\<noteq> from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat a \\<noteq> from_nat i", "by (metis a_min ai from_nat_eq_imp_eq i_min min.strict_boundedE nrows_def)"], ["proof (state)\nthis:\n  from_nat a \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "have 2: \"(from_nat a::'c) \\<noteq> from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat a \\<noteq> from_nat j", "by (metis a_min aj from_nat_eq_imp_eq j_min min.strict_boundedE nrows_def)"], ["proof (state)\nthis:\n  from_nat a \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "using 1 2"], ["proof (prove)\nusing this:\n  from_nat a \\<noteq> from_nat i\n  from_nat a \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_step A i j d v $ from_nat a $ from_nat b =\n    A $ from_nat a $ from_nat b", "unfolding diagonal_step_def"], ["proof (prove)\nusing this:\n  from_nat a \\<noteq> from_nat i\n  from_nat a \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then d\n        else if a = from_nat j \\<and> b = from_nat j\n             then v * A $ from_nat j $ from_nat j else A $ a $ b) $\n    from_nat a $\n    from_nat b =\n    A $ from_nat a $ from_nat b", "by auto"], ["proof (state)\nthis:\n  diagonal_step A i j d v $ from_nat a $ from_nat b =\n  A $ from_nat a $ from_nat b\n\ngoal:\nNo subgoals!", "qed"], ["", "context GCD_ring\nbegin"], ["", "lemma gcd_greatest: \n  assumes \"is_gcd gcd'\" and \"c dvd a\" and \"c dvd b\" \n  shows \"c dvd gcd' a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c dvd gcd' a b", "using assms is_gcd_def"], ["proof (prove)\nusing this:\n  is_gcd gcd'\n  c dvd a\n  c dvd b\n  is_gcd ?gcd' =\n  (\\<forall>a b.\n      ?gcd' a b dvd a \\<and>\n      ?gcd' a b dvd b \\<and>\n      (\\<forall>d'.\n          d' dvd a \\<and> d' dvd b \\<longrightarrow> d' dvd ?gcd' a b))\n\ngoal (1 subgoal):\n 1. c dvd gcd' a b", "by blast"], ["", "end"], ["", "text\\<open>This is a key lemma for the soundness of the algorithm.\\<close>"], ["", "lemma diagonal_to_Smith_i_dvd:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and \"\\<forall>a b. to_nat a\\<in>insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and \"c \\<notin> (set xs)\" and c: \"c<min (nrows A) (ncols A)\"\n  and \"distinct xs\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd \n  (diagonal_to_Smith_i xs A i bezout) $ (from_nat i) $ (from_nat i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i", "using assms"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set xs) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set xs\n  c < min (nrows A) (ncols A)\n  distinct xs\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set []) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set []; c < min (nrows A) (ncols A); distinct []\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i [] A i bezout $ from_nat i $\n                         from_nat i\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "case (1 A i)"], ["proof (state)\nthis:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set []) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set []\n  c < min (nrows A) (ncols A)\n  distinct []\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set []) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set []; c < min (nrows A) (ncols A); distinct []\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i [] A i bezout $ from_nat i $\n                         from_nat i\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "then"], ["proof (chain)\npicking this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set []) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set []\n  c < min (nrows A) (ncols A)\n  distinct []", "show ?case"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout_\n  i < min (nrows A) (ncols A)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set []) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set []\n  c < min (nrows A) (ncols A)\n  distinct []\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i [] A i bezout_ $ from_nat i $ from_nat i", "by (auto simp add: ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i [] A i bezout_ $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      A $ from_nat c $ from_nat c dvd A $ a $ b;\n   c \\<notin> set xs; c < min (nrows A) (ncols A); distinct xs\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe);\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      ?xe $ from_nat c $ from_nat c dvd ?xe $ a $ b;\n   c \\<notin> set xs; c < min (nrows ?xe) (ncols ?xe); distinct xs\\<rbrakk>\n  \\<Longrightarrow> ?xe $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set (j # xs)) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set (j # xs)\n  c < min (nrows A) (ncols A)\n  distinct (j # xs)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "note ib = \"2.prems\"(1)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 is_bezout_ext bezout; i < min (nrows A) (ncols A);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 \\<forall>a b.\n                    to_nat a \\<in> insert i (set xs) \\<and>\n                    to_nat a = to_nat b \\<longrightarrow>\n                    A $ from_nat c $ from_nat c dvd A $ a $ b;\n                 c \\<notin> set xs; c < min (nrows A) (ncols A);\n                 distinct xs\\<rbrakk>\n                \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                                  diagonal_to_Smith_i xs A i bezout $\n                                  from_nat i $\n                                  from_nat i;\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; is_bezout_ext bezout;\n            i < min (nrows xe) (ncols xe);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            \\<forall>a b.\n               to_nat a \\<in> insert i (set xs) \\<and>\n               to_nat a = to_nat b \\<longrightarrow>\n               xe $ from_nat c $ from_nat c dvd xe $ a $ b;\n            c \\<notin> set xs; c < min (nrows xe) (ncols xe);\n            distinct xs\\<rbrakk>\n           \\<Longrightarrow> xe $ from_nat c $ from_nat c dvd\n                             diagonal_to_Smith_i xs xe i bezout $\n                             from_nat i $\n                             from_nat i;\n        is_bezout_ext bezout; i < min (nrows A) (ncols A);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        \\<forall>a b.\n           to_nat a \\<in> insert i (set (j # xs)) \\<and>\n           to_nat a = to_nat b \\<longrightarrow>\n           A $ from_nat c $ from_nat c dvd A $ a $ b;\n        c \\<notin> set (j # xs); c < min (nrows A) (ncols A);\n        distinct (j # xs)\\<rbrakk>\n       \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                         diagonal_to_Smith_i (j # xs) A i bezout $\n                         from_nat i $\n                         from_nat i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "note Aii_dvd_Ajj = True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "using True"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "using \"2.hyps\" \"2.prems\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      A $ from_nat c $ from_nat c dvd A $ a $ b;\n   c \\<notin> set xs; c < min (nrows A) (ncols A); distinct xs\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe);\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      ?xe $ from_nat c $ from_nat c dvd ?xe $ a $ b;\n   c \\<notin> set xs; c < min (nrows ?xe) (ncols ?xe); distinct xs\\<rbrakk>\n  \\<Longrightarrow> ?xe $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i\n  is_bezout_ext bezout\n  i < min (nrows A) (ncols A)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set (j # xs)) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c \\<notin> set (j # xs)\n  c < min (nrows A) (ncols A)\n  distinct (j # xs)\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "by force"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "let ?Acc = \"A $ from_nat c $ from_nat c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "let ?D=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "note hyp = \"2.hyps\"(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe);\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      ?xe $ from_nat c $ from_nat c dvd ?xe $ a $ b;\n   c \\<notin> set xs; c < min (nrows ?xe) (ncols ?xe); distinct xs\\<rbrakk>\n  \\<Longrightarrow> ?xe $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "note dvd_condition = \"2.prems\"(4)"], ["proof (state)\nthis:\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set (j # xs)) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "note a_eq_b = \"2.hyps\""], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   is_bezout_ext bezout; i < min (nrows A) (ncols A);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      A $ from_nat c $ from_nat c dvd A $ a $ b;\n   c \\<notin> set xs; c < min (nrows A) (ncols A); distinct xs\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs A i bezout $ from_nat i $\n                    from_nat i\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; is_bezout_ext bezout;\n   i < min (nrows ?xe) (ncols ?xe);\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   \\<forall>a b.\n      to_nat a \\<in> insert i (set xs) \\<and>\n      to_nat a = to_nat b \\<longrightarrow>\n      ?xe $ from_nat c $ from_nat c dvd ?xe $ a $ b;\n   c \\<notin> set xs; c < min (nrows ?xe) (ncols ?xe); distinct xs\\<rbrakk>\n  \\<Longrightarrow> ?xe $ from_nat c $ from_nat c dvd\n                    diagonal_to_Smith_i xs ?xe i bezout $ from_nat i $\n                    from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have 1: \"(from_nat c::'c) \\<noteq> from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat c \\<noteq> from_nat i", "by (metis \"2.prems\" False c insert_iff list.set_intros(1) \n          min.strict_boundedE ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  from_nat c \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have 2: \"(from_nat c::'c) \\<noteq> from_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat c \\<noteq> from_nat j", "by (metis  \"2.prems\" c insertI1 list.simps(15) min_less_iff_conj nrows_def \n          to_nat_from_nat_id)"], ["proof (state)\nthis:\n  from_nat c \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have \"?D $ from_nat c $ from_nat c = ?Acc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "using 1 2"], ["proof (prove)\nusing this:\n  from_nat c \\<noteq> from_nat i\n  from_nat c \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "by auto"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have aux: \"?D $ from_nat c $ from_nat c dvd ?D $ a $ b\"\n      if a_in_set: \"to_nat a \\<in> insert i (set xs)\" and ab: \"to_nat a = to_nat b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "have Acc_dvd_Aii: \"?Acc dvd ?Aii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i", "by (metis \"2.prems\"(2) \"2.prems\"(4) insert_iff min.strict_boundedE \n           ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "moreover"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "have Acc_dvd_Ajj: \"?Acc dvd ?Ajj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j", "by (metis \"2.prems\"(3) \"2.prems\"(4) insert_iff list.set_intros(1) \n           min_less_iff_conj ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "ultimately"], ["proof (chain)\npicking this:\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n  A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j", "have Acc_dvd_gcd: \"?Acc dvd ?d\""], ["proof (prove)\nusing this:\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n  A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d)", "by (metis (mono_tags, lifting) ib is_gcd_def is_gcd_is_bezout_ext)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d)\n\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "using 1 2 Acc_dvd_Ajj Acc_dvd_Aii Acc_dvd_gcd a_in_set ab dvd_condition"], ["proof (prove)\nusing this:\n  from_nat c \\<noteq> from_nat i\n  from_nat c \\<noteq> from_nat j\n  A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n  A $ from_nat c $ from_nat c dvd\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d)\n  to_nat a \\<in> insert i (set xs)\n  to_nat a = to_nat b\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set (j # xs)) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    a $\n    b", "unfolding diagonal_step_def"], ["proof (prove)\nusing this:\n  from_nat c \\<noteq> from_nat i\n  from_nat c \\<noteq> from_nat j\n  A $ from_nat c $ from_nat c dvd A $ from_nat j $ from_nat j\n  A $ from_nat c $ from_nat c dvd A $ from_nat i $ from_nat i\n  A $ from_nat c $ from_nat c dvd\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d)\n  to_nat a \\<in> insert i (set xs)\n  to_nat a = to_nat b\n  \\<forall>a b.\n     to_nat a \\<in> insert i (set (j # xs)) \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat c $\n    from_nat c dvd\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    a $\n    b", "by auto"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c dvd\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  a $\n  b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>to_nat ?a \\<in> insert i (set xs); to_nat ?a = to_nat ?b\\<rbrakk>\n  \\<Longrightarrow> diagonal_step A i j\n                     (case bezout (A $ from_nat i $ from_nat i)\n                            (A $ from_nat j $ from_nat j) of\n                      (p, q, u, v, d) \\<Rightarrow> d)\n                     (case bezout (A $ from_nat i $ from_nat i)\n                            (A $ from_nat j $ from_nat j) of\n                      (p, q, u, v, d) \\<Rightarrow> v) $\n                    from_nat c $\n                    from_nat c dvd\n                    diagonal_step A i j\n                     (case bezout (A $ from_nat i $ from_nat i)\n                            (A $ from_nat j $ from_nat j) of\n                      (p, q, u, v, d) \\<Rightarrow> d)\n                     (case bezout (A $ from_nat i $ from_nat i)\n                            (A $ from_nat j $ from_nat j) of\n                      (p, q, u, v, d) \\<Rightarrow> v) $\n                    ?a $\n                    ?b\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have \"?A' $ from_nat c $ from_nat c = A $ from_nat c $ from_nat c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "unfolding diagonal_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "using 1 2"], ["proof (prove)\nusing this:\n  from_nat c \\<noteq> from_nat i\n  from_nat c \\<noteq> from_nat j\n\ngoal (1 subgoal):\n 1. (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i\n        then case bezout (A $ from_nat i $ from_nat i)\n                   (A $ from_nat j $ from_nat j) of\n             (p, q, u, v, d) \\<Rightarrow> d\n        else if a = from_nat j \\<and> b = from_nat j\n             then (case bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat j $ from_nat j) of\n                   (p, q, u, v, d) \\<Rightarrow> v) *\n                  A $ from_nat j $ from_nat j\n             else A $ a $ b) $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "by auto"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "moreover"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "have \"?A' $ from_nat c $ from_nat c \n      dvd diagonal_to_Smith_i xs ?A' i bezout $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) $\n    from_nat c $\n    from_nat c dvd\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout $\n    from_nat i $\n    from_nat i", "by (rule hyp[OF False _ _ _ _ _ _ ib]) \n         (insert nrows_def ncols_def \"2.prems\" \"2.hyps\" aux pquvd, auto)"], ["proof (state)\nthis:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c dvd\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "ultimately"], ["proof (chain)\npicking this:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c dvd\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c dvd\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "using False"], ["proof (prove)\nusing this:\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c =\n  A $ from_nat c $ from_nat c\n  diagonal_step A i j\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (A $ from_nat i $ from_nat i)\n          (A $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) $\n  from_nat c $\n  from_nat c dvd\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout $\n  from_nat i $\n  from_nat i\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i (j # xs) A i bezout $ from_nat i $ from_nat i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_to_Smith_i_dvd2:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\" \n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and c_notin: \"c \\<notin> (set xs)\" \n  and c: \"c < min (nrows A) (ncols A)\"\n  and distinct: \"distinct xs\"\n  and ab: \"to_nat a = to_nat b\" \n  and a_in: \"to_nat a \\<in> insert i (set xs)\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "proof (cases \"a = from_nat i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  a = from_nat i\n\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "hence b: \"b = from_nat i\""], ["proof (prove)\nusing this:\n  a = from_nat i\n\ngoal (1 subgoal):\n 1. b = from_nat i", "by (metis ab from_nat_to_nat_id i_min min_less_iff_conj nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  b = from_nat i\n\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "by (unfold True b, rule diagonal_to_Smith_i_dvd, insert assms, auto)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  a \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have ai: \"to_nat a \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i", "using False"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "hence bi: \"to_nat b \\<noteq> i\""], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. to_nat b \\<noteq> i", "by (simp add: ab)"], ["proof (state)\nthis:\n  to_nat b \\<noteq> i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i", "by (rule diagonal_to_Smith_i_dvd, insert assms, auto)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have \"... dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "by (rule diagonal_to_Smith_i_dvd_jj, insert assms False ai bi, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "."], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_to_Smith_i_dvd2_k:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\" \n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<k\" and \"k\\<le>min (nrows A) (ncols A)\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> insert i (set xs) \\<and> to_nat a = to_nat b \\<longrightarrow> \n      A $ (from_nat c) $ (from_nat c) dvd A $ a $ b\"\n  and c_notin: \"c \\<notin> (set xs)\" \n  and c: \"c < min (nrows A) (ncols A)\"\n  and distinct: \"distinct xs\"\n  and ab: \"to_nat a = to_nat b\" \n  and a_in: \"to_nat a \\<in> insert i (set xs)\"\n  shows \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "proof (cases \"a = from_nat i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  a = from_nat i\n\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "hence b: \"b = from_nat i\""], ["proof (prove)\nusing this:\n  a = from_nat i\n\ngoal (1 subgoal):\n 1. b = from_nat i", "by (metis ab from_nat_to_nat_id i_min min_less_iff_conj nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  b = from_nat i\n\ngoal (2 subgoals):\n 1. a = from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b\n 2. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "by (unfold True b, rule diagonal_to_Smith_i_dvd, insert assms, auto)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  a \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have ai: \"to_nat a \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i", "using False"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "hence bi: \"to_nat b \\<noteq> i\""], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. to_nat b \\<noteq> i", "by (simp add: ab)"], ["proof (state)\nthis:\n  to_nat b \\<noteq> i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have \"A $ (from_nat c) $ (from_nat c) dvd (diagonal_to_Smith_i xs A i bezout) $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i", "by (rule diagonal_to_Smith_i_dvd, insert assms, auto)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "have \"... dvd (diagonal_to_Smith_i xs A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "by (rule diagonal_to_Smith_i_dvd_jj, insert assms False ai bi, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i xs A i bezout $ from_nat i $ from_nat i dvd\n  diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. a \\<noteq> from_nat i \\<Longrightarrow>\n    A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i xs A i bezout $ a $ b", "."], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd diagonal_to_Smith_i xs A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_to_Smith_row_i_preserves_previous:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"\n  and a_not_b: \"to_nat a \\<noteq> to_nat b\"  \n  shows \"Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $ a $\n    b =\n    A $ a $ b", "by (rule diagonal_to_Smith_i_preserves_previous, insert assms, auto)"], ["", "lemma diagonal_to_Smith_row_i_preserves_previous_diagonal:\n  fixes A::\"'a:: {bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and i_min: \"i < min (nrows A) (ncols A)\"  \n  and a_notin: \"to_nat a \\<notin> set [i + 1..<min (nrows A) (ncols A)]\"\n  and ab: \"to_nat a = to_nat b\"\n  and ai: \"to_nat a \\<noteq> i\" \n  shows \"Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ a $ b = A $ a $ b", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $ a $\n    b =\n    A $ a $ b", "by (rule diagonal_to_Smith_i_preserves_previous_diagonal[OF ib i_min a_notin ab ai], auto)"], ["", "context\n  fixes bezout::\"'a::{bezout_ring} \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\"\n  assumes ib: \"is_bezout_ext bezout\"\nbegin"], ["", "lemma diagonal_to_Smith_row_i_dvd_jj:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes \"to_nat a \\<in> {i..<min (nrows A) (ncols A)}\"\n  and \"to_nat a = to_nat b\"\n  shows \"(Diagonal_to_Smith_row_i A i bezout) $ (from_nat i) $ (from_nat i) \n          dvd (Diagonal_to_Smith_row_i A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "proof (cases \"to_nat a = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. to_nat a = i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b\n 2. to_nat a \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  to_nat a = i\n\ngoal (2 subgoals):\n 1. to_nat a = i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b\n 2. to_nat a \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "then"], ["proof (chain)\npicking this:\n  to_nat a = i", "show ?thesis"], ["proof (prove)\nusing this:\n  to_nat a = i\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "by (metis assms(2) dvd_refl from_nat_to_nat_id)"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  to_nat a \\<noteq> i\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $\n    from_nat i $\n    from_nat i dvd\n    diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $ a $ b", "by (rule diagonal_to_Smith_i_dvd_jj, insert assms False ib, auto)"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_to_Smith_row_i_dvd_ii:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  shows \"Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd A $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat i $ from_nat i dvd\n    A $ from_nat i $ from_nat i", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $\n    from_nat i $\n    from_nat i dvd\n    A $ from_nat i $ from_nat i", "by (rule diagonal_to_Smith_i_dvd_ii[OF ib])"], ["", "lemma diagonal_to_Smith_row_i_dvd_jj':\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes a_in: \"to_nat a \\<in> {i..<min (nrows A) (ncols A)}\"\n  and ab: \"to_nat a = to_nat b\" \n  and ci: \"c\\<le>i\"\n  and dvd_condition: \"\\<forall>a b. to_nat a \\<in> (set [i..<min (nrows A) (ncols A)]) \\<and> to_nat a = to_nat b \n    \\<longrightarrow> A $ from_nat c $ from_nat c dvd A $ a $ b\"\n  shows \"(Diagonal_to_Smith_row_i A i bezout) $ (from_nat c) $ (from_nat c) \n          dvd (Diagonal_to_Smith_row_i A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "proof (cases \"c = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b\n 2. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  c = i\n\ngoal (2 subgoals):\n 1. c = i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b\n 2. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "then"], ["proof (chain)\npicking this:\n  c = i", "show ?thesis"], ["proof (prove)\nusing this:\n  c = i\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "using assms True diagonal_to_Smith_row_i_dvd_jj"], ["proof (prove)\nusing this:\n  c = i\n  to_nat a \\<in> {i..<min (nrows A) (ncols A)}\n  to_nat a = to_nat b\n  c \\<le> i\n  \\<forall>a b.\n     to_nat a \\<in> set [i..<min (nrows A) (ncols A)] \\<and>\n     to_nat a = to_nat b \\<longrightarrow>\n     A $ from_nat c $ from_nat c dvd A $ a $ b\n  c = i\n  \\<lbrakk>to_nat ?a \\<in> {?i..<min (nrows ?A) (ncols ?A)};\n   to_nat ?a = to_nat ?b\\<rbrakk>\n  \\<Longrightarrow> Diagonal_to_Smith_row_i ?A ?i bezout $ from_nat ?i $\n                    from_nat ?i dvd\n                    Diagonal_to_Smith_row_i ?A ?i bezout $ ?a $ ?b\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "by metis"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  c \\<noteq> i\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "hence ci2: \"c<i\""], ["proof (prove)\nusing this:\n  c \\<noteq> i\n\ngoal (1 subgoal):\n 1. c < i", "using ci"], ["proof (prove)\nusing this:\n  c \\<noteq> i\n  c \\<le> i\n\ngoal (1 subgoal):\n 1. c < i", "by auto"], ["proof (state)\nthis:\n  c < i\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "have 1: \"to_nat (from_nat c::'c) \\<notin> (set [i+1..<min (nrows A) (ncols A)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c) \\<notin> set [i + 1..<min (nrows A) (ncols A)]", "by (metis Suc_eq_plus1 ci atLeastLessThan_iff from_nat_mono \n        le_imp_less_Suc less_irrefl less_le_trans set_upt to_nat_le to_nat_less_card)"], ["proof (state)\nthis:\n  to_nat (from_nat c) \\<notin> set [i + 1..<min (nrows A) (ncols A)]\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "have 2: \"to_nat (from_nat c) \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c) \\<noteq> i", "using ci2 from_nat_mono to_nat_less_card"], ["proof (prove)\nusing this:\n  c < i\n  \\<lbrakk>?i < ?j; ?j < CARD(?'a)\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i < from_nat ?j\n  to_nat ?j < CARD(?'a)\n\ngoal (1 subgoal):\n 1. to_nat (from_nat c) \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  to_nat (from_nat c) \\<noteq> i\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "have 3: \"to_nat (from_nat c::'c) = to_nat (from_nat c::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c) = to_nat (from_nat c)", "by (metis a_in ab atLeastLessThan_iff ci dual_order.strict_trans2 to_nat_from_nat_id to_nat_less_card)"], ["proof (state)\nthis:\n  to_nat (from_nat c) = to_nat (from_nat c)\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "have \"(Diagonal_to_Smith_row_i A i bezout) $ (from_nat c) $ (from_nat c) \n    = A $(from_nat c) $ (from_nat c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c =\n    A $ from_nat c $ from_nat c", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $\n    from_nat c $\n    from_nat c =\n    A $ from_nat c $ from_nat c", "by (rule diagonal_to_Smith_i_preserves_previous_diagonal[OF ib _ 1 3 2], insert assms, auto)"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c =\n  A $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "also"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c =\n  A $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "have \"... dvd (Diagonal_to_Smith_row_i A i bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout $ a $ b", "by (rule diagonal_to_Smith_i_dvd2, insert assms False ci ib, auto)"], ["proof (state)\nthis:\n  A $ from_nat c $ from_nat c dvd Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. c \\<noteq> i \\<Longrightarrow>\n    Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n    Diagonal_to_Smith_row_i A i bezout $ a $ b", "."], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i A i bezout $ from_nat c $ from_nat c dvd\n  Diagonal_to_Smith_row_i A i bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma diagonal_to_Smith_aux_append:\n  \"diagonal_to_Smith_aux A (xs @ ys) bezout \n    = diagonal_to_Smith_aux (diagonal_to_Smith_aux A xs bezout) ys bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A (xs @ ys) bezout =\n    diagonal_to_Smith_aux (diagonal_to_Smith_aux A xs bezout) ys bezout", "by (induct A xs bezout rule: diagonal_to_Smith_aux.induct, auto)"], ["", "lemma diagonal_to_Smith_aux_append2[simp]:\n  \"diagonal_to_Smith_aux A (xs @ [ys]) bezout \n    = Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A xs bezout) ys bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A (xs @ [ys]) bezout =\n    Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A xs bezout) ys bezout", "by (induct A xs bezout rule: diagonal_to_Smith_aux.induct, auto)"], ["", "lemma isDiagonal_eq_upt_k_min:\n\"isDiagonal A = isDiagonal_upt_k A (min (nrows A) (ncols A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal A = isDiagonal_upt_k A (min (nrows A) (ncols A))", "unfolding isDiagonal_def isDiagonal_upt_k_def nrows_def ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        to_nat a \\<noteq> to_nat b \\<longrightarrow> A $ a $ b = (0::'a)) =\n    (\\<forall>a b.\n        to_nat a \\<noteq> to_nat b \\<and>\n        (to_nat a < min CARD('c) CARD('b) \\<or>\n         to_nat b < min CARD('c) CARD('b)) \\<longrightarrow>\n        A $ a $ b = (0::'a))", "by (auto, meson less_trans not_less_iff_gr_or_eq to_nat_less_card)"], ["", "lemma isDiagonal_eq_upt_k_max:\n\"isDiagonal A = isDiagonal_upt_k A (max (nrows A) (ncols A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal A = isDiagonal_upt_k A (max (nrows A) (ncols A))", "unfolding isDiagonal_def isDiagonal_upt_k_def nrows_def ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        to_nat a \\<noteq> to_nat b \\<longrightarrow> A $ a $ b = (0::'a)) =\n    (\\<forall>a b.\n        to_nat a \\<noteq> to_nat b \\<and>\n        (to_nat a < max CARD('c) CARD('b) \\<or>\n         to_nat b < max CARD('c) CARD('b)) \\<longrightarrow>\n        A $ a $ b = (0::'a))", "by (auto simp add: less_max_iff_disj to_nat_less_card)"], ["", "lemma isDiagonal: \n  assumes \"isDiagonal A\"\n    and \"to_nat a \\<noteq> to_nat b\" shows \"A $ a $ b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ b = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  isDiagonal A\n  to_nat a \\<noteq> to_nat b\n\ngoal (1 subgoal):\n 1. A $ a $ b = (0::'a)", "unfolding isDiagonal_def"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     to_nat a \\<noteq> to_nat b \\<longrightarrow> A $ a $ b = (0::'a)\n  to_nat a \\<noteq> to_nat b\n\ngoal (1 subgoal):\n 1. A $ a $ b = (0::'a)", "by auto"], ["", "lemma nrows_diagonal_to_Smith_aux[simp]: \n  shows \"nrows (diagonal_to_Smith_aux A xs bezout) = nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows (diagonal_to_Smith_aux A xs bezout) = nrows A", "unfolding nrows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('c) = CARD('c)", "by auto"], ["", "lemma ncols_diagonal_to_Smith_aux[simp]:\n  shows \"ncols (diagonal_to_Smith_aux A xs bezout) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols (diagonal_to_Smith_aux A xs bezout) = ncols A", "unfolding ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('b) = CARD('b)", "by auto"], ["", "context\n  fixes bezout::\"'a::{bezout_ring} \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\"\n  assumes ib: \"is_bezout_ext bezout\"\nbegin"], ["", "lemma isDiagonal_diagonal_to_Smith_aux:\n  assumes diag_A: \"isDiagonal A\" and k: \"k < min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout)", "using k"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < min (nrows A) (ncols A) \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_aux A [0..<0] bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "case 0"], ["proof (state)\nthis:\n  0 < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. 0 < min (nrows A) (ncols A) \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_aux A [0..<0] bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "then"], ["proof (chain)\npicking this:\n  0 < min (nrows A) (ncols A)", "show ?case"], ["proof (prove)\nusing this:\n  0 < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<0] bezout)", "using diag_A"], ["proof (prove)\nusing this:\n  0 < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<0] bezout)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_aux A [0..<0] bezout)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "case (Suc k)"], ["proof (state)\nthis:\n  k < min (nrows A) (ncols A) \\<Longrightarrow>\n  isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout)\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "have \"Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k bezout $ a $ b = 0\" \n    if a_not_b: \"to_nat a \\<noteq> to_nat b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "have \"Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k bezout $ a $ b \n      = (diagonal_to_Smith_aux A [0..<k] bezout) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "by (rule diagonal_to_Smith_row_i_preserves_previous[OF ib _ a_not_b], insert Suc.prems, auto)"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "also"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "by (rule isDiagonal[OF Suc.hyps a_not_b], insert Suc.prems, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "finally"], ["proof (chain)\npicking this:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    (0::'a)", "."], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_nat ?a \\<noteq> to_nat ?b \\<Longrightarrow>\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  ?a $\n  ?b =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < min (nrows A) (ncols A) \\<Longrightarrow>\n                isDiagonal (diagonal_to_Smith_aux A [0..<k] bezout);\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "thus ?case"], ["proof (prove)\nusing this:\n  to_nat ?a \\<noteq> to_nat ?b \\<Longrightarrow>\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  ?a $\n  ?b =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "unfolding isDiagonal_def"], ["proof (prove)\nusing this:\n  to_nat ?a \\<noteq> to_nat ?b \\<Longrightarrow>\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  ?a $\n  ?b =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       to_nat a \\<noteq> to_nat b \\<longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(*TODO: move!*)"], ["", "lemma to_nat_less_nrows[simp]:\n  fixes A::\"'a^'b::mod_type^'c::mod_type\"\n    and a::'c\n  shows \"to_nat a < nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a < nrows A", "by (simp add: nrows_def to_nat_less_card)"], ["", "lemma to_nat_less_ncols[simp]:\n  fixes A::\"'a^'b::mod_type^'c::mod_type\"\n    and a::'b\n  shows \"to_nat a < ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a < ncols A", "by (simp add: ncols_def to_nat_less_card)"], ["", "context\n  fixes bezout::\"'a::{bezout_ring} \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\"\n  assumes ib: \"is_bezout_ext bezout\"\nbegin"], ["", "text\\<open>The variables a and b must be arbitrary in the induction\\<close>"], ["", "lemma diagonal_to_Smith_aux_dvd:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ab: \"to_nat a = to_nat b\"\n  and c: \"c < k\" and ca: \"c \\<le> to_nat a\" and k: \"k<min (nrows A) (ncols A)\"\n  shows \"diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c\n    dvd diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "using c ab ca k"], ["proof (prove)\nusing this:\n  c < k\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "proof (induct k arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>c < 0; to_nat a = to_nat b; c \\<le> to_nat a;\n        0 < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<0] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<0] bezout $ a $ b\n 2. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case 0"], ["proof (state)\nthis:\n  c < 0\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  0 < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>c < 0; to_nat a = to_nat b; c \\<le> to_nat a;\n        0 < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<0] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<0] bezout $ a $ b\n 2. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "then"], ["proof (chain)\npicking this:\n  c < 0\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  0 < min (nrows A) (ncols A)", "show ?case"], ["proof (prove)\nusing this:\n  c < 0\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  0 < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<0] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<0] bezout $ a $ b", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<0] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<0] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>c < k; to_nat ?a = to_nat ?b; c \\<le> to_nat ?a;\n   k < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $\n                    from_nat c dvd\n                    diagonal_to_Smith_aux A [0..<k] bezout $ ?a $ ?b\n  c < Suc k\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "note c = Suc.prems(1)"], ["proof (state)\nthis:\n  c < Suc k\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "note ab = Suc.prems(2)"], ["proof (state)\nthis:\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "note ca = Suc.prems(3)"], ["proof (state)\nthis:\n  c \\<le> to_nat a\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "note k = Suc.prems(4)"], ["proof (state)\nthis:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have k_min: \"k < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "using k"], ["proof (prove)\nusing this:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "by auto"], ["proof (state)\nthis:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have a_less_ncols: \"to_nat a < ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a < ncols A", "using ab"], ["proof (prove)\nusing this:\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. to_nat a < ncols A", "by auto"], ["proof (state)\nthis:\n  to_nat a < ncols A\n\ngoal (1 subgoal):\n 1. \\<And>k a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>c < k; to_nat a = to_nat b; c \\<le> to_nat a;\n                    k < min (nrows A) (ncols A)\\<rbrakk>\n                   \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     from_nat c $\n                                     from_nat c dvd\n                                     diagonal_to_Smith_aux A [0..<k]\nbezout $\n                                     a $\n                                     b;\n        c < Suc k; to_nat a = to_nat b; c \\<le> to_nat a;\n        Suc k < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> diagonal_to_Smith_aux A [0..<Suc k] bezout $\n                         from_nat c $\n                         from_nat c dvd\n                         diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "proof (cases \"c=k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n 2. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  c = k\n\ngoal (2 subgoals):\n 1. c = k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n 2. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "hence k: \"k\\<le>to_nat a\""], ["proof (prove)\nusing this:\n  c = k\n\ngoal (1 subgoal):\n 1. k \\<le> to_nat a", "using ca"], ["proof (prove)\nusing this:\n  c = k\n  c \\<le> to_nat a\n\ngoal (1 subgoal):\n 1. k \\<le> to_nat a", "by auto"], ["proof (state)\nthis:\n  k \\<le> to_nat a\n\ngoal (2 subgoals):\n 1. c = k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n 2. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "unfolding True"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat k $ from_nat k dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_dvd_jj[OF ib _ ab], insert k a_less_ncols, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  c \\<noteq> k\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "note c_not_k = False"], ["proof (state)\nthis:\n  c \\<noteq> k\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "let ?Dk=\"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have ck: \"c<k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c < k", "using Suc.prems False"], ["proof (prove)\nusing this:\n  c < Suc k\n  to_nat a = to_nat b\n  c \\<le> to_nat a\n  Suc k < min (nrows A) (ncols A)\n  c \\<noteq> k\n\ngoal (1 subgoal):\n 1. c < k", "by auto"], ["proof (state)\nthis:\n  c < k\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have hyp: \"?Dk $ from_nat c $ from_nat c dvd ?Dk $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "by (rule Suc.hyps[OF ck ab ca k_min])"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have Dkk_Daa_bb: \"?Dk $ from_nat c $ from_nat c dvd ?Dk $ aa $ bb\"\n      if \"to_nat aa \\<in> set [k..<min (nrows ?Dk) (ncols ?Dk)]\" and \"to_nat aa = to_nat bb\"\n      for aa bb"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ aa $ bb", "using Suc.hyps ck k_min that(1) that(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>c < k; to_nat ?a = to_nat ?b; c \\<le> to_nat ?a;\n   k < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $\n                    from_nat c dvd\n                    diagonal_to_Smith_aux A [0..<k] bezout $ ?a $ ?b\n  c < k\n  k < min (nrows A) (ncols A)\n  to_nat aa\n  \\<in> set [k..<\n             min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n              (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n  to_nat aa = to_nat bb\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ aa $ bb", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>to_nat ?aa\n           \\<in> set [k..<\n                      min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                       (ncols (diagonal_to_Smith_aux A [0..<k] bezout))];\n   to_nat ?aa = to_nat ?bb\\<rbrakk>\n  \\<Longrightarrow> diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $\n                    from_nat c dvd\n                    diagonal_to_Smith_aux A [0..<k] bezout $ ?aa $ ?bb\n\ngoal (1 subgoal):\n 1. c \\<noteq> k \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "proof (cases \"k\\<le>to_nat a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n 2. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case True"], ["proof (state)\nthis:\n  k \\<le> to_nat a\n\ngoal (2 subgoals):\n 1. k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n 2. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_dvd_jj'[OF ib _ ab]) \n           (insert True a_less_ncols ck Dkk_Daa_bb, force+)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "case False"], ["proof (state)\nthis:\n  \\<not> k \\<le> to_nat a\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have \"diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c \n        = Diagonal_to_Smith_row_i ?Dk k bezout $ from_nat c $ from_nat c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c =\n    Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    from_nat c $\n    from_nat c", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c =\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  from_nat c $\n  from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c =\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  from_nat c $\n  from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have \"... = ?Dk $ from_nat c $ from_nat c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    from_nat c $\n    from_nat c =\n    diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c", "proof (rule diagonal_to_Smith_row_i_preserves_previous_diagonal[OF ib])"], ["proof (state)\ngoal (4 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (from_nat c)\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 3. to_nat (from_nat c) = to_nat (from_nat c)\n 4. to_nat (from_nat c) \\<noteq> k", "show \"k < min (nrows ?Dk) (ncols ?Dk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "using k"], ["proof (prove)\nusing this:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "by auto"], ["proof (state)\nthis:\n  k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n       (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n\ngoal (3 subgoals):\n 1. to_nat (from_nat c)\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 2. to_nat (from_nat c) = to_nat (from_nat c)\n 3. to_nat (from_nat c) \\<noteq> k", "show \"to_nat (from_nat c::'c) = to_nat (from_nat c::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c) = to_nat (from_nat c)", "by (metis assms(2) assms(4) less_trans min_less_iff_conj \n             ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat c) = to_nat (from_nat c)\n\ngoal (2 subgoals):\n 1. to_nat (from_nat c)\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 2. to_nat (from_nat c) \\<noteq> k", "show \"to_nat (from_nat c::'c) \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c) \\<noteq> k", "using False ca from_nat_mono' to_nat_less_card to_nat_mono'"], ["proof (prove)\nusing this:\n  \\<not> k \\<le> to_nat a\n  c \\<le> to_nat a\n  \\<lbrakk>?i \\<le> ?j; ?j < CARD(?'a)\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i \\<le> from_nat ?j\n  to_nat ?j < CARD(?'a)\n  ?a \\<le> ?b \\<Longrightarrow> to_nat ?a \\<le> to_nat ?b\n\ngoal (1 subgoal):\n 1. to_nat (from_nat c) \\<noteq> k", "by fastforce"], ["proof (state)\nthis:\n  to_nat (from_nat c) \\<noteq> k\n\ngoal (1 subgoal):\n 1. to_nat (from_nat c)\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "show \"to_nat (from_nat c::'c) \\<notin> set [k + 1..<min (nrows ?Dk) (ncols ?Dk)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat c)\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "by (metis Suc_eq_plus1 atLeastLessThan_iff c ca from_nat_not_eq \n              le_less_trans not_le set_upt to_nat_less_card)"], ["proof (state)\nthis:\n  to_nat (from_nat c)\n  \\<notin> set [k + 1..<\n                min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                 (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  from_nat c $\n  from_nat c =\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "also"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  from_nat c $\n  from_nat c =\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have \"... dvd ?Dk $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "using hyp"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have \"... = Diagonal_to_Smith_row_i ?Dk k bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n    Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b", "by (rule diagonal_to_Smith_row_i_preserves_previous_diagonal[symmetric, OF ib _ _ ab])\n           (insert False k, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "have \"... = diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n     bezout $\n    a $\n    b =\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "by auto"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i (diagonal_to_Smith_aux A [0..<k] bezout) k\n   bezout $\n  a $\n  b =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> to_nat a \\<Longrightarrow>\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "show ?thesis"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat c $ from_nat c dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Smith_normal_form_upt_k_Suc_imp_k:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes s: \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\"\n  and k: \"k<min (nrows A) (ncols A)\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "proof (rule Smith_normal_form_upt_k_intro)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "let ?Dk=\"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "fix a::'c and b::'b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "assume \"to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\""], ["proof (state)\nthis:\n  to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "hence ab: \"to_nat a = to_nat b\" and ak: \"to_nat a + 1 < k\" and bk: \"to_nat b + 1 < k\""], ["proof (prove)\nusing this:\n  to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a = to_nat b &&& to_nat a + 1 < k &&& to_nat b + 1 < k", "by auto"], ["proof (state)\nthis:\n  to_nat a = to_nat b\n  to_nat a + 1 < k\n  to_nat b + 1 < k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have a_not_k: \"to_nat a \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> k", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have a1_less_k1: \"to_nat a + 1 < k + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a + 1 < k + 1", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a + 1 < k + 1", "by linarith"], ["proof (state)\nthis:\n  to_nat a + 1 < k + 1\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have \"?Dk $a $ b = diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_preserves_previous_diagonal[symmetric, OF ib _ _ ab a_not_k]) \n       (insert ak k, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have \"... dvd diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + 1) $ (b + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b))", "using ab ak bk s"], ["proof (prove)\nusing this:\n  to_nat a = to_nat b\n  to_nat a + 1 < k\n  to_nat b + 1 < k\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b))", "unfolding Smith_normal_form_upt_k_def"], ["proof (prove)\nusing this:\n  to_nat a = to_nat b\n  to_nat a + 1 < k\n  to_nat b + 1 < k\n  (\\<forall>a b.\n      to_nat a = to_nat b \\<and>\n      to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n      diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n      (b + (1::'b))) \\<and>\n  isDiagonal_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b))", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have \"... = ?Dk $ (a+1) $ (b+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b)) =\n    diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "proof (auto, rule diagonal_to_Smith_row_i_preserves_previous_diagonal[OF ib])"], ["proof (state)\ngoal (4 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 3. to_nat (a + (1::'c)) = to_nat (b + (1::'b))\n 4. to_nat (a + (1::'c)) \\<noteq> k", "show \"to_nat (a + 1) \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) \\<noteq> k", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) \\<noteq> k", "by (metis add_less_same_cancel2 nat_neq_iff not_add_less2 to_nat_0 \n         to_nat_plus_one_less_card' to_nat_suc)"], ["proof (state)\nthis:\n  to_nat (a + (1::'c)) \\<noteq> k\n\ngoal (3 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 3. to_nat (a + (1::'c)) = to_nat (b + (1::'b))", "show \"to_nat (a + 1) = to_nat (b + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) = to_nat (b + (1::'b))", "by (metis ab ak from_nat_suc from_nat_to_nat_id k less_asym' min_less_iff_conj \n          ncols_def nrows_def suc_not_zero to_nat_from_nat_id to_nat_plus_one_less_card')"], ["proof (state)\nthis:\n  to_nat (a + (1::'c)) = to_nat (b + (1::'b))\n\ngoal (2 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "show \"to_nat (a + 1) \\<notin> set [k + 1..<min (nrows ?Dk) (ncols ?Dk)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "by (metis a1_less_k1 add_to_nat_def atLeastLessThan_iff k less_asym' min.strict_boundedE \n          not_less nrows_def set_upt suc_not_zero to_nat_1 to_nat_from_nat_id to_nat_plus_one_less_card')"], ["proof (state)\nthis:\n  to_nat (a + (1::'c))\n  \\<notin> set [k + 1..<\n                min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                 (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "show \"k < min (nrows ?Dk) (ncols ?Dk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "using k"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "by auto"], ["proof (state)\nthis:\n  k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n       (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n  (b + (1::'b)) =\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "show \"?Dk $ a $ b dvd ?Dk $ (a+1) $ (b+1)\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "let ?Dk=\"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "fix a::'c and b::'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "assume \"to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\""], ["proof (state)\nthis:\n  to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "hence ab: \"to_nat a \\<noteq> to_nat b\" and ak_bk: \"(to_nat a < k \\<or> to_nat b < k)\""], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> to_nat b &&& to_nat a < k \\<or> to_nat b < k", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have \"?Dk $a $ b = diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_preserves_previous[symmetric, OF ib _ ab], insert k, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "using ab ak_bk s"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "unfolding Smith_normal_form_upt_k_def isDiagonal_upt_k_def"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n  (\\<forall>a b.\n      to_nat a = to_nat b \\<and>\n      to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n      diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n      (b + (1::'b))) \\<and>\n  (\\<forall>a b.\n      to_nat a \\<noteq> to_nat b \\<and>\n      (to_nat a < k \\<or> to_nat b < k) \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a))\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "show \"?Dk $ a $ b = 0\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Smith_normal_form_upt_k_le:\n  assumes \"a\\<le>k\" and \"Smith_normal_form_upt_k A k\"\n  shows \"Smith_normal_form_upt_k A a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k A a", "using assms"], ["proof (prove)\nusing this:\n  a \\<le> k\n  Smith_normal_form_upt_k A k\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k A a", "by (smt Smith_normal_form_upt_k_def isDiagonal_upt_k_def less_le_trans)"], ["", "lemma Smith_normal_form_upt_k_imp_Suc_k:\n  assumes s: \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\"\n  and k: \"k<min (nrows A) (ncols A)\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k", "proof (rule Smith_normal_form_upt_k_intro)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "let ?Dk=\"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "fix a::'c and b::'b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "assume \"to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\""], ["proof (state)\nthis:\n  to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "hence ab: \"to_nat a = to_nat b\" and ak: \"to_nat a + 1 < k\" and bk: \"to_nat b + 1 < k\""], ["proof (prove)\nusing this:\n  to_nat a = to_nat b \\<and> to_nat a + 1 < k \\<and> to_nat b + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a = to_nat b &&& to_nat a + 1 < k &&& to_nat b + 1 < k", "by auto"], ["proof (state)\nthis:\n  to_nat a = to_nat b\n  to_nat a + 1 < k\n  to_nat b + 1 < k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have a_not_k: \"to_nat a \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> k", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> k\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have a1_less_k1: \"to_nat a + 1 < k + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat a + 1 < k + 1", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat a + 1 < k + 1", "by linarith"], ["proof (state)\nthis:\n  to_nat a + 1 < k + 1\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have \"diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = ?Dk $a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_preserves_previous_diagonal[OF ib _ _ ab a_not_k]) \n       (insert ak k, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have \"... dvd ?Dk $ (a+1) $ (b+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "using s ak k ab"], ["proof (prove)\nusing this:\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\n  to_nat a + 1 < k\n  k < min (nrows A) (ncols A)\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "unfolding Smith_normal_form_upt_k_def"], ["proof (prove)\nusing this:\n  (\\<forall>a b.\n      to_nat a = to_nat b \\<and>\n      to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n      diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n      (b + (1::'b))) \\<and>\n  isDiagonal_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\n  to_nat a + 1 < k\n  k < min (nrows A) (ncols A)\n  to_nat a = to_nat b\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have \"... = diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + 1) $ (b + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b)) =\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b))", "proof (auto, rule diagonal_to_Smith_row_i_preserves_previous_diagonal[symmetric, OF ib])"], ["proof (state)\ngoal (4 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 3. to_nat (a + (1::'c)) = to_nat (b + (1::'b))\n 4. to_nat (a + (1::'c)) \\<noteq> k", "show \"to_nat (a + 1) \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) \\<noteq> k", "using ak"], ["proof (prove)\nusing this:\n  to_nat a + 1 < k\n\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) \\<noteq> k", "by (metis add_less_same_cancel2 nat_neq_iff not_add_less2 to_nat_0 \n         to_nat_plus_one_less_card' to_nat_suc)"], ["proof (state)\nthis:\n  to_nat (a + (1::'c)) \\<noteq> k\n\ngoal (3 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n 3. to_nat (a + (1::'c)) = to_nat (b + (1::'b))", "show \"to_nat (a + 1) = to_nat (b + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c)) = to_nat (b + (1::'b))", "by (metis ab ak from_nat_suc from_nat_to_nat_id k less_asym' min_less_iff_conj \n          ncols_def nrows_def suc_not_zero to_nat_from_nat_id to_nat_plus_one_less_card')"], ["proof (state)\nthis:\n  to_nat (a + (1::'c)) = to_nat (b + (1::'b))\n\ngoal (2 subgoals):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n 2. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "show \"to_nat (a + 1) \\<notin> set [k + 1..<min (nrows ?Dk) (ncols ?Dk)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (a + (1::'c))\n    \\<notin> set [k + 1..<\n                  min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                   (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]", "by (metis a1_less_k1 add_to_nat_def to_nat_plus_one_less_card' less_asym' min.strict_boundedE \n          not_less nrows_def set_upt suc_not_zero to_nat_1 to_nat_from_nat_id atLeastLessThan_iff k)"], ["proof (state)\nthis:\n  to_nat (a + (1::'c))\n  \\<notin> set [k + 1..<\n                min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n                 (ncols (diagonal_to_Smith_aux A [0..<k] bezout))]\n\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "show \"k < min (nrows ?Dk) (ncols ?Dk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "using k"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n         (ncols (diagonal_to_Smith_aux A [0..<k] bezout))", "by auto"], ["proof (state)\nthis:\n  k < min (nrows (diagonal_to_Smith_aux A [0..<k] bezout))\n       (ncols (diagonal_to_Smith_aux A [0..<k] bezout))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $ (b + (1::'b)) =\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       to_nat a = to_nat b \\<and>\n       to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n       (b + (1::'b))\n 2. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))", "show \"diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b \n    dvd diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + 1) $ (b + 1)\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $\n    (b + (1::'b))", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ (a + (1::'c)) $ (b + (1::'b))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "let ?Dk=\"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "fix a::'c and b::'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "assume \"to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\""], ["proof (state)\nthis:\n  to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "hence ab: \"to_nat a \\<noteq> to_nat b\" and ak_bk: \"(to_nat a < k \\<or> to_nat b < k)\""], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b \\<and> (to_nat a < k \\<or> to_nat b < k)\n\ngoal (1 subgoal):\n 1. to_nat a \\<noteq> to_nat b &&& to_nat a < k \\<or> to_nat b < k", "by auto"], ["proof (state)\nthis:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have \"diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = ?Dk $a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n    diagonal_to_Smith_aux A [0..<k] bezout $ a $ b", "by (auto, rule diagonal_to_Smith_row_i_preserves_previous[OF ib _ ab], insert k, auto)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b =\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "using ab ak_bk s"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "unfolding Smith_normal_form_upt_k_def isDiagonal_upt_k_def"], ["proof (prove)\nusing this:\n  to_nat a \\<noteq> to_nat b\n  to_nat a < k \\<or> to_nat b < k\n  (\\<forall>a b.\n      to_nat a = to_nat b \\<and>\n      to_nat a + 1 < k \\<and> to_nat b + 1 < k \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<k] bezout $ a $ b dvd\n      diagonal_to_Smith_aux A [0..<k] bezout $ (a + (1::'c)) $\n      (b + (1::'b))) \\<and>\n  (\\<forall>a b.\n      to_nat a \\<noteq> to_nat b \\<and>\n      (to_nat a < k \\<or> to_nat b < k) \\<longrightarrow>\n      diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a))\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<k] bezout $ a $ b = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       to_nat a \\<noteq> to_nat b \\<and>\n       (to_nat a < k \\<or> to_nat b < k) \\<Longrightarrow>\n       diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "show \"diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = 0\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)", "."], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ a $ b = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary Smith_normal_form_upt_k_Suc_eq:\n  assumes k: \"k<min (nrows A) (ncols A)\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k \n    = Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k =\n    Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "using Smith_normal_form_upt_k_Suc_imp_k Smith_normal_form_upt_k_imp_Suc_k k"], ["proof (prove)\nusing this:\n  \\<lbrakk>Smith_normal_form_upt_k\n            (diagonal_to_Smith_aux ?A [0..<Suc ?k] bezout) ?k;\n   ?k < min (nrows ?A) (ncols ?A)\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form_upt_k\n                     (diagonal_to_Smith_aux ?A [0..<?k] bezout) ?k\n  \\<lbrakk>Smith_normal_form_upt_k\n            (diagonal_to_Smith_aux ?A [0..<?k] bezout) ?k;\n   ?k < min (nrows ?A) (ncols ?A)\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form_upt_k\n                     (diagonal_to_Smith_aux ?A [0..<Suc ?k] bezout) ?k\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k =\n    Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "by blast"], ["", "end"], ["", "lemma nrows_diagonal_to_Smith_i[simp]: \"nrows (diagonal_to_Smith_i xs A i bezout) = nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows (diagonal_to_Smith_i xs A i bezout) = nrows A", "by (induct xs A i bezout rule: diagonal_to_Smith_i.induct, auto simp add: nrows_def)"], ["", "lemma ncols_diagonal_to_Smith_i[simp]: \"ncols (diagonal_to_Smith_i xs A i bezout) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols (diagonal_to_Smith_i xs A i bezout) = ncols A", "by (induct xs A i bezout rule: diagonal_to_Smith_i.induct, auto simp add: ncols_def)"], ["", "lemma nrows_Diagonal_to_Smith_row_i[simp]: \"nrows (Diagonal_to_Smith_row_i A i bezout) = nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows (Diagonal_to_Smith_row_i A i bezout) = nrows A", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows\n     (diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout) =\n    nrows A", "by auto"], ["", "lemma ncols_Diagonal_to_Smith_row_i[simp]: \"ncols (Diagonal_to_Smith_row_i A i bezout) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols (Diagonal_to_Smith_row_i A i bezout) = ncols A", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols\n     (diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout) =\n    ncols A", "by auto"], ["", "lemma isDiagonal_diagonal_step:\n  assumes diag_A: \"isDiagonal A\" and i: \"i<min (nrows A) (ncols A)\"\n    and j: \"j<min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_step A i j d v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "have i_eq: \"to_nat (from_nat i::'b) = to_nat (from_nat i::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat i) = to_nat (from_nat i)", "using i"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. to_nat (from_nat i) = to_nat (from_nat i)", "by (simp add: ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat i) = to_nat (from_nat i)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "moreover"], ["proof (state)\nthis:\n  to_nat (from_nat i) = to_nat (from_nat i)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "have j_eq: \"to_nat (from_nat j::'b) = to_nat (from_nat j::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat j) = to_nat (from_nat j)", "using j"], ["proof (prove)\nusing this:\n  j < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. to_nat (from_nat j) = to_nat (from_nat j)", "by (simp add: ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat j) = to_nat (from_nat j)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "ultimately"], ["proof (chain)\npicking this:\n  to_nat (from_nat i) = to_nat (from_nat i)\n  to_nat (from_nat j) = to_nat (from_nat j)", "show ?thesis"], ["proof (prove)\nusing this:\n  to_nat (from_nat i) = to_nat (from_nat i)\n  to_nat (from_nat j) = to_nat (from_nat j)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "using assms"], ["proof (prove)\nusing this:\n  to_nat (from_nat i) = to_nat (from_nat i)\n  to_nat (from_nat j) = to_nat (from_nat j)\n  isDiagonal A\n  i < min (nrows A) (ncols A)\n  j < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_step A i j d v)", "unfolding isDiagonal_def diagonal_step_def"], ["proof (prove)\nusing this:\n  to_nat (from_nat i) = to_nat (from_nat i)\n  to_nat (from_nat j) = to_nat (from_nat j)\n  \\<forall>a b.\n     to_nat a \\<noteq> to_nat b \\<longrightarrow> A $ a $ b = (0::'a)\n  i < min (nrows A) (ncols A)\n  j < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       to_nat a \\<noteq> to_nat b \\<longrightarrow>\n       (\\<chi>a b.\n           if a = from_nat i \\<and> b = from_nat i then d\n           else if a = from_nat j \\<and> b = from_nat j\n                then v * A $ from_nat j $ from_nat j else A $ a $ b) $\n       a $\n       b =\n       (0::'a)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_step A i j d v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isDiagonal_diagonal_to_Smith_i:\n  assumes \"isDiagonal A\"\n    and elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\" \n    and \"i<min (nrows A) (ncols A)\"\n  shows \"isDiagonal (diagonal_to_Smith_i xs A i bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i xs A i bezout)", "using assms"], ["proof (prove)\nusing this:\n  isDiagonal A\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i xs A i bezout)", "proof (induct xs A i bezout rule: diagonal_to_Smith_i.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>isDiagonal A;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i [] A i bezout)\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "case (1 A i bezout)"], ["proof (state)\nthis:\n  isDiagonal A\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. \\<And>A i bezout.\n       \\<lbrakk>isDiagonal A;\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i [] A i bezout)\n 2. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "then"], ["proof (chain)\npicking this:\n  isDiagonal A\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)", "show ?case"], ["proof (prove)\nusing this:\n  isDiagonal A\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i [] A i bezout)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_i [] A i bezout)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "case (2 j xs A i bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   isDiagonal A;\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i xs A i bezout)\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; isDiagonal ?xe;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   i < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i xs ?xe i bezout)\n  isDiagonal A\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?Aii = \"A $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?Ajj = \"A $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?p=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?q=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?u=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?v=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?d=\"case bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "let ?A'=\"diagonal_step A i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (A $ from_nat i $ from_nat i)\n           (A $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (A $ from_nat i $ from_nat i)\n         (A $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs A i bezout.\n       \\<lbrakk>\\<lbrakk>A $ from_nat i $ from_nat i dvd\n                         A $ from_nat j $ from_nat j;\n                 isDiagonal A;\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 i < min (nrows A) (ncols A)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_i xs A i bezout);\n        \\<And>x xa y xb ya xc yb xd yc xe.\n           \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                           A $ from_nat j $ from_nat j;\n            x =\n            bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step A i j yc xd; isDiagonal xe;\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow>\n               x < min (nrows xe) (ncols xe);\n            i < min (nrows xe) (ncols xe)\\<rbrakk>\n           \\<Longrightarrow> isDiagonal\n                              (diagonal_to_Smith_i xs xe i bezout);\n        isDiagonal A;\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        i < min (nrows A) (ncols A)\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_i (j # xs) A i bezout)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "proof (cases \"?Aii dvd ?Ajj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "case True"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. A $ from_nat i $ from_nat i dvd\n    A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n 2. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "using \"2.hyps\" \"2.prems\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n  \\<lbrakk>A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j;\n   isDiagonal A;\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i xs A i bezout)\n  \\<lbrakk>\\<not> A $ from_nat i $ from_nat i dvd\n                  A $ from_nat j $ from_nat j;\n   ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step A i j ?yc ?xd; isDiagonal ?xe;\n   \\<forall>x.\n      x \\<in> set xs \\<longrightarrow> x < min (nrows ?xe) (ncols ?xe);\n   i < min (nrows ?xe) (ncols ?xe)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i xs ?xe i bezout)\n  isDiagonal A\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "case False"], ["proof (state)\nthis:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "have \"diagonal_to_Smith_i (j # xs) A i bezout = diagonal_to_Smith_i xs ?A' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> A $ from_nat i $ from_nat i dvd A $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) A i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) A i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "have \"isDiagonal ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_to_Smith_i xs\n       (diagonal_step A i j\n         (case bezout (A $ from_nat i $ from_nat i)\n                (A $ from_nat j $ from_nat j) of\n          (p, q, u, v, d) \\<Rightarrow> d)\n         (case bezout (A $ from_nat i $ from_nat i)\n                (A $ from_nat j $ from_nat j) of\n          (p, q, u, v, d) \\<Rightarrow> v))\n       i bezout)", "thm \"2.prems\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_to_Smith_i xs\n       (diagonal_step A i j\n         (case bezout (A $ from_nat i $ from_nat i)\n                (A $ from_nat j $ from_nat j) of\n          (p, q, u, v, d) \\<Rightarrow> d)\n         (case bezout (A $ from_nat i $ from_nat i)\n                (A $ from_nat j $ from_nat j) of\n          (p, q, u, v, d) \\<Rightarrow> v))\n       i bezout)", "proof (rule \"2.hyps\"(2)[OF False])"], ["proof (state)\ngoal (9 subgoals):\n 1. ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step A i j ?yc ?xd\n 7. isDiagonal\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n 8. \\<forall>x.\n       x \\<in> set xs \\<longrightarrow>\n       x < min (nrows\n                 (diagonal_step A i j\n                   (case bezout (A $ from_nat i $ from_nat i)\n                          (A $ from_nat j $ from_nat j) of\n                    (p, q, u, v, d) \\<Rightarrow> d)\n                   (case bezout (A $ from_nat i $ from_nat i)\n                          (A $ from_nat j $ from_nat j) of\n                    (p, q, u, v, d) \\<Rightarrow> v)))\n            (ncols\n              (diagonal_step A i j\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> d)\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> v)))\n 9. i < min (nrows\n              (diagonal_step A i j\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> d)\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> v)))\n         (ncols\n           (diagonal_step A i j\n             (case bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat j $ from_nat j) of\n              (p, q, u, v, d) \\<Rightarrow> d)\n             (case bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat j $ from_nat j) of\n              (p, q, u, v, d) \\<Rightarrow> v)))", "show \"isDiagonal\n        (diagonal_step A i j ?d ?v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))", "by (rule isDiagonal_diagonal_step, insert \"2.prems\", auto)"], ["proof (state)\nthis:\n  isDiagonal\n   (diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n\ngoal (8 subgoals):\n 1. ?x = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step A i j\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (A $ from_nat i $ from_nat i)\n            (A $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step A i j ?yc ?xd\n 7. \\<forall>x.\n       x \\<in> set xs \\<longrightarrow>\n       x < min (nrows\n                 (diagonal_step A i j\n                   (case bezout (A $ from_nat i $ from_nat i)\n                          (A $ from_nat j $ from_nat j) of\n                    (p, q, u, v, d) \\<Rightarrow> d)\n                   (case bezout (A $ from_nat i $ from_nat i)\n                          (A $ from_nat j $ from_nat j) of\n                    (p, q, u, v, d) \\<Rightarrow> v)))\n            (ncols\n              (diagonal_step A i j\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> d)\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> v)))\n 8. i < min (nrows\n              (diagonal_step A i j\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> d)\n                (case bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat j $ from_nat j) of\n                 (p, q, u, v, d) \\<Rightarrow> v)))\n         (ncols\n           (diagonal_step A i j\n             (case bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat j $ from_nat j) of\n              (p, q, u, v, d) \\<Rightarrow> d)\n             (case bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat j $ from_nat j) of\n              (p, q, u, v, d) \\<Rightarrow> v)))", "qed (insert pquvd \"2.prems\", auto)"], ["proof (state)\nthis:\n  isDiagonal\n   (diagonal_to_Smith_i xs\n     (diagonal_step A i j\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (A $ from_nat i $ from_nat i)\n              (A $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout)\n\ngoal (1 subgoal):\n 1. \\<not> A $ from_nat i $ from_nat i dvd\n           A $ from_nat j $ from_nat j \\<Longrightarrow>\n    isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "finally"], ["proof (chain)\npicking this:\n  isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "show ?thesis"], ["proof (prove)\nusing this:\n  isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)", "."], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_i (j # xs) A i bezout)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isDiagonal_Diagonal_to_Smith_row_i:\n  assumes \"isDiagonal A\" and \"i < min (nrows A) (ncols A)\"\n  shows \"isDiagonal (Diagonal_to_Smith_row_i A i bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (Diagonal_to_Smith_row_i A i bezout)", "using assms isDiagonal_diagonal_to_Smith_i"], ["proof (prove)\nusing this:\n  isDiagonal A\n  i < min (nrows A) (ncols A)\n  \\<lbrakk>isDiagonal ?A;\n   \\<forall>x.\n      x \\<in> set ?xs \\<longrightarrow> x < min (nrows ?A) (ncols ?A);\n   ?i < min (nrows ?A) (ncols ?A)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i ?xs ?A ?i ?bezout)\n\ngoal (1 subgoal):\n 1. isDiagonal (Diagonal_to_Smith_row_i A i bezout)", "unfolding Diagonal_to_Smith_row_i_def"], ["proof (prove)\nusing this:\n  isDiagonal A\n  i < min (nrows A) (ncols A)\n  \\<lbrakk>isDiagonal ?A;\n   \\<forall>x.\n      x \\<in> set ?xs \\<longrightarrow> x < min (nrows ?A) (ncols ?A);\n   ?i < min (nrows ?A) (ncols ?A)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal (diagonal_to_Smith_i ?xs ?A ?i ?bezout)\n\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_to_Smith_i [i + 1..<min (nrows A) (ncols A)] A i bezout)", "by force"], ["", "lemma isDiagonal_diagonal_to_Smith_aux_general:\n  assumes elements_xs_range: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x<min (nrows A) (ncols A)\" \n  and \"isDiagonal A\"\nshows \"isDiagonal (diagonal_to_Smith_aux A xs bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A xs bezout)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A xs bezout)", "proof (induct A xs bezout rule: diagonal_to_Smith_aux.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A bezout.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set [] \\<longrightarrow>\n                   x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal (diagonal_to_Smith_aux A [] bezout)\n 2. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "case (1 A)"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (2 subgoals):\n 1. \\<And>A bezout.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set [] \\<longrightarrow>\n                   x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal (diagonal_to_Smith_aux A [] bezout)\n 2. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [] bezout_)", "by auto"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_aux A [] bezout_)\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "case (2 A i xs bezout)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x.\n              x \\<in> set xs \\<longrightarrow>\n              x < min (nrows (Diagonal_to_Smith_row_i A i bezout))\n                   (ncols (Diagonal_to_Smith_row_i A i bezout));\n   isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n  \\<Longrightarrow> isDiagonal\n                     (diagonal_to_Smith_aux\n                       (Diagonal_to_Smith_row_i A i bezout) xs bezout)\n  \\<forall>x.\n     x \\<in> set (i # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "note k = \"2.prems\"(1)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (i # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "note elements_xs_range = \"2.prems\"(2)"], ["proof (state)\nthis:\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "have \"diagonal_to_Smith_aux A (i # xs) bezout \n  = diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A (i # xs) bezout =\n    diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A (i # xs) bezout =\n  diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A (i # xs) bezout =\n  diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "have \"isDiagonal (...)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout)", "by (rule \"2.hyps\", insert isDiagonal_Diagonal_to_Smith_row_i \"2.prems\" k, auto)"], ["proof (state)\nthis:\n  isDiagonal\n   (diagonal_to_Smith_aux (Diagonal_to_Smith_row_i A i bezout) xs bezout)\n\ngoal (1 subgoal):\n 1. \\<And>A i xs bezout.\n       \\<lbrakk>\\<lbrakk>\\<forall>x.\n                            x \\<in> set xs \\<longrightarrow>\n                            x < min (nrows\n(Diagonal_to_Smith_row_i A i bezout))\n                                 (ncols\n                                   (Diagonal_to_Smith_row_i A i bezout));\n                 isDiagonal (Diagonal_to_Smith_row_i A i bezout)\\<rbrakk>\n                \\<Longrightarrow> isDiagonal\n                                   (diagonal_to_Smith_aux\n                                     (Diagonal_to_Smith_row_i A i bezout) xs\n                                     bezout);\n        \\<forall>x.\n           x \\<in> set (i # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> isDiagonal\n                          (diagonal_to_Smith_aux A (i # xs) bezout)", "finally"], ["proof (chain)\npicking this:\n  isDiagonal (diagonal_to_Smith_aux A (i # xs) bezout)", "show ?case"], ["proof (prove)\nusing this:\n  isDiagonal (diagonal_to_Smith_aux A (i # xs) bezout)\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A (i # xs) bezout)", "."], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_aux A (i # xs) bezout)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes bezout::\"'a::{bezout_ring} \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a \\<times> 'a \\<times> 'a\"\n  assumes ib: \"is_bezout_ext bezout\"\nbegin"], ["", "text\\<open>The algorithm is iterated up to position k (not included). Thus, the matrix\nis in Smith normal form up to position k (not included).\\<close>"], ["", "lemma Smith_normal_form_upt_k_diagonal_to_Smith_aux:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes \"k<min (nrows A) (ncols A)\" and d: \"isDiagonal A\"\n  shows \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "using assms"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n    \\<Longrightarrow> Smith_normal_form_upt_k\n                       (diagonal_to_Smith_aux A [0..<0] bezout) 0\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "case 0"], ["proof (state)\nthis:\n  0 < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n    \\<Longrightarrow> Smith_normal_form_upt_k\n                       (diagonal_to_Smith_aux A [0..<0] bezout) 0\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "then"], ["proof (chain)\npicking this:\n  0 < min (nrows A) (ncols A)\n  isDiagonal A", "show ?case"], ["proof (prove)\nusing this:\n  0 < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<0] bezout) 0", "by auto"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<0] bezout) 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form_upt_k\n                     (diagonal_to_Smith_aux A [0..<k] bezout) k\n  Suc k < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "note Suc_k = \"Suc.prems\"(1)"], ["proof (state)\nthis:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "have hyp: \"Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k", "by (rule Suc.hyps, insert Suc.prems, simp)"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<k] bezout) k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "have k: \"k < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc k < min (nrows A) (ncols A)\n  isDiagonal A\n\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "by auto"], ["proof (state)\nthis:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "let ?A = \"diagonal_to_Smith_aux A [0..<k] bezout\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "let ?D_Suck = \"diagonal_to_Smith_aux A [0..<Suc k] bezout\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "have set_rw: \"[0..<Suc k] = [0..<k] @ [k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc k] = [0..<k] @ [k]", "by auto"], ["proof (state)\nthis:\n  [0..<Suc k] = [0..<k] @ [k]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n                \\<Longrightarrow> Smith_normal_form_upt_k\n                                   (diagonal_to_Smith_aux A [0..<k] bezout)\n                                   k;\n        Suc k < min (nrows A) (ncols A); isDiagonal A\\<rbrakk>\n       \\<Longrightarrow> Smith_normal_form_upt_k\n                          (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n                          (Suc k)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n     (Suc k)", "proof (rule Smith_normal_form_upt_k1_intro_diagonal)"], ["proof (state)\ngoal (3 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\n 2. isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n 3. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat (k - 1) $\n    from_nat (k - 1) dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat k $ from_nat k", "show \"Smith_normal_form_upt_k (?D_Suck) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k", "by (rule Smith_normal_form_upt_k_imp_Suc_k[OF ib hyp k])"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout) k\n\ngoal (2 subgoals):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n 2. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat (k - 1) $\n    from_nat (k - 1) dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat k $ from_nat k", "show \"?D_Suck $ from_nat (k - 1) $ from_nat (k - 1) dvd ?D_Suck $ from_nat k $ from_nat k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat (k - 1) $\n    from_nat (k - 1) dvd\n    diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat k $ from_nat k", "proof (rule diagonal_to_Smith_aux_dvd[OF ib _ _ _ Suc_k])"], ["proof (state)\ngoal (3 subgoals):\n 1. to_nat (from_nat k) = to_nat (from_nat k)\n 2. k - 1 < Suc k\n 3. k - 1 \\<le> to_nat (from_nat k)", "show \"to_nat (from_nat k::'c) = to_nat (from_nat k::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_nat (from_nat k) = to_nat (from_nat k)", "by (metis k min_less_iff_conj ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat k) = to_nat (from_nat k)\n\ngoal (2 subgoals):\n 1. k - 1 < Suc k\n 2. k - 1 \\<le> to_nat (from_nat k)", "show \"k - 1 \\<le> to_nat (from_nat k::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k - 1 \\<le> to_nat (from_nat k)", "by (metis diff_le_self k min_less_iff_conj nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  k - 1 \\<le> to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. k - 1 < Suc k", "qed auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat (k - 1) $\n  from_nat (k - 1) dvd\n  diagonal_to_Smith_aux A [0..<Suc k] bezout $ from_nat k $ from_nat k\n\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "show \"isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)", "by (rule isDiagonal_diagonal_to_Smith_aux[OF ib d Suc_k])"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith_aux A [0..<Suc k] bezout)\n   (Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma nrows_diagonal_to_Smith[simp]: \"nrows (diagonal_to_Smith A bezout) = nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows (diagonal_to_Smith A bezout) = nrows A", "unfolding diagonal_to_Smith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout) =\n    nrows A", "by auto"], ["", "lemma ncols_diagonal_to_Smith[simp]: \"ncols (diagonal_to_Smith A bezout) = ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols (diagonal_to_Smith A bezout) = ncols A", "unfolding diagonal_to_Smith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ncols\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout) =\n    ncols A", "by auto"], ["", "lemma isDiagonal_diagonal_to_Smith:\n  assumes d: \"isDiagonal A\"\n  shows \"isDiagonal (diagonal_to_Smith A bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith A bezout)", "unfolding diagonal_to_Smith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout)", "by (rule isDiagonal_diagonal_to_Smith_aux_general[OF _ d], auto)"], ["", "text\\<open>This is the soundess lemma.\\<close>"], ["", "lemma Smith_normal_form_diagonal_to_Smith:\n  fixes A::\"'a::{bezout_ring}^'b::mod_type^'c::mod_type\"\n  assumes ib: \"is_bezout_ext bezout\"\n  and d: \"isDiagonal A\"\n  shows \"Smith_normal_form (diagonal_to_Smith A bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "let ?k = \"min (nrows A) (ncols A) - 2\""], ["proof (state)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "let ?Dk = \"(diagonal_to_Smith_aux A [0..<?k] bezout)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "have min_eq: \"min (nrows A) (ncols A) - 1 = Suc ?k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)", "by (metis Suc_1 Suc_diff_Suc min_less_iff_conj ncols_def nrows_def to_nat_1 to_nat_less_card)"], ["proof (state)\nthis:\n  min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "have set_rw: \"[0..<min (nrows A) (ncols A) - 1] = [0..<?k] @ [?k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<min (nrows A) (ncols A) - 1] =\n    [0..<min (nrows A) (ncols A) - 2] @ [min (nrows A) (ncols A) - 2]", "unfolding min_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc (min (nrows A) (ncols A) - 2)] =\n    [0..<min (nrows A) (ncols A) - 2] @ [min (nrows A) (ncols A) - 2]", "by auto"], ["proof (state)\nthis:\n  [0..<min (nrows A) (ncols A) - 1] =\n  [0..<min (nrows A) (ncols A) - 2] @ [min (nrows A) (ncols A) - 2]\n\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "have d2: \"isDiagonal (diagonal_to_Smith A bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal (diagonal_to_Smith A bezout)", "by (rule isDiagonal_diagonal_to_Smith[OF d])"], ["proof (state)\nthis:\n  isDiagonal (diagonal_to_Smith A bezout)\n\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "have smith_Suc_k: \"Smith_normal_form_upt_k (diagonal_to_Smith A bezout) (Suc ?k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (Suc (min (nrows A) (ncols A) - 2))", "proof (rule Smith_normal_form_upt_k1_intro_diagonal[OF _ d2])"], ["proof (state)\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "have \"diagonal_to_Smith A bezout = diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout =\n    diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout", "unfolding diagonal_to_Smith_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout =\n    diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout =\n  diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout\n\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "also"], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout =\n  diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout\n\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "have \"... = Diagonal_to_Smith_row_i ?Dk ?k bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout =\n    Diagonal_to_Smith_row_i\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2) bezout", "unfolding set_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux A\n     ([0..<min (nrows A) (ncols A) - 2] @ [min (nrows A) (ncols A) - 2])\n     bezout =\n    Diagonal_to_Smith_row_i\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2) bezout", "unfolding diagonal_to_Smith_aux_append2"], ["proof (prove)\ngoal (1 subgoal):\n 1. Diagonal_to_Smith_row_i\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2) bezout =\n    Diagonal_to_Smith_row_i\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2) bezout", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 1] bezout =\n  Diagonal_to_Smith_row_i\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2) bezout\n\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "finally"], ["proof (chain)\npicking this:\n  diagonal_to_Smith A bezout =\n  Diagonal_to_Smith_row_i\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2) bezout", "have d_rw: \"diagonal_to_Smith A bezout = Diagonal_to_Smith_row_i ?Dk ?k bezout\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith A bezout =\n  Diagonal_to_Smith_row_i\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2) bezout\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout =\n    Diagonal_to_Smith_row_i\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2) bezout", "."], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout =\n  Diagonal_to_Smith_row_i\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2) bezout\n\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "have \"Smith_normal_form_upt_k ?Dk ?k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k\n     (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n     (min (nrows A) (ncols A) - 2)", "by (rule Smith_normal_form_upt_k_diagonal_to_Smith_aux[OF ib _ d], insert min_eq, linarith)"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2)\n\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)\n 2. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "thus \"Smith_normal_form_upt_k (diagonal_to_Smith A bezout) ?k\""], ["proof (prove)\nusing this:\n  Smith_normal_form_upt_k\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows A) (ncols A) - 2)", "unfolding d_rw"], ["proof (prove)\nusing this:\n  Smith_normal_form_upt_k\n   (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n   (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k\n     (Diagonal_to_Smith_row_i\n       (diagonal_to_Smith_aux A [0..<min (nrows A) (ncols A) - 2] bezout)\n       (min (nrows A) (ncols A) - 2) bezout)\n     (min (nrows A) (ncols A) - 2)", "by (metis Smith_normal_form_upt_k_Suc_eq Suc_1 ib d_rw diagonal_to_Smith_def diff_0_eq_0 \n          diff_less min_eq not_gr_zero zero_less_Suc)"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n   (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "show \"diagonal_to_Smith A bezout $ from_nat (?k - 1) $ from_nat (?k - 1) dvd\n          diagonal_to_Smith A bezout $ from_nat ?k $ from_nat ?k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) $\n    from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n    diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2)", "proof (unfold diagonal_to_Smith_def, rule diagonal_to_Smith_aux_dvd[OF ib])"], ["proof (state)\ngoal (4 subgoals):\n 1. to_nat (from_nat (min (nrows A) (ncols A) - 2)) =\n    to_nat (from_nat (min (nrows A) (ncols A) - 2))\n 2. min (nrows A) (ncols A) - 2 - 1 < min (nrows A) (ncols A) - 1\n 3. min (nrows A) (ncols A) - 2 - 1\n    \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))\n 4. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "show \"?k - 1 < min (nrows A) (ncols A) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 2 - 1 < min (nrows A) (ncols A) - 1", "using min_eq"], ["proof (prove)\nusing this:\n  min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 2 - 1 < min (nrows A) (ncols A) - 1", "by linarith"], ["proof (state)\nthis:\n  min (nrows A) (ncols A) - 2 - 1 < min (nrows A) (ncols A) - 1\n\ngoal (3 subgoals):\n 1. to_nat (from_nat (min (nrows A) (ncols A) - 2)) =\n    to_nat (from_nat (min (nrows A) (ncols A) - 2))\n 2. min (nrows A) (ncols A) - 2 - 1\n    \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))\n 3. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "show \"min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "using min_eq"], ["proof (prove)\nusing this:\n  min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "by linarith"], ["proof (state)\nthis:\n  min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. to_nat (from_nat (min (nrows A) (ncols A) - 2)) =\n    to_nat (from_nat (min (nrows A) (ncols A) - 2))\n 2. min (nrows A) (ncols A) - 2 - 1\n    \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))", "thus \"to_nat (from_nat ?k::'c) = to_nat (from_nat ?k::'b)\""], ["proof (prove)\nusing this:\n  min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. to_nat (from_nat (min (nrows A) (ncols A) - 2)) =\n    to_nat (from_nat (min (nrows A) (ncols A) - 2))", "by (metis (mono_tags, lifting) Suc_lessD min_eq min_less_iff_conj \n            ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  to_nat (from_nat (min (nrows A) (ncols A) - 2)) =\n  to_nat (from_nat (min (nrows A) (ncols A) - 2))\n\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 2 - 1\n    \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))", "show \"?k - 1 \\<le> to_nat (from_nat ?k::'c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 2 - 1\n    \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))", "by (metis (no_types, lifting) diff_le_self from_nat_not_eq lessI less_le_trans \n            min.cobounded1 min_eq nrows_def)"], ["proof (state)\nthis:\n  min (nrows A) (ncols A) - 2 - 1\n  \\<le> to_nat (from_nat (min (nrows A) (ncols A) - 2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2 - 1) $\n  from_nat (min (nrows A) (ncols A) - 2 - 1) dvd\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n  from_nat (min (nrows A) (ncols A) - 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n   (Suc (min (nrows A) (ncols A) - 2))\n\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "have s_eq: \"Smith_normal_form (diagonal_to_Smith A bezout) \n     = Smith_normal_form_upt_k (diagonal_to_Smith A bezout) \n    (Suc (min (nrows (diagonal_to_Smith A bezout)) (ncols (diagonal_to_Smith A bezout)) - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout) =\n    Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (Suc (min (nrows (diagonal_to_Smith A bezout))\n            (ncols (diagonal_to_Smith A bezout)) -\n           1))", "unfolding Smith_normal_form_min"], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout))) =\n    Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (Suc (min (nrows (diagonal_to_Smith A bezout))\n            (ncols (diagonal_to_Smith A bezout)) -\n           1))", "by (simp add: ncols_def nrows_def)"], ["proof (state)\nthis:\n  Smith_normal_form (diagonal_to_Smith A bezout) =\n  Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n   (Suc (min (nrows (diagonal_to_Smith A bezout))\n          (ncols (diagonal_to_Smith A bezout)) -\n         1))\n\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "let ?min1=\"(min (nrows (diagonal_to_Smith A bezout)) (ncols (diagonal_to_Smith A bezout)) - 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form (diagonal_to_Smith A bezout)", "unfolding s_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (Suc (min (nrows (diagonal_to_Smith A bezout))\n            (ncols (diagonal_to_Smith A bezout)) -\n           1))", "proof (rule Smith_normal_form_upt_k1_intro_diagonal[OF _ d2])"], ["proof (state)\ngoal (2 subgoals):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)\n 2. diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) dvd\n    diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "show \"Smith_normal_form_upt_k (diagonal_to_Smith A bezout) ?min1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "using smith_Suc_k min_eq"], ["proof (prove)\nusing this:\n  Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n   (Suc (min (nrows A) (ncols A) - 2))\n  min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "by auto"], ["proof (state)\nthis:\n  Smith_normal_form_upt_k (diagonal_to_Smith A bezout)\n   (min (nrows (diagonal_to_Smith A bezout))\n     (ncols (diagonal_to_Smith A bezout)) -\n    1)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) dvd\n    diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "have \"diagonal_to_Smith A bezout $ from_nat ?k $ from_nat ?k \n      dvd diagonal_to_Smith A bezout $ from_nat (?k + 1) $ from_nat (?k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n    from_nat (min (nrows A) (ncols A) - 2) dvd\n    diagonal_to_Smith A bezout $\n    from_nat (min (nrows A) (ncols A) - 2 + 1) $\n    from_nat (min (nrows A) (ncols A) - 2 + 1)", "by (smt One_nat_def Suc_eq_plus1 ib Suc_pred diagonal_to_Smith_aux_dvd diagonal_to_Smith_def \n          le_add1 lessI min_eq min_less_iff_conj ncols_def nrows_def to_nat_from_nat_id zero_less_card_finite)"], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n  from_nat (min (nrows A) (ncols A) - 2) dvd\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2 + 1) $\n  from_nat (min (nrows A) (ncols A) - 2 + 1)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) dvd\n    diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "thus \"diagonal_to_Smith A bezout $ from_nat (?min1 - 1) $ from_nat (?min1 - 1) \n      dvd diagonal_to_Smith A bezout $ from_nat ?min1 $ from_nat ?min1\""], ["proof (prove)\nusing this:\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n  from_nat (min (nrows A) (ncols A) - 2) dvd\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2 + 1) $\n  from_nat (min (nrows A) (ncols A) - 2 + 1)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) dvd\n    diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "using min_eq"], ["proof (prove)\nusing this:\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2) $\n  from_nat (min (nrows A) (ncols A) - 2) dvd\n  diagonal_to_Smith A bezout $ from_nat (min (nrows A) (ncols A) - 2 + 1) $\n  from_nat (min (nrows A) (ncols A) - 2 + 1)\n  min (nrows A) (ncols A) - 1 = Suc (min (nrows A) (ncols A) - 2)\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1 -\n      1) dvd\n    diagonal_to_Smith A bezout $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1) $\n    from_nat\n     (min (nrows (diagonal_to_Smith A bezout))\n       (ncols (diagonal_to_Smith A bezout)) -\n      1)", "by auto"], ["proof (state)\nthis:\n  diagonal_to_Smith A bezout $\n  from_nat\n   (min (nrows (diagonal_to_Smith A bezout))\n     (ncols (diagonal_to_Smith A bezout)) -\n    1 -\n    1) $\n  from_nat\n   (min (nrows (diagonal_to_Smith A bezout))\n     (ncols (diagonal_to_Smith A bezout)) -\n    1 -\n    1) dvd\n  diagonal_to_Smith A bezout $\n  from_nat\n   (min (nrows (diagonal_to_Smith A bezout))\n     (ncols (diagonal_to_Smith A bezout)) -\n    1) $\n  from_nat\n   (min (nrows (diagonal_to_Smith A bezout))\n     (ncols (diagonal_to_Smith A bezout)) -\n    1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Smith_normal_form (diagonal_to_Smith A bezout)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Implementation and formal proof \n  of the matrices $P$ and $Q$ which transform the input matrix by means of elementary operations.\\<close>"], ["", "fun diagonal_step_PQ :: \"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a bezout \\<Rightarrow> \n(\n('a::{bezout_ring}^'rows::mod_type^'rows::mod_type) \\<times>\n('a::{bezout_ring}^'cols::mod_type^'cols::mod_type)\n)\"\n  where \"diagonal_step_PQ A i k bezout = \n  (let  i_row = from_nat i; k_row = from_nat k; i_col = from_nat i; k_col = from_nat k;\n        (p, q, u, v, d) = bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n        P = row_add (interchange_rows (row_add (mat 1) k_row i_row p) i_row k_row) k_row i_row (-v);\n        Q = mult_column (column_add (column_add (mat 1) i_col k_col q) k_col i_col u) k_col (-1)\n        in (P,Q)\n        )\""], ["", "text\\<open>Examples\\<close>"], ["", "value \"let A = list_of_list_to_matrix [[12,0,0::int],[0,6,0::int],[0,0,2::int]]::int^3^3;\n            i=0; k=1;\n           (p, q, u, v, d) = euclid_ext2 (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k);\n            (P,Q) = diagonal_step_PQ A i k euclid_ext2\n  in matrix_to_list_of_list (diagonal_step A i k d v)\""], ["", "value \"let A = list_of_list_to_matrix [[12,0,0::int],[0,6,0::int],[0,0,2::int]]::int^3^3;\n            i=0; k=1;\n           (p, q, u, v, d) = euclid_ext2 (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k);\n            (P,Q) = diagonal_step_PQ A i k euclid_ext2\n  in matrix_to_list_of_list (P**(A)**Q)\""], ["", "value \"let A = list_of_list_to_matrix [[12,0,0::int],[0,6,0::int],[0,0,2::int]]::int^3^3;\n            i=0; k=1;\n           (p, q, u, v, d) = euclid_ext2 (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k);\n            (P,Q) = diagonal_step_PQ A i k euclid_ext2\n  in matrix_to_list_of_list (P**(A)**Q)\""], ["", "lemmas diagonal_step_PQ_def = diagonal_step_PQ.simps"], ["", "lemma from_nat_neq_rows:\n  fixes A::\"'a^'cols::mod_type^'rows::mod_type\"\n  assumes i: \"i<(nrows A)\" and k: \"k<(nrows A)\" and ik: \"i \\<noteq> k\"\n  shows \"from_nat i \\<noteq> (from_nat k::'rows)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "proof (rule ccontr, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "let ?i=\"from_nat i::'rows\""], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "let ?k=\"from_nat k::'rows\""], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "assume \"?i = ?k\""], ["proof (state)\nthis:\n  from_nat i = from_nat k\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "hence \"to_nat ?i = to_nat ?k\""], ["proof (prove)\nusing this:\n  from_nat i = from_nat k\n\ngoal (1 subgoal):\n 1. to_nat (from_nat i) = to_nat (from_nat k)", "by auto"], ["proof (state)\nthis:\n  to_nat (from_nat i) = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "hence \"i = k\""], ["proof (prove)\nusing this:\n  to_nat (from_nat i) = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. i = k", "unfolding to_nat_from_nat_id[OF i[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  i = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. i = k", "unfolding to_nat_from_nat_id[OF k[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. i = k", "."], ["proof (state)\nthis:\n  i = k\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. False", "using ik"], ["proof (prove)\nusing this:\n  i = k\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma from_nat_neq_cols:\n  fixes A::\"'a^'cols::mod_type^'rows::mod_type\"\n  assumes i: \"i<(ncols A)\" and k: \"k<(ncols A)\" and ik: \"i \\<noteq> k\"\n  shows \"from_nat i \\<noteq> (from_nat k::'cols)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "proof (rule ccontr, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "let ?i=\"from_nat i::'cols\""], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "let ?k=\"from_nat k::'cols\""], ["proof (state)\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "assume \"?i = ?k\""], ["proof (state)\nthis:\n  from_nat i = from_nat k\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "hence \"to_nat ?i = to_nat ?k\""], ["proof (prove)\nusing this:\n  from_nat i = from_nat k\n\ngoal (1 subgoal):\n 1. to_nat (from_nat i) = to_nat (from_nat k)", "by auto"], ["proof (state)\nthis:\n  to_nat (from_nat i) = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "hence \"i = k\""], ["proof (prove)\nusing this:\n  to_nat (from_nat i) = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. i = k", "unfolding to_nat_from_nat_id[OF i[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  i = to_nat (from_nat k)\n\ngoal (1 subgoal):\n 1. i = k", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. i = k", "."], ["proof (state)\nthis:\n  i = k\n\ngoal (1 subgoal):\n 1. from_nat i = from_nat k \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. False", "using ik"], ["proof (prove)\nusing this:\n  i = k\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_step_PQ_invertible_P:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i_not_k: \"i \\<noteq> k\" \n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\"\nshows \"invertible P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible P", "let ?step1 = \"(row_add (mat 1) (from_nat k::'rows) (from_nat i) p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible P", "let ?step2 = \"interchange_rows ?step1 (from_nat i) (from_nat k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible P", "let ?step3 = \"row_add (?step2) (from_nat k) (from_nat i) (- v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible P", "have p: \"p = fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p =\n    fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))", "using pquvd"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. p =\n    fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))", "by (metis fst_conv)"], ["proof (state)\nthis:\n  p =\n  fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))\n\ngoal (1 subgoal):\n 1. invertible P", "have v: \"-v = (- fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - v =\n    - fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                           (A $ from_nat k $ from_nat k)))))", "using pquvd"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. - v =\n    - fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                           (A $ from_nat k $ from_nat k)))))", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  - v =\n  - fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat k $ from_nat k)))))\n\ngoal (1 subgoal):\n 1. invertible P", "have i_not_k2: \"from_nat k \\<noteq> (from_nat i::'rows)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat k \\<noteq> from_nat i", "by (rule from_nat_neq_rows, insert i k i_not_k, auto)"], ["proof (state)\nthis:\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. invertible P", "have \"invertible ?step3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (row_add\n       (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n         (from_nat i) (from_nat k))\n       (from_nat k) (from_nat i) (- v))", "unfolding row_add_mat_1[of _ _ _ ?step2, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n      interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))", "proof (rule invertible_mult)"], ["proof (state)\ngoal (2 subgoals):\n 1. invertible (row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v))\n 2. invertible\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))", "show \"invertible (row_add (mat 1) (from_nat k::'rows) (from_nat i) (- v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v))", "by (rule invertible_row_add[OF i_not_k2])"], ["proof (state)\nthis:\n  invertible (row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v))\n\ngoal (1 subgoal):\n 1. invertible\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))", "show \"invertible ?step2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))", "by (metis i_not_k2 interchange_rows_mat_1 invertible_interchange_rows\n          invertible_mult invertible_row_add)"], ["proof (state)\nthis:\n  invertible\n   (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible\n   (row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v))\n\ngoal (1 subgoal):\n 1. invertible P", "thus ?thesis"], ["proof (prove)\nusing this:\n  invertible\n   (row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v))\n\ngoal (1 subgoal):\n 1. invertible P", "using PQ p v"], ["proof (prove)\nusing this:\n  invertible\n   (row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v))\n  (P, Q) = diagonal_step_PQ A i k bezout\n  p =\n  fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))\n  - v =\n  - fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat k $ from_nat k)))))\n\ngoal (1 subgoal):\n 1. invertible P", "unfolding diagonal_step_PQ_def Let_def split_beta"], ["proof (prove)\nusing this:\n  invertible\n   (row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v))\n  (P, Q) =\n  (row_add\n    (interchange_rows\n      (row_add (mat (1::'a)) (from_nat k) (from_nat i)\n        (fst (bezout (A $ from_nat i $ from_nat i)\n               (A $ from_nat k $ from_nat k))))\n      (from_nat i) (from_nat k))\n    (from_nat k) (from_nat i)\n    (- fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                            (A $ from_nat k $ from_nat k)))))),\n   mult_column\n    (column_add\n      (column_add (mat (1::'a)) (from_nat i) (from_nat k)\n        (fst (snd (bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat k $ from_nat k)))))\n      (from_nat k) (from_nat i)\n      (fst (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                       (A $ from_nat k $ from_nat k))))))\n    (from_nat k) (- (1::'a)))\n  p =\n  fst (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))\n  - v =\n  - fst (snd (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                         (A $ from_nat k $ from_nat k)))))\n\ngoal (1 subgoal):\n 1. invertible P", "by auto"], ["proof (state)\nthis:\n  invertible P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_step_PQ_invertible_Q:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i_not_k: \"i \\<noteq> k\" \n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\"\nshows \"invertible Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible Q", "let ?step1 = \"column_add (mat 1) (from_nat i::'cols) (from_nat k) q\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible Q", "let ?step2 = \"column_add ?step1 (from_nat k) (from_nat i) u\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible Q", "let ?step3 = \"mult_column ?step2 (from_nat k) (- 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible Q", "have u: \"u = (fst (snd (snd (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u =\n    fst (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                    (A $ from_nat k $ from_nat k))))", "by (metis fst_conv pquvd snd_conv)"], ["proof (state)\nthis:\n  u =\n  fst (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                  (A $ from_nat k $ from_nat k))))\n\ngoal (1 subgoal):\n 1. invertible Q", "have q: \"q = (fst (snd (bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q =\n    fst (snd (bezout (A $ from_nat i $ from_nat i)\n               (A $ from_nat k $ from_nat k)))", "by (metis fst_conv pquvd snd_conv)"], ["proof (state)\nthis:\n  q =\n  fst (snd (bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat k $ from_nat k)))\n\ngoal (1 subgoal):\n 1. invertible Q", "have \"invertible ?step3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (mult_column\n       (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n         (from_nat k) (from_nat i) u)\n       (from_nat k) (- (1::'a)))", "unfolding column_add_mat_1[of _ _ _ ?step2, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (mult_column\n       (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n         (from_nat k) (from_nat i) u)\n       (from_nat k) (- (1::'a)))", "unfolding mult_column_mat_1[of  ?step2, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u **\n      mult_column (mat (1::'a)) (from_nat k) (- (1::'a)))", "proof (rule invertible_mult)"], ["proof (state)\ngoal (2 subgoals):\n 1. invertible\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n 2. invertible (mult_column (mat (1::'a)) (from_nat k) (- (1::'a)))", "show \"invertible (mult_column (mat 1) (from_nat k::'cols) (- 1::'a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (mult_column (mat (1::'a)) (from_nat k) (- (1::'a)))", "by (rule invertible_mult_column[of _ \"-1\"], auto)"], ["proof (state)\nthis:\n  invertible (mult_column (mat (1::'a)) (from_nat k) (- (1::'a)))\n\ngoal (1 subgoal):\n 1. invertible\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)", "show \"invertible ?step2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)", "by (metis column_add_mat_1 i i_not_k invertible_column_add invertible_mult k \n          min_less_iff_conj ncols_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  invertible\n   (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible\n   (mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)))\n\ngoal (1 subgoal):\n 1. invertible Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  invertible\n   (mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)))\n\ngoal (1 subgoal):\n 1. invertible Q", "using PQ pquvd u q"], ["proof (prove)\nusing this:\n  invertible\n   (mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)))\n  (P, Q) = diagonal_step_PQ A i k bezout\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  u =\n  fst (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                  (A $ from_nat k $ from_nat k))))\n  q =\n  fst (snd (bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat k $ from_nat k)))\n\ngoal (1 subgoal):\n 1. invertible Q", "unfolding diagonal_step_PQ_def"], ["proof (prove)\nusing this:\n  invertible\n   (mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)))\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  u =\n  fst (snd (snd (bezout (A $ from_nat i $ from_nat i)\n                  (A $ from_nat k $ from_nat k))))\n  q =\n  fst (snd (bezout (A $ from_nat i $ from_nat i)\n             (A $ from_nat k $ from_nat k)))\n\ngoal (1 subgoal):\n 1. invertible Q", "by (auto simp add: Let_def split_beta)"], ["proof (state)\nthis:\n  invertible Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_q_1[simp]: \"mat q $ a $ a = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat q $ a $ a = q", "unfolding mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i j. if i = j then q else (0::'a)) $ a $ a = q", "by auto"], ["", "lemma mat_q_0[simp]:\n  assumes ab: \"a \\<noteq> b\" \n  shows \"mat q $ a $ b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat q $ a $ b = (0::'b)", "using ab"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. mat q $ a $ b = (0::'b)", "unfolding mat_def"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (\\<chi>i j. if i = j then q else (0::'b)) $ a $ b = (0::'b)", "by auto"], ["", "text\\<open>This is an alternative definition for the matrix P in each step, where entries are \n  given explicitly instead of being computed as a composition of elementary operations. \\<close>"], ["", "lemma diagonal_step_PQ_P_alt:\nfixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\nshows \"\n  P = (\\<chi> a b. \n  if a = from_nat i \\<and> b = from_nat i then p else \n  if a = from_nat i \\<and> b = from_nat k then 1 else\n  if a = from_nat k \\<and> b = from_nat i then -v * p + 1 else\n  if a = from_nat k \\<and> b = from_nat k then -v else\n  if a = b then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then p\n        else if a = from_nat i \\<and> b = from_nat k then 1::'a\n             else if a = from_nat k \\<and> b = from_nat i\n                  then - v * p + (1::'a)\n                  else if a = from_nat k \\<and> b = from_nat k then - v\n                       else if a = b then 1::'a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then p\n        else if a = from_nat i \\<and> b = from_nat k then 1::'a\n             else if a = from_nat k \\<and> b = from_nat i\n                  then - v * p + (1::'a)\n                  else if a = from_nat k \\<and> b = from_nat k then - v\n                       else if a = b then 1::'a else (0::'a))", "have ik1: \"from_nat i \\<noteq> (from_nat k::'rows)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "using from_nat_neq_rows i ik k"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < nrows ?A; ?k < nrows ?A; ?i \\<noteq> ?k\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i \\<noteq> from_nat ?k\n  i < min (nrows A) (ncols A)\n  i \\<noteq> k\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "by auto"], ["proof (state)\nthis:\n  from_nat i \\<noteq> from_nat k\n\ngoal (1 subgoal):\n 1. P =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then p\n        else if a = from_nat i \\<and> b = from_nat k then 1::'a\n             else if a = from_nat k \\<and> b = from_nat i\n                  then - v * p + (1::'a)\n                  else if a = from_nat k \\<and> b = from_nat k then - v\n                       else if a = b then 1::'a else (0::'a))", "have \"P $ a $ b =\n              (if a = from_nat i \\<and> b = from_nat i then p\n               else if a = from_nat i \\<and> b = from_nat k then 1\n                    else if a = from_nat k \\<and> b = from_nat i then - v * p + 1\n                         else if a = from_nat k \\<and> b = from_nat k then - v else if a = b then 1 else 0)\" \n    for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then p\n     else if a = from_nat i \\<and> b = from_nat k then 1::'a\n          else if a = from_nat k \\<and> b = from_nat i\n               then - v * p + (1::'a)\n               else if a = from_nat k \\<and> b = from_nat k then - v\n                    else if a = b then 1::'a else (0::'a))", "using PQ ik1  pquvd"], ["proof (prove)\nusing this:\n  (P, Q) = diagonal_step_PQ A i k bezout\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then p\n     else if a = from_nat i \\<and> b = from_nat k then 1::'a\n          else if a = from_nat k \\<and> b = from_nat i\n               then - v * p + (1::'a)\n               else if a = from_nat k \\<and> b = from_nat k then - v\n                    else if a = b then 1::'a else (0::'a))", "unfolding diagonal_step_PQ_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then p\n     else if a = from_nat i \\<and> b = from_nat k then 1::'a\n          else if a = from_nat k \\<and> b = from_nat i\n               then - v * p + (1::'a)\n               else if a = from_nat k \\<and> b = from_nat k then - v\n                    else if a = b then 1::'a else (0::'a))", "unfolding row_add_def interchange_rows_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = \\<chi>i j.\n              if i = k_row\n              then (\\<chi>i j.\n                       if i = i_row\n                       then (\\<chi>i j.\n                                if i = k_row\n                                then mat (1::'a) $ k_row $ j +\n                                     p * mat (1::'a) $ i_row $ j\n                                else mat (1::'a) $ i $ j) $\n                            k_row $\n                            j\n                       else if i = k_row\n                            then (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i_row $\n                                 j\n                            else (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i $\n                                 j) $\n                   k_row $\n                   j +\n                   - v *\n                   (\\<chi>i j.\n                       if i = i_row\n                       then (\\<chi>i j.\n                                if i = k_row\n                                then mat (1::'a) $ k_row $ j +\n                                     p * mat (1::'a) $ i_row $ j\n                                else mat (1::'a) $ i $ j) $\n                            k_row $\n                            j\n                       else if i = k_row\n                            then (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i_row $\n                                 j\n                            else (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i $\n                                 j) $\n                   i_row $\n                   j\n              else (\\<chi>i j.\n                       if i = i_row\n                       then (\\<chi>i j.\n                                if i = k_row\n                                then mat (1::'a) $ k_row $ j +\n                                     p * mat (1::'a) $ i_row $ j\n                                else mat (1::'a) $ i $ j) $\n                            k_row $\n                            j\n                       else if i = k_row\n                            then (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i_row $\n                                 j\n                            else (\\<chi>i j.\n                                     if i = k_row\n                                     then mat (1::'a) $ k_row $ j +\n    p * mat (1::'a) $ i_row $ j\n                                     else mat (1::'a) $ i $ j) $\n                                 i $\n                                 j) $\n                   i $\n                   j\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then p\n     else if a = from_nat i \\<and> b = from_nat k then 1::'a\n          else if a = from_nat k \\<and> b = from_nat i\n               then - v * p + (1::'a)\n               else if a = from_nat k \\<and> b = from_nat k then - v\n                    else if a = b then 1::'a else (0::'a))", "by (auto simp add: Let_def split_beta)\n         (metis (mono_tags, hide_lams) fst_conv snd_conv)+"], ["proof (state)\nthis:\n  P $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then p\n   else if ?a = from_nat i \\<and> ?b = from_nat k then 1::'a\n        else if ?a = from_nat k \\<and> ?b = from_nat i\n             then - v * p + (1::'a)\n             else if ?a = from_nat k \\<and> ?b = from_nat k then - v\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. P =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then p\n        else if a = from_nat i \\<and> b = from_nat k then 1::'a\n             else if a = from_nat k \\<and> b = from_nat i\n                  then - v * p + (1::'a)\n                  else if a = from_nat k \\<and> b = from_nat k then - v\n                       else if a = b then 1::'a else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then p\n   else if ?a = from_nat i \\<and> ?b = from_nat k then 1::'a\n        else if ?a = from_nat k \\<and> ?b = from_nat i\n             then - v * p + (1::'a)\n             else if ?a = from_nat k \\<and> ?b = from_nat k then - v\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. P =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then p\n        else if a = from_nat i \\<and> b = from_nat k then 1::'a\n             else if a = from_nat k \\<and> b = from_nat i\n                  then - v * p + (1::'a)\n                  else if a = from_nat k \\<and> b = from_nat k then - v\n                       else if a = b then 1::'a else (0::'a))", "unfolding vec_eq_iff"], ["proof (prove)\nusing this:\n  P $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then p\n   else if ?a = from_nat i \\<and> ?b = from_nat k then 1::'a\n        else if ?a = from_nat k \\<and> ?b = from_nat i\n             then - v * p + (1::'a)\n             else if ?a = from_nat k \\<and> ?b = from_nat k then - v\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>ia ib.\n       P $ ia $ ib =\n       (\\<chi>a b.\n           if a = from_nat i \\<and> b = from_nat i then p\n           else if a = from_nat i \\<and> b = from_nat k then 1::'a\n                else if a = from_nat k \\<and> b = from_nat i\n                     then - v * p + (1::'a)\n                     else if a = from_nat k \\<and> b = from_nat k then - v\n                          else if a = b then 1::'a else (0::'a)) $\n       ia $\n       ib", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  P $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then p\n   else if ?a = from_nat i \\<and> ?b = from_nat k then 1::'a\n        else if ?a = from_nat k \\<and> ?b = from_nat i\n             then - v * p + (1::'a)\n             else if ?a = from_nat k \\<and> ?b = from_nat k then - v\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>ia ib.\n       P $ ia $ ib =\n       (if ia = from_nat i \\<and> ib = from_nat i then p\n        else if ia = from_nat i \\<and> ib = from_nat k then 1::'a\n             else if ia = from_nat k \\<and> ib = from_nat i\n                  then - v * p + (1::'a)\n                  else if ia = from_nat k \\<and> ib = from_nat k then - v\n                       else if ia = ib then 1::'a else (0::'a))", "by auto"], ["proof (state)\nthis:\n  P =\n  (\\<chi>a b.\n      if a = from_nat i \\<and> b = from_nat i then p\n      else if a = from_nat i \\<and> b = from_nat k then 1::'a\n           else if a = from_nat k \\<and> b = from_nat i\n                then - v * p + (1::'a)\n                else if a = from_nat k \\<and> b = from_nat k then - v\n                     else if a = b then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>This is an alternative definition for the matrix Q in each step, where entries are\n  given explicitly instead of being computed as a composition of elementary operations.\\<close>"], ["", "lemma diagonal_step_PQ_Q_alt:\nfixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n  and pquvd: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\nshows \"\n  Q = (\\<chi> a b. \n  if a = from_nat i \\<and> b = from_nat i then 1 else \n  if a = from_nat i \\<and> b = from_nat k then -u else\n  if a = from_nat k \\<and> b = from_nat i then q else\n  if a = from_nat k \\<and> b = from_nat k then -q*u-1 else\n  if a = b then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then 1::'a\n        else if a = from_nat i \\<and> b = from_nat k then - u\n             else if a = from_nat k \\<and> b = from_nat i then q\n                  else if a = from_nat k \\<and> b = from_nat k\n                       then - q * u - (1::'a)\n                       else if a = b then 1::'a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then 1::'a\n        else if a = from_nat i \\<and> b = from_nat k then - u\n             else if a = from_nat k \\<and> b = from_nat i then q\n                  else if a = from_nat k \\<and> b = from_nat k\n                       then - q * u - (1::'a)\n                       else if a = b then 1::'a else (0::'a))", "have ik1: \"from_nat i \\<noteq> (from_nat k::'cols)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "using from_nat_neq_cols i ik k"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < ncols ?A; ?k < ncols ?A; ?i \\<noteq> ?k\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i \\<noteq> from_nat ?k\n  i < min (nrows A) (ncols A)\n  i \\<noteq> k\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. from_nat i \\<noteq> from_nat k", "by auto"], ["proof (state)\nthis:\n  from_nat i \\<noteq> from_nat k\n\ngoal (1 subgoal):\n 1. Q =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then 1::'a\n        else if a = from_nat i \\<and> b = from_nat k then - u\n             else if a = from_nat k \\<and> b = from_nat i then q\n                  else if a = from_nat k \\<and> b = from_nat k\n                       then - q * u - (1::'a)\n                       else if a = b then 1::'a else (0::'a))", "have \"Q $ a $ b =\n  (if a = from_nat i \\<and> b = from_nat i then 1 else \n  if a = from_nat i \\<and> b = from_nat k then -u else\n  if a = from_nat k \\<and> b = from_nat i then q else\n  if a = from_nat k \\<and> b = from_nat k then -q*u-1 else\n  if a = b then 1 else 0)\"  for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then 1::'a\n     else if a = from_nat i \\<and> b = from_nat k then - u\n          else if a = from_nat k \\<and> b = from_nat i then q\n               else if a = from_nat k \\<and> b = from_nat k\n                    then - q * u - (1::'a)\n                    else if a = b then 1::'a else (0::'a))", "using PQ ik1 pquvd"], ["proof (prove)\nusing this:\n  (P, Q) = diagonal_step_PQ A i k bezout\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. Q $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then 1::'a\n     else if a = from_nat i \\<and> b = from_nat k then - u\n          else if a = from_nat k \\<and> b = from_nat i then q\n               else if a = from_nat k \\<and> b = from_nat k\n                    then - q * u - (1::'a)\n                    else if a = b then 1::'a else (0::'a))", "unfolding diagonal_step_PQ_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. Q $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then 1::'a\n     else if a = from_nat i \\<and> b = from_nat k then - u\n          else if a = from_nat k \\<and> b = from_nat i then q\n               else if a = from_nat k \\<and> b = from_nat k\n                    then - q * u - (1::'a)\n                    else if a = b then 1::'a else (0::'a))", "unfolding column_add_def mult_column_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (\\<chi>i j.\n              if j = k_col\n              then (\\<chi>i j.\n                       if j = k_col\n                       then (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            k_col +\n                            (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            i_col *\n                            u\n                       else (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            j) $\n                   i $\n                   j *\n                   - (1::'a)\n              else (\\<chi>i j.\n                       if j = k_col\n                       then (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            k_col +\n                            (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            i_col *\n                            u\n                       else (\\<chi>i j.\n                                if j = i_col\n                                then mat (1::'a) $ i $ i_col +\n                                     mat (1::'a) $ i $ k_col * q\n                                else mat (1::'a) $ i $ j) $\n                            i $\n                            j) $\n                   i $\n                   j)\n       (Pair P))\n  from_nat i \\<noteq> from_nat k\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. Q $ a $ b =\n    (if a = from_nat i \\<and> b = from_nat i then 1::'a\n     else if a = from_nat i \\<and> b = from_nat k then - u\n          else if a = from_nat k \\<and> b = from_nat i then q\n               else if a = from_nat k \\<and> b = from_nat k\n                    then - q * u - (1::'a)\n                    else if a = b then 1::'a else (0::'a))", "by (auto simp add: Let_def split_beta)\n     (metis (mono_tags, hide_lams) fst_conv snd_conv)+"], ["proof (state)\nthis:\n  Q $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then 1::'a\n   else if ?a = from_nat i \\<and> ?b = from_nat k then - u\n        else if ?a = from_nat k \\<and> ?b = from_nat i then q\n             else if ?a = from_nat k \\<and> ?b = from_nat k\n                  then - q * u - (1::'a)\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. Q =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then 1::'a\n        else if a = from_nat i \\<and> b = from_nat k then - u\n             else if a = from_nat k \\<and> b = from_nat i then q\n                  else if a = from_nat k \\<and> b = from_nat k\n                       then - q * u - (1::'a)\n                       else if a = b then 1::'a else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then 1::'a\n   else if ?a = from_nat i \\<and> ?b = from_nat k then - u\n        else if ?a = from_nat k \\<and> ?b = from_nat i then q\n             else if ?a = from_nat k \\<and> ?b = from_nat k\n                  then - q * u - (1::'a)\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. Q =\n    (\\<chi>a b.\n        if a = from_nat i \\<and> b = from_nat i then 1::'a\n        else if a = from_nat i \\<and> b = from_nat k then - u\n             else if a = from_nat k \\<and> b = from_nat i then q\n                  else if a = from_nat k \\<and> b = from_nat k\n                       then - q * u - (1::'a)\n                       else if a = b then 1::'a else (0::'a))", "unfolding vec_eq_iff"], ["proof (prove)\nusing this:\n  Q $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then 1::'a\n   else if ?a = from_nat i \\<and> ?b = from_nat k then - u\n        else if ?a = from_nat k \\<and> ?b = from_nat i then q\n             else if ?a = from_nat k \\<and> ?b = from_nat k\n                  then - q * u - (1::'a)\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>ia ib.\n       Q $ ia $ ib =\n       (\\<chi>a b.\n           if a = from_nat i \\<and> b = from_nat i then 1::'a\n           else if a = from_nat i \\<and> b = from_nat k then - u\n                else if a = from_nat k \\<and> b = from_nat i then q\n                     else if a = from_nat k \\<and> b = from_nat k\n                          then - q * u - (1::'a)\n                          else if a = b then 1::'a else (0::'a)) $\n       ia $\n       ib", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  Q $ ?a $ ?b =\n  (if ?a = from_nat i \\<and> ?b = from_nat i then 1::'a\n   else if ?a = from_nat i \\<and> ?b = from_nat k then - u\n        else if ?a = from_nat k \\<and> ?b = from_nat i then q\n             else if ?a = from_nat k \\<and> ?b = from_nat k\n                  then - q * u - (1::'a)\n                  else if ?a = ?b then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>ia ib.\n       Q $ ia $ ib =\n       (if ia = from_nat i \\<and> ib = from_nat i then 1::'a\n        else if ia = from_nat i \\<and> ib = from_nat k then - u\n             else if ia = from_nat k \\<and> ib = from_nat i then q\n                  else if ia = from_nat k \\<and> ib = from_nat k\n                       then - q * u - (1::'a)\n                       else if ia = ib then 1::'a else (0::'a))", "by auto"], ["proof (state)\nthis:\n  Q =\n  (\\<chi>a b.\n      if a = from_nat i \\<and> b = from_nat i then 1::'a\n      else if a = from_nat i \\<and> b = from_nat k then - u\n           else if a = from_nat k \\<and> b = from_nat i then q\n                else if a = from_nat k \\<and> b = from_nat k\n                     then - q * u - (1::'a)\n                     else if a = b then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>P**A can be rewriten as elementary operations over A.\\<close>"], ["", "lemma diagonal_step_PQ_PA:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\nshows \"P**A = row_add (interchange_rows \n  (row_add A (from_nat k) (from_nat i) p) (from_nat i) (from_nat k)) (from_nat k) (from_nat i) (- v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "let ?i_row = \"from_nat i::'rows\" and ?k_row = \"from_nat k::'rows\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "let ?P1 = \"row_add (mat 1) ?k_row ?i_row p\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "let ?P2' = \"interchange_rows ?P1 ?i_row ?k_row\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "let ?P2 = \"interchange_rows (mat 1) (from_nat i) (from_nat k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "let ?P3 = \"row_add (mat 1) (from_nat k) (from_nat i) (- v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "have \"P = row_add ?P2' ?k_row ?i_row (- v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "using PQ b"], ["proof (prove)\nusing this:\n  (P, Q) = diagonal_step_PQ A i k bezout\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P =\n    row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "unfolding diagonal_step_PQ_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P =\n    row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "by (auto simp add: Let_def split_beta, metis fstI sndI)"], ["proof (state)\nthis:\n  P =\n  row_add\n   (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k))\n   (from_nat k) (from_nat i) (- v)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "also"], ["proof (state)\nthis:\n  P =\n  row_add\n   (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k))\n   (from_nat k) (from_nat i) (- v)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "have \"... = ?P3 ** ?P2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_add\n     (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n       (from_nat i) (from_nat k))\n     (from_nat k) (from_nat i) (- v) =\n    row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k)", "unfolding row_add_mat_1[of _ _ _ ?P2', symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k) =\n    row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k)", "by auto"], ["proof (state)\nthis:\n  row_add\n   (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k))\n   (from_nat k) (from_nat i) (- v) =\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n   (from_nat i) (from_nat k)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "also"], ["proof (state)\nthis:\n  row_add\n   (interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k))\n   (from_nat k) (from_nat i) (- v) =\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n   (from_nat i) (from_nat k)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "have \"... = ?P3 ** (?P2 ** ?P1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n     (from_nat i) (from_nat k) =\n    row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n     row_add (mat (1::'a)) (from_nat k) (from_nat i) p)", "unfolding interchange_rows_mat_1[of _ _ ?P1, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n     row_add (mat (1::'a)) (from_nat k) (from_nat i) p) =\n    row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n     row_add (mat (1::'a)) (from_nat k) (from_nat i) p)", "by auto"], ["proof (state)\nthis:\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n   (from_nat i) (from_nat k) =\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n   row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "also"], ["proof (state)\nthis:\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  interchange_rows (row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n   (from_nat i) (from_nat k) =\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n   row_add (mat (1::'a)) (from_nat k) (from_nat i) p)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "have \"... ** A = row_add (interchange_rows \n  (row_add A (from_nat k) (from_nat i) p) (from_nat i) (from_nat k)) (from_nat k) (from_nat i) (- v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n    (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n     row_add (mat (1::'a)) (from_nat k) (from_nat i) p) **\n    A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "by (metis interchange_rows_mat_1 matrix_mul_assoc row_add_mat_1)"], ["proof (state)\nthis:\n  row_add (mat (1::'a)) (from_nat k) (from_nat i) (- v) **\n  (interchange_rows (mat (1::'a)) (from_nat i) (from_nat k) **\n   row_add (mat (1::'a)) (from_nat k) (from_nat i) p) **\n  A =\n  row_add\n   (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n     (from_nat k))\n   (from_nat k) (from_nat i) (- v)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "finally"], ["proof (chain)\npicking this:\n  P ** A =\n  row_add\n   (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n     (from_nat k))\n   (from_nat k) (from_nat i) (- v)", "show ?thesis"], ["proof (prove)\nusing this:\n  P ** A =\n  row_add\n   (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n     (from_nat k))\n   (from_nat k) (from_nat i) (- v)\n\ngoal (1 subgoal):\n 1. P ** A =\n    row_add\n     (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n       (from_nat k))\n     (from_nat k) (from_nat i) (- v)", "."], ["proof (state)\nthis:\n  P ** A =\n  row_add\n   (interchange_rows (row_add A (from_nat k) (from_nat i) p) (from_nat i)\n     (from_nat k))\n   (from_nat k) (from_nat i) (- v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_step_PQ_PAQ':\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  shows \"P**A**Q = (mult_column (column_add (column_add (P**A) (from_nat i) (from_nat k) q) \n                   (from_nat k) (from_nat i) u) (from_nat k) (- 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "let ?i_col = \"from_nat i::'cols\" and ?k_col = \"from_nat k::'cols\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "let ?Q1=\"(column_add (mat 1) ?i_col ?k_col q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "let ?Q2' = \"(column_add ?Q1 ?k_col ?i_col u)\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "let ?Q2 = \"column_add (mat 1) (from_nat k) (from_nat i) u\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "let ?Q3 = \"mult_column (mat 1) (from_nat k) (- 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "have \"Q = mult_column ?Q2' ?k_col (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q =\n    mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "using PQ b"], ["proof (prove)\nusing this:\n  (P, Q) = diagonal_step_PQ A i k bezout\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. Q =\n    mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "unfolding diagonal_step_PQ_def"], ["proof (prove)\nusing this:\n  (P, Q) =\n  (let i_row = from_nat i; k_row = from_nat k; i_col = from_nat i;\n       k_col = from_nat k;\n       (p, q, u, v, d) =\n         bezout (A $ i_row $ from_nat i) (A $ k_row $ from_nat k);\n       P = row_add\n            (interchange_rows (row_add (mat (1::'a)) k_row i_row p) i_row\n              k_row)\n            k_row i_row (- v)\n   in Let (mult_column\n            (column_add (column_add (mat (1::'a)) i_col k_col q) k_col i_col\n              u)\n            k_col (- (1::'a)))\n       (Pair P))\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. Q =\n    mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "by (auto simp add: Let_def split_beta, metis fstI sndI)"], ["proof (state)\nthis:\n  Q =\n  mult_column\n   (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "also"], ["proof (state)\nthis:\n  Q =\n  mult_column\n   (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "have \"... = ?Q2' ** ?Q3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_column\n     (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) =\n    column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a))", "unfolding mult_column_mat_1[of ?Q2', symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a)) =\n    column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a))", "by auto"], ["proof (state)\nthis:\n  mult_column\n   (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a)) =\n  column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n   (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "also"], ["proof (state)\nthis:\n  mult_column\n   (column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a)) =\n  column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n   (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "have \"... = (?Q1**?Q2)**?Q3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a)) =\n    column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n    column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a))", "unfolding column_add_mat_1[of ?Q1, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n    column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a)) =\n    column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n    column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n    mult_column (mat (1::'a)) (from_nat k) (- (1::'a))", "by auto"], ["proof (state)\nthis:\n  column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n   (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a)) =\n  column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n  column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "also"], ["proof (state)\nthis:\n  column_add (column_add (mat (1::'a)) (from_nat i) (from_nat k) q)\n   (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a)) =\n  column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n  column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n  mult_column (mat (1::'a)) (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "have \" (P**A) **  ((?Q1**?Q2)**?Q3) = \n    (mult_column (column_add (column_add (P**A) ?i_col ?k_col q) ?k_col ?i_col u) ?k_col (- 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** A **\n    (column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n     column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n     mult_column (mat (1::'a)) (from_nat k) (- (1::'a))) =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "by (metis (no_types, lifting) column_add_mat_1 matrix_mul_assoc mult_column_mat_1)"], ["proof (state)\nthis:\n  P ** A **\n  (column_add (mat (1::'a)) (from_nat i) (from_nat k) q **\n   column_add (mat (1::'a)) (from_nat k) (from_nat i) u **\n   mult_column (mat (1::'a)) (from_nat k) (- (1::'a))) =\n  mult_column\n   (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "finally"], ["proof (chain)\npicking this:\n  P ** A ** Q =\n  mult_column\n   (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  P ** A ** Q =\n  mult_column\n   (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "."], ["proof (state)\nthis:\n  P ** A ** Q =\n  mult_column\n   (column_add (column_add (P ** A) (from_nat i) (from_nat k) q)\n     (from_nat k) (from_nat i) u)\n   (from_nat k) (- (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary diagonal_step_PQ_PAQ:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  shows \"P**A**Q = (mult_column (column_add (column_add (row_add (interchange_rows \n                    (row_add A (from_nat k) (from_nat i) p) (from_nat i) \n                    (from_nat k)) (from_nat k) (from_nat i) (- v)) (from_nat i) (from_nat k) q) \n                   (from_nat k) (from_nat i) u) (from_nat k) (- 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "using diagonal_step_PQ_PA diagonal_step_PQ_PAQ' assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;\n   (?p, ?q, ?u, ?v, ?d) =\n   ?bezout (?A $ from_nat ?i $ from_nat ?i)\n    (?A $ from_nat ?k $ from_nat ?k)\\<rbrakk>\n  \\<Longrightarrow> ?P ** ?A =\n                    row_add\n                     (interchange_rows\n                       (row_add ?A (from_nat ?k) (from_nat ?i) ?p)\n                       (from_nat ?i) (from_nat ?k))\n                     (from_nat ?k) (from_nat ?i) (- ?v)\n  \\<lbrakk>(?P, ?Q) = diagonal_step_PQ ?A ?i ?k ?bezout;\n   (?p, ?q, ?u, ?v, ?d) =\n   ?bezout (?A $ from_nat ?i $ from_nat ?i)\n    (?A $ from_nat ?k $ from_nat ?k)\\<rbrakk>\n  \\<Longrightarrow> ?P ** ?A ** ?Q =\n                    mult_column\n                     (column_add\n                       (column_add (?P ** ?A) (from_nat ?i) (from_nat ?k)\n                         ?q)\n                       (from_nat ?k) (from_nat ?i) ?u)\n                     (from_nat ?k) (- (1::?'a))\n  (P, Q) = diagonal_step_PQ A i k bezout\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n\ngoal (1 subgoal):\n 1. P ** A ** Q =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a))", "by metis"], ["", "lemma isDiagonal_imp_0: \n  assumes \"isDiagonal A\"\n  and \"from_nat a \\<noteq> from_nat b\"\n  and \"a < min (nrows A) (ncols A)\"\n  and \"b < min (nrows A) (ncols A)\"\n  shows \"A $ from_nat a $ from_nat b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat a $ from_nat b = (0::'a)", "by (metis assms isDiagonal min.strict_boundedE ncols_def nrows_def to_nat_from_nat_id)"], ["", "lemma diagonal_step_PQ:\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\"\n  assumes PQ: \"(P,Q) = diagonal_step_PQ A i k bezout\"\n    and b: \"(p,q,u,v,d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\"\n  and i: \"i<min (nrows A) (ncols A)\" and k: \"k<min (nrows A) (ncols A)\" and ik: \"i \\<noteq> k\"\n  and ib: \"is_bezout_ext bezout\" and diag: \"isDiagonal A\"\n  shows \"diagonal_step A i k d v = P**A**Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "let ?i_row = \"from_nat i::'rows\" \n    and ?k_row = \"from_nat k::'rows\" and ?i_col = \"from_nat i::'cols\" and ?k_col = \"from_nat k::'cols\""], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "let ?P1 = \"(row_add (mat 1) ?k_row ?i_row p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "let ?Aii = \"A $ ?i_row $ ?i_col\""], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "let ?Akk = \"A $ ?k_row $ ?k_col\""], ["proof (state)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have k1: \"k<ncols A\" and k2: \"k<nrows A\" and i1: \"i<nrows A\" and i2: \"i<ncols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k < ncols A &&& k < nrows A) &&& i < nrows A &&& i < ncols A", "using i k"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. (k < ncols A &&& k < nrows A) &&& i < nrows A &&& i < ncols A", "by auto"], ["proof (state)\nthis:\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have Aik0: \"A $ ?i_row $ ?k_col = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat i $ from_nat k = (0::'a)", "by (metis diag i ik isDiagonal k min.strict_boundedE ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat k = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have Aki0: \"A $ ?k_row $ ?i_col = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat k $ from_nat i = (0::'a)", "by (metis diag i ik isDiagonal k min.strict_boundedE ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  A $ from_nat k $ from_nat i = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have du: \"d * u = - A $ ?k_row $ ?k_col\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * u = - A $ from_nat k $ from_nat k", "using b ib"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. d * u = - A $ from_nat k $ from_nat k", "unfolding is_bezout_ext_def"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. d * u = - A $ from_nat k $ from_nat k", "by (auto simp add: split_beta) (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  d * u = - A $ from_nat k $ from_nat k\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have dv: \"d * v = A $ ?i_row $ ?i_col\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * v = A $ from_nat i $ from_nat i", "using b ib"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. d * v = A $ from_nat i $ from_nat i", "unfolding is_bezout_ext_def"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. d * v = A $ from_nat i $ from_nat i", "by (auto simp add: split_beta) (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  d * v = A $ from_nat i $ from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have d: \"d = p * ?Aii + ?Akk * q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q", "using b ib"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q", "unfolding is_bezout_ext_def"], ["proof (prove)\nusing this:\n  (p, q, u, v, d) =\n  bezout (A $ from_nat i $ from_nat i) (A $ from_nat k $ from_nat k)\n  \\<forall>a b.\n     let (p, q, u, v, gcd_a_b) = bezout a b\n     in p * a + q * b = gcd_a_b \\<and>\n        gcd_a_b dvd a \\<and>\n        gcd_a_b dvd b \\<and>\n        (\\<forall>d'.\n            d' dvd a \\<and> d' dvd b \\<longrightarrow>\n            d' dvd gcd_a_b) \\<and>\n        gcd_a_b * u = - b \\<and> gcd_a_b * v = a\n\ngoal (1 subgoal):\n 1. d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q", "by (auto simp add: split_beta) (metis fst_conv mult.commute snd_conv)"], ["proof (state)\nthis:\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have \"(?Aii - v * (p * ?Aii) - v * ?Akk * q) * u = (?Aii - v * ((p * ?Aii) + ?Akk * q)) * u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n     v * A $ from_nat k $ from_nat k * q) *\n    u =\n    (A $ from_nat i $ from_nat i -\n     v *\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n    u", "by (simp add: diff_diff_add distrib_left mult.assoc)"], ["proof (state)\nthis:\n  (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n   v * A $ from_nat k $ from_nat k * q) *\n  u =\n  (A $ from_nat i $ from_nat i -\n   v *\n   (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n  u\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "also"], ["proof (state)\nthis:\n  (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n   v * A $ from_nat k $ from_nat k * q) *\n  u =\n  (A $ from_nat i $ from_nat i -\n   v *\n   (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n  u\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have \"... = (?Aii*u - d* v *u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A $ from_nat i $ from_nat i -\n     v *\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n    u =\n    A $ from_nat i $ from_nat i * u - d * v * u", "by (simp add: mult.commute right_diff_distrib d)"], ["proof (state)\nthis:\n  (A $ from_nat i $ from_nat i -\n   v *\n   (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n  u =\n  A $ from_nat i $ from_nat i * u - d * v * u\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "also"], ["proof (state)\nthis:\n  (A $ from_nat i $ from_nat i -\n   v *\n   (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q)) *\n  u =\n  A $ from_nat i $ from_nat i * u - d * v * u\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat i $ from_nat i * u - d * v * u = (0::'a)", "by (simp add: dv)"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i * u - d * v * u = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "finally"], ["proof (chain)\npicking this:\n  (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n   v * A $ from_nat k $ from_nat k * q) *\n  u =\n  (0::'a)", "have rw: \"(?Aii - v * (p * ?Aii) - v * ?Akk * q) * u = 0\""], ["proof (prove)\nusing this:\n  (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n   v * A $ from_nat k $ from_nat k * q) *\n  u =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n     v * A $ from_nat k $ from_nat k * q) *\n    u =\n    (0::'a)", "."], ["proof (state)\nthis:\n  (A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n   v * A $ from_nat k $ from_nat k * q) *\n  u =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have a1: \"from_nat k \\<noteq> (from_nat i::'rows)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat k \\<noteq> from_nat i", "using from_nat_neq_rows i ik k"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < nrows ?A; ?k < nrows ?A; ?i \\<noteq> ?k\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i \\<noteq> from_nat ?k\n  i < min (nrows A) (ncols A)\n  i \\<noteq> k\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. from_nat k \\<noteq> from_nat i", "by auto"], ["proof (state)\nthis:\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have a2: \"from_nat k \\<noteq> (from_nat i::'cols)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_nat k \\<noteq> from_nat i", "using from_nat_neq_cols i ik k"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < ncols ?A; ?k < ncols ?A; ?i \\<noteq> ?k\\<rbrakk>\n  \\<Longrightarrow> from_nat ?i \\<noteq> from_nat ?k\n  i < min (nrows A) (ncols A)\n  i \\<noteq> k\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. from_nat k \\<noteq> from_nat i", "by auto"], ["proof (state)\nthis:\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have Aab0: \"A $ a $ from_nat b = 0\" if ab: \"a \\<noteq> from_nat b\" and b_ncols: \"b < ncols A\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ from_nat b = (0::'a)", "by (metis ab b_ncols diag from_nat_to_nat_id isDiagonal ncols_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "have Aab0': \"A $ from_nat a $ b = 0\" if ab: \"from_nat a \\<noteq> b\" and a_nrows: \"a < nrows A\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ from_nat a $ b = (0::'a)", "by (metis ab a_nrows diag from_nat_to_nat_id isDiagonal nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step A i k d v = P ** A ** Q", "proof (unfold diagonal_step_def vec_eq_iff, auto)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<lbrakk>from_nat k = from_nat i; from_nat k = from_nat i\\<rbrakk>\n    \\<Longrightarrow> d = (P ** A ** Q) $ from_nat i $ from_nat i\n 2. from_nat k \\<noteq> from_nat i \\<Longrightarrow>\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k\n 3. from_nat k \\<noteq> from_nat i \\<Longrightarrow>\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k\n 4. from_nat i \\<noteq> from_nat k \\<Longrightarrow>\n    d = (P ** A ** Q) $ from_nat i $ from_nat i\n 5. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 6. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 7. from_nat i \\<noteq> from_nat k \\<Longrightarrow>\n    d = (P ** A ** Q) $ from_nat i $ from_nat i\n 8. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 9. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"d = (P ** A ** Q) $ from_nat i $ from_nat i\"\n      and \"d = (P ** A ** Q) $ from_nat i $ from_nat i\"\n      and \"d = (P ** A ** Q) $ from_nat i $ from_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = (P ** A ** Q) $ from_nat i $ from_nat i &&&\n    d = (P ** A ** Q) $ from_nat i $ from_nat i &&&\n    d = (P ** A ** Q) $ from_nat i $ from_nat i", "unfolding diagonal_step_PQ_PAQ[OF PQ b]"], ["proof (prove)\ngoal (1 subgoal):\n 1. d =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    from_nat i $\n    from_nat i &&&\n    d =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    from_nat i $\n    from_nat i &&&\n    d =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    from_nat i $\n    from_nat i", "unfolding mult_column_def column_add_def interchange_rows_def row_add_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. d =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat i $\n    from_nat i &&&\n    d =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat i $\n    from_nat i &&&\n    d =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat i $\n    from_nat i", "unfolding vec_lambda_beta"], ["proof (prove)\ngoal (1 subgoal):\n 1. d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i)", "using a1 a2"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i)", "using Aik0 Aki0 d"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  A $ from_nat i $ from_nat k = (0::'a)\n  A $ from_nat k $ from_nat i = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n\ngoal (1 subgoal):\n 1. d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i) &&&\n    d =\n    (if from_nat i = from_nat k\n     then (if from_nat i = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i) +\n                      (if from_nat i = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k) *\n                      q\n                 else if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) *\n                u\n           else if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n          - (1::'a)\n     else if from_nat i = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i) +\n                     (if from_nat i = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k) *\n                     q\n                else if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) *\n               u\n          else if from_nat i = from_nat i\n               then (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i) +\n                    (if from_nat i = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k) *\n                    q\n               else if from_nat i = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i)\n                    else if from_nat i = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat i +\n                                   p * A $ from_nat i $ from_nat i\n                              else A $ from_nat k $ from_nat i\n                         else if from_nat i = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i\n                              else if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat i +\n  p * A $ from_nat i $ from_nat i\n                                   else A $ from_nat i $ from_nat i)", "by auto"], ["proof (state)\nthis:\n  d = (P ** A ** Q) $ from_nat i $ from_nat i\n  d = (P ** A ** Q) $ from_nat i $ from_nat i\n  d = (P ** A ** Q) $ from_nat i $ from_nat i\n\ngoal (6 subgoals):\n 1. from_nat k \\<noteq> from_nat i \\<Longrightarrow>\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k\n 2. from_nat k \\<noteq> from_nat i \\<Longrightarrow>\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k\n 3. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 4. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 5. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 6. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"v * A $ from_nat k $ from_nat k = (P ** A ** Q) $ from_nat k $ from_nat k\"\n      and \"v * A $ from_nat k $ from_nat k = (P ** A ** Q) $ from_nat k $ from_nat k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k &&&\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k", "using a1 a2"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k &&&\n    v * A $ from_nat k $ from_nat k =\n    (P ** A ** Q) $ from_nat k $ from_nat k", "unfolding diagonal_step_PQ_PAQ[OF PQ b] mult_column_def column_add_def"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat k $\n    from_nat k &&&\n    v * A $ from_nat k $ from_nat k =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat i +\n                               row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               from_nat k *\n                               q\n                          else row_add\n                                (interchange_rows\n                                  (row_add A (from_nat k) (from_nat i) p)\n                                  (from_nat i) (from_nat k))\n                                (from_nat k) (from_nat i) (- v) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat k $\n    from_nat k", "unfolding interchange_rows_def row_add_def"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat k $\n    from_nat k &&&\n    v * A $ from_nat k $ from_nat k =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    from_nat k $\n    from_nat k", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (if from_nat k = from_nat k\n     then (if from_nat k = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) *\n                u\n           else if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) *\n          - (1::'a)\n     else if from_nat k = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) *\n               u\n          else if from_nat k = from_nat i\n               then (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                    (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) *\n                    q\n               else if from_nat k = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k)\n                    else if from_nat k = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat k +\n                                   p * A $ from_nat i $ from_nat k\n                              else A $ from_nat k $ from_nat k\n                         else if from_nat k = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * A $ from_nat i $ from_nat k\n                                   else A $ from_nat i $ from_nat k\n                              else if from_nat k = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * A $ from_nat i $ from_nat k\n                                   else A $ from_nat k $ from_nat k) &&&\n    v * A $ from_nat k $ from_nat k =\n    (if from_nat k = from_nat k\n     then (if from_nat k = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) *\n                u\n           else if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) *\n          - (1::'a)\n     else if from_nat k = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) *\n               u\n          else if from_nat k = from_nat i\n               then (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat k $ from_nat i) +\n                    (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) *\n                    q\n               else if from_nat k = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat k $ from_nat k) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k)\n                    else if from_nat k = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat k +\n                                   p * A $ from_nat i $ from_nat k\n                              else A $ from_nat k $ from_nat k\n                         else if from_nat k = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * A $ from_nat i $ from_nat k\n                                   else A $ from_nat i $ from_nat k\n                              else if from_nat k = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * A $ from_nat i $ from_nat k\n                                   else A $ from_nat k $ from_nat k)", "unfolding Aik0 Aki0"], ["proof (prove)\nusing this:\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. v * A $ from_nat k $ from_nat k =\n    (if from_nat k = from_nat k\n     then (if from_nat k = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a)\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a)\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) *\n                u\n           else if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) *\n          - (1::'a)\n     else if from_nat k = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then (0::'a) +\n                                    p * A $ from_nat i $ from_nat i\n                               else (0::'a)\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else (0::'a)) *\n               u\n          else if from_nat k = from_nat i\n               then (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then (0::'a) +\n                                    p * A $ from_nat i $ from_nat i\n                               else (0::'a)\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else (0::'a)) +\n                    (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) *\n                    q\n               else if from_nat k = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a))\n                    else if from_nat k = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat k + p * (0::'a)\n                              else A $ from_nat k $ from_nat k\n                         else if from_nat k = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * (0::'a)\n                                   else (0::'a)\n                              else if from_nat k = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * (0::'a)\n                                   else A $ from_nat k $ from_nat k) &&&\n    v * A $ from_nat k $ from_nat k =\n    (if from_nat k = from_nat k\n     then (if from_nat k = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a)\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then (0::'a) +\n p * A $ from_nat i $ from_nat i\n                                  else (0::'a)\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then (0::'a) + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                      (if from_nat k = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a)\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * (0::'a)\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                       else if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) *\n                      q\n                 else if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) *\n                u\n           else if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) *\n          - (1::'a)\n     else if from_nat k = from_nat k\n          then (if from_nat k = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i else (0::'a)) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then (0::'a) +\np * A $ from_nat i $ from_nat i\n                                 else (0::'a)\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen (0::'a) + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                     (if from_nat k = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a)\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * (0::'a)\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a)\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * (0::'a) else (0::'a))\n                      else if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) *\n                     q\n                else if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then (0::'a) +\n                                    p * A $ from_nat i $ from_nat i\n                               else (0::'a)\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else (0::'a)) *\n               u\n          else if from_nat k = from_nat i\n               then (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else (0::'a)) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then (0::'a) +\n                                     p * A $ from_nat i $ from_nat i\n                                else (0::'a)\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then (0::'a) +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then (0::'a) +\n                                    p * A $ from_nat i $ from_nat i\n                               else (0::'a)\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if from_nat k = from_nat k\n                                    then (0::'a) +\n   p * A $ from_nat i $ from_nat i\n                                    else (0::'a)) +\n                    (if from_nat k = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * (0::'a)\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a)\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * (0::'a)\n                                     else (0::'a))\n                     else if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) *\n                    q\n               else if from_nat k = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else A $ from_nat k $ from_nat k) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * (0::'a)\n                               else A $ from_nat k $ from_nat k\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a)\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * (0::'a)\n                                    else (0::'a))\n                    else if from_nat k = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ from_nat k + p * (0::'a)\n                              else A $ from_nat k $ from_nat k\n                         else if from_nat k = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * (0::'a)\n                                   else (0::'a)\n                              else if from_nat k = from_nat k\n                                   then A $ from_nat k $ from_nat k +\n  p * (0::'a)\n                                   else A $ from_nat k $ from_nat k)", "by (auto simp add: rw)"], ["proof (state)\nthis:\n  v * A $ from_nat k $ from_nat k = (P ** A ** Q) $ from_nat k $ from_nat k\n  v * A $ from_nat k $ from_nat k = (P ** A ** Q) $ from_nat k $ from_nat k\n\ngoal (4 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 4. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "fix a::'rows and b::'cols"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 4. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "assume ak: \"a \\<noteq> from_nat k\" and ai: \"a \\<noteq> from_nat i\""], ["proof (state)\nthis:\n  a \\<noteq> from_nat k\n  a \\<noteq> from_nat i\n\ngoal (4 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 4. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"A $ a $ b = (P ** A ** Q) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "using ai ak a1 a2 Aab0 k1 i2"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  k < ncols A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "unfolding diagonal_step_PQ_PAQ[OF PQ b]"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  k < ncols A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    a $\n    b", "unfolding mult_column_def column_add_def interchange_rows_def row_add_def"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  k < ncols A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    a $\n    b", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  k < ncols A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (if b = from_nat k\n     then (if b = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) *\n                u\n           else if b = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat k $ b) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if a = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ a $ b) *\n          - (1::'a)\n     else if b = from_nat k\n          then (if from_nat k = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) *\n               u\n          else if b = from_nat i\n               then (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) +\n                    (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) *\n                    q\n               else if a = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat k $ b) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b)\n                    else if a = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ b +\n                                   p * A $ from_nat i $ b\n                              else A $ from_nat k $ b\n                         else if a = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ from_nat i $ b\n                              else if a = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ a $ b)", "by auto"], ["proof (state)\nthis:\n  A $ a $ b = (P ** A ** Q) $ a $ b\n\ngoal (3 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "fix a::'rows and b::'cols"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "assume ak: \"a \\<noteq> from_nat k\" and ai: \"b \\<noteq> from_nat i\""], ["proof (state)\nthis:\n  a \\<noteq> from_nat k\n  b \\<noteq> from_nat i\n\ngoal (3 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>ia \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 3. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"A $ a $ b = (P ** A ** Q) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "using ai ak a1 a2 Aab0 Aab0' d du k1 k2 i1 i2"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "unfolding diagonal_step_PQ_PAQ[OF PQ b]"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    a $\n    b", "unfolding mult_column_def column_add_def interchange_rows_def row_add_def"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    a $\n    b", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  a \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (if b = from_nat k\n     then (if b = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) *\n                u\n           else if b = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat k $ b) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if a = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ a $ b) *\n          - (1::'a)\n     else if b = from_nat k\n          then (if from_nat k = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) *\n               u\n          else if b = from_nat i\n               then (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) +\n                    (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) *\n                    q\n               else if a = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat k $ b) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b)\n                    else if a = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ b +\n                                   p * A $ from_nat i $ b\n                              else A $ from_nat k $ b\n                         else if a = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ from_nat i $ b\n                              else if a = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ a $ b)", "by auto"], ["proof (state)\nthis:\n  A $ a $ b = (P ** A ** Q) $ a $ b\n\ngoal (2 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "fix a::'rows and b::'cols"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "assume ak: \"b \\<noteq> from_nat k\" and ai: \"a \\<noteq> from_nat i\""], ["proof (state)\nthis:\n  b \\<noteq> from_nat k\n  a \\<noteq> from_nat i\n\ngoal (2 subgoals):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; ia \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa\n 2. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"A $ a $ b = (P ** A ** Q) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "using ai ak a1 a2 Aab0 Aab0' d du k1 k2 i1 i2"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "unfolding diagonal_step_PQ_PAQ[OF PQ b]"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    a $\n    b", "unfolding mult_column_def column_add_def interchange_rows_def row_add_def"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    a $\n    b", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  a \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (if b = from_nat k\n     then (if b = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) *\n                u\n           else if b = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat k $ b) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if a = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ a $ b) *\n          - (1::'a)\n     else if b = from_nat k\n          then (if from_nat k = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) *\n               u\n          else if b = from_nat i\n               then (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) +\n                    (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) *\n                    q\n               else if a = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat k $ b) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b)\n                    else if a = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ b +\n                                   p * A $ from_nat i $ b\n                              else A $ from_nat k $ b\n                         else if a = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ from_nat i $ b\n                              else if a = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ a $ b)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "(*TODO: cleanup this sledeghammer proof*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "assume \"d = p * ?Aii+ ?Akk* q\""], ["proof (state)\nthis:\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "then"], ["proof (chain)\npicking this:\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q", "have \"v * (p * ?Aii) + v * (?Akk* q) = d * v\""], ["proof (prove)\nusing this:\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n\ngoal (1 subgoal):\n 1. v * (p * A $ from_nat i $ from_nat i) +\n    v * (A $ from_nat k $ from_nat k * q) =\n    d * v", "by (simp add: ring_class.ring_distribs(1) semiring_normalization_rules(7))"], ["proof (state)\nthis:\n  v * (p * A $ from_nat i $ from_nat i) +\n  v * (A $ from_nat k $ from_nat k * q) =\n  d * v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "then"], ["proof (chain)\npicking this:\n  v * (p * A $ from_nat i $ from_nat i) +\n  v * (A $ from_nat k $ from_nat k * q) =\n  d * v", "have \"?Aii- v * (p * ?Aii) - v * (?Akk* q) = 0\""], ["proof (prove)\nusing this:\n  v * (p * A $ from_nat i $ from_nat i) +\n  v * (A $ from_nat k $ from_nat k * q) =\n  d * v\n\ngoal (1 subgoal):\n 1. A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n    v * (A $ from_nat k $ from_nat k * q) =\n    (0::'a)", "by (simp add: diff_diff_add dv)"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n  v * (A $ from_nat k $ from_nat k * q) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>from_nat k \\<noteq> from_nat i; from_nat k \\<noteq> from_nat i;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> from_nat b; b < ncols A\\<rbrakk>\n        \\<Longrightarrow> A $ a $ from_nat b = (0::'a);\n     \\<And>a b.\n        \\<lbrakk>from_nat a \\<noteq> b; a < nrows A\\<rbrakk>\n        \\<Longrightarrow> A $ from_nat a $ b = (0::'a);\n     d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q;\n     (p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q) *\n     u =\n     - A $ from_nat k $ from_nat k;\n     k < ncols A; k < nrows A; i < nrows A; i < ncols A; a = from_nat k;\n     b = from_nat i\\<rbrakk>\n    \\<Longrightarrow> A $ from_nat i $ from_nat i -\n                      v * (p * A $ from_nat i $ from_nat i) =\n                      v * A $ from_nat k $ from_nat k * q", "then"], ["proof (chain)\npicking this:\n  A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n  v * (A $ from_nat k $ from_nat k * q) =\n  (0::'a)", "show \"?Aii- v * (p * ?Aii) = v * ?Akk* q\""], ["proof (prove)\nusing this:\n  A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) -\n  v * (A $ from_nat k $ from_nat k * q) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) =\n    v * A $ from_nat k $ from_nat k * q", "by force"], ["proof (state)\nthis:\n  A $ from_nat i $ from_nat i - v * (p * A $ from_nat i $ from_nat i) =\n  v * A $ from_nat k $ from_nat k * q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A $ a $ b = (P ** A ** Q) $ a $ b\n\ngoal (1 subgoal):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "fix a::'rows and b::'cols"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "assume ak: \"b \\<noteq> from_nat k\" and ai: \"b \\<noteq> from_nat i\""], ["proof (state)\nthis:\n  b \\<noteq> from_nat k\n  b \\<noteq> from_nat i\n\ngoal (1 subgoal):\n 1. \\<And>ia iaa.\n       \\<lbrakk>iaa \\<noteq> from_nat k; iaa \\<noteq> from_nat i\\<rbrakk>\n       \\<Longrightarrow> A $ ia $ iaa = (P ** A ** Q) $ ia $ iaa", "show \"A $ a $ b = (P ** A ** Q) $ a $ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "using ai ak a1 a2 Aab0 Aab0' d du k1 k2 i1 i2"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b = (P ** A ** Q) $ a $ b", "unfolding diagonal_step_PQ_PAQ[OF PQ b]"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    mult_column\n     (column_add\n       (column_add\n         (row_add\n           (interchange_rows (row_add A (from_nat k) (from_nat i) p)\n             (from_nat i) (from_nat k))\n           (from_nat k) (from_nat i) (- v))\n         (from_nat i) (from_nat k) q)\n       (from_nat k) (from_nat i) u)\n     (from_nat k) (- (1::'a)) $\n    a $\n    b", "unfolding mult_column_def column_add_def interchange_rows_def row_add_def"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (\\<chi>ia j.\n        if j = from_nat k\n        then (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j *\n             - (1::'a)\n        else (\\<chi>ia j.\n                 if j = from_nat k\n                 then (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat k +\n                      (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      from_nat i *\n                      u\n                 else (\\<chi>ia j.\n                          if j = from_nat i\n                          then (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat i +\n                               (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               from_nat k *\n                               q\n                          else (\\<chi>ia j.\n                                   if ia = from_nat k\n                                   then (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat k $\n  j +\n  - v *\n  (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  from_nat i $\n  j\n                                   else (\\<chi>ia j.\n      if ia = from_nat i\n      then (\\<chi>ia j.\n               if ia = from_nat k\n               then A $ from_nat k $ j + p * A $ from_nat i $ j\n               else A $ ia $ j) $\n           from_nat k $\n           j\n      else if ia = from_nat k\n           then (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                from_nat i $\n                j\n           else (\\<chi>ia j.\n                    if ia = from_nat k\n                    then A $ from_nat k $ j + p * A $ from_nat i $ j\n                    else A $ ia $ j) $\n                ia $\n                j) $\n  ia $\n  j) $\n                               ia $\n                               j) $\n                      ia $\n                      j) $\n             ia $\n             j) $\n    a $\n    b", "unfolding vec_lambda_beta"], ["proof (prove)\nusing this:\n  b \\<noteq> from_nat i\n  b \\<noteq> from_nat k\n  from_nat k \\<noteq> from_nat i\n  from_nat k \\<noteq> from_nat i\n  \\<lbrakk>?a \\<noteq> from_nat ?b; ?b < ncols A\\<rbrakk>\n  \\<Longrightarrow> A $ ?a $ from_nat ?b = (0::'a)\n  \\<lbrakk>from_nat ?a \\<noteq> ?b; ?a < nrows A\\<rbrakk>\n  \\<Longrightarrow> A $ from_nat ?a $ ?b = (0::'a)\n  d = p * A $ from_nat i $ from_nat i + A $ from_nat k $ from_nat k * q\n  d * u = - A $ from_nat k $ from_nat k\n  k < ncols A\n  k < nrows A\n  i < nrows A\n  i < ncols A\n\ngoal (1 subgoal):\n 1. A $ a $ b =\n    (if b = from_nat k\n     then (if b = from_nat k\n           then (if from_nat k = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) +\n                (if from_nat i = from_nat i\n                 then (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat k $ from_nat i) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat i +\n p * A $ from_nat i $ from_nat i\n                                  else A $ from_nat k $ from_nat i\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\n else A $ from_nat i $ from_nat i)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ a $ from_nat i) +\n                      (if a = from_nat k\n                       then (if from_nat k = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat k = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat k = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat k $ from_nat k) +\n                            - v *\n                            (if from_nat i = from_nat i\n                             then if from_nat k = from_nat k\n                                  then A $ from_nat k $ from_nat k +\n p * A $ from_nat i $ from_nat k\n                                  else A $ from_nat k $ from_nat k\n                             else if from_nat i = from_nat k\n                                  then if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k\n                                  else if from_nat i = from_nat k\n then A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\n else A $ from_nat i $ from_nat k)\n                       else if a = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if a = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if a = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ a $ from_nat k) *\n                      q\n                 else if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) *\n                u\n           else if b = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat k $ b) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ b +\n                                     p * A $ from_nat i $ b\n                                else A $ from_nat k $ b\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ b +\n    p * A $ from_nat i $ b\n                                     else A $ from_nat i $ b)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if a = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ a $ b) *\n          - (1::'a)\n     else if b = from_nat k\n          then (if from_nat k = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) +\n               (if from_nat i = from_nat i\n                then (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat k $ from_nat i) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat i +\np * A $ from_nat i $ from_nat i\n                                 else A $ from_nat k $ from_nat i\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat i + p * A $ from_nat i $ from_nat i\nelse A $ from_nat i $ from_nat i)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ a $ from_nat i) +\n                     (if a = from_nat k\n                      then (if from_nat k = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat k = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat k = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat k $ from_nat k) +\n                           - v *\n                           (if from_nat i = from_nat i\n                            then if from_nat k = from_nat k\n                                 then A $ from_nat k $ from_nat k +\np * A $ from_nat i $ from_nat k\n                                 else A $ from_nat k $ from_nat k\n                            else if from_nat i = from_nat k\n                                 then if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k\n                                 else if from_nat i = from_nat k\nthen A $ from_nat k $ from_nat k + p * A $ from_nat i $ from_nat k\nelse A $ from_nat i $ from_nat k)\n                      else if a = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if a = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if a = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ a $ from_nat k) *\n                     q\n                else if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) *\n               u\n          else if b = from_nat i\n               then (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat k $ from_nat i) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat i +\n                                     p * A $ from_nat i $ from_nat i\n                                else A $ from_nat k $ from_nat i\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat i +\n    p * A $ from_nat i $ from_nat i\n                                     else A $ from_nat i $ from_nat i)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat i +\n                                    p * A $ from_nat i $ from_nat i\n                               else A $ from_nat k $ from_nat i\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ from_nat i $ from_nat i\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat i +\n   p * A $ from_nat i $ from_nat i\n                                    else A $ a $ from_nat i) +\n                    (if a = from_nat k\n                     then (if from_nat k = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat k = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat k = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat k $ from_nat k) +\n                          - v *\n                          (if from_nat i = from_nat i\n                           then if from_nat k = from_nat k\n                                then A $ from_nat k $ from_nat k +\n                                     p * A $ from_nat i $ from_nat k\n                                else A $ from_nat k $ from_nat k\n                           else if from_nat i = from_nat k\n                                then if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k\n                                else if from_nat i = from_nat k\n                                     then A $ from_nat k $ from_nat k +\n    p * A $ from_nat i $ from_nat k\n                                     else A $ from_nat i $ from_nat k)\n                     else if a = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ from_nat k +\n                                    p * A $ from_nat i $ from_nat k\n                               else A $ from_nat k $ from_nat k\n                          else if a = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ from_nat i $ from_nat k\n                               else if a = from_nat k\n                                    then A $ from_nat k $ from_nat k +\n   p * A $ from_nat i $ from_nat k\n                                    else A $ a $ from_nat k) *\n                    q\n               else if a = from_nat k\n                    then (if from_nat k = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat k = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat k = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat k $ b) +\n                         - v *\n                         (if from_nat i = from_nat i\n                          then if from_nat k = from_nat k\n                               then A $ from_nat k $ b +\n                                    p * A $ from_nat i $ b\n                               else A $ from_nat k $ b\n                          else if from_nat i = from_nat k\n                               then if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b\n                               else if from_nat i = from_nat k\n                                    then A $ from_nat k $ b +\n   p * A $ from_nat i $ b\n                                    else A $ from_nat i $ b)\n                    else if a = from_nat i\n                         then if from_nat k = from_nat k\n                              then A $ from_nat k $ b +\n                                   p * A $ from_nat i $ b\n                              else A $ from_nat k $ b\n                         else if a = from_nat k\n                              then if from_nat i = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ from_nat i $ b\n                              else if a = from_nat k\n                                   then A $ from_nat k $ b +\n  p * A $ from_nat i $ b\n                                   else A $ a $ b)", "by auto"], ["proof (state)\nthis:\n  A $ a $ b = (P ** A ** Q) $ a $ b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_step A i k d v = P ** A ** Q\n\ngoal:\nNo subgoals!", "qed"], ["", "fun diagonal_to_Smith_i_PQ :: \n\"nat list \\<Rightarrow> nat \\<Rightarrow> ('a::{bezout_ring} bezout) \n  \\<Rightarrow> (('a^'rows::mod_type^'rows::mod_type)\\<times>('a^'cols::mod_type^'rows::mod_type)\\<times> ('a^'cols::mod_type^'cols::mod_type))\n  \\<Rightarrow> (('a^'rows::mod_type^'rows::mod_type)\\<times> ('a^'cols::mod_type^'rows::mod_type) \\<times> ('a^'cols::mod_type^'cols::mod_type))\"\n where\n\"diagonal_to_Smith_i_PQ [] i bezout (P,A,Q) = (P,A,Q)\" |\n\"diagonal_to_Smith_i_PQ (j#xs) i bezout (P,A,Q) = (\n  if A $ (from_nat i) $ (from_nat i) dvd A $ (from_nat j) $ (from_nat j) \n     then diagonal_to_Smith_i_PQ xs i bezout (P,A,Q)\n  else let (p, q, u, v, d) = bezout (A $ from_nat i $ from_nat i) (A $ from_nat j $ from_nat j); \n           A' = diagonal_step A i j d v;\n          (P',Q') = diagonal_step_PQ A i j bezout\n      in diagonal_to_Smith_i_PQ xs i bezout (P'**P,A',Q**Q') \\<comment> \\<open>Apply the step\\<close>\n  )\n  \""], ["", "text\\<open>This is implemented by fun. This way, I can do pattern-matching for $(P,A,Q)$.\\<close>"], ["", "fun Diagonal_to_Smith_row_i_PQ\n  where \"Diagonal_to_Smith_row_i_PQ i bezout (P,A,Q) \n  = diagonal_to_Smith_i_PQ [i + 1..<min (nrows A) (ncols A)] i bezout (P,A,Q)\""], ["", "text\\<open>Deleted from the simplified and renamed as it would be a definition.\\<close>"], ["", "declare Diagonal_to_Smith_row_i_PQ.simps[simp del]"], ["", "lemmas Diagonal_to_Smith_row_i_PQ_def = Diagonal_to_Smith_row_i_PQ.simps"], ["", "fun diagonal_to_Smith_aux_PQ \n  where\n  \"diagonal_to_Smith_aux_PQ [] bezout (P,A,Q) = (P,A,Q)\" |\n  \"diagonal_to_Smith_aux_PQ (i#xs) bezout (P,A,Q) \n      = diagonal_to_Smith_aux_PQ xs bezout (Diagonal_to_Smith_row_i_PQ i bezout (P,A,Q))\""], ["", "lemma diagonal_to_Smith_aux_PQ_append:\n  \"diagonal_to_Smith_aux_PQ (xs @ ys) bezout (P,A,Q)\n    = diagonal_to_Smith_aux_PQ ys bezout (diagonal_to_Smith_aux_PQ xs bezout (P,A,Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux_PQ (xs @ ys) bezout (P, A, Q) =\n    diagonal_to_Smith_aux_PQ ys bezout\n     (diagonal_to_Smith_aux_PQ xs bezout (P, A, Q))", "by (induct xs bezout \"(P,A,Q)\" arbitrary: P A Q rule: diagonal_to_Smith_aux_PQ.induct)\n     (auto, metis prod_cases3)"], ["", "lemma diagonal_to_Smith_aux_PQ_append2[simp]:\n  \"diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (P,A,Q) \n    = Diagonal_to_Smith_row_i_PQ ys bezout (diagonal_to_Smith_aux_PQ xs bezout (P,A,Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (P, A, Q) =\n    Diagonal_to_Smith_row_i_PQ ys bezout\n     (diagonal_to_Smith_aux_PQ xs bezout (P, A, Q))", "proof (induct xs bezout \"(P,A,Q)\" arbitrary: P A Q rule: diagonal_to_Smith_aux_PQ.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>bezout P A Q.\n       diagonal_to_Smith_aux_PQ ([] @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ [] bezout (P, A, Q))\n 2. \\<And>i xs bezout P A Q.\n       (\\<And>Pa Aa Qa.\n           Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n           (Pa, Aa, Qa) \\<Longrightarrow>\n           diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (Pa, Aa, Qa) =\n           Diagonal_to_Smith_row_i_PQ ys bezout\n            (diagonal_to_Smith_aux_PQ xs bezout\n              (Pa, Aa, Qa))) \\<Longrightarrow>\n       diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "case (1 bezout P A Q)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>bezout P A Q.\n       diagonal_to_Smith_aux_PQ ([] @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ [] bezout (P, A, Q))\n 2. \\<And>i xs bezout P A Q.\n       (\\<And>Pa Aa Qa.\n           Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n           (Pa, Aa, Qa) \\<Longrightarrow>\n           diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (Pa, Aa, Qa) =\n           Diagonal_to_Smith_row_i_PQ ys bezout\n            (diagonal_to_Smith_aux_PQ xs bezout\n              (Pa, Aa, Qa))) \\<Longrightarrow>\n       diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux_PQ ([] @ [ys]) bezout (P, A, Q) =\n    Diagonal_to_Smith_row_i_PQ ys bezout\n     (diagonal_to_Smith_aux_PQ [] bezout (P, A, Q))", "by (metis append.simps(1) diagonal_to_Smith_aux_PQ.simps prod.exhaust)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux_PQ ([] @ [ys]) bezout (P, A, Q) =\n  Diagonal_to_Smith_row_i_PQ ys bezout\n   (diagonal_to_Smith_aux_PQ [] bezout (P, A, Q))\n\ngoal (1 subgoal):\n 1. \\<And>i xs bezout P A Q.\n       (\\<And>Pa Aa Qa.\n           Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n           (Pa, Aa, Qa) \\<Longrightarrow>\n           diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (Pa, Aa, Qa) =\n           Diagonal_to_Smith_row_i_PQ ys bezout\n            (diagonal_to_Smith_aux_PQ xs bezout\n              (Pa, Aa, Qa))) \\<Longrightarrow>\n       diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i xs bezout P A Q.\n       (\\<And>Pa Aa Qa.\n           Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n           (Pa, Aa, Qa) \\<Longrightarrow>\n           diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (Pa, Aa, Qa) =\n           Diagonal_to_Smith_row_i_PQ ys bezout\n            (diagonal_to_Smith_aux_PQ xs bezout\n              (Pa, Aa, Qa))) \\<Longrightarrow>\n       diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "case (2 i xs bezout P A Q)"], ["proof (state)\nthis:\n  Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n  (?P, ?A, ?Q) \\<Longrightarrow>\n  diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (?P, ?A, ?Q) =\n  Diagonal_to_Smith_row_i_PQ ys bezout\n   (diagonal_to_Smith_aux_PQ xs bezout (?P, ?A, ?Q))\n\ngoal (1 subgoal):\n 1. \\<And>i xs bezout P A Q.\n       (\\<And>Pa Aa Qa.\n           Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n           (Pa, Aa, Qa) \\<Longrightarrow>\n           diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (Pa, Aa, Qa) =\n           Diagonal_to_Smith_row_i_PQ ys bezout\n            (diagonal_to_Smith_aux_PQ xs bezout\n              (Pa, Aa, Qa))) \\<Longrightarrow>\n       diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n       Diagonal_to_Smith_row_i_PQ ys bezout\n        (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "then"], ["proof (chain)\npicking this:\n  Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n  (?P, ?A, ?Q) \\<Longrightarrow>\n  diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (?P, ?A, ?Q) =\n  Diagonal_to_Smith_row_i_PQ ys bezout\n   (diagonal_to_Smith_aux_PQ xs bezout (?P, ?A, ?Q))", "show ?case"], ["proof (prove)\nusing this:\n  Diagonal_to_Smith_row_i_PQ i bezout (P, A, Q) =\n  (?P, ?A, ?Q) \\<Longrightarrow>\n  diagonal_to_Smith_aux_PQ (xs @ [ys]) bezout (?P, ?A, ?Q) =\n  Diagonal_to_Smith_row_i_PQ ys bezout\n   (diagonal_to_Smith_aux_PQ xs bezout (?P, ?A, ?Q))\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n    Diagonal_to_Smith_row_i_PQ ys bezout\n     (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))", "by (metis (no_types, hide_lams) append_Cons diagonal_to_Smith_aux_PQ.simps(2) prod_cases3)"], ["proof (state)\nthis:\n  diagonal_to_Smith_aux_PQ ((i # xs) @ [ys]) bezout (P, A, Q) =\n  Diagonal_to_Smith_row_i_PQ ys bezout\n   (diagonal_to_Smith_aux_PQ (i # xs) bezout (P, A, Q))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\ndefinition \"diagonal_to_Smith_PQ A bezout \n  = diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout (mat 1, A, mat 1)\"\n*)"], ["", "context\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\" (*This is the input matrix*)\n  and B::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\" (*This is the matrix in each step*)\n  and P and Q\n  and bezout::\"'a bezout\"\n  assumes PAQ: \"P**A**Q = B\"\n  and P: \"invertible P\" and Q: \"invertible Q\"\n  and ib: \"is_bezout_ext bezout\"\nbegin"], ["", "text\\<open>The output is the same as the one in the version where $P$ and $Q$ are not computed.\\<close>"], ["", "lemma diagonal_to_Smith_i_PQ_eq:\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_i_PQ xs i bezout (P,B,Q)\"\n  and xs: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\" \n  and diag: \"isDiagonal B\" and i_notin: \"i \\<notin> set xs\" and i: \"i<min (nrows A) (ncols A)\"\nshows \"B' = diagonal_to_Smith_i xs B i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i xs B i bezout", "using assms PAQ ib P Q"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q)\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set xs\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i xs B i bezout", "proof (induct xs i bezout \"(P,B,Q)\" arbitrary: P B Q rule:diagonal_to_Smith_i_PQ.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i bezout P Aa Q.\n       \\<lbrakk>(P', B', Q') =\n                diagonal_to_Smith_i_PQ [] i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set []; i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i [] Aa i bezout\n 2. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "case (1 i bezout P A Q)"], ["proof (state)\nthis:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P, A, Q)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = A\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (2 subgoals):\n 1. \\<And>i bezout P Aa Q.\n       \\<lbrakk>(P', B', Q') =\n                diagonal_to_Smith_i_PQ [] i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set []; i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i [] Aa i bezout\n 2. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "then"], ["proof (chain)\npicking this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P, A, Q)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = A\n  is_bezout_ext bezout\n  invertible P\n  invertible Q", "show ?case"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P, A, Q)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = A\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i [] A i bezout", "by auto"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_i [] A i bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "case (2 j xs i bezout P B Q)"], ["proof (state)\nthis:\n  \\<lbrakk>B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j;\n   (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   P ** A ** Q = B; is_bezout_ext bezout; invertible P;\n   invertible Q\\<rbrakk>\n  \\<Longrightarrow> B' = diagonal_to_Smith_i xs B i bezout\n  \\<lbrakk>\\<not> B $ from_nat i $ from_nat i dvd\n                  B $ from_nat j $ from_nat j;\n   ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step B i j ?yc ?xd; ?xf = diagonal_step_PQ B i j bezout;\n   (?xg, ?yd) = ?xf;\n   (P', B', Q') =\n   diagonal_to_Smith_i_PQ xs i bezout (?xg ** P, ?xe, Q ** ?yd);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal ?xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   ?xg ** P ** A ** (Q ** ?yd) = ?xe; is_bezout_ext bezout;\n   invertible (?xg ** P); invertible (Q ** ?yd)\\<rbrakk>\n  \\<Longrightarrow> B' = diagonal_to_Smith_i xs ?xe i bezout\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set (j # xs)\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?Bii = \"B $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?Bjj = \"B $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?p=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?q=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?u=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?v=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?d=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?B'=\"diagonal_step B i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?P' = \"fst (diagonal_step_PQ B i j bezout)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "let ?Q' = \"snd (diagonal_step_PQ B i j bezout)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note hyp = \"2.hyps\"(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> B $ from_nat i $ from_nat i dvd\n                  B $ from_nat j $ from_nat j;\n   ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step B i j ?yc ?xd; ?xf = diagonal_step_PQ B i j bezout;\n   (?xg, ?yd) = ?xf;\n   (P', B', Q') =\n   diagonal_to_Smith_i_PQ xs i bezout (?xg ** P, ?xe, Q ** ?yd);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal ?xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   ?xg ** P ** A ** (Q ** ?yd) = ?xe; is_bezout_ext bezout;\n   invertible (?xg ** P); invertible (Q ** ?yd)\\<rbrakk>\n  \\<Longrightarrow> B' = diagonal_to_Smith_i xs ?xe i bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note P'B'Q' = \"2.prems\"(1)"], ["proof (state)\nthis:\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note i_min = \"2.prems\"(5)"], ["proof (state)\nthis:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note PAQ_B = \"2.prems\"(6)"], ["proof (state)\nthis:\n  P ** A ** Q = B\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note i_notin = \"2.prems\"(4)"], ["proof (state)\nthis:\n  i \\<notin> set (j # xs)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note diagB = \"2.prems\"(3)"], ["proof (state)\nthis:\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note xs_min = \"2.prems\"(2)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note ib = \"2.prems\"(7)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note inv_P = \"2.prems\"(8)"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "note inv_Q = \"2.prems\"(9)"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = diagonal_to_Smith_i xs Aa i bezout;\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = diagonal_to_Smith_i xs xe i bezout;\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = diagonal_to_Smith_i (j # xs) Aa i bezout", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i (j # xs) B i bezout", "proof (cases \"?Bii dvd ?Bjj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. B $ from_nat i $ from_nat i dvd\n    B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout\n 2. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "case True"], ["proof (state)\nthis:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. B $ from_nat i $ from_nat i dvd\n    B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout\n 2. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i (j # xs) B i bezout", "using \"2.prems\" \"2.hyps\"(1) True"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set (j # xs)\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n  \\<lbrakk>B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j;\n   (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   P ** A ** Q = B; is_bezout_ext bezout; invertible P;\n   invertible Q\\<rbrakk>\n  \\<Longrightarrow> B' = diagonal_to_Smith_i xs B i bezout\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i (j # xs) B i bezout", "by auto"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_i (j # xs) B i bezout\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "case False"], ["proof (state)\nthis:\n  \\<not> B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "have aux: \"diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) \n      = diagonal_to_Smith_i_PQ xs i bezout (?P'**P,?B', Q**?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "using False"], ["proof (prove)\nusing this:\n  \\<not> B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "have i: \"i < min (nrows B) (ncols B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < min (nrows B) (ncols B)", "using i_min"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. i < min (nrows B) (ncols B)", "unfolding nrows_def ncols_def"], ["proof (prove)\nusing this:\n  i < min CARD('rows) CARD('cols)\n\ngoal (1 subgoal):\n 1. i < min CARD('rows) CARD('cols)", "by auto"], ["proof (state)\nthis:\n  i < min (nrows B) (ncols B)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "have j: \"j < min (nrows B) (ncols B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < min (nrows B) (ncols B)", "using xs_min"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. j < min (nrows B) (ncols B)", "unfolding nrows_def ncols_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min CARD('rows) CARD('cols)\n\ngoal (1 subgoal):\n 1. j < min CARD('rows) CARD('cols)", "by auto"], ["proof (state)\nthis:\n  j < min (nrows B) (ncols B)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "have aux2: \"diagonal_to_Smith_i(j # xs) B i bezout = diagonal_to_Smith_i xs ?B' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) B i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "using False"], ["proof (prove)\nusing this:\n  \\<not> B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i (j # xs) B i bezout =\n    diagonal_to_Smith_i xs\n     (diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i (j # xs) B i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "have res: \" B' = diagonal_to_Smith_i xs ?B' i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' =\n    diagonal_to_Smith_i xs\n     (diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))\n     i bezout", "proof (rule hyp[OF False])"], ["proof (state)\ngoal (17 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (?xg, ?yd) = ?xf\n 9. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (?xg ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** ?yd)\n 10. \\<forall>x.\n        x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\nA total of 17 subgoals...", "show \"(P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (?P'**P,?B', Q**?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "using aux P'B'Q'"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "by auto"], ["proof (state)\nthis:\n  (P', B', Q') =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (16 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 16 subgoals...", "have B'_P'B'Q': \"?B' = ?P'**B**?Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    fst (diagonal_step_PQ B i j bezout) ** B **\n    snd (diagonal_step_PQ B i j bezout)", "by (rule diagonal_step_PQ[OF _ _ i j _ ib diagB], insert i_notin pquvd, auto)"], ["proof (state)\nthis:\n  diagonal_step B i j\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) =\n  fst (diagonal_step_PQ B i j bezout) ** B **\n  snd (diagonal_step_PQ B i j bezout)\n\ngoal (16 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 16 subgoals...", "show \"?P'**P ** A ** (Q**?Q') = ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ B i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ B i j bezout)) =\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v)", "unfolding B'_P'B'Q'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ B i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ B i j bezout)) =\n    fst (diagonal_step_PQ B i j bezout) ** B **\n    snd (diagonal_step_PQ B i j bezout)", "unfolding PAQ_B[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ (P ** A ** Q) i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ (P ** A ** Q) i j bezout)) =\n    fst (diagonal_step_PQ (P ** A ** Q) i j bezout) ** (P ** A ** Q) **\n    snd (diagonal_step_PQ (P ** A ** Q) i j bezout)", "by (simp add: matrix_mul_assoc)"], ["proof (state)\nthis:\n  fst (diagonal_step_PQ B i j bezout) ** P ** A **\n  (Q ** snd (diagonal_step_PQ B i j bezout)) =\n  diagonal_step B i j\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v)\n\ngoal (15 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 15 subgoals...", "show \"isDiagonal ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))", "by (rule isDiagonal_diagonal_step[OF diagB i j])"], ["proof (state)\nthis:\n  isDiagonal\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n\ngoal (14 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 14 subgoals...", "show \"invertible (?P'** P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (fst (diagonal_step_PQ B i j bezout) ** P)", "by (metis inv_P diagonal_step_PQ_invertible_P i i_notin in_set_member \n           invertible_mult j member_rec(1) prod.exhaust_sel)"], ["proof (state)\nthis:\n  invertible (fst (diagonal_step_PQ B i j bezout) ** P)\n\ngoal (13 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 13 subgoals...", "show \"invertible (Q ** ?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (Q ** snd (diagonal_step_PQ B i j bezout))", "by (metis diagonal_step_PQ_invertible_Q i i_notin inv_Q \n            invertible_mult j list.set_intros(1) prod.collapse)"], ["proof (state)\nthis:\n  invertible (Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (12 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 12 subgoals...", "qed (insert pquvd xs_min i_min i_notin ib, auto)"], ["proof (state)\nthis:\n  B' =\n  diagonal_to_Smith_i xs\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = diagonal_to_Smith_i (j # xs) B i bezout", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i (j # xs) B i bezout", "using aux aux2 res"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n  diagonal_to_Smith_i (j # xs) B i bezout =\n  diagonal_to_Smith_i xs\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n  B' =\n  diagonal_to_Smith_i xs\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n   i bezout\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i (j # xs) B i bezout", "by auto"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_i (j # xs) B i bezout\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_i (j # xs) B i bezout\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diagonal_to_Smith_i_PQ':\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_i_PQ xs i bezout (P,B,Q)\"\n  and xs: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\" \n  and diag: \"isDiagonal B\" and i_notin: \"i \\<notin> set xs\" and i: \"i<min (nrows A) (ncols A)\"\nshows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "using assms PAQ ib P Q"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q)\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set xs\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "proof (induct xs i bezout \"(P,B,Q)\" arbitrary: P B Q rule:diagonal_to_Smith_i_PQ.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i bezout P Aa Q.\n       \\<lbrakk>(P', B', Q') =\n                diagonal_to_Smith_i_PQ [] i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set []; i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'\n 2. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "case (1 i bezout)"], ["proof (state)\nthis:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P_, A_, Q_)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A_\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P_ ** A ** Q_ = A_\n  is_bezout_ext bezout\n  invertible P_\n  invertible Q_\n\ngoal (2 subgoals):\n 1. \\<And>i bezout P Aa Q.\n       \\<lbrakk>(P', B', Q') =\n                diagonal_to_Smith_i_PQ [] i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set []; i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'\n 2. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "then"], ["proof (chain)\npicking this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P_, A_, Q_)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A_\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P_ ** A ** Q_ = A_\n  is_bezout_ext bezout\n  invertible P_\n  invertible Q_", "show ?case"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P_, A_, Q_)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A_\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P_ ** A ** Q_ = A_\n  is_bezout_ext bezout\n  invertible P_\n  invertible Q_\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "using PAQ"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ [] i bezout (P_, A_, Q_)\n  \\<forall>x. x \\<in> set [] \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal A_\n  i \\<notin> set []\n  i < min (nrows A) (ncols A)\n  P_ ** A ** Q_ = A_\n  is_bezout_ext bezout\n  invertible P_\n  invertible Q_\n  P ** A ** Q = B\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "by auto"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "case (2 j xs i bezout P B Q)"], ["proof (state)\nthis:\n  \\<lbrakk>B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j;\n   (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   P ** A ** Q = B; is_bezout_ext bezout; invertible P;\n   invertible Q\\<rbrakk>\n  \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                    invertible P' \\<and> invertible Q'\n  \\<lbrakk>\\<not> B $ from_nat i $ from_nat i dvd\n                  B $ from_nat j $ from_nat j;\n   ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step B i j ?yc ?xd; ?xf = diagonal_step_PQ B i j bezout;\n   (?xg, ?yd) = ?xf;\n   (P', B', Q') =\n   diagonal_to_Smith_i_PQ xs i bezout (?xg ** P, ?xe, Q ** ?yd);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal ?xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   ?xg ** P ** A ** (Q ** ?yd) = ?xe; is_bezout_ext bezout;\n   invertible (?xg ** P); invertible (Q ** ?yd)\\<rbrakk>\n  \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                    invertible P' \\<and> invertible Q'\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set (j # xs)\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?Bii = \"B $ from_nat i $ from_nat i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?Bjj = \"B $ from_nat j $ from_nat j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?p=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?q=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?u=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?v=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?d=\"case bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j) of (p,q,u,v,d) \\<Rightarrow> d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?B'=\"diagonal_step B i j ?d ?v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?P' = \"fst (diagonal_step_PQ B i j bezout)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "let ?Q' = \"snd (diagonal_step_PQ B i j bezout)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "have pquvd: \"(?p, ?q, ?u, ?v,?d) = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> p,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> q,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> u,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> v,\n     case bezout (B $ from_nat i $ from_nat i)\n           (B $ from_nat j $ from_nat j) of\n     (p, q, u, v, d) \\<Rightarrow> d) =\n    bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)", "by (simp add: split_beta)"], ["proof (state)\nthis:\n  (case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> p,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> q,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> u,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> v,\n   case bezout (B $ from_nat i $ from_nat i)\n         (B $ from_nat j $ from_nat j) of\n   (p, q, u, v, d) \\<Rightarrow> d) =\n  bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n\ngoal (1 subgoal):\n 1. \\<And>j xs i bezout P Aa Q.\n       \\<lbrakk>\\<lbrakk>Aa $ from_nat i $ from_nat i dvd\n                         Aa $ from_nat j $ from_nat j;\n                 (P', B', Q') =\n                 diagonal_to_Smith_i_PQ xs i bezout (P, Aa, Q);\n                 \\<forall>x.\n                    x \\<in> set xs \\<longrightarrow>\n                    x < min (nrows A) (ncols A);\n                 isDiagonal Aa; i \\<notin> set xs;\n                 i < min (nrows A) (ncols A); P ** A ** Q = Aa;\n                 is_bezout_ext bezout; invertible P; invertible Q\\<rbrakk>\n                \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                  invertible P' \\<and> invertible Q';\n        \\<And>x xa y xb ya xc yb xd yc xe xf xg yd.\n           \\<lbrakk>\\<not> Aa $ from_nat i $ from_nat i dvd\n                           Aa $ from_nat j $ from_nat j;\n            x =\n            bezout (Aa $ from_nat i $ from_nat i)\n             (Aa $ from_nat j $ from_nat j);\n            (xa, y) = x; (xb, ya) = y; (xc, yb) = ya; (xd, yc) = yb;\n            xe = diagonal_step Aa i j yc xd;\n            xf = diagonal_step_PQ Aa i j bezout; (xg, yd) = xf;\n            (P', B', Q') =\n            diagonal_to_Smith_i_PQ xs i bezout (xg ** P, xe, Q ** yd);\n            \\<forall>x.\n               x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n            isDiagonal xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n            xg ** P ** A ** (Q ** yd) = xe; is_bezout_ext bezout;\n            invertible (xg ** P); invertible (Q ** yd)\\<rbrakk>\n           \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                             invertible P' \\<and> invertible Q';\n        (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, Aa, Q);\n        \\<forall>x.\n           x \\<in> set (j # xs) \\<longrightarrow>\n           x < min (nrows A) (ncols A);\n        isDiagonal Aa; i \\<notin> set (j # xs); i < min (nrows A) (ncols A);\n        P ** A ** Q = Aa; is_bezout_ext bezout; invertible P;\n        invertible Q\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and> invertible Q'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "proof (cases \"?Bii dvd ?Bjj\")"], ["proof (state)\ngoal (2 subgoals):\n 1. B $ from_nat i $ from_nat i dvd\n    B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n 2. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "case True"], ["proof (state)\nthis:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (2 subgoals):\n 1. B $ from_nat i $ from_nat i dvd\n    B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n 2. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "then"], ["proof (chain)\npicking this:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "using \"2.prems\""], ["proof (prove)\nusing this:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set (j # xs)\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "using \"2.hyps\"(1)"], ["proof (prove)\nusing this:\n  B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set (j # xs)\n  i < min (nrows A) (ncols A)\n  P ** A ** Q = B\n  is_bezout_ext bezout\n  invertible P\n  invertible Q\n  \\<lbrakk>B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j;\n   (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   P ** A ** Q = B; is_bezout_ext bezout; invertible P;\n   invertible Q\\<rbrakk>\n  \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                    invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "by auto"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "case False"], ["proof (state)\nthis:\n  \\<not> B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note hyp = \"2.hyps\"(2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> B $ from_nat i $ from_nat i dvd\n                  B $ from_nat j $ from_nat j;\n   ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j);\n   (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya; (?xd, ?yc) = ?yb;\n   ?xe = diagonal_step B i j ?yc ?xd; ?xf = diagonal_step_PQ B i j bezout;\n   (?xg, ?yd) = ?xf;\n   (P', B', Q') =\n   diagonal_to_Smith_i_PQ xs i bezout (?xg ** P, ?xe, Q ** ?yd);\n   \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal ?xe; i \\<notin> set xs; i < min (nrows A) (ncols A);\n   ?xg ** P ** A ** (Q ** ?yd) = ?xe; is_bezout_ext bezout;\n   invertible (?xg ** P); invertible (Q ** ?yd)\\<rbrakk>\n  \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                    invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note P'B'Q' = \"2.prems\"(1)"], ["proof (state)\nthis:\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note i_min = \"2.prems\"(5)"], ["proof (state)\nthis:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note PAQ_B = \"2.prems\"(6)"], ["proof (state)\nthis:\n  P ** A ** Q = B\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note i_notin = \"2.prems\"(4)"], ["proof (state)\nthis:\n  i \\<notin> set (j # xs)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note diagB = \"2.prems\"(3)"], ["proof (state)\nthis:\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note xs_min = \"2.prems\"(2)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note ib = \"2.prems\"(7)"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note inv_P = \"2.prems\"(8)"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "note inv_Q = \"2.prems\"(9)"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "have aux: \"diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) \n      = diagonal_to_Smith_i_PQ xs i bezout (?P'**P,?B', Q**?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "using False"], ["proof (prove)\nusing this:\n  \\<not> B $ from_nat i $ from_nat i dvd B $ from_nat j $ from_nat j\n\ngoal (1 subgoal):\n 1. diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "by (auto simp add: split_beta)"], ["proof (state)\nthis:\n  diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "have i: \"i < min (nrows B) (ncols B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < min (nrows B) (ncols B)", "using i_min"], ["proof (prove)\nusing this:\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. i < min (nrows B) (ncols B)", "unfolding nrows_def ncols_def"], ["proof (prove)\nusing this:\n  i < min CARD('rows) CARD('cols)\n\ngoal (1 subgoal):\n 1. i < min CARD('rows) CARD('cols)", "by auto"], ["proof (state)\nthis:\n  i < min (nrows B) (ncols B)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "have j: \"j < min (nrows B) (ncols B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < min (nrows B) (ncols B)", "using xs_min"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. j < min (nrows B) (ncols B)", "unfolding nrows_def ncols_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (j # xs) \\<longrightarrow> x < min CARD('rows) CARD('cols)\n\ngoal (1 subgoal):\n 1. j < min CARD('rows) CARD('cols)", "by auto"], ["proof (state)\nthis:\n  j < min (nrows B) (ncols B)\n\ngoal (1 subgoal):\n 1. \\<not> B $ from_nat i $ from_nat i dvd\n           B $ from_nat j $ from_nat j \\<Longrightarrow>\n    B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "proof (rule hyp[OF False])"], ["proof (state)\ngoal (17 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. ?xe = diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (?xg, ?yd) = ?xf\n 9. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout (?xg ** P, ?xe, Q ** ?yd)\n 10. \\<forall>x.\n        x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\nA total of 17 subgoals...", "show \"(P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (?P'**P,?B', Q**?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "using aux P'B'Q'"], ["proof (prove)\nusing this:\n  diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q) =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n  (P', B', Q') = diagonal_to_Smith_i_PQ (j # xs) i bezout (P, B, Q)\n\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    diagonal_to_Smith_i_PQ xs i bezout\n     (fst (diagonal_step_PQ B i j bezout) ** P,\n      diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v),\n      Q ** snd (diagonal_step_PQ B i j bezout))", "by auto"], ["proof (state)\nthis:\n  (P', B', Q') =\n  diagonal_to_Smith_i_PQ xs i bezout\n   (fst (diagonal_step_PQ B i j bezout) ** P,\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v),\n    Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (16 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 16 subgoals...", "have B'_P'B'Q': \"?B' = ?P'**B**?Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    fst (diagonal_step_PQ B i j bezout) ** B **\n    snd (diagonal_step_PQ B i j bezout)", "by (rule diagonal_step_PQ[OF _ _ i j _ ib diagB], insert i_notin pquvd, auto)"], ["proof (state)\nthis:\n  diagonal_step B i j\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v) =\n  fst (diagonal_step_PQ B i j bezout) ** B **\n  snd (diagonal_step_PQ B i j bezout)\n\ngoal (16 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 16 subgoals...", "show \"?P'**P ** A ** (Q**?Q') = ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ B i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ B i j bezout)) =\n    diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v)", "unfolding B'_P'B'Q'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ B i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ B i j bezout)) =\n    fst (diagonal_step_PQ B i j bezout) ** B **\n    snd (diagonal_step_PQ B i j bezout)", "unfolding PAQ_B[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_step_PQ (P ** A ** Q) i j bezout) ** P ** A **\n    (Q ** snd (diagonal_step_PQ (P ** A ** Q) i j bezout)) =\n    fst (diagonal_step_PQ (P ** A ** Q) i j bezout) ** (P ** A ** Q) **\n    snd (diagonal_step_PQ (P ** A ** Q) i j bezout)", "by (simp add: matrix_mul_assoc)"], ["proof (state)\nthis:\n  fst (diagonal_step_PQ B i j bezout) ** P ** A **\n  (Q ** snd (diagonal_step_PQ B i j bezout)) =\n  diagonal_step B i j\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> d)\n   (case bezout (B $ from_nat i $ from_nat i)\n          (B $ from_nat j $ from_nat j) of\n    (p, q, u, v, d) \\<Rightarrow> v)\n\ngoal (15 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. isDiagonal\n      (diagonal_step B i j\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> d)\n        (case bezout (B $ from_nat i $ from_nat i)\n               (B $ from_nat j $ from_nat j) of\n         (p, q, u, v, d) \\<Rightarrow> v))\nA total of 15 subgoals...", "show \"isDiagonal ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (diagonal_step B i j\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> d)\n       (case bezout (B $ from_nat i $ from_nat i)\n              (B $ from_nat j $ from_nat j) of\n        (p, q, u, v, d) \\<Rightarrow> v))", "by (rule isDiagonal_diagonal_step[OF diagB i j])"], ["proof (state)\nthis:\n  isDiagonal\n   (diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v))\n\ngoal (14 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 14 subgoals...", "show \"invertible (?P'** P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (fst (diagonal_step_PQ B i j bezout) ** P)", "by (metis inv_P diagonal_step_PQ_invertible_P i i_notin in_set_member \n           invertible_mult j member_rec(1) prod.exhaust_sel)"], ["proof (state)\nthis:\n  invertible (fst (diagonal_step_PQ B i j bezout) ** P)\n\ngoal (13 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 13 subgoals...", "show \"invertible (Q ** ?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible (Q ** snd (diagonal_step_PQ B i j bezout))", "by (metis diagonal_step_PQ_invertible_Q i i_notin inv_Q \n            invertible_mult j list.set_intros(1) prod.collapse)"], ["proof (state)\nthis:\n  invertible (Q ** snd (diagonal_step_PQ B i j bezout))\n\ngoal (12 subgoals):\n 1. ?x = bezout (B $ from_nat i $ from_nat i) (B $ from_nat j $ from_nat j)\n 2. (?xa, ?y) = ?x\n 3. (?xb, ?ya) = ?y\n 4. (?xc, ?yb) = ?ya\n 5. (?xd, ?yc) = ?yb\n 6. diagonal_step B i j\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> d)\n     (case bezout (B $ from_nat i $ from_nat i)\n            (B $ from_nat j $ from_nat j) of\n      (p, q, u, v, d) \\<Rightarrow> v) =\n    diagonal_step B i j ?yc ?xd\n 7. ?xf = diagonal_step_PQ B i j bezout\n 8. (fst (diagonal_step_PQ B i j bezout),\n     snd (diagonal_step_PQ B i j bezout)) =\n    ?xf\n 9. \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n 10. i \\<notin> set xs\nA total of 12 subgoals...", "qed (insert pquvd xs_min i_min i_notin ib, auto)"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary diagonal_to_Smith_i_PQ:\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_i_PQ xs i bezout (P,B,Q)\"\n  and xs: \"\\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\" \n  and diag: \"isDiagonal B\" and i_notin: \"i \\<notin> set xs\" and i: \"i<min (nrows A) (ncols A)\"\nshows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q' \\<and> B' = diagonal_to_Smith_i xs B i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_i xs B i bezout", "using assms diagonal_to_Smith_i_PQ' diagonal_to_Smith_i_PQ_eq"], ["proof (prove)\nusing this:\n  (P', B', Q') = diagonal_to_Smith_i_PQ xs i bezout (P, B, Q)\n  \\<forall>x. x \\<in> set xs \\<longrightarrow> x < min (nrows A) (ncols A)\n  isDiagonal B\n  i \\<notin> set xs\n  i < min (nrows A) (ncols A)\n  \\<lbrakk>(?P', ?B', ?Q') = diagonal_to_Smith_i_PQ ?xs ?i bezout (P, B, Q);\n   \\<forall>x.\n      x \\<in> set ?xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; ?i \\<notin> set ?xs; ?i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> ?B' = ?P' ** A ** ?Q' \\<and>\n                    invertible ?P' \\<and> invertible ?Q'\n  \\<lbrakk>(?P', ?B', ?Q') = diagonal_to_Smith_i_PQ ?xs ?i bezout (P, B, Q);\n   \\<forall>x.\n      x \\<in> set ?xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; ?i \\<notin> set ?xs; ?i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> ?B' = diagonal_to_Smith_i ?xs B ?i bezout\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_i xs B i bezout", "by metis"], ["", "lemma Diagonal_to_Smith_row_i_PQ_eq:\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = Diagonal_to_Smith_row_i B i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = Diagonal_to_Smith_row_i B i bezout", "using assms"], ["proof (prove)\nusing this:\n  (P', B', Q') = Diagonal_to_Smith_row_i_PQ i bezout (P, B, Q)\n  isDiagonal B\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. B' = Diagonal_to_Smith_row_i B i bezout", "unfolding Diagonal_to_Smith_row_i_def Diagonal_to_Smith_row_i_PQ_def"], ["proof (prove)\nusing this:\n  (P', B', Q') =\n  diagonal_to_Smith_i_PQ [i + 1..<min (nrows B) (ncols B)] i bezout\n   (P, B, Q)\n  isDiagonal B\n  i < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i [i + 1..<min (nrows B) (ncols B)] B i bezout", "using diagonal_to_Smith_i_PQ"], ["proof (prove)\nusing this:\n  (P', B', Q') =\n  diagonal_to_Smith_i_PQ [i + 1..<min (nrows B) (ncols B)] i bezout\n   (P, B, Q)\n  isDiagonal B\n  i < min (nrows A) (ncols A)\n  \\<lbrakk>(?P', ?B', ?Q') = diagonal_to_Smith_i_PQ ?xs ?i bezout (P, B, Q);\n   \\<forall>x.\n      x \\<in> set ?xs \\<longrightarrow> x < min (nrows A) (ncols A);\n   isDiagonal B; ?i \\<notin> set ?xs; ?i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> ?B' = ?P' ** A ** ?Q' \\<and>\n                    invertible ?P' \\<and>\n                    invertible ?Q' \\<and>\n                    ?B' = diagonal_to_Smith_i ?xs B ?i bezout\n\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_i [i + 1..<min (nrows B) (ncols B)] B i bezout", "by (auto simp add: nrows_def ncols_def)"], ["", "lemma Diagonal_to_Smith_row_i_PQ':\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "by (rule diagonal_to_Smith_i_PQ'[OF P'B'Q'[unfolded Diagonal_to_Smith_row_i_PQ_def] _ diag _ i],\n     auto simp add: nrows_def ncols_def)"], ["", "lemma Diagonal_to_Smith_row_i_PQ:\n  assumes P'B'Q': \"(P',B',Q') = Diagonal_to_Smith_row_i_PQ i bezout (P,B,Q)\"\n    and diag: \"isDiagonal B\" and i: \"i < min (nrows A) (ncols A)\"\n  shows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q' \\<and> B' = Diagonal_to_Smith_row_i B i bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = Diagonal_to_Smith_row_i B i bezout", "using assms Diagonal_to_Smith_row_i_PQ' Diagonal_to_Smith_row_i_PQ_eq"], ["proof (prove)\nusing this:\n  (P', B', Q') = Diagonal_to_Smith_row_i_PQ i bezout (P, B, Q)\n  isDiagonal B\n  i < min (nrows A) (ncols A)\n  \\<lbrakk>(?P', ?B', ?Q') = Diagonal_to_Smith_row_i_PQ ?i bezout (P, B, Q);\n   isDiagonal B; ?i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> ?B' = ?P' ** A ** ?Q' \\<and>\n                    invertible ?P' \\<and> invertible ?Q'\n  \\<lbrakk>(?P', ?B', ?Q') = Diagonal_to_Smith_row_i_PQ ?i bezout (P, B, Q);\n   isDiagonal B; ?i < min (nrows A) (ncols A)\\<rbrakk>\n  \\<Longrightarrow> ?B' = Diagonal_to_Smith_row_i B ?i bezout\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = Diagonal_to_Smith_row_i B i bezout", "by presburger"], ["", "end"], ["", "context\n  fixes A::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\" (*This is the input matrix*)\n  and B::\"'a::{bezout_ring}^'cols::mod_type^'rows::mod_type\" (*This is the matrix in each step*)\n  and P and Q\n  and bezout::\"'a bezout\"\n  assumes PAQ: \"P**A**Q = B\"\n  and P: \"invertible P\" and Q: \"invertible Q\"\n  and ib: \"is_bezout_ext bezout\"\nbegin"], ["", "lemma diagonal_to_Smith_aux_PQ:\n  assumes P'B'Q': \"(P',B',Q') = diagonal_to_Smith_aux_PQ [0..<k] bezout (P,B,Q)\"\n  and diag: \"isDiagonal B\" and k:\"k<min (nrows A) (ncols A)\"\nshows \"B' = P'**A**Q' \\<and> invertible P' \\<and> invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<k] bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<k] bezout", "using k P'B'Q' P Q PAQ diag"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<k] bezout", "proof (induct k arbitrary: P B Q P' Q' B')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P B Q P' Q' B'.\n       \\<lbrakk>0 < min (nrows A) (ncols A);\n        (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<0] bezout\n 2. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "case 0"], ["proof (state)\nthis:\n  0 < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n\ngoal (2 subgoals):\n 1. \\<And>P B Q P' Q' B'.\n       \\<lbrakk>0 < min (nrows A) (ncols A);\n        (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<0] bezout\n 2. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "then"], ["proof (chain)\npicking this:\n  0 < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B", "show ?case"], ["proof (prove)\nusing this:\n  0 < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<0] bezout", "using P Q PAQ"], ["proof (prove)\nusing this:\n  0 < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<0] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<0] bezout", "by auto"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and>\n  invertible P' \\<and>\n  invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<0] bezout\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "case (Suc k P B Q P' Q' B')"], ["proof (state)\nthis:\n  \\<lbrakk>k < min (nrows A) (ncols A);\n   (?P', ?B', ?Q') = diagonal_to_Smith_aux_PQ [0..<k] bezout (?P, ?B, ?Q);\n   invertible ?P; invertible ?Q; ?P ** A ** ?Q = ?B; isDiagonal ?B\\<rbrakk>\n  \\<Longrightarrow> ?B' = ?P' ** A ** ?Q' \\<and>\n                    invertible ?P' \\<and>\n                    invertible ?Q' \\<and>\n                    ?B' = diagonal_to_Smith_aux ?B [0..<k] bezout\n  Suc k < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note Suc_k = Suc.prems(1)"], ["proof (state)\nthis:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note PBQ = Suc.prems(2)"], ["proof (state)\nthis:\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q)\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note P = Suc.prems(3)"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note Q = Suc.prems(4)"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note PAQ_B = Suc.prems(5)"], ["proof (state)\nthis:\n  P ** A ** Q = B\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "note diag_B = Suc.prems(6)"], ["proof (state)\nthis:\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "let ?Dk = \"(diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "let ?P' = \"fst ?Dk\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "let ?B'=\"fst (snd ?Dk)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "let ?Q' = \"snd (snd ?Dk)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "have k: \"k<min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "using Suc_k"], ["proof (prove)\nusing this:\n  Suc k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "by auto"], ["proof (state)\nthis:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "have hyp: \"?B' = ?P' ** A ** ?Q' \\<and> invertible ?P' \\<and> invertible ?Q' \n      \\<and> ?B' = diagonal_to_Smith_aux B [0..<k] bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) **\n    A **\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) \\<and>\n    invertible\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout\n            (P, P ** A ** Q, Q))) \\<and>\n    invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q)))) \\<and>\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    diagonal_to_Smith_aux B [0..<k] bezout", "by (rule Suc.hyps[OF k _ P Q PAQ_B diag_B], auto simp add: PAQ_B)"], ["proof (state)\nthis:\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) ** A **\n  snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n             (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout\n          (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q)))) \\<and>\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  diagonal_to_Smith_aux B [0..<k] bezout\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "have diag_B': \"isDiagonal ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "by (metis diag_B hyp ib isDiagonal_diagonal_to_Smith_aux k ncols_def nrows_def)"], ["proof (state)\nthis:\n  isDiagonal\n   (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))))\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "have \"B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "by (auto, metis Diagonal_to_Smith_row_i_PQ_eq PAQ_B Suc(3) diag_B' \n        diagonal_to_Smith_aux_PQ_append2 eq_fst_iff hyp ib k sndI upt.simps(2) zero_order(1))"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "moreover"], ["proof (state)\nthis:\n  B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "have \"B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "proof (rule Diagonal_to_Smith_row_i_PQ')"], ["proof (state)\ngoal (7 subgoals):\n 1. ?P ** A ** ?Q = ?B\n 2. invertible ?P\n 3. invertible ?Q\n 4. is_bezout_ext ?bezout\n 5. (P', B', Q') = Diagonal_to_Smith_row_i_PQ ?i ?bezout (?P, ?B, ?Q)\n 6. isDiagonal ?B\n 7. ?i < min (nrows A) (ncols A)", "show \"(P', B', Q') = Diagonal_to_Smith_row_i_PQ k bezout (?P',?B',?Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    Diagonal_to_Smith_row_i_PQ k bezout\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)),\n      fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))),\n      snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc k < min (nrows A) (ncols A)\n  (P', B', Q') = diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q)\n  invertible P\n  invertible Q\n  P ** A ** Q = B\n  isDiagonal B\n\ngoal (1 subgoal):\n 1. (P', B', Q') =\n    Diagonal_to_Smith_row_i_PQ k bezout\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)),\n      fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))),\n      snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "by auto"], ["proof (state)\nthis:\n  (P', B', Q') =\n  Diagonal_to_Smith_row_i_PQ k bezout\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)),\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))),\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))))\n\ngoal (6 subgoals):\n 1. fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) **\n    A **\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))\n 2. invertible\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))\n 3. invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 4. is_bezout_ext bezout\n 5. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 6. k < min (nrows A) (ncols A)", "show \"invertible ?P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))", "using hyp"], ["proof (prove)\nusing this:\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) ** A **\n  snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n             (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout\n          (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q)))) \\<and>\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  diagonal_to_Smith_aux B [0..<k] bezout\n\ngoal (1 subgoal):\n 1. invertible\n     (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))", "by auto"], ["proof (state)\nthis:\n  invertible\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))\n\ngoal (5 subgoals):\n 1. fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) **\n    A **\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))\n 2. invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 3. is_bezout_ext bezout\n 4. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 5. k < min (nrows A) (ncols A)", "show \"?P' ** A ** ?Q' = ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) **\n    A **\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))", "using hyp"], ["proof (prove)\nusing this:\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) ** A **\n  snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n             (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout\n          (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q)))) \\<and>\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  diagonal_to_Smith_aux B [0..<k] bezout\n\ngoal (1 subgoal):\n 1. fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) **\n    A **\n    snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q))) =\n    fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))", "by auto"], ["proof (state)\nthis:\n  fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) ** A **\n  snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)))\n\ngoal (4 subgoals):\n 1. invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 2. is_bezout_ext bezout\n 3. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 4. k < min (nrows A) (ncols A)", "show \"invertible ?Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "using hyp"], ["proof (prove)\nusing this:\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  fst (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q)) ** A **\n  snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n             (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (fst (diagonal_to_Smith_aux_PQ [0..<k] bezout\n          (P, P ** A ** Q, Q))) \\<and>\n  invertible\n   (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n               (P, P ** A ** Q, Q)))) \\<and>\n  fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))) =\n  diagonal_to_Smith_aux B [0..<k] bezout\n\ngoal (1 subgoal):\n 1. invertible\n     (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "by auto"], ["proof (state)\nthis:\n  invertible\n   (snd (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))))\n\ngoal (3 subgoals):\n 1. is_bezout_ext bezout\n 2. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 3. k < min (nrows A) (ncols A)", "show \"is_bezout_ext bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_bezout_ext bezout", "using ib"], ["proof (prove)\nusing this:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. is_bezout_ext bezout", "by auto"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (2 subgoals):\n 1. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))\n 2. k < min (nrows A) (ncols A)", "show \"k < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "using k"], ["proof (prove)\nusing this:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. k < min (nrows A) (ncols A)", "by auto"], ["proof (state)\nthis:\n  k < min (nrows A) (ncols A)\n\ngoal (1 subgoal):\n 1. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "show diag_B': \"isDiagonal ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "using diag_B'"], ["proof (prove)\nusing this:\n  isDiagonal\n   (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))))\n\ngoal (1 subgoal):\n 1. isDiagonal\n     (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout\n                 (P, P ** A ** Q, Q))))", "by auto"], ["proof (state)\nthis:\n  isDiagonal\n   (fst (snd (diagonal_to_Smith_aux_PQ [0..<k] bezout (P, P ** A ** Q, Q))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. \\<And>k P B Q P' Q' B'.\n       \\<lbrakk>\\<And>P B Q P' Q' B'.\n                   \\<lbrakk>k < min (nrows A) (ncols A);\n                    (P', B', Q') =\n                    diagonal_to_Smith_aux_PQ [0..<k] bezout (P, B, Q);\n                    invertible P; invertible Q; P ** A ** Q = B;\n                    isDiagonal B\\<rbrakk>\n                   \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                                     invertible P' \\<and>\n                                     invertible Q' \\<and>\n                                     B' =\n                                     diagonal_to_Smith_aux B [0..<k] bezout;\n        Suc k < min (nrows A) (ncols A);\n        (P', B', Q') =\n        diagonal_to_Smith_aux_PQ [0..<Suc k] bezout (P, B, Q);\n        invertible P; invertible Q; P ** A ** Q = B; isDiagonal B\\<rbrakk>\n       \\<Longrightarrow> B' = P' ** A ** Q' \\<and>\n                         invertible P' \\<and>\n                         invertible Q' \\<and>\n                         B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "ultimately"], ["proof (chain)\npicking this:\n  B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'", "show ?case"], ["proof (prove)\nusing this:\n  B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\n  B' = P' ** A ** Q' \\<and> invertible P' \\<and> invertible Q'\n\ngoal (1 subgoal):\n 1. B' = P' ** A ** Q' \\<and>\n    invertible P' \\<and>\n    invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<Suc k] bezout", "by auto"], ["proof (state)\nthis:\n  B' = P' ** A ** Q' \\<and>\n  invertible P' \\<and>\n  invertible Q' \\<and> B' = diagonal_to_Smith_aux B [0..<Suc k] bezout\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "fun diagonal_to_Smith_PQ \n  where \"diagonal_to_Smith_PQ A bezout \n  = diagonal_to_Smith_aux_PQ  [0..<min (nrows A) (ncols A) - 1] bezout (mat 1, A ,mat 1)\""], ["", "declare diagonal_to_Smith_PQ.simps[simp del]"], ["", "lemmas diagonal_to_Smith_PQ_def = diagonal_to_Smith_PQ.simps"], ["", "lemma diagonal_to_Smith_PQ:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\" and ib: \"is_bezout_ext bezout\"\n  assumes PBQ: \"(P,B,Q) = diagonal_to_Smith_PQ A bezout\"\n  shows \"B = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout", "proof (unfold diagonal_to_Smith_def, rule diagonal_to_Smith_aux_PQ[OF  _ _ _ ib _ A])"], ["proof (state)\ngoal (5 subgoals):\n 1. ?P ** A ** ?Q = A\n 2. invertible ?P\n 3. invertible ?Q\n 4. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (?P, A, ?Q)\n 5. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "let ?P = \"mat 1::'a^'rows::mod_type^'rows::mod_type\""], ["proof (state)\ngoal (5 subgoals):\n 1. ?P ** A ** ?Q = A\n 2. invertible ?P\n 3. invertible ?Q\n 4. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (?P, A, ?Q)\n 5. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "let ?Q = \"mat 1::'a^'cols::mod_type^'cols::mod_type\""], ["proof (state)\ngoal (5 subgoals):\n 1. ?P ** A ** ?Q = A\n 2. invertible ?P\n 3. invertible ?Q\n 4. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (?P, A, ?Q)\n 5. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "show \"(P, B, Q) = diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout (?P, A, ?Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (mat (1::'a), A, mat (1::'a))", "using PBQ"], ["proof (prove)\nusing this:\n  (P, B, Q) = diagonal_to_Smith_PQ A bezout\n\ngoal (1 subgoal):\n 1. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (mat (1::'a), A, mat (1::'a))", "unfolding diagonal_to_Smith_PQ_def"], ["proof (prove)\nusing this:\n  (P, B, Q) =\n  diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n   (mat (1::'a), A, mat (1::'a))\n\ngoal (1 subgoal):\n 1. (P, B, Q) =\n    diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n     (mat (1::'a), A, mat (1::'a))", "."], ["proof (state)\nthis:\n  (P, B, Q) =\n  diagonal_to_Smith_aux_PQ [0..<min (nrows A) (ncols A) - 1] bezout\n   (mat (1::'a), A, mat (1::'a))\n\ngoal (4 subgoals):\n 1. mat (1::'a) ** A ** mat (1::'a) = A\n 2. invertible (mat (1::'a))\n 3. invertible (mat (1::'a))\n 4. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "show \"?P ** A ** ?Q = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (1::'a) ** A ** mat (1::'a) = A", "by simp"], ["proof (state)\nthis:\n  mat (1::'a) ** A ** mat (1::'a) = A\n\ngoal (3 subgoals):\n 1. invertible (mat (1::'a))\n 2. invertible (mat (1::'a))\n 3. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "show \" min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)", "by (metis (no_types, lifting) One_nat_def diff_less dual_order.strict_iff_order le_less_trans \n        min_def mod_type_class.to_nat_less_card ncols_def not_less_eq nrows_not_0 zero_order(1))"], ["proof (state)\nthis:\n  min (nrows A) (ncols A) - 1 < min (nrows A) (ncols A)\n\ngoal (2 subgoals):\n 1. invertible (mat (1::'a))\n 2. invertible (mat (1::'a))", "qed (auto simp add: invertible_mat_1)"], ["", "lemma diagonal_to_Smith_PQ_exists:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\"\n  shows \"\\<exists>P Q. \n         invertible (P::'a^'rows::{mod_type}^'rows::{mod_type}) \n       \\<and> invertible (Q::'a^'cols::{mod_type}^'cols::{mod_type})\n       \\<and> Smith_normal_form (P**A**Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "obtain bezout::\"'a bezout\" where ib: \"is_bezout_ext bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bezout.\n        is_bezout_ext bezout \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using exists_bezout_ext"], ["proof (prove)\nusing this:\n  \\<exists>bezout_ext. is_bezout_ext bezout_ext\n\ngoal (1 subgoal):\n 1. (\\<And>bezout.\n        is_bezout_ext bezout \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "obtain P B Q where PBQ: \"(P,B,Q) = diagonal_to_Smith_PQ A bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P B Q.\n        (P, B, Q) = diagonal_to_Smith_PQ A bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (P, B, Q) = diagonal_to_Smith_PQ A bezout\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "have \"B = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout", "by (rule diagonal_to_Smith_PQ[OF A ib PBQ])"], ["proof (state)\nthis:\n  B = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "moreover"], ["proof (state)\nthis:\n  B = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "have \"Smith_normal_form (P**A**Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form (P ** A ** Q)", "using Smith_normal_form_diagonal_to_Smith assms calculation ib"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_bezout_ext ?bezout; isDiagonal ?A\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form (diagonal_to_Smith ?A ?bezout)\n  isDiagonal A\n  B = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. Smith_normal_form (P ** A ** Q)", "by fastforce"], ["proof (state)\nthis:\n  Smith_normal_form (P ** A ** Q)\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "ultimately"], ["proof (chain)\npicking this:\n  B = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\n  Smith_normal_form (P ** A ** Q)", "show ?thesis"], ["proof (prove)\nusing this:\n  B = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> B = diagonal_to_Smith A bezout\n  Smith_normal_form (P ** A ** Q)\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       invertible P \\<and>\n       invertible Q \\<and> Smith_normal_form (P ** A ** Q)", "by auto"], ["proof (state)\nthis:\n  \\<exists>P Q.\n     invertible P \\<and> invertible Q \\<and> Smith_normal_form (P ** A ** Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>The final soundness theorem\\<close>"], ["", "lemma diagonal_to_Smith_PQ':\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes A: \"isDiagonal A\" and ib: \"is_bezout_ext bezout\"\n  assumes PBQ: \"(P,S,Q) = diagonal_to_Smith_PQ A bezout\"\n  shows \"S = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> Smith_normal_form S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "using A PBQ Smith_normal_form_diagonal_to_Smith diagonal_to_Smith_PQ ib"], ["proof (prove)\nusing this:\n  isDiagonal A\n  (P, S, Q) = diagonal_to_Smith_PQ A bezout\n  \\<lbrakk>is_bezout_ext ?bezout; isDiagonal ?A\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form (diagonal_to_Smith ?A ?bezout)\n  \\<lbrakk>isDiagonal ?A; is_bezout_ext ?bezout;\n   (?P, ?B, ?Q) = diagonal_to_Smith_PQ ?A ?bezout\\<rbrakk>\n  \\<Longrightarrow> ?B = ?P ** ?A ** ?Q \\<and>\n                    invertible ?P \\<and>\n                    invertible ?Q \\<and> ?B = diagonal_to_Smith ?A ?bezout\n  is_bezout_ext bezout\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "by fastforce"], ["", "end"]]}