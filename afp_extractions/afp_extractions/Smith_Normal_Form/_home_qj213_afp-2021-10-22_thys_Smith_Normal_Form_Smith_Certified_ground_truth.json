{"file_name": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form/Smith_Certified.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form", "problem_names": ["theorem checker_SNF_soudness:\n  assumes A: \"A \\<in> carrier_mat m n\"\n    and c: \"checker_SNF A = (P,S,Q)\"\n  shows \"is_SNF A (P,S,Q)\""], "translations": [["", "theorem checker_SNF_soudness:\n  assumes A: \"A \\<in> carrier_mat m n\"\n    and c: \"checker_SNF A = (P,S,Q)\"\n  shows \"is_SNF A (P,S,Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "let ?ext = \"external_SNF (mat_to_list A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "obtain P_ext S_ext Q_ext P'_ext Q'_ext where ext: \"?ext = (P_ext,S_ext,Q_ext,P'_ext,Q'_ext)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P_ext S_ext Q_ext P'_ext Q'_ext.\n        external_SNF (mat_to_list A) =\n        (P_ext, S_ext, Q_ext, P'_ext, Q'_ext) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"?ext\", auto)"], ["proof (state)\nthis:\n  external_SNF (mat_to_list A) = (P_ext, S_ext, Q_ext, P'_ext, Q'_ext)\n\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "let ?case_external = \"let\n          P = mat_of_rows_list m P_ext;\n          S = mat_of_rows_list m S_ext;\n          Q = mat_of_rows_list n Q_ext;\n          P' = mat_of_rows_list m P'_ext;\n          Q' = mat_of_rows_list n Q'_ext in\n            (dim_row P = m \\<and> dim_col P = m\n              \\<and> dim_row S = m \\<and> dim_col S = n\n              \\<and> dim_row Q = n \\<and> dim_col Q = n\n              \\<and> dim_row P' = m \\<and> dim_col P' = m\n              \\<and> dim_row Q' = n \\<and> dim_col Q' = n\n              \\<and> P * P' = 1\\<^sub>m m \\<and> Q * Q' = 1\\<^sub>m n\n              \\<and> Smith_normal_form_mat S \\<and> (S = P*A*Q))\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "proof (cases ?case_external)"], ["proof (state)\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "case True"], ["proof (state)\nthis:\n  let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n      Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n      Q' = mat_of_rows_list n Q'_ext\n  in dim_row P = m \\<and>\n     dim_col P = m \\<and>\n     dim_row S = m \\<and>\n     dim_col S = n \\<and>\n     dim_row Q = n \\<and>\n     dim_col Q = n \\<and>\n     dim_row P' = m \\<and>\n     dim_col P' = m \\<and>\n     dim_row Q' = n \\<and>\n     dim_col Q' = n \\<and>\n     P * P' = 1\\<^sub>m m \\<and>\n     Q * Q' = 1\\<^sub>m n \\<and>\n     Smith_normal_form_mat S \\<and> S = P * A * Q\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "define P' where \"P' = mat_of_rows_list m P'_ext\""], ["proof (state)\nthis:\n  P' = mat_of_rows_list m P'_ext\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "define Q' where \"Q' = mat_of_rows_list m Q'_ext\""], ["proof (state)\nthis:\n  Q' = mat_of_rows_list m Q'_ext\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "have S_PAQ: \"S = P * A * Q \"\n      and SNF_S: \"Smith_normal_form_mat S\" and PP'_1: \"P * P' = 1\\<^sub>m m\" and QQ'_1: \"Q * Q' = 1\\<^sub>m n\"\n      and sm_P: \"square_mat P\" and sm_Q: \"square_mat Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S = P * A * Q &&& Smith_normal_form_mat S &&& P * P' = 1\\<^sub>m m) &&&\n    Q * Q' = 1\\<^sub>m n &&& square_mat P &&& square_mat Q", "using ext True c A"], ["proof (prove)\nusing this:\n  external_SNF (mat_to_list A) = (P_ext, S_ext, Q_ext, P'_ext, Q'_ext)\n  let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n      Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n      Q' = mat_of_rows_list n Q'_ext\n  in dim_row P = m \\<and>\n     dim_col P = m \\<and>\n     dim_row S = m \\<and>\n     dim_col S = n \\<and>\n     dim_row Q = n \\<and>\n     dim_col Q = n \\<and>\n     dim_row P' = m \\<and>\n     dim_col P' = m \\<and>\n     dim_row Q' = n \\<and>\n     dim_col Q' = n \\<and>\n     P * P' = 1\\<^sub>m m \\<and>\n     Q * Q' = 1\\<^sub>m n \\<and>\n     Smith_normal_form_mat S \\<and> S = P * A * Q\n  checker_SNF A = (P, S, Q)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. (S = P * A * Q &&& Smith_normal_form_mat S &&& P * P' = 1\\<^sub>m m) &&&\n    Q * Q' = 1\\<^sub>m n &&& square_mat P &&& square_mat Q", "unfolding checker_SNF_def Let_def mat_of_rows_list_def P'_def Q'_def"], ["proof (prove)\nusing this:\n  external_SNF (mat_to_list A) = (P_ext, S_ext, Q_ext, P'_ext, Q'_ext)\n  dim_row (Matrix.mat (length P_ext) m (\\<lambda>(i, y). P_ext ! i ! y)) =\n  m \\<and>\n  dim_col (Matrix.mat (length P_ext) m (\\<lambda>(i, y). P_ext ! i ! y)) =\n  m \\<and>\n  dim_row (Matrix.mat (length S_ext) m (\\<lambda>(i, y). S_ext ! i ! y)) =\n  m \\<and>\n  dim_col (Matrix.mat (length S_ext) m (\\<lambda>(i, y). S_ext ! i ! y)) =\n  n \\<and>\n  dim_row (Matrix.mat (length Q_ext) n (\\<lambda>(i, y). Q_ext ! i ! y)) =\n  n \\<and>\n  dim_col (Matrix.mat (length Q_ext) n (\\<lambda>(i, y). Q_ext ! i ! y)) =\n  n \\<and>\n  dim_row (Matrix.mat (length P'_ext) m (\\<lambda>(i, y). P'_ext ! i ! y)) =\n  m \\<and>\n  dim_col (Matrix.mat (length P'_ext) m (\\<lambda>(i, y). P'_ext ! i ! y)) =\n  m \\<and>\n  dim_row (Matrix.mat (length Q'_ext) n (\\<lambda>(i, y). Q'_ext ! i ! y)) =\n  n \\<and>\n  dim_col (Matrix.mat (length Q'_ext) n (\\<lambda>(i, y). Q'_ext ! i ! y)) =\n  n \\<and>\n  Matrix.mat (length P_ext) m (\\<lambda>(i, y). P_ext ! i ! y) *\n  Matrix.mat (length P'_ext) m (\\<lambda>(i, y). P'_ext ! i ! y) =\n  1\\<^sub>m m \\<and>\n  Matrix.mat (length Q_ext) n (\\<lambda>(i, y). Q_ext ! i ! y) *\n  Matrix.mat (length Q'_ext) n (\\<lambda>(i, y). Q'_ext ! i ! y) =\n  1\\<^sub>m n \\<and>\n  Smith_normal_form_mat\n   (Matrix.mat (length S_ext) m (\\<lambda>(i, y). S_ext ! i ! y)) \\<and>\n  Matrix.mat (length S_ext) m (\\<lambda>(i, y). S_ext ! i ! y) =\n  Matrix.mat (length P_ext) m (\\<lambda>(i, y). P_ext ! i ! y) * A *\n  Matrix.mat (length Q_ext) n (\\<lambda>(i, y). Q_ext ! i ! y)\n  (case external_SNF (mat_to_list A) of\n   (P_ext, S_ext, Q_ext, P'_ext, Q'_ext) \\<Rightarrow>\n     if dim_row\n         (Matrix.mat (length P_ext) (dim_row A)\n           (\\<lambda>(i, y). P_ext ! i ! y)) =\n        dim_row A \\<and>\n        dim_col\n         (Matrix.mat (length P_ext) (dim_row A)\n           (\\<lambda>(i, y). P_ext ! i ! y)) =\n        dim_row A \\<and>\n        dim_row\n         (Matrix.mat (length S_ext) (dim_row A)\n           (\\<lambda>(i, y). S_ext ! i ! y)) =\n        dim_row A \\<and>\n        dim_col\n         (Matrix.mat (length S_ext) (dim_row A)\n           (\\<lambda>(i, y). S_ext ! i ! y)) =\n        dim_col A \\<and>\n        dim_row\n         (Matrix.mat (length Q_ext) (dim_row A)\n           (\\<lambda>(i, y). Q_ext ! i ! y)) =\n        dim_col A \\<and>\n        dim_col\n         (Matrix.mat (length Q_ext) (dim_row A)\n           (\\<lambda>(i, y). Q_ext ! i ! y)) =\n        dim_col A \\<and>\n        dim_row\n         (Matrix.mat (length P'_ext) (dim_row A)\n           (\\<lambda>(i, y). P'_ext ! i ! y)) =\n        dim_row A \\<and>\n        dim_col\n         (Matrix.mat (length P'_ext) (dim_row A)\n           (\\<lambda>(i, y). P'_ext ! i ! y)) =\n        dim_row A \\<and>\n        dim_row\n         (Matrix.mat (length Q'_ext) (dim_row A)\n           (\\<lambda>(i, y). Q'_ext ! i ! y)) =\n        dim_col A \\<and>\n        dim_col\n         (Matrix.mat (length Q'_ext) (dim_row A)\n           (\\<lambda>(i, y). Q'_ext ! i ! y)) =\n        dim_col A \\<and>\n        Matrix.mat (length P_ext) (dim_row A)\n         (\\<lambda>(i, y). P_ext ! i ! y) *\n        Matrix.mat (length P'_ext) (dim_row A)\n         (\\<lambda>(i, y). P'_ext ! i ! y) =\n        1\\<^sub>m (dim_row A) \\<and>\n        Matrix.mat (length Q_ext) (dim_row A)\n         (\\<lambda>(i, y). Q_ext ! i ! y) *\n        Matrix.mat (length Q'_ext) (dim_row A)\n         (\\<lambda>(i, y). Q'_ext ! i ! y) =\n        1\\<^sub>m (dim_col A) \\<and>\n        Smith_normal_form_mat\n         (Matrix.mat (length S_ext) (dim_row A)\n           (\\<lambda>(i, y). S_ext ! i ! y)) \\<and>\n        Matrix.mat (length S_ext) (dim_row A)\n         (\\<lambda>(i, y). S_ext ! i ! y) =\n        Matrix.mat (length P_ext) (dim_row A)\n         (\\<lambda>(i, y). P_ext ! i ! y) *\n        A *\n        Matrix.mat (length Q_ext) (dim_row A)\n         (\\<lambda>(i, y). Q_ext ! i ! y)\n     then (Matrix.mat (length P_ext) (dim_row A)\n            (\\<lambda>(i, y). P_ext ! i ! y),\n           Matrix.mat (length S_ext) (dim_row A)\n            (\\<lambda>(i, y). S_ext ! i ! y),\n           Matrix.mat (length Q_ext) (dim_row A)\n            (\\<lambda>(i, y). Q_ext ! i ! y))\n     else Code.abort STR ''Certification failed''\n           (\\<lambda>_. Smith_ED_mxn A)) =\n  (P, S, Q)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. (S = P * A * Q &&&\n     Smith_normal_form_mat S &&&\n     P * Matrix.mat (length P'_ext) m (\\<lambda>(i, y). P'_ext ! i ! y) =\n     1\\<^sub>m m) &&&\n    Q * Matrix.mat (length Q'_ext) m (\\<lambda>(i, y). Q'_ext ! i ! y) =\n    1\\<^sub>m n &&&\n    square_mat P &&& square_mat Q", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  S = P * A * Q\n  Smith_normal_form_mat S\n  P * P' = 1\\<^sub>m m\n  Q * Q' = 1\\<^sub>m n\n  square_mat P\n  square_mat Q\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "have inv_P: \"invertible_mat P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat P", "proof (unfold invertible_mat_def, rule conjI, rule sm_P,\n        unfold inverts_mat_def, rule exI[of _ P'], rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. P * P' = 1\\<^sub>m (dim_row P)\n 2. P' * P = 1\\<^sub>m (dim_row P')", "show *: \"P * P' = 1\\<^sub>m (dim_row P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * P' = 1\\<^sub>m (dim_row P)", "by (metis PP'_1 True index_mult_mat(2))"], ["proof (state)\nthis:\n  P * P' = 1\\<^sub>m (dim_row P)\n\ngoal (1 subgoal):\n 1. P' * P = 1\\<^sub>m (dim_row P')", "show \"P' * P = 1\\<^sub>m (dim_row P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' * P = 1\\<^sub>m (dim_row P')", "proof (rule mat_mult_left_right_inverse)"], ["proof (state)\ngoal (3 subgoals):\n 1. P \\<in> carrier_mat (dim_row P') (dim_row P')\n 2. P' \\<in> carrier_mat (dim_row P') (dim_row P')\n 3. P * P' = 1\\<^sub>m (dim_row P')", "show \"P \\<in> carrier_mat (dim_row P') (dim_row P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat (dim_row P') (dim_row P')", "by (metis * P'_def PP'_1 True carrier_mat_triv index_one_mat(2) sm_P square_mat.elims(2))"], ["proof (state)\nthis:\n  P \\<in> carrier_mat (dim_row P') (dim_row P')\n\ngoal (2 subgoals):\n 1. P' \\<in> carrier_mat (dim_row P') (dim_row P')\n 2. P * P' = 1\\<^sub>m (dim_row P')", "show \"P' \\<in> carrier_mat (dim_row P') (dim_row P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<in> carrier_mat (dim_row P') (dim_row P')", "by (metis P'_def True carrier_mat_triv)"], ["proof (state)\nthis:\n  P' \\<in> carrier_mat (dim_row P') (dim_row P')\n\ngoal (1 subgoal):\n 1. P * P' = 1\\<^sub>m (dim_row P')", "show \"P * P' = 1\\<^sub>m (dim_row P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * P' = 1\\<^sub>m (dim_row P')", "by (metis P'_def PP'_1 True)"], ["proof (state)\nthis:\n  P * P' = 1\\<^sub>m (dim_row P')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' * P = 1\\<^sub>m (dim_row P')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible_mat P\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "have inv_Q: \"invertible_mat Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat Q", "proof (unfold invertible_mat_def, rule conjI, rule sm_Q,\n        unfold inverts_mat_def, rule exI[of _ Q'], rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. Q * Q' = 1\\<^sub>m (dim_row Q)\n 2. Q' * Q = 1\\<^sub>m (dim_row Q')", "show *: \"Q * Q' = 1\\<^sub>m (dim_row Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q * Q' = 1\\<^sub>m (dim_row Q)", "by (metis QQ'_1 True index_mult_mat(2))"], ["proof (state)\nthis:\n  Q * Q' = 1\\<^sub>m (dim_row Q)\n\ngoal (1 subgoal):\n 1. Q' * Q = 1\\<^sub>m (dim_row Q')", "show \"Q' * Q = 1\\<^sub>m (dim_row Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q' * Q = 1\\<^sub>m (dim_row Q')", "proof (rule mat_mult_left_right_inverse)"], ["proof (state)\ngoal (3 subgoals):\n 1. Q \\<in> carrier_mat (dim_row Q') (dim_row Q')\n 2. Q' \\<in> carrier_mat (dim_row Q') (dim_row Q')\n 3. Q * Q' = 1\\<^sub>m (dim_row Q')", "show 1: \"Q \\<in> carrier_mat (dim_row Q') (dim_row Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<in> carrier_mat (dim_row Q') (dim_row Q')", "by (metis Q'_def QQ'_1 True carrier_mat_triv dim_row_mat(1) index_mult_mat(2)\n              mat_of_rows_list_def sm_Q square_mat.simps)"], ["proof (state)\nthis:\n  Q \\<in> carrier_mat (dim_row Q') (dim_row Q')\n\ngoal (2 subgoals):\n 1. Q' \\<in> carrier_mat (dim_row Q') (dim_row Q')\n 2. Q * Q' = 1\\<^sub>m (dim_row Q')", "thus \"Q' \\<in> carrier_mat (dim_row Q') (dim_row Q')\""], ["proof (prove)\nusing this:\n  Q \\<in> carrier_mat (dim_row Q') (dim_row Q')\n\ngoal (1 subgoal):\n 1. Q' \\<in> carrier_mat (dim_row Q') (dim_row Q')", "by (metis * carrier_matD(1) carrier_mat_triv index_mult_mat(3) index_one_mat(3))"], ["proof (state)\nthis:\n  Q' \\<in> carrier_mat (dim_row Q') (dim_row Q')\n\ngoal (1 subgoal):\n 1. Q * Q' = 1\\<^sub>m (dim_row Q')", "show \"Q * Q' = 1\\<^sub>m (dim_row Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q * Q' = 1\\<^sub>m (dim_row Q')", "using * 1"], ["proof (prove)\nusing this:\n  Q * Q' = 1\\<^sub>m (dim_row Q)\n  Q \\<in> carrier_mat (dim_row Q') (dim_row Q')\n\ngoal (1 subgoal):\n 1. Q * Q' = 1\\<^sub>m (dim_row Q')", "by auto"], ["proof (state)\nthis:\n  Q * Q' = 1\\<^sub>m (dim_row Q')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q' * Q = 1\\<^sub>m (dim_row Q')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible_mat Q\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "have \"P \\<in> carrier_mat m m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat m m", "by (metis PP'_1 True carrier_matI index_mult_mat(2) sm_P square_mat.simps)"], ["proof (state)\nthis:\n  P \\<in> carrier_mat m m\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "moreover"], ["proof (state)\nthis:\n  P \\<in> carrier_mat m m\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "have  \"Q \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<in> carrier_mat n n", "by (metis QQ'_1 True carrier_matI index_mult_mat(2) sm_Q square_mat.simps)"], ["proof (state)\nthis:\n  Q \\<in> carrier_mat n n\n\ngoal (2 subgoals):\n 1. let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n        Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n        Q' = mat_of_rows_list n Q'_ext\n    in dim_row P = m \\<and>\n       dim_col P = m \\<and>\n       dim_row S = m \\<and>\n       dim_col S = n \\<and>\n       dim_row Q = n \\<and>\n       dim_col Q = n \\<and>\n       dim_row P' = m \\<and>\n       dim_col P' = m \\<and>\n       dim_row Q' = n \\<and>\n       dim_col Q' = n \\<and>\n       P * P' = 1\\<^sub>m m \\<and>\n       Q * Q' = 1\\<^sub>m n \\<and>\n       Smith_normal_form_mat S \\<and> S = P * A * Q \\<Longrightarrow>\n    is_SNF A (P, S, Q)\n 2. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "ultimately"], ["proof (chain)\npicking this:\n  P \\<in> carrier_mat m m\n  Q \\<in> carrier_mat n n", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat m m\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "unfolding is_SNF_def"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat m m\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. case (P, S, Q) of\n    (P, S, Q) \\<Rightarrow>\n      P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n      Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n      invertible_mat P \\<and>\n      invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A * Q", "using inv_P inv_Q SNF_S S_PAQ A"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat m m\n  Q \\<in> carrier_mat n n\n  invertible_mat P\n  invertible_mat Q\n  Smith_normal_form_mat S\n  S = P * A * Q\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. case (P, S, Q) of\n    (P, S, Q) \\<Rightarrow>\n      P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n      Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n      invertible_mat P \\<and>\n      invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A * Q", "by auto"], ["proof (state)\nthis:\n  is_SNF A (P, S, Q)\n\ngoal (1 subgoal):\n 1. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "case False"], ["proof (state)\nthis:\n  \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n              Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n              Q' = mat_of_rows_list n Q'_ext\n          in dim_row P = m \\<and>\n             dim_col P = m \\<and>\n             dim_row S = m \\<and>\n             dim_col S = n \\<and>\n             dim_row Q = n \\<and>\n             dim_col Q = n \\<and>\n             dim_row P' = m \\<and>\n             dim_col P' = m \\<and>\n             dim_row Q' = n \\<and>\n             dim_col Q' = n \\<and>\n             P * P' = 1\\<^sub>m m \\<and>\n             Q * Q' = 1\\<^sub>m n \\<and>\n             Smith_normal_form_mat S \\<and> S = P * A * Q)\n\ngoal (1 subgoal):\n 1. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "hence \"checker_SNF A = Smith_ED_mxn A\""], ["proof (prove)\nusing this:\n  \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n              Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n              Q' = mat_of_rows_list n Q'_ext\n          in dim_row P = m \\<and>\n             dim_col P = m \\<and>\n             dim_row S = m \\<and>\n             dim_col S = n \\<and>\n             dim_row Q = n \\<and>\n             dim_col Q = n \\<and>\n             dim_row P' = m \\<and>\n             dim_col P' = m \\<and>\n             dim_row Q' = n \\<and>\n             dim_col Q' = n \\<and>\n             P * P' = 1\\<^sub>m m \\<and>\n             Q * Q' = 1\\<^sub>m n \\<and>\n             Smith_normal_form_mat S \\<and> S = P * A * Q)\n\ngoal (1 subgoal):\n 1. checker_SNF A = Smith_ED_mxn A", "using ext False c A"], ["proof (prove)\nusing this:\n  \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n              Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n              Q' = mat_of_rows_list n Q'_ext\n          in dim_row P = m \\<and>\n             dim_col P = m \\<and>\n             dim_row S = m \\<and>\n             dim_col S = n \\<and>\n             dim_row Q = n \\<and>\n             dim_col Q = n \\<and>\n             dim_row P' = m \\<and>\n             dim_col P' = m \\<and>\n             dim_row Q' = n \\<and>\n             dim_col Q' = n \\<and>\n             P * P' = 1\\<^sub>m m \\<and>\n             Q * Q' = 1\\<^sub>m n \\<and>\n             Smith_normal_form_mat S \\<and> S = P * A * Q)\n  external_SNF (mat_to_list A) = (P_ext, S_ext, Q_ext, P'_ext, Q'_ext)\n  \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n              Q = mat_of_rows_list n Q_ext; P' = mat_of_rows_list m P'_ext;\n              Q' = mat_of_rows_list n Q'_ext\n          in dim_row P = m \\<and>\n             dim_col P = m \\<and>\n             dim_row S = m \\<and>\n             dim_col S = n \\<and>\n             dim_row Q = n \\<and>\n             dim_col Q = n \\<and>\n             dim_row P' = m \\<and>\n             dim_col P' = m \\<and>\n             dim_row Q' = n \\<and>\n             dim_col Q' = n \\<and>\n             P * P' = 1\\<^sub>m m \\<and>\n             Q * Q' = 1\\<^sub>m n \\<and>\n             Smith_normal_form_mat S \\<and> S = P * A * Q)\n  checker_SNF A = (P, S, Q)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. checker_SNF A = Smith_ED_mxn A", "unfolding checker_SNF_def Let_def Code.abort_def"], ["proof (prove)\nusing this:\n  \\<not> (dim_row (mat_of_rows_list m P_ext) = m \\<and>\n          dim_col (mat_of_rows_list m P_ext) = m \\<and>\n          dim_row (mat_of_rows_list m S_ext) = m \\<and>\n          dim_col (mat_of_rows_list m S_ext) = n \\<and>\n          dim_row (mat_of_rows_list n Q_ext) = n \\<and>\n          dim_col (mat_of_rows_list n Q_ext) = n \\<and>\n          dim_row (mat_of_rows_list m P'_ext) = m \\<and>\n          dim_col (mat_of_rows_list m P'_ext) = m \\<and>\n          dim_row (mat_of_rows_list n Q'_ext) = n \\<and>\n          dim_col (mat_of_rows_list n Q'_ext) = n \\<and>\n          mat_of_rows_list m P_ext * mat_of_rows_list m P'_ext =\n          1\\<^sub>m m \\<and>\n          mat_of_rows_list n Q_ext * mat_of_rows_list n Q'_ext =\n          1\\<^sub>m n \\<and>\n          Smith_normal_form_mat (mat_of_rows_list m S_ext) \\<and>\n          mat_of_rows_list m S_ext =\n          mat_of_rows_list m P_ext * A * mat_of_rows_list n Q_ext)\n  external_SNF (mat_to_list A) = (P_ext, S_ext, Q_ext, P'_ext, Q'_ext)\n  \\<not> (dim_row (mat_of_rows_list m P_ext) = m \\<and>\n          dim_col (mat_of_rows_list m P_ext) = m \\<and>\n          dim_row (mat_of_rows_list m S_ext) = m \\<and>\n          dim_col (mat_of_rows_list m S_ext) = n \\<and>\n          dim_row (mat_of_rows_list n Q_ext) = n \\<and>\n          dim_col (mat_of_rows_list n Q_ext) = n \\<and>\n          dim_row (mat_of_rows_list m P'_ext) = m \\<and>\n          dim_col (mat_of_rows_list m P'_ext) = m \\<and>\n          dim_row (mat_of_rows_list n Q'_ext) = n \\<and>\n          dim_col (mat_of_rows_list n Q'_ext) = n \\<and>\n          mat_of_rows_list m P_ext * mat_of_rows_list m P'_ext =\n          1\\<^sub>m m \\<and>\n          mat_of_rows_list n Q_ext * mat_of_rows_list n Q'_ext =\n          1\\<^sub>m n \\<and>\n          Smith_normal_form_mat (mat_of_rows_list m S_ext) \\<and>\n          mat_of_rows_list m S_ext =\n          mat_of_rows_list m P_ext * A * mat_of_rows_list n Q_ext)\n  (case external_SNF (mat_to_list A) of\n   (P_ext, S_ext, Q_ext, P'_ext, Q'_ext) \\<Rightarrow>\n     if dim_row (mat_of_rows_list (dim_row A) P_ext) = dim_row A \\<and>\n        dim_col (mat_of_rows_list (dim_row A) P_ext) = dim_row A \\<and>\n        dim_row (mat_of_rows_list (dim_row A) S_ext) = dim_row A \\<and>\n        dim_col (mat_of_rows_list (dim_row A) S_ext) = dim_col A \\<and>\n        dim_row (mat_of_rows_list (dim_row A) Q_ext) = dim_col A \\<and>\n        dim_col (mat_of_rows_list (dim_row A) Q_ext) = dim_col A \\<and>\n        dim_row (mat_of_rows_list (dim_row A) P'_ext) = dim_row A \\<and>\n        dim_col (mat_of_rows_list (dim_row A) P'_ext) = dim_row A \\<and>\n        dim_row (mat_of_rows_list (dim_row A) Q'_ext) = dim_col A \\<and>\n        dim_col (mat_of_rows_list (dim_row A) Q'_ext) = dim_col A \\<and>\n        mat_of_rows_list (dim_row A) P_ext *\n        mat_of_rows_list (dim_row A) P'_ext =\n        1\\<^sub>m (dim_row A) \\<and>\n        mat_of_rows_list (dim_row A) Q_ext *\n        mat_of_rows_list (dim_row A) Q'_ext =\n        1\\<^sub>m (dim_col A) \\<and>\n        Smith_normal_form_mat (mat_of_rows_list (dim_row A) S_ext) \\<and>\n        mat_of_rows_list (dim_row A) S_ext =\n        mat_of_rows_list (dim_row A) P_ext * A *\n        mat_of_rows_list (dim_row A) Q_ext\n     then (mat_of_rows_list (dim_row A) P_ext,\n           mat_of_rows_list (dim_row A) S_ext,\n           mat_of_rows_list (dim_row A) Q_ext)\n     else Smith_ED_mxn A) =\n  (P, S, Q)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. (case external_SNF (mat_to_list A) of\n     (P_ext, S_ext, Q_ext, P'_ext, Q'_ext) \\<Rightarrow>\n       if dim_row (mat_of_rows_list (dim_row A) P_ext) = dim_row A \\<and>\n          dim_col (mat_of_rows_list (dim_row A) P_ext) = dim_row A \\<and>\n          dim_row (mat_of_rows_list (dim_row A) S_ext) = dim_row A \\<and>\n          dim_col (mat_of_rows_list (dim_row A) S_ext) = dim_col A \\<and>\n          dim_row (mat_of_rows_list (dim_row A) Q_ext) = dim_col A \\<and>\n          dim_col (mat_of_rows_list (dim_row A) Q_ext) = dim_col A \\<and>\n          dim_row (mat_of_rows_list (dim_row A) P'_ext) = dim_row A \\<and>\n          dim_col (mat_of_rows_list (dim_row A) P'_ext) = dim_row A \\<and>\n          dim_row (mat_of_rows_list (dim_row A) Q'_ext) = dim_col A \\<and>\n          dim_col (mat_of_rows_list (dim_row A) Q'_ext) = dim_col A \\<and>\n          mat_of_rows_list (dim_row A) P_ext *\n          mat_of_rows_list (dim_row A) P'_ext =\n          1\\<^sub>m (dim_row A) \\<and>\n          mat_of_rows_list (dim_row A) Q_ext *\n          mat_of_rows_list (dim_row A) Q'_ext =\n          1\\<^sub>m (dim_col A) \\<and>\n          Smith_normal_form_mat (mat_of_rows_list (dim_row A) S_ext) \\<and>\n          mat_of_rows_list (dim_row A) S_ext =\n          mat_of_rows_list (dim_row A) P_ext * A *\n          mat_of_rows_list (dim_row A) Q_ext\n       then (mat_of_rows_list (dim_row A) P_ext,\n             mat_of_rows_list (dim_row A) S_ext,\n             mat_of_rows_list (dim_row A) Q_ext)\n       else Smith_ED_mxn A) =\n    Smith_ED_mxn A", "by (smt carrier_matD case_prod_conv dim_col_mat(1) mat_of_rows_list_def)"], ["proof (state)\nthis:\n  checker_SNF A = Smith_ED_mxn A\n\ngoal (1 subgoal):\n 1. \\<not> (let P = mat_of_rows_list m P_ext; S = mat_of_rows_list m S_ext;\n                Q = mat_of_rows_list n Q_ext;\n                P' = mat_of_rows_list m P'_ext;\n                Q' = mat_of_rows_list n Q'_ext\n            in dim_row P = m \\<and>\n               dim_col P = m \\<and>\n               dim_row S = m \\<and>\n               dim_col S = n \\<and>\n               dim_row Q = n \\<and>\n               dim_col Q = n \\<and>\n               dim_row P' = m \\<and>\n               dim_col P' = m \\<and>\n               dim_row Q' = n \\<and>\n               dim_col Q' = n \\<and>\n               P * P' = 1\\<^sub>m m \\<and>\n               Q * Q' = 1\\<^sub>m n \\<and>\n               Smith_normal_form_mat S \\<and>\n               S = P * A * Q) \\<Longrightarrow>\n    is_SNF A (P, S, Q)", "then"], ["proof (chain)\npicking this:\n  checker_SNF A = Smith_ED_mxn A", "show ?thesis"], ["proof (prove)\nusing this:\n  checker_SNF A = Smith_ED_mxn A\n\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "using Smith_ED.is_SNF_Smith_mxn[OF A] c"], ["proof (prove)\nusing this:\n  checker_SNF A = Smith_ED_mxn A\n  is_SNF A (Smith_ED_mxn A)\n  checker_SNF A = (P, S, Q)\n\ngoal (1 subgoal):\n 1. is_SNF A (P, S, Q)", "unfolding is_SNF_def"], ["proof (prove)\nusing this:\n  checker_SNF A = Smith_ED_mxn A\n  case Smith_ED_mxn A of\n  (P, S, Q) \\<Rightarrow>\n    P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n    Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n    invertible_mat P \\<and>\n    invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A * Q\n  checker_SNF A = (P, S, Q)\n\ngoal (1 subgoal):\n 1. case (P, S, Q) of\n    (P, S, Q) \\<Rightarrow>\n      P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n      Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n      invertible_mat P \\<and>\n      invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A * Q", "by auto"], ["proof (state)\nthis:\n  is_SNF A (P, S, Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_SNF A (P, S, Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}