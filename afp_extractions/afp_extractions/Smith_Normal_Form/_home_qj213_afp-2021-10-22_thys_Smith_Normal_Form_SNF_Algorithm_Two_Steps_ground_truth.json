{"file_name": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form/SNF_Algorithm_Two_Steps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form", "problem_names": ["lemma Smith_normal_form_of_soundness:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes b: \"is_bezout_ext bezout\"\n  assumes PSQ: \"(P,S,Q) = Smith_normal_form_of A bezout\"\n  shows \"S = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> Smith_normal_form S\""], "translations": [["", "lemma Smith_normal_form_of_soundness:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\" \n  assumes b: \"is_bezout_ext bezout\"\n  assumes PSQ: \"(P,S,Q) = Smith_normal_form_of A bezout\"\n  shows \"S = P**A**Q \\<and> invertible P \\<and> invertible Q \\<and> Smith_normal_form S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "obtain P'' D Q'' where PDQ_diag: \"(P'',D,Q'') = diagonalize A bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P'' D Q''.\n        (P'', D, Q'') = local.diagonalize A bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (P'', D, Q'') = local.diagonalize A bezout\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have 1: \"invertible P'' \\<and> invertible Q'' \\<and> isDiagonal D \\<and> D = P''**A**Q''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible P'' \\<and>\n    invertible Q'' \\<and> isDiagonal D \\<and> D = P'' ** A ** Q''", "by (rule soundness_diagonalize[OF b PDQ_diag[symmetric]])"], ["proof (state)\nthis:\n  invertible P'' \\<and>\n  invertible Q'' \\<and> isDiagonal D \\<and> D = P'' ** A ** Q''\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "obtain P' Q' where PSQ_D: \"(P',S,Q') = diagonal_to_Smith_PQ D bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        (P', S, Q') = diagonal_to_Smith_PQ D bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using PSQ PDQ_diag"], ["proof (prove)\nusing this:\n  (P, S, Q) = Smith_normal_form_of A bezout\n  (P'', D, Q'') = local.diagonalize A bezout\n\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        (P', S, Q') = diagonal_to_Smith_PQ D bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Smith_normal_form_of_def"], ["proof (prove)\nusing this:\n  (P, S, Q) =\n  (let (P'', D, Q'') = local.diagonalize A bezout;\n       (P', S, Q') = diagonal_to_Smith_PQ D bezout\n   in (P' ** P'', S, Q'' ** Q'))\n  (P'', D, Q'') = local.diagonalize A bezout\n\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        (P', S, Q') = diagonal_to_Smith_PQ D bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Let_def"], ["proof (prove)\nusing this:\n  (P, S, Q) =\n  (case local.diagonalize A bezout of\n   (P'', D, Q'') \\<Rightarrow>\n     case diagonal_to_Smith_PQ D bezout of\n     (P', S, Q') \\<Rightarrow> (P' ** P'', S, Q'' ** Q'))\n  (P'', D, Q'') = local.diagonalize A bezout\n\ngoal (1 subgoal):\n 1. (\\<And>P' Q'.\n        (P', S, Q') = diagonal_to_Smith_PQ D bezout \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt Pair_inject case_prod_beta' surjective_pairing)"], ["proof (state)\nthis:\n  (P', S, Q') = diagonal_to_Smith_PQ D bezout\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have 2: \"invertible P' \\<and> invertible Q' \\<and> Smith_normal_form S \\<and> S = P'**D**Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible P' \\<and>\n    invertible Q' \\<and> Smith_normal_form S \\<and> S = P' ** D ** Q'", "using diagonal_to_Smith_PQ' 1 b PSQ_D"], ["proof (prove)\nusing this:\n  \\<lbrakk>isDiagonal ?A; is_bezout_ext ?bezout;\n   (?P, ?S, ?Q) = diagonal_to_Smith_PQ ?A ?bezout\\<rbrakk>\n  \\<Longrightarrow> ?S = ?P ** ?A ** ?Q \\<and>\n                    invertible ?P \\<and>\n                    invertible ?Q \\<and> Smith_normal_form ?S\n  invertible P'' \\<and>\n  invertible Q'' \\<and> isDiagonal D \\<and> D = P'' ** A ** Q''\n  is_bezout_ext bezout\n  (P', S, Q') = diagonal_to_Smith_PQ D bezout\n\ngoal (1 subgoal):\n 1. invertible P' \\<and>\n    invertible Q' \\<and> Smith_normal_form S \\<and> S = P' ** D ** Q'", "by blast"], ["proof (state)\nthis:\n  invertible P' \\<and>\n  invertible Q' \\<and> Smith_normal_form S \\<and> S = P' ** D ** Q'\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have P: \"P = P'**P''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = P' ** P''", "by (metis (mono_tags, lifting) PDQ_diag PSQ_D Pair_inject \n        Smith_normal_form_of_def PSQ old.prod.case)"], ["proof (state)\nthis:\n  P = P' ** P''\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have Q: \"Q = Q''**Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q = Q'' ** Q'", "by (metis (mono_tags, lifting) PDQ_diag PSQ_D Pair_inject \n        Smith_normal_form_of_def PSQ old.prod.case)"], ["proof (state)\nthis:\n  Q = Q'' ** Q'\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have \"S = P**A**Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = P ** A ** Q", "using 1 2"], ["proof (prove)\nusing this:\n  invertible P'' \\<and>\n  invertible Q'' \\<and> isDiagonal D \\<and> D = P'' ** A ** Q''\n  invertible P' \\<and>\n  invertible Q' \\<and> Smith_normal_form S \\<and> S = P' ** D ** Q'\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q", "by (simp add: P Q matrix_mul_assoc)"], ["proof (state)\nthis:\n  S = P ** A ** Q\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "moreover"], ["proof (state)\nthis:\n  S = P ** A ** Q\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have \"invertible P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible P", "using P"], ["proof (prove)\nusing this:\n  P = P' ** P''\n\ngoal (1 subgoal):\n 1. invertible P", "by (simp add: 1 2 invertible_mult)"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "moreover"], ["proof (state)\nthis:\n  invertible P\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "have \"invertible Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible Q", "using Q"], ["proof (prove)\nusing this:\n  Q = Q'' ** Q'\n\ngoal (1 subgoal):\n 1. invertible Q", "by (simp add: 1 2 invertible_mult)"], ["proof (state)\nthis:\n  invertible Q\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "ultimately"], ["proof (chain)\npicking this:\n  S = P ** A ** Q\n  invertible P\n  invertible Q", "show ?thesis"], ["proof (prove)\nusing this:\n  S = P ** A ** Q\n  invertible P\n  invertible Q\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "using 2"], ["proof (prove)\nusing this:\n  S = P ** A ** Q\n  invertible P\n  invertible Q\n  invertible P' \\<and>\n  invertible Q' \\<and> Smith_normal_form S \\<and> S = P' ** D ** Q'\n\ngoal (1 subgoal):\n 1. S = P ** A ** Q \\<and>\n    invertible P \\<and> invertible Q \\<and> Smith_normal_form S", "by auto"], ["proof (state)\nthis:\n  S = P ** A ** Q \\<and>\n  invertible P \\<and> invertible Q \\<and> Smith_normal_form S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}