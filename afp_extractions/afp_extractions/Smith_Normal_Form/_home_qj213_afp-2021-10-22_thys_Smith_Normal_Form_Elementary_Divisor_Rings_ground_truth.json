{"file_name": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form/Elementary_Divisor_Rings.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smith_Normal_Form", "problem_names": ["lemma admits_triangular_reduction_intro:\n  assumes \"invertible_mat (U::'a::comm_ring_1 mat)\" \n    and \"U \\<in> carrier_mat (dim_col A) (dim_col A)\"\n    and \"lower_triangular (A*U)\"\n  shows \"admits_triangular_reduction A\"", "lemma OFCLASS_Hermite_ring_def:\n  \"OFCLASS('a::comm_ring_1, Hermite_ring_class) \n  \\<equiv> (\\<And>(A::'a::comm_ring_1 mat). admits_triangular_reduction A)\"", "lemma admits_diagonal_reduction_intro:\n  assumes \"P \\<in> carrier_mat (dim_row A) (dim_row A)\"\n    and \"Q \\<in> carrier_mat (dim_col A) (dim_col A)\" \n    and \"invertible_mat P\" and \"invertible_mat Q \"\n    and \"Smith_normal_form_mat (P * A * Q)\"\n  shows \"admits_diagonal_reduction A\"", "lemma admits_diagonal_reduction_imp_exists_algorithm_is_SNF:\n  assumes \"A \\<in> carrier_mat m n\"\n  and \"admits_diagonal_reduction A\"\nshows \"\\<exists>algorithm. is_SNF A (algorithm A)\"", "lemma exists_algorithm_is_SNF_imp_admits_diagonal_reduction:\n  assumes \"A \\<in> carrier_mat m n\"\n  and \"\\<exists>algorithm. is_SNF A (algorithm A)\"\n  shows \"admits_diagonal_reduction A\"", "lemma admits_diagonal_reduction_eq_exists_algorithm_is_SNF:\n  assumes A: \"A \\<in> carrier_mat m n\"\n  shows \"admits_diagonal_reduction A = (\\<exists>algorithm. is_SNF A (algorithm A))\"", "lemma admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all:\n  assumes \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A)\" \n  shows\" (\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\"", "lemma exists_algorithm_is_SNF_imp_admits_diagonal_reduction_all:\n  assumes \"(\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\"\n  shows \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A)\"", "lemma admits_diagonal_reduction_eq_exists_algorithm_is_SNF_all:\n  shows \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A) \n  = (\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\"", "lemma dim_row_mat_diag[simp]: \"dim_row (mat_diag n f) = n\" and \n      dim_col_mat_diag[simp]: \"dim_col (mat_diag n f) = n\"", "lemma Hermite_ring_imp_Bezout_ring:\n  assumes H: \"OFCLASS('a::comm_ring_1, Hermite_ring_class)\"\n  shows \" OFCLASS('a::comm_ring_1, bezout_ring_class)\"", "lemma triangularizable_m0:\nassumes A: \"A \\<in> carrier_mat m 0\" \nshows \"\\<exists>U. U \\<in> carrier_mat 0 0 \\<and> invertible_mat U \\<and> lower_triangular (A * U)\"", "lemma triangularizable_0n:\nassumes A: \"A \\<in> carrier_mat 0 n\" \nshows \"\\<exists>U. U \\<in> carrier_mat n n \\<and> invertible_mat U \\<and> lower_triangular (A * U)\"", "lemma diagonal_imp_triangular_1x2:\n  assumes A: \"A \\<in> carrier_mat 1 2\" and d: \"admits_diagonal_reduction (A::'a mat)\"\n  shows \"admits_triangular_reduction A\"", "lemma triangular_imp_diagonal_1x2:\nassumes A: \"A \\<in> carrier_mat 1 2\" and t: \"admits_triangular_reduction (A::'a mat)\"\nshows \"admits_diagonal_reduction A\"", "lemma triangular_eq_diagonal_1x2:\n \"(\\<forall>A\\<in>carrier_mat 1 2. admits_triangular_reduction (A::'a mat)) \n  = (\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat))\"", "lemma admits_triangular_mat_1x1:\n  assumes A: \"A \\<in> carrier_mat 1 1\"\n  shows \"admits_triangular_reduction (A::'a mat)\"", "lemma admits_diagonal_mat_1x1:\n  assumes A: \"A \\<in> carrier_mat 1 1\"\n  shows \"admits_diagonal_reduction (A::'a mat)\"", "lemma admits_diagonal_imp_admits_triangular_1xn:\n  assumes a: \"\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat)\"\n  shows \"\\<forall>A\\<in>carrier_mat 1 n. admits_triangular_reduction (A::'a mat)\"", "lemma admits_diagonal_imp_admits_triangular:\n  assumes a: \"\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat)\"\n  shows \"\\<forall>A. admits_triangular_reduction (A::'a mat)\"", "lemma admits_triangular_reduction_1x2:\n  assumes \"\\<forall>A::'a mat. A \\<in> carrier_mat 1 2 \\<longrightarrow> admits_triangular_reduction A\"\n  shows \"\\<forall>C::'a mat. admits_triangular_reduction C\"", "lemma Hermite_ring_OFCLASS:\n assumes \"\\<forall>A \\<in> carrier_mat 1 2. admits_triangular_reduction (A::'a mat)\"\n shows \"OFCLASS('a, Hermite_ring_class)\"", "lemma Hermite_ring_OFCLASS':\n assumes \"\\<forall>A \\<in> carrier_mat 1 2.admits_diagonal_reduction (A::'a mat)\"\n shows \"OFCLASS('a, Hermite_ring_class)\"", "lemma theorem3_part1:\n  assumes T: \"(\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \n    \\<and> ideal_generated {a1,b1} = ideal_generated {1})\"\n  shows \"\\<forall>A::'a mat. admits_triangular_reduction A\"", "lemma theorem3_part2:\n  assumes 1: \"\\<forall>A::'a mat. admits_triangular_reduction A\"\n  shows \"\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \\<and> ideal_generated {a1,b1} = ideal_generated {1}\"", "theorem theorem3:\n  shows \"(\\<forall>A::'a mat. admits_triangular_reduction A)\n  = (\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \\<and> ideal_generated {a1,b1} = ideal_generated {1})\"", "lemma lemma4_prev:\n  assumes a: \"a = a1*d\" and b: \"b = b1*d\"\n  and i: \"ideal_generated {a1,b1} = ideal_generated {1}\"\nshows \"ideal_generated {a,b} = ideal_generated {d}\"", "lemma lemma4:\n  assumes a: \"a = a1*d\" and b: \"b = b1*d\"\n    and i: \"ideal_generated {a1,b1} = ideal_generated {1}\"\n    and i2: \"ideal_generated {a,b} = ideal_generated {d'}\"\n  shows \"\\<exists>a1' b1'. a = a1' * d' \\<and> b = b1' * d' \n    \\<and> ideal_generated {a1',b1'} = ideal_generated {1}\"", "lemma corollary5:\n  assumes T: \"\\<forall>a b. \\<exists>a1 b1 d. a = a1 * d \\<and> b = b1 * d \n        \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\"\n and i2: \"ideal_generated {a,b,c} = ideal_generated {d}\"\n  shows \"\\<exists> a1 b1 c1. a = a1 * d \\<and> b = b1 * d \\<and> c = c1 * d \n  \\<and> ideal_generated {a1,b1,c1} = ideal_generated {1}\"", "lemma OFCLASS_elementary_divisor_ring_imp_class:\n  assumes \"OFCLASS('a::comm_ring_1, elementary_divisor_ring_class)\"\n  shows \" class.elementary_divisor_ring TYPE('a)\"", "lemma necessity_D': \n  assumes edr: \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\"\n  shows \"\\<forall>a b c::'a. ideal_generated {a,b,c} = ideal_generated{1} \n  \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\"", "lemma necessity:\n  assumes \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\"\n  shows \"(\\<forall>(A::'a mat). admits_triangular_reduction A)\"\n and \"\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n  \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\"", "lemma sufficiency:\n  assumes hermite_ring: \"(\\<forall>(A::'a mat). admits_triangular_reduction A)\"\n    and D': \"\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n    \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\"\n  shows \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\"", "theorem edr_characterization:\n  \"(\\<forall>(A::'a mat). admits_diagonal_reduction A) = ((\\<forall>(A::'a mat). admits_triangular_reduction A) \n  \\<and> (\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n                      \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})))\""], "translations": [["", "lemma admits_triangular_reduction_intro:\n  assumes \"invertible_mat (U::'a::comm_ring_1 mat)\" \n    and \"U \\<in> carrier_mat (dim_col A) (dim_col A)\"\n    and \"lower_triangular (A*U)\"\n  shows \"admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "using assms"], ["proof (prove)\nusing this:\n  invertible_mat U\n  U \\<in> carrier_mat (dim_col A) (dim_col A)\n  lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  invertible_mat U\n  U \\<in> carrier_mat (dim_col A) (dim_col A)\n  lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by auto"], ["", "lemma OFCLASS_Hermite_ring_def:\n  \"OFCLASS('a::comm_ring_1, Hermite_ring_class) \n  \\<equiv> (\\<And>(A::'a::comm_ring_1 mat). admits_triangular_reduction A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) \\<equiv>\n    (\\<And>A. admits_triangular_reduction A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       OFCLASS('a, Hermite_ring_class) \\<Longrightarrow>\n       admits_triangular_reduction A\n 2. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "fix A::\"'a mat\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       OFCLASS('a, Hermite_ring_class) \\<Longrightarrow>\n       admits_triangular_reduction A\n 2. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "assume H: \"OFCLASS('a::comm_ring_1, Hermite_ring_class)\""], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       OFCLASS('a, Hermite_ring_class) \\<Longrightarrow>\n       admits_triangular_reduction A\n 2. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "have \"\\<forall>A. admits_triangular_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using conjunctionD2[OF H[unfolded Hermite_ring_class_def class.Hermite_ring_def]]"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       OFCLASS('a, Hermite_ring_class) \\<Longrightarrow>\n       admits_triangular_reduction A\n 2. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "thus \"admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "assume i: \"(\\<And>A::'a mat. admits_triangular_reduction A)\""], ["proof (state)\nthis:\n  admits_triangular_reduction ?A\n\ngoal (1 subgoal):\n 1. (\\<And>A. admits_triangular_reduction A) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class)", "show \"OFCLASS('a, Hermite_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "show \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using i"], ["proof (prove)\nusing this:\n  admits_triangular_reduction ?A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition admits_diagonal_reduction::\"'a::comm_ring_1 mat \\<Rightarrow> bool\"\n  where \"admits_diagonal_reduction A = (\\<exists>P Q. P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n        Q \\<in> carrier_mat (dim_col A) (dim_col A) \n        \\<and> invertible_mat P \\<and> invertible_mat Q \n        \\<and> Smith_normal_form_mat (P * A * Q))\""], ["", "lemma admits_diagonal_reduction_intro:\n  assumes \"P \\<in> carrier_mat (dim_row A) (dim_row A)\"\n    and \"Q \\<in> carrier_mat (dim_col A) (dim_col A)\" \n    and \"invertible_mat P\" and \"invertible_mat Q \"\n    and \"Smith_normal_form_mat (P * A * Q)\"\n  shows \"admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "using assms"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  invertible_mat P\n  invertible_mat Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "unfolding admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  invertible_mat P\n  invertible_mat Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n       Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat P \\<and>\n       invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)", "by fast"], ["", "(*Lemmas for equivalence between admits_diagonal_reduction and is_SNF \n  via the existence of an algorithm*)"], ["", "lemma admits_diagonal_reduction_imp_exists_algorithm_is_SNF:\n  assumes \"A \\<in> carrier_mat m n\"\n  and \"admits_diagonal_reduction A\"\nshows \"\\<exists>algorithm. is_SNF A (algorithm A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>algorithm. is_SNF A (algorithm A)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n  admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<exists>algorithm. is_SNF A (algorithm A)", "unfolding is_SNF_def admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n  \\<exists>P Q.\n     P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n     Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat P \\<and>\n     invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. \\<exists>algorithm.\n       case algorithm A of\n       (P, S, Q) \\<Rightarrow>\n         P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n         Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n         invertible_mat P \\<and>\n         invertible_mat Q \\<and>\n         Smith_normal_form_mat S \\<and> S = P * A * Q", "by auto"], ["", "lemma exists_algorithm_is_SNF_imp_admits_diagonal_reduction:\n  assumes \"A \\<in> carrier_mat m n\"\n  and \"\\<exists>algorithm. is_SNF A (algorithm A)\"\n  shows \"admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n  \\<exists>algorithm. is_SNF A (algorithm A)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "unfolding is_SNF_def admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n  \\<exists>algorithm.\n     case algorithm A of\n     (P, S, Q) \\<Rightarrow>\n       P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n       Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat P \\<and>\n       invertible_mat Q \\<and> Smith_normal_form_mat S \\<and> S = P * A * Q\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n       Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat P \\<and>\n       invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)", "by auto"], ["", "lemma admits_diagonal_reduction_eq_exists_algorithm_is_SNF:\n  assumes A: \"A \\<in> carrier_mat m n\"\n  shows \"admits_diagonal_reduction A = (\\<exists>algorithm. is_SNF A (algorithm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A =\n    (\\<exists>algorithm. is_SNF A (algorithm A))", "using admits_diagonal_reduction_imp_exists_algorithm_is_SNF[OF A]"], ["proof (prove)\nusing this:\n  admits_diagonal_reduction A \\<Longrightarrow>\n  \\<exists>algorithm. is_SNF A (algorithm A)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A =\n    (\\<exists>algorithm. is_SNF A (algorithm A))", "using exists_algorithm_is_SNF_imp_admits_diagonal_reduction[OF A]"], ["proof (prove)\nusing this:\n  admits_diagonal_reduction A \\<Longrightarrow>\n  \\<exists>algorithm. is_SNF A (algorithm A)\n  \\<exists>algorithm. is_SNF A (algorithm A) \\<Longrightarrow>\n  admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A =\n    (\\<exists>algorithm. is_SNF A (algorithm A))", "by auto"], ["", "lemma admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all:\n  assumes \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A)\" \n  shows\" (\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>algorithm.\n       \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>algorithm.\n       \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)", "let ?algorithm = \"\\<lambda>A. SOME (P, S, Q). is_SNF A (P,S,Q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>algorithm.\n       \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>algorithm.\n       \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)", "by (rule exI[of _ ?algorithm]) (metis (no_types, lifting) \n        admits_diagonal_reduction_imp_exists_algorithm_is_SNF assms case_prod_beta prod.collapse someI)"], ["proof (state)\nthis:\n  \\<exists>algorithm. \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exists_algorithm_is_SNF_imp_admits_diagonal_reduction_all:\n  assumes \"(\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\"\n  shows \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat m n. admits_diagonal_reduction A", "using assms exists_algorithm_is_SNF_imp_admits_diagonal_reduction"], ["proof (prove)\nusing this:\n  \\<exists>algorithm. \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A)\n  \\<lbrakk>?A \\<in> carrier_mat ?m ?n;\n   \\<exists>algorithm. is_SNF ?A (algorithm ?A)\\<rbrakk>\n  \\<Longrightarrow> admits_diagonal_reduction ?A\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat m n. admits_diagonal_reduction A", "by blast"], ["", "lemma admits_diagonal_reduction_eq_exists_algorithm_is_SNF_all:\n  shows \"(\\<forall>(A::'a::comm_ring_1 mat) \\<in> carrier_mat m n. admits_diagonal_reduction A) \n  = (\\<exists>algorithm. \\<forall>(A::'a mat) \\<in> carrier_mat m n. is_SNF A (algorithm A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A\\<in>carrier_mat m n. admits_diagonal_reduction A) =\n    (\\<exists>algorithm.\n        \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A))", "using exists_algorithm_is_SNF_imp_admits_diagonal_reduction_all"], ["proof (prove)\nusing this:\n  \\<exists>algorithm.\n     \\<forall>A\\<in>carrier_mat ?m ?n.\n        is_SNF A (algorithm A) \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat ?m ?n. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. (\\<forall>A\\<in>carrier_mat m n. admits_diagonal_reduction A) =\n    (\\<exists>algorithm.\n        \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A))", "using admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all"], ["proof (prove)\nusing this:\n  \\<exists>algorithm.\n     \\<forall>A\\<in>carrier_mat ?m ?n.\n        is_SNF A (algorithm A) \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat ?m ?n. admits_diagonal_reduction A\n  \\<forall>A\\<in>carrier_mat ?m ?n.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<exists>algorithm.\n     \\<forall>A\\<in>carrier_mat ?m ?n. is_SNF A (algorithm A)\n\ngoal (1 subgoal):\n 1. (\\<forall>A\\<in>carrier_mat m n. admits_diagonal_reduction A) =\n    (\\<exists>algorithm.\n        \\<forall>A\\<in>carrier_mat m n. is_SNF A (algorithm A))", "by auto"], ["", "subsection \\<open>The class that represents elementary divisor rings\\<close>"], ["", "class elementary_divisor_ring =\n  assumes \"\\<forall>(A::'a::comm_ring_1 mat). admits_diagonal_reduction A\""], ["", "lemma dim_row_mat_diag[simp]: \"dim_row (mat_diag n f) = n\" and \n      dim_col_mat_diag[simp]: \"dim_col (mat_diag n f) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat_diag n f) = n &&& dim_col (mat_diag n f) = n", "using mat_diag_dim"], ["proof (prove)\nusing this:\n  mat_diag ?n ?f \\<in> carrier_mat ?n ?n\n\ngoal (1 subgoal):\n 1. dim_row (mat_diag n f) = n &&& dim_col (mat_diag n f) = n", "unfolding carrier_mat_def"], ["proof (prove)\nusing this:\n  mat_diag ?n ?f \\<in> {m. dim_row m = ?n \\<and> dim_col m = ?n}\n\ngoal (1 subgoal):\n 1. dim_row (mat_diag n f) = n &&& dim_col (mat_diag n f) = n", "by auto+"], ["", "subsection \\<open>Hermite ring implies B\\'ezout ring\\<close>"], ["", "(*HERMITE \\<Longrightarrow> BEZOUT*)"], ["", "text \\<open>To prove this fact, we make use of the alternative definition for B\\'ezout rings:\neach finitely generated ideal is principal\\<close>"], ["", "lemma Hermite_ring_imp_Bezout_ring:\n  assumes H: \"OFCLASS('a::comm_ring_1, Hermite_ring_class)\"\n  shows \" OFCLASS('a::comm_ring_1, bezout_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, bezout_ring_class)", "proof (rule all_fin_gen_ideals_are_principal_imp_bezout, rule+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "fix I::\"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "assume fin: \"finitely_generated_ideal I\""], ["proof (state)\nthis:\n  finitely_generated_ideal I\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "(*We take the list, put it in a 1xn matrix and then multiply it by a matrix Q that I will obtain*)"], ["proof (state)\nthis:\n  finitely_generated_ideal I\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "obtain S where ig_S: \"ideal_generated S = I\" and fin_S: \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>ideal_generated S = I; finite S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fin"], ["proof (prove)\nusing this:\n  finitely_generated_ideal I\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>ideal_generated S = I; finite S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding finitely_generated_ideal_def"], ["proof (prove)\nusing this:\n  ideal I \\<and> (\\<exists>S. finite S \\<and> ideal_generated S = I)\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>ideal_generated S = I; finite S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ideal_generated S = I\n  finite S\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "obtain xs where set_xs: \"set xs = S\" and d: \"distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>set xs = S; distinct xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_distinct_list[OF fin_S]"], ["proof (prove)\nusing this:\n  \\<exists>xs. set xs = S \\<and> distinct xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>set xs = S; distinct xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set xs = S\n  distinct xs\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "hence length_eq_card: \"length xs = card S\""], ["proof (prove)\nusing this:\n  set xs = S\n  distinct xs\n\ngoal (1 subgoal):\n 1. length xs = card S", "using distinct_card"], ["proof (prove)\nusing this:\n  set xs = S\n  distinct xs\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. length xs = card S", "by force"], ["proof (state)\nthis:\n  length xs = card S\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "define n where \"n = card S\""], ["proof (state)\nthis:\n  n = card S\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "define A where \"A = mat_of_rows n [vec_of_list xs]\""], ["proof (state)\nthis:\n  A = mat_of_rows n [vec_of_list xs]\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "have A[simp]: \"A \\<in> carrier_mat 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat 1 n", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] \\<in> carrier_mat 1 n", "using mat_of_rows_carrier"], ["proof (prove)\nusing this:\n  mat_of_rows ?n ?vs \\<in> carrier_mat (length ?vs) ?n\n  dim_row (mat_of_rows ?n ?vs) = length ?vs\n  dim_col (mat_of_rows ?n ?vs) = ?n\n\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] \\<in> carrier_mat 1 n", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "have \"\\<forall>(A::'a::comm_ring_1 mat). admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using H"], ["proof (prove)\nusing this:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "unfolding OFCLASS_Hermite_ring_def"], ["proof (prove)\nusing this:\n  \\<And>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "from this"], ["proof (chain)\npicking this:\n  \\<forall>A. admits_triangular_reduction A", "obtain Q where inv_Q: \"invertible_mat Q\" and t_AQ: \"lower_triangular (A*Q)\"\n    and Q[simp]: \"Q \\<in> carrier_mat n n\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>invertible_mat Q; lower_triangular (A * Q);\n         Q \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>invertible_mat Q; lower_triangular (A * Q);\n         Q \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>invertible_mat Q; lower_triangular (A * Q);\n         Q \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  invertible_mat Q\n  lower_triangular (A * Q)\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "have AQ[simp]: \"A * Q \\<in> carrier_mat 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * Q \\<in> carrier_mat 1 n", "using A Q"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. A * Q \\<in> carrier_mat 1 n", "by auto"], ["proof (state)\nthis:\n  A * Q \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<And>I. finitely_generated_ideal I \\<Longrightarrow> principal_ideal I", "show \"principal_ideal I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. principal_ideal I", "proof (cases \"xs=[]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> principal_ideal I\n 2. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> principal_ideal I\n 2. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. principal_ideal I", "by (metis empty_set ideal_generated_0 ideal_generated_empty ig_S principal_ideal_def set_xs)"], ["proof (state)\nthis:\n  principal_ideal I\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have a: \"0 < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row A", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. 0 < dim_row A", "by auto"], ["proof (state)\nthis:\n  0 < dim_row A\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have \"0 < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length xs", "using False"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length xs", "by auto"], ["proof (state)\nthis:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "hence b: \"0 < dim_col A\""], ["proof (prove)\nusing this:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. 0 < dim_col A", "using A n_def length_eq_card"], ["proof (prove)\nusing this:\n  0 < length xs\n  A \\<in> carrier_mat 1 n\n  n = card S\n  length xs = card S\n\ngoal (1 subgoal):\n 1. 0 < dim_col A", "by auto"], ["proof (state)\nthis:\n  0 < dim_col A\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have q0: \"0 < dim_col Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_col Q", "by (metis A Q b carrier_matD(2))"], ["proof (state)\nthis:\n  0 < dim_col Q\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have n0: \"0<n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using \\<open>0 < length xs\\<close> length_eq_card n_def"], ["proof (prove)\nusing this:\n  0 < length xs\n  length xs = card S\n  n = card S\n\ngoal (1 subgoal):\n 1. 0 < n", "by linarith"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "define d where \"d = (A*Q) $$ (0,0)\""], ["proof (state)\nthis:\n  d = (A * Q) $$ (0, 0)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "let ?h = \"(\\<lambda>x. THE i. xs ! i = x \\<and> i<n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "let ?u = \"\\<lambda>i. xs ! i\""], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have bij: \"bij_betw ?h (set xs) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs) {0..<n}", "proof (rule bij_betw_imageI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)\n 2. (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs = {0..<n}", "show \"inj_on ?h (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)", "have \"x=y\" if x: \"x \\<in> set xs\" and y: \"y \\<in> set xs\"\n              and xy: \"(THE i. xs ! i = x \\<and> i < n) = (THE i. xs ! i = y \\<and> i < n)\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y", "let ?i = \"(THE i. xs ! i = x \\<and> i < n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x = y", "let ?j = \"(THE i. xs ! i = y \\<and> i < n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x = y", "obtain i where xs_i: \"xs ! i = x \\<and> i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = x \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x"], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = x \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth length_eq_card n_def)"], ["proof (state)\nthis:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. x = y", "from this"], ["proof (chain)\npicking this:\n  xs ! i = x \\<and> i < n", "have 1: \"xs ! ?i = x \\<and> ?i < n\""], ["proof (prove)\nusing this:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n    (THE i. xs ! i = x \\<and> i < n) < n", "by (rule theI, insert d xs_i length_eq_card n_def nth_eq_iff_index_eq, fastforce)"], ["proof (state)\nthis:\n  xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n  (THE i. xs ! i = x \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. x = y", "obtain j where xs_j: \"xs ! j = y \\<and> j < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        xs ! j = y \\<and> j < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using y"], ["proof (prove)\nusing this:\n  y \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        xs ! j = y \\<and> j < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth length_eq_card n_def)"], ["proof (state)\nthis:\n  xs ! j = y \\<and> j < n\n\ngoal (1 subgoal):\n 1. x = y", "from this"], ["proof (chain)\npicking this:\n  xs ! j = y \\<and> j < n", "have 2: \"xs ! ?j = y \\<and> ?j < n\""], ["proof (prove)\nusing this:\n  xs ! j = y \\<and> j < n\n\ngoal (1 subgoal):\n 1. xs ! (THE i. xs ! i = y \\<and> i < n) = y \\<and>\n    (THE i. xs ! i = y \\<and> i < n) < n", "by (rule theI, insert d xs_j length_eq_card n_def nth_eq_iff_index_eq, fastforce)"], ["proof (state)\nthis:\n  xs ! (THE i. xs ! i = y \\<and> i < n) = y \\<and>\n  (THE i. xs ! i = y \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. x = y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using 1 2 d xy"], ["proof (prove)\nusing this:\n  xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n  (THE i. xs ! i = x \\<and> i < n) < n\n  xs ! (THE i. xs ! i = y \\<and> i < n) = y \\<and>\n  (THE i. xs ! i = y \\<and> i < n) < n\n  distinct xs\n  (THE i. xs ! i = x \\<and> i < n) = (THE i. xs ! i = y \\<and> i < n)\n\ngoal (1 subgoal):\n 1. x = y", "by argo"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set xs; ?y \\<in> set xs;\n   (THE i. xs ! i = ?x \\<and> i < n) =\n   (THE i. xs ! i = ?y \\<and> i < n)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set xs; ?y \\<in> set xs;\n   (THE i. xs ! i = ?x \\<and> i < n) =\n   (THE i. xs ! i = ?y \\<and> i < n)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set xs; ?y \\<in> set xs;\n   (THE i. xs ! i = ?x \\<and> i < n) =\n   (THE i. xs ! i = ?y \\<and> i < n)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs.\n       \\<forall>y\\<in>set xs.\n          (THE i. xs ! i = x \\<and> i < n) =\n          (THE i. xs ! i = y \\<and> i < n) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs = {0..<n}", "show \"(\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs = {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs = {0..<n}", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "fix xa"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "assume xa: \"xa \\<in> set xs\""], ["proof (state)\nthis:\n  xa \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "let ?i = \"(THE i. xs ! i = xa \\<and> i < n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "obtain i where xs_i: \"xs ! i = xa \\<and> i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = xa \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xa"], ["proof (prove)\nusing this:\n  xa \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = xa \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth length_eq_card n_def)"], ["proof (state)\nthis:\n  xs ! i = xa \\<and> i < n\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "from this"], ["proof (chain)\npicking this:\n  xs ! i = xa \\<and> i < n", "have 1: \"xs ! ?i = xa \\<and> ?i < n\""], ["proof (prove)\nusing this:\n  xs ! i = xa \\<and> i < n\n\ngoal (1 subgoal):\n 1. xs ! (THE i. xs ! i = xa \\<and> i < n) = xa \\<and>\n    (THE i. xs ! i = xa \\<and> i < n) < n", "by (rule theI, insert d xs_i length_eq_card n_def nth_eq_iff_index_eq, fastforce)"], ["proof (state)\nthis:\n  xs ! (THE i. xs ! i = xa \\<and> i < n) = xa \\<and>\n  (THE i. xs ! i = xa \\<and> i < n) < n\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> set xs \\<Longrightarrow>\n       (THE i. xs ! i = xa \\<and> i < n) < n\n 2. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "thus \"(THE i. xs ! i = xa \\<and> i < n) < n\""], ["proof (prove)\nusing this:\n  xs ! (THE i. xs ! i = xa \\<and> i < n) = xa \\<and>\n  (THE i. xs ! i = xa \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. (THE i. xs ! i = xa \\<and> i < n) < n", "by simp"], ["proof (state)\nthis:\n  (THE i. xs ! i = xa \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "assume x: \"x<n\""], ["proof (state)\nthis:\n  x < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "have \"\\<exists>xa\\<in>set xs. x = (THE i. xs ! i = xa \\<and> i < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>set xs. x = (THE i. xs ! i = xa \\<and> i < n)", "by (rule bexI[of _ \"xs ! x\"], rule the_equality[symmetric], insert x d) \n                (auto simp add: length_eq_card n_def nth_eq_iff_index_eq)+"], ["proof (state)\nthis:\n  \\<exists>xa\\<in>set xs. x = (THE i. xs ! i = xa \\<and> i < n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < n \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "thus \"x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs\""], ["proof (prove)\nusing this:\n  \\<exists>xa\\<in>set xs. x = (THE i. xs ! i = xa \\<and> i < n)\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs", "unfolding image_def"], ["proof (prove)\nusing this:\n  \\<exists>xa\\<in>set xs. x = (THE i. xs ! i = xa \\<and> i < n)\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>set xs. y = (THE i. xs ! i = x \\<and> i < n)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) ` set xs = {0..<n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>x. THE i. xs ! i = x \\<and> i < n) (set xs) {0..<n}\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "have i: \"ideal_generated {d} = ideal_generated S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "have ideal_S_explicit: \"ideal_generated S = {y. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated S = {y. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = y}", "unfolding ideal_explicit2[OF fin_S]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = y} =\n    {y. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = y}", "by simp"], ["proof (state)\nthis:\n  ideal_generated S = {y. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = y}\n\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "have \"ideal_generated {d} \\<subseteq> ideal_generated S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {d} \\<subseteq> ideal_generated S", "proof (rule ideal_generated_subset2, auto simp add: ideal_S_explicit)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have n: \"dim_vec (col Q 0) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (col Q 0) = n", "using Q n_def"], ["proof (prove)\nusing this:\n  Q \\<in> carrier_mat n n\n  n = card S\n\ngoal (1 subgoal):\n 1. dim_vec (col Q 0) = n", "by auto"], ["proof (state)\nthis:\n  dim_vec (col Q 0) = n\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have aux: \"Matrix.row A 0 $v i = xs ! i\" if i: \"i<n\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "have i2: \"i < dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_col A", "by (simp add: A_def i)"], ["proof (state)\nthis:\n  i < dim_col A\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "have \"Matrix.row A 0 $v i = A $$ (0,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = A $$ (0, i)", "by (rule index_row(1), auto simp add: a b i2)"], ["proof (state)\nthis:\n  Matrix.row A 0 $v i = A $$ (0, i)\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "also"], ["proof (state)\nthis:\n  Matrix.row A 0 $v i = A $$ (0, i)\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "have \"... = [vec_of_list xs] ! 0 $v i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, i) = [vec_of_list xs] ! 0 $v i", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] $$ (0, i) = [vec_of_list xs] ! 0 $v i", "by (rule mat_of_rows_index, auto simp add: i)"], ["proof (state)\nthis:\n  A $$ (0, i) = [vec_of_list xs] ! 0 $v i\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "also"], ["proof (state)\nthis:\n  A $$ (0, i) = [vec_of_list xs] ! 0 $v i\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "have \"... = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v i = xs ! i", "by (simp add: vec_of_list_index)"], ["proof (state)\nthis:\n  [vec_of_list xs] ! 0 $v i = xs ! i\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "finally"], ["proof (chain)\npicking this:\n  Matrix.row A 0 $v i = xs ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  Matrix.row A 0 $v i = xs ! i\n\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v i = xs ! i", "."], ["proof (state)\nthis:\n  Matrix.row A 0 $v i = xs ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < n \\<Longrightarrow> Matrix.row A 0 $v ?i = xs ! ?i\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "let ?f = \"\\<lambda>x. let i = (THE i. xs ! i = x \\<and> i < n) in col Q 0 $v i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "let ?g = \"(\\<lambda>i. xs ! i * col Q 0 $v i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"d = (A*Q) $$ (0,0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = (A * Q) $$ (0, 0)", "unfolding d_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * Q) $$ (0, 0) = (A * Q) $$ (0, 0)", "by simp"], ["proof (state)\nthis:\n  d = (A * Q) $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  d = (A * Q) $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = Matrix.row A 0 \\<bullet> col Q 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * Q) $$ (0, 0) = Matrix.row A 0 \\<bullet> col Q 0", "by (rule index_mult_mat(1)[OF a q0])"], ["proof (state)\nthis:\n  (A * Q) $$ (0, 0) = Matrix.row A 0 \\<bullet> col Q 0\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  (A * Q) $$ (0, 0) = Matrix.row A 0 \\<bullet> col Q 0\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A 0 \\<bullet> col Q 0 =\n    (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i) =\n    (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i)", "by simp"], ["proof (state)\nthis:\n  Matrix.row A 0 \\<bullet> col Q 0 =\n  (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  Matrix.row A 0 \\<bullet> col Q 0 =\n  (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i) =\n    (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i)", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i) =\n    (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i) =\n  (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<dim_vec (col Q 0). Matrix.row A 0 $v i * col Q 0 $v i) =\n  (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i) =\n    (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i)", "by (rule sum.cong, auto simp add: aux)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i) =\n  (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n. Matrix.row A 0 $v i * col Q 0 $v i) =\n  (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>x \\<in> set xs. ?g (?h x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i) =\n    (\\<Sum>x\\<in>set xs.\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n))", "by (rule sum.reindex_bij_betw[symmetric, OF bij])"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i) =\n  (\\<Sum>x\\<in>set xs.\n     xs ! (THE i. xs ! i = x \\<and> i < n) *\n     col Q 0 $v (THE i. xs ! i = x \\<and> i < n))\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n. xs ! i * col Q 0 $v i) =\n  (\\<Sum>x\\<in>set xs.\n     xs ! (THE i. xs ! i = x \\<and> i < n) *\n     col Q 0 $v (THE i. xs ! i = x \\<and> i < n))\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>x \\<in> set xs. ?f x * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set xs.\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n)) =\n    (\\<Sum>x\\<in>set xs.\n       Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)", "proof (rule sum.cong, auto simp add: Let_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "assume x: \"x \\<in> set xs\""], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "let ?i = \"(THE i. xs ! i = x \\<and> i < n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "obtain i where xs_i: \"xs ! i = x \\<and> i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = x \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth x length_eq_card n_def)"], ["proof (state)\nthis:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "from this"], ["proof (chain)\npicking this:\n  xs ! i = x \\<and> i < n", "have \"xs ! ?i = x \\<and> ?i < n\""], ["proof (prove)\nusing this:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n    (THE i. xs ! i = x \\<and> i < n) < n", "by (rule theI, insert d xs_i length_eq_card n_def nth_eq_iff_index_eq, fastforce)"], ["proof (state)\nthis:\n  xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n  (THE i. xs ! i = x \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       xs ! (THE i. xs ! i = x \\<and> i < n) *\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n       col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "thus \"xs ! ?i * col Q 0 $v ?i = col Q 0 $v ?i * x\""], ["proof (prove)\nusing this:\n  xs ! (THE i. xs ! i = x \\<and> i < n) = x \\<and>\n  (THE i. xs ! i = x \\<and> i < n) < n\n\ngoal (1 subgoal):\n 1. xs ! (THE i. xs ! i = x \\<and> i < n) *\n    col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n    col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x", "by auto"], ["proof (state)\nthis:\n  xs ! (THE i. xs ! i = x \\<and> i < n) *\n  col Q 0 $v (THE i. xs ! i = x \\<and> i < n) =\n  col Q 0 $v (THE i. xs ! i = x \\<and> i < n) * x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set xs.\n     xs ! (THE i. xs ! i = x \\<and> i < n) *\n     col Q 0 $v (THE i. xs ! i = x \\<and> i < n)) =\n  (\\<Sum>x\\<in>set xs.\n     Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set xs.\n     xs ! (THE i. xs ! i = x \\<and> i < n) *\n     col Q 0 $v (THE i. xs ! i = x \\<and> i < n)) =\n  (\\<Sum>x\\<in>set xs.\n     Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "have \"... = (\\<Sum>x \\<in> S. ?f x * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set xs.\n       Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x) =\n    (\\<Sum>x\\<in>S.\n       Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)", "using set_xs"], ["proof (prove)\nusing this:\n  set xs = S\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set xs.\n       Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x) =\n    (\\<Sum>x\\<in>S.\n       Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set xs.\n     Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x) =\n  (\\<Sum>x\\<in>S. Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "finally"], ["proof (chain)\npicking this:\n  d =\n  (\\<Sum>x\\<in>S. Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)", "show \"\\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d\""], ["proof (prove)\nusing this:\n  d =\n  (\\<Sum>x\\<in>S. Let (THE i. xs ! i = x \\<and> i < n) (($v) (col Q 0)) * x)\n\ngoal (1 subgoal):\n 1. \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. (\\<Sum>i\\<in>S. f i * i) = d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {d} \\<subseteq> ideal_generated S\n\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "moreover"], ["proof (state)\nthis:\n  ideal_generated {d} \\<subseteq> ideal_generated S\n\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "have \"ideal_generated S \\<subseteq> ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated S \\<subseteq> ideal_generated {d}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "assume x: \"x \\<in> ideal_generated S\""], ["proof (state)\nthis:\n  x \\<in> ideal_generated S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "thm Matrix.diag_mat_def"], ["proof (state)\nthis:\n  x \\<in> ideal_generated S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "hence x_xs: \"x \\<in> ideal_generated (set xs)\""], ["proof (prove)\nusing this:\n  x \\<in> ideal_generated S\n\ngoal (1 subgoal):\n 1. x \\<in> ideal_generated (set xs)", "by (simp add: set_xs)"], ["proof (state)\nthis:\n  x \\<in> ideal_generated (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "from this"], ["proof (chain)\npicking this:\n  x \\<in> ideal_generated (set xs)", "obtain f where f: \"(\\<Sum>i\\<in>(set xs). f i * i) = x\""], ["proof (prove)\nusing this:\n  x \\<in> ideal_generated (set xs)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<Sum>i\\<in>set xs. f i * i) = x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using x ideal_explicit2"], ["proof (prove)\nusing this:\n  x \\<in> ideal_generated (set xs)\n  x \\<in> ideal_generated S\n  finite ?S \\<Longrightarrow>\n  ideal_generated ?S = {y. \\<exists>f. (\\<Sum>i\\<in>?S. f i * i) = y}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<Sum>i\\<in>set xs. f i * i) = x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set xs. f i * i) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "define B where \"B = Matrix.vec n (\\<lambda>i. f (A $$ (0,i)))\""], ["proof (state)\nthis:\n  B = Matrix.vec n (\\<lambda>i. f (A $$ (0, i)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have B: \"B \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_vec n", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec n (\\<lambda>i. f (A $$ (0, i))) \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  B \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"(A *\\<^sub>v B) $v 0 = Matrix.row A 0 \\<bullet> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A *\\<^sub>v B) $v 0 = Matrix.row A 0 \\<bullet> B", "by (rule index_mult_mat_vec[OF a])"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = Matrix.row A 0 \\<bullet> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = Matrix.row A 0 \\<bullet> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = sum (\\<lambda>i. f (A $$ (0,i)) * A $$ (0,i)) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A 0 \\<bullet> B =\n    (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i))", "unfolding B_def Matrix.row_def scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (Matrix.vec n (\\<lambda>i. f (A $$ (0, i)))).\n        Matrix.vec (dim_col A) (\\<lambda>j. A $$ (0, j)) $v i *\n        Matrix.vec n (\\<lambda>i. f (A $$ (0, i))) $v i) =\n    (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i))", "by (rule sum.cong, auto simp add: A_def)"], ["proof (state)\nthis:\n  Matrix.row A 0 \\<bullet> B =\n  (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  Matrix.row A 0 \\<bullet> B =\n  (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = sum (\\<lambda>i. f i * i) (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i)) =\n    (\\<Sum>i\\<in>set xs. f i * i)", "proof (rule sum.reindex_bij_betw)"], ["proof (state)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "have 1: \"inj_on (\\<lambda>x. A $$ (0, x)) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. A $$ (0, x)) {0..<n}", "proof (unfold inj_on_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x: \"x < n\" and y: \"y < n\" and xy: \"A $$ (0, x) = A $$ (0, y)\""], ["proof (state)\nthis:\n  x < n\n  y < n\n  A $$ (0, x) = A $$ (0, y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"A $$ (0,x) =  [vec_of_list xs] ! 0 $v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, x) = [vec_of_list xs] ! 0 $v x", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] $$ (0, x) = [vec_of_list xs] ! 0 $v x", "by (rule mat_of_rows_index, insert x y, auto)"], ["proof (state)\nthis:\n  A $$ (0, x) = [vec_of_list xs] ! 0 $v x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  A $$ (0, x) = [vec_of_list xs] ! 0 $v x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"... = xs ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v x = xs ! x", "using x"], ["proof (prove)\nusing this:\n  x < n\n\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v x = xs ! x", "by (simp add: vec_of_list_index)"], ["proof (state)\nthis:\n  [vec_of_list xs] ! 0 $v x = xs ! x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  A $$ (0, x) = xs ! x", "have 1: \"A $$ (0,x) = xs ! x\""], ["proof (prove)\nusing this:\n  A $$ (0, x) = xs ! x\n\ngoal (1 subgoal):\n 1. A $$ (0, x) = xs ! x", "."], ["proof (state)\nthis:\n  A $$ (0, x) = xs ! x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"A $$ (0,y) =  [vec_of_list xs] ! 0 $v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, y) = [vec_of_list xs] ! 0 $v y", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] $$ (0, y) = [vec_of_list xs] ! 0 $v y", "by (rule mat_of_rows_index, insert x y, auto)"], ["proof (state)\nthis:\n  A $$ (0, y) = [vec_of_list xs] ! 0 $v y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  A $$ (0, y) = [vec_of_list xs] ! 0 $v y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"... = xs ! y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v y = xs ! y", "using y"], ["proof (prove)\nusing this:\n  y < n\n\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v y = xs ! y", "by (simp add: vec_of_list_index)"], ["proof (state)\nthis:\n  [vec_of_list xs] ! 0 $v y = xs ! y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  A $$ (0, y) = xs ! y", "have 2: \"A $$ (0,y) = xs ! y\""], ["proof (prove)\nusing this:\n  A $$ (0, y) = xs ! y\n\ngoal (1 subgoal):\n 1. A $$ (0, y) = xs ! y", "."], ["proof (state)\nthis:\n  A $$ (0, y) = xs ! y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x < n; y < n; A $$ (0, x) = A $$ (0, y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "show \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using 1 2 x y d length_eq_card n_def nth_eq_iff_index_eq xy"], ["proof (prove)\nusing this:\n  A $$ (0, x) = xs ! x\n  A $$ (0, y) = xs ! y\n  x < n\n  y < n\n  distinct xs\n  length xs = card S\n  n = card S\n  \\<lbrakk>distinct ?xs; ?i < length ?xs; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> (?xs ! ?i = ?xs ! ?j) = (?i = ?j)\n  A $$ (0, x) = A $$ (0, y)\n\ngoal (1 subgoal):\n 1. x = y", "by fastforce"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. A $$ (0, x)) {0..<n}\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "have 2: \"A $$ (0, xa) \\<in> set xs\" if xa: \"xa < n\" for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "have \"A $$ (0,xa) =  [vec_of_list xs] ! 0 $v xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, xa) = [vec_of_list xs] ! 0 $v xa", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] $$ (0, xa) = [vec_of_list xs] ! 0 $v xa", "by (rule mat_of_rows_index, insert xa, auto)"], ["proof (state)\nthis:\n  A $$ (0, xa) = [vec_of_list xs] ! 0 $v xa\n\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "also"], ["proof (state)\nthis:\n  A $$ (0, xa) = [vec_of_list xs] ! 0 $v xa\n\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "have \"... = xs ! xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v xa = xs ! xa", "using xa"], ["proof (prove)\nusing this:\n  xa < n\n\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v xa = xs ! xa", "by (simp add: vec_of_list_index)"], ["proof (state)\nthis:\n  [vec_of_list xs] ! 0 $v xa = xs ! xa\n\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "finally"], ["proof (chain)\npicking this:\n  A $$ (0, xa) = xs ! xa", "show ?thesis"], ["proof (prove)\nusing this:\n  A $$ (0, xa) = xs ! xa\n\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "using xa"], ["proof (prove)\nusing this:\n  A $$ (0, xa) = xs ! xa\n  xa < n\n\ngoal (1 subgoal):\n 1. A $$ (0, xa) \\<in> set xs", "by (simp add: length_eq_card n_def)"], ["proof (state)\nthis:\n  A $$ (0, xa) \\<in> set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?xa < n \\<Longrightarrow> A $$ (0, ?xa) \\<in> set xs\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "have 3: \"x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}\" if x: \"x\\<in> set xs\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "obtain i where xs: \"xs ! i = x \\<and> i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        xs ! i = x \\<and> i < n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth length_eq_card n_def x)"], ["proof (state)\nthis:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "have \"A $$ (0,i) = [vec_of_list xs] ! 0 $v i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, i) = [vec_of_list xs] ! 0 $v i", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n [vec_of_list xs] $$ (0, i) = [vec_of_list xs] ! 0 $v i", "by (rule mat_of_rows_index, insert xs, auto)"], ["proof (state)\nthis:\n  A $$ (0, i) = [vec_of_list xs] ! 0 $v i\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "also"], ["proof (state)\nthis:\n  A $$ (0, i) = [vec_of_list xs] ! 0 $v i\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "have \"... = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v i = xs ! i", "using xs"], ["proof (prove)\nusing this:\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. [vec_of_list xs] ! 0 $v i = xs ! i", "by (simp add: vec_of_list_index)"], ["proof (state)\nthis:\n  [vec_of_list xs] ! 0 $v i = xs ! i\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "finally"], ["proof (chain)\npicking this:\n  A $$ (0, i) = xs ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  A $$ (0, i) = xs ! i\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "using xs"], ["proof (prove)\nusing this:\n  A $$ (0, i) = xs ! i\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}", "unfolding image_def"], ["proof (prove)\nusing this:\n  A $$ (0, i) = xs ! i\n  xs ! i = x \\<and> i < n\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>{0..<n}. y = A $$ (0, x)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> set xs \\<Longrightarrow>\n  ?x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "show \"bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "using 1 2 3"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. A $$ (0, x)) {0..<n}\n  ?xa < n \\<Longrightarrow> A $$ (0, ?xa) \\<in> set xs\n  ?x \\<in> set xs \\<Longrightarrow>\n  ?x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. A $$ (0, x)) {0..<n}\n  ?xa < n \\<Longrightarrow> A $$ (0, ?xa) \\<in> set xs\n  ?x \\<in> set xs \\<Longrightarrow>\n  ?x \\<in> (\\<lambda>x. A $$ (0, x)) ` {0..<n}\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. A $$ (0, x)) {0..<n} \\<and>\n    (\\<lambda>x. A $$ (0, x)) ` {0..<n} = set xs", "by auto"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>x. A $$ (0, x)) {0..<n} (set xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n. f (A $$ (0, i)) * A $$ (0, i)) =\n  (\\<Sum>i\\<in>set xs. f i * i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "finally"], ["proof (chain)\npicking this:\n  (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)", "have AB00_sum: \"(A *\\<^sub>v B) $v 0 = sum (\\<lambda>i. f i * i) (set xs)\""], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)", "by auto"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "hence AB_00_x: \"(A *\\<^sub>v B) $v 0 = x\""], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v B) $v 0 = x", "using f"], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = (\\<Sum>i\\<in>set xs. f i * i)\n  (\\<Sum>i\\<in>set xs. f i * i) = x\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v B) $v 0 = x", "by auto"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "obtain Q' where QQ': \"inverts_mat Q Q'\" \n          and Q'Q: \"inverts_mat Q' Q\" and Q': \"Q' \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>inverts_mat Q Q'; inverts_mat Q' Q;\n         Q' \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_inverse_matrix[OF Q inv_Q], auto)"], ["proof (state)\nthis:\n  inverts_mat Q Q'\n  inverts_mat Q' Q\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have eq: \"A = (A*Q)*Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A * Q * Q'", "using QQ'"], ["proof (prove)\nusing this:\n  inverts_mat Q Q'\n\ngoal (1 subgoal):\n 1. A = A * Q * Q'", "unfolding inverts_mat_def"], ["proof (prove)\nusing this:\n  Q * Q' = 1\\<^sub>m (dim_row Q)\n\ngoal (1 subgoal):\n 1. A = A * Q * Q'", "by (metis A Q Q' assoc_mult_mat carrier_matD(1) right_mult_one_mat)"], ["proof (state)\nthis:\n  A = A * Q * Q'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "let ?g = \"\\<lambda>i. Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have sum0: \"(\\<Sum>i = 1..<n. ?g i) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 1..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    (0::'a)", "proof (rule sum.neutral, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)", "assume x: \"x \\<in> {1..<n}\""], ["proof (state)\nthis:\n  x \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)", "hence \"Matrix.row (A * Q) 0 $v x = 0\""], ["proof (prove)\nusing this:\n  x \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v x = (0::'a)", "using t_AQ"], ["proof (prove)\nusing this:\n  x \\<in> {1..<n}\n  lower_triangular (A * Q)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v x = (0::'a)", "unfolding lower_triangular_def"], ["proof (prove)\nusing this:\n  x \\<in> {1..<n}\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (A * Q) \\<and> j < dim_col (A * Q) \\<longrightarrow>\n     (A * Q) $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v x = (0::'a)", "by (auto, metis Q Suc_le_lessD a carrier_matD(2) index_mult_mat(2,3) index_row(1))"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v x = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)", "thus \"Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = 0\""], ["proof (prove)\nusing this:\n  Matrix.row (A * Q) 0 $v x = (0::'a)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v x * (Matrix.row Q' x \\<bullet> B) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have set_rw: \"{0..<n} - {0} = {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} - {0} = {1..<n}", "by (simp add: atLeast0LessThan atLeast1_lessThan_eq_remove0)"], ["proof (state)\nthis:\n  {0..<n} - {0} = {1..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have mat_rw: \"(A*Q*Q')*\\<^sub>v B = A*Q*\\<^sub>v(Q' *\\<^sub>v B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * Q * Q' *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)", "by (rule assoc_mult_mat_vec, insert Q Q' B AQ, auto)"], ["proof (state)\nthis:\n  A * Q * Q' *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "from eq"], ["proof (chain)\npicking this:\n  A = A * Q * Q'", "have \"A *\\<^sub>vB = (A*Q)*\\<^sub>v(Q'*\\<^sub>v B)\""], ["proof (prove)\nusing this:\n  A = A * Q * Q'\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)", "using mat_rw"], ["proof (prove)\nusing this:\n  A = A * Q * Q'\n  A * Q * Q' *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)", "by auto"], ["proof (state)\nthis:\n  A *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "from this"], ["proof (chain)\npicking this:\n  A *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)", "have \"(A *\\<^sub>v B) $v 0 = (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0\""], ["proof (prove)\nusing this:\n  A *\\<^sub>v B = A * Q *\\<^sub>v (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. (A *\\<^sub>v B) $v 0 = (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0", "by auto"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  (A *\\<^sub>v B) $v 0 = (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... =  Matrix.row (A*Q) 0 \\<bullet> (Q' *\\<^sub>v B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0 =\n    Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B)", "by (rule index_mult_mat_vec, insert a B_def n0, auto)"], ["proof (state)\nthis:\n  (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0 =\n  Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  (A * Q *\\<^sub>v (Q' *\\<^sub>v B)) $v 0 =\n  Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... =  (\\<Sum>i = 0..<n. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B) =\n    (\\<Sum>i = 0..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))", "using Q'"], ["proof (prove)\nusing this:\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B) =\n    (\\<Sum>i = 0..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))", "by (auto simp add: scalar_prod_def)"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B) =\n  (\\<Sum>i = 0..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 \\<bullet> (Q' *\\<^sub>v B) =\n  (\\<Sum>i = 0..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = ?g 0 + (\\<Sum>i \\<in> {0..<n} - {0}. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i\\<in>{0..<n} - {0}.\n       Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))", "by (metis (no_types, lifting) Q atLeast0LessThan carrier_matD(2) finite_atLeastLessThan \n              lessThan_iff q0 sum.remove)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i\\<in>{0..<n} - {0}.\n     Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i\\<in>{0..<n} - {0}.\n     Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = ?g 0 + (\\<Sum>i = 1..<n. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i\\<in>{0..<n} - {0}.\n       Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i = 1..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))", "using set_rw"], ["proof (prove)\nusing this:\n  {0..<n} - {0} = {1..<n}\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i\\<in>{0..<n} - {0}.\n       Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i = 1..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))", "by simp"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i\\<in>{0..<n} - {0}.\n     Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i\\<in>{0..<n} - {0}.\n     Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = ?g 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i = 1..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B)", "using sum0"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n    (\\<Sum>i = 1..<n.\n        Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n    Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B)", "by auto"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) +\n  (\\<Sum>i = 1..<n.\n      Matrix.row (A * Q) 0 $v i * (Matrix.row Q' i \\<bullet> B)) =\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "have \"... = d * (Matrix.row Q' 0 \\<bullet> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) =\n    d * (Matrix.row Q' 0 \\<bullet> B)", "by (simp add: a d_def q0)"], ["proof (state)\nthis:\n  Matrix.row (A * Q) 0 $v 0 * (Matrix.row Q' 0 \\<bullet> B) =\n  d * (Matrix.row Q' 0 \\<bullet> B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ideal_generated S \\<Longrightarrow>\n       x \\<in> ideal_generated {d}", "finally"], ["proof (chain)\npicking this:\n  (A *\\<^sub>v B) $v 0 = d * (Matrix.row Q' 0 \\<bullet> B)", "show \"x \\<in> ideal_generated {d}\""], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = d * (Matrix.row Q' 0 \\<bullet> B)\n\ngoal (1 subgoal):\n 1. x \\<in> ideal_generated {d}", "using AB_00_x"], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = d * (Matrix.row Q' 0 \\<bullet> B)\n  (A *\\<^sub>v B) $v 0 = x\n\ngoal (1 subgoal):\n 1. x \\<in> ideal_generated {d}", "unfolding ideal_generated_singleton"], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = d * (Matrix.row Q' 0 \\<bullet> B)\n  (A *\\<^sub>v B) $v 0 = x\n\ngoal (1 subgoal):\n 1. x \\<in> {k * d |k. k \\<in> UNIV}", "using mult.commute"], ["proof (prove)\nusing this:\n  (A *\\<^sub>v B) $v 0 = d * (Matrix.row Q' 0 \\<bullet> B)\n  (A *\\<^sub>v B) $v 0 = x\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. x \\<in> {k * d |k. k \\<in> UNIV}", "by auto"], ["proof (state)\nthis:\n  x \\<in> ideal_generated {d}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated S \\<subseteq> ideal_generated {d}\n\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "ultimately"], ["proof (chain)\npicking this:\n  ideal_generated {d} \\<subseteq> ideal_generated S\n  ideal_generated S \\<subseteq> ideal_generated {d}", "show ?thesis"], ["proof (prove)\nusing this:\n  ideal_generated {d} \\<subseteq> ideal_generated S\n  ideal_generated S \\<subseteq> ideal_generated {d}\n\ngoal (1 subgoal):\n 1. ideal_generated {d} = ideal_generated S", "by auto"], ["proof (state)\nthis:\n  ideal_generated {d} = ideal_generated S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {d} = ideal_generated S\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> principal_ideal I", "thus \"principal_ideal I\""], ["proof (prove)\nusing this:\n  ideal_generated {d} = ideal_generated S\n\ngoal (1 subgoal):\n 1. principal_ideal I", "unfolding principal_ideal_def ig_S"], ["proof (prove)\nusing this:\n  ideal_generated {d} = I\n\ngoal (1 subgoal):\n 1. \\<exists>a. ideal_generated {a} = I", "by blast"], ["proof (state)\nthis:\n  principal_ideal I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  principal_ideal I\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Elementary divisor ring implies Hermite ring\\<close>"], ["", "context\n  assumes \"SORT_CONSTRAINT('a::comm_ring_1)\"\nbegin"], ["", "lemma triangularizable_m0:\nassumes A: \"A \\<in> carrier_mat m 0\" \nshows \"\\<exists>U. U \\<in> carrier_mat 0 0 \\<and> invertible_mat U \\<and> lower_triangular (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat 0 0 \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m 0\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat 0 0 \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "unfolding lower_triangular_def carrier_mat_def invertible_mat_def inverts_mat_def"], ["proof (prove)\nusing this:\n  A \\<in> {ma. dim_row ma = m \\<and> dim_col ma = 0}\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> {m. dim_row m = 0 \\<and> dim_col m = 0} \\<and>\n       (square_mat U \\<and>\n        (\\<exists>B.\n            U * B = 1\\<^sub>m (dim_row U) \\<and>\n            B * U = 1\\<^sub>m (dim_row B))) \\<and>\n       (\\<forall>i j.\n           i < j \\<and>\n           i < dim_row (A * U) \\<and> j < dim_col (A * U) \\<longrightarrow>\n           (A * U) $$ (i, j) = (0::'b))", "by auto (metis gr_implies_not0 index_one_mat(2) index_one_mat(3) right_mult_one_mat')"], ["", "lemma triangularizable_0n:\nassumes A: \"A \\<in> carrier_mat 0 n\" \nshows \"\\<exists>U. U \\<in> carrier_mat n n \\<and> invertible_mat U \\<and> lower_triangular (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 0 n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "unfolding lower_triangular_def carrier_mat_def invertible_mat_def inverts_mat_def"], ["proof (prove)\nusing this:\n  A \\<in> {m. dim_row m = 0 \\<and> dim_col m = n}\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> {m. dim_row m = n \\<and> dim_col m = n} \\<and>\n       (square_mat U \\<and>\n        (\\<exists>B.\n            U * B = 1\\<^sub>m (dim_row U) \\<and>\n            B * U = 1\\<^sub>m (dim_row B))) \\<and>\n       (\\<forall>i j.\n           i < j \\<and>\n           i < dim_row (A * U) \\<and> j < dim_col (A * U) \\<longrightarrow>\n           (A * U) $$ (i, j) = (0::'b))", "by auto (metis index_one_mat(2) index_one_mat(3) right_mult_one_mat')"], ["", "(*To show this, we have to prove that P is a matrix of one element, which is a unit.*)"], ["", "lemma diagonal_imp_triangular_1x2:\n  assumes A: \"A \\<in> carrier_mat 1 2\" and d: \"admits_diagonal_reduction (A::'a mat)\"\n  shows \"admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "obtain P Q where P: \"P \\<in> carrier_mat (dim_row A) (dim_row A)\"\n  and Q: \"Q \\<in> carrier_mat (dim_col A) (dim_col A)\" \n  and inv_P: \"invertible_mat P\" and inv_Q: \"invertible_mat Q\"\n  and SNF: \"Smith_normal_form_mat (P * A * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using d"], ["proof (prove)\nusing this:\n  admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  \\<exists>P Q.\n     P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n     Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat P \\<and>\n     invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  invertible_mat P\n  invertible_mat Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have \"(P * A * Q) = P * (A * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * A * Q = P * (A * Q)", "using P Q assoc_mult_mat"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  \\<lbrakk>?A \\<in> carrier_mat ?n\\<^sub>1 ?n\\<^sub>2;\n   ?B \\<in> carrier_mat ?n\\<^sub>2 ?n\\<^sub>3;\n   ?C \\<in> carrier_mat ?n\\<^sub>3 ?n\\<^sub>4\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B * ?C = ?A * (?B * ?C)\n\ngoal (1 subgoal):\n 1. P * A * Q = P * (A * Q)", "by blast"], ["proof (state)\nthis:\n  P * A * Q = P * (A * Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "also"], ["proof (state)\nthis:\n  P * A * Q = P * (A * Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have \"... = P $$ (0,0) \\<cdot>\\<^sub>m (A * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * (A * Q) = P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q)", "by (rule smult_mat_mat_one_element, insert P A Q, auto)"], ["proof (state)\nthis:\n  P * (A * Q) = P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "also"], ["proof (state)\nthis:\n  P * (A * Q) = P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have \"... = A * (P $$ (0,0) \\<cdot>\\<^sub>m Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q) =\n    A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "using Q"], ["proof (prove)\nusing this:\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q) =\n    A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "by auto"], ["proof (state)\nthis:\n  P $$ (0, 0) \\<cdot>\\<^sub>m (A * Q) = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "finally"], ["proof (chain)\npicking this:\n  P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have eq: \"(P * A * Q) = A * (P $$ (0,0) \\<cdot>\\<^sub>m Q)\""], ["proof (prove)\nusing this:\n  P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "."], ["proof (state)\nthis:\n  P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have inv: \"invertible_mat (P $$ (0,0) \\<cdot>\\<^sub>m Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have d: \"Determinant.det P = P $$ (0, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det P = P $$ (0, 0)", "by (rule determinant_one_element, insert P A, auto)"], ["proof (state)\nthis:\n  Determinant.det P = P $$ (0, 0)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "from this"], ["proof (chain)\npicking this:\n  Determinant.det P = P $$ (0, 0)", "have P_dvd_1: \"P $$ (0, 0) dvd 1\""], ["proof (prove)\nusing this:\n  Determinant.det P = P $$ (0, 0)\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) dvd (1::'a)", "using invertible_iff_is_unit_JNF[OF P]"], ["proof (prove)\nusing this:\n  Determinant.det P = P $$ (0, 0)\n  invertible_mat P = (Determinant.det P dvd (1::'a))\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) dvd (1::'a)", "using inv_P"], ["proof (prove)\nusing this:\n  Determinant.det P = P $$ (0, 0)\n  invertible_mat P = (Determinant.det P dvd (1::'a))\n  invertible_mat P\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  P $$ (0, 0) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have Q_dvd_1: \"Determinant.det Q dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det Q dvd (1::'a)", "using inv_Q invertible_iff_is_unit_JNF[OF Q]"], ["proof (prove)\nusing this:\n  invertible_mat Q\n  invertible_mat Q = (Determinant.det Q dvd (1::'a))\n\ngoal (1 subgoal):\n 1. Determinant.det Q dvd (1::'a)", "by simp"], ["proof (state)\nthis:\n  Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have \"Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) =  P $$ (0, 0) ^ dim_col Q * Determinant.det Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) =\n    P $$ (0, 0) ^ dim_col Q * Determinant.det Q", "unfolding det_smult"], ["proof (prove)\ngoal (1 subgoal):\n 1. P $$ (0, 0) ^ dim_col Q * Determinant.det Q =\n    P $$ (0, 0) ^ dim_col Q * Determinant.det Q", "by auto"], ["proof (state)\nthis:\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) =\n  P $$ (0, 0) ^ dim_col Q * Determinant.det Q\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "also"], ["proof (state)\nthis:\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) =\n  P $$ (0, 0) ^ dim_col Q * Determinant.det Q\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have \"... dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $$ (0, 0) ^ dim_col Q * Determinant.det Q dvd (1::'a)", "using P_dvd_1 Q_dvd_1"], ["proof (prove)\nusing this:\n  P $$ (0, 0) dvd (1::'a)\n  Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) ^ dim_col Q * Determinant.det Q dvd (1::'a)", "unfolding is_unit_mult_iff"], ["proof (prove)\nusing this:\n  P $$ (0, 0) dvd (1::'a)\n  Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) ^ dim_col Q dvd (1::'a) \\<and> Determinant.det Q dvd (1::'a)", "by (metis dvdE dvd_mult_left one_dvd power_mult_distrib power_one)"], ["proof (state)\nthis:\n  P $$ (0, 0) ^ dim_col Q * Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "finally"], ["proof (chain)\npicking this:\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a)", "have det: \"(Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd 1)\""], ["proof (prove)\nusing this:\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a)", "."], ["proof (state)\nthis:\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "have PQ: \"P $$ (0,0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat 2 2", "using A P Q"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 2\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "using invertible_iff_is_unit_JNF[OF PQ] det"], ["proof (prove)\nusing this:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q) =\n  (Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a))\n  Determinant.det (P $$ (0, 0) \\<cdot>\\<^sub>m Q) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)", "by auto"], ["proof (state)\nthis:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "moreover"], ["proof (state)\nthis:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have \"lower_triangular (A * (P $$ (0,0) \\<cdot>\\<^sub>m Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))", "unfolding lower_triangular_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<and>\n       j < dim_col (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<longrightarrow>\n       (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) $$ (i, j) = (0::'a)", "using SNF eq"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat (P * A * Q)\n  P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<and>\n       j < dim_col (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<longrightarrow>\n       (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) $$ (i, j) = (0::'a)", "unfolding Smith_normal_form_mat_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  (\\<forall>a.\n      a + 1\n      < min (dim_row (P * A * Q)) (dim_col (P * A * Q)) \\<longrightarrow>\n      (P * A * Q) $$ (a, a) dvd (P * A * Q) $$ (a + 1, a + 1)) \\<and>\n  (\\<forall>i j.\n      i \\<noteq> j \\<and>\n      i < dim_row (P * A * Q) \\<and>\n      j < dim_col (P * A * Q) \\<longrightarrow>\n      (P * A * Q) $$ (i, j) = (0::'a))\n  P * A * Q = A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<and>\n       j < dim_col (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) \\<longrightarrow>\n       (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q)) $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "moreover"], ["proof (state)\nthis:\n  lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "have \"(P $$ (0,0) \\<cdot>\\<^sub>m Q) \\<in> carrier_mat (dim_col A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)", "using P Q A"], ["proof (prove)\nusing this:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)", "by auto"], ["proof (state)\nthis:\n  P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "ultimately"], ["proof (chain)\npicking this:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n  lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))\n  P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)", "show ?thesis"], ["proof (prove)\nusing this:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n  lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))\n  P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  invertible_mat (P $$ (0, 0) \\<cdot>\\<^sub>m Q)\n  lower_triangular (A * (P $$ (0, 0) \\<cdot>\\<^sub>m Q))\n  P $$ (0, 0) \\<cdot>\\<^sub>m Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by auto"], ["proof (state)\nthis:\n  admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma triangular_imp_diagonal_1x2:\nassumes A: \"A \\<in> carrier_mat 1 2\" and t: \"admits_triangular_reduction (A::'a mat)\"\nshows \"admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "obtain U where U: \"U \\<in> carrier_mat (dim_col A) (dim_col A)\"  \n  and inv_U: \"invertible_mat U\" and AU: \"lower_triangular (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>U \\<in> carrier_mat (dim_col A) (dim_col A);\n         invertible_mat U; lower_triangular (A * U)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using t"], ["proof (prove)\nusing this:\n  admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>U \\<in> carrier_mat (dim_col A) (dim_col A);\n         invertible_mat U; lower_triangular (A * U)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>U \\<in> carrier_mat (dim_col A) (dim_col A);\n         invertible_mat U; lower_triangular (A * U)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  U \\<in> carrier_mat (dim_col A) (dim_col A)\n  invertible_mat U\n  lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "have SNF_AU: \"Smith_normal_form_mat (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (A * U)", "using AU A"], ["proof (prove)\nusing this:\n  lower_triangular (A * U)\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (A * U)", "unfolding Smith_normal_form_mat_def lower_triangular_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (A * U) \\<and> j < dim_col (A * U) \\<longrightarrow>\n     (A * U) $$ (i, j) = (0::'a)\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. (\\<forall>a.\n        a + 1 < min (dim_row (A * U)) (dim_col (A * U)) \\<longrightarrow>\n        (A * U) $$ (a, a) dvd (A * U) $$ (a + 1, a + 1)) \\<and>\n    (\\<forall>i j.\n        i \\<noteq> j \\<and>\n        i < dim_row (A * U) \\<and> j < dim_col (A * U) \\<longrightarrow>\n        (A * U) $$ (i, j) = (0::'a))", "by auto"], ["proof (state)\nthis:\n  Smith_normal_form_mat (A * U)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "have \"A * U = (1\\<^sub>m 1) * A * U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * U = 1\\<^sub>m 1 * A * U", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. A * U = 1\\<^sub>m 1 * A * U", "by auto"], ["proof (state)\nthis:\n  A * U = 1\\<^sub>m 1 * A * U\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "hence SNF: \"Smith_normal_form_mat ((1\\<^sub>m 1) * A * U)\""], ["proof (prove)\nusing this:\n  A * U = 1\\<^sub>m 1 * A * U\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (1\\<^sub>m 1 * A * U)", "using SNF_AU"], ["proof (prove)\nusing this:\n  A * U = 1\\<^sub>m 1 * A * U\n  Smith_normal_form_mat (A * U)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (1\\<^sub>m 1 * A * U)", "by auto"], ["proof (state)\nthis:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "moreover"], ["proof (state)\nthis:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "have \"invertible_mat (1\\<^sub>m 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (1\\<^sub>m 1)", "using invertible_mat_def inverts_mat_def"], ["proof (prove)\nusing this:\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n  inverts_mat ?A ?B \\<equiv> ?A * ?B = 1\\<^sub>m (dim_row ?A)\n\ngoal (1 subgoal):\n 1. invertible_mat (1\\<^sub>m 1)", "by fastforce"], ["proof (state)\nthis:\n  invertible_mat (1\\<^sub>m 1)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "ultimately"], ["proof (chain)\npicking this:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n  invertible_mat (1\\<^sub>m 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n  invertible_mat (1\\<^sub>m 1)\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "using inv_U"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n  invertible_mat (1\\<^sub>m 1)\n  invertible_mat U\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "unfolding admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat (1\\<^sub>m 1 * A * U)\n  invertible_mat (1\\<^sub>m 1)\n  invertible_mat U\n\ngoal (1 subgoal):\n 1. \\<exists>P Q.\n       P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n       Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat P \\<and>\n       invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)", "by (smt U assms(1) carrier_matD(1) one_carrier_mat)"], ["proof (state)\nthis:\n  admits_diagonal_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma triangular_eq_diagonal_1x2:\n \"(\\<forall>A\\<in>carrier_mat 1 2. admits_triangular_reduction (A::'a mat)) \n  = (\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A\\<in>carrier_mat 1 2. admits_triangular_reduction A) =\n    (\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A)", "using triangular_imp_diagonal_1x2 diagonal_imp_triangular_1x2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat 1 2; admits_triangular_reduction ?A\\<rbrakk>\n  \\<Longrightarrow> admits_diagonal_reduction ?A\n  \\<lbrakk>?A \\<in> carrier_mat 1 2; admits_diagonal_reduction ?A\\<rbrakk>\n  \\<Longrightarrow> admits_triangular_reduction ?A\n\ngoal (1 subgoal):\n 1. (\\<forall>A\\<in>carrier_mat 1 2. admits_triangular_reduction A) =\n    (\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A)", "by auto"], ["", "lemma admits_triangular_mat_1x1:\n  assumes A: \"A \\<in> carrier_mat 1 1\"\n  shows \"admits_triangular_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "by (rule admits_triangular_reduction_intro[of \"1\\<^sub>m 1\"], insert A,\n      auto simp add: admits_triangular_reduction_def  lower_triangular_def)"], ["", "lemma admits_diagonal_mat_1x1:\n  assumes A: \"A \\<in> carrier_mat 1 1\"\n  shows \"admits_diagonal_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction A", "by (rule admits_diagonal_reduction_intro[of \"(1\\<^sub>m 1)\" _ \"(1\\<^sub>m 1)\"], \n      insert A, auto simp add: Smith_normal_form_mat_def isDiagonal_mat_def)"], ["", "lemma admits_diagonal_imp_admits_triangular_1xn:\n  assumes a: \"\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat)\"\n  shows \"\\<forall>A\\<in>carrier_mat 1 n. admits_triangular_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 1 n. admits_triangular_reduction A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 n \\<Longrightarrow>\n       admits_triangular_reduction A", "fix A::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 n \\<Longrightarrow>\n       admits_triangular_reduction A", "assume A: \"A \\<in> carrier_mat 1 n\""], ["proof (state)\nthis:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 n \\<Longrightarrow>\n       admits_triangular_reduction A", "have \"\\<exists>U. U \\<in> carrier_mat (dim_col A) (dim_col A) \n    \\<and> invertible_mat U \\<and> lower_triangular (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "(*Zeros above the diagonal*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (induct n arbitrary: A rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>\\<And>y A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat 1 y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat 1 x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat (dim_col A)\n                                     (dim_col A) \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; ?A \\<in> carrier_mat 1 ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U.\n                       U \\<in> carrier_mat (dim_col ?A) (dim_col ?A) \\<and>\n                       invertible_mat U \\<and> lower_triangular (?A * U)\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>\\<And>y A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat 1 y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat 1 x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat (dim_col A)\n                                     (dim_col A) \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "note A = less.prems(1)"], ["proof (state)\nthis:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>\\<And>y A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat 1 y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat 1 x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat (dim_col A)\n                                     (dim_col A) \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (cases \"n=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using triangularizable_m0 triangularizable_0n less.prems"], ["proof (prove)\nusing this:\n  n = 0\n  ?A \\<in> carrier_mat ?m 0 \\<Longrightarrow>\n  \\<exists>U.\n     U \\<in> carrier_mat 0 0 \\<and>\n     invertible_mat U \\<and> lower_triangular (?A * U)\n  ?A \\<in> carrier_mat 0 ?n \\<Longrightarrow>\n  \\<exists>U.\n     U \\<in> carrier_mat ?n ?n \\<and>\n     invertible_mat U \\<and> lower_triangular (?A * U)\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by auto"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note nm_not_0 = False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "from this"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have n_not_0: \"n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (cases \"n>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. \\<not> 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case False"], ["proof (state)\nthis:\n  \\<not> 2 < n\n\ngoal (2 subgoals):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. \\<not> 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note n_less_2 = False"], ["proof (state)\nthis:\n  \\<not> 2 < n\n\ngoal (2 subgoals):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. \\<not> 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using admits_triangular_mat_1x1 a diagonal_imp_triangular_1x2"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat 1 1 \\<Longrightarrow> admits_triangular_reduction ?A\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n  \\<lbrakk>?A \\<in> carrier_mat 1 2; admits_diagonal_reduction ?A\\<rbrakk>\n  \\<Longrightarrow> admits_triangular_reduction ?A\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat 1 1 \\<Longrightarrow>\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col ?A) (dim_col ?A) \\<and>\n     invertible_mat U \\<and> lower_triangular (?A * U)\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n  \\<lbrakk>?A \\<in> carrier_mat 1 2; admits_diagonal_reduction ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U.\n                       U \\<in> carrier_mat (dim_col ?A) (dim_col ?A) \\<and>\n                       invertible_mat U \\<and> lower_triangular (?A * U)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by (metis (full_types) admits_triangular_mat_1x1 Suc_1 admits_triangular_reduction_def \n              less(2) less_Suc_eq less_one linorder_neqE_nat n_less_2 nm_not_0 triangular_eq_diagonal_1x2)"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case True"], ["proof (state)\nthis:\n  2 < n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note n_ge_2 = True"], ["proof (state)\nthis:\n  2 < n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "let ?B = \"mat_of_row (vec_last (Matrix.row A 0) (n - 1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have \"\\<exists>V. V\\<in> carrier_mat (dim_col ?B) (dim_col ?B) \n        \\<and> invertible_mat V \\<and> lower_triangular (?B * V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>V.\n       V \\<in> carrier_mat\n                (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n                (dim_col\n                  (mat_of_row (vec_last (Matrix.row A 0) (n - 1)))) \\<and>\n       invertible_mat V \\<and>\n       lower_triangular (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V)", "proof (rule less.hyps)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?y < n\n 2. mat_of_row (vec_last (Matrix.row A 0) (n - 1)) \\<in> carrier_mat 1 ?y", "show \"n-1 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n - 1 < n", "using n_not_0"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n - 1 < n", "by auto"], ["proof (state)\nthis:\n  n - 1 < n\n\ngoal (1 subgoal):\n 1. mat_of_row (vec_last (Matrix.row A 0) (n - 1))\n    \\<in> carrier_mat 1 (n - 1)", "show \"mat_of_row (vec_last (Matrix.row A 0) (n - 1)) \\<in> carrier_mat 1 (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (vec_last (Matrix.row A 0) (n - 1))\n    \\<in> carrier_mat 1 (n - 1)", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. mat_of_row (vec_last (Matrix.row A 0) (n - 1))\n    \\<in> carrier_mat 1 (n - 1)", "by simp"], ["proof (state)\nthis:\n  mat_of_row (vec_last (Matrix.row A 0) (n - 1)) \\<in> carrier_mat 1 (n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>V.\n     V \\<in> carrier_mat\n              (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n              (dim_col\n                (mat_of_row (vec_last (Matrix.row A 0) (n - 1)))) \\<and>\n     invertible_mat V \\<and>\n     lower_triangular (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>V.\n     V \\<in> carrier_mat\n              (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n              (dim_col\n                (mat_of_row (vec_last (Matrix.row A 0) (n - 1)))) \\<and>\n     invertible_mat V \\<and>\n     lower_triangular (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V)", "obtain V where inv_V: \"invertible_mat V\" and BV: \"lower_triangular (?B * V)\" \n          and V': \"V \\<in> carrier_mat (dim_col ?B) (dim_col ?B)\""], ["proof (prove)\nusing this:\n  \\<exists>V.\n     V \\<in> carrier_mat\n              (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n              (dim_col\n                (mat_of_row (vec_last (Matrix.row A 0) (n - 1)))) \\<and>\n     invertible_mat V \\<and>\n     lower_triangular (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V)\n\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>invertible_mat V;\n         lower_triangular\n          (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V);\n         V \\<in> carrier_mat\n                  (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n                  (dim_col\n                    (mat_of_row\n                      (vec_last (Matrix.row A 0) (n - 1))))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  invertible_mat V\n  lower_triangular (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V)\n  V \\<in> carrier_mat\n           (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n           (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have V: \"V \\<in> carrier_mat (n-1) (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> carrier_mat (n - 1) (n - 1)", "using V'"], ["proof (prove)\nusing this:\n  V \\<in> carrier_mat\n           (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n           (dim_col (mat_of_row (vec_last (Matrix.row A 0) (n - 1))))\n\ngoal (1 subgoal):\n 1. V \\<in> carrier_mat (n - 1) (n - 1)", "by auto"], ["proof (state)\nthis:\n  V \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have BV_0: \"\\<forall>j \\<in> {1..<n-1}. (?B * V) $$ (0,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{1..<n - 1}.\n       (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j) =\n       (0::'a)", "by (rule, rule lower_triangular_index[OF BV], insert V, auto)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{1..<n - 1}.\n     (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j) =\n     (0::'a)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "define b where \"b = (?B * V) $$ (0,0)\""], ["proof (state)\nthis:\n  b = (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, 0)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "define a where \"a = A $$ (0,0)\""], ["proof (state)\nthis:\n  a = A $$ (0, 0)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "define ab::\"'a mat\" where \"ab = Matrix.mat 1 2 (\\<lambda>(i,j). if i=0 \\<and> j=0 then a else b)\""], ["proof (state)\nthis:\n  ab = Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have ab[simp]: \"ab \\<in> carrier_mat 1 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab \\<in> carrier_mat 1 2", "unfolding ab_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b)\n    \\<in> carrier_mat 1 2", "by simp"], ["proof (state)\nthis:\n  ab \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "hence \"admits_diagonal_reduction ab\""], ["proof (prove)\nusing this:\n  ab \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction ab", "using a"], ["proof (prove)\nusing this:\n  ab \\<in> carrier_mat 1 2\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. admits_diagonal_reduction ab", "by auto"], ["proof (state)\nthis:\n  admits_diagonal_reduction ab\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "hence \"admits_triangular_reduction ab\""], ["proof (prove)\nusing this:\n  admits_diagonal_reduction ab\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction ab", "using diagonal_imp_triangular_1x2[OF ab]"], ["proof (prove)\nusing this:\n  admits_diagonal_reduction ab\n  admits_diagonal_reduction ab \\<Longrightarrow>\n  admits_triangular_reduction ab\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction ab", "by auto"], ["proof (state)\nthis:\n  admits_triangular_reduction ab\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "from this"], ["proof (chain)\npicking this:\n  admits_triangular_reduction ab", "obtain W where inv_W: \"invertible_mat W\" and ab_W: \"lower_triangular (ab * W)\"\n          and W: \"W \\<in> carrier_mat 2 2\""], ["proof (prove)\nusing this:\n  admits_triangular_reduction ab\n\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>invertible_mat W; lower_triangular (ab * W);\n         W \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col ab) (dim_col ab) \\<and>\n     invertible_mat U \\<and> lower_triangular (ab * U)\n\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>invertible_mat W; lower_triangular (ab * W);\n         W \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ab"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col ab) (dim_col ab) \\<and>\n     invertible_mat U \\<and> lower_triangular (ab * U)\n  ab \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>invertible_mat W; lower_triangular (ab * W);\n         W \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  invertible_mat W\n  lower_triangular (ab * W)\n  W \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have id_n2_carrier[simp]: \"1\\<^sub>m (n-2) \\<in> carrier_mat (n-2) (n-2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m (n - 2) \\<in> carrier_mat (n - 2) (n - 2)", "by auto"], ["proof (state)\nthis:\n  1\\<^sub>m (n - 2) \\<in> carrier_mat (n - 2) (n - 2)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "define U where \"U = (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n-1)) (0\\<^sub>m (n-1) 1) V) * \n                                (four_block_mat W (0\\<^sub>m 2 (n-2)) (0\\<^sub>m (n-2) 2) (1\\<^sub>m (n-2)))\""], ["proof (state)\nthis:\n  U =\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "let ?U1 = \"four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n-1)) (0\\<^sub>m (n-1) 1) V\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "let ?U2 = \"four_block_mat W (0\\<^sub>m 2 (n-2)) (0\\<^sub>m (n-2) 2) (1\\<^sub>m (n-2))\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have U1[simp]: \"?U1 \\<in>carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V\n    \\<in> carrier_mat n n", "using four_block_carrier_mat[OF _ V] nm_not_0"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?nr1.0 ?nc1.0 \\<Longrightarrow>\n  four_block_mat ?A ?B ?C V\n  \\<in> carrier_mat (?nr1.0 + (n - 1)) (?nc1.0 + (n - 1))\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V\n    \\<in> carrier_mat n n", "by fastforce"], ["proof (state)\nthis:\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) V\n  \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have U2[simp]: \"?U2 \\<in>carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))\n    \\<in> carrier_mat n n", "using four_block_carrier_mat[OF W id_n2_carrier]"], ["proof (prove)\nusing this:\n  four_block_mat W ?B ?C (1\\<^sub>m (n - 2))\n  \\<in> carrier_mat (2 + (n - 2)) (2 + (n - 2))\n\ngoal (1 subgoal):\n 1. four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))\n    \\<in> carrier_mat n n", "by (metis True add_diff_inverse_nat less_imp_add_positive not_add_less1)"], ["proof (state)\nthis:\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n  \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have U[simp]: \"U \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U \\<in> carrier_mat n n", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))\n    \\<in> carrier_mat n n", "using U1 U2"], ["proof (prove)\nusing this:\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) V\n  \\<in> carrier_mat n n\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n  \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))\n    \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "moreover"], ["proof (state)\nthis:\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have inv_U: \"invertible_mat U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat U", "have \"invertible_mat ?U1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V)", "by (metis U1 V det_four_block_mat_lower_left_zero_col det_one inv_V \n                invertible_iff_is_unit_JNF more_arith_simps(5) one_carrier_mat zero_carrier_mat)"], ["proof (state)\nthis:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V)\n\ngoal (1 subgoal):\n 1. invertible_mat U", "moreover"], ["proof (state)\nthis:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V)\n\ngoal (1 subgoal):\n 1. invertible_mat U", "have \"invertible_mat ?U2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "have \"Determinant.det ?U2 = Determinant.det W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2))) =\n    Determinant.det W", "by (rule det_four_block_mat_lower_right_id, insert less.prems W n_ge_2, auto)"], ["proof (state)\nthis:\n  Determinant.det\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) =\n  Determinant.det W\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "also"], ["proof (state)\nthis:\n  Determinant.det\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) =\n  Determinant.det W\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "have \" ... dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det W dvd (1::'a)", "using W inv_W invertible_iff_is_unit_JNF"], ["proof (prove)\nusing this:\n  W \\<in> carrier_mat 2 2\n  invertible_mat W\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat ?A = (Determinant.det ?A dvd (1::?'a))\n\ngoal (1 subgoal):\n 1. Determinant.det W dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  Determinant.det W dvd (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "finally"], ["proof (chain)\npicking this:\n  Determinant.det\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) dvd\n  (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  Determinant.det\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) dvd\n  (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "using invertible_iff_is_unit_JNF[OF U2]"], ["proof (prove)\nusing this:\n  Determinant.det\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) dvd\n  (1::'a)\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))) =\n  (Determinant.det\n    (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n      (1\\<^sub>m (n - 2))) dvd\n   (1::'a))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n       (1\\<^sub>m (n - 2)))", "by auto"], ["proof (state)\nthis:\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)))\n\ngoal (1 subgoal):\n 1. invertible_mat U", "ultimately"], ["proof (chain)\npicking this:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V)\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)))", "show ?thesis"], ["proof (prove)\nusing this:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V)\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)))\n\ngoal (1 subgoal):\n 1. invertible_mat U", "using U1 U2 U_def invertible_mult_JNF"], ["proof (prove)\nusing this:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V)\n  invertible_mat\n   (four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)))\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) V\n  \\<in> carrier_mat n n\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n  \\<in> carrier_mat n n\n  U =\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?B \\<in> carrier_mat ?n ?n;\n   invertible_mat ?A; invertible_mat ?B\\<rbrakk>\n  \\<Longrightarrow> invertible_mat (?A * ?B)\n\ngoal (1 subgoal):\n 1. invertible_mat U", "by blast"], ["proof (state)\nthis:\n  invertible_mat U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invertible_mat U\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "moreover"], ["proof (state)\nthis:\n  invertible_mat U\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have \"lower_triangular (A*U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "let ?A = \"Matrix.mat 1 n (\\<lambda>(i,j). if j = 0 then a else if j=1 then b else 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "let ?T = \"Matrix.mat 1 n (\\<lambda>(i,j). if j = 0 then (ab*W) $$ (0,0) else 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "have \"A*?U1 = ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a))", "proof (rule eq_matI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "fix i j"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "assume i: \"i<dim_row ?A\" and j: \"j<dim_col ?A\""], ["proof (state)\nthis:\n  i < dim_row\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "have i0: \"i=0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = 0", "using i"], ["proof (prove)\nusing this:\n  i < dim_row\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal (1 subgoal):\n 1. i = 0", "by auto"], ["proof (state)\nthis:\n  i = 0\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "let ?f = \"\\<lambda> i. A $$ (0, i) * \n            (if i = 0 then if j < 1 then 1\\<^sub>m (1) $$ (i, j) else 0\\<^sub>m (1) (n - 1) $$ (i, j - 1)\n             else if j < 1 then 0\\<^sub>m (n - 1) (1) $$ (i - 1, j) else V $$ (i - 1, j - 1))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "have \"(A*?U1) $$ (i,j) = Matrix.row A i \\<bullet> col ?U1 j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A *\n     four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n      (0\\<^sub>m (n - 1) 1) V) $$\n    (i, j) =\n    Matrix.row A i \\<bullet>\n    col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n          (0\\<^sub>m (n - 1) 1) V)\n     j", "by (rule index_mult_mat, insert i j A V, auto)"], ["proof (state)\nthis:\n  (A *\n   four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V) $$\n  (i, j) =\n  Matrix.row A i \\<bullet>\n  col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n        (0\\<^sub>m (n - 1) 1) V)\n   j\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "also"], ["proof (state)\nthis:\n  (A *\n   four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V) $$\n  (i, j) =\n  Matrix.row A i \\<bullet>\n  col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n        (0\\<^sub>m (n - 1) 1) V)\n   j\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "have \"... =  (\\<Sum>i = 0..<n. ?f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet>\n    col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n          (0\\<^sub>m (n - 1) 1) V)\n     j =\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "using i j A V"], ["proof (prove)\nusing this:\n  i < dim_row\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  A \\<in> carrier_mat 1 n\n  V \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. Matrix.row A i \\<bullet>\n    col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n          (0\\<^sub>m (n - 1) 1) V)\n     j =\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "unfolding scalar_prod_def"], ["proof (prove)\nusing this:\n  i < dim_row\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  A \\<in> carrier_mat 1 n\n  V \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec\n                     (col (four_block_mat (1\\<^sub>m 1)\n                            (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) V)\n                       j).\n        Matrix.row A i $v ia *\n        col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n              (0\\<^sub>m (n - 1) 1) V)\n         j $v\n        ia) =\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "by auto (unfold index_one_mat, insert One_nat_def, presburger)"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet>\n  col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n        (0\\<^sub>m (n - 1) 1) V)\n   j =\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "also"], ["proof (state)\nthis:\n  Matrix.row A i \\<bullet>\n  col (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n        (0\\<^sub>m (n - 1) 1) V)\n   j =\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "have \"... = ?A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "proof (cases \"j=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "case True"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have rw0: \"sum ?f {1..<n} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    (0::'a)", "by (rule sum.neutral, insert True, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  (0::'a)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have set_rw: \"{0..<n} = insert 0 {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} = insert 0 {1..<n}", "using n_ge_2"], ["proof (prove)\nusing this:\n  2 < n\n\ngoal (1 subgoal):\n 1. {0..<n} = insert 0 {1..<n}", "by auto"], ["proof (state)\nthis:\n  {0..<n} = insert 0 {1..<n}\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "hence \"sum ?f {0..<n} = ?f 0 + sum ?f {1..<n}\""], ["proof (prove)\nusing this:\n  {0..<n} = insert 0 {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = ?f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1))", "unfolding rw0"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (0::'a) =\n    A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1))", "by simp"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1))\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1))\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) =\n    a", "using True"], ["proof (prove)\nusing this:\n  j = 0\n\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) =\n    a", "unfolding a_def"], ["proof (prove)\nusing this:\n  j = 0\n\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) =\n    A $$ (0, 0)", "by simp"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) =\n  a\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) =\n  a\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = ?A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "using True i j"], ["proof (prove)\nusing this:\n  j = 0\n  i < dim_row\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal (1 subgoal):\n 1. a =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  a =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "."], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "case False"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "note j_not_0 = False"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have rw_simp: \"Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \n                  = (vec_last (Matrix.row A 0) (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 =\n    vec_last (Matrix.row A 0) (n - 1)", "unfolding Matrix.row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec\n     (dim_col\n       (mat_of_row\n         (vec_last (Matrix.vec (dim_col A) (\\<lambda>j. A $$ (0, j)))\n           (n - 1))))\n     (\\<lambda>j.\n         mat_of_row\n          (vec_last (Matrix.vec (dim_col A) (\\<lambda>j. A $$ (0, j)))\n            (n - 1)) $$\n         (0, j)) =\n    vec_last (Matrix.vec (dim_col A) (\\<lambda>j. A $$ (0, j))) (n - 1)", "by auto"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 =\n  vec_last (Matrix.row A 0) (n - 1)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "let ?g = \"\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "let ?h = \"\\<lambda>i. A $$ (0, i+1) * V $$ (i, j - 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have f0: \"?f 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) =\n    (0::'a)", "using j_not_0 j"], ["proof (prove)\nusing this:\n  j \\<noteq> 0\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have set_rw2: \"(\\<lambda>i. i+1)`{0..<n-1} = {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. i + 1) ` {0..<n - 1} = {1..<n}", "unfolding image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{0..<n - 1}. y = x + 1} = {1..<n}", "using Suc_le_D"], ["proof (prove)\nusing this:\n  Suc ?n \\<le> ?m' \\<Longrightarrow> \\<exists>m. ?m' = Suc m\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{0..<n - 1}. y = x + 1} = {1..<n}", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>i. i + 1) ` {0..<n - 1} = {1..<n}\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have set_rw: \"{0..<n} = insert 0 {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} = insert 0 {1..<n}", "using n_ge_2"], ["proof (prove)\nusing this:\n  2 < n\n\ngoal (1 subgoal):\n 1. {0..<n} = insert 0 {1..<n}", "by auto"], ["proof (state)\nthis:\n  {0..<n} = insert 0 {1..<n}\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "hence \"sum ?f {0..<n} = ?f 0 + sum ?f {1..<n}\""], ["proof (prove)\nusing this:\n  {0..<n} = insert 0 {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = sum ?f {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "using f0"], ["proof (prove)\nusing this:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. A $$ (0, 0) *\n    (if 0 = 0\n     then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n          else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n     else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n          else V $$ (0 - 1, j - 1)) +\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1)))", "by simp"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  A $$ (0, 0) *\n  (if 0 = 0\n   then if j < 1 then 1\\<^sub>m 1 $$ (0, j)\n        else 0\\<^sub>m 1 (n - 1) $$ (0, j - 1)\n   else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (0 - 1, j)\n        else V $$ (0 - 1, j - 1)) +\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1)))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = sum ?g {1..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 1..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1))", "by (rule sum.cong, insert j_not_0,  auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = sum ?g ((\\<lambda>i. i+1)`{0..<n-1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1)) =\n    (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n       A $$ (0, i) * V $$ (i - 1, j - 1))", "using set_rw2"], ["proof (prove)\nusing this:\n  (\\<lambda>i. i + 1) ` {0..<n - 1} = {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1)) =\n    (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n       A $$ (0, i) * V $$ (i - 1, j - 1))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1)) =\n  (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n     A $$ (0, i) * V $$ (i - 1, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 1..<n. A $$ (0, i) * V $$ (i - 1, j - 1)) =\n  (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n     A $$ (0, i) * V $$ (i - 1, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = sum (?g \\<circ> (\\<lambda>i. i+1)) {0..<n-1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n       A $$ (0, i) * V $$ (i - 1, j - 1)) =\n    sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n         (\\<lambda>i. i + 1))\n     {0..<n - 1}", "by (rule sum.reindex, unfold inj_on_def, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n     A $$ (0, i) * V $$ (i - 1, j - 1)) =\n  sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n       (\\<lambda>i. i + 1))\n   {0..<n - 1}\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(\\<lambda>i. i + 1) ` {0..<n - 1}.\n     A $$ (0, i) * V $$ (i - 1, j - 1)) =\n  sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n       (\\<lambda>i. i + 1))\n   {0..<n - 1}\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = sum ?h {0..<n-1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n         (\\<lambda>i. i + 1))\n     {0..<n - 1} =\n    (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1))", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n       (\\<lambda>i. i + 1))\n   {0..<n - 1} =\n  (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  sum ((\\<lambda>i. A $$ (0, i) * V $$ (i - 1, j - 1)) \\<circ>\n       (\\<lambda>i. i + 1))\n   {0..<n - 1} =\n  (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = Matrix.row ?B 0 \\<bullet> col V (j-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1)) =\n    Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n    col V (j - 1)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1)) =\n    (\\<Sum>i = 0..<dim_vec (col V (j - 1)).\n        Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v i *\n        col V (j - 1) $v i)", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "assume x: \"x \\<in> {0..<dim_vec (col V (j - 1))}\""], ["proof (state)\nthis:\n  x \\<in> {0..<dim_vec (col V (j - 1))}\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "have \"Matrix.row ?B 0 $v x = ?B $$ (0,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n    mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x)", "by (rule index_row, insert x V, auto)"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "also"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "have \"... = (vec_last (Matrix.row A 0) (n - 1)) $v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x) =\n    vec_last (Matrix.row A 0) (n - 1) $v x", "by (rule mat_of_row_index, insert x V, auto)"], ["proof (state)\nthis:\n  mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x) =\n  vec_last (Matrix.row A 0) (n - 1) $v x\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "also"], ["proof (state)\nthis:\n  mat_of_row (vec_last (Matrix.row A 0) (n - 1)) $$ (0, x) =\n  vec_last (Matrix.row A 0) (n - 1) $v x\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "have \"... = A $$ (0, x + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_last (Matrix.row A 0) (n - 1) $v x = A $$ (0, x + 1)", "by (smt Suc_less_eq V add.right_neutral add_Suc_right add_diff_cancel_right' \n                      add_diff_inverse_nat atLeastLessThan_iff carrier_matD(1) carrier_matD(2) \n                      dim_col index_row(1) index_row(2) index_vec less.prems less_Suc0 n_not_0 \n                      plus_1_eq_Suc vec_last_def x)"], ["proof (state)\nthis:\n  vec_last (Matrix.row A 0) (n - 1) $v x = A $$ (0, x + 1)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "finally"], ["proof (chain)\npicking this:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)", "have \"Matrix.row ?B 0 $v x = A $$ (0, x + 1)\""], ["proof (prove)\nusing this:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)\n\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n    A $$ (0, x + 1)", "."], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "moreover"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "have \"col V (j - 1) $v x = V $$ (x, j - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col V (j - 1) $v x = V $$ (x, j - 1)", "using V j x"], ["proof (prove)\nusing this:\n  V \\<in> carrier_mat (n - 1) (n - 1)\n  j < dim_col\n       (Matrix.mat 1 n\n         (\\<lambda>(i, j).\n             if j = 0 then a else if j = 1 then b else (0::'a)))\n  x \\<in> {0..<dim_vec (col V (j - 1))}\n\ngoal (1 subgoal):\n 1. col V (j - 1) $v x = V $$ (x, j - 1)", "by auto"], ["proof (state)\nthis:\n  col V (j - 1) $v x = V $$ (x, j - 1)\n\ngoal (2 subgoals):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}\n 2. \\<And>x.\n       x \\<in> {0..<dim_vec (col V (j - 1))} \\<Longrightarrow>\n       A $$ (0, x + 1) * V $$ (x, j - 1) =\n       Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n       col V (j - 1) $v x", "ultimately"], ["proof (chain)\npicking this:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)\n  col V (j - 1) $v x = V $$ (x, j - 1)", "show \"A $$ (0, x + 1) * V $$ (x, j - 1) \n                    = Matrix.row ?B 0 $v x * col V (j - 1) $v x\""], ["proof (prove)\nusing this:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x =\n  A $$ (0, x + 1)\n  col V (j - 1) $v x = V $$ (x, j - 1)\n\ngoal (1 subgoal):\n 1. A $$ (0, x + 1) * V $$ (x, j - 1) =\n    Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n    col V (j - 1) $v x", "by simp"], ["proof (state)\nthis:\n  A $$ (0, x + 1) * V $$ (x, j - 1) =\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 $v x *\n  col V (j - 1) $v x\n\ngoal (1 subgoal):\n 1. {0..<n - 1} = {0..<dim_vec (col V (j - 1))}", "qed (insert V j_not_0, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1)) =\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n  col V (j - 1)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n - 1. A $$ (0, i + 1) * V $$ (i, j - 1)) =\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n  col V (j - 1)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = (?B*V) $$ (0,j-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n    col V (j - 1) =\n    (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j - 1)", "by (rule index_mult_mat[symmetric], insert V j False, auto)"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n  col V (j - 1) =\n  (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j - 1)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (vec_last (Matrix.row A 0) (n - 1))) 0 \\<bullet>\n  col V (j - 1) =\n  (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j - 1)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "have \"... = ?A $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j - 1) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "by (cases \"j=1\", insert False V j i0 BV_0 b_def, auto simp add: Suc_leI)"], ["proof (state)\nthis:\n  (mat_of_row (vec_last (Matrix.row A 0) (n - 1)) * V) $$ (0, j - 1) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n.\n        A $$ (0, i) *\n        (if i = 0\n         then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n              else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n         else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n              else V $$ (i - 1, j - 1))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "."], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<n.\n      A $$ (0, i) *\n      (if i = 0\n       then if j < 1 then 1\\<^sub>m 1 $$ (i, j)\n            else 0\\<^sub>m 1 (n - 1) $$ (i, j - 1)\n       else if j < 1 then 0\\<^sub>m (n - 1) 1 $$ (i - 1, j)\n            else V $$ (i - 1, j - 1))) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (Matrix.mat 1 n\n                       (\\<lambda>(i, j).\n                           if j = 0 then a\n                           else if j = 1 then b else (0::'a)));\n        j < dim_col\n             (Matrix.mat 1 n\n               (\\<lambda>(i, j).\n                   if j = 0 then a\n                   else if j = 1 then b else (0::'a)))\\<rbrakk>\n       \\<Longrightarrow> (A *\n                          four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n                           (0\\<^sub>m (n - 1) 1) V) $$\n                         (i, j) =\n                         Matrix.mat 1 n\n                          (\\<lambda>(i, j).\n                              if j = 0 then a\n                              else if j = 1 then b else (0::'a)) $$\n                         (i, j)\n 2. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 3. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "finally"], ["proof (chain)\npicking this:\n  (A *\n   four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V) $$\n  (i, j) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)", "show \"(A*?U1) $$ (i,j) = ?A $$ (i,j)\""], ["proof (prove)\nusing this:\n  (A *\n   four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V) $$\n  (i, j) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (1 subgoal):\n 1. (A *\n     four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n      (0\\<^sub>m (n - 1) 1) V) $$\n    (i, j) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n    (i, j)", "."], ["proof (state)\nthis:\n  (A *\n   four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V) $$\n  (i, j) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) $$\n  (i, j)\n\ngoal (2 subgoals):\n 1. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 2. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n 2. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "show \"dim_row (A*?U1) = dim_row ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. dim_row\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_row\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "by auto"], ["proof (state)\nthis:\n  dim_row\n   (A *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V) =\n  dim_row\n   (Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal (1 subgoal):\n 1. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "show \"dim_col (A*?U1) = dim_col ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "using U1"], ["proof (prove)\nusing this:\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) V\n  \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. dim_col\n     (A *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) V) =\n    dim_col\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))", "by auto"], ["proof (state)\nthis:\n  dim_col\n   (A *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     V) =\n  dim_col\n   (Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "also"], ["proof (state)\nthis:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "have \"... * ?U2 = ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?A1.0 = \"ab\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?B1.0 = \"Matrix.mat 1 (n-2) (\\<lambda>(i,j). 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?C1.0 = \"Matrix.mat 0 2 (\\<lambda>(i,j). 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?D1.0 = \"Matrix.mat 0 (n-2) (\\<lambda>(i,j). 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?B2.0 = \"(0\\<^sub>m 2 (n - 2))\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?C2.0 = \"(0\\<^sub>m (n - 2) 2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "let ?D2.0 = \"1\\<^sub>m (n - 2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "have A_eq: \"?A = four_block_mat ?A1.0 ?B1.0 ?C1.0 ?D1.0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) =\n    four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))", "by (rule eq_matI, insert ab_def n_ge_2, auto)"], ["proof (state)\nthis:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) =\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "hence \"?A * ?U2 = four_block_mat ?A1.0 ?B1.0 ?C1.0 ?D1.0 * ?U2\""], ["proof (prove)\nusing this:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) =\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2))", "by simp"], ["proof (state)\nthis:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "also"], ["proof (state)\nthis:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "have \"... = four_block_mat (?A1.0 * W + ?B1.0 * ?C2.0) \n              (?A1.0 * ?B2.0 + ?B1.0 * ?D2.0) (?C1.0 * W + ?D1.0 * ?C2.0) \n              (?C1.0 * ?B2.0 + ?D1.0 * ?D2.0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    four_block_mat\n     (ab * W +\n      Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n     (ab * 0\\<^sub>m 2 (n - 2) +\n      Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n      Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n      Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))", "by (rule mult_four_block_mat, auto simp add: W ab_def)"], ["proof (state)\nthis:\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  four_block_mat\n   (ab * W +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (ab * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "also"], ["proof (state)\nthis:\n  four_block_mat ab (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  four_block_mat\n   (ab * W +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (ab * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "have \"... = four_block_mat (?A1.0 * W) (?B1.0) (?C1.0) (?D1.0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat\n     (ab * W +\n      Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n     (ab * 0\\<^sub>m 2 (n - 2) +\n      Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n      Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n      Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2)) =\n    four_block_mat (ab * W) (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))", "by (rule cong_four_block_mat, insert W ab_def, auto)"], ["proof (state)\nthis:\n  four_block_mat\n   (ab * W +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (ab * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2)) =\n  four_block_mat (ab * W) (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "also"], ["proof (state)\nthis:\n  four_block_mat\n   (ab * W +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (ab * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * W +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m (n - 2) 2)\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a) * 0\\<^sub>m 2 (n - 2) +\n    Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a) * 1\\<^sub>m (n - 2)) =\n  four_block_mat (ab * W) (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "have \"... = ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (ab * W) (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n     (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "by (rule eq_matI, insert W n_ge_2 ab_def ab_W, auto simp add: lower_triangular_def)"], ["proof (state)\nthis:\n  four_block_mat (ab * W) (Matrix.mat 1 (n - 2) (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 2 (\\<lambda>(i, j). 0::'a))\n   (Matrix.mat 0 (n - 2) (\\<lambda>(i, j). 0::'a)) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n    four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n     (1\\<^sub>m (n - 2)) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "."], ["proof (state)\nthis:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then a else if j = 1 then b else (0::'a)) *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "finally"], ["proof (chain)\npicking this:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>a.\n       case a of\n       (i, j) \\<Rightarrow> if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "have \"A * U = ?T\""], ["proof (prove)\nusing this:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>a.\n       case a of\n       (i, j) \\<Rightarrow> if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. A * U =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "using assoc_mult_mat[OF _ U1 U2] less.prems"], ["proof (prove)\nusing this:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>a.\n       case a of\n       (i, j) \\<Rightarrow> if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n  ?A \\<in> carrier_mat ?n\\<^sub>1 n \\<Longrightarrow>\n  ?A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  ?A *\n  (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V *\n   four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n    (1\\<^sub>m (n - 2)))\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. A * U =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "unfolding U_def"], ["proof (prove)\nusing this:\n  A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  Matrix.mat 1 n\n   (\\<lambda>a.\n       case a of\n       (i, j) \\<Rightarrow> if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n  ?A \\<in> carrier_mat ?n\\<^sub>1 n \\<Longrightarrow>\n  ?A *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   V *\n  four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n   (1\\<^sub>m (n - 2)) =\n  ?A *\n  (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n    V *\n   four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n    (1\\<^sub>m (n - 2)))\n  A \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. A *\n    (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n      (0\\<^sub>m (n - 1) 1) V *\n     four_block_mat W (0\\<^sub>m 2 (n - 2)) (0\\<^sub>m (n - 2) 2)\n      (1\\<^sub>m (n - 2))) =\n    Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))", "by auto"], ["proof (state)\nthis:\n  A * U =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "moreover"], ["proof (state)\nthis:\n  A * U =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "have \"lower_triangular ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular\n     (Matrix.mat 1 n\n       (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a)))", "unfolding lower_triangular_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row\n            (Matrix.mat 1 n\n              (\\<lambda>(i, j).\n                  if j = 0 then (ab * W) $$ (0, 0) else (0::'a))) \\<and>\n       j < dim_col\n            (Matrix.mat 1 n\n              (\\<lambda>(i, j).\n                  if j = 0 then (ab * W) $$ (0, 0)\n                  else (0::'a))) \\<longrightarrow>\n       Matrix.mat 1 n\n        (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a)) $$\n       (i, j) =\n       (0::'a)", "by simp"], ["proof (state)\nthis:\n  lower_triangular\n   (Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a)))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "ultimately"], ["proof (chain)\npicking this:\n  A * U =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n  lower_triangular\n   (Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a)))", "show ?thesis"], ["proof (prove)\nusing this:\n  A * U =\n  Matrix.mat 1 n\n   (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a))\n  lower_triangular\n   (Matrix.mat 1 n\n     (\\<lambda>(i, j). if j = 0 then (ab * W) $$ (0, 0) else (0::'a)))\n\ngoal (1 subgoal):\n 1. lower_triangular (A * U)", "by simp"], ["proof (state)\nthis:\n  lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. 2 < n \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "ultimately"], ["proof (chain)\npicking this:\n  U \\<in> carrier_mat n n\n  invertible_mat U\n  lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat n n\n  invertible_mat U\n  lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using A U"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat n n\n  invertible_mat U\n  lower_triangular (A * U)\n  A \\<in> carrier_mat 1 n\n  U \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by blast"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 n \\<Longrightarrow>\n       admits_triangular_reduction A", "from this"], ["proof (chain)\npicking this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)", "show \"admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by simp"], ["proof (state)\nthis:\n  admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma admits_diagonal_imp_admits_triangular:\n  assumes a: \"\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction (A::'a mat)\"\n  shows \"\\<forall>A. admits_triangular_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. admits_triangular_reduction A", "fix A::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A. admits_triangular_reduction A", "obtain m n where A: \"A \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        A \\<in> carrier_mat m n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<And>A. admits_triangular_reduction A", "have \"\\<exists>U. U \\<in> carrier_mat n n \\<and> invertible_mat U \\<and> lower_triangular (A * U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "(*Zeros above the diagonal*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (induct n arbitrary: m A rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x m A.\n       \\<lbrakk>\\<And>y m A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat m y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat y y \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat m x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat x x \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; ?A \\<in> carrier_mat ?m ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U.\n                       U \\<in> carrier_mat ?y ?y \\<and>\n                       invertible_mat U \\<and> lower_triangular (?A * U)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<And>x m A.\n       \\<lbrakk>\\<And>y m A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat m y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat y y \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat m x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat x x \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "note A = less.prems(1)"], ["proof (state)\nthis:\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<And>x m A.\n       \\<lbrakk>\\<And>y m A.\n                   \\<lbrakk>y < x; A \\<in> carrier_mat m y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>U.\n  U \\<in> carrier_mat y y \\<and>\n  invertible_mat U \\<and> lower_triangular (A * U);\n        A \\<in> carrier_mat m x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>U.\n                            U \\<in> carrier_mat x x \\<and>\n                            invertible_mat U \\<and> lower_triangular (A * U)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (cases \"n=0 \\<or> m=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<or> m = 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case True"], ["proof (state)\nthis:\n  n = 0 \\<or> m = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> m = 0 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "then"], ["proof (chain)\npicking this:\n  n = 0 \\<or> m = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0 \\<or> m = 0\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using triangularizable_m0 triangularizable_0n less.prems"], ["proof (prove)\nusing this:\n  n = 0 \\<or> m = 0\n  ?A \\<in> carrier_mat ?m 0 \\<Longrightarrow>\n  \\<exists>U.\n     U \\<in> carrier_mat 0 0 \\<and>\n     invertible_mat U \\<and> lower_triangular (?A * U)\n  ?A \\<in> carrier_mat 0 ?n \\<Longrightarrow>\n  \\<exists>U.\n     U \\<in> carrier_mat ?n ?n \\<and>\n     invertible_mat U \\<and> lower_triangular (?A * U)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by auto"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case False"], ["proof (state)\nthis:\n  \\<not> (n = 0 \\<or> m = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note nm_not_0 = False"], ["proof (state)\nthis:\n  \\<not> (n = 0 \\<or> m = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "from this"], ["proof (chain)\npicking this:\n  \\<not> (n = 0 \\<or> m = 0)", "have m_not_0: \"m \\<noteq> 0\" and n_not_0: \"n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (n = 0 \\<or> m = 0)\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0 &&& n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  m \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> m = 0) \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (cases \"m = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case True"], ["proof (state)\nthis:\n  m = 1\n\ngoal (2 subgoals):\n 1. m = 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note m1 = True"], ["proof (state)\nthis:\n  m = 1\n\ngoal (2 subgoals):\n 1. m = 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using admits_diagonal_imp_admits_triangular_1xn A m1 a"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat 1 ?n. admits_triangular_reduction A\n  A \\<in> carrier_mat m n\n  m = 1\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat 1 ?n.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n  A \\<in> carrier_mat m n\n  m = 1\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by blast"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case False"], ["proof (state)\nthis:\n  m \\<noteq> 1\n\ngoal (1 subgoal):\n 1. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note m_not_1 = False"], ["proof (state)\nthis:\n  m \\<noteq> 1\n\ngoal (1 subgoal):\n 1. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "(* The article says \"Right-multiply A by a unimodular matrix V which reduces the first row.\n           To do that, I use the first case of the induction (m=1) to reduce the first row. \n           With lemma mult_eq_first_row I will show that A*V reduces the first row.\n        *)"], ["proof (state)\nthis:\n  m \\<noteq> 1\n\ngoal (1 subgoal):\n 1. m \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "proof (cases \"n=1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case True"], ["proof (state)\nthis:\n  n = 1\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)\n 2. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 1\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using invertible_mat_zero lower_triangular_def"], ["proof (prove)\nusing this:\n  n = 1\n  ?A \\<in> carrier_mat 0 0 \\<Longrightarrow> invertible_mat ?A\n  lower_triangular ?A =\n  (\\<forall>i j.\n      i < j \\<and> i < dim_row ?A \\<and> j < dim_col ?A \\<longrightarrow>\n      ?A $$ (i, j) = (0::?'a))\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by (metis carrier_matD(2) det_one gr_implies_not0 invertible_iff_is_unit_JNF less(2) \n                less_one one_carrier_mat right_mult_one_mat')"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "note n_not_1 = False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "let ?first_row = \"mat_of_row (Matrix.row A 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have first_row: \"?first_row \\<in> carrier_mat 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (Matrix.row A 0) \\<in> carrier_mat 1 n", "using less.prems"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. mat_of_row (Matrix.row A 0) \\<in> carrier_mat 1 n", "by auto"], ["proof (state)\nthis:\n  mat_of_row (Matrix.row A 0) \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have m1: \"m>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < m", "using m_not_1 m_not_0"], ["proof (prove)\nusing this:\n  m \\<noteq> 1\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < m", "by linarith"], ["proof (state)\nthis:\n  1 < m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have n1: \"n>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n", "using n_not_1 n_not_0"], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < n", "by linarith"], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "obtain V where lt_first_row_V: \"lower_triangular (?first_row * V)\"\n            and inv_V: \"invertible_mat V\" and V: \"V \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>lower_triangular (mat_of_row (Matrix.row A 0) * V);\n         invertible_mat V; V \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*Using the other induction case*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>lower_triangular (mat_of_row (Matrix.row A 0) * V);\n         invertible_mat V; V \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using admits_diagonal_imp_admits_triangular_1xn a first_row"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat 1 ?n. admits_triangular_reduction A\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n  mat_of_row (Matrix.row A 0) \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>lower_triangular (mat_of_row (Matrix.row A 0) * V);\n         invertible_mat V; V \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A\\<in>carrier_mat 1 ?n.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n  mat_of_row (Matrix.row A 0) \\<in> carrier_mat 1 n\n\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>lower_triangular (mat_of_row (Matrix.row A 0) * V);\n         invertible_mat V; V \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  lower_triangular (mat_of_row (Matrix.row A 0) * V)\n  invertible_mat V\n  V \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have AV: \"A*V \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * V \\<in> carrier_mat m n", "using V less"], ["proof (prove)\nusing this:\n  V \\<in> carrier_mat n n\n  \\<lbrakk>?y < n; ?A \\<in> carrier_mat ?m ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U.\n                       U \\<in> carrier_mat ?y ?y \\<and>\n                       invertible_mat U \\<and> lower_triangular (?A * U)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. A * V \\<in> carrier_mat m n", "by auto"], ["proof (state)\nthis:\n  A * V \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have dim_row_AV: \"dim_row (A * V) = 1 + (m-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A * V) = 1 + (m - 1)", "using m1 AV"], ["proof (prove)\nusing this:\n  1 < m\n  A * V \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. dim_row (A * V) = 1 + (m - 1)", "by auto"], ["proof (state)\nthis:\n  dim_row (A * V) = 1 + (m - 1)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have dim_col_AV: \"dim_col (A * V) = 1 + (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (A * V) = 1 + (n - 1)", "using n1 AV"], ["proof (prove)\nusing this:\n  1 < n\n  A * V \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. dim_col (A * V) = 1 + (n - 1)", "by fastforce"], ["proof (state)\nthis:\n  dim_col (A * V) = 1 + (n - 1)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have reduced_first_row: \"Matrix.row (?first_row * V) 0 = Matrix.row (A * V) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 = Matrix.row (A * V) 0", "by (rule mult_eq_first_row, insert first_row m1 less.prems, auto)"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 = Matrix.row (A * V) 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "obtain a zero B C where split: \"split_block (A*V) 1 1 = (a, zero, B, C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a zero B C.\n        split_block (A * V) 1 1 = (a, zero, B, C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod_cases4"], ["proof (prove)\nusing this:\n  (\\<And>a b c d.\n      ?y = (a, b, c, d) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a zero B C.\n        split_block (A * V) 1 1 = (a, zero, B, C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  split_block (A * V) 1 1 = (a, zero, B, C)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have a: \"a \\<in> carrier_mat 1 1\" and zero: \"zero \\<in> carrier_mat 1 (n-1)\" and\n            B: \"B \\<in> carrier_mat (m-1) 1\" and C: \"C \\<in> carrier_mat (m-1) (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> carrier_mat 1 1 &&& zero \\<in> carrier_mat 1 (n - 1)) &&&\n    B \\<in> carrier_mat (m - 1) 1 &&& C \\<in> carrier_mat (m - 1) (n - 1)", "by (rule split_block[OF split dim_row_AV dim_col_AV])+"], ["proof (state)\nthis:\n  a \\<in> carrier_mat 1 1\n  zero \\<in> carrier_mat 1 (n - 1)\n  B \\<in> carrier_mat (m - 1) 1\n  C \\<in> carrier_mat (m - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have AV_block: \"A*V = four_block_mat a zero B C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * V = four_block_mat a zero B C", "by (rule split_block[OF split dim_row_AV dim_col_AV])"], ["proof (state)\nthis:\n  A * V = four_block_mat a zero B C\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have \"\\<exists>W. W\\<in> carrier_mat (n-1) (n-1) \\<and> invertible_mat W \\<and> lower_triangular (C*W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>W.\n       W \\<in> carrier_mat (n - 1) (n - 1) \\<and>\n       invertible_mat W \\<and> lower_triangular (C * W)", "by (rule less.hyps, insert n1 C, auto)"], ["proof (state)\nthis:\n  \\<exists>W.\n     W \\<in> carrier_mat (n - 1) (n - 1) \\<and>\n     invertible_mat W \\<and> lower_triangular (C * W)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>W.\n     W \\<in> carrier_mat (n - 1) (n - 1) \\<and>\n     invertible_mat W \\<and> lower_triangular (C * W)", "obtain W where inv_W: \"invertible_mat W\" and lt_CW: \"lower_triangular (C*W)\" \n            and W: \"W \\<in> carrier_mat (n-1) (n-1)\""], ["proof (prove)\nusing this:\n  \\<exists>W.\n     W \\<in> carrier_mat (n - 1) (n - 1) \\<and>\n     invertible_mat W \\<and> lower_triangular (C * W)\n\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>invertible_mat W; lower_triangular (C * W);\n         W \\<in> carrier_mat (n - 1) (n - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  invertible_mat W\n  lower_triangular (C * W)\n  W \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "let ?W2 = \"four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n-1)) (0\\<^sub>m (n-1) 1) W\""], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have W2: \"?W2 \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W\n    \\<in> carrier_mat n n", "using V W dim_col_AV"], ["proof (prove)\nusing this:\n  V \\<in> carrier_mat n n\n  W \\<in> carrier_mat (n - 1) (n - 1)\n  dim_col (A * V) = 1 + (n - 1)\n\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W\n    \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) W\n  \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have \"Determinant.det ?W2 = Determinant.det (1\\<^sub>m 1) * Determinant.det W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det\n     (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W) =\n    Determinant.det (1\\<^sub>m 1) * Determinant.det W", "by (rule det_four_block_mat_lower_left_zero_col[OF _ _ _ W], auto)"], ["proof (state)\nthis:\n  Determinant.det\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W) =\n  Determinant.det (1\\<^sub>m 1) * Determinant.det W\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "hence det_W2: \"Determinant.det ?W2 = Determinant.det W\""], ["proof (prove)\nusing this:\n  Determinant.det\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W) =\n  Determinant.det (1\\<^sub>m 1) * Determinant.det W\n\ngoal (1 subgoal):\n 1. Determinant.det\n     (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W) =\n    Determinant.det W", "by auto"], ["proof (state)\nthis:\n  Determinant.det\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W) =\n  Determinant.det W\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "hence inv_W2: \"invertible_mat ?W2\""], ["proof (prove)\nusing this:\n  Determinant.det\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W) =\n  Determinant.det W\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "by (metis W four_block_carrier_mat inv_W invertible_iff_is_unit_JNF one_carrier_mat)"], ["proof (state)\nthis:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have inv_V_W2: \"invertible_mat (V * ?W2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "using inv_W2 inv_V V W2 invertible_mult_JNF"], ["proof (prove)\nusing this:\n  invertible_mat\n   (four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n  invertible_mat V\n  V \\<in> carrier_mat n n\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) W\n  \\<in> carrier_mat n n\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?B \\<in> carrier_mat ?n ?n;\n   invertible_mat ?A; invertible_mat ?B\\<rbrakk>\n  \\<Longrightarrow> invertible_mat (?A * ?B)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "by blast"], ["proof (state)\nthis:\n  invertible_mat\n   (V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "have \"lower_triangular (A*V*?W2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "let ?T = \"(four_block_mat a (0\\<^sub>m 1 (n-1)) B (C * W))\""], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have zero_eq: \"zero = 0\\<^sub>m 1 (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero = 0\\<^sub>m 1 (n - 1)", "proof (rule eq_matI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)\n 2. dim_row zero = dim_row (0\\<^sub>m 1 (n - 1))\n 3. dim_col zero = dim_col (0\\<^sub>m 1 (n - 1))", "show 1: \"dim_row zero = dim_row (0\\<^sub>m 1 (n - 1))\" and 2: \"dim_col zero = dim_col (0\\<^sub>m 1 (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row zero = dim_row (0\\<^sub>m 1 (n - 1)) &&&\n    dim_col zero = dim_col (0\\<^sub>m 1 (n - 1))", "using zero"], ["proof (prove)\nusing this:\n  zero \\<in> carrier_mat 1 (n - 1)\n\ngoal (1 subgoal):\n 1. dim_row zero = dim_row (0\\<^sub>m 1 (n - 1)) &&&\n    dim_col zero = dim_col (0\\<^sub>m 1 (n - 1))", "by auto"], ["proof (state)\nthis:\n  dim_row zero = dim_row (0\\<^sub>m 1 (n - 1))\n  dim_col zero = dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "assume i: \"i < dim_row (0\\<^sub>m 1 (n - 1))\" and j: \"j < dim_col (0\\<^sub>m 1 (n - 1))\""], ["proof (state)\nthis:\n  i < dim_row (0\\<^sub>m 1 (n - 1))\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have i0: \"i=0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = 0", "using i"], ["proof (prove)\nusing this:\n  i < dim_row (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. i = 0", "by auto"], ["proof (state)\nthis:\n  i = 0\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"0 = Matrix.row (?first_row * V) 0 $v (j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1)", "using lt_first_row_V j"], ["proof (prove)\nusing this:\n  lower_triangular (mat_of_row (Matrix.row A 0) * V)\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. (0::'a) = Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1)", "unfolding lower_triangular_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (mat_of_row (Matrix.row A 0) * V) \\<and>\n     j < dim_col (mat_of_row (Matrix.row A 0) * V) \\<longrightarrow>\n     (mat_of_row (Matrix.row A 0) * V) $$ (i, j) = (0::'a)\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. (0::'a) = Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1)", "by (metis Suc_eq_plus1 carrier_matD(2) index_mult_mat(2,3) index_row(1) less_diff_conv\n                    mat_of_row_dim(1) zero zero_less_Suc zero_less_one_class.zero_less_one V 2)"], ["proof (state)\nthis:\n  (0::'a) = Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  (0::'a) = Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = Matrix.row (A*V) 0 $v (j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1) =\n    Matrix.row (A * V) 0 $v (j + 1)", "by (simp add: reduced_first_row)"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1) =\n  Matrix.row (A * V) 0 $v (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.row (mat_of_row (Matrix.row A 0) * V) 0 $v (j + 1) =\n  Matrix.row (A * V) 0 $v (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = (A*V) $$ (i, j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row (A * V) 0 $v (j + 1) = (A * V) $$ (i, j + 1)", "using V dim_row_AV i0 j"], ["proof (prove)\nusing this:\n  V \\<in> carrier_mat n n\n  dim_row (A * V) = 1 + (m - 1)\n  i = 0\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. Matrix.row (A * V) 0 $v (j + 1) = (A * V) $$ (i, j + 1)", "by auto"], ["proof (state)\nthis:\n  Matrix.row (A * V) 0 $v (j + 1) = (A * V) $$ (i, j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  Matrix.row (A * V) 0 $v (j + 1) = (A * V) $$ (i, j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = four_block_mat a zero B C $$ (i, j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A * V) $$ (i, j + 1) = four_block_mat a zero B C $$ (i, j + 1)", "by (simp add: AV_block)"], ["proof (state)\nthis:\n  (A * V) $$ (i, j + 1) = four_block_mat a zero B C $$ (i, j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  (A * V) $$ (i, j + 1) = four_block_mat a zero B C $$ (i, j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = (if i < dim_row a then if (j+1) < dim_col a \n              then a $$ (i, (j+1)) else zero $$ (i, (j+1) - dim_col a) else if (j+1) < dim_col a\n              then B $$ (i - dim_row a, (j+1)) else C $$ (i - dim_row a, (j+1) - dim_col a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat a zero B C $$ (i, j + 1) =\n    (if i < dim_row a\n     then if j + 1 < dim_col a then a $$ (i, j + 1)\n          else zero $$ (i, j + 1 - dim_col a)\n     else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n          else C $$ (i - dim_row a, j + 1 - dim_col a))", "by (rule index_mat_four_block, insert a zero i j C, auto)"], ["proof (state)\nthis:\n  four_block_mat a zero B C $$ (i, j + 1) =\n  (if i < dim_row a\n   then if j + 1 < dim_col a then a $$ (i, j + 1)\n        else zero $$ (i, j + 1 - dim_col a)\n   else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n        else C $$ (i - dim_row a, j + 1 - dim_col a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  four_block_mat a zero B C $$ (i, j + 1) =\n  (if i < dim_row a\n   then if j + 1 < dim_col a then a $$ (i, j + 1)\n        else zero $$ (i, j + 1 - dim_col a)\n   else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n        else C $$ (i - dim_row a, j + 1 - dim_col a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = zero $$ (i, (j+1) - dim_col a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i < dim_row a\n     then if j + 1 < dim_col a then a $$ (i, j + 1)\n          else zero $$ (i, j + 1 - dim_col a)\n     else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n          else C $$ (i - dim_row a, j + 1 - dim_col a)) =\n    zero $$ (i, j + 1 - dim_col a)", "using a zero i j C"], ["proof (prove)\nusing this:\n  a \\<in> carrier_mat 1 1\n  zero \\<in> carrier_mat 1 (n - 1)\n  i < dim_row (0\\<^sub>m 1 (n - 1))\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n  C \\<in> carrier_mat (m - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. (if i < dim_row a\n     then if j + 1 < dim_col a then a $$ (i, j + 1)\n          else zero $$ (i, j + 1 - dim_col a)\n     else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n          else C $$ (i - dim_row a, j + 1 - dim_col a)) =\n    zero $$ (i, j + 1 - dim_col a)", "by auto"], ["proof (state)\nthis:\n  (if i < dim_row a\n   then if j + 1 < dim_col a then a $$ (i, j + 1)\n        else zero $$ (i, j + 1 - dim_col a)\n   else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n        else C $$ (i - dim_row a, j + 1 - dim_col a)) =\n  zero $$ (i, j + 1 - dim_col a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "also"], ["proof (state)\nthis:\n  (if i < dim_row a\n   then if j + 1 < dim_col a then a $$ (i, j + 1)\n        else zero $$ (i, j + 1 - dim_col a)\n   else if j + 1 < dim_col a then B $$ (i - dim_row a, j + 1)\n        else C $$ (i - dim_row a, j + 1 - dim_col a)) =\n  zero $$ (i, j + 1 - dim_col a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "have \"... = zero $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zero $$ (i, j + 1 - dim_col a) = zero $$ (i, j)", "using a i"], ["proof (prove)\nusing this:\n  a \\<in> carrier_mat 1 1\n  i < dim_row (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. zero $$ (i, j + 1 - dim_col a) = zero $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  zero $$ (i, j + 1 - dim_col a) = zero $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m 1 (n - 1));\n        j < dim_col (0\\<^sub>m 1 (n - 1))\\<rbrakk>\n       \\<Longrightarrow> zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "finally"], ["proof (chain)\npicking this:\n  (0::'a) = zero $$ (i, j)", "show \"zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)\""], ["proof (prove)\nusing this:\n  (0::'a) = zero $$ (i, j)\n\ngoal (1 subgoal):\n 1. zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "using i j"], ["proof (prove)\nusing this:\n  (0::'a) = zero $$ (i, j)\n  i < dim_row (0\\<^sub>m 1 (n - 1))\n  j < dim_col (0\\<^sub>m 1 (n - 1))\n\ngoal (1 subgoal):\n 1. zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  zero $$ (i, j) = 0\\<^sub>m 1 (n - 1) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  zero = 0\\<^sub>m 1 (n - 1)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have rw1: \"a * (1\\<^sub>m 1) + zero * (0\\<^sub>m (n-1) 1) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1 = a", "using a zero"], ["proof (prove)\nusing this:\n  a \\<in> carrier_mat 1 1\n  zero \\<in> carrier_mat 1 (n - 1)\n\ngoal (1 subgoal):\n 1. a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1 = a", "by auto"], ["proof (state)\nthis:\n  a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1 = a\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have rw2: \"a * (0\\<^sub>m 1 (n-1)) + zero * W = 0\\<^sub>m 1 (n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * 0\\<^sub>m 1 (n - 1) + zero * W = 0\\<^sub>m 1 (n - 1)", "using a zero zero_eq W"], ["proof (prove)\nusing this:\n  a \\<in> carrier_mat 1 1\n  zero \\<in> carrier_mat 1 (n - 1)\n  zero = 0\\<^sub>m 1 (n - 1)\n  W \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. a * 0\\<^sub>m 1 (n - 1) + zero * W = 0\\<^sub>m 1 (n - 1)", "by auto"], ["proof (state)\nthis:\n  a * 0\\<^sub>m 1 (n - 1) + zero * W = 0\\<^sub>m 1 (n - 1)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have rw3: \"B * (1\\<^sub>m 1) + C * (0\\<^sub>m (n-1) 1) = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1 = B", "using B C"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat (m - 1) 1\n  C \\<in> carrier_mat (m - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1 = B", "by auto"], ["proof (state)\nthis:\n  B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1 = B\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have rw4: \"B * (0\\<^sub>m 1 (n-1)) + C * W = C * W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * 0\\<^sub>m 1 (n - 1) + C * W = C * W", "using B C W"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat (m - 1) 1\n  C \\<in> carrier_mat (m - 1) (n - 1)\n  W \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. B * 0\\<^sub>m 1 (n - 1) + C * W = C * W", "by auto"], ["proof (state)\nthis:\n  B * 0\\<^sub>m 1 (n - 1) + C * W = C * W\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have \"A*V = four_block_mat a zero B C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * V = four_block_mat a zero B C", "by (rule AV_block)"], ["proof (state)\nthis:\n  A * V = four_block_mat a zero B C\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "also"], ["proof (state)\nthis:\n  A * V = four_block_mat a zero B C\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have \"... * ?W2 = four_block_mat (a * (1\\<^sub>m 1) + zero * (0\\<^sub>m (n-1) 1)) \n          (a * (0\\<^sub>m 1 (n-1)) + zero * W) (B * (1\\<^sub>m 1) + C * (0\\<^sub>m (n-1) 1))\n          (B * (0\\<^sub>m 1 (n-1)) + C * W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat a zero B C *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W =\n    four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n     (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n     (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n     (B * 0\\<^sub>m 1 (n - 1) + C * W)", "by (rule mult_four_block_mat[OF a zero B C], insert W, auto)"], ["proof (state)\nthis:\n  four_block_mat a zero B C *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n   (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n   (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n   (B * 0\\<^sub>m 1 (n - 1) + C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "also"], ["proof (state)\nthis:\n  four_block_mat a zero B C *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n   (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n   (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n   (B * 0\\<^sub>m 1 (n - 1) + C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have \"... = ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n     (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n     (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n     (B * 0\\<^sub>m 1 (n - 1) + C * W) =\n    four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)", "using rw1 rw2 rw3 rw4"], ["proof (prove)\nusing this:\n  a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1 = a\n  a * 0\\<^sub>m 1 (n - 1) + zero * W = 0\\<^sub>m 1 (n - 1)\n  B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1 = B\n  B * 0\\<^sub>m 1 (n - 1) + C * W = C * W\n\ngoal (1 subgoal):\n 1. four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n     (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n     (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n     (B * 0\\<^sub>m 1 (n - 1) + C * W) =\n    four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)", "by simp"], ["proof (state)\nthis:\n  four_block_mat (a * 1\\<^sub>m 1 + zero * 0\\<^sub>m (n - 1) 1)\n   (a * 0\\<^sub>m 1 (n - 1) + zero * W)\n   (B * 1\\<^sub>m 1 + C * 0\\<^sub>m (n - 1) 1)\n   (B * 0\\<^sub>m 1 (n - 1) + C * W) =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "finally"], ["proof (chain)\npicking this:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)", "have AVW2: \"A*V * ?W2 = ...\""], ["proof (prove)\nusing this:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n\ngoal (1 subgoal):\n 1. A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W =\n    four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)", "."], ["proof (state)\nthis:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "moreover"], ["proof (state)\nthis:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "have \"lower_triangular ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W))", "using lt_CW"], ["proof (prove)\nusing this:\n  lower_triangular (C * W)\n\ngoal (1 subgoal):\n 1. lower_triangular (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W))", "unfolding lower_triangular_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (C * W) \\<and> j < dim_col (C * W) \\<longrightarrow>\n     (C * W) $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)) \\<and>\n       j < dim_col\n            (four_block_mat a (0\\<^sub>m 1 (n - 1)) B\n              (C * W)) \\<longrightarrow>\n       four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W) $$ (i, j) = (0::'a)", "using a zero B C W"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (C * W) \\<and> j < dim_col (C * W) \\<longrightarrow>\n     (C * W) $$ (i, j) = (0::'a)\n  a \\<in> carrier_mat 1 1\n  zero \\<in> carrier_mat 1 (n - 1)\n  B \\<in> carrier_mat (m - 1) 1\n  C \\<in> carrier_mat (m - 1) (n - 1)\n  W \\<in> carrier_mat (n - 1) (n - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)) \\<and>\n       j < dim_col\n            (four_block_mat a (0\\<^sub>m 1 (n - 1)) B\n              (C * W)) \\<longrightarrow>\n       four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W) $$ (i, j) = (0::'a)", "by (auto, metis (full_types) Suc_less_eq Suc_pred basic_trans_rules(19))"], ["proof (state)\nthis:\n  lower_triangular (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W))\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "ultimately"], ["proof (chain)\npicking this:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n  lower_triangular (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W))", "show ?thesis"], ["proof (prove)\nusing this:\n  A * V *\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n   W =\n  four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W)\n  lower_triangular (four_block_mat a (0\\<^sub>m 1 (n - 1)) B (C * W))\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A * V *\n      four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1))\n       (0\\<^sub>m (n - 1) 1) W)", "by simp"], ["proof (state)\nthis:\n  lower_triangular\n   (A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower_triangular\n   (A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "then"], ["proof (chain)\npicking this:\n  lower_triangular\n   (A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)", "show ?thesis"], ["proof (prove)\nusing this:\n  lower_triangular\n   (A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using inv_V_W2 V W2 less.prems"], ["proof (prove)\nusing this:\n  lower_triangular\n   (A * V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n  invertible_mat\n   (V *\n    four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1)\n     W)\n  V \\<in> carrier_mat n n\n  four_block_mat (1\\<^sub>m 1) (0\\<^sub>m 1 (n - 1)) (0\\<^sub>m (n - 1) 1) W\n  \\<in> carrier_mat n n\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat n n \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by (smt assoc_mult_mat mult_carrier_mat)"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. \\<And>A. admits_triangular_reduction A", "thus \"admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "using A"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<exists>U.\n     U \\<in> carrier_mat n n \\<and>\n     invertible_mat U \\<and> lower_triangular (A * U)\n  A \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by simp"], ["proof (state)\nthis:\n  admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary admits_diagonal_imp_admits_triangular':\n  assumes a: \"\\<forall>A. admits_diagonal_reduction (A::'a mat)\"\n  shows \"\\<forall>A. admits_triangular_reduction (A::'a mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using admits_diagonal_imp_admits_triangular assms"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by blast"], ["", "lemma admits_triangular_reduction_1x2:\n  assumes \"\\<forall>A::'a mat. A \\<in> carrier_mat 1 2 \\<longrightarrow> admits_triangular_reduction A\"\n  shows \"\\<forall>C::'a mat. admits_triangular_reduction C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C. admits_triangular_reduction C", "using admits_diagonal_imp_admits_triangular assms triangular_eq_diagonal_1x2"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2.\n     admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n  \\<forall>A.\n     A \\<in> carrier_mat 1 2 \\<longrightarrow> admits_triangular_reduction A\n  (\\<forall>A\\<in>carrier_mat 1 2. admits_triangular_reduction A) =\n  (\\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A)\n\ngoal (1 subgoal):\n 1. \\<forall>C. admits_triangular_reduction C", "by auto"], ["", "lemma Hermite_ring_OFCLASS:\n assumes \"\\<forall>A \\<in> carrier_mat 1 2. admits_triangular_reduction (A::'a mat)\"\n shows \"OFCLASS('a, Hermite_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "show \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by (rule admits_diagonal_imp_admits_triangular[OF assms[unfolded triangular_eq_diagonal_1x2]])"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Hermite_ring_OFCLASS':\n assumes \"\\<forall>A \\<in> carrier_mat 1 2.admits_diagonal_reduction (A::'a mat)\"\n shows \"OFCLASS('a, Hermite_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "show \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by (rule admits_diagonal_imp_admits_triangular[OF assms])"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma theorem3_part1:\n  assumes T: \"(\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \n    \\<and> ideal_generated {a1,b1} = ideal_generated {1})\"\n  shows \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "proof (rule admits_triangular_reduction_1x2, rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "fix A::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "assume A: \"A \\<in> carrier_mat 1 2\""], ["proof (state)\nthis:\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "let ?a = \"A $$ (0,0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "let ?b = \"A $$ (0,1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "obtain a1 b1 d where a: \"?a = a1*d\" and b: \"?b = b1*d\" \n    and i: \"ideal_generated {a1,b1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 d b1.\n        \\<lbrakk>A $$ (0, 0) = a1 * d; A $$ (0, 1) = b1 * d;\n         ideal_generated {a1, b1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using T"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 d b1.\n        \\<lbrakk>A $$ (0, 0) = a1 * d; A $$ (0, 1) = b1 * d;\n         ideal_generated {a1, b1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A $$ (0, 0) = a1 * d\n  A $$ (0, 1) = b1 * d\n  ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "obtain s t where sa1tb1:\"s*a1+t*b1=1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        s * a1 + t * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ideal_generated_pair_exists_pq1[OF i[simplified]]"], ["proof (prove)\nusing this:\n  \\<exists>p q. p * a1 + q * b1 = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        s * a1 + t * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s * a1 + t * b1 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "let ?Q = \"Matrix.mat 2 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then s else\n                                    if  i = 0 \\<and> j = 1 then -b1 else\n                                    if  i = 1 \\<and> j = 0 then t else a1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "have Q: \"?Q \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1)\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then s\n       else if i = 0 \\<and> j = 1 then - b1\n            else if i = 1 \\<and> j = 0 then t else a1)\n  \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "have det_Q: \"Determinant.det ?Q = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1)) =\n    (1::'a)", "unfolding det_2[OF Q]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (0, 0) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (1, 1) -\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (0, 1) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (1, 0) =\n    (1::'a)", "using sa1tb1"], ["proof (prove)\nusing this:\n  s * a1 + t * b1 = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (0, 0) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (1, 1) -\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (0, 1) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1) $$\n    (1, 0) =\n    (1::'a)", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "hence inv_Q: \"invertible_mat ?Q\""], ["proof (prove)\nusing this:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "using invertible_iff_is_unit_JNF[OF Q]"], ["proof (prove)\nusing this:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1)) =\n  (1::'a)\n  invertible_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1)) =\n  (Determinant.det\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then s\n          else if i = 0 \\<and> j = 1 then - b1\n               else if i = 1 \\<and> j = 0 then t else a1)) dvd\n   (1::'a))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "by auto"], ["proof (state)\nthis:\n  invertible_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "have lower_AQ: \"lower_triangular (A*?Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lower_triangular\n     (A *\n      Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lower_triangular\n     (A *\n      Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "have \"Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1\" if j2: \"j<2\" and j0: \"0<j\" for j"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1", "by (metis A One_nat_def a b carrier_matD(1) carrier_matD(2) index_row(1) lessI \n          more_arith_simps(11) mult.commute numeral_2_eq_2 pos2)"], ["proof (state)\nthis:\n  \\<lbrakk>?j < (2::?'b1); (0::?'b1) < ?j\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A *\n      Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < (2::?'b1); (0::?'b1) < ?j\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1\n\ngoal (1 subgoal):\n 1. lower_triangular\n     (A *\n      Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then s\n           else if i = 0 \\<and> j = 1 then - b1\n                else if i = 1 \\<and> j = 0 then t else a1))", "unfolding lower_triangular_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < (2::?'b1); (0::?'b1) < ?j\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row\n            (A *\n             Matrix.mat 2 2\n              (\\<lambda>(i, j).\n                  if i = 0 \\<and> j = 0 then s\n                  else if i = 0 \\<and> j = 1 then - b1\n                       else if i = 1 \\<and> j = 0 then t else a1)) \\<and>\n       j < dim_col\n            (A *\n             Matrix.mat 2 2\n              (\\<lambda>(i, j).\n                  if i = 0 \\<and> j = 0 then s\n                  else if i = 0 \\<and> j = 1 then - b1\n                       else if i = 1 \\<and> j = 0 then t\n                            else a1)) \\<longrightarrow>\n       (A *\n        Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then s\n             else if i = 0 \\<and> j = 1 then - b1\n                  else if i = 1 \\<and> j = 0 then t else a1)) $$\n       (i, j) =\n       (0::'a)", "using A"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < (2::?'b1); (0::?'b1) < ?j\\<rbrakk>\n  \\<Longrightarrow> Matrix.row A 0 $v Suc 0 * a1 = Matrix.row A 0 $v 0 * b1\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i < j \\<and>\n       i < dim_row\n            (A *\n             Matrix.mat 2 2\n              (\\<lambda>(i, j).\n                  if i = 0 \\<and> j = 0 then s\n                  else if i = 0 \\<and> j = 1 then - b1\n                       else if i = 1 \\<and> j = 0 then t else a1)) \\<and>\n       j < dim_col\n            (A *\n             Matrix.mat 2 2\n              (\\<lambda>(i, j).\n                  if i = 0 \\<and> j = 0 then s\n                  else if i = 0 \\<and> j = 1 then - b1\n                       else if i = 1 \\<and> j = 0 then t\n                            else a1)) \\<longrightarrow>\n       (A *\n        Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then s\n             else if i = 0 \\<and> j = 1 then - b1\n                  else if i = 1 \\<and> j = 0 then t else a1)) $$\n       (i, j) =\n       (0::'a)", "by (auto simp add: scalar_prod_def sum_two_rw)"], ["proof (state)\nthis:\n  lower_triangular\n   (A *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lower_triangular\n   (A *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 1 2 \\<Longrightarrow>\n       admits_triangular_reduction A", "show \"admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_triangular_reduction A", "unfolding admits_triangular_reduction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "using lower_AQ inv_Q Q A"], ["proof (prove)\nusing this:\n  lower_triangular\n   (A *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1))\n  invertible_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then s\n         else if i = 0 \\<and> j = 1 then - b1\n              else if i = 1 \\<and> j = 0 then t else a1))\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then s\n       else if i = 0 \\<and> j = 1 then - b1\n            else if i = 1 \\<and> j = 0 then t else a1)\n  \\<in> carrier_mat 2 2\n  A \\<in> carrier_mat 1 2\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n       invertible_mat U \\<and> lower_triangular (A * U)", "by force"], ["proof (state)\nthis:\n  admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma theorem3_part2:\n  assumes 1: \"\\<forall>A::'a mat. admits_triangular_reduction A\"\n  shows \"\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \\<and> ideal_generated {a1,b1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "proof (rule allI)+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "fix a b::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?A = \"Matrix.mat 1 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then a else b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "obtain Q where AQ: \"lower_triangular (?A*Q)\" and inv_Q: \"invertible_mat Q\"\n    and Q: \"Q \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>lower_triangular\n                  (Matrix.mat 1 2\n                    (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n                   Q);\n         invertible_mat Q; Q \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>lower_triangular\n                  (Matrix.mat 1 2\n                    (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n                   Q);\n         invertible_mat Q; Q \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>lower_triangular\n                  (Matrix.mat 1 2\n                    (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n                   Q);\n         invertible_mat Q; Q \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  lower_triangular\n   (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n    Q)\n  invertible_mat Q\n  Q \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence [simp]: \"dim_col Q = 2\" and [simp]: \"dim_row Q = 2\""], ["proof (prove)\nusing this:\n  lower_triangular\n   (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n    Q)\n  invertible_mat Q\n  Q \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. dim_col Q = 2 &&& dim_row Q = 2", "by auto"], ["proof (state)\nthis:\n  dim_col Q = 2\n  dim_row Q = 2\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?s = \"Q $$ (0,0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?t = \"Q $$ (1,0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?a1 = \"Q $$ (1,1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?b1 = \"-(Q $$ (0,1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "let ?d = \"(?A*Q) $$ (0,0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have ab1_ba1: \"a*?b1 = b*?a1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "have  \"(?A*Q) $$ (0,1) =  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 1) =\n    (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0))", "unfolding times_mat_def col_def scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat\n     (dim_row\n       (Matrix.mat 1 2\n         (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b)))\n     (dim_col Q)\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (Matrix.vec (dim_row Q) (\\<lambda>i. Q $$ (i, j))).\n            Matrix.row\n             (Matrix.mat 1 2\n               (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b))\n             i $v\n            ia *\n            Matrix.vec (dim_row Q) (\\<lambda>i. Q $$ (i, j)) $v ia) $$\n    (0, 1) =\n    (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0))", "by auto"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0))\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "also"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0))\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "have \"... = (\\<Sum>i \\<in> {0,1}. (if i = 0 then a else b) * Q $$ (i, Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0)) =\n    (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, Suc 0))", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0)) =\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, Suc 0))\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, Suc 0)) =\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, Suc 0))\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "have \"... = - a*?b1 + b*?a1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, Suc 0)) =\n    - a * - Q $$ (0, 1) + b * Q $$ (1, 1)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, Suc 0)) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "finally"], ["proof (chain)\npicking this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)", "have \"(?A*Q) $$ (0,1) = - a*?b1 + b*?a1\""], ["proof (prove)\nusing this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 1) =\n    - a * - Q $$ (0, 1) + b * Q $$ (1, 1)", "by simp"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "moreover"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "have \"(?A*Q) $$ (0,1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 1) =\n    (0::'a)", "using AQ"], ["proof (prove)\nusing this:\n  lower_triangular\n   (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n    Q)\n\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 1) =\n    (0::'a)", "unfolding lower_triangular_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row\n          (Matrix.mat 1 2\n            (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n           Q) \\<and>\n     j < dim_col\n          (Matrix.mat 1 2\n            (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n           Q) \\<longrightarrow>\n     (Matrix.mat 1 2\n       (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n      Q) $$\n     (i, j) =\n     (0::'a)\n\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 1) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "ultimately"], ["proof (chain)\npicking this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  - a * - Q $$ (0, 1) + b * Q $$ (1, 1)\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 1) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. a * - Q $$ (0, 1) = b * Q $$ (1, 1)", "by (metis add_left_cancel more_arith_simps(3) more_arith_simps(7))"], ["proof (state)\nthis:\n  a * - Q $$ (0, 1) = b * Q $$ (1, 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a * - Q $$ (0, 1) = b * Q $$ (1, 1)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have sa_tb_d: \"?s*a+?t*b = ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "have \"?d = (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0))", "unfolding times_mat_def col_def scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat\n     (dim_row\n       (Matrix.mat 1 2\n         (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b)))\n     (dim_col Q)\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (Matrix.vec (dim_row Q) (\\<lambda>i. Q $$ (i, j))).\n            Matrix.row\n             (Matrix.mat 1 2\n               (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b))\n             i $v\n            ia *\n            Matrix.vec (dim_row Q) (\\<lambda>i. Q $$ (i, j)) $v ia) $$\n    (0, 0) =\n    (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0))", "by auto"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "also"], ["proof (state)\nthis:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "have \"... = (\\<Sum>i \\<in> {0,1}. (if i = 0 then a else b) * Q $$ (i, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0)) =\n    (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, 0))", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0)) =\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2. (if i = 0 then a else b) * Q $$ (i, 0)) =\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "have \"... = ?s*a+?t*b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, 0)) =\n    Q $$ (0, 0) * a + Q $$ (1, 0) * b", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}. (if i = 0 then a else b) * Q $$ (i, 0)) =\n  Q $$ (0, 0) * a + Q $$ (1, 0) * b\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "finally"], ["proof (chain)\npicking this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  Q $$ (0, 0) * a + Q $$ (1, 0) * b", "show ?thesis"], ["proof (prove)\nusing this:\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  Q $$ (0, 0) * a + Q $$ (1, 0) * b\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0)", "by simp"], ["proof (state)\nthis:\n  Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q $$ (0, 0) * a + Q $$ (1, 0) * b =\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have det_Q_dvd_1: \"(Determinant.det Q dvd 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det Q dvd (1::'a)", "using invertible_iff_is_unit_JNF[OF Q] inv_Q"], ["proof (prove)\nusing this:\n  invertible_mat Q = (Determinant.det Q dvd (1::'a))\n  invertible_mat Q\n\ngoal (1 subgoal):\n 1. Determinant.det Q dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "moreover"], ["proof (state)\nthis:\n  Determinant.det Q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have det_Q_eq: \"Determinant.det Q = ?s*?a1 + ?t*?b1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det Q =\n    Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1)", "unfolding det_2[OF Q]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * Q $$ (1, 1) - Q $$ (0, 1) * Q $$ (1, 0) =\n    Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1)", "by simp"], ["proof (state)\nthis:\n  Determinant.det Q =\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "ultimately"], ["proof (chain)\npicking this:\n  Determinant.det Q dvd (1::'a)\n  Determinant.det Q =\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1)", "have \"?s*?a1 + ?t*?b1 dvd 1\""], ["proof (prove)\nusing this:\n  Determinant.det Q dvd (1::'a)\n  Determinant.det Q =\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1)\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "from this"], ["proof (chain)\npicking this:\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) dvd (1::'a)", "obtain u where u_eq: \"?s*?a1 + ?t*?b1 = u\" and u: \"u dvd 1\""], ["proof (prove)\nusing this:\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) =\n                 u;\n         u dvd (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) = u\n  u dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence eq1: \"?s*?a1*a + ?t*?b1*a = u*a\""], ["proof (prove)\nusing this:\n  Q $$ (0, 0) * Q $$ (1, 1) + Q $$ (1, 0) * - Q $$ (0, 1) = u\n  u dvd (1::'a)\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * - Q $$ (0, 1) * a = u * a", "by (metis ring_class.ring_distribs(2))"], ["proof (state)\nthis:\n  Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * - Q $$ (0, 1) * a = u * a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence \"?s*?a1*a + ?t*?a1*b = u*a\""], ["proof (prove)\nusing this:\n  Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * - Q $$ (0, 1) * a = u * a\n\ngoal (1 subgoal):\n 1. Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * Q $$ (1, 1) * b = u * a", "by (metis (no_types, lifting) ab1_ba1 mult.assoc mult.commute)"], ["proof (state)\nthis:\n  Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * Q $$ (1, 1) * b = u * a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence a1d_ua:\"?a1*?d=u*a\""], ["proof (prove)\nusing this:\n  Q $$ (0, 0) * Q $$ (1, 1) * a + Q $$ (1, 0) * Q $$ (1, 1) * b = u * a\n\ngoal (1 subgoal):\n 1. Q $$ (1, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    u * a", "by (smt Groups.mult_ac(2) distrib_left more_arith_simps(11) sa_tb_d)"], ["proof (state)\nthis:\n  Q $$ (1, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  u * a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence b1d_ub: \"?b1*?d=u*b\""], ["proof (prove)\nusing this:\n  Q $$ (1, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  u * a\n\ngoal (1 subgoal):\n 1. - Q $$ (0, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    u * b", "by (smt Groups.mult_ac(2) Groups.mult_ac(3) ab1_ba1 distrib_right sa_tb_d u_eq)"], ["proof (state)\nthis:\n  - Q $$ (0, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  u * b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "obtain inv_u where inv_u: \"inv_u * u = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>inv_u.\n        inv_u * u = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using u"], ["proof (prove)\nusing this:\n  u dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>inv_u.\n        inv_u * u = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. (1::'a) = u * k\n\ngoal (1 subgoal):\n 1. (\\<And>inv_u.\n        inv_u * u = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mult.commute)"], ["proof (state)\nthis:\n  inv_u * u = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "hence inv_u_dvd_1: \"inv_u dvd 1\""], ["proof (prove)\nusing this:\n  inv_u * u = (1::'a)\n\ngoal (1 subgoal):\n 1. inv_u dvd (1::'a)", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  inv_u * u = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>k. (1::'a) = inv_u * k", "by auto"], ["proof (state)\nthis:\n  inv_u dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have cond1: \"(inv_u*?b1)*?d = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_u * - Q $$ (0, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    b", "using b1d_ub inv_u"], ["proof (prove)\nusing this:\n  - Q $$ (0, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  u * b\n  inv_u * u = (1::'a)\n\ngoal (1 subgoal):\n 1. inv_u * - Q $$ (0, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    b", "by (metis (no_types, lifting) Groups.mult_ac(3) more_arith_simps(11) more_arith_simps(6))"], ["proof (state)\nthis:\n  inv_u * - Q $$ (0, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have cond2: \"(inv_u*?a1)*?d = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_u * Q $$ (1, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    a", "using a1d_ua inv_u"], ["proof (prove)\nusing this:\n  Q $$ (1, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  u * a\n  inv_u * u = (1::'a)\n\ngoal (1 subgoal):\n 1. inv_u * Q $$ (1, 1) *\n    (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n     Q) $$\n    (0, 0) =\n    a", "by (metis (no_types, lifting) Groups.mult_ac(3) more_arith_simps(11) more_arith_simps(6))"], ["proof (state)\nthis:\n  inv_u * Q $$ (1, 1) *\n  (Matrix.mat 1 2 (\\<lambda>(i, j). if i = 0 \\<and> j = 0 then a else b) *\n   Q) $$\n  (0, 0) =\n  a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have \"ideal_generated {inv_u*?a1, inv_u*?b1} = ideal_generated {?a1,?b1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} =\n    ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)}", "by (rule ideal_generated_mult_unit2[OF inv_u_dvd_1])"], ["proof (state)\nthis:\n  ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} =\n  ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "also"], ["proof (state)\nthis:\n  ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} =\n  ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "have \"... = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)} = UNIV", "using ideal_generated_pair_UNIV[OF u_eq u]"], ["proof (prove)\nusing this:\n  ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)} = UNIV\n\ngoal (1 subgoal):\n 1. ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)} = UNIV", "by simp"], ["proof (state)\nthis:\n  ideal_generated {Q $$ (1, 1), - Q $$ (0, 1)} = UNIV\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "finally"], ["proof (chain)\npicking this:\n  ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} = UNIV", "have cond3: \"ideal_generated {inv_u*?a1, inv_u*?b1} = ideal_generated {1}\""], ["proof (prove)\nusing this:\n  ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} = UNIV\n\ngoal (1 subgoal):\n 1. ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} =\n    ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  ideal_generated {inv_u * Q $$ (1, 1), inv_u * - Q $$ (0, 1)} =\n  ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "show \"\\<exists>a1 b1 d. a = a1 * d \\<and> b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 d.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}", "by (rule exI[of _ \"inv_u*?a1\"], rule exI[of _ \"inv_u*?b1\"], rule exI[of _ ?d],\n        insert cond1 cond2 cond3, auto)"], ["proof (state)\nthis:\n  \\<exists>a1 b1 d.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem theorem3:\n  shows \"(\\<forall>A::'a mat. admits_triangular_reduction A)\n  = (\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \\<and> ideal_generated {a1,b1} = ideal_generated {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A. admits_triangular_reduction A) =\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a})", "using theorem3_part1 theorem3_part2"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and>\n        ideal_generated {a1, b1} = ideal_generated {1::'a} \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n  \\<forall>A. admits_triangular_reduction A \\<Longrightarrow>\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<forall>A. admits_triangular_reduction A) =\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a})", "by auto"], ["", "end"], ["", "context comm_ring_1\nbegin"], ["", "lemma lemma4_prev:\n  assumes a: \"a = a1*d\" and b: \"b = b1*d\"\n  and i: \"ideal_generated {a1,b1} = ideal_generated {1}\"\nshows \"ideal_generated {a,b} = ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "have 1: \"\\<exists>k. p * (a1 * d) + q * (b1 * d) = k * d\" for p q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. p * (a1 * d) + q * (b1 * d) = k * d", "by (metis (full_types) local.distrib_right local.mult.semigroup_axioms semigroup.assoc)"], ["proof (state)\nthis:\n  \\<exists>k. ?p1 * (a1 * d) + ?q1 * (b1 * d) = k * d\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "have \"ideal_generated {a,b} \\<subseteq> ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "have \"ideal_generated {a,b} = {p*a+q*b | p q. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = {p * a + q * b |p q. True}", "using ideal_generated_pair"], ["proof (prove)\nusing this:\n  ideal_generated {?a, ?b} = {p * ?a + q * ?b |p q. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = {p * a + q * b |p q. True}", "by auto"], ["proof (state)\nthis:\n  ideal_generated {a, b} = {p * a + q * b |p q. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  ideal_generated {a, b} = {p * a + q * b |p q. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "have \"... = {p*(a1*d)+q*(b1*d) | p q. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p * a + q * b |p q. True} = {p * (a1 * d) + q * (b1 * d) |p q. True}", "using a b"], ["proof (prove)\nusing this:\n  a = a1 * d\n  b = b1 * d\n\ngoal (1 subgoal):\n 1. {p * a + q * b |p q. True} = {p * (a1 * d) + q * (b1 * d) |p q. True}", "by auto"], ["proof (state)\nthis:\n  {p * a + q * b |p q. True} = {p * (a1 * d) + q * (b1 * d) |p q. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "also"], ["proof (state)\nthis:\n  {p * a + q * b |p q. True} = {p * (a1 * d) + q * (b1 * d) |p q. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "have \"... \\<subseteq> {k*d|k. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p * (a1 * d) + q * (b1 * d) |p q. True} \\<subseteq> {k * d |k. True}", "using 1"], ["proof (prove)\nusing this:\n  \\<exists>k. ?p1 * (a1 * d) + ?q1 * (b1 * d) = k * d\n\ngoal (1 subgoal):\n 1. {p * (a1 * d) + q * (b1 * d) |p q. True} \\<subseteq> {k * d |k. True}", "by auto"], ["proof (state)\nthis:\n  {p * (a1 * d) + q * (b1 * d) |p q. True} \\<subseteq> {k * d |k. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "finally"], ["proof (chain)\npicking this:\n  ideal_generated {a, b} \\<subseteq> {k * d |k. True}", "show ?thesis"], ["proof (prove)\nusing this:\n  ideal_generated {a, b} \\<subseteq> {k * d |k. True}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} \\<subseteq> ideal_generated {d}", "by (simp add: a b local.dvd_ideal_generated_singleton' local.ideal_generated_subset2)"], ["proof (state)\nthis:\n  ideal_generated {a, b} \\<subseteq> ideal_generated {d}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {a, b} \\<subseteq> ideal_generated {d}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "moreover"], ["proof (state)\nthis:\n  ideal_generated {a, b} \\<subseteq> ideal_generated {d}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "have \"ideal_generated{d} \\<subseteq> ideal_generated {a,b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {d} \\<subseteq> ideal_generated {a, b}", "proof (rule ideal_generated_singleton_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "obtain p q where \"p*a1+q*b1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        p * a1 + q * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ideal_generated_pair_exists_UNIV i"], ["proof (prove)\nusing this:\n  (ideal_generated {?a, ?b} = ideal_generated {1::'a}) =\n  (\\<exists>p q. p * ?a + q * ?b = (1::'a))\n  ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        p * a1 + q * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p * a1 + q * b1 = (1::'a)\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "hence \"d = p * (a1 * d) + q * (b1 * d)\""], ["proof (prove)\nusing this:\n  p * a1 + q * b1 = (1::'a)\n\ngoal (1 subgoal):\n 1. d = p * (a1 * d) + q * (b1 * d)", "by (metis local.mult_ac(3) local.ring_distribs(1) local.semiring_normalization_rules(12))"], ["proof (state)\nthis:\n  d = p * (a1 * d) + q * (b1 * d)\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "also"], ["proof (state)\nthis:\n  d = p * (a1 * d) + q * (b1 * d)\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "have \"... \\<in>  {p*(a1*d)+q*(b1*d) | p q. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * (a1 * d) + q * (b1 * d)\n    \\<in> {p * (a1 * d) + q * (b1 * d) |p q. True}", "by auto"], ["proof (state)\nthis:\n  p * (a1 * d) + q * (b1 * d) \\<in> {p * (a1 * d) + q * (b1 * d) |p q. True}\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "also"], ["proof (state)\nthis:\n  p * (a1 * d) + q * (b1 * d) \\<in> {p * (a1 * d) + q * (b1 * d) |p q. True}\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "have \"... = ideal_generated {a,b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p * (a1 * d) + q * (b1 * d) |p q. True} = ideal_generated {a, b}", "unfolding ideal_generated_pair a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p * (a1 * d) + q * (b1 * d) |p q. True} =\n    {p * (a1 * d) + q * (b1 * d) |p q. True}", "by auto"], ["proof (state)\nthis:\n  {p * (a1 * d) + q * (b1 * d) |p q. True} = ideal_generated {a, b}\n\ngoal (2 subgoals):\n 1. d \\<in> ideal_generated {a, b}\n 2. finite {a, b}", "finally"], ["proof (chain)\npicking this:\n  d \\<in> ideal_generated {a, b}", "show \"d \\<in> ideal_generated {a,b}\""], ["proof (prove)\nusing this:\n  d \\<in> ideal_generated {a, b}\n\ngoal (1 subgoal):\n 1. d \\<in> ideal_generated {a, b}", "by simp"], ["proof (state)\nthis:\n  d \\<in> ideal_generated {a, b}\n\ngoal (1 subgoal):\n 1. finite {a, b}", "qed (simp)"], ["proof (state)\nthis:\n  ideal_generated {d} \\<subseteq> ideal_generated {a, b}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "ultimately"], ["proof (chain)\npicking this:\n  ideal_generated {a, b} \\<subseteq> ideal_generated {d}\n  ideal_generated {d} \\<subseteq> ideal_generated {a, b}", "show ?thesis"], ["proof (prove)\nusing this:\n  ideal_generated {a, b} \\<subseteq> ideal_generated {d}\n  ideal_generated {d} \\<subseteq> ideal_generated {a, b}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "by simp"], ["proof (state)\nthis:\n  ideal_generated {a, b} = ideal_generated {d}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma4:\n  assumes a: \"a = a1*d\" and b: \"b = b1*d\"\n    and i: \"ideal_generated {a1,b1} = ideal_generated {1}\"\n    and i2: \"ideal_generated {a,b} = ideal_generated {d'}\"\n  shows \"\\<exists>a1' b1'. a = a1' * d' \\<and> b = b1' * d' \n    \\<and> ideal_generated {a1',b1'} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have i3: \"ideal_generated {a,b} = ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "using lemma4_prev assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a = ?a1.0 * ?d; ?b = ?b1.0 * ?d;\n   ideal_generated {?a1.0, ?b1.0} = ideal_generated {1::'a}\\<rbrakk>\n  \\<Longrightarrow> ideal_generated {?a, ?b} = ideal_generated {?d}\n  a = a1 * d\n  b = b1 * d\n  ideal_generated {a1, b1} = ideal_generated {1::'a}\n  ideal_generated {a, b} = ideal_generated {d'}\n\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d}", "by auto"], ["proof (state)\nthis:\n  ideal_generated {a, b} = ideal_generated {d}\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have d_dvd_d': \"d dvd d'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd d'", "by (metis a b i2 dvd_ideal_generated_singleton dvd_ideal_generated_singleton' \n        dvd_triv_right ideal_generated_subset2)"], ["proof (state)\nthis:\n  d dvd d'\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have d'_dvd_d: \"d' dvd d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d' dvd d", "using i3 i2 local.dvd_ideal_generated_singleton"], ["proof (prove)\nusing this:\n  ideal_generated {a, b} = ideal_generated {d}\n  ideal_generated {a, b} = ideal_generated {d'}\n  ideal_generated {?a} \\<subseteq> ideal_generated {?b} \\<Longrightarrow>\n  ?b dvd ?a\n\ngoal (1 subgoal):\n 1. d' dvd d", "by auto"], ["proof (state)\nthis:\n  d' dvd d\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "obtain k and l where d: \"d = k*d'\" and d': \"d' = l*d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>d = k * d'; d' = l * d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using d_dvd_d' d'_dvd_d mult_ac"], ["proof (prove)\nusing this:\n  d dvd d'\n  d' dvd d\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  ?a * ?b = ?b * ?a\n  ?b * (?a * ?c) = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>d = k * d'; d' = l * d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. d' = d * k\n  \\<exists>k. d = d' * k\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  ?a * ?b = ?b * ?a\n  ?b * (?a * ?c) = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>d = k * d'; d' = l * d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d = k * d'\n  d' = l * d\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "obtain s t where sa1_tb1: \"s*a1 + t*b1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        s * a1 + t * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using i ideal_generated_pair_exists_UNIV[of a1 b1]"], ["proof (prove)\nusing this:\n  ideal_generated {a1, b1} = ideal_generated {1::'a}\n  (ideal_generated {a1, b1} = ideal_generated {1::'a}) =\n  (\\<exists>p q. p * a1 + q * b1 = (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        s * a1 + t * b1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s * a1 + t * b1 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "let ?a1' = \"k * l * t - t + a1 * k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "let ?b1' = \"s - k * l * s + b1 * k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have 1: \"?a1'*d'=a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k * l * t - t + a1 * k) * d' = a", "by (metis a d d' add_ac(2) add_diff_cancel add_diff_eq mult_ac(2) ring_distribs(1,4) \n        semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  (k * l * t - t + a1 * k) * d' = a\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have 2: \"?b1'*d' = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s - k * l * s + b1 * k) * d' = b", "by (metis (no_types, hide_lams) b d d' add_ac(2) add_diff_cancel add_diff_eq mult_ac(2) mult_ac(3) \n        ring_distribs(2,4) semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  (s - k * l * s + b1 * k) * d' = b\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "have \"(s*l-b1)*?a1' + (t*l+a1)*?b1' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "have aux_rw1: \"s * l * k * l * t = t * l * k * l * s\" and aux_rw2: \"s * l * t=t * l * s\" \n      and aux_rw3: \"b1 * a1 * k=a1 * b1 * k\" and aux_rw4: \"t * l * b1 * k=b1 * k * l * t\"\n      and aux_rw5: \"s * l * a1 * k=a1 * k * l * s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s * l * k * l * t = t * l * k * l * s &&& s * l * t = t * l * s) &&&\n    b1 * a1 * k = a1 * b1 * k &&&\n    t * l * b1 * k = b1 * k * l * t &&& s * l * a1 * k = a1 * k * l * s", "using mult.commute mult.assoc"], ["proof (prove)\nusing this:\n  ?a * ?b = ?b * ?a\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. (s * l * k * l * t = t * l * k * l * s &&& s * l * t = t * l * s) &&&\n    b1 * a1 * k = a1 * b1 * k &&&\n    t * l * b1 * k = b1 * k * l * t &&& s * l * a1 * k = a1 * k * l * s", "by auto"], ["proof (state)\nthis:\n  s * l * k * l * t = t * l * k * l * s\n  s * l * t = t * l * s\n  b1 * a1 * k = a1 * b1 * k\n  t * l * b1 * k = b1 * k * l * t\n  s * l * a1 * k = a1 * k * l * s\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "note aux_rw = aux_rw1 aux_rw2 aux_rw3 aux_rw4 aux_rw5"], ["proof (state)\nthis:\n  s * l * k * l * t = t * l * k * l * s\n  s * l * t = t * l * s\n  b1 * a1 * k = a1 * b1 * k\n  t * l * b1 * k = b1 * k * l * t\n  s * l * a1 * k = a1 * k * l * s\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "have \"(s*l-b1)*?a1' + (t*l+a1)*?b1' = s*l*?a1' - b1*?a1' + t*l*?b1'+a1*?b1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n    t * l * (s - k * l * s + b1 * k) +\n    a1 * (s - k * l * s + b1 * k)", "using local.add_ac(1) local.left_diff_distrib' local.ring_distribs(2)"], ["proof (prove)\nusing this:\n  ?a + ?b + ?c = ?a + (?b + ?c)\n  (?b - ?c) * ?a = ?b * ?a - ?c * ?a\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n    t * l * (s - k * l * s + b1 * k) +\n    a1 * (s - k * l * s + b1 * k)", "by auto"], ["proof (state)\nthis:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n  t * l * (s - k * l * s + b1 * k) +\n  a1 * (s - k * l * s + b1 * k)\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "also"], ["proof (state)\nthis:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n  t * l * (s - k * l * s + b1 * k) +\n  a1 * (s - k * l * s + b1 * k)\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "have \"... = s * l * k * l*t - s * l * t + s * l * a1 * k-b1 * k * l * t + b1 * t-b1 * a1 * k\n      + t * l * s-t * l * k * l * s + t * l * b1 * k + a1 * s - a1 * k * l * s + a1 * b1 * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n    t * l * (s - k * l * s + b1 * k) +\n    a1 * (s - k * l * s + b1 * k) =\n    s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t +\n    b1 * t -\n    b1 * a1 * k +\n    t * l * s -\n    t * l * k * l * s +\n    t * l * b1 * k +\n    a1 * s -\n    a1 * k * l * s +\n    a1 * b1 * k", "by (smt abel_semigroup.commute add.abel_semigroup_axioms diff_add_eq diff_diff_eq2\n          mult.semigroup_axioms ring_distribs(4) semiring_normalization_rules(34) semigroup.assoc)"], ["proof (state)\nthis:\n  s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n  t * l * (s - k * l * s + b1 * k) +\n  a1 * (s - k * l * s + b1 * k) =\n  s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t + b1 * t -\n  b1 * a1 * k +\n  t * l * s -\n  t * l * k * l * s +\n  t * l * b1 * k +\n  a1 * s -\n  a1 * k * l * s +\n  a1 * b1 * k\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "also"], ["proof (state)\nthis:\n  s * l * (k * l * t - t + a1 * k) - b1 * (k * l * t - t + a1 * k) +\n  t * l * (s - k * l * s + b1 * k) +\n  a1 * (s - k * l * s + b1 * k) =\n  s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t + b1 * t -\n  b1 * a1 * k +\n  t * l * s -\n  t * l * k * l * s +\n  t * l * b1 * k +\n  a1 * s -\n  a1 * k * l * s +\n  a1 * b1 * k\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "have \"... = a1 * s + b1 * t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t +\n    b1 * t -\n    b1 * a1 * k +\n    t * l * s -\n    t * l * k * l * s +\n    t * l * b1 * k +\n    a1 * s -\n    a1 * k * l * s +\n    a1 * b1 * k =\n    a1 * s + b1 * t", "unfolding aux_rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. t * l * k * l * s - t * l * s + a1 * k * l * s - b1 * k * l * t +\n    b1 * t -\n    a1 * b1 * k +\n    t * l * s -\n    t * l * k * l * s +\n    b1 * k * l * t +\n    a1 * s -\n    a1 * k * l * s +\n    a1 * b1 * k =\n    a1 * s + b1 * t", "by (smt add_ac(2) add_ac(3) add_minus_cancel ring_distribs(4) ring_normalization_rules(2))"], ["proof (state)\nthis:\n  s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t + b1 * t -\n  b1 * a1 * k +\n  t * l * s -\n  t * l * k * l * s +\n  t * l * b1 * k +\n  a1 * s -\n  a1 * k * l * s +\n  a1 * b1 * k =\n  a1 * s + b1 * t\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "also"], ["proof (state)\nthis:\n  s * l * k * l * t - s * l * t + s * l * a1 * k - b1 * k * l * t + b1 * t -\n  b1 * a1 * k +\n  t * l * s -\n  t * l * k * l * s +\n  t * l * b1 * k +\n  a1 * s -\n  a1 * k * l * s +\n  a1 * b1 * k =\n  a1 * s + b1 * t\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1 * s + b1 * t = (1::'a)", "using sa1_tb1 mult.commute"], ["proof (prove)\nusing this:\n  s * a1 + t * b1 = (1::'a)\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. a1 * s + b1 * t = (1::'a)", "by auto"], ["proof (state)\nthis:\n  a1 * s + b1 * t = (1::'a)\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "finally"], ["proof (chain)\npicking this:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. (s * l - b1) * (k * l * t - t + a1 * k) +\n    (t * l + a1) * (s - k * l * s + b1 * k) =\n    (1::'a)", "by simp"], ["proof (state)\nthis:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "hence \"ideal_generated {?a1',?b1'} = ideal_generated {1}\""], ["proof (prove)\nusing this:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n    ideal_generated {1::'a}", "using ideal_generated_pair_exists_UNIV[of ?a1' ?b1']"], ["proof (prove)\nusing this:\n  (s * l - b1) * (k * l * t - t + a1 * k) +\n  (t * l + a1) * (s - k * l * s + b1 * k) =\n  (1::'a)\n  (ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n   ideal_generated {1::'a}) =\n  (\\<exists>p q.\n      p * (k * l * t - t + a1 * k) + q * (s - k * l * s + b1 * k) = (1::'a))\n\ngoal (1 subgoal):\n 1. ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n    ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n  ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n  ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "using 1 2"], ["proof (prove)\nusing this:\n  ideal_generated {k * l * t - t + a1 * k, s - k * l * s + b1 * k} =\n  ideal_generated {1::'a}\n  (k * l * t - t + a1 * k) * d' = a\n  (s - k * l * s + b1 * k) * d' = b\n\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       a = a1' * d' \\<and>\n       b = b1' * d' \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  \\<exists>a1' b1'.\n     a = a1' * d' \\<and>\n     b = b1' * d' \\<and>\n     ideal_generated {a1', b1'} = ideal_generated {1::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "(*In the article, this is a corollary. But here, this needs more work.*)"], ["", "lemma corollary5:\n  assumes T: \"\\<forall>a b. \\<exists>a1 b1 d. a = a1 * d \\<and> b = b1 * d \n        \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\"\n and i2: \"ideal_generated {a,b,c} = ideal_generated {d}\"\n  shows \"\\<exists> a1 b1 c1. a = a1 * d \\<and> b = b1 * d \\<and> c = c1 * d \n  \\<and> ideal_generated {a1,b1,c1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have da: \"d dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd a", "using ideal_generated_singleton_dvd[OF i2]"], ["proof (prove)\nusing this:\n  ?x \\<in> {a, b, c} \\<Longrightarrow> d dvd ?x\n\ngoal (1 subgoal):\n 1. d dvd a", "by auto"], ["proof (state)\nthis:\n  d dvd a\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have db: \"d dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd b", "using ideal_generated_singleton_dvd[OF i2]"], ["proof (prove)\nusing this:\n  ?x \\<in> {a, b, c} \\<Longrightarrow> d dvd ?x\n\ngoal (1 subgoal):\n 1. d dvd b", "by auto"], ["proof (state)\nthis:\n  d dvd b\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have dc: \"d dvd c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd c", "using ideal_generated_singleton_dvd[OF i2]"], ["proof (prove)\nusing this:\n  ?x \\<in> {a, b, c} \\<Longrightarrow> d dvd ?x\n\ngoal (1 subgoal):\n 1. d dvd c", "by auto"], ["proof (state)\nthis:\n  d dvd c\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "from this"], ["proof (chain)\npicking this:\n  d dvd c", "obtain c1' where c: \"c = c1' * d\""], ["proof (prove)\nusing this:\n  d dvd c\n\ngoal (1 subgoal):\n 1. (\\<And>c1'. c = c1' * d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using dvd_def mult_ac(2)"], ["proof (prove)\nusing this:\n  d dvd c\n  (?b dvd ?a) = (\\<exists>k. ?a = ?b * k)\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. (\\<And>c1'. c = c1' * d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = c1' * d\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "obtain a1 b1 d' where a: \"a = a1 * d'\" and b: \"b = b1 * d' \"\n    and i: \"ideal_generated {a1, b1} = ideal_generated {1::'a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 d' b1.\n        \\<lbrakk>a = a1 * d'; b = b1 * d';\n         ideal_generated {a1, b1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using T"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 d' b1.\n        \\<lbrakk>a = a1 * d'; b = b1 * d';\n         ideal_generated {a1, b1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = a1 * d'\n  b = b1 * d'\n  ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have i_ab_d': \"ideal_generated {a, b} = ideal_generated {d'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a, b} = ideal_generated {d'}", "by (simp add: a b i lemma4_prev)"], ["proof (state)\nthis:\n  ideal_generated {a, b} = ideal_generated {d'}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have i2: \"ideal_generated {d', c} = ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {d', c} = ideal_generated {d}", "by (rule ideal_generated_triple_pair_rewrite[OF i2 i_ab_d'])"], ["proof (state)\nthis:\n  ideal_generated {d', c} = ideal_generated {d}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "obtain u v dp  where d'1: \"d' = u * dp\" and d'2: \"c = v * dp\" \n    and xy: \"ideal_generated{u,v}=ideal_generated{1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u dp v.\n        \\<lbrakk>d' = u * dp; c = v * dp;\n         ideal_generated {u, v} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using T"], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>u dp v.\n        \\<lbrakk>d' = u * dp; c = v * dp;\n         ideal_generated {u, v} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  d' = u * dp\n  c = v * dp\n  ideal_generated {u, v} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have \"\\<exists>a1' b1'. d' = a1' * d \\<and> c = b1' * d \\<and> ideal_generated {a1', b1'} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1' b1'.\n       d' = a1' * d \\<and>\n       c = b1' * d \\<and>\n       ideal_generated {a1', b1'} = ideal_generated {1::'a}", "by (rule lemma4[OF d'1 d'2 xy i2])"], ["proof (state)\nthis:\n  \\<exists>a1' b1'.\n     d' = a1' * d \\<and>\n     c = b1' * d \\<and> ideal_generated {a1', b1'} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "from this"], ["proof (chain)\npicking this:\n  \\<exists>a1' b1'.\n     d' = a1' * d \\<and>\n     c = b1' * d \\<and> ideal_generated {a1', b1'} = ideal_generated {1::'a}", "obtain a1' c1 where d'_a1: \"d' = a1' * d\" and c: \"c = c1 * d\" \n    and i3: \"ideal_generated {a1', c1} = ideal_generated {1}\""], ["proof (prove)\nusing this:\n  \\<exists>a1' b1'.\n     d' = a1' * d \\<and>\n     c = b1' * d \\<and> ideal_generated {a1', b1'} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1' c1.\n        \\<lbrakk>d' = a1' * d; c = c1 * d;\n         ideal_generated {a1', c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  d' = a1' * d\n  c = c1 * d\n  ideal_generated {a1', c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have r1: \"a = a1 * a1' * d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = a1 * a1' * d", "by (simp add: d'_a1 a local.semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  a = a1 * a1' * d\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have r2: \"b = b1 * a1' * d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = b1 * a1' * d", "by (simp add: d'_a1 b local.semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  b = b1 * a1' * d\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "have i4: \"ideal_generated {a1 * a1',b1 * a1', c1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "obtain p q where 1: \"p * a1' + q * c1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        p * a1' + q * c1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using i3"], ["proof (prove)\nusing this:\n  ideal_generated {a1', c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        p * a1' + q * c1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ideal_generated_pair_exists_UNIV"], ["proof (prove)\nusing this:\n  \\<exists>p q. p * a1' + q * c1 = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        p * a1' + q * c1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p * a1' + q * c1 = (1::'a)\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "obtain x y where 2: \"x*a1 + y*b1 = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x * a1 + y * b1 = p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ideal_generated_UNIV_obtain_pair[OF i]"], ["proof (prove)\nusing this:\n  \\<exists>p q. p * a1 + q * b1 = ?d\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        x * a1 + y * b1 = p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x * a1 + y * b1 = p\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "have \"1 = (x*a1 + y*b1) * a1' + q * c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) = (x * a1 + y * b1) * a1' + q * c1", "using 1 2"], ["proof (prove)\nusing this:\n  p * a1' + q * c1 = (1::'a)\n  x * a1 + y * b1 = p\n\ngoal (1 subgoal):\n 1. (1::'a) = (x * a1 + y * b1) * a1' + q * c1", "by auto"], ["proof (state)\nthis:\n  (1::'a) = (x * a1 + y * b1) * a1' + q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "also"], ["proof (state)\nthis:\n  (1::'a) = (x * a1 + y * b1) * a1' + q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "have \"... = x*a1*a1' + y*b1*a1' + q * c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x * a1 + y * b1) * a1' + q * c1 = x * a1 * a1' + y * b1 * a1' + q * c1", "by (simp add: local.ring_distribs(2))"], ["proof (state)\nthis:\n  (x * a1 + y * b1) * a1' + q * c1 = x * a1 * a1' + y * b1 * a1' + q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "finally"], ["proof (chain)\npicking this:\n  (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1", "have \"1 = x*a1*a1' + y*b1*a1' + q * c1\""], ["proof (prove)\nusing this:\n  (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1\n\ngoal (1 subgoal):\n 1. (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1", "."], ["proof (state)\nthis:\n  (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "hence \"1 \\<in> ideal_generated {a1 * a1', b1 * a1', c1}\""], ["proof (prove)\nusing this:\n  (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1\n\ngoal (1 subgoal):\n 1. (1::'a) \\<in> ideal_generated {a1 * a1', b1 * a1', c1}", "using ideal_explicit2[of \"{a1 * a1', b1 * a1', c1}\"] sum_three_elements'"], ["proof (prove)\nusing this:\n  (1::'a) = x * a1 * a1' + y * b1 * a1' + q * c1\n  finite {a1 * a1', b1 * a1', c1} \\<Longrightarrow>\n  ideal_generated {a1 * a1', b1 * a1', c1} =\n  {y. \\<exists>f. (\\<Sum>i\\<in>{a1 * a1', b1 * a1', c1}. f i * i) = y}\n  \\<exists>f.\n     (\\<Sum>i\\<in>{?a, ?b, ?c}. f i * i) = ?x * ?a + ?y * ?b + ?z * ?c\n\ngoal (1 subgoal):\n 1. (1::'a) \\<in> ideal_generated {a1 * a1', b1 * a1', c1}", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  (1::'a) \\<in> ideal_generated {a1 * a1', b1 * a1', c1}\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "hence \"ideal_generated {1} \\<subseteq> ideal_generated {a1 * a1',b1 * a1', c1}\""], ["proof (prove)\nusing this:\n  (1::'a) \\<in> ideal_generated {a1 * a1', b1 * a1', c1}\n\ngoal (1 subgoal):\n 1. ideal_generated {1::'a}\n    \\<subseteq> ideal_generated {a1 * a1', b1 * a1', c1}", "by (rule ideal_generated_singleton_subset, auto)"], ["proof (state)\nthis:\n  ideal_generated {1::'a}\n  \\<subseteq> ideal_generated {a1 * a1', b1 * a1', c1}\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ideal_generated {1::'a}\n  \\<subseteq> ideal_generated {a1 * a1', b1 * a1', c1}\n\ngoal (1 subgoal):\n 1. ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "using r1 r2 i4 c"], ["proof (prove)\nusing this:\n  a = a1 * a1' * d\n  b = b1 * a1' * d\n  ideal_generated {a1 * a1', b1 * a1', c1} = ideal_generated {1::'a}\n  c = c1 * d\n\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  \\<exists>a1 b1 c1.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and>\n     c = c1 * d \\<and>\n     ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context\n  assumes \"SORT_CONSTRAINT('a::comm_ring_1)\"\nbegin"], ["", "lemma OFCLASS_elementary_divisor_ring_imp_class:\n  assumes \"OFCLASS('a::comm_ring_1, elementary_divisor_ring_class)\"\n  shows \" class.elementary_divisor_ring TYPE('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a)", "by (rule conjunctionD2[OF assms[unfolded elementary_divisor_ring_class_def]])"], ["", "(*ELEMENTARY DIVISOR RING \\<Longrightarrow> HERMITE*)"], ["", "corollary Elementary_divisor_ring_imp_Hermite_ring:\n  assumes \"OFCLASS('a::comm_ring_1, elementary_divisor_ring_class) \"\n  shows \"OFCLASS('a::comm_ring_1, Hermite_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "have \"\\<forall>A::'a mat. admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "using OFCLASS_elementary_divisor_ring_imp_class[OF assms]"], ["proof (prove)\nusing this:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "thus \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using admits_diagonal_imp_admits_triangular"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n  Ball (carrier_mat 1 2) admits_diagonal_reduction \\<Longrightarrow>\n  All admits_triangular_reduction\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "(*ELEMENTARY DIVISOR RING \\<Longrightarrow> BEZOUT*)"], ["", "corollary Elementary_divisor_ring_imp_Bezout_ring:\n  assumes \"OFCLASS('a::comm_ring_1, elementary_divisor_ring_class) \"\n  shows \"OFCLASS('a::comm_ring_1, bezout_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, bezout_ring_class)", "by (rule Hermite_ring_imp_Bezout_ring, rule Elementary_divisor_ring_imp_Hermite_ring[OF assms])"], ["", "subsection \\<open>Characterization of Elementary divisor rings\\<close>"], ["", "lemma necessity_D': \n  assumes edr: \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\"\n  shows \"\\<forall>a b c::'a. ideal_generated {a,b,c} = ideal_generated{1} \n  \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "proof ((rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "fix a b c::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "assume i: \"ideal_generated {a,b,c} = ideal_generated{1}\""], ["proof (state)\nthis:\n  ideal_generated {a, b, c} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define A where \"A = Matrix.mat 2 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then a else\n                                    if  i = 0 \\<and> j = 1 then b else\n                                    if  i = 1 \\<and> j = 0 then 0 else c)\""], ["proof (state)\nthis:\n  A =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a\n       else if i = 0 \\<and> j = 1 then b\n            else if i = 1 \\<and> j = 0 then 0::'a else c)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "have A: \"A \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat 2 2", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then a\n         else if i = 0 \\<and> j = 1 then b\n              else if i = 1 \\<and> j = 0 then 0::'a else c)\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "obtain P Q where P: \"P \\<in> carrier_mat (dim_row A) (dim_row A)\"\n        and Q: \"Q \\<in> carrier_mat (dim_col A) (dim_col A)\" \n        and inv_P: \"invertible_mat P\" and inv_Q: \"invertible_mat Q\" \n        and SNF_PAQ: \"Smith_normal_form_mat (P * A * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using edr"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_diagonal_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>P Q.\n        P \\<in> carrier_mat (dim_row A) (dim_row A) \\<and>\n        Q \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat P \\<and>\n        invertible_mat Q \\<and> Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. (\\<And>P Q.\n        \\<lbrakk>P \\<in> carrier_mat (dim_row A) (dim_row A);\n         Q \\<in> carrier_mat (dim_col A) (dim_col A); invertible_mat P;\n         invertible_mat Q; Smith_normal_form_mat (P * A * Q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n  invertible_mat P\n  invertible_mat Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "have [simp]: \"dim_row P = 2\" and [simp]: \"dim_col P = 2 \" and [simp]: \"dim_row Q = 2\" \n    and [simp]: \"dim_col Q = 2\" and [simp]: \"dim_col A = 2\" and [simp]: \"dim_row A = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dim_row P = 2 &&& dim_col P = 2 &&& dim_row Q = 2) &&&\n    dim_col Q = 2 &&& dim_col A = 2 &&& dim_row A = 2", "using A P Q"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat 2 2\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_col A) (dim_col A)\n\ngoal (1 subgoal):\n 1. (dim_row P = 2 &&& dim_col P = 2 &&& dim_row Q = 2) &&&\n    dim_col Q = 2 &&& dim_col A = 2 &&& dim_row A = 2", "by auto"], ["proof (state)\nthis:\n  dim_row P = 2\n  dim_col P = 2\n  dim_row Q = 2\n  dim_col Q = 2\n  dim_col A = 2\n  dim_row A = 2\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define u where \"u = (P*A*Q) $$ (0,0)\""], ["proof (state)\nthis:\n  u = (P * A * Q) $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define p where \"p = P $$ (0,0)\""], ["proof (state)\nthis:\n  p = P $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define q where \"q = P $$ (0,1)\""], ["proof (state)\nthis:\n  q = P $$ (0, 1)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define x where \"x = Q $$ (0,0)\""], ["proof (state)\nthis:\n  x = Q $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "define y where \"y = Q $$ (1,0)\""], ["proof (state)\nthis:\n  y = Q $$ (1, 0)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "have eq: \"p*a*x + p*b*y + q*c*y = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "have rw1: \"(\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, x)) * Q $$ (x, 0) \n    = (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, x)) * Q $$ (x, 0)\" \n      for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, x)) * Q $$ (x, 0) =\n    (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, x)) * Q $$ (x, 0)", "by (unfold sum_distrib_right, rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, ?x)) * Q $$ (?x, 0) =\n  (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, ?x)) * Q $$ (?x, 0)\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "have \"u = (\\<Sum>i = 0..<2. (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u =\n    (\\<Sum>i = 0..<2.\n        (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))", "unfolding u_def p_def q_def x_def y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * A * Q) $$ (0, 0) =\n    (\\<Sum>i = 0..<2.\n        (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))", "unfolding times_mat_def scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat\n     (dim_row\n       (Matrix.mat (dim_row P) (dim_col A)\n         (\\<lambda>(i, j).\n             \\<Sum>ia = 0..<dim_vec (col A j).\n                Matrix.row P i $v ia * col A j $v ia)))\n     (dim_col Q)\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec (col Q j).\n            Matrix.row\n             (Matrix.mat (dim_row P) (dim_col A)\n               (\\<lambda>(i, j).\n                   \\<Sum>ia = 0..<dim_vec (col A j).\n                      Matrix.row P i $v ia * col A j $v ia))\n             i $v\n            ia *\n            col Q j $v ia) $$\n    (0, 0) =\n    (\\<Sum>i = 0..<2.\n        (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))", "by auto"], ["proof (state)\nthis:\n  u =\n  (\\<Sum>i = 0..<2.\n      (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "also"], ["proof (state)\nthis:\n  u =\n  (\\<Sum>i = 0..<2.\n      (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "have \"... = (\\<Sum>i \\<in>{0,1}. (\\<Sum>ia \\<in> {0,1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<2.\n        (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0)) =\n    (\\<Sum>i\\<in>{0, 1}.\n       (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))", "by (rule sum.cong[OF _ rw1], auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2.\n      (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0)) =\n  (\\<Sum>i\\<in>{0, 1}.\n     (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<2.\n      (\\<Sum>ia = 0..<2. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0)) =\n  (\\<Sum>i\\<in>{0, 1}.\n     (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0))\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "have \"... = p*a*x + p*b*y+q*c*y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}.\n       (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0)) =\n    p * a * x + p * b * y + q * c * y", "unfolding u_def p_def q_def x_def y_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}.\n       (\\<Sum>ia\\<in>{0, 1}.\n          P $$ (0, ia) *\n          Matrix.mat 2 2\n           (\\<lambda>(i, j).\n               if i = 0 \\<and> j = 0 then a\n               else if i = 0 \\<and> j = 1 then b\n                    else if i = 1 \\<and> j = 0 then 0::'a else c) $$\n          (ia, i)) *\n       Q $$ (i, 0)) =\n    P $$ (0, 0) * a * Q $$ (0, 0) + P $$ (0, 0) * b * Q $$ (1, 0) +\n    P $$ (0, 1) * c * Q $$ (1, 0)", "using ring_class.ring_distribs(2)"], ["proof (prove)\nusing this:\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}.\n       (\\<Sum>ia\\<in>{0, 1}.\n          P $$ (0, ia) *\n          Matrix.mat 2 2\n           (\\<lambda>(i, j).\n               if i = 0 \\<and> j = 0 then a\n               else if i = 0 \\<and> j = 1 then b\n                    else if i = 1 \\<and> j = 0 then 0::'a else c) $$\n          (ia, i)) *\n       Q $$ (i, 0)) =\n    P $$ (0, 0) * a * Q $$ (0, 0) + P $$ (0, 0) * b * Q $$ (1, 0) +\n    P $$ (0, 1) * c * Q $$ (1, 0)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}.\n     (\\<Sum>ia\\<in>{0, 1}. P $$ (0, ia) * A $$ (ia, i)) * Q $$ (i, 0)) =\n  p * a * x + p * b * y + q * c * y\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", "finally"], ["proof (chain)\npicking this:\n  u = p * a * x + p * b * y + q * c * y", "show ?thesis"], ["proof (prove)\nusing this:\n  u = p * a * x + p * b * y + q * c * y\n\ngoal (1 subgoal):\n 1. p * a * x + p * b * y + q * c * y = u", ".."], ["proof (state)\nthis:\n  p * a * x + p * b * y + q * c * y = u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p * a * x + p * b * y + q * c * y = u\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "have u_dvd_1: \"u dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u dvd (1::'a)", "(*\n  The article deduces this fact since u divides all the elements of the matrix A. Here, this is \n  already proved using GCD and minors, but it requires the semiring_GCD class.\n  At the end, I proved this fact by means of matrix multiplications once the inverse matrices of P\n  and Q are obtained.\n  *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u dvd (1::'a)", "proof (rule ideal_generated_dvd2[OF i])"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "define D where \"D = (P*A*Q)\""], ["proof (state)\nthis:\n  D = P * A * Q\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "obtain P' where  P'[simp]: \"P' \\<in> carrier_mat 2 2\" and inv_P: \"inverts_mat P' P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P' \\<in> carrier_mat 2 2; inverts_mat P' P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inv_P obtain_inverse_matrix[OF P inv_P]"], ["proof (prove)\nusing this:\n  invertible_mat P\n  (\\<And>B.\n      \\<lbrakk>inverts_mat P B; inverts_mat B P;\n       B \\<in> carrier_mat (dim_row A) (dim_row A)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P' \\<in> carrier_mat 2 2; inverts_mat P' P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<open>dim_row A = 2\\<close>)"], ["proof (state)\nthis:\n  P' \\<in> carrier_mat 2 2\n  inverts_mat P' P\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "obtain Q' where [simp]: \"Q' \\<in> carrier_mat 2 2\" and inv_Q: \"inverts_mat Q Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q' \\<in> carrier_mat 2 2; inverts_mat Q Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inv_Q obtain_inverse_matrix[OF Q inv_Q]"], ["proof (prove)\nusing this:\n  invertible_mat Q\n  (\\<And>B.\n      \\<lbrakk>inverts_mat Q B; inverts_mat B Q;\n       B \\<in> carrier_mat (dim_col A) (dim_col A)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q' \\<in> carrier_mat 2 2; inverts_mat Q Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<open>dim_col A = 2\\<close>)"], ["proof (state)\nthis:\n  Q' \\<in> carrier_mat 2 2\n  inverts_mat Q Q'\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have D[simp]: \"D \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> carrier_mat 2 2", "unfolding D_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P * A * Q \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  D \\<in> carrier_mat 2 2\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have e: \"P' * D * Q' = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' * D * Q' = A", "unfolding D_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' * (P * A * Q) * Q' = A", "by (rule inv_P'PAQQ'[OF _ _ inv_P inv_Q], auto)"], ["proof (state)\nthis:\n  P' * D * Q' = A\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have [simp]: \"(P' * D) \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' * D \\<in> carrier_mat 2 2", "using D P' mult_carrier_mat"], ["proof (prove)\nusing this:\n  D \\<in> carrier_mat 2 2\n  P' \\<in> carrier_mat 2 2\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. P' * D \\<in> carrier_mat 2 2", "by blast"], ["proof (state)\nthis:\n  P' * D \\<in> carrier_mat 2 2\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have D_01: \"D $$ (0, 1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D $$ (0, 1) = (0::'a)", "using D_def SNF_PAQ"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. D $$ (0, 1) = (0::'a)", "unfolding Smith_normal_form_mat_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  (\\<forall>a.\n      a + 1\n      < min (dim_row (P * A * Q)) (dim_col (P * A * Q)) \\<longrightarrow>\n      (P * A * Q) $$ (a, a) dvd (P * A * Q) $$ (a + 1, a + 1)) \\<and>\n  (\\<forall>i j.\n      i \\<noteq> j \\<and>\n      i < dim_row (P * A * Q) \\<and>\n      j < dim_col (P * A * Q) \\<longrightarrow>\n      (P * A * Q) $$ (i, j) = (0::'a))\n\ngoal (1 subgoal):\n 1. D $$ (0, 1) = (0::'a)", "by force"], ["proof (state)\nthis:\n  D $$ (0, 1) = (0::'a)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have D_10: \"D $$ (1, 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D $$ (1, 0) = (0::'a)", "using D_def SNF_PAQ"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. D $$ (1, 0) = (0::'a)", "unfolding Smith_normal_form_mat_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  (\\<forall>a.\n      a + 1\n      < min (dim_row (P * A * Q)) (dim_col (P * A * Q)) \\<longrightarrow>\n      (P * A * Q) $$ (a, a) dvd (P * A * Q) $$ (a + 1, a + 1)) \\<and>\n  (\\<forall>i j.\n      i \\<noteq> j \\<and>\n      i < dim_row (P * A * Q) \\<and>\n      j < dim_col (P * A * Q) \\<longrightarrow>\n      (P * A * Q) $$ (i, j) = (0::'a))\n\ngoal (1 subgoal):\n 1. D $$ (1, 0) = (0::'a)", "by force"], ["proof (state)\nthis:\n  D $$ (1, 0) = (0::'a)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"D $$ (0,0) dvd D $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D $$ (0, 0) dvd D $$ (1, 1)", "using D_def SNF_PAQ"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  Smith_normal_form_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. D $$ (0, 0) dvd D $$ (1, 1)", "unfolding Smith_normal_form_mat_def"], ["proof (prove)\nusing this:\n  D = P * A * Q\n  (\\<forall>a.\n      a + 1\n      < min (dim_row (P * A * Q)) (dim_col (P * A * Q)) \\<longrightarrow>\n      (P * A * Q) $$ (a, a) dvd (P * A * Q) $$ (a + 1, a + 1)) \\<and>\n  isDiagonal_mat (P * A * Q)\n\ngoal (1 subgoal):\n 1. D $$ (0, 0) dvd D $$ (1, 1)", "by auto"], ["proof (state)\nthis:\n  D $$ (0, 0) dvd D $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "from this"], ["proof (chain)\npicking this:\n  D $$ (0, 0) dvd D $$ (1, 1)", "obtain k where D11: \"D $$ (1, 1) = D $$ (0,0) * k\""], ["proof (prove)\nusing this:\n  D $$ (0, 0) dvd D $$ (1, 1)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        D $$ (1, 1) = D $$ (0, 0) * k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. D $$ (1, 1) = D $$ (0, 0) * k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        D $$ (1, 1) = D $$ (0, 0) * k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D $$ (1, 1) = D $$ (0, 0) * k\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have P'D_00: \"(P' * D) $$ (0, 0) = P' $$ (0, 0) * D $$ (0, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 0) = P' $$ (0, 0) * D $$ (0, 0)", "using mat_mult2_00[of P' D] D_10"], ["proof (prove)\nusing this:\n  \\<lbrakk>P' \\<in> carrier_mat 2 2; D \\<in> carrier_mat 2 2;\n   ?A = P' * D\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (0, 0) =\n                    P' $$ (0, 0) * D $$ (0, 0) + P' $$ (0, 1) * D $$ (1, 0)\n  D $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 0) = P' $$ (0, 0) * D $$ (0, 0)", "by auto"], ["proof (state)\nthis:\n  (P' * D) $$ (0, 0) = P' $$ (0, 0) * D $$ (0, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have P'D_01: \"(P' * D) $$ (0, 1) =  P' $$ (0, 1) * D $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 1) = P' $$ (0, 1) * D $$ (1, 1)", "using mat_mult2_01[of P' D] D_01"], ["proof (prove)\nusing this:\n  \\<lbrakk>P' \\<in> carrier_mat 2 2; D \\<in> carrier_mat 2 2;\n   ?A = P' * D\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (0, 1) =\n                    P' $$ (0, 0) * D $$ (0, 1) + P' $$ (0, 1) * D $$ (1, 1)\n  D $$ (0, 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 1) = P' $$ (0, 1) * D $$ (1, 1)", "by auto"], ["proof (state)\nthis:\n  (P' * D) $$ (0, 1) = P' $$ (0, 1) * D $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have P'D_10: \"(P' * D) $$ (1, 0) = P' $$ (1, 0) * D $$ (0, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (1, 0) = P' $$ (1, 0) * D $$ (0, 0)", "using mat_mult2_10[of P' D] D_10"], ["proof (prove)\nusing this:\n  \\<lbrakk>P' \\<in> carrier_mat 2 2; D \\<in> carrier_mat 2 2;\n   ?A = P' * D\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (1, 0) =\n                    P' $$ (1, 0) * D $$ (0, 0) + P' $$ (1, 1) * D $$ (1, 0)\n  D $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. (P' * D) $$ (1, 0) = P' $$ (1, 0) * D $$ (0, 0)", "by auto"], ["proof (state)\nthis:\n  (P' * D) $$ (1, 0) = P' $$ (1, 0) * D $$ (0, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have P'D_11: \"(P' * D) $$ (1, 1) = P' $$ (1, 1) * D $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (1, 1) = P' $$ (1, 1) * D $$ (1, 1)", "using mat_mult2_11[of P' D] D_01"], ["proof (prove)\nusing this:\n  \\<lbrakk>P' \\<in> carrier_mat 2 2; D \\<in> carrier_mat 2 2;\n   ?A = P' * D\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (1, 1) =\n                    P' $$ (1, 0) * D $$ (0, 1) + P' $$ (1, 1) * D $$ (1, 1)\n  D $$ (0, 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. (P' * D) $$ (1, 1) = P' $$ (1, 1) * D $$ (1, 1)", "by auto"], ["proof (state)\nthis:\n  (P' * D) $$ (1, 1) = P' $$ (1, 1) * D $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"a = (P' * D * Q') $$ (0,0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = (P' * D * Q') $$ (0, 0)", "using e A_def"], ["proof (prove)\nusing this:\n  P' * D * Q' = A\n  A =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a\n       else if i = 0 \\<and> j = 1 then b\n            else if i = 1 \\<and> j = 0 then 0::'a else c)\n\ngoal (1 subgoal):\n 1. a = (P' * D * Q') $$ (0, 0)", "by auto"], ["proof (state)\nthis:\n  a = (P' * D * Q') $$ (0, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  a = (P' * D * Q') $$ (0, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D * Q') $$ (0, 0) =\n    (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0)", "by (rule mat_mult2_00, auto)"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (0, 0) =\n  (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (0, 0) =\n  (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) \n      + P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0) =\n    P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0)", "unfolding P'D_00 P'D_01 D11"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0) =\n    P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0)", ".."], ["proof (state)\nthis:\n  (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0) =\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D) $$ (0, 0) * Q' $$ (0, 0) + (P' * D) $$ (0, 1) * Q' $$ (1, 0) =\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = D $$ (0, 0) * (P' $$ (0, 0) * Q' $$ (0, 0) \n      + P' $$ (0, 1) * k * Q' $$ (1, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0) =\n    D $$ (0, 0) *\n    (P' $$ (0, 0) * Q' $$ (0, 0) + P' $$ (0, 1) * k * Q' $$ (1, 0))", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 0) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 0) =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 0) + P' $$ (0, 1) * k * Q' $$ (1, 0))\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "finally"], ["proof (chain)\npicking this:\n  a =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 0) + P' $$ (0, 1) * k * Q' $$ (1, 0))", "have u_dvd_a: \"u dvd a\""], ["proof (prove)\nusing this:\n  a =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 0) + P' $$ (0, 1) * k * Q' $$ (1, 0))\n\ngoal (1 subgoal):\n 1. u dvd a", "unfolding u_def D_def dvd_def"], ["proof (prove)\nusing this:\n  a =\n  (P * A * Q) $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 0) + P' $$ (0, 1) * k * Q' $$ (1, 0))\n\ngoal (1 subgoal):\n 1. \\<exists>k. a = (P * A * Q) $$ (0, 0) * k", "by auto"], ["proof (state)\nthis:\n  u dvd a\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"b = (P' * D * Q') $$ (0,1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = (P' * D * Q') $$ (0, 1)", "using e A_def"], ["proof (prove)\nusing this:\n  P' * D * Q' = A\n  A =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a\n       else if i = 0 \\<and> j = 1 then b\n            else if i = 1 \\<and> j = 0 then 0::'a else c)\n\ngoal (1 subgoal):\n 1. b = (P' * D * Q') $$ (0, 1)", "by auto"], ["proof (state)\nthis:\n  b = (P' * D * Q') $$ (0, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  b = (P' * D * Q') $$ (0, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D * Q') $$ (0, 1) =\n    (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1)", "by (rule mat_mult2_01, auto)"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (0, 1) =\n  (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (0, 1) =\n  (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... =  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n       P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1) =\n    P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)", "unfolding P'D_00 P'D_01 D11"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n    P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)", ".."], ["proof (state)\nthis:\n  (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1) =\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D) $$ (0, 0) * Q' $$ (0, 1) + (P' * D) $$ (0, 1) * Q' $$ (1, 1) =\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = D $$ (0, 0) * (P' $$ (0, 0) * Q' $$ (0, 1) +\n       P' $$ (0, 1) * k * Q' $$ (1, 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n    D $$ (0, 0) *\n    (P' $$ (0, 0) * Q' $$ (0, 1) + P' $$ (0, 1) * k * Q' $$ (1, 1))", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  P' $$ (0, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (0, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 1) + P' $$ (0, 1) * k * Q' $$ (1, 1))\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "finally"], ["proof (chain)\npicking this:\n  b =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 1) + P' $$ (0, 1) * k * Q' $$ (1, 1))", "have u_dvd_b: \"u dvd b\""], ["proof (prove)\nusing this:\n  b =\n  D $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 1) + P' $$ (0, 1) * k * Q' $$ (1, 1))\n\ngoal (1 subgoal):\n 1. u dvd b", "unfolding u_def D_def dvd_def"], ["proof (prove)\nusing this:\n  b =\n  (P * A * Q) $$ (0, 0) *\n  (P' $$ (0, 0) * Q' $$ (0, 1) + P' $$ (0, 1) * k * Q' $$ (1, 1))\n\ngoal (1 subgoal):\n 1. \\<exists>k. b = (P * A * Q) $$ (0, 0) * k", "by auto"], ["proof (state)\nthis:\n  u dvd b\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"c = (P' * D * Q') $$ (1,1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = (P' * D * Q') $$ (1, 1)", "using e A_def"], ["proof (prove)\nusing this:\n  P' * D * Q' = A\n  A =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a\n       else if i = 0 \\<and> j = 1 then b\n            else if i = 1 \\<and> j = 0 then 0::'a else c)\n\ngoal (1 subgoal):\n 1. c = (P' * D * Q') $$ (1, 1)", "by auto"], ["proof (state)\nthis:\n  c = (P' * D * Q') $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  c = (P' * D * Q') $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D * Q') $$ (1, 1) =\n    (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1)", "by (rule mat_mult2_11, auto)"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (1, 1) =\n  (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D * Q') $$ (1, 1) =\n  (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) \n        + P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1) =\n    P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)", "unfolding P'D_11 P'D_10 D11"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n    P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)", ".."], ["proof (state)\nthis:\n  (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1) =\n  P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "also"], ["proof (state)\nthis:\n  (P' * D) $$ (1, 0) * Q' $$ (0, 1) + (P' * D) $$ (1, 1) * Q' $$ (1, 1) =\n  P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1)\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "have \"... = D $$ (0, 0) * (P' $$ (1, 0) * Q' $$ (0, 1) \n        + P' $$ (1, 1) * k * Q' $$ (1, 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n    P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n    D $$ (0, 0) *\n    (P' $$ (1, 0) * Q' $$ (0, 1) + P' $$ (1, 1) * k * Q' $$ (1, 1))", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  P' $$ (1, 0) * D $$ (0, 0) * Q' $$ (0, 1) +\n  P' $$ (1, 1) * (D $$ (0, 0) * k) * Q' $$ (1, 1) =\n  D $$ (0, 0) *\n  (P' $$ (1, 0) * Q' $$ (0, 1) + P' $$ (1, 1) * k * Q' $$ (1, 1))\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "finally"], ["proof (chain)\npicking this:\n  c =\n  D $$ (0, 0) *\n  (P' $$ (1, 0) * Q' $$ (0, 1) + P' $$ (1, 1) * k * Q' $$ (1, 1))", "have u_dvd_c: \"u dvd c\""], ["proof (prove)\nusing this:\n  c =\n  D $$ (0, 0) *\n  (P' $$ (1, 0) * Q' $$ (0, 1) + P' $$ (1, 1) * k * Q' $$ (1, 1))\n\ngoal (1 subgoal):\n 1. u dvd c", "unfolding u_def D_def dvd_def"], ["proof (prove)\nusing this:\n  c =\n  (P * A * Q) $$ (0, 0) *\n  (P' $$ (1, 0) * Q' $$ (0, 1) + P' $$ (1, 1) * k * Q' $$ (1, 1))\n\ngoal (1 subgoal):\n 1. \\<exists>k. c = (P * A * Q) $$ (0, 0) * k", "by auto"], ["proof (state)\nthis:\n  u dvd c\n\ngoal (2 subgoals):\n 1. finite {a, b, c}\n 2. \\<forall>x\\<in>{a, b, c}. u dvd x", "show \"\\<forall>x\\<in>{a,b,c}. u dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{a, b, c}. u dvd x", "using u_dvd_a u_dvd_b u_dvd_c"], ["proof (prove)\nusing this:\n  u dvd a\n  u dvd b\n  u dvd c\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{a, b, c}. u dvd x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{a, b, c}. u dvd x\n\ngoal (1 subgoal):\n 1. finite {a, b, c}", "qed (simp)"], ["proof (state)\nthis:\n  u dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "have \"ideal_generated {p*a,p*b+q*c} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "by (metis (no_types, lifting) eq add.assoc ideal_generated_1 ideal_generated_pair_UNIV \n        mult.commute semiring_normalization_rules(34) u_dvd_1)"], ["proof (state)\nthis:\n  ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<Longrightarrow>\n       \\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "from this"], ["proof (chain)\npicking this:\n  ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "show \"\\<exists>p q. ideal_generated {p * a, p * b + q * c} = ideal_generated {1}\""], ["proof (prove)\nusing this:\n  ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>p q.\n       ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}", "by auto"], ["proof (state)\nthis:\n  \\<exists>p q.\n     ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma necessity:\n  assumes \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\"\n  shows \"(\\<forall>(A::'a mat). admits_triangular_reduction A)\"\n and \"\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n  \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "using necessity_D' admits_diagonal_imp_admits_triangular assms"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n  Ball (carrier_mat 1 2) admits_diagonal_reduction \\<Longrightarrow>\n  All admits_triangular_reduction\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by blast+"], ["", "text \\<open>In the article, the authors change the notation and assume $(a,b,c) = (1)$. However,\nwe have to provide here the complete prove. To to this, I obtained a $D$ matrix such that\n$A' = A*D$ and $D$ is a diagonal matrix with $d$ in the diagonal. Proving that $D$ is \nleft and right commutative, I can follow the reasoning in the article\\<close>"], ["", "lemma sufficiency:\n  assumes hermite_ring: \"(\\<forall>(A::'a mat). admits_triangular_reduction A)\"\n    and D': \"\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n    \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})\"\n  shows \"(\\<forall>(A::'a mat). admits_diagonal_reduction A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "have admits_1x2: \"\\<forall>(A::'a mat) \\<in> carrier_mat 1 2. admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A", "using hermite_ring triangular_eq_diagonal_1x2"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n  Ball (carrier_mat 1 2) admits_triangular_reduction =\n  Ball (carrier_mat 1 2) admits_diagonal_reduction\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A", "by blast"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 1 2. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "have admits_2x2: \"\\<forall>(A::'a mat) \\<in> carrier_mat 2 2. admits_diagonal_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>carrier_mat 2 2. admits_diagonal_reduction A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "fix B::\"'a mat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "assume B: \"B \\<in> carrier_mat 2 2\""], ["proof (state)\nthis:\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "obtain U where BU: \"lower_triangular (B*U)\" and inv_U: \"invertible_mat U\"\n      and U: \"U \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>lower_triangular (B * U); invertible_mat U;\n         U \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hermite_ring"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>lower_triangular (B * U); invertible_mat U;\n         U \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding admits_triangular_reduction_def"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>lower_triangular (B * U); invertible_mat U;\n         U \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using B"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     \\<exists>U.\n        U \\<in> carrier_mat (dim_col A) (dim_col A) \\<and>\n        invertible_mat U \\<and> lower_triangular (A * U)\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>lower_triangular (B * U); invertible_mat U;\n         U \\<in> carrier_mat 2 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  lower_triangular (B * U)\n  invertible_mat U\n  U \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define A where \"A = B*U\""], ["proof (state)\nthis:\n  A = B * U\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define a where \"a = A $$ (0,0)\""], ["proof (state)\nthis:\n  a = A $$ (0, 0)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define b where \"b = A $$ (1,0)\""], ["proof (state)\nthis:\n  b = A $$ (1, 0)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define c where \"c = A $$ (1,1)\""], ["proof (state)\nthis:\n  c = A $$ (1, 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have A: \"A \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat 2 2", "using U B A_def"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n  A = B * U\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have A_01: \"A$$(0,1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (0, 1) = (0::'a)", "using BU U B"], ["proof (prove)\nusing this:\n  lower_triangular (B * U)\n  U \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. A $$ (0, 1) = (0::'a)", "unfolding lower_triangular_def A_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<and>\n     i < dim_row (B * U) \\<and> j < dim_col (B * U) \\<longrightarrow>\n     (B * U) $$ (i, j) = (0::'a)\n  U \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. (B * U) $$ (0, 1) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (0, 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "obtain d::'a where i: \"ideal_generated {a,b,c} = ideal_generated {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "(*This fact is true since all the finitely generated ideals are principal ideals \n        in a Hermite ring*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"OFCLASS('a, bezout_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, bezout_ring_class)", "by (rule Hermite_ring_imp_Bezout_ring,\n            insert OFCLASS_Hermite_ring_def[where ?'a='a] hermite_ring, auto)"], ["proof (state)\nthis:\n  OFCLASS('a, bezout_ring_class)\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \"class.bezout_ring (*) (1::'a) (+) 0 (-) uminus\""], ["proof (prove)\nusing this:\n  OFCLASS('a, bezout_ring_class)\n\ngoal (1 subgoal):\n 1. class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus", "using OFCLASS_bezout_ring_imp_class_bezout_ring[where ?'a = 'a]"], ["proof (prove)\nusing this:\n  OFCLASS('a, bezout_ring_class)\n  OFCLASS('a, bezout_ring_class) \\<Longrightarrow>\n  class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus\n\ngoal (1 subgoal):\n 1. class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus", "by auto"], ["proof (state)\nthis:\n  class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \"(\\<forall>I::'a::comm_ring_1 set. finitely_generated_ideal I \\<longrightarrow> principal_ideal I)\""], ["proof (prove)\nusing this:\n  class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       finitely_generated_ideal I \\<longrightarrow> principal_ideal I", "using bezout_ring_iff_fin_gen_principal_ideal2"], ["proof (prove)\nusing this:\n  class.bezout_ring (*) (1::'a) (+) (0::'a) (-) uminus\n  (\\<forall>I.\n      finitely_generated_ideal I \\<longrightarrow> principal_ideal I) =\n  class.bezout_ring (*) (1::?'a) (+) (0::?'a) (-) uminus\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       finitely_generated_ideal I \\<longrightarrow> principal_ideal I", "by auto"], ["proof (state)\nthis:\n  \\<forall>I. finitely_generated_ideal I \\<longrightarrow> principal_ideal I\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>I. finitely_generated_ideal I \\<longrightarrow> principal_ideal I\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"finitely_generated_ideal (ideal_generated {a,b,c})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finitely_generated_ideal (ideal_generated {a, b, c})", "unfolding finitely_generated_ideal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal (ideal_generated {a, b, c}) \\<and>\n    (\\<exists>S.\n        finite S \\<and> ideal_generated S = ideal_generated {a, b, c})", "using ideal_ideal_generated"], ["proof (prove)\nusing this:\n  ideal (ideal_generated ?S)\n\ngoal (1 subgoal):\n 1. ideal (ideal_generated {a, b, c}) \\<and>\n    (\\<exists>S.\n        finite S \\<and> ideal_generated S = ideal_generated {a, b, c})", "by force"], ["proof (state)\nthis:\n  finitely_generated_ideal (ideal_generated {a, b, c})\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>I. finitely_generated_ideal I \\<longrightarrow> principal_ideal I\n  finitely_generated_ideal (ideal_generated {a, b, c})", "have \"principal_ideal (ideal_generated {a,b,c})\""], ["proof (prove)\nusing this:\n  \\<forall>I. finitely_generated_ideal I \\<longrightarrow> principal_ideal I\n  finitely_generated_ideal (ideal_generated {a, b, c})\n\ngoal (1 subgoal):\n 1. principal_ideal (ideal_generated {a, b, c})", "by auto"], ["proof (state)\nthis:\n  principal_ideal (ideal_generated {a, b, c})\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        ideal_generated {a, b, c} = ideal_generated {d} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  principal_ideal (ideal_generated {a, b, c})\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  principal_ideal (ideal_generated {a, b, c})\n  ideal_generated {a, b, c} = ideal_generated {?d} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "unfolding principal_ideal_def"], ["proof (prove)\nusing this:\n  \\<exists>aa. ideal_generated {aa} = ideal_generated {a, b, c}\n  ideal_generated {a, b, c} = ideal_generated {?d} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {a, b, c} = ideal_generated {d}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have d_dvd_a: \"d dvd a\" and d_dvd_b: \"d dvd b\" and d_dvd_c: \"d dvd c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd a &&& d dvd b &&& d dvd c", "using i ideal_generated_singleton_dvd"], ["proof (prove)\nusing this:\n  ideal_generated {a, b, c} = ideal_generated {d}\n  \\<lbrakk>ideal_generated ?S = ideal_generated {?d}; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?d dvd ?x\n\ngoal (1 subgoal):\n 1. d dvd a &&& d dvd b &&& d dvd c", "by blast+"], ["proof (state)\nthis:\n  d dvd a\n  d dvd b\n  d dvd c\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "obtain a1 b1 c1 where a1: \"a = a1 * d\" and b1: \"b = b1 * d\" and c1: \"c = c1 * d\"\n      and i2: \"ideal_generated {a1,b1,c1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have T: \"\\<forall>a b. \\<exists>a1 b1 d. a = a1 * d \\<and> b = b1 * d \n        \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "by (rule theorem3_part2[OF hermite_ring])"], ["proof (state)\nthis:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*Hermite ring is equivalent to the property T*)"], ["proof (state)\nthis:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}", "obtain a1' b1' d' where 1: \"a = a1' * d'\" and 2: \"b = b1' * d'\"\n        and 3: \"ideal_generated {a1', b1'} = ideal_generated {1::'a}\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1' d' b1'.\n        \\<lbrakk>a = a1' * d'; b = b1' * d';\n         ideal_generated {a1', b1'} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = a1' * d'\n  b = b1' * d'\n  ideal_generated {a1', b1'} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>a1 b1 c1. a = a1 * d \\<and> b = b1 * d \\<and> c = c1 * d \n        \\<and> ideal_generated {a1, b1, c1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 b1 c1.\n       a = a1 * d \\<and>\n       b = b1 * d \\<and>\n       c = c1 * d \\<and>\n       ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "by (rule corollary5[OF T i])"], ["proof (state)\nthis:\n  \\<exists>a1 b1 c1.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and>\n     c = c1 * d \\<and>\n     ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>a1 b1 c1.\n        \\<lbrakk>a = a1 * d; b = b1 * d; c = c1 * d;\n         ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this"], ["proof (chain)\npicking this:\n  \\<exists>a1 b1 c1.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and>\n     c = c1 * d \\<and>\n     ideal_generated {a1, b1, c1} = ideal_generated {1::'a}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>a1 b1 c1.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and>\n     c = c1 * d \\<and>\n     ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  \\<exists>a1 b1 c1.\n     a = a1 * d \\<and>\n     b = b1 * d \\<and>\n     c = c1 * d \\<and>\n     ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n  \\<lbrakk>a = ?a1.0 * d; b = ?b1.0 * d; c = ?c1.0 * d;\n   ideal_generated {?a1.0, ?b1.0, ?c1.0} = ideal_generated {1::'a}\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = a1 * d\n  b = b1 * d\n  c = c1 * d\n  ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define D where \"D = d \\<cdot>\\<^sub>m (1\\<^sub>m 2)\""], ["proof (state)\nthis:\n  D = d \\<cdot>\\<^sub>m 1\\<^sub>m 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define A' where \"A' = Matrix.mat 2 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then a1 else\n                                    if  i = 1 \\<and> j = 0 then b1 else\n                                    if  i = 0 \\<and> j = 1 then 0 else c1)\""], ["proof (state)\nthis:\n  A' =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a1\n       else if i = 1 \\<and> j = 0 then b1\n            else if i = 0 \\<and> j = 1 then 0::'a else c1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have D: \"D \\<in> carrier_mat 2 2\" and A': \"A'\\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<in> carrier_mat 2 2 &&& A' \\<in> carrier_mat 2 2", "unfolding A'_def D_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<cdot>\\<^sub>m 1\\<^sub>m 2 \\<in> carrier_mat 2 2 &&&\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then a1\n         else if i = 1 \\<and> j = 0 then b1\n              else if i = 0 \\<and> j = 1 then 0::'a else c1)\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  D \\<in> carrier_mat 2 2\n  A' \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have A_A'D: \"A = A' * D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A' * D", "by (rule eq_matI, insert D A' A a1 b1 c1 A_01 sum_two_rw a_def b_def c_def,\n      unfold scalar_prod_def Matrix.row_def col_def  D_def A'_def, \n      auto simp add: sum_two_rw less_Suc_eq numerals(2))"], ["proof (state)\nthis:\n  A = A' * D\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"1\\<in> ideal_generated{a1,b1,c1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<in> ideal_generated {a1, b1, c1}", "using i2"], ["proof (prove)\nusing this:\n  ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (1::'a) \\<in> ideal_generated {a1, b1, c1}", "by (simp add: ideal_generated_in)"], ["proof (state)\nthis:\n  (1::'a) \\<in> ideal_generated {a1, b1, c1}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "from this"], ["proof (chain)\npicking this:\n  (1::'a) \\<in> ideal_generated {a1, b1, c1}", "obtain f where d: \"(\\<Sum>i\\<in>{a1,b1,c1}. f i * i) = 1\""], ["proof (prove)\nusing this:\n  (1::'a) \\<in> ideal_generated {a1, b1, c1}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ideal_explicit2[of \"{a1,b1,c1}\"]"], ["proof (prove)\nusing this:\n  (1::'a) \\<in> ideal_generated {a1, b1, c1}\n  finite {a1, b1, c1} \\<Longrightarrow>\n  ideal_generated {a1, b1, c1} =\n  {y. \\<exists>f. (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = y}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "from this"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a)", "obtain x y z where \"x*a1+y*b1+z*c1 = 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        x * a1 + y * b1 + z * c1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using sum_three_elements[of _ a1 b1 c1]"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>{a1, b1, c1}. f i * i) = (1::'a)\n  \\<exists>x y z.\n     (\\<Sum>i\\<in>{a1, b1, c1}. ?f i * i) = x * a1 + y * b1 + z * c1\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        x * a1 + y * b1 + z * c1 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  x * a1 + y * b1 + z * c1 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "hence xa1_yb1_zc1_dvd_1: \"x * a1 + y * b1 + z * c1 dvd 1\""], ["proof (prove)\nusing this:\n  x * a1 + y * b1 + z * c1 = (1::'a)\n\ngoal (1 subgoal):\n 1. x * a1 + y * b1 + z * c1 dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  x * a1 + y * b1 + z * c1 dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "obtain p q where i3: \"ideal_generated {p*a1,p*b1+q*c1} = ideal_generated {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        ideal_generated {p * a1, p * b1 + q * c1} =\n        ideal_generated {1::'a} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using D' i2"], ["proof (prove)\nusing this:\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n  ideal_generated {a1, b1, c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        ideal_generated {p * a1, p * b1 + q * c1} =\n        ideal_generated {1::'a} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ideal_generated {p * a1, p * b1 + q * c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"ideal_generated {p,q} = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "obtain X Y where e: \"X*p*a1 + Y*(p*b1+q*c1) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X Y.\n        X * p * a1 + Y * (p * b1 + q * c1) = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis i3 ideal_generated_1 ideal_generated_pair_exists_UNIV mult.assoc)"], ["proof (state)\nthis:\n  X * p * a1 + Y * (p * b1 + q * c1) = (1::'a)\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "have \"X*p*a1 + Y*(p*b1+q*c1) = X*p*a1 + Y*p*b1+Y*q*c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X * p * a1 + Y * (p * b1 + q * c1) =\n    X * p * a1 + Y * p * b1 + Y * q * c1", "by (simp add: add.assoc mult.assoc semiring_normalization_rules(34))"], ["proof (state)\nthis:\n  X * p * a1 + Y * (p * b1 + q * c1) = X * p * a1 + Y * p * b1 + Y * q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "also"], ["proof (state)\nthis:\n  X * p * a1 + Y * (p * b1 + q * c1) = X * p * a1 + Y * p * b1 + Y * q * c1\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "have \"... = (X*a1+Y*b1) * p + (Y * c1) * q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X * p * a1 + Y * p * b1 + Y * q * c1 =\n    (X * a1 + Y * b1) * p + Y * c1 * q", "by (simp add: mult.commute ring_class.ring_distribs)"], ["proof (state)\nthis:\n  X * p * a1 + Y * p * b1 + Y * q * c1 = (X * a1 + Y * b1) * p + Y * c1 * q\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "finally"], ["proof (chain)\npicking this:\n  X * p * a1 + Y * (p * b1 + q * c1) = (X * a1 + Y * b1) * p + Y * c1 * q", "have \"(X*a1+Y*b1) * p + Y * c1 * q = 1\""], ["proof (prove)\nusing this:\n  X * p * a1 + Y * (p * b1 + q * c1) = (X * a1 + Y * b1) * p + Y * c1 * q\n\ngoal (1 subgoal):\n 1. (X * a1 + Y * b1) * p + Y * c1 * q = (1::'a)", "using e"], ["proof (prove)\nusing this:\n  X * p * a1 + Y * (p * b1 + q * c1) = (X * a1 + Y * b1) * p + Y * c1 * q\n  X * p * a1 + Y * (p * b1 + q * c1) = (1::'a)\n\ngoal (1 subgoal):\n 1. (X * a1 + Y * b1) * p + Y * c1 * q = (1::'a)", "by simp"], ["proof (state)\nthis:\n  (X * a1 + Y * b1) * p + Y * c1 * q = (1::'a)\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "from this"], ["proof (chain)\npicking this:\n  (X * a1 + Y * b1) * p + Y * c1 * q = (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (X * a1 + Y * b1) * p + Y * c1 * q = (1::'a)\n\ngoal (1 subgoal):\n 1. ideal_generated {p, q} = UNIV", "by (rule ideal_generated_pair_UNIV, simp)"], ["proof (state)\nthis:\n  ideal_generated {p, q} = UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal_generated {p, q} = UNIV\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "from this"], ["proof (chain)\npicking this:\n  ideal_generated {p, q} = UNIV", "obtain u v where pu_qv_1: \"p*u - q * v = 1\""], ["proof (prove)\nusing this:\n  ideal_generated {p, q} = UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        p * u - q * v = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Groups.mult_ac(2) diff_minus_eq_add ideal_generated_1 \n          ideal_generated_pair_exists_UNIV mult_minus_left)"], ["proof (state)\nthis:\n  p * u - q * v = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "let ?P = \"Matrix.mat 2 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then p else\n                                    if  i = 1 \\<and> j = 0 then q else\n                                    if  i = 0 \\<and> j = 1 then v else u)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have P: \"?P \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u)\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"Determinant.det ?P = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u)) =\n    (1::'a)", "using pu_qv_1"], ["proof (prove)\nusing this:\n  p * u - q * v = (1::'a)\n\ngoal (1 subgoal):\n 1. Determinant.det\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u)) =\n    (1::'a)", "unfolding det_2[OF P]"], ["proof (prove)\nusing this:\n  p * u - q * v = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) $$\n    (0, 0) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) $$\n    (1, 1) -\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) $$\n    (0, 1) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) $$\n    (1, 0) =\n    (1::'a)", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "hence inv_P: \"invertible_mat ?P\""], ["proof (prove)\nusing this:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u))", "by (metis (no_types, lifting) P dvd_refl invertible_iff_is_unit_JNF)"], ["proof (state)\nthis:\n  invertible_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define S1 where \"S1 = A'*?P\""], ["proof (state)\nthis:\n  S1 =\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S1: \"S1 \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 \\<in> carrier_mat 2 2", "using A' P S1_def mult_carrier_mat"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n  S1 =\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. S1 \\<in> carrier_mat 2 2", "by blast"], ["proof (state)\nthis:\n  S1 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S1_00: \"S1 $$(0,0) = p*a1\" and S1_01: \"S1 $$(1,0) = p*b1+q*c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 $$ (0, 0) = p * a1 &&& S1 $$ (1, 0) = p * b1 + q * c1", "unfolding S1_def times_mat_def scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row A')\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row A' i $v ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (0, 0) =\n    p * a1 &&&\n    Matrix.mat (dim_row A')\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row A' i $v ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (1, 0) =\n    p * b1 + q * c1", "using A' P BU U B"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n  lower_triangular (B * U)\n  U \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. Matrix.mat (dim_row A')\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row A' i $v ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (0, 0) =\n    p * a1 &&&\n    Matrix.mat (dim_row A')\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row A' i $v ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (1, 0) =\n    p * b1 + q * c1", "unfolding A'_def upper_triangular_def"], ["proof (prove)\nusing this:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then a1\n       else if i = 1 \\<and> j = 0 then b1\n            else if i = 0 \\<and> j = 1 then 0::'a else c1)\n  \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n  lower_triangular (B * U)\n  U \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. Matrix.mat\n     (dim_row\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then a1\n             else if i = 1 \\<and> j = 0 then b1\n                  else if i = 0 \\<and> j = 1 then 0::'a else c1)))\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row\n             (Matrix.mat 2 2\n               (\\<lambda>(i, j).\n                   if i = 0 \\<and> j = 0 then a1\n                   else if i = 1 \\<and> j = 0 then b1\n                        else if i = 0 \\<and> j = 1 then 0::'a else c1))\n             i $v\n            ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (0, 0) =\n    p * a1 &&&\n    Matrix.mat\n     (dim_row\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then a1\n             else if i = 1 \\<and> j = 0 then b1\n                  else if i = 0 \\<and> j = 1 then 0::'a else c1)))\n     (dim_col\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u)))\n     (\\<lambda>(i, j).\n         \\<Sum>ia = 0..<dim_vec\n                         (col (Matrix.mat 2 2\n                                (\\<lambda>(i, j).\n                                    if i = 0 \\<and> j = 0 then p\n                                    else if i = 1 \\<and> j = 0 then q\n   else if i = 0 \\<and> j = 1 then v else u))\n                           j).\n            Matrix.row\n             (Matrix.mat 2 2\n               (\\<lambda>(i, j).\n                   if i = 0 \\<and> j = 0 then a1\n                   else if i = 1 \\<and> j = 0 then b1\n                        else if i = 0 \\<and> j = 1 then 0::'a else c1))\n             i $v\n            ia *\n            col (Matrix.mat 2 2\n                  (\\<lambda>(i, j).\n                      if i = 0 \\<and> j = 0 then p\n                      else if i = 1 \\<and> j = 0 then q\n                           else if i = 0 \\<and> j = 1 then v else u))\n             j $v\n            ia) $$\n    (1, 0) =\n    p * b1 + q * c1", "by (auto, unfold sum_two_rw, auto simp add: A'_def a_def b_def c_def)"], ["proof (state)\nthis:\n  S1 $$ (0, 0) = p * a1\n  S1 $$ (1, 0) = p * b1 + q * c1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "obtain q00 and q01 where q00_q01: \"p*a1*q00 + (p*b1+q*c1)*q01 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q00 q01.\n        p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using i3"], ["proof (prove)\nusing this:\n  ideal_generated {p * a1, p * b1 + q * c1} = ideal_generated {1::'a}\n\ngoal (1 subgoal):\n 1. (\\<And>q00 q01.\n        p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis ideal_generated_1 ideal_generated_pair_exists_pq1 mult.commute)"], ["proof (state)\nthis:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define q10 where \"q10 = - (p*b1+q*c1)\""], ["proof (state)\nthis:\n  q10 = - (p * b1 + q * c1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define q11 where \"q11 = p*a1\""], ["proof (state)\nthis:\n  q11 = p * a1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have q10_q11: \"p*a1*q10 + (p*b1+q*c1)*q11 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * a1 * q10 + (p * b1 + q * c1) * q11 = (0::'a)", "unfolding q10_def q11_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p * a1 * - (p * b1 + q * c1) + (p * b1 + q * c1) * (p * a1) = (0::'a)", "by (auto simp add: Rings.ring_distribs(1) Rings.ring_distribs(4) semiring_normalization_rules(7))"], ["proof (state)\nthis:\n  p * a1 * q10 + (p * b1 + q * c1) * q11 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "let ?Q = \"Matrix.mat 2 2 (\\<lambda>(i,j). if i = 0 \\<and> j = 0 then q00 else\n                                    if  i = 1 \\<and> j = 0 then q10 else\n                                    if  i = 0 \\<and> j = 1 then q01 else q11)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have Q: \"?Q \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11)\n  \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"Determinant.det ?Q = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Determinant.det\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11)) =\n    (1::'a)", "using q00_q01"], ["proof (prove)\nusing this:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. Determinant.det\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11)) =\n    (1::'a)", "unfolding det_2[OF Q]"], ["proof (prove)\nusing this:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 0) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 1) -\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 1) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 0) =\n    (1::'a)", "unfolding q10_def q11_def"], ["proof (prove)\nusing this:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then - (p * b1 + q * c1)\n              else if i = 0 \\<and> j = 1 then q01 else p * a1) $$\n    (0, 0) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then - (p * b1 + q * c1)\n              else if i = 0 \\<and> j = 1 then q01 else p * a1) $$\n    (1, 1) -\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then - (p * b1 + q * c1)\n              else if i = 0 \\<and> j = 1 then q01 else p * a1) $$\n    (0, 1) *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then - (p * b1 + q * c1)\n              else if i = 0 \\<and> j = 1 then q01 else p * a1) $$\n    (1, 0) =\n    (1::'a)", "by (auto, metis (no_types, lifting) add_uminus_conv_diff diff_minus_eq_add more_arith_simps(7)\n          more_arith_simps(9) mult.commute)"], ["proof (state)\nthis:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "hence inv_Q: \"invertible_mat ?Q\""], ["proof (prove)\nusing this:\n  Determinant.det\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11))", "by (smt Q dvd_refl invertible_iff_is_unit_JNF)"], ["proof (state)\nthis:\n  invertible_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define S2 where \"S2 = ?Q * S1 \""], ["proof (state)\nthis:\n  S2 =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  S1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S2: \"S2 \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 \\<in> carrier_mat 2 2", "using A' P S2_def S1 Q mult_carrier_mat"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n  S2 =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  S1\n  S1 \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11)\n  \\<in> carrier_mat 2 2\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. S2 \\<in> carrier_mat 2 2", "by blast"], ["proof (state)\nthis:\n  S2 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S2_00: \"S2 $$ (0,0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 $$ (0, 0) = (1::'a)", "unfolding mat_mult2_00[OF Q S1 S2_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 0) *\n    S1 $$ (0, 0) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 1) *\n    S1 $$ (1, 0) =\n    (1::'a)", "using q00_q01"], ["proof (prove)\nusing this:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 0) *\n    S1 $$ (0, 0) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 1) *\n    S1 $$ (1, 0) =\n    (1::'a)", "unfolding S1_00 S1_01"], ["proof (prove)\nusing this:\n  p * a1 * q00 + (p * b1 + q * c1) * q01 = (1::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 0) *\n    (p * a1) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (0, 1) *\n    (p * b1 + q * c1) =\n    (1::'a)", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  S2 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S2_10: \"S2 $$ (1,0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 $$ (1, 0) = (0::'a)", "unfolding mat_mult2_10[OF Q S1 S2_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 0) *\n    S1 $$ (0, 0) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 1) *\n    S1 $$ (1, 0) =\n    (0::'a)", "using q10_q11"], ["proof (prove)\nusing this:\n  p * a1 * q10 + (p * b1 + q * c1) * q11 = (0::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 0) *\n    S1 $$ (0, 0) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 1) *\n    S1 $$ (1, 0) =\n    (0::'a)", "unfolding S1_00 S1_01"], ["proof (prove)\nusing this:\n  p * a1 * q10 + (p * b1 + q * c1) * q11 = (0::'a)\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 0) *\n    (p * a1) +\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) $$\n    (1, 1) *\n    (p * b1 + q * c1) =\n    (0::'a)", "by (simp add: Groups.mult_ac(2))"], ["proof (state)\nthis:\n  S2 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "(*Now we have a zero in the upper-right position. \n          We want to get also a zero in the lower-left position.*)"], ["proof (state)\nthis:\n  S2 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "let ?P1 =\"(addrow_mat 2 (- (S2$$(0,1))) 0 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have P1: \"?P1 \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. addrow_mat 2 (- S2 $$ (0, 1)) 0 1 \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have inv_P1: \"invertible_mat ?P1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "by (metis addrow_mat_carrier arithmetic_simps(78) det_addrow_mat dvd_def \n          invertible_iff_is_unit_JNF numeral_One zero_neq_numeral)"], ["proof (state)\nthis:\n  invertible_mat (addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "define S3 where \"S3 = S2 * ?P1\""], ["proof (state)\nthis:\n  S3 = S2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have P1_P_A': \" A' *?P *?P1 \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n    \\<in> carrier_mat 2 2", "using P1 P A' mult_carrier_mat"], ["proof (prove)\nusing this:\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 \\<in> carrier_mat 2 2\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  \\<in> carrier_mat 2 2\n  A' \\<in> carrier_mat 2 2\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n    \\<in> carrier_mat 2 2", "by auto"], ["proof (state)\nthis:\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n  \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S3: \"S3 \\<in> carrier_mat 2 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S3 \\<in> carrier_mat 2 2", "using P1 S2 S3_def mult_carrier_mat"], ["proof (prove)\nusing this:\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 \\<in> carrier_mat 2 2\n  S2 \\<in> carrier_mat 2 2\n  S3 = S2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?n; ?B \\<in> carrier_mat ?n ?nc\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. S3 \\<in> carrier_mat 2 2", "by blast"], ["proof (state)\nthis:\n  S3 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S3_00: \"S3 $$ (0,0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S3 $$ (0, 0) = (1::'a)", "using S2_00"], ["proof (prove)\nusing this:\n  S2 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. S3 $$ (0, 0) = (1::'a)", "unfolding mat_mult2_00[OF S2 P1  S3_def]"], ["proof (prove)\nusing this:\n  S2 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. S2 $$ (0, 0) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (0, 0) +\n    S2 $$ (0, 1) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (1, 0) =\n    (1::'a)", "by auto"], ["proof (state)\nthis:\n  S3 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "moreover"], ["proof (state)\nthis:\n  S3 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S3_01: \"S3 $$ (0,1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S3 $$ (0, 1) = (0::'a)", "using S2_00"], ["proof (prove)\nusing this:\n  S2 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. S3 $$ (0, 1) = (0::'a)", "unfolding mat_mult2_01[OF S2 P1 S3_def]"], ["proof (prove)\nusing this:\n  S2 $$ (0, 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. S2 $$ (0, 0) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (0, 1) +\n    S2 $$ (0, 1) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (1, 1) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  S3 $$ (0, 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "moreover"], ["proof (state)\nthis:\n  S3 $$ (0, 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have S3_10: \"S3 $$ (1,0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S3 $$ (1, 0) = (0::'a)", "using S2_10"], ["proof (prove)\nusing this:\n  S2 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. S3 $$ (1, 0) = (0::'a)", "unfolding mat_mult2_10[OF S2 P1 S3_def]"], ["proof (prove)\nusing this:\n  S2 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. S2 $$ (1, 0) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (0, 0) +\n    S2 $$ (1, 1) * addrow_mat 2 (- S2 $$ (0, 1)) 0 1 $$ (1, 0) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  S3 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "ultimately"], ["proof (chain)\npicking this:\n  S3 $$ (0, 0) = (1::'a)\n  S3 $$ (0, 1) = (0::'a)\n  S3 $$ (1, 0) = (0::'a)", "have SNF_S3: \"Smith_normal_form_mat S3\""], ["proof (prove)\nusing this:\n  S3 $$ (0, 0) = (1::'a)\n  S3 $$ (0, 1) = (0::'a)\n  S3 $$ (1, 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat S3", "using S3"], ["proof (prove)\nusing this:\n  S3 $$ (0, 0) = (1::'a)\n  S3 $$ (0, 1) = (0::'a)\n  S3 $$ (1, 0) = (0::'a)\n  S3 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat S3", "unfolding Smith_normal_form_mat_def isDiagonal_mat_def"], ["proof (prove)\nusing this:\n  S3 $$ (0, 0) = (1::'a)\n  S3 $$ (0, 1) = (0::'a)\n  S3 $$ (1, 0) = (0::'a)\n  S3 \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. (\\<forall>a.\n        a + 1 < min (dim_row S3) (dim_col S3) \\<longrightarrow>\n        S3 $$ (a, a) dvd S3 $$ (a + 1, a + 1)) \\<and>\n    (\\<forall>i j.\n        i \\<noteq> j \\<and>\n        i < dim_row S3 \\<and> j < dim_col S3 \\<longrightarrow>\n        S3 $$ (i, j) = (0::'a))", "using less_2_cases"], ["proof (prove)\nusing this:\n  S3 $$ (0, 0) = (1::'a)\n  S3 $$ (0, 1) = (0::'a)\n  S3 $$ (1, 0) = (0::'a)\n  S3 \\<in> carrier_mat 2 2\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n\ngoal (1 subgoal):\n 1. (\\<forall>a.\n        a + 1 < min (dim_row S3) (dim_col S3) \\<longrightarrow>\n        S3 $$ (a, a) dvd S3 $$ (a + 1, a + 1)) \\<and>\n    (\\<forall>i j.\n        i \\<noteq> j \\<and>\n        i < dim_row S3 \\<and> j < dim_col S3 \\<longrightarrow>\n        S3 $$ (i, j) = (0::'a))", "by auto"], ["proof (state)\nthis:\n  Smith_normal_form_mat S3\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "hence SNF_S3_D: \"Smith_normal_form_mat (S3*D)\""], ["proof (prove)\nusing this:\n  Smith_normal_form_mat S3\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (S3 * D)", "using D_def S3 SNF_preserved_multiples_identity"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat S3\n  D = d \\<cdot>\\<^sub>m 1\\<^sub>m 2\n  S3 \\<in> carrier_mat 2 2\n  \\<lbrakk>?S \\<in> carrier_mat ?m ?n; Smith_normal_form_mat ?S\\<rbrakk>\n  \\<Longrightarrow> Smith_normal_form_mat\n                     (?S * (?k \\<cdot>\\<^sub>m 1\\<^sub>m ?n))\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat (S3 * D)", "by blast"], ["proof (state)\nthis:\n  Smith_normal_form_mat (S3 * D)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"S3 * D = ?Q * A' * ?P * ?P1 * D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S3 * D =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n    D", "using S1_def S2_def S3_def"], ["proof (prove)\nusing this:\n  S1 =\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u)\n  S2 =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  S1\n  S3 = S2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n\ngoal (1 subgoal):\n 1. S3 * D =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n    D", "by (smt A' P Q S1 addrow_mat_carrier assoc_mult_mat)"], ["proof (state)\nthis:\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n  D\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n  D\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * A' * ?P * (?P1 * D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n    D =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D)", "by (meson A' D addrow_mat_carrier assoc_mult_mat mat_carrier mult_carrier_mat)"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n  D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 *\n  D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * A' * ?P * (D * ?P1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "using commute_multiples_identity[OF P1]"], ["proof (prove)\nusing this:\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * (?k \\<cdot>\\<^sub>m 1\\<^sub>m 2) =\n  ?k \\<cdot>\\<^sub>m 1\\<^sub>m 2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "unfolding D_def"], ["proof (prove)\nusing this:\n  addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * (?k \\<cdot>\\<^sub>m 1\\<^sub>m 2) =\n  ?k \\<cdot>\\<^sub>m 1\\<^sub>m 2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * (d \\<cdot>\\<^sub>m 1\\<^sub>m 2)) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (d \\<cdot>\\<^sub>m 1\\<^sub>m 2 * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (addrow_mat 2 (- S2 $$ (0, 1)) 0 1 * D) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * A' * (?P * (D * ?P1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "by (smt A' D assoc_mult_mat carrier_matD(1) carrier_matD(2) mat_carrier times_mat_def)"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then p\n       else if i = 1 \\<and> j = 0 then q\n            else if i = 0 \\<and> j = 1 then v else u) *\n  (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * A' * (D * (?P * ?P1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    (D *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "by (smt D D_def P P1 assoc_mult_mat commute_multiples_identity)"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (D *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   (D * addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (D *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * (A' * D) * (?P * ?P1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A' *\n    (D *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    (A' * D) *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "by (smt A' D assoc_mult_mat carrier_matD(1) carrier_matD(2) mat_carrier times_mat_def)"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (D *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  (A' * D) *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A' *\n  (D *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1)) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  (A' * D) *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * A * (?P * ?P1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    (A' * D) *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "unfolding A_A'D"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    (A' * D) *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    (A' * D) *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1)", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  (A' * D) *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "also"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  (A' * D) *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "have \"... = ?Q * B * (U * (?P * ?P1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    A *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    B *\n    (U *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    (B * U) *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    B *\n    (U *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "by (smt B U assoc_mult_mat carrier_matD(1) carrier_matD(2) mat_carrier times_mat_def)"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  A *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1) =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  B *\n  (U *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "finally"], ["proof (chain)\npicking this:\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  B *\n  (U *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "have S3_D_rw: \"S3 * D = ?Q * B * (U * (?P * ?P1))\""], ["proof (prove)\nusing this:\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  B *\n  (U *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. S3 * D =\n    Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    B *\n    (U *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "."], ["proof (state)\nthis:\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  B *\n  (U *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> carrier_mat 2 2 \\<Longrightarrow> admits_diagonal_reduction A", "show \"admits_diagonal_reduction B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admits_diagonal_reduction B", "proof (rule admits_diagonal_reduction_intro[OF _ _ inv_Q])"], ["proof (state)\ngoal (4 subgoals):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)\n    \\<in> carrier_mat (dim_row B) (dim_row B)\n 2. ?Q \\<in> carrier_mat (dim_col B) (dim_col B)\n 3. invertible_mat ?Q\n 4. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      ?Q)", "show \"(U* (?P * ?P1)) \\<in> carrier_mat (dim_col B) (dim_col B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n    \\<in> carrier_mat (dim_col B) (dim_col B)", "using B U"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat 2 2\n  U \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. U *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n    \\<in> carrier_mat (dim_col B) (dim_col B)", "by auto"], ["proof (state)\nthis:\n  U *\n  (Matrix.mat 2 2\n    (\\<lambda>(i, j).\n        if i = 0 \\<and> j = 0 then p\n        else if i = 1 \\<and> j = 0 then q\n             else if i = 0 \\<and> j = 1 then v else u) *\n   addrow_mat 2 (- S2 $$ (0, 1)) 0 1)\n  \\<in> carrier_mat (dim_col B) (dim_col B)\n\ngoal (3 subgoals):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)\n    \\<in> carrier_mat (dim_row B) (dim_row B)\n 2. invertible_mat\n     (U *\n      (Matrix.mat 2 2\n        (\\<lambda>(i, j).\n            if i = 0 \\<and> j = 0 then p\n            else if i = 1 \\<and> j = 0 then q\n                 else if i = 0 \\<and> j = 1 then v else u) *\n       addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n 3. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      (U *\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u) *\n        addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))", "show \"?Q \\<in> carrier_mat (dim_row B) (dim_row B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)\n    \\<in> carrier_mat (dim_row B) (dim_row B)", "using Q B"], ["proof (prove)\nusing this:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11)\n  \\<in> carrier_mat 2 2\n  B \\<in> carrier_mat 2 2\n\ngoal (1 subgoal):\n 1. Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11)\n    \\<in> carrier_mat (dim_row B) (dim_row B)", "by auto"], ["proof (state)\nthis:\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11)\n  \\<in> carrier_mat (dim_row B) (dim_row B)\n\ngoal (2 subgoals):\n 1. invertible_mat\n     (U *\n      (Matrix.mat 2 2\n        (\\<lambda>(i, j).\n            if i = 0 \\<and> j = 0 then p\n            else if i = 1 \\<and> j = 0 then q\n                 else if i = 0 \\<and> j = 1 then v else u) *\n       addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n 2. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      (U *\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u) *\n        addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))", "show \"invertible_mat (U * (?P * ?P1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (U *\n      (Matrix.mat 2 2\n        (\\<lambda>(i, j).\n            if i = 0 \\<and> j = 0 then p\n            else if i = 1 \\<and> j = 0 then q\n                 else if i = 0 \\<and> j = 1 then v else u) *\n       addrow_mat 2 (- S2 $$ (0, 1)) 0 1))", "by (metis (no_types, lifting) P1 U carrier_matD(1) carrier_matD(2) inv_P inv_P1 inv_U \n            invertible_mult_JNF mat_carrier times_mat_def)"], ["proof (state)\nthis:\n  invertible_mat\n   (U *\n    (Matrix.mat 2 2\n      (\\<lambda>(i, j).\n          if i = 0 \\<and> j = 0 then p\n          else if i = 1 \\<and> j = 0 then q\n               else if i = 0 \\<and> j = 1 then v else u) *\n     addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      (U *\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u) *\n        addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))", "show \"Smith_normal_form_mat (?Q * B *(U* (?P * ?P1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      (U *\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u) *\n        addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))", "using SNF_S3_D S3_D_rw"], ["proof (prove)\nusing this:\n  Smith_normal_form_mat (S3 * D)\n  S3 * D =\n  Matrix.mat 2 2\n   (\\<lambda>(i, j).\n       if i = 0 \\<and> j = 0 then q00\n       else if i = 1 \\<and> j = 0 then q10\n            else if i = 0 \\<and> j = 1 then q01 else q11) *\n  B *\n  (U *\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then p\n         else if i = 1 \\<and> j = 0 then q\n              else if i = 0 \\<and> j = 1 then v else u) *\n    addrow_mat 2 (- S2 $$ (0, 1)) 0 1))\n\ngoal (1 subgoal):\n 1. Smith_normal_form_mat\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then q00\n           else if i = 1 \\<and> j = 0 then q10\n                else if i = 0 \\<and> j = 1 then q01 else q11) *\n      B *\n      (U *\n       (Matrix.mat 2 2\n         (\\<lambda>(i, j).\n             if i = 0 \\<and> j = 0 then p\n             else if i = 1 \\<and> j = 0 then q\n                  else if i = 0 \\<and> j = 1 then v else u) *\n        addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))", "by simp"], ["proof (state)\nthis:\n  Smith_normal_form_mat\n   (Matrix.mat 2 2\n     (\\<lambda>(i, j).\n         if i = 0 \\<and> j = 0 then q00\n         else if i = 1 \\<and> j = 0 then q10\n              else if i = 0 \\<and> j = 1 then q01 else q11) *\n    B *\n    (U *\n     (Matrix.mat 2 2\n       (\\<lambda>(i, j).\n           if i = 0 \\<and> j = 0 then p\n           else if i = 1 \\<and> j = 0 then q\n                else if i = 0 \\<and> j = 1 then v else u) *\n      addrow_mat 2 (- S2 $$ (0, 1)) 0 1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  admits_diagonal_reduction B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 2 2. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "obtain Smith_1x2 where Smith_1x2: \"\\<forall>(A::'a mat)\\<in>carrier_mat 1 2. is_SNF A (Smith_1x2 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Smith_1x2.\n        \\<forall>A\\<in>carrier_mat 1 2.\n           is_SNF A (Smith_1x2 A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all[OF admits_1x2]"], ["proof (prove)\nusing this:\n  \\<exists>algorithm. \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (algorithm A)\n\ngoal (1 subgoal):\n 1. (\\<And>Smith_1x2.\n        \\<forall>A\\<in>carrier_mat 1 2.\n           is_SNF A (Smith_1x2 A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (Smith_1x2 A)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "from this"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (Smith_1x2 A)", "obtain Smith_1x2' \n    where Smith_1x2': \"\\<forall>(A::'a mat)\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2' A)\""], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (Smith_1x2 A)\n\ngoal (1 subgoal):\n 1. (\\<And>Smith_1x2'.\n        \\<forall>A\\<in>carrier_mat 1 2.\n           is_SNF A (1\\<^sub>m 1, Smith_1x2' A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Smith_1xn_two_matrices_all[OF Smith_1x2]"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (Smith_1x2 A)\n  \\<exists>Smith_1xn'.\n     \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1xn' A)\n\ngoal (1 subgoal):\n 1. (\\<And>Smith_1x2'.\n        \\<forall>A\\<in>carrier_mat 1 2.\n           is_SNF A (1\\<^sub>m 1, Smith_1x2' A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2' A)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "obtain Smith_2x2 where Smith_2x2: \"\\<forall>(A::'a mat)\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Smith_2x2.\n        \\<forall>A\\<in>carrier_mat 2 2.\n           is_SNF A (Smith_2x2 A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using admits_diagonal_reduction_imp_exists_algorithm_is_SNF_all[OF admits_2x2]"], ["proof (prove)\nusing this:\n  \\<exists>algorithm. \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (algorithm A)\n\ngoal (1 subgoal):\n 1. (\\<And>Smith_2x2.\n        \\<forall>A\\<in>carrier_mat 2 2.\n           is_SNF A (Smith_2x2 A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2 A)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "have d: \"is_div_op (\\<lambda>a b. (SOME k. k * b = a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_div_op (\\<lambda>a b. SOME k. k * b = a)", "using div_op_SOME"], ["proof (prove)\nusing this:\n  is_div_op (\\<lambda>a b. SOME k. k * b = a)\n\ngoal (1 subgoal):\n 1. is_div_op (\\<lambda>a b. SOME k. k * b = a)", "by auto"], ["proof (state)\nthis:\n  is_div_op (\\<lambda>a b. SOME k. k * b = a)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "interpret Smith_Impl Smith_1x2' Smith_2x2 \"(\\<lambda>a b. (SOME k. k * b = a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Smith_Impl Smith_1x2' Smith_2x2 (\\<lambda>a b. SOME k. k * b = a)", "using Smith_1x2' Smith_2x2 d"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>carrier_mat 1 2. is_SNF A (1\\<^sub>m 1, Smith_1x2' A)\n  \\<forall>A\\<in>carrier_mat 2 2. is_SNF A (Smith_2x2 A)\n  is_div_op (\\<lambda>a b. SOME k. k * b = a)\n\ngoal (1 subgoal):\n 1. Smith_Impl Smith_1x2' Smith_2x2 (\\<lambda>a b. SOME k. k * b = a)", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "using is_SNF_Smith_mxn"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?m ?n \\<Longrightarrow> is_SNF ?A (Smith_mxn ?A)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by (meson admits_diagonal_reduction_eq_exists_algorithm_is_SNF carrier_mat_triv)"], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Final theorem\\<close>"], ["", "(* Characterization of elementary divisor rings (theorem 6)*)"], ["", "theorem edr_characterization:\n  \"(\\<forall>(A::'a mat). admits_diagonal_reduction A) = ((\\<forall>(A::'a mat). admits_triangular_reduction A) \n  \\<and> (\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n                      \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A. admits_diagonal_reduction A) =\n    ((\\<forall>A. admits_triangular_reduction A) \\<and>\n     (\\<forall>a b c.\n         ideal_generated {a, b, c} =\n         ideal_generated {1::'a} \\<longrightarrow>\n         (\\<exists>p q.\n             ideal_generated {p * a, p * b + q * c} =\n             ideal_generated {1::'a})))", "using necessity sufficiency"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n  \\<lbrakk>\\<forall>A. admits_triangular_reduction A;\n   \\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} =\n          ideal_generated {1::'a})\\<rbrakk>\n  \\<Longrightarrow> \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. (\\<forall>A. admits_diagonal_reduction A) =\n    ((\\<forall>A. admits_triangular_reduction A) \\<and>\n     (\\<forall>a b c.\n         ideal_generated {a, b, c} =\n         ideal_generated {1::'a} \\<longrightarrow>\n         (\\<exists>p q.\n             ideal_generated {p * a, p * b + q * c} =\n             ideal_generated {1::'a})))", "by blast"], ["", "corollary OFCLASS_edr_characterization:\n\"OFCLASS('a, elementary_divisor_ring_class) \\<equiv> (OFCLASS('a, Hermite_ring_class) \n  &&& (\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n    \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})))\" (is \"?lhs \\<equiv> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<equiv>\n    (OFCLASS('a, Hermite_ring_class) &&&\n     \\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "assume 1: \"OFCLASS('a, elementary_divisor_ring_class)\""], ["proof (state)\nthis:\n  OFCLASS('a, elementary_divisor_ring_class)\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "hence admits_diagonal: \"\\<forall>A::'a mat. admits_diagonal_reduction A\""], ["proof (prove)\nusing this:\n  OFCLASS('a, elementary_divisor_ring_class)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "using conjunctionD2[OF 1[unfolded elementary_divisor_ring_class_def]]"], ["proof (prove)\nusing this:\n  OFCLASS('a, elementary_divisor_ring_class)\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  OFCLASS('a, elementary_divisor_ring_class)\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "have \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by (simp add: admits_diagonal necessity(1))"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "hence OFCLASS_Hermite: \"OFCLASS('a, Hermite_ring_class)\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class)", "by (intro_classes, simp)"], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "moreover"], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "have \"\\<forall>a b c::'a. ideal_generated {a, b, c} = ideal_generated {1} \n                  \\<longrightarrow> (\\<exists>p q. ideal_generated {p * a, p * b + q * c} = ideal_generated {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "using admits_diagonal necessity(2)"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by blast"], ["proof (state)\nthis:\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (2 subgoals):\n 1. OFCLASS('a, elementary_divisor_ring_class) \\<Longrightarrow>\n    OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n 2. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "ultimately"], ["proof (chain)\npicking this:\n  OFCLASS('a, Hermite_ring_class)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "show \"OFCLASS('a, Hermite_ring_class) &&& \n  \\<forall>a b c::'a. ideal_generated {a, b, c} = ideal_generated {1} \n  \\<longrightarrow> (\\<exists>p q. ideal_generated {p * a, p * b + q * c} = ideal_generated {1})\""], ["proof (prove)\nusing this:\n  OFCLASS('a, Hermite_ring_class)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by auto"], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class) &&&\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "assume 1: \"OFCLASS('a, Hermite_ring_class) &&&\n      \\<forall>a b c::'a. ideal_generated {a, b, c} = ideal_generated {1} \\<longrightarrow>\n        (\\<exists>p q. ideal_generated {p * a, p * b + q * c} = ideal_generated {1})\""], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class) &&&\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "have H: \"OFCLASS('a, Hermite_ring_class)\"\n      and 2: \"\\<forall>a b c::'a. ideal_generated {a, b, c} = ideal_generated {1} \\<longrightarrow>\n        (\\<exists>p q. ideal_generated {p * a, p * b + q * c} = ideal_generated {1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "using conjunctionD1[OF 1] conjunctionD2[OF 1]"], ["proof (prove)\nusing this:\n  OFCLASS('a, Hermite_ring_class)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by auto"], ["proof (state)\nthis:\n  OFCLASS('a, Hermite_ring_class)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "have \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using H"], ["proof (prove)\nusing this:\n  OFCLASS('a, Hermite_ring_class)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "unfolding OFCLASS_Hermite_ring_def"], ["proof (prove)\nusing this:\n  \\<And>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "hence a: \"\\<forall>A::'a mat. admits_diagonal_reduction A\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "using 2 sufficiency"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n  \\<lbrakk>\\<forall>A. admits_triangular_reduction A;\n   \\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} =\n          ideal_generated {1::'a})\\<rbrakk>\n  \\<Longrightarrow> \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by blast"], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. OFCLASS('a, Hermite_ring_class) &&&\n    \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a}) \\<Longrightarrow>\n    OFCLASS('a, elementary_divisor_ring_class)", "show \"OFCLASS('a, elementary_divisor_ring_class)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, elementary_divisor_ring_class)", "by (intro_classes, simp add: a)"], ["proof (state)\nthis:\n  OFCLASS('a, elementary_divisor_ring_class)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary edr_characterization_class:\n\"class.elementary_divisor_ring TYPE('a) \n  = (class.Hermite_ring TYPE('a) \n  \\<and> (\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n\\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1})))\" (is \"?lhs = (?H \\<and> ?D')\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a) =\n    (class.Hermite_ring TYPE('a) \\<and>\n     (\\<forall>a b c.\n         ideal_generated {a, b, c} =\n         ideal_generated {1::'a} \\<longrightarrow>\n         (\\<exists>p q.\n             ideal_generated {p * a, p * b + q * c} =\n             ideal_generated {1::'a})))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "assume 1: ?lhs"], ["proof (state)\nthis:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence admits_diagonal: \"\\<forall>A::'a mat. admits_diagonal_reduction A\""], ["proof (prove)\nusing this:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "."], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "have admits_triangular: \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using 1 necessity(1)"], ["proof (prove)\nusing this:\n  class.elementary_divisor_ring TYPE('a)\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by blast"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence \"?H\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a)", "unfolding class.Hermite_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  class.Hermite_ring TYPE('a)\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "moreover"], ["proof (state)\nthis:\n  class.Hermite_ring TYPE('a)\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "have \"?D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "using admits_diagonal necessity(2)"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by blast"], ["proof (state)\nthis:\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "ultimately"], ["proof (chain)\npicking this:\n  class.Hermite_ring TYPE('a)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "show \"(?H \\<and> ?D')\""], ["proof (prove)\nusing this:\n  class.Hermite_ring TYPE('a)\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))", "by simp"], ["proof (state)\nthis:\n  class.Hermite_ring TYPE('a) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "assume HD': \"(?H \\<and> ?D')\""], ["proof (state)\nthis:\n  class.Hermite_ring TYPE('a) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence admits_triangular: \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  class.Hermite_ring TYPE('a) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "unfolding class.Hermite_ring_def"], ["proof (prove)\nusing this:\n  (\\<forall>A. admits_triangular_reduction A) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence admits_diagonal: \"\\<forall>A::'a mat. admits_diagonal_reduction A\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "using edr_characterization HD'"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n  (\\<forall>A. admits_diagonal_reduction A) =\n  ((\\<forall>A. admits_triangular_reduction A) \\<and>\n   (\\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a})))\n  class.Hermite_ring TYPE('a) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by auto"], ["proof (state)\nthis:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "thus ?lhs"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a)", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_diagonal_reduction A", "by auto"], ["proof (state)\nthis:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary edr_iff_T_D':\n  shows \"class.elementary_divisor_ring TYPE('a) = (\n    (\\<forall>a b::'a. \\<exists> a1 b1 d. a = a1*d \\<and> b = b1*d \\<and> ideal_generated {a1,b1} = ideal_generated {1})\n  \\<and> (\\<forall>a b c::'a. ideal_generated{a,b,c} = ideal_generated{1} \n      \\<longrightarrow> (\\<exists>p q. ideal_generated {p*a,p*b+q*c} = ideal_generated {1}))\n  )\" (is \"?lhs = (?T \\<and> ?D')\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a) =\n    ((\\<forall>a b.\n         \\<exists>a1 b1 d.\n            a = a1 * d \\<and>\n            b = b1 * d \\<and>\n            ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n     (\\<forall>a b c.\n         ideal_generated {a, b, c} =\n         ideal_generated {1::'a} \\<longrightarrow>\n         (\\<exists>p q.\n             ideal_generated {p * a, p * b + q * c} =\n             ideal_generated {1::'a})))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "assume 1: ?lhs"], ["proof (state)\nthis:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence \"\\<forall>A::'a mat. admits_triangular_reduction A\""], ["proof (prove)\nusing this:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "unfolding class.elementary_divisor_ring_def"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using necessity(1)"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_diagonal_reduction A\n  \\<forall>A. admits_diagonal_reduction A \\<Longrightarrow>\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by blast"], ["proof (state)\nthis:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence \"?T\""], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "using theorem3_part2"], ["proof (prove)\nusing this:\n  \\<forall>A. admits_triangular_reduction A\n  All admits_triangular_reduction \\<Longrightarrow>\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and>\n        ideal_generated {a1, b1} = ideal_generated {1::?'a}\n\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       \\<exists>a1 b1 d.\n          a = a1 * d \\<and>\n          b = b1 * d \\<and>\n          ideal_generated {a1, b1} = ideal_generated {1::'a}", "by simp"], ["proof (state)\nthis:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "moreover"], ["proof (state)\nthis:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "have \"?D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "using 1"], ["proof (prove)\nusing this:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "unfolding edr_characterization_class"], ["proof (prove)\nusing this:\n  class.Hermite_ring TYPE('a) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "by auto"], ["proof (state)\nthis:\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (2 subgoals):\n 1. class.elementary_divisor_ring TYPE('a) \\<Longrightarrow>\n    (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))\n 2. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})", "show \"(?T \\<and> ?D')\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and> ideal_generated {a1, b1} = ideal_generated {1::'a}\n  \\<forall>a b c.\n     ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n     (\\<exists>p q.\n         ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a})\n\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a}))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "assume TD': \"(?T \\<and> ?D')\""], ["proof (state)\nthis:\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "hence \"class.Hermite_ring TYPE('a)\""], ["proof (prove)\nusing this:\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. class.Hermite_ring TYPE('a)", "unfolding class.Hermite_ring_def"], ["proof (prove)\nusing this:\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "using theorem3_part1 TD'"], ["proof (prove)\nusing this:\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n  \\<forall>a b.\n     \\<exists>a1 b1 d.\n        a = a1 * d \\<and>\n        b = b1 * d \\<and>\n        ideal_generated {a1, b1} =\n        ideal_generated {1::?'a} \\<Longrightarrow>\n  All admits_triangular_reduction\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. \\<forall>A. admits_triangular_reduction A", "by auto"], ["proof (state)\nthis:\n  class.Hermite_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        \\<exists>a1 b1 d.\n           a = a1 * d \\<and>\n           b = b1 * d \\<and>\n           ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n    (\\<forall>a b c.\n        ideal_generated {a, b, c} =\n        ideal_generated {1::'a} \\<longrightarrow>\n        (\\<exists>p q.\n            ideal_generated {p * a, p * b + q * c} =\n            ideal_generated {1::'a})) \\<Longrightarrow>\n    class.elementary_divisor_ring TYPE('a)", "thus ?lhs"], ["proof (prove)\nusing this:\n  class.Hermite_ring TYPE('a)\n\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a)", "using edr_characterization_class TD'"], ["proof (prove)\nusing this:\n  class.Hermite_ring TYPE('a)\n  class.elementary_divisor_ring TYPE('a) =\n  (class.Hermite_ring TYPE('a) \\<and>\n   (\\<forall>a b c.\n       ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n       (\\<exists>p q.\n           ideal_generated {p * a, p * b + q * c} =\n           ideal_generated {1::'a})))\n  (\\<forall>a b.\n      \\<exists>a1 b1 d.\n         a = a1 * d \\<and>\n         b = b1 * d \\<and>\n         ideal_generated {a1, b1} = ideal_generated {1::'a}) \\<and>\n  (\\<forall>a b c.\n      ideal_generated {a, b, c} = ideal_generated {1::'a} \\<longrightarrow>\n      (\\<exists>p q.\n          ideal_generated {p * a, p * b + q * c} = ideal_generated {1::'a}))\n\ngoal (1 subgoal):\n 1. class.elementary_divisor_ring TYPE('a)", "by auto"], ["proof (state)\nthis:\n  class.elementary_divisor_ring TYPE('a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}