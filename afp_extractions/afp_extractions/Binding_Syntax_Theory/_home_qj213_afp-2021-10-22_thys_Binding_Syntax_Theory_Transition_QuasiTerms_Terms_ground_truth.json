{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Transition_QuasiTerms_Terms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemma qSwap_qSwapInp:\n\"((qOp delta qinp qbinp) #[[x \\<and> y]]_xs) =\n qOp delta (qinp %[[x \\<and> y]]_xs) (qbinp %%[[x \\<and> y]]_xs)\"", "lemmas qSwapAll_simps = qSwap.simps(1) qSwap_qSwapInp", "lemma qPsubst_qPsubstInp:\n\"((qOp delta qinp qbinp) #[[rho]]) = qOp delta (qinp %[[rho]]) (qbinp %%[[rho]])\"", "lemmas qPsubstAll_simps = qPsubst.simps(1) qPsubst_qPsubstInp", "lemma qSkel_qSkelInp:\n\"qSkel (qOp delta qinp qbinp) =\n Branch (qSkelInp qinp) (qSkelBinp qbinp)\"", "lemmas qSkelAll_simps = qSkel.simps(1) qSkel_qSkelInp", "lemma qFresh_qFreshInp:\n\"qFresh xs x (qOp delta qinp qbinp) =\n (qFreshInp xs x qinp \\<and> qFreshBinp xs x qbinp)\"", "lemmas qFreshAll_simps = qFresh.simps(1) qFresh_qFreshInp", "lemma qGood_qGoodInp:\n\"qGood (qOp delta qinp qbinp) = (qGoodInp qinp \\<and> qGoodBinp qbinp)\"", "lemmas qGoodAll_simps = qGood.simps(1) qGood_qGoodInp", "lemma alpha_alphaInp:\n\"(qOp delta qinp qbinp #= qOp delta' qinp' qbinp') =\n (delta = delta' \\<and> qinp %= qinp' \\<and> qbinp %%= qbinp')\"", "lemmas alphaAll_Simps =\nalpha.simps(1) alpha_alphaInp\nalphaAbs.simps", "lemma alphaInp_refl:\n\"qGoodInp qinp \\<Longrightarrow> qinp %= qinp\"", "lemma alphaBinp_refl:\n\"qGoodBinp qbinp \\<Longrightarrow> qbinp %%= qbinp\"", "lemma alphaInp_sym:\nfixes qinp qinp' :: \"('index,('index,'bindex,'varSort,'var,'opSym)qTerm)input\"\nshows \"qinp %= qinp' \\<Longrightarrow> qinp' %= qinp\"", "lemma alphaBinp_sym:\nfixes qbinp qbinp' :: \"('bindex,('index,'bindex,'varSort,'var,'opSym)qAbs)input\"\nshows \"qbinp %%= qbinp' \\<Longrightarrow> qbinp' %%= qbinp\"", "lemma alphaInp_trans:\nassumes good: \"qGoodInp qinp\" and\n        alpha1: \"qinp %= qinp'\" and alpha2: \"qinp' %= qinp''\"\nshows \"qinp %= qinp''\"", "lemma alphaBinp_trans:\nassumes good: \"qGoodBinp qbinp\" and\n        alpha1: \"qbinp %%= qbinp'\" and alpha2: \"qbinp' %%= qbinp''\"\nshows \"qbinp %%= qbinp''\"", "lemma qSwapInp_preserves_qGoodInp:\nassumes \"qGoodInp qinp\"\nshows \"qGoodInp (qinp %[[x1 \\<and> x2]]_xs)\"", "lemma qSwapBinp_preserves_qGoodBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"qGoodBinp (qbinp %%[[x1 \\<and> x2]]_xs)\"", "lemma qSwapInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qinp %= qinp'\"\nshows \"(qinp %[[x1 \\<and> x2]]_xs) %= (qinp' %[[x1 \\<and> x2]]_xs)\"", "lemma qSwapBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qbinp %%= qbinp'\"\nshows \"(qbinp %%[[x1 \\<and> x2]]_xs) %%= (qbinp' %%[[x1 \\<and> x2]]_xs)\"", "lemma qPsubstInp_preserves_qGoodInp:\nassumes \"qGoodInp qinp\" and \"qGoodEnv qrho\"\nshows \"qGoodInp (qinp %[[qrho]])\"", "lemma qPsubstBinp_preserves_qGoodBinp:\nassumes \"qGoodBinp qbinp\" and \"qGoodEnv qrho\"\nshows \"qGoodBinp (qbinp %%[[qrho]])\"", "lemma qPsubstInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qGoodEnv qrho\" and \"qinp %= qinp'\"\nshows \"(qinp %[[qrho]]) %= (qinp' %[[qrho]])\"", "lemma qPsubstBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qGoodEnv qrho\" and \"qbinp %%= qbinp'\"\nshows \"(qbinp %%[[qrho]]) %%= (qbinp' %%[[qrho]])\"", "lemma qFreshInp_preserves_alphaInp_aux:\nassumes good: \"qGoodInp qinp \\<or> qGoodInp qinp'\" and alpha: \"qinp %= qinp'\"\nand fresh: \"qFreshInp xs x qinp\"\nshows \"qFreshInp xs x qinp'\"", "lemma qFreshBinp_preserves_alphaBinp_aux:\nassumes good: \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and alpha: \"qbinp %%= qbinp'\"\nand fresh: \"qFreshBinp xs x qbinp\"\nshows \"qFreshBinp xs x qbinp'\"", "lemma qFreshInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qinp %= qinp'\"\nshows \"qFreshInp xs x qinp \\<longleftrightarrow> qFreshInp xs x qinp'\"", "lemma qFreshBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qbinp %%= qbinp'\"\nshows \"qFreshBinp xs x qbinp \\<longleftrightarrow> qFreshBinp xs x qbinp'\"", "lemmas qItem_simps =\nqSkelAll_simps qFreshAll_simps qSwapAll_simps qPsubstAll_simps qGoodAll_simps alphaAll_Simps\nqSwap_qAFresh_otherSimps qAFresh.simps qGoodItem.simps", "lemma skelInp_def2:\nassumes \"goodInp inp\"\nshows \"skelInp inp = lift skel inp\"", "lemma skelBinp_def2:\nassumes \"goodBinp binp\"\nshows \"skelBinp binp = lift skelAbs binp\"", "lemmas swapEnv_defs = swapEnv_def comp_def swapEnvDom_def swapEnvIm_def", "lemmas swapped_Clauses = swapped.Refl swapped.Trans swapped.Swap", "theorem substInp_def2:\n\"substInp ys Y y = lift (subst ys Y y)\"", "theorem substBinp_def2:\n\"substBinp ys Y y = lift (substAbs ys Y y)\"", "theorem substEnv_def2:\n\"(rho &[Y / y]_ys) =\n (\\<lambda>xs x. case rho xs x of\n           None \\<Rightarrow> if (xs = ys \\<and> x = y) then Some Y else None\n          |Some X \\<Rightarrow> Some (X #[Y / y]_ys))\"", "lemma vsubstInp_def2:\n\"(inp %[y1 // y2]_ys) = lift (vsubst ys y1 y2) inp\"", "lemma vsubstBinp_def2:\n\"(binp %%[y1 // y2]_ys) = lift (vsubstAbs ys y1 y2) binp\"", "theorem vsubstEnv_def2:\n\"(rho &[y1 // y]_ys) =\n (\\<lambda>xs x. case rho xs x of\n           None \\<Rightarrow> if (xs = ys \\<and> x = y) then Some (Var ys y1) else None\n          |Some X \\<Rightarrow> Some (X #[y1 // y]_ys))\"", "lemma Par_preserves_good[simp]:\nassumes \"!! X. X \\<in> set XL \\<Longrightarrow> good X\"\nand \"!! A. A \\<in> set AL  \\<Longrightarrow> goodAbs A\"\nand \"!! rho. rho \\<in> set rhoL \\<Longrightarrow> goodEnv rho\"\nshows \"goodPar (Par xL XL AL rhoL)\"", "lemma termsOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"X : termsOf P\"\nshows \"good X\"", "lemma absOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"A : absOf P\"\nshows \"goodAbs A\"", "lemma envsOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"rho : envsOf P\"\nshows \"goodEnv rho\"", "lemmas param_simps =\ntermsOf.simps absOf.simps envsOf.simps\nPar_preserves_good\ntermsOf_preserves_good absOf_preserves_good envsOf_preserves_good", "lemma alphaGood_equivP: \"equivP qGood alphaGood\"", "lemma univ_asTerm_alphaGood[simp]:\nassumes *: \"congruentP alphaGood f\" and **: \"qGood X\"\nshows \"univ f (asTerm X) = f X\"", "lemma pick_inj_on_good: \"inj_on pick (Collect good)\"", "lemma pick_injective_good[simp]:\n\"\\<lbrakk>good X; good Y\\<rbrakk> \\<Longrightarrow> (pick X = pick Y) = (X = Y)\"", "lemma good_imp_qGood_pick:\n\"good X \\<Longrightarrow> qGood (pick X)\"", "lemma qGood_iff_good_asTerm:\n\"good (asTerm qX) = qGood qX\"", "lemma pick_asTerm:\nassumes \"qGood qX\"\nshows \"pick (asTerm qX) #= qX\"", "lemma asTerm_pick:\nassumes \"good X\"\nshows \"asTerm (pick X) = X\"", "lemma pick_alpha: \"good X \\<Longrightarrow> pick X #= pick X\"", "lemma alpha_imp_asTerm_equal:\nassumes \"qGood qX\" and \"qX #= qY\"\nshows \"asTerm qX = asTerm qY\"", "lemma asTerm_equal_imp_alpha:\nassumes \"qGood qX\" and \"asTerm qX = asTerm qY\"\nshows \"qX #= qY\"", "lemma asTerm_equal_iff_alpha:\nassumes \"qGood qX \\<or> qGood qY\"\nshows \"(asTerm qX = asTerm qY) = (qX #= qY)\"", "lemma pick_alpha_iff_equal:\nassumes \"good X\" and \"good Y\"\nshows \"pick X #= pick Y \\<longleftrightarrow> X = Y\"", "lemma pick_swap_qSwap:\nassumes \"good X\"\nshows \"pick (X #[x1 \\<and> x2]_xs) #= ((pick X) #[[x1 \\<and> x2]]_xs)\"", "lemma asTerm_qSwap_swap:\nassumes \"qGood qX\"\nshows \"asTerm (qX #[[x1 \\<and> x2]]_xs) = ((asTerm qX) #[x1 \\<and> x2]_xs)\"", "lemma fresh_asTerm_qFresh:\nassumes \"qGood qX\"\nshows \"fresh xs x (asTerm qX) = qFresh xs x qX\"", "lemma skel_asTerm_qSkel:\nassumes \"qGood qX\"\nshows \"skel (asTerm qX) = qSkel qX\"", "lemma double_swap_qSwap:\nassumes \"good X\"\nshows \"qGood (((pick X) #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs') \\<and>\n       ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = asTerm (((pick X) #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs')\"", "lemma fresh_swap_qFresh_qSwap:\nassumes \"good X\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = qFresh xs x ((pick X) #[[y1 \\<and> y2]]_ys)\"", "lemma alphaAbsGood_equivP: \"equivP qGoodAbs alphaAbsGood\"", "lemma univ_asAbs_alphaAbsGood[simp]:\nassumes \"fAbs respectsP alphaAbsGood\" and \"qGoodAbs A\"\nshows \"univ fAbs (asAbs A) = fAbs A\"", "lemma pick_inj_on_goodAbs: \"inj_on pick (Collect goodAbs)\"", "lemma pick_injective_goodAbs[simp]:\n\"\\<lbrakk>goodAbs A; goodAbs B\\<rbrakk> \\<Longrightarrow> pick A = pick B \\<longleftrightarrow> A = B\"", "lemma goodAbs_imp_qGoodAbs_pick:\n\"goodAbs A \\<Longrightarrow> qGoodAbs (pick A)\"", "lemma qGoodAbs_iff_goodAbs_asAbs:\n\"goodAbs(asAbs qA) = qGoodAbs qA\"", "lemma pick_asAbs:\nassumes \"qGoodAbs qA\"\nshows \"pick (asAbs qA) $= qA\"", "lemma asAbs_pick:\nassumes \"goodAbs A\"\nshows \"asAbs (pick A) = A\"", "lemma pick_alphaAbs: \"goodAbs A \\<Longrightarrow> pick A $= pick A\"", "lemma alphaAbs_imp_asAbs_equal:\nassumes \"qGoodAbs qA\" and \"qA $= qB\"\nshows \"asAbs qA = asAbs qB\"", "lemma asAbs_equal_imp_alphaAbs:\nassumes \"qGoodAbs qA\" and \"asAbs qA = asAbs qB\"\nshows \"qA $= qB\"", "lemma asAbs_equal_iff_alphaAbs:\nassumes \"qGoodAbs qA \\<or> qGoodAbs qB\"\nshows \"(asAbs qA = asAbs qB) = (qA $= qB)\"", "lemma pick_alphaAbs_iff_equal:\nassumes \"goodAbs A\" and \"goodAbs B\"\nshows \"(pick A $= pick B) = (A = B)\"", "lemma pick_swapAbs_qSwapAbs:\nassumes \"goodAbs A\"\nshows \"pick (A $[x1 \\<and> x2]_xs) $= ((pick A) $[[x1 \\<and> x2]]_xs)\"", "lemma asAbs_qSwapAbs_swapAbs:\nassumes \"qGoodAbs qA\"\nshows \"asAbs (qA $[[x1 \\<and> x2]]_xs) = ((asAbs qA) $[x1 \\<and> x2]_xs)\"", "lemma freshAbs_asAbs_qFreshAbs:\nassumes \"qGoodAbs qA\"\nshows \"freshAbs xs x (asAbs qA) = qFreshAbs xs x qA\"", "lemma skelAbs_asAbs_qSkelAbs:\nassumes \"qGoodAbs qA\"\nshows \"skelAbs (asAbs qA) = qSkelAbs qA\"", "lemma pickInp_inj_on_goodInp: \"inj_on pickInp (Collect goodInp)\"", "lemma goodInp_imp_qGoodInp_pickInp:\nassumes \"goodInp inp\"\nshows \"qGoodInp (pickInp inp)\"", "lemma qGoodInp_iff_goodInp_asInp:\n\"goodInp (asInp qinp) = qGoodInp qinp\"", "lemma pickInp_asInp:\nassumes \"qGoodInp qinp\"\nshows \"pickInp (asInp qinp) %= qinp\"", "lemma asInp_pickInp:\nassumes \"goodInp inp\"\nshows \"asInp (pickInp inp) = inp\"", "lemma pickInp_alphaInp:\nassumes goodInp: \"goodInp inp\"\nshows \"pickInp inp %= pickInp inp\"", "lemma alphaInp_imp_asInp_equal:\nassumes \"qGoodInp qinp\" and \"qinp %= qinp'\"\nshows \"asInp qinp = asInp qinp'\"", "lemma asInp_equal_imp_alphaInp:\nassumes \"qGoodInp qinp\" and \"asInp qinp = asInp qinp'\"\nshows \"qinp %= qinp'\"", "lemma asInp_equal_iff_alphaInp:\n\"qGoodInp qinp \\<Longrightarrow> (asInp qinp = asInp qinp') = (qinp %= qinp')\"", "lemma pickInp_alphaInp_iff_equal:\nassumes \"goodInp inp\" and \"goodInp inp'\"\nshows \"(pickInp inp %= pickInp inp') = (inp = inp')\"", "lemma pickInp_swapInp_qSwapInp:\nassumes \"goodInp inp\"\nshows \"pickInp (inp %[x1 \\<and> x2]_xs) %= ((pickInp inp) %[[x1 \\<and> x2]]_xs)\"", "lemma asInp_qSwapInp_swapInp:\nassumes \"qGoodInp qinp\"\nshows \"asInp (qinp %[[x1 \\<and> x2]]_xs) = ((asInp qinp) %[x1 \\<and> x2]_xs)\"", "lemma swapInp_def2:\n\"(inp %[x1 \\<and> x2]_xs) = asInp ((pickInp inp) %[[x1 \\<and> x2]]_xs)\"", "lemma freshInp_def2:\n\"freshInp xs x inp = qFreshInp xs x (pickInp inp)\"", "lemma pickBinp_inj_on_goodBinp: \"inj_on pickBinp (Collect goodBinp)\"", "lemma goodBinp_imp_qGoodBinp_pickBinp:\nassumes \"goodBinp binp\"\nshows \"qGoodBinp (pickBinp binp)\"", "lemma qGoodBinp_iff_goodBinp_asBinp:\n\"goodBinp (asBinp qbinp) = qGoodBinp qbinp\"", "lemma pickBinp_asBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"pickBinp (asBinp qbinp) %%= qbinp\"", "lemma asBinp_pickBinp:\nassumes \"goodBinp binp\"\nshows \"asBinp (pickBinp binp) = binp\"", "lemma pickBinp_alphaBinp:\nassumes goodBinp: \"goodBinp binp\"\nshows \"pickBinp binp %%= pickBinp binp\"", "lemma alphaBinp_imp_asBinp_equal:\nassumes \"qGoodBinp qbinp\" and \"qbinp %%= qbinp'\"\nshows \"asBinp qbinp = asBinp qbinp'\"", "lemma asBinp_equal_imp_alphaBinp:\nassumes \"qGoodBinp qbinp\" and \"asBinp qbinp = asBinp qbinp'\"\nshows \"qbinp %%= qbinp'\"", "lemma asBinp_equal_iff_alphaBinp:\n\"qGoodBinp qbinp \\<Longrightarrow> (asBinp qbinp = asBinp qbinp') = (qbinp %%= qbinp')\"", "lemma pickBinp_alphaBinp_iff_equal:\nassumes \"goodBinp binp\" and \"goodBinp binp'\"\nshows \"(pickBinp binp %%= pickBinp binp') = (binp = binp')\"", "lemma pickBinp_swapBinp_qSwapBinp:\nassumes \"goodBinp binp\"\nshows \"pickBinp (binp %%[x1 \\<and> x2]_xs) %%= ((pickBinp binp) %%[[x1 \\<and> x2]]_xs)\"", "lemma asBinp_qSwapBinp_swapBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"asBinp (qbinp %%[[x1 \\<and> x2]]_xs) = ((asBinp qbinp) %%[x1 \\<and> x2]_xs)\"", "lemma swapBinp_def2:\n\"(binp %%[x1 \\<and> x2]_xs) = asBinp ((pickBinp binp) %%[[x1 \\<and> x2]]_xs)\"", "lemma freshBinp_def2:\n\"freshBinp xs x binp = qFreshBinp xs x (pickBinp binp)\"", "lemma goodEnv_imp_qGoodEnv_pickE:\nassumes \"goodEnv rho\"\nshows \"qGoodEnv (pickE rho)\"", "lemma qGoodEnv_iff_goodEnv_asEnv:\n\"goodEnv (asEnv qrho) = qGoodEnv qrho\"", "lemma pickE_asEnv:\nassumes \"qGoodEnv qrho\"\nshows \"pickE (asEnv qrho) &= qrho\"", "lemma asEnv_pickE:\nassumes \"goodEnv rho\"  shows \"asEnv (pickE rho) xs x = rho xs x\"", "lemma pickE_alphaEnv:\nassumes goodEnv: \"goodEnv rho\"  shows \"pickE rho &= pickE rho\"", "lemma alphaEnv_imp_asEnv_equal:\nassumes \"qGoodEnv qrho\" and \"qrho &= qrho'\"\nshows \"asEnv qrho = asEnv qrho'\"", "lemma asEnv_equal_imp_alphaEnv:\nassumes \"qGoodEnv qrho\" and \"asEnv qrho = asEnv qrho'\"\nshows \"qrho &= qrho'\"", "lemma asEnv_equal_iff_alphaEnv:\n\"qGoodEnv qrho \\<Longrightarrow> (asEnv qrho = asEnv qrho') = (qrho &= qrho')\"", "lemma pickE_alphaEnv_iff_equal:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"(pickE rho &= pickE rho') = (rho = rho')\"", "lemma freshEnv_def2:\n\"freshEnv xs x rho = qFreshEnv xs x (pickE rho)\"", "lemma pick_psubst_qPsubst:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"pick (X #[rho]) #= ((pick X) #[[pickE rho]])\"", "lemma pick_psubstAbs_qPsubstAbs:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"pick (A $[rho]) $= ((pick A) $[[pickE rho]])\"", "lemma pickInp_psubstInp_qPsubstInp:\nassumes good: \"goodInp inp\" and good_rho: \"goodEnv rho\"\nshows \"pickInp (inp %[rho]) %= ((pickInp inp) %[[pickE rho]])\"", "lemma pickBinp_psubstBinp_qPsubstBinp:\nassumes good: \"goodBinp binp\" and good_rho: \"goodEnv rho\"\nshows \"pickBinp (binp %%[rho]) %%= ((pickBinp binp) %%[[pickE rho]])\"", "lemma pick_Var_qVar:\n\"pick (Var xs x) #= qVar xs x\"", "lemma Op_asInp_asTerm_qOp:\nassumes \"qGoodInp qinp\" and \"qGoodBinp qbinp\"\nshows \"Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)\"", "lemma qOp_pickInp_pick_Op:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"qOp delta (pickInp inp) (pickBinp binp) #= pick (Op delta inp binp)\"", "lemma Abs_asTerm_asAbs_qAbs:\nassumes \"qGood qX\"\nshows \"Abs xs x (asTerm qX) = asAbs (qAbs xs x qX)\"", "lemma qAbs_pick_Abs:\nassumes \"good X\"\nshows \"qAbs xs x (pick X) $= pick (Abs xs x X)\"", "lemmas qItem_versus_item_simps =\nuniv_asTerm_alphaGood univ_asAbs_alphaAbsGood\nuniv_asTerm_alpha univ_asAbs_alphaAbs\npick_injective_good pick_injective_goodAbs", "lemma Var_preserves_good[simp]:\n\"good(Var xs x::('index,'bindex,'varSort,'var,'opSym)term)\"", "lemma Op_preserves_good[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"good(Op delta inp binp)\"", "lemma Abs_preserves_good[simp]:\nassumes good: \"good X\"\nshows \"goodAbs(Abs xs x X)\"", "lemmas Cons_preserve_good =\nVar_preserves_good Op_preserves_good Abs_preserves_good", "lemma swap_preserves_good[simp]:\nassumes \"good X\"\nshows \"good (X #[x \\<and> y]_xs)\"", "lemma swapAbs_preserves_good[simp]:\nassumes \"goodAbs A\"\nshows \"goodAbs (A $[x \\<and> y]_xs)\"", "lemma swapInp_preserves_good[simp]:\nassumes \"goodInp inp\"\nshows \"goodInp (inp %[x \\<and> y]_xs)\"", "lemma swapBinp_preserves_good[simp]:\nassumes \"goodBinp binp\"\nshows \"goodBinp (binp %%[x \\<and> y]_xs)\"", "lemma swapEnvDom_preserves_good:\nassumes \"goodEnv rho\"\nshows \"goodEnv (swapEnvDom xs x y rho)\" (is \"goodEnv ?rho'\")", "lemma swapEnvIm_preserves_good:\nassumes \"goodEnv rho\"\nshows \"goodEnv (swapEnvIm xs x y rho)\"", "lemma swapEnv_preserves_good[simp]:\nassumes \"goodEnv rho\"\nshows \"goodEnv (rho &[x \\<and> y]_xs)\"", "lemmas swapAll_preserve_good =\nswap_preserves_good swapAbs_preserves_good\nswapInp_preserves_good swapBinp_preserves_good\nswapEnv_preserves_good", "lemma psubst_preserves_good[simp]:\nassumes  \"goodEnv rho\" and \"good X\"\nshows \"good (X #[rho])\"", "lemma psubstAbs_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and goodAbs_A: \"goodAbs A\"\nshows \"goodAbs (A $[rho])\"", "lemma psubstInp_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and good: \"goodInp inp\"\nshows \"goodInp (inp %[rho])\"", "lemma psubstBinp_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and good: \"goodBinp binp\"\nshows \"goodBinp (binp %%[rho])\"", "lemma psubstEnv_preserves_good[simp]:\nassumes good: \"goodEnv rho\" and good': \"goodEnv rho'\"\nshows \"goodEnv (rho &[rho'])\"", "lemmas psubstAll_preserve_good =\npsubst_preserves_good psubstAbs_preserves_good\npsubstInp_preserves_good psubstBinp_preserves_good\npsubstEnv_preserves_good", "lemma idEnv_preserves_good[simp]: \"goodEnv idEnv\"", "lemma updEnv_preserves_good[simp]:\nassumes good_X: \"good X\" and good_rho: \"goodEnv rho\"\nshows \"goodEnv (rho [x \\<leftarrow> X]_xs)\"", "lemma getEnv_preserves_good[simp]:\nassumes \"goodEnv rho\" and \"rho xs x = Some X\"\nshows \"good X\"", "lemmas envOps_preserve_good =\nidEnv_preserves_good updEnv_preserves_good\ngetEnv_preserves_good", "lemma subst_preserves_good[simp]:\nassumes \"good X\" and \"good Y\"\nshows \"good (Y #[X / x]_xs)\"", "lemma substAbs_preserves_good[simp]:\nassumes \"good X\" and \"goodAbs A\"\nshows \"goodAbs (A $[X / x]_xs)\"", "lemma substInp_preserves_good[simp]:\nassumes \"good X\" and \"goodInp inp\"\nshows \"goodInp (inp %[X / x]_xs)\"", "lemma substBinp_preserves_good[simp]:\nassumes \"good X\" and \"goodBinp binp\"\nshows \"goodBinp (binp %%[X / x]_xs)\"", "lemma substEnv_preserves_good[simp]:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"goodEnv (rho &[X / x]_xs)\"", "lemmas substAll_preserve_good =\nsubst_preserves_good substAbs_preserves_good\nsubstInp_preserves_good substBinp_preserves_good\nsubstEnv_preserves_good", "lemma vsubst_preserves_good[simp]:\nassumes \"good Y\"\nshows \"good (Y #[x1 // x]_xs)\"", "lemma vsubstAbs_preserves_good[simp]:\nassumes \"goodAbs A\"\nshows \"goodAbs (A $[x1 // x]_xs)\"", "lemma vsubstInp_preserves_good[simp]:\nassumes \"goodInp inp\"\nshows \"goodInp (inp %[x1 // x]_xs)\"", "lemma vsubstBinp_preserves_good[simp]:\nassumes \"goodBinp binp\"\nshows \"goodBinp (binp %%[x1 // x]_xs)\"", "lemma vsubstEnv_preserves_good[simp]:\nassumes \"goodEnv rho\"\nshows \"goodEnv (rho &[x1 // x]_xs)\"", "lemmas vsubstAll_preserve_good =\nvsubst_preserves_good vsubstAbs_preserves_good\nvsubstInp_preserves_good vsubstBinp_preserves_good\nvsubstEnv_preserves_good", "lemmas all_preserve_good =\nCons_preserve_good\nswapAll_preserve_good\npsubstAll_preserve_good\nenvOps_preserve_good\nsubstAll_preserve_good\nvsubstAll_preserve_good", "theorem Var_inj[simp]:\n\"(((Var xs x)::('index,'bindex,'varSort,'var,'opSym)term) = Var ys y) =\n (xs = ys \\<and> x = y)\"", "lemma Op_inj[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nand \"goodInp inp'\" and \"goodBinp binp'\"\nshows\n\"(Op delta inp binp = Op delta' inp' binp') =\n (delta = delta' \\<and> inp = inp' \\<and> binp = binp')\"", "lemma Abs_ainj_all:\nassumes good: \"good X\" and good': \"good X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\"", "lemma Abs_ainj_ex:\nassumes good: \"good X\" and good': \"good X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\"", "lemma Abs_cong[fundef_cong]:\nassumes good: \"good X\" and good': \"good X'\"\nand y: \"fresh xs y X\" and y': \"fresh xs y X'\"\nand eq: \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\"", "lemma Abs_swap_fresh:\nassumes good_X: \"good X\" and fresh: \"fresh xs x' X\"\nshows \"Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)\"", "lemma Var_diff_Op[simp]:\n\"Var xs x \\<noteq> Op delta inp binp\"", "lemma Op_diff_Var[simp]:\n\"Op delta inp binp \\<noteq> Var xs x\"", "theorem term_nchotomy:\nassumes \"good X\"\nshows\n\"(\\<exists> xs x. X = Var xs x) \\<or>\n (\\<exists> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\"", "theorem abs_nchotomy:\nassumes \"goodAbs A\"\nshows \"\\<exists> xs x X. good X \\<and> A = Abs xs x X\"", "lemmas good_freeCons =\nOp_inj Var_diff_Op Op_diff_Var", "theorem swap_Var_simp[simp]:\n\"((Var xs x) #[y1 \\<and> y2]_ys) = Var xs (x @xs[y1 \\<and> y2]_ys)\"", "lemma swap_Op_simp[simp]:\nassumes \"goodInp inp\"  \"goodBinp binp\"\nshows \"((Op delta inp binp) #[x1 \\<and> x2]_xs) =\n       Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)\"", "lemma swapAbs_simp[simp]:\nassumes \"good X\"\nshows \"((Abs xs x X) $[y1 \\<and> y2]_ys) = Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)\"", "lemmas good_swapAll_simps =\nswap_Op_simp swapAbs_simp", "theorem fresh_Var_simp[simp]:\n\"fresh ys y (Var xs x :: ('index,'bindex,'varSort,'var,'opSym)term) \\<longleftrightarrow>\n (ys \\<noteq> xs \\<or> y \\<noteq> x)\"", "lemma fresh_Op_simp[simp]:\nassumes \"goodInp inp\" \"goodBinp binp\"\nshows\n\"fresh xs x (Op delta inp binp) \\<longleftrightarrow>\n (freshInp xs x inp \\<and> freshBinp xs x binp)\"", "lemma freshAbs_simp[simp]:\nassumes \"good X\"\nshows \"freshAbs ys y (Abs xs x X) \\<longleftrightarrow> (ys = xs \\<and> y = x \\<or> fresh ys y X)\"", "lemmas good_freshAll_simps =\nfresh_Op_simp freshAbs_simp", "theorem skel_Var_simp[simp]:\n\"skel (Var xs x) = Branch Map.empty Map.empty\"", "lemma skel_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)\"", "lemma skelAbs_simp[simp]:\nassumes \"good X\"\nshows \"skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty\"", "lemmas good_skelAll_simps =\nskel_Op_simp skelAbs_simp", "lemma psubst_Var:\nassumes \"goodEnv rho\"\nshows \"((Var xs x) #[rho]) =\n        (case rho xs x of None \\<Rightarrow> Var xs x\n                         |Some X \\<Rightarrow> X)\"", "lemma psubst_Op_simp[simp]:\nassumes good_inp: \"goodInp inp\"  \"goodBinp binp\"\nand good_rho: \"goodEnv rho\"\nshows\n\"((Op delta inp binp) #[rho]) = Op delta (inp %[rho]) (binp %%[rho])\"", "lemma psubstAbs_simp[simp]:\nassumes good_X: \"good X\" and good_rho: \"goodEnv rho\" and\n        x_fresh_rho: \"freshEnv xs x rho\"\nshows \"((Abs xs x X) $[rho]) = Abs xs x (X #[rho])\"", "lemmas good_psubstAll_simps =\npsubst_Var_simp1 psubst_Var_simp2\npsubst_Op_simp psubstAbs_simp", "theorem getEnv_idEnv[simp]: \"idEnv xs x = None\"", "lemma getEnv_updEnv[simp]:\n\"(rho [x \\<leftarrow> X]_xs) ys y = (if ys = xs \\<and> y = x then Some X else rho ys y)\"", "theorem getEnv_updEnv1:\n\"ys \\<noteq> xs \\<or> y \\<noteq> x \\<Longrightarrow> (rho [x \\<leftarrow> X]_xs) ys y = rho ys y\"", "theorem getEnv_updEnv2:\n\"(rho [x \\<leftarrow> X]_xs) xs x = Some X\"", "lemma subst_Var_simp1[simp]:\nassumes \"good Y\"\nand \"ys \\<noteq> xs \\<or> y \\<noteq> x\"\nshows \"((Var xs x) #[Y / y]_ys) = Var xs x\"", "lemma subst_Var_simp2[simp]:\nassumes \"good Y\"\nshows \"((Var xs x) #[Y / x]_xs) = Y\"", "lemma subst_Op_simp[simp]:\nassumes \"good Y\"\nand \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"((Op delta inp binp) #[Y / y]_ys) =\n Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)\"", "lemma substAbs_simp[simp]:\nassumes good: \"good Y\" and good_X: \"good X\" and\n        x_dif_y: \"xs \\<noteq> ys \\<or> x \\<noteq> y\" and x_fresh: \"fresh xs x Y\"\nshows \"((Abs xs x X) $[Y / y]_ys) = Abs xs x (X #[Y / y]_ys)\"", "lemmas good_substAll_simps =\nsubst_Var_simp1 subst_Var_simp2\nsubst_Op_simp substAbs_simp", "theorem vsubst_Var_simp[simp]:\n\"((Var xs x) #[y1 // y]_ys) = Var xs (x @xs[y1 / y]_ys)\"", "lemma vsubst_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"((Op delta inp binp) #[y1 // y]_ys) =\n Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)\"", "lemma vsubstAbs_simp[simp]:\nassumes \"good X\" and\n        \"xs \\<noteq> ys \\<or> x \\<notin> {y,y1}\"\nshows \"((Abs xs x X) $[y1 // y]_ys) = Abs xs x (X #[y1 // y]_ys)\"", "lemmas good_vsubstAll_simps =\nvsubst_Op_simp vsubstAbs_simp", "lemmas good_allOpers_simps =\ngood_swapAll_simps\ngood_freshAll_simps\ngood_skelAll_simps\ngood_psubstAll_simps\ngood_substAll_simps\ngood_vsubstAll_simps", "lemma single_non_fresh_ordLess_var:\n\"good X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV :: 'var set|\"", "lemma single_non_freshAbs_ordLess_var:\n\"goodAbs A \\<Longrightarrow> |{x. \\<not> freshAbs xs x A}| <o |UNIV :: 'var set|\"", "lemma obtain_fresh1:\nfixes XS::\"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\" and rho\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\" and XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\" and\n        good: \"\\<forall> X \\<in> XS. good X\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\" and RhoGood: \"\\<forall> rho \\<in> Rho. goodEnv rho\"\nshows\n\"\\<exists> z. z \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. fresh xs z X) \\<and>\n (\\<forall> rho \\<in> Rho. freshEnv xs z rho)\"", "lemma obtain_fresh:\nfixes V::\"'var set\" and\n      XS::\"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      AS::\"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\" and\n        XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\" and\n        ASvar: \"|AS| <o |UNIV :: 'var set| \\<or> finite AS\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\" and\n        good: \"\\<forall> X \\<in> XS. good X\" and\n        ASGood: \"\\<forall> A \\<in> AS. goodAbs A\" and\n        RhoGood: \"\\<forall> rho \\<in> Rho. goodEnv rho\"\nshows\n\"\\<exists> z. z \\<notin> V \\<and>\n     (\\<forall> X \\<in> XS. fresh xs z X) \\<and>\n     (\\<forall> A \\<in> AS. freshAbs xs z A) \\<and>\n     (\\<forall> rho \\<in> Rho. freshEnv xs z rho)\"", "lemma swap_ident[simp]:\nassumes \"good X\"\nshows \"(X #[x \\<and> x]_xs) = X\"", "lemma swap_compose:\nassumes good_X: \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') =\n       ((X #[x' \\<and> y']_zs') #[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\"", "lemma swap_commute:\n\"\\<lbrakk>good X; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = ((X #[x' \\<and> y']_zs') #[x \\<and> y]_zs)\"", "lemma swap_involutive[simp]:\nassumes good_X: \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[x \\<and> y]_zs) = X\"", "theorem swap_sym: \"(X #[x \\<and> y]_zs) = (X #[y \\<and> x]_zs)\"", "lemma swap_involutive2[simp]:\nassumes \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[y \\<and> x]_zs) = X\"", "lemma swap_preserves_fresh[simp]:\nassumes \"good X\"\nshows \"fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X\"", "lemma swap_preserves_fresh_distinct:\nassumes \"good X\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X\"", "lemma fresh_swap_exchange1:\nassumes \"good X\"\nshows \"fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X\"", "lemma fresh_swap_exchange2:\nassumes \"good X\" and \"{x1,x2} \\<subseteq> var xs\"\nshows \"fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X\"", "lemma fresh_swap_id[simp]:\nassumes \"good X\" and \"fresh xs x1 X\" \"fresh xs x2 X\"\nshows \"(X #[x1 \\<and> x2]_xs) = X\"", "lemma freshAbs_swapAbs_id[simp]:\nassumes \"goodAbs A\" \"freshAbs xs x1 A\"  \"freshAbs xs x2 A\"\nshows \"(A $[x1 \\<and> x2]_xs) = A\"", "lemma fresh_swap_compose:\nassumes \"good X\" \"fresh xs y X\" \"fresh xs z X\"\nshows \"((X #[y \\<and> x]_xs) #[z \\<and> y]_xs) = (X #[z \\<and> x]_xs)\"", "lemma skel_swap:\nassumes \"good X\"\nshows \"skel (X #[x1 \\<and> x2]_xs) = skel X\"", "lemma swapEnv_ident[simp]:\nassumes \"goodEnv rho\"\nshows \"(rho &[x \\<and> x]_xs) = rho\"", "lemma swapEnv_compose:\nassumes good: \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') =\n       ((rho &[x' \\<and> y']_zs') &[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\"", "lemma swapEnv_commute:\n\"\\<lbrakk>goodEnv rho; {x,y} \\<subseteq> var zs; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') = ((rho &[x' \\<and> y']_zs') &[x \\<and> y]_zs)\"", "lemma swapEnv_involutive[simp]:\nassumes \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x \\<and> y]_zs) = rho\"", "theorem swapEnv_sym: \"(rho &[x \\<and> y]_zs) = (rho &[y \\<and> x]_zs)\"", "lemma swapEnv_involutive2[simp]:\nassumes good: \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[y \\<and> x]_zs) = rho\"", "lemma swapEnv_preserves_freshEnv[simp]:\nassumes good: \"goodEnv rho\"\nshows \"freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\"", "lemma swapEnv_preserves_freshEnv_distinct:\nassumes \"goodEnv rho\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\"", "lemma freshEnv_swapEnv_exchange1:\nassumes \"goodEnv rho\"\nshows \"freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho\"", "lemma freshEnv_swapEnv_exchange2:\nassumes \"goodEnv rho\"\nshows \"freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho\"", "lemma freshEnv_swapEnv_id[simp]:\nassumes good: \"goodEnv rho\" and\n        fresh: \"freshEnv xs x1 rho\"  \"freshEnv xs x2 rho\"\nshows \"(rho &[x1 \\<and> x2]_xs) = rho\"", "lemma freshEnv_swapEnv_compose:\nassumes good: \"goodEnv rho\" and\n        fresh: \"freshEnv xs y rho\"  \"freshEnv xs z rho\"\nshows \"((rho &[y \\<and> x]_xs) &[z \\<and> y]_xs) = (rho &[z \\<and> x]_xs)\"", "lemmas good_swapAll_freshAll_otherSimps =\nswap_ident swap_involutive swap_involutive2 swap_preserves_fresh fresh_swap_id\nfreshAbs_swapAbs_id\nswapEnv_ident swapEnv_involutive swapEnv_involutive2 swapEnv_preserves_freshEnv freshEnv_swapEnv_id", "theorem swap_swapped: \"(X, X #[x \\<and> y]_zs) \\<in> swapped\"", "lemma swapped_preserves_good:\nassumes \"good X\" and \"(X,Y) \\<in> swapped\"\nshows \"good Y\"", "lemma swapped_skel:\nassumes \"good X\" and \"(X,Y) \\<in> swapped\"\nshows \"skel Y = skel X\"", "lemma obtain_rep:\nassumes GOOD: \"good X\" and FRESH: \"fresh xs x' X\"\nshows \"\\<exists> X'. (X,X') \\<in> swapped \\<and> good X' \\<and> Abs xs x X = Abs xs x' X'\"", "lemma term_templateInduct[case_names rel Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs rel\nassumes\nrel: \"\\<And> X Y. \\<lbrakk>good X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> good Y \\<and> skel Y = skel X\" and\nvar: \"\\<And> xs x. phi (Var xs x)\" and\nop: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nabs: \"\\<And> xs x X. \\<lbrakk>good X; \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n                \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\"", "lemma term_rawInduct[case_names Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>good X; phi X\\<rbrakk> \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\"", "lemma term_induct[case_names Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>good X;\n                 \\<And> Y. (X,Y) \\<in> swapped \\<Longrightarrow> phi Y;\n                 \\<And> Y. \\<lbrakk>good Y; skel Y = skel X\\<rbrakk> \\<Longrightarrow> phi Y\\<rbrakk>\n                \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\"", "lemma term_fresh_forall_induct[case_names PAR Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and A::\"('index,'bindex,'varSort,'var,'opSym)abs\" \nand phi and phiAbs and varsOf :: \"'param \\<Rightarrow> 'varSort \\<Rightarrow> 'var set\" \nassumes\nPAR: \"\\<And> p xs. ( |varsOf xs p| <o |UNIV::'var set| )\" and\nvar: \"\\<And> xs x p. phi (Var xs x) p\" and\nop: \"\\<And> delta inp binp p.  \n   \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV::'var set|; |{i. binp i \\<noteq> None}| <o |UNIV::'var set|;\n    liftAll (\\<lambda> X. good X \\<and> (\\<forall> q. phi X p)) inp; liftAll (\\<lambda> A. goodAbs A \\<and> (\\<forall> q. phiAbs A p)) binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp) p\" and\nabs: \"\\<And> xs x X p. \\<lbrakk>good X; x \\<notin> varsOf p xs; phi X p\\<rbrakk> \\<Longrightarrow> phiAbs (Abs xs x X) p\"\nshows \"(good X \\<longrightarrow> (\\<forall> p. phi X p)) \\<and> (goodAbs A \\<longrightarrow> (\\<forall> p. phiAbs A p))\"", "lemma term_templateInduct_fresh[case_names PAR Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      rel and phi and phiAbs and\n      vars :: \"'varSort \\<Rightarrow> 'var set\" and\n      terms :: \"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      abs :: \"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms| <o |UNIV :: 'var set| \\<or> finite terms) \\<and> (\\<forall> X \\<in> terms. good X) \\<and>\n   ( |abs| <o |UNIV :: 'var set| \\<or> finite abs) \\<and> (\\<forall> A \\<in> abs. goodAbs A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite envs) \\<and> (\\<forall> rho \\<in> envs. goodEnv rho)\" and\nrel: \"\\<And> X Y. \\<lbrakk>good X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> good Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nabs:\n\"\\<And> xs x X.\n  \\<lbrakk>good X;\n   x \\<notin> vars xs;\n   \\<And> Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n   \\<And> A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n   \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n   \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\"", "lemma term_rawInduct_fresh[case_names Par Var Op Obs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      vars :: \"'varSort \\<Rightarrow> 'var set\" and\n      terms :: \"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      abs :: \"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms| <o |UNIV :: 'var set| \\<or> finite terms) \\<and> (\\<forall> X \\<in> terms. good X) \\<and>\n   ( |abs| <o |UNIV :: 'var set| \\<or> finite abs) \\<and> (\\<forall> A \\<in> abs. goodAbs A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite envs) \\<and> (\\<forall> rho \\<in> envs. goodEnv rho)\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs:\n\"\\<And> xs x X.\n  \\<lbrakk>good X;\n   x \\<notin> vars xs;\n   \\<And> Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n   \\<And> A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n   \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n   phi X\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\"", "lemma term_induct_fresh[case_names Par Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P :: \"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes\ngoodP: \"goodPar P\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs:\n\"\\<And> xs x X.\n   \\<lbrakk>good X;\n    x \\<notin> varsOf P;\n    \\<And> Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n    \\<And> A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n    phi X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\""], "translations": [["", "lemma qSwap_qSwapInp:\n\"((qOp delta qinp qbinp) #[[x \\<and> y]]_xs) =\n qOp delta (qinp %[[x \\<and> y]]_xs) (qbinp %%[[x \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta qinp qbinp #[[x \\<and> y]]_xs =\n    qOp delta (qSwapInp xs x y qinp) (qSwapBinp xs x y qbinp)", "unfolding qSwapInp_def qSwapBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta qinp qbinp #[[x \\<and> y]]_xs =\n    qOp delta (lift (qSwap xs x y) qinp) (lift (qSwapAbs xs x y) qbinp)", "by simp"], ["", "(* For the qOp case, qSwap shall henceforth simplify to qSwapInp:  *)"], ["", "declare qSwap.simps(2) [simp del]"], ["", "declare qSwap_qSwapInp[simp]"], ["", "(* and qSwap_simps and qSwapAll_simps, rather than qSwap.simps and qSwapAll.simps,\n   shall refer to the simplification rules for qSwap *)"], ["", "lemmas qSwapAll_simps = qSwap.simps(1) qSwap_qSwapInp"], ["", "definition qPsubstInp where\n\"qPsubstInp qrho qinp == lift (qPsubst qrho) qinp\""], ["", "definition qPsubstBinp where\n\"qPsubstBinp qrho qbinp == lift (qPsubstAbs qrho) qbinp\""], ["", "abbreviation qPsubstInp_abbrev (\"_ %[[_]]\" 200)\nwhere \"(qinp %[[qrho]]) == qPsubstInp qrho qinp\""], ["", "abbreviation qPsubstBinp_abbrev (\"_ %%[[_]]\" 200)\nwhere \"(qbinp %%[[qrho]]) == qPsubstBinp qrho qbinp\""], ["", "lemma qPsubst_qPsubstInp:\n\"((qOp delta qinp qbinp) #[[rho]]) = qOp delta (qinp %[[rho]]) (qbinp %%[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta qinp qbinp #[[rho]] =\n    qOp delta (qinp %[[rho]]) (qbinp %%[[rho]])", "unfolding qPsubstInp_def qPsubstBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta qinp qbinp #[[rho]] =\n    qOp delta (lift (qPsubst rho) qinp) (lift (qPsubstAbs rho) qbinp)", "by simp"], ["", "(* For the qOp case, qPsubst shall henceforth simplify to qPsubstInp:  *)"], ["", "declare qPsubst.simps(2) [simp del]"], ["", "declare qPsubst_qPsubstInp[simp]"], ["", "(* and qPsubst_simps and qPsubstAll_simps, rather than qPsubst.simps and qPsubstAll.simps,\n   shall refer to the simplification rules for qPsubst *)"], ["", "lemmas qPsubstAll_simps = qPsubst.simps(1) qPsubst_qPsubstInp"], ["", "definition qSkelInp\nwhere \"qSkelInp qinp = lift qSkel qinp\""], ["", "definition qSkelBinp\nwhere \"qSkelBinp qbinp = lift qSkelAbs qbinp\""], ["", "lemma qSkel_qSkelInp:\n\"qSkel (qOp delta qinp qbinp) =\n Branch (qSkelInp qinp) (qSkelBinp qbinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkel (qOp delta qinp qbinp) = Branch (qSkelInp qinp) (qSkelBinp qbinp)", "unfolding qSkelInp_def qSkelBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkel (qOp delta qinp qbinp) =\n    Branch (lift qSkel qinp) (lift qSkelAbs qbinp)", "by simp"], ["", "(* For the qOp case, qSkel shall henceforth simplify to qSkelInp:  *)"], ["", "declare qSkel.simps(2) [simp del]"], ["", "declare qSkel_qSkelInp[simp]"], ["", "(* and qSkel_simps and qSkelAll_simps, rather than qSkel.simps and qSkelAll.simps,\n   shall refer to the simplification rules for qSkel *)"], ["", "lemmas qSkelAll_simps = qSkel.simps(1) qSkel_qSkelInp"], ["", "definition qFreshInp ::\n\"'varSort \\<Rightarrow> 'var \\<Rightarrow> ('index,('index,'bindex,'varSort,'var,'opSym)qTerm)input \\<Rightarrow> bool\"\nwhere\n\"qFreshInp xs x qinp == liftAll (qFresh xs x) qinp\""], ["", "definition qFreshBinp ::\n\"'varSort \\<Rightarrow> 'var \\<Rightarrow> ('bindex,('index,'bindex,'varSort,'var,'opSym)qAbs)input \\<Rightarrow> bool\"\nwhere\n\"qFreshBinp xs x qbinp == liftAll (qFreshAbs xs x) qbinp\""], ["", "lemma qFresh_qFreshInp:\n\"qFresh xs x (qOp delta qinp qbinp) =\n (qFreshInp xs x qinp \\<and> qFreshBinp xs x qbinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x (qOp delta qinp qbinp) =\n    (qFreshInp xs x qinp \\<and> qFreshBinp xs x qbinp)", "unfolding qFreshInp_def qFreshBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x (qOp delta qinp qbinp) =\n    (liftAll (qFresh xs x) qinp \\<and> liftAll (qFreshAbs xs x) qbinp)", "by simp"], ["", "(* For the qOp case, qFresh shall henceforth simplify to qFreshInp:  *)"], ["", "declare qFresh.simps(2) [simp del]"], ["", "declare qFresh_qFreshInp[simp]"], ["", "(* and qFresh_simps and qFreshAll_simps, rather than qFresh.simps and qFreshAll.simps,\n   shall refer to the simplification rules for qFresh *)"], ["", "lemmas qFreshAll_simps = qFresh.simps(1) qFresh_qFreshInp"], ["", "definition qGoodInp where\n\"qGoodInp qinp ==\n liftAll qGood qinp \\<and>\n |{i. qinp i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["", "definition qGoodBinp where\n\"qGoodBinp qbinp ==\n liftAll qGoodAbs qbinp \\<and>\n |{i. qbinp i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["", "lemma qGood_qGoodInp:\n\"qGood (qOp delta qinp qbinp) = (qGoodInp qinp \\<and> qGoodBinp qbinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qOp delta qinp qbinp) = (qGoodInp qinp \\<and> qGoodBinp qbinp)", "unfolding qGoodInp_def qGoodBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qOp delta qinp qbinp) =\n    ((liftAll qGood qinp \\<and>\n      |{i. qinp i \\<noteq> None}| <o |UNIV|) \\<and>\n     liftAll qGoodAbs qbinp \\<and> |{i. qbinp i \\<noteq> None}| <o |UNIV|)", "by auto"], ["", "(* For the qOp case, qGood shall henceforth simplify to qGoodInp:  *)"], ["", "declare qGood.simps(2) [simp del]"], ["", "declare qGood_qGoodInp [simp]"], ["", "(* and qGood_simps (and qGoodAll_simps), rather than qGood.simps,\n   shall refer to the simplification rules for qGood *)"], ["", "lemmas qGoodAll_simps = qGood.simps(1) qGood_qGoodInp"], ["", "definition alphaInp where\n\"alphaInp ==\n {(qinp,qinp'). sameDom qinp qinp' \\<and> liftAll2 (\\<lambda>qX qX'. qX #= qX') qinp qinp'}\""], ["", "definition alphaBinp where\n\"alphaBinp ==\n {(qbinp,qbinp'). sameDom qbinp qbinp' \\<and> liftAll2 (\\<lambda>qA qA'. qA $= qA') qbinp qbinp'}\""], ["", "abbreviation alphaInp_abbrev (infix \"%=\" 50) where\n\"qinp %= qinp' == (qinp,qinp') \\<in> alphaInp\""], ["", "abbreviation alphaBinp_abbrev (infix \"%%=\" 50) where\n\"qbinp %%= qbinp' == (qbinp,qbinp') \\<in> alphaBinp\""], ["", "lemma alpha_alphaInp:\n\"(qOp delta qinp qbinp #= qOp delta' qinp' qbinp') =\n (delta = delta' \\<and> qinp %= qinp' \\<and> qbinp %%= qbinp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qOp delta qinp qbinp #= qOp delta' qinp' qbinp') =\n    (delta = delta' \\<and>\n     (qinp, qinp') \\<in> alphaInp \\<and> (qbinp, qbinp') \\<in> alphaBinp)", "unfolding alphaInp_def alphaBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qOp delta qinp qbinp #= qOp delta' qinp' qbinp') =\n    (delta = delta' \\<and>\n     (qinp, qinp')\n     \\<in> {(qinp, qinp').\n            sameDom qinp qinp' \\<and> liftAll2 (#=) qinp qinp'} \\<and>\n     (qbinp, qbinp')\n     \\<in> {(qbinp, qbinp').\n            sameDom qbinp qbinp' \\<and> liftAll2 ($=) qbinp qbinp'})", "by auto"], ["", "(* For the qOp case, alpha shall henceforth simplify to alphaInp:  *)"], ["", "declare alpha.simps(2) [simp del]"], ["", "declare alpha_alphaInp[simp]"], ["", "(* and alpha_Simps and alphaAll_Simps, rather than alpha_simps and alphaAll_simps,\n   shall refer to the simplification rules for alpha *)"], ["", "lemmas alphaAll_Simps =\nalpha.simps(1) alpha_alphaInp\nalphaAbs.simps"], ["", "lemma alphaInp_refl:\n\"qGoodInp qinp \\<Longrightarrow> qinp %= qinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<Longrightarrow> (qinp, qinp) \\<in> alphaInp", "using alpha_refl"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<Longrightarrow> (qinp, qinp) \\<in> alphaInp", "unfolding alphaInp_def qGoodInp_def liftAll_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n    |{i. qinp i \\<noteq> None}| <o |UNIV| \\<Longrightarrow>\n    (qinp, qinp)\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by fastforce"], ["", "lemma alphaBinp_refl:\n\"qGoodBinp qbinp \\<Longrightarrow> qbinp %%= qbinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp qbinp \\<Longrightarrow> (qbinp, qbinp) \\<in> alphaBinp", "using alphaAbs_refl"], ["proof (prove)\nusing this:\n  qGoodAbs ?A \\<Longrightarrow> ?A $= ?A\n\ngoal (1 subgoal):\n 1. qGoodBinp qbinp \\<Longrightarrow> (qbinp, qbinp) \\<in> alphaBinp", "unfolding alphaBinp_def qGoodBinp_def liftAll_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  qGoodAbs ?A \\<Longrightarrow> ?A $= ?A\n\ngoal (1 subgoal):\n 1. (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n    |{i. qbinp i \\<noteq> None}| <o |UNIV| \\<Longrightarrow>\n    (qbinp, qbinp)\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by fastforce"], ["", "lemma alphaInp_sym:\nfixes qinp qinp' :: \"('index,('index,'bindex,'varSort,'var,'opSym)qTerm)input\"\nshows \"qinp %= qinp' \\<Longrightarrow> qinp' %= qinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qinp, qinp') \\<in> alphaInp \\<Longrightarrow>\n    (qinp', qinp) \\<in> alphaInp", "using alpha_sym"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. (qinp, qinp') \\<in> alphaInp \\<Longrightarrow>\n    (qinp', qinp) \\<in> alphaInp", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. (qinp, qinp')\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)} \\<Longrightarrow>\n    (qinp', qinp)\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by blast"], ["", "lemma alphaBinp_sym:\nfixes qbinp qbinp' :: \"('bindex,('index,'bindex,'varSort,'var,'opSym)qAbs)input\"\nshows \"qbinp %%= qbinp' \\<Longrightarrow> qbinp' %%= qbinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qbinp, qbinp') \\<in> alphaBinp \\<Longrightarrow>\n    (qbinp', qbinp) \\<in> alphaBinp", "using alphaAbs_sym"], ["proof (prove)\nusing this:\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp') \\<in> alphaBinp \\<Longrightarrow>\n    (qbinp', qbinp) \\<in> alphaBinp", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp')\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)} \\<Longrightarrow>\n    (qbinp', qbinp)\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by blast"], ["", "lemma alphaInp_trans:\nassumes good: \"qGoodInp qinp\" and\n        alpha1: \"qinp %= qinp'\" and alpha2: \"qinp' %= qinp''\"\nshows \"qinp %= qinp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "fix i qX qX''"], ["proof (state)\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "assume qinp: \"qinp i = Some qX\" and qinp'': \"qinp'' i = Some qX''\""], ["proof (state)\nthis:\n  qinp i = Some qX\n  qinp'' i = Some qX''\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "then"], ["proof (chain)\npicking this:\n  qinp i = Some qX\n  qinp'' i = Some qX''", "obtain qX' where qinp': \"qinp' i = Some qX'\""], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp'' i = Some qX''\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alpha1"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp'' i = Some qX''\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp'' i = Some qX''\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qinp' i\", force)"], ["proof (state)\nthis:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "hence \"qX #= qX'\""], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. qX #= qX'", "using alpha1 qinp"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  (qinp, qinp') \\<in> alphaInp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qX #= qX'", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qX #= qX'", "by auto"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "moreover"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "have \"qX' #= qX''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qX' #= qX''", "using alpha2 qinp' qinp''"], ["proof (prove)\nusing this:\n  (qinp', qinp'') \\<in> alphaInp\n  qinp' i = Some qX'\n  qinp'' i = Some qX''\n\ngoal (1 subgoal):\n 1. qX' #= qX''", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  (qinp', qinp'')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n  qinp' i = Some qX'\n  qinp'' i = Some qX''\n\ngoal (1 subgoal):\n 1. qX' #= qX''", "by auto"], ["proof (state)\nthis:\n  qX' #= qX''\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "moreover"], ["proof (state)\nthis:\n  qX' #= qX''\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "have \"qGood qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood qX", "using good qinp"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "ultimately"], ["proof (chain)\npicking this:\n  qX #= qX'\n  qX' #= qX''\n  qGood qX", "have \"qX #= qX''\""], ["proof (prove)\nusing this:\n  qX #= qX'\n  qX' #= qX''\n  qGood qX\n\ngoal (1 subgoal):\n 1. qX #= qX''", "using alpha_trans"], ["proof (prove)\nusing this:\n  qX #= qX'\n  qX' #= qX''\n  qGood qX\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. qX #= qX''", "by blast"], ["proof (state)\nthis:\n  qX #= qX''\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "}"], ["proof (state)\nthis:\n  \\<lbrakk>qinp ?i32 = Some ?qX32; qinp'' ?i32 = Some ?qX''32\\<rbrakk>\n  \\<Longrightarrow> ?qX32 #= ?qX''32\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>qinp ?i32 = Some ?qX32; qinp'' ?i32 = Some ?qX''32\\<rbrakk>\n  \\<Longrightarrow> ?qX32 #= ?qX''32\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>qinp ?i32 = Some ?qX32; qinp'' ?i32 = Some ?qX''32\\<rbrakk>\n  \\<Longrightarrow> ?qX32 #= ?qX''32\n  qGoodInp qinp\n  (qinp, qinp') \\<in> alphaInp\n  (qinp', qinp'') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (qinp, qinp'') \\<in> alphaInp", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>qinp ?i32 = Some ?qX32; qinp'' ?i32 = Some ?qX''32\\<rbrakk>\n  \\<Longrightarrow> ?qX32 #= ?qX''32\n  qGoodInp qinp\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n  (qinp', qinp'')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (qinp, qinp'')\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by auto"], ["proof (state)\nthis:\n  (qinp, qinp'') \\<in> alphaInp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaBinp_trans:\nassumes good: \"qGoodBinp qbinp\" and\n        alpha1: \"qbinp %%= qbinp'\" and alpha2: \"qbinp' %%= qbinp''\"\nshows \"qbinp %%= qbinp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "fix i qA qA''"], ["proof (state)\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "assume qbinp: \"qbinp i = Some qA\" and qbinp'': \"qbinp'' i = Some qA''\""], ["proof (state)\nthis:\n  qbinp i = Some qA\n  qbinp'' i = Some qA''\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "then"], ["proof (chain)\npicking this:\n  qbinp i = Some qA\n  qbinp'' i = Some qA''", "obtain qA' where qbinp': \"qbinp' i = Some qA'\""], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp'' i = Some qA''\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alpha1"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp'' i = Some qA''\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp'' i = Some qA''\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qbinp' i\", force)"], ["proof (state)\nthis:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "hence \"qA $= qA'\""], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. qA $= qA'", "using alpha1 qbinp"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  (qbinp, qbinp') \\<in> alphaBinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qA $= qA'", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qA $= qA'", "by auto"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "moreover"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "have \"qA' $= qA''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qA' $= qA''", "using alpha2 qbinp' qbinp''"], ["proof (prove)\nusing this:\n  (qbinp', qbinp'') \\<in> alphaBinp\n  qbinp' i = Some qA'\n  qbinp'' i = Some qA''\n\ngoal (1 subgoal):\n 1. qA' $= qA''", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  (qbinp', qbinp'')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n  qbinp' i = Some qA'\n  qbinp'' i = Some qA''\n\ngoal (1 subgoal):\n 1. qA' $= qA''", "by auto"], ["proof (state)\nthis:\n  qA' $= qA''\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "moreover"], ["proof (state)\nthis:\n  qA' $= qA''\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "have \"qGoodAbs qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs qA", "using good qbinp"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "unfolding qGoodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "ultimately"], ["proof (chain)\npicking this:\n  qA $= qA'\n  qA' $= qA''\n  qGoodAbs qA", "have \"qA $= qA''\""], ["proof (prove)\nusing this:\n  qA $= qA'\n  qA' $= qA''\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. qA $= qA''", "using alphaAbs_trans"], ["proof (prove)\nusing this:\n  qA $= qA'\n  qA' $= qA''\n  qGoodAbs qA\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. qA $= qA''", "by blast"], ["proof (state)\nthis:\n  qA $= qA''\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "}"], ["proof (state)\nthis:\n  \\<lbrakk>qbinp ?i32 = Some ?qA32; qbinp'' ?i32 = Some ?qA''32\\<rbrakk>\n  \\<Longrightarrow> ?qA32 $= ?qA''32\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>qbinp ?i32 = Some ?qA32; qbinp'' ?i32 = Some ?qA''32\\<rbrakk>\n  \\<Longrightarrow> ?qA32 $= ?qA''32\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>qbinp ?i32 = Some ?qA32; qbinp'' ?i32 = Some ?qA''32\\<rbrakk>\n  \\<Longrightarrow> ?qA32 $= ?qA''32\n  qGoodBinp qbinp\n  (qbinp, qbinp') \\<in> alphaBinp\n  (qbinp', qbinp'') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'') \\<in> alphaBinp", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>qbinp ?i32 = Some ?qA32; qbinp'' ?i32 = Some ?qA''32\\<rbrakk>\n  \\<Longrightarrow> ?qA32 $= ?qA''32\n  qGoodBinp qbinp\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n  (qbinp', qbinp'')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp'')\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by auto"], ["proof (state)\nthis:\n  (qbinp, qbinp'') \\<in> alphaBinp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qSwapInp_preserves_qGoodInp:\nassumes \"qGoodInp qinp\"\nshows \"qGoodInp (qinp %[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "let ?qinp' = \"lift (qSwap xs x1 x2) qinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "fix xsa"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "let ?Left = \"{i. ?qinp' i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "have \"?Left = {i. qinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift (qSwap xs x1 x2) qinp i \\<noteq> None} =\n    {i. qinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift (qSwap xs x1 x2) qinp i \\<noteq> None} =\n  {i. qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "hence \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift (qSwap xs x1 x2) qinp i \\<noteq> None} =\n  {i. qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  {i. lift (qSwap xs x1 x2) qinp i \\<noteq> None} =\n  {i. qinp i \\<noteq> None}\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|", "unfolding qGoodInp_def"], ["proof (prove)\nusing this:\n  {i. lift (qSwap xs x1 x2) qinp i \\<noteq> None} =\n  {i. qinp i \\<noteq> None}\n  liftAll qGood qinp \\<and> |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "}"], ["proof (state)\nthis:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "thus ?thesis"], ["proof (prove)\nusing this:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "using assms"], ["proof (prove)\nusing this:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. qGoodInp (qSwapInp xs x1 x2 qinp)", "unfolding qGoodInp_def qSwapInp_def liftAll_lift_comp qGoodInp_def"], ["proof (prove)\nusing this:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n  liftAll qGood qinp \\<and> |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. liftAll (qGood \\<circ> qSwap xs x1 x2) qinp \\<and>\n    |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|", "unfolding comp_def liftAll_def"], ["proof (prove)\nusing this:\n  |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        qinp i = Some v \\<longrightarrow>\n        qGood (v #[[x1 \\<and> x2]]_xs)) \\<and>\n    |{i. lift (qSwap xs x1 x2) qinp i \\<noteq> None}| <o |UNIV|", "by (auto simp add: qSwap_preserves_qGood simp del: not_None_eq)"], ["proof (state)\nthis:\n  qGoodInp (qSwapInp xs x1 x2 qinp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qSwapBinp_preserves_qGoodBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"qGoodBinp (qbinp %%[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "let ?qbinp' = \"lift (qSwapAbs xs x1 x2) qbinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "fix xsa"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "let ?Left = \"{i. ?qbinp' i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "have \"?Left = {i. qbinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None} =\n    {i. qbinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None} =\n  {i. qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "hence \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None} =\n  {i. qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  {i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None} =\n  {i. qbinp i \\<noteq> None}\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "unfolding qGoodBinp_def"], ["proof (prove)\nusing this:\n  {i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None} =\n  {i. qbinp i \\<noteq> None}\n  liftAll qGoodAbs qbinp \\<and> |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "}"], ["proof (state)\nthis:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "thus ?thesis"], ["proof (prove)\nusing this:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "using assms"], ["proof (prove)\nusing this:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. qGoodBinp (qSwapBinp xs x1 x2 qbinp)", "unfolding qGoodBinp_def qSwapBinp_def liftAll_lift_comp"], ["proof (prove)\nusing this:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n  liftAll qGoodAbs qbinp \\<and> |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. liftAll (qGoodAbs \\<circ> qSwapAbs xs x1 x2) qbinp \\<and>\n    |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "unfolding qGoodBinp_def"], ["proof (prove)\nusing this:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n  liftAll qGoodAbs qbinp \\<and> |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. liftAll (qGoodAbs \\<circ> qSwapAbs xs x1 x2) qbinp \\<and>\n    |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "unfolding comp_def liftAll_def"], ["proof (prove)\nusing this:\n  |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        qbinp i = Some v \\<longrightarrow>\n        qGoodAbs (v $[[x1 \\<and> x2]]_xs)) \\<and>\n    |{i. lift (qSwapAbs xs x1 x2) qbinp i \\<noteq> None}| <o |UNIV|", "by (auto simp add: qSwapAbs_preserves_qGoodAbs simp del: not_None_eq)"], ["proof (state)\nthis:\n  qGoodBinp (qSwapBinp xs x1 x2 qbinp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qSwapInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qinp %= qinp'\"\nshows \"(qinp %[[x1 \\<and> x2]]_xs) %= (qinp' %[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qSwapInp xs x1 x2 qinp, qSwapInp xs x1 x2 qinp') \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (qSwapInp xs x1 x2 qinp, qSwapInp xs x1 x2 qinp') \\<in> alphaInp", "unfolding alphaInp_def qSwapInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (lift (qSwap xs x1 x2) qinp, lift (qSwap xs x1 x2) qinp')\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by (simp add: lift_None)  \n   (smt liftAll_def lift_def option.case_eq_if option.exhaust_sel \n      option.sel qGoodInp_def qSwap_preserves_alpha)"], ["", "lemma qSwapBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qbinp %%= qbinp'\"\nshows \"(qbinp %%[[x1 \\<and> x2]]_xs) %%= (qbinp' %%[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qSwapBinp xs x1 x2 qbinp, qSwapBinp xs x1 x2 qbinp') \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (qSwapBinp xs x1 x2 qbinp, qSwapBinp xs x1 x2 qbinp') \\<in> alphaBinp", "unfolding alphaBinp_def qSwapBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (lift (qSwapAbs xs x1 x2) qbinp, lift (qSwapAbs xs x1 x2) qbinp')\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by (simp add: lift_None)\n   (smt liftAll_def lift_def option.case_eq_if option.exhaust_sel option.sel \n     qGoodBinp_def qSwapAbs_preserves_alphaAbs)"], ["", "lemma qPsubstInp_preserves_qGoodInp:\nassumes \"qGoodInp qinp\" and \"qGoodEnv qrho\"\nshows \"qGoodInp (qinp %[[qrho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp (qinp %[[qrho]])", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  qGoodEnv qrho\n\ngoal (1 subgoal):\n 1. qGoodInp (qinp %[[qrho]])", "unfolding qGoodInp_def qPsubstInp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  qGoodEnv qrho\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift (qPsubst qrho) qinp i = Some v \\<longrightarrow>\n        qGood v) \\<and>\n    |{i. lift (qPsubst qrho) qinp i \\<noteq> None}| <o |UNIV|", "by simp (smt Collect_cong lift_def option.case_eq_if \n   option.exhaust_sel option.sel qPsubst_preserves_qGood)"], ["", "lemma qPsubstBinp_preserves_qGoodBinp:\nassumes \"qGoodBinp qbinp\" and \"qGoodEnv qrho\"\nshows \"qGoodBinp (qbinp %%[[qrho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp (qbinp %%[[qrho]])", "using assms"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  qGoodEnv qrho\n\ngoal (1 subgoal):\n 1. qGoodBinp (qbinp %%[[qrho]])", "unfolding qGoodBinp_def qPsubstBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  qGoodEnv qrho\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift (qPsubstAbs qrho) qbinp i = Some v \\<longrightarrow>\n        qGoodAbs v) \\<and>\n    |{i. lift (qPsubstAbs qrho) qbinp i \\<noteq> None}| <o |UNIV|", "by simp (smt Collect_cong lift_def option.case_eq_if \n   option.exhaust_sel option.sel qPsubstAbs_preserves_qGoodAbs)"], ["", "lemma qPsubstInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qGoodEnv qrho\" and \"qinp %= qinp'\"\nshows \"(qinp %[[qrho]]) %= (qinp' %[[qrho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qinp %[[qrho]], qinp' %[[qrho]]) \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  qGoodEnv qrho\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (qinp %[[qrho]], qinp' %[[qrho]]) \\<in> alphaInp", "unfolding alphaInp_def qPsubstInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  qGoodEnv qrho\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (lift (qPsubst qrho) qinp, lift (qPsubst qrho) qinp')\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by (simp add: lift_None)\n   (smt liftAll_def lift_def option.case_eq_if option.exhaust_sel \n       option.sel qGoodInp_def qPsubst_preserves_alpha1)"], ["", "lemma qPsubstBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qGoodEnv qrho\" and \"qbinp %%= qbinp'\"\nshows \"(qbinp %%[[qrho]]) %%= (qbinp' %%[[qrho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qbinp %%[[qrho]], qbinp' %%[[qrho]]) \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  qGoodEnv qrho\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (qbinp %%[[qrho]], qbinp' %%[[qrho]]) \\<in> alphaBinp", "unfolding alphaBinp_def qPsubstBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  qGoodEnv qrho\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (lift (qPsubstAbs qrho) qbinp, lift (qPsubstAbs qrho) qbinp')\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by (simp add: lift_None)\n   (smt liftAll_def lift_def option.case_eq_if option.exhaust_sel \n       option.sel qGoodBinp_def qPsubstAbs_preserves_alphaAbs1)"], ["", "lemma qFreshInp_preserves_alphaInp_aux:\nassumes good: \"qGoodInp qinp \\<or> qGoodInp qinp'\" and alpha: \"qinp %= qinp'\"\nand fresh: \"qFreshInp xs x qinp\"\nshows \"qFreshInp xs x qinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshInp xs x qinp'", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  (qinp, qinp') \\<in> alphaInp\n  qFreshInp xs x qinp\n\ngoal (1 subgoal):\n 1. qFreshInp xs x qinp'", "unfolding qFreshInp_def liftAll_def"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  (qinp, qinp') \\<in> alphaInp\n  \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v\n\ngoal (1 subgoal):\n 1. \\<forall>i v. qinp' i = Some v \\<longrightarrow> qFresh xs x v", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "fix i qX'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "assume qinp': \"qinp' i = Some qX'\""], ["proof (state)\nthis:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "then"], ["proof (chain)\npicking this:\n  qinp' i = Some qX'", "obtain qX where qinp: \"qinp i = Some qX\""], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. (\\<And>qX. qinp i = Some qX \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alpha"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (\\<And>qX. qinp i = Some qX \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qX. qinp i = Some qX \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"qinp i\", auto)"], ["proof (state)\nthis:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "hence \"qGood qX \\<or> qGood qX'\""], ["proof (prove)\nusing this:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX \\<or> qGood qX'", "using qinp' good"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp' i = Some qX'\n  qGoodInp qinp \\<or> qGoodInp qinp'\n\ngoal (1 subgoal):\n 1. qGood qX \\<or> qGood qX'", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp' i = Some qX'\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV| \\<or>\n  (\\<forall>i v. qinp' i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp' i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood qX \\<or> qGood qX'", "by auto"], ["proof (state)\nthis:\n  qGood qX \\<or> qGood qX'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "moreover"], ["proof (state)\nthis:\n  qGood qX \\<or> qGood qX'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "have \"qX #= qX'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qX #= qX'", "using qinp qinp' alpha"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp' i = Some qX'\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. qX #= qX'", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qinp' i = Some qX'\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. qX #= qX'", "by auto"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "moreover"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "have \"qFresh xs x qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x qX", "using fresh qinp"], ["proof (prove)\nusing this:\n  qFreshInp xs x qinp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qFresh xs x qX", "unfolding qFreshInp_def liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qFresh xs x qX", "by simp"], ["proof (state)\nthis:\n  qFresh xs x qX\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodInp qinp \\<or> qGoodInp qinp';\n        (qinp, qinp') \\<in> alphaInp;\n        \\<forall>i v. qinp i = Some v \\<longrightarrow> qFresh xs x v;\n        qinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFresh xs x v", "ultimately"], ["proof (chain)\npicking this:\n  qGood qX \\<or> qGood qX'\n  qX #= qX'\n  qFresh xs x qX", "show \"qFresh xs x qX'\""], ["proof (prove)\nusing this:\n  qGood qX \\<or> qGood qX'\n  qX #= qX'\n  qFresh xs x qX\n\ngoal (1 subgoal):\n 1. qFresh xs x qX'", "using qFresh_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood qX \\<or> qGood qX'\n  qX #= qX'\n  qFresh xs x qX\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> qFresh ?zs ?z ?X = qFresh ?zs ?z ?X'\n\ngoal (1 subgoal):\n 1. qFresh xs x qX'", "by auto"], ["proof (state)\nthis:\n  qFresh xs x qX'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qFreshBinp_preserves_alphaBinp_aux:\nassumes good: \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and alpha: \"qbinp %%= qbinp'\"\nand fresh: \"qFreshBinp xs x qbinp\"\nshows \"qFreshBinp xs x qbinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshBinp xs x qbinp'", "using assms"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  (qbinp, qbinp') \\<in> alphaBinp\n  qFreshBinp xs x qbinp\n\ngoal (1 subgoal):\n 1. qFreshBinp xs x qbinp'", "unfolding qFreshBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  (qbinp, qbinp') \\<in> alphaBinp\n  \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v\n\ngoal (1 subgoal):\n 1. \\<forall>i v. qbinp' i = Some v \\<longrightarrow> qFreshAbs xs x v", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "fix i qA'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "assume qbinp': \"qbinp' i = Some qA'\""], ["proof (state)\nthis:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "then"], ["proof (chain)\npicking this:\n  qbinp' i = Some qA'", "obtain qA where qbinp: \"qbinp i = Some qA\""], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. (\\<And>qA. qbinp i = Some qA \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alpha"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (\\<And>qA. qbinp i = Some qA \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qA. qbinp i = Some qA \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"qbinp i\", auto)"], ["proof (state)\nthis:\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "hence \"qGoodAbs qA \\<or> qGoodAbs qA'\""], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA \\<or> qGoodAbs qA'", "using qbinp' good"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n\ngoal (1 subgoal):\n 1. qGoodAbs qA \\<or> qGoodAbs qA'", "unfolding qGoodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV| \\<or>\n  (\\<forall>i v. qbinp' i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp' i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodAbs qA \\<or> qGoodAbs qA'", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA \\<or> qGoodAbs qA'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "moreover"], ["proof (state)\nthis:\n  qGoodAbs qA \\<or> qGoodAbs qA'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "have \"qA $= qA'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qA $= qA'", "using qbinp qbinp' alpha"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. qA $= qA'", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. qA $= qA'", "by auto"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "moreover"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "have \"qFreshAbs xs x qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs xs x qA", "using fresh qbinp"], ["proof (prove)\nusing this:\n  qFreshBinp xs x qbinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qFreshAbs xs x qA", "unfolding qFreshBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qFreshAbs xs x qA", "by simp"], ["proof (state)\nthis:\n  qFreshAbs xs x qA\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       \\<lbrakk>qGoodBinp qbinp \\<or> qGoodBinp qbinp';\n        (qbinp, qbinp') \\<in> alphaBinp;\n        \\<forall>i v. qbinp i = Some v \\<longrightarrow> qFreshAbs xs x v;\n        qbinp' i = Some v\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs xs x v", "ultimately"], ["proof (chain)\npicking this:\n  qGoodAbs qA \\<or> qGoodAbs qA'\n  qA $= qA'\n  qFreshAbs xs x qA", "show \"qFreshAbs xs x qA'\""], ["proof (prove)\nusing this:\n  qGoodAbs qA \\<or> qGoodAbs qA'\n  qA $= qA'\n  qFreshAbs xs x qA\n\ngoal (1 subgoal):\n 1. qFreshAbs xs x qA'", "using qFreshAbs_preserves_alphaAbs"], ["proof (prove)\nusing this:\n  qGoodAbs qA \\<or> qGoodAbs qA'\n  qA $= qA'\n  qFreshAbs xs x qA\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A'; ?A $= ?A'\\<rbrakk>\n  \\<Longrightarrow> qFreshAbs ?zs ?z ?A = qFreshAbs ?zs ?z ?A'\n\ngoal (1 subgoal):\n 1. qFreshAbs xs x qA'", "by auto"], ["proof (state)\nthis:\n  qFreshAbs xs x qA'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qFreshInp_preserves_alphaInp:\nassumes \"qGoodInp qinp \\<or> qGoodInp qinp'\" and \"qinp %= qinp'\"\nshows \"qFreshInp xs x qinp \\<longleftrightarrow> qFreshInp xs x qinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshInp xs x qinp = qFreshInp xs x qinp'", "using alphaInp_sym assms qFreshInp_preserves_alphaInp_aux"], ["proof (prove)\nusing this:\n  (?qinp, ?qinp') \\<in> alphaInp \\<Longrightarrow>\n  (?qinp', ?qinp) \\<in> alphaInp\n  qGoodInp qinp \\<or> qGoodInp qinp'\n  (qinp, qinp') \\<in> alphaInp\n  \\<lbrakk>qGoodInp ?qinp \\<or> qGoodInp ?qinp';\n   (?qinp, ?qinp') \\<in> alphaInp; qFreshInp ?xs ?x ?qinp\\<rbrakk>\n  \\<Longrightarrow> qFreshInp ?xs ?x ?qinp'\n\ngoal (1 subgoal):\n 1. qFreshInp xs x qinp = qFreshInp xs x qinp'", "by blast"], ["", "lemma qFreshBinp_preserves_alphaBinp:\nassumes \"qGoodBinp qbinp \\<or> qGoodBinp qbinp'\" and \"qbinp %%= qbinp'\"\nshows \"qFreshBinp xs x qbinp \\<longleftrightarrow> qFreshBinp xs x qbinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshBinp xs x qbinp = qFreshBinp xs x qbinp'", "using alphaBinp_sym assms qFreshBinp_preserves_alphaBinp_aux"], ["proof (prove)\nusing this:\n  (?qbinp, ?qbinp') \\<in> alphaBinp \\<Longrightarrow>\n  (?qbinp', ?qbinp) \\<in> alphaBinp\n  qGoodBinp qbinp \\<or> qGoodBinp qbinp'\n  (qbinp, qbinp') \\<in> alphaBinp\n  \\<lbrakk>qGoodBinp ?qbinp \\<or> qGoodBinp ?qbinp';\n   (?qbinp, ?qbinp') \\<in> alphaBinp; qFreshBinp ?xs ?x ?qbinp\\<rbrakk>\n  \\<Longrightarrow> qFreshBinp ?xs ?x ?qbinp'\n\ngoal (1 subgoal):\n 1. qFreshBinp xs x qbinp = qFreshBinp xs x qbinp'", "by blast"], ["", "(****************************************************)"], ["", "lemmas qItem_simps =\nqSkelAll_simps qFreshAll_simps qSwapAll_simps qPsubstAll_simps qGoodAll_simps alphaAll_Simps\nqSwap_qAFresh_otherSimps qAFresh.simps qGoodItem.simps"], ["", "(****************************************************)"], ["", "end"], ["", "(* context FixVars *)"], ["", "subsection \\<open>Definitions of terms and their operators\\<close>"], ["", "type_synonym ('index,'bindex,'varSort,'var,'opSym)\"term\" =\n      \"('index,'bindex,'varSort,'var,'opSym)qTerm set\""], ["", "type_synonym ('index,'bindex,'varSort,'var,'opSym)abs =\n      \"('index,'bindex,'varSort,'var,'opSym)qAbs set\""], ["", "type_synonym ('index,'bindex,'varSort,'var,'opSym)env =\n      \"'varSort \\<Rightarrow> 'var \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term option\""], ["", "text\\<open>A ``parameter\" will be something for which\nfreshness makes sense.  Here is the most typical case of a parameter in proofs, putting\ntogether (as lists) finite collections of variables, terms, abstractions and environments:\\<close>"], ["", "datatype ('index,'bindex,'varSort,'var,'opSym)param =\n  Par \"'var list\"\n      \"('index,'bindex,'varSort,'var,'opSym)term list\"\n      \"('index,'bindex,'varSort,'var,'opSym)abs list\"\n      \"('index,'bindex,'varSort,'var,'opSym)env list\""], ["", "fun varsOf where\n\"varsOf (Par xL _ _ _) = set xL\""], ["", "fun termsOf where\n\"termsOf (Par _ XL _ _) = set XL\""], ["", "fun absOf where\n\"absOf (Par _ _ AL _) = set AL\""], ["", "fun envsOf where\n\"envsOf (Par _ _ _ rhoL) = set rhoL\""], ["", "context FixVars  (* scope all throughout the file *)\nbegin"], ["", "(* Recall the abbreviation \"Restr r qA\" for \"r Int (qA <*> qA)\"  *)"], ["", "definition \"alphaGood \\<equiv> \\<lambda> qX qY. qGood qX \\<and> qGood qY \\<and> qX #= qY\""], ["", "definition \"alphaAbsGood \\<equiv> \\<lambda> qA qB. qGoodAbs qA \\<and> qGoodAbs qB \\<and> qA $= qB\""], ["", "definition \"good \\<equiv> qGood /// alphaGood\""], ["", "definition \"goodAbs \\<equiv> qGoodAbs /// alphaAbsGood\""], ["", "definition goodInp where\n\"goodInp inp ==\n liftAll good inp \\<and>\n |{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["", "definition goodBinp where\n\"goodBinp binp ==\n liftAll goodAbs binp \\<and>\n |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["", "definition goodEnv where\n\"goodEnv rho ==\n (\\<forall> ys. liftAll good (rho ys)) \\<and>\n (\\<forall> ys. |{y. rho ys y \\<noteq> None}| <o |UNIV :: 'var set| )\""], ["", "definition asTerm where\n\"asTerm qX \\<equiv> proj alphaGood qX\""], ["", "definition asAbs where\n\"asAbs qA \\<equiv> proj alphaAbsGood qA\""], ["", "definition pickInp where\n\"pickInp inp \\<equiv> lift pick inp\""], ["", "definition pickBinp where\n\"pickBinp binp \\<equiv> lift pick binp\""], ["", "(* Note: pickInp and pickBinp are the same (polymorphically), but\n  I keep distinct notations for uniformity with the rest of the notations. *)"], ["", "definition asInp where\n\"asInp qinp \\<equiv> lift asTerm qinp\""], ["", "definition asBinp where\n\"asBinp qbinp \\<equiv> lift asAbs qbinp\""], ["", "definition pickE where\n\"pickE rho \\<equiv> \\<lambda> xs. lift pick (rho xs)\""], ["", "definition asEnv where\n\"asEnv qrho \\<equiv> \\<lambda> xs. lift asTerm (qrho xs)\""], ["", "definition Var where\n\"Var xs x \\<equiv> asTerm(qVar xs x)\""], ["", "definition Op where\n\"Op delta inp binp \\<equiv> asTerm (qOp delta (pickInp inp) (pickBinp binp))\""], ["", "definition Abs where\n\"Abs xs x X \\<equiv> asAbs (qAbs xs x (pick X))\""], ["", "definition skel where\n\"skel X \\<equiv> qSkel (pick X)\""], ["", "definition skelAbs where\n\"skelAbs A \\<equiv> qSkelAbs (pick A)\""], ["", "definition skelInp where\n\"skelInp inp = qSkelInp (pickInp inp)\""], ["", "definition skelBinp where\n\"skelBinp binp = qSkelBinp (pickBinp binp)\""], ["", "lemma skelInp_def2:\nassumes \"goodInp inp\"\nshows \"skelInp inp = lift skel inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelInp inp = lift skel inp", "unfolding skelInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkelInp (pickInp inp) = lift skel inp", "unfolding qSkelInp_def pickInp_def skel_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift qSkel (lift pick inp) = lift (\\<lambda>X. qSkel (pick X)) inp", "unfolding lift_comp comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (\\<lambda>x. qSkel (pick x)) inp =\n    lift (\\<lambda>X. qSkel (pick X)) inp", "by simp"], ["", "lemma skelBinp_def2:\nassumes \"goodBinp binp\"\nshows \"skelBinp binp = lift skelAbs binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelBinp binp = lift skelAbs binp", "unfolding skelBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkelBinp (pickBinp binp) = lift skelAbs binp", "unfolding qSkelBinp_def pickBinp_def skelAbs_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift qSkelAbs (lift pick binp) =\n    lift (\\<lambda>A. qSkelAbs (pick A)) binp", "unfolding lift_comp comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (\\<lambda>x. qSkelAbs (pick x)) binp =\n    lift (\\<lambda>A. qSkelAbs (pick A)) binp", "by simp"], ["", "definition swap where\n\"swap xs x y X = asTerm (qSwap xs x y (pick X))\""], ["", "abbreviation swap_abbrev (\"_ #[_ \\<and> _]'__\" 200) where\n\"(X #[z1 \\<and> z2]_zs) \\<equiv> swap zs z1 z2 X\""], ["", "definition swapAbs where\n\"swapAbs xs x y A = asAbs (qSwapAbs xs x y (pick A))\""], ["", "abbreviation swapAbs_abbrev (\"_ $[_ \\<and> _]'__\" 200) where\n\"(A $[z1 \\<and> z2]_zs) \\<equiv> swapAbs zs z1 z2 A\""], ["", "definition swapInp where\n\"swapInp xs x y inp \\<equiv> lift (swap xs x y) inp\""], ["", "definition swapBinp where\n\"swapBinp xs x y binp \\<equiv> lift (swapAbs xs x y) binp\""], ["", "abbreviation swapInp_abbrev (\"_ %[_ \\<and> _]'__\" 200) where\n\"(inp %[z1 \\<and> z2]_zs) \\<equiv> swapInp zs z1 z2 inp\""], ["", "abbreviation swapBinp_abbrev (\"_ %%[_ \\<and> _]'__\" 200) where\n\"(binp %%[z1 \\<and> z2]_zs) \\<equiv> swapBinp zs z1 z2 binp\""], ["", "definition swapEnvDom where\n\"swapEnvDom xs x y rho \\<equiv> \\<lambda>zs z. rho zs (z @zs[x \\<and> y]_xs)\""], ["", "definition swapEnvIm where\n\"swapEnvIm xs x y rho \\<equiv> \\<lambda>zs. lift (swap xs x y) (rho zs)\""], ["", "definition swapEnv where\n\"swapEnv xs x y \\<equiv> swapEnvIm xs x y o swapEnvDom xs x y\""], ["", "abbreviation swapEnv_abbrev (\"_ &[_ \\<and> _]'__\" 200) where\n\"(rho &[z1 \\<and> z2]_zs) \\<equiv> swapEnv zs z1 z2 rho\""], ["", "lemmas swapEnv_defs = swapEnv_def comp_def swapEnvDom_def swapEnvIm_def"], ["", "inductive_set swapped where\nRefl: \"(X,X) \\<in> swapped\"\n|\nTrans: \"\\<lbrakk>(X,Y) \\<in> swapped; (Y,Z) \\<in> swapped\\<rbrakk> \\<Longrightarrow> (X,Z) \\<in> swapped\"\n|\nSwap: \"(X,Y) \\<in> swapped \\<Longrightarrow> (X, Y #[x \\<and> y]_zs) \\<in> swapped\""], ["", "lemmas swapped_Clauses = swapped.Refl swapped.Trans swapped.Swap"], ["", "definition fresh where\n\"fresh xs x X \\<equiv> qFresh xs x (pick X)\""], ["", "definition freshAbs where\n\"freshAbs xs x A \\<equiv> qFreshAbs xs x (pick A)\""], ["", "definition freshInp where\n\"freshInp xs x inp \\<equiv> liftAll (fresh xs x) inp\""], ["", "definition freshBinp where\n\"freshBinp xs x binp \\<equiv> liftAll (freshAbs xs x) binp\""], ["", "definition freshEnv where\n\"freshEnv xs x rho ==\nrho xs x = None \\<and> (\\<forall> ys. liftAll (fresh xs x) (rho ys))\""], ["", "definition psubst where\n\"psubst rho X \\<equiv> asTerm(qPsubst (pickE rho) (pick X))\""], ["", "abbreviation psubst_abbrev (\"_ #[_]\") where\n\"(X #[rho]) \\<equiv> psubst rho X\""], ["", "definition psubstAbs where\n\"psubstAbs rho A \\<equiv> asAbs(qPsubstAbs (pickE rho) (pick A))\""], ["", "abbreviation psubstAbs_abbrev  (\"_ $[_]\") where\n\"A $[rho] \\<equiv> psubstAbs rho A\""], ["", "definition psubstInp where\n\"psubstInp rho inp \\<equiv> lift (psubst rho) inp\""], ["", "definition psubstBinp where\n\"psubstBinp rho binp \\<equiv> lift (psubstAbs rho) binp\""], ["", "abbreviation psubstInp_abbrev  (\"_ %[_]\") where\n\"inp %[rho] \\<equiv> psubstInp rho inp\""], ["", "abbreviation psubstBinp_abbrev  (\"_ %%[_]\") where\n\"binp %%[rho] \\<equiv> psubstBinp rho binp\""], ["", "definition psubstEnv where\n\"psubstEnv rho rho' \\<equiv>\n \\<lambda> xs x. case rho' xs x of None \\<Rightarrow> rho xs x\n                          |Some X \\<Rightarrow> Some (X #[rho])\""], ["", "abbreviation psubstEnv_abbrev (\"_ &[_]\") where\n\"rho &[rho'] \\<equiv> psubstEnv rho' rho\""], ["", "definition idEnv where\n\"idEnv \\<equiv> \\<lambda>xs. Map.empty\""], ["", "definition updEnv ::\n\"('index,'bindex,'varSort,'var,'opSym)env \\<Rightarrow>\n 'var \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term \\<Rightarrow> 'varSort \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)env\"\n(\"_ [_ \\<leftarrow> _]'__\" 200) where\n\"(rho [x \\<leftarrow> X]_xs) \\<equiv> \\<lambda> ys y. (if ys = xs \\<and> y = x then Some X else rho ys y)\""], ["", "text\\<open>(Unary) substitution:\\<close>"], ["", "definition subst where\n\"subst xs X x \\<equiv> psubst (idEnv [x \\<leftarrow> X]_xs)\""], ["", "abbreviation subst_abbrev (\"_ #[_ '/ _]'__\" 200) where\n\"(Y #[X / x]_xs) \\<equiv> subst xs X x Y\""], ["", "definition substAbs where\n\"substAbs xs X x \\<equiv> psubstAbs (idEnv [x \\<leftarrow> X]_xs)\""], ["", "abbreviation substAbs_abbrev (\"_ $[_ '/ _]'__\" 200) where\n\"(A $[X / x]_xs) \\<equiv> substAbs xs X x A\""], ["", "definition substInp where\n\"substInp xs X x \\<equiv> psubstInp (idEnv [x \\<leftarrow> X]_xs)\""], ["", "definition substBinp where\n\"substBinp xs X x \\<equiv> psubstBinp (idEnv [x \\<leftarrow> X]_xs)\""], ["", "abbreviation substInp_abbrev (\"_ %[_ '/ _]'__\" 200) where\n\"(inp %[X / x]_xs) \\<equiv> substInp xs X x inp\""], ["", "abbreviation substBinp_abbrev (\"_ %%[_ '/ _]'__\" 200) where\n\"(binp %%[X / x]_xs) \\<equiv> substBinp xs X x binp\""], ["", "theorem substInp_def2:\n\"substInp ys Y y = lift (subst ys Y y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substInp ys Y y = lift (subst ys Y y)", "unfolding substInp_def[abs_def] subst_def psubstInp_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (psubst (idEnv [y \\<leftarrow> Y]_ys)) =\n    lift (psubst (idEnv [y \\<leftarrow> Y]_ys))", "by simp"], ["", "theorem substBinp_def2:\n\"substBinp ys Y y = lift (substAbs ys Y y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substBinp ys Y y = lift (substAbs ys Y y)", "unfolding substBinp_def[abs_def] substAbs_def psubstBinp_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (psubstAbs (idEnv [y \\<leftarrow> Y]_ys)) =\n    lift (psubstAbs (idEnv [y \\<leftarrow> Y]_ys))", "by simp"], ["", "definition substEnv where\n\"substEnv xs X x \\<equiv> psubstEnv (idEnv [x \\<leftarrow> X]_xs)\""], ["", "abbreviation substEnv_abbrev (\"_ &[_ '/ _]'__\" 200) where\n\"(Y &[X / x]_xs) \\<equiv> substEnv xs X x Y\""], ["", "theorem substEnv_def2:\n\"(rho &[Y / y]_ys) =\n (\\<lambda>xs x. case rho xs x of\n           None \\<Rightarrow> if (xs = ys \\<and> x = y) then Some Y else None\n          |Some X \\<Rightarrow> Some (X #[Y / y]_ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys =\n    (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow> Some (X #[Y / y]_ys))", "unfolding substEnv_def psubstEnv_def subst_def idEnv_def updEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None]) =\n    (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None])", "apply(rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       (case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None]) =\n       (case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None])", "by(case_tac \"rho xs x\", simp_all)"], ["", "text\\<open>Variable-for-variable substitution:\\<close>"], ["", "definition vsubst where\n\"vsubst ys y1 y2 \\<equiv> subst ys (Var ys y1) y2\""], ["", "abbreviation vsubst_abbrev (\"_ #[_ '/'/ _]'__\" 200) where\n\"(X #[y1 // y2]_ys) \\<equiv> vsubst ys y1 y2 X\""], ["", "definition vsubstAbs where\n\"vsubstAbs ys y1 y2 \\<equiv> substAbs ys (Var ys y1) y2\""], ["", "abbreviation vsubstAbs_abbrev (\"_ $[_ '/'/ _]'__\" 200) where\n\"(A $[y1 // y2]_ys) \\<equiv> vsubstAbs ys y1 y2 A\""], ["", "definition vsubstInp where\n\"vsubstInp ys y1 y2 \\<equiv> substInp ys (Var ys y1) y2\""], ["", "definition vsubstBinp where\n\"vsubstBinp ys y1 y2 \\<equiv> substBinp ys (Var ys y1) y2\""], ["", "abbreviation vsubstInp_abbrev (\"_ %[_ '/'/ _]'__\" 200) where\n\"(inp %[y1 // y2]_ys) \\<equiv> vsubstInp ys y1 y2 inp\""], ["", "abbreviation vsubstBinp_abbrev (\"_ %%[_ '/'/ _]'__\" 200) where\n\"(binp %%[y1 // y2]_ys) \\<equiv> vsubstBinp ys y1 y2 binp\""], ["", "lemma vsubstInp_def2:\n\"(inp %[y1 // y2]_ys) = lift (vsubst ys y1 y2) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp %[y1 // y2]_ys = lift (vsubst ys y1 y2) inp", "unfolding vsubstInp_def vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inp %[Var ys y1 / y2]_ys = lift (subst ys (Var ys y1) y2) inp", "by(auto simp add: substInp_def2)"], ["", "lemma vsubstBinp_def2:\n\"(binp %%[y1 // y2]_ys) = lift (vsubstAbs ys y1 y2) binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp %%[y1 // y2]_ys = lift (vsubstAbs ys y1 y2) binp", "unfolding vsubstBinp_def vsubstAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. binp %%[Var ys y1 / y2]_ys = lift (substAbs ys (Var ys y1) y2) binp", "by(auto simp add: substBinp_def2)"], ["", "definition vsubstEnv where\n\"vsubstEnv ys y1 y2 \\<equiv> substEnv ys (Var ys y1) y2\""], ["", "abbreviation vsubstEnv_abbrev (\"_ &[_ '/'/ _]'__\" 200) where\n\"(rho &[y1 // y2]_ys) \\<equiv> vsubstEnv ys y1 y2 rho\""], ["", "theorem vsubstEnv_def2:\n\"(rho &[y1 // y]_ys) =\n (\\<lambda>xs x. case rho xs x of\n           None \\<Rightarrow> if (xs = ys \\<and> x = y) then Some (Var ys y1) else None\n          |Some X \\<Rightarrow> Some (X #[y1 // y]_ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys =\n    (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow>\n          if xs = ys \\<and> x = y then Some (Var ys y1) else None\n        | Some X \\<Rightarrow> Some (X #[y1 // y]_ys))", "unfolding vsubstEnv_def vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys =\n    (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow>\n          if xs = ys \\<and> x = y then Some (Var ys y1) else None\n        | Some X \\<Rightarrow> Some (X #[Var ys y1 / y]_ys))", "by(auto simp add: substEnv_def2)"], ["", "definition goodPar where\n\"goodPar P \\<equiv> (\\<forall> X \\<in> termsOf P. good X) \\<and>\n              (\\<forall> A \\<in> absOf P. goodAbs A) \\<and>\n              (\\<forall> rho \\<in> envsOf P. goodEnv rho)\""], ["", "lemma Par_preserves_good[simp]:\nassumes \"!! X. X \\<in> set XL \\<Longrightarrow> good X\"\nand \"!! A. A \\<in> set AL  \\<Longrightarrow> goodAbs A\"\nand \"!! rho. rho \\<in> set rhoL \\<Longrightarrow> goodEnv rho\"\nshows \"goodPar (Par xL XL AL rhoL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodPar (Par xL XL AL rhoL)", "using assms"], ["proof (prove)\nusing this:\n  ?X90 \\<in> set XL \\<Longrightarrow> good ?X90\n  ?A90 \\<in> set AL \\<Longrightarrow> goodAbs ?A90\n  ?rho90 \\<in> set rhoL \\<Longrightarrow> goodEnv ?rho90\n\ngoal (1 subgoal):\n 1. goodPar (Par xL XL AL rhoL)", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  ?X90 \\<in> set XL \\<Longrightarrow> good ?X90\n  ?A90 \\<in> set AL \\<Longrightarrow> goodAbs ?A90\n  ?rho90 \\<in> set rhoL \\<Longrightarrow> goodEnv ?rho90\n\ngoal (1 subgoal):\n 1. Ball (termsOf (Par xL XL AL rhoL)) good \\<and>\n    Ball (absOf (Par xL XL AL rhoL)) goodAbs \\<and>\n    Ball (envsOf (Par xL XL AL rhoL)) goodEnv", "by auto"], ["", "lemma termsOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"X : termsOf P\"\nshows \"good X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n  X \\<in> termsOf P\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  Ball (termsOf P) good \\<and>\n  Ball (absOf P) goodAbs \\<and> Ball (envsOf P) goodEnv\n  X \\<in> termsOf P\n\ngoal (1 subgoal):\n 1. good X", "by auto"], ["", "lemma absOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"A : absOf P\"\nshows \"goodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n  A \\<in> absOf P\n\ngoal (1 subgoal):\n 1. goodAbs A", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  Ball (termsOf P) good \\<and>\n  Ball (absOf P) goodAbs \\<and> Ball (envsOf P) goodEnv\n  A \\<in> absOf P\n\ngoal (1 subgoal):\n 1. goodAbs A", "by auto"], ["", "lemma envsOf_preserves_good[simp]:\nassumes \"goodPar P\" and \"rho : envsOf P\"\nshows \"goodEnv rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv rho", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. goodEnv rho", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  Ball (termsOf P) good \\<and>\n  Ball (absOf P) goodAbs \\<and> Ball (envsOf P) goodEnv\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. goodEnv rho", "by blast"], ["", "lemmas param_simps =\ntermsOf.simps absOf.simps envsOf.simps\nPar_preserves_good\ntermsOf_preserves_good absOf_preserves_good envsOf_preserves_good"], ["", "subsection \\<open>Items versus quasi-items modulo alpha\\<close>"], ["", "text\\<open>Here we ``close the accounts\" (for a while) with quasi-items  --\n beyond this subsection, there will not be any theorem that mentions\n quasi-items, except much later when we deal with iteration principles\n (and need to briefly switch back to quasi-terms in order to define the needed\n iterative map by the universality of the alpha-quotient).\\<close>"], ["", "subsubsection \\<open>For terms\\<close>"], ["", "lemma alphaGood_equivP: \"equivP qGood alphaGood\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivP qGood alphaGood", "unfolding equivP_def reflP_def symP_def transP_def alphaGood_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>x y.\n         qGood x \\<and> qGood y \\<and> x #= y \\<or>\n         qGood y \\<and> qGood x \\<and> y #= x \\<longrightarrow>\n         qGood x) \\<and>\n     (\\<forall>x.\n         qGood x \\<longrightarrow>\n         qGood x \\<and> qGood x \\<and> x #= x)) \\<and>\n    (\\<forall>x y.\n        qGood x \\<and> qGood y \\<and> x #= y \\<longrightarrow>\n        qGood y \\<and> qGood x \\<and> y #= x) \\<and>\n    (\\<forall>x y z.\n        (qGood x \\<and> qGood y \\<and> x #= y) \\<and>\n        qGood y \\<and> qGood z \\<and> y #= z \\<longrightarrow>\n        qGood x \\<and> qGood z \\<and> x #= z)", "using alpha_refl alpha_sym alpha_trans"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. ((\\<forall>x y.\n         qGood x \\<and> qGood y \\<and> x #= y \\<or>\n         qGood y \\<and> qGood x \\<and> y #= x \\<longrightarrow>\n         qGood x) \\<and>\n     (\\<forall>x.\n         qGood x \\<longrightarrow>\n         qGood x \\<and> qGood x \\<and> x #= x)) \\<and>\n    (\\<forall>x y.\n        qGood x \\<and> qGood y \\<and> x #= y \\<longrightarrow>\n        qGood y \\<and> qGood x \\<and> y #= x) \\<and>\n    (\\<forall>x y z.\n        (qGood x \\<and> qGood y \\<and> x #= y) \\<and>\n        qGood y \\<and> qGood z \\<and> y #= z \\<longrightarrow>\n        qGood x \\<and> qGood z \\<and> x #= z)", "by blast"], ["", "lemma univ_asTerm_alphaGood[simp]:\nassumes *: \"congruentP alphaGood f\" and **: \"qGood X\"\nshows \"univ f (asTerm X) = f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ f (asTerm X) = f X", "by (metis assms alphaGood_equivP asTerm_def univ_commute)"], ["", "corollary univ_asTerm_alpha[simp]:\nassumes *: \"congruentP alpha f\" and **: \"qGood X\"\nshows \"univ f (asTerm X) = f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ f (asTerm X) = f X", "apply(rule univ_asTerm_alphaGood)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f respectsP alphaGood\n 2. qGood X", "using assms"], ["proof (prove)\nusing this:\n  f respectsP (#=)\n  qGood X\n\ngoal (2 subgoals):\n 1. f respectsP alphaGood\n 2. qGood X", "unfolding alphaGood_def congruentP_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x #= y \\<longrightarrow> f x = f y\n  qGood X\n\ngoal (2 subgoals):\n 1. \\<forall>x y.\n       qGood x \\<and> qGood y \\<and> x #= y \\<longrightarrow> f x = f y\n 2. qGood X", "by auto"], ["", "lemma pick_inj_on_good: \"inj_on pick (Collect good)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pick (Collect good)", "unfolding good_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pick (Collect (qGood /// alphaGood))", "using alphaGood_equivP equivP_pick_inj_on"], ["proof (prove)\nusing this:\n  equivP qGood alphaGood\n  equivP ?P ?\\<phi> \\<Longrightarrow> inj_on pick (Collect (?P /// ?\\<phi>))\n\ngoal (1 subgoal):\n 1. inj_on pick (Collect (qGood /// alphaGood))", "by auto"], ["", "lemma pick_injective_good[simp]:\n\"\\<lbrakk>good X; good Y\\<rbrakk> \\<Longrightarrow> (pick X = pick Y) = (X = Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X; good Y\\<rbrakk>\n    \\<Longrightarrow> (pick X = pick Y) = (X = Y)", "using pick_inj_on_good"], ["proof (prove)\nusing this:\n  inj_on pick (Collect good)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X; good Y\\<rbrakk>\n    \\<Longrightarrow> (pick X = pick Y) = (X = Y)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>Collect good.\n     \\<forall>y\\<in>Collect good. pick x = pick y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X; good Y\\<rbrakk>\n    \\<Longrightarrow> (pick X = pick Y) = (X = Y)", "by auto"], ["", "lemma good_imp_qGood_pick:\n\"good X \\<Longrightarrow> qGood (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> qGood (pick X)", "unfolding good_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood /// alphaGood) X \\<Longrightarrow> qGood (pick X)", "by (metis alphaGood_equivP equivP_pick_preserves)"], ["", "lemma qGood_iff_good_asTerm:\n\"good (asTerm qX) = qGood qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (asTerm qX) = qGood qX", "unfolding good_def asTerm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood /// alphaGood) (proj alphaGood qX) = qGood qX", "using alphaGood_equivP proj_in_iff"], ["proof (prove)\nusing this:\n  equivP qGood alphaGood\n  equivP ?P ?\\<phi> \\<Longrightarrow>\n  (?P /// ?\\<phi>) (proj ?\\<phi> ?x) = ?P ?x\n\ngoal (1 subgoal):\n 1. (qGood /// alphaGood) (proj alphaGood qX) = qGood qX", "by fastforce"], ["", "lemma pick_asTerm:\nassumes \"qGood qX\"\nshows \"pick (asTerm qX) #= qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (asTerm qX) #= qX", "by (metis (full_types) alphaGood_def alphaGood_equivP asTerm_def assms pick_proj)"], ["", "lemma asTerm_pick:\nassumes \"good X\"\nshows \"asTerm (pick X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm (pick X) = X", "by (metis alphaGood_equivP asTerm_def assms good_def proj_pick)"], ["", "lemma pick_alpha: \"good X \\<Longrightarrow> pick X #= pick X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> pick X #= pick X", "using good_imp_qGood_pick alpha_refl"], ["proof (prove)\nusing this:\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> pick X #= pick X", "by auto"], ["", "lemma alpha_imp_asTerm_equal:\nassumes \"qGood qX\" and \"qX #= qY\"\nshows \"asTerm qX = asTerm qY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm qX = asTerm qY", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. asTerm qX = asTerm qY", "have \"alphaGood qX qY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaGood qX qY", "unfolding alphaGood_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood qX \\<and> qGood qY \\<and> qX #= qY", "using assms"], ["proof (prove)\nusing this:\n  qGood qX\n  qX #= qY\n\ngoal (1 subgoal):\n 1. qGood qX \\<and> qGood qY \\<and> qX #= qY", "by (metis alpha_preserves_qGood)"], ["proof (state)\nthis:\n  alphaGood qX qY\n\ngoal (1 subgoal):\n 1. asTerm qX = asTerm qY", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaGood qX qY\n\ngoal (1 subgoal):\n 1. asTerm qX = asTerm qY", "unfolding asTerm_def"], ["proof (prove)\nusing this:\n  alphaGood qX qY\n\ngoal (1 subgoal):\n 1. proj alphaGood qX = proj alphaGood qY", "using alphaGood_equivP proj_iff"], ["proof (prove)\nusing this:\n  alphaGood qX qY\n  equivP qGood alphaGood\n  \\<lbrakk>equivP ?P ?\\<phi>; ?P ?x; ?P ?y\\<rbrakk>\n  \\<Longrightarrow> (proj ?\\<phi> ?x = proj ?\\<phi> ?y) = ?\\<phi> ?x ?y\n\ngoal (1 subgoal):\n 1. proj alphaGood qX = proj alphaGood qY", "by (metis alpha_preserves_qGood1 assms)"], ["proof (state)\nthis:\n  asTerm qX = asTerm qY\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma asTerm_equal_imp_alpha:\nassumes \"qGood qX\" and \"asTerm qX = asTerm qY\"\nshows \"qX #= qY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qX #= qY", "by (metis alphaAll_sym alphaAll_trans assms pick_asTerm qGood_iff_good_asTerm)"], ["", "lemma asTerm_equal_iff_alpha:\nassumes \"qGood qX \\<or> qGood qY\"\nshows \"(asTerm qX = asTerm qY) = (qX #= qY)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (asTerm qX = asTerm qY) = (qX #= qY)", "by (metis alpha_imp_asTerm_equal alpha_sym asTerm_equal_imp_alpha assms)"], ["", "lemma pick_alpha_iff_equal:\nassumes \"good X\" and \"good Y\"\nshows \"pick X #= pick Y \\<longleftrightarrow> X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick X #= pick Y) = (X = Y)", "by (metis asTerm_equal_iff_alpha asTerm_pick assms good_imp_qGood_pick)"], ["", "lemma pick_swap_qSwap:\nassumes \"good X\"\nshows \"pick (X #[x1 \\<and> x2]_xs) #= ((pick X) #[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (X #[x1 \\<and> x2]_xs) #= pick X #[[x1 \\<and> x2]]_xs", "by (metis assms good_imp_qGood_pick pick_asTerm qSwap_preserves_qGood1 swap_def)"], ["", "lemma asTerm_qSwap_swap:\nassumes \"qGood qX\"\nshows \"asTerm (qX #[[x1 \\<and> x2]]_xs) = ((asTerm qX) #[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm (qX #[[x1 \\<and> x2]]_xs) = asTerm qX #[x1 \\<and> x2]_xs", "by (simp add: alpha_imp_asTerm_equal alpha_sym assms local.swap_def \npick_asTerm qSwap_preserves_alpha qSwap_preserves_qGood1)"], ["", "lemma fresh_asTerm_qFresh:\nassumes \"qGood qX\"\nshows \"fresh xs x (asTerm qX) = qFresh xs x qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (asTerm qX) = qFresh xs x qX", "by (simp add: assms fresh_def pick_asTerm qFresh_preserves_alpha)"], ["", "(* Note that fresh and skel commute with pick by definition, so we only need\n  to prove they commute with asTerm.  *)"], ["", "lemma skel_asTerm_qSkel:\nassumes \"qGood qX\"\nshows \"skel (asTerm qX) = qSkel qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (asTerm qX) = qSkel qX", "by (simp add: alpha_qSkel assms pick_asTerm skel_def)"], ["", "lemma double_swap_qSwap:\nassumes \"good X\"\nshows \"qGood (((pick X) #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs') \\<and>\n       ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = asTerm (((pick X) #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X #[[x \\<and> y]]_zs #[[x' \\<and> y']]_zs') \\<and>\n    X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    asTerm (pick X #[[x \\<and> y]]_zs #[[x' \\<and> y']]_zs')", "by (simp add: asTerm_qSwap_swap assms \n    good_imp_qGood_pick local.swap_def qSwap_preserves_qGood1)"], ["", "lemma fresh_swap_qFresh_qSwap:\nassumes \"good X\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = qFresh xs x ((pick X) #[[y1 \\<and> y2]]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) =\n    qFresh xs x (pick X #[[y1 \\<and> y2]]_ys)", "by (simp add: assms \n    fresh_asTerm_qFresh good_imp_qGood_pick local.swap_def qSwap_preserves_qGood)"], ["", "subsubsection \\<open>For abstractions\\<close>"], ["", "lemma alphaAbsGood_equivP: \"equivP qGoodAbs alphaAbsGood\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivP qGoodAbs alphaAbsGood", "unfolding equivP_def reflP_def symP_def transP_def alphaAbsGood_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>x y.\n         qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y \\<or>\n         qGoodAbs y \\<and> qGoodAbs x \\<and> y $= x \\<longrightarrow>\n         qGoodAbs x) \\<and>\n     (\\<forall>x.\n         qGoodAbs x \\<longrightarrow>\n         qGoodAbs x \\<and> qGoodAbs x \\<and> x $= x)) \\<and>\n    (\\<forall>x y.\n        qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y \\<longrightarrow>\n        qGoodAbs y \\<and> qGoodAbs x \\<and> y $= x) \\<and>\n    (\\<forall>x y z.\n        (qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y) \\<and>\n        qGoodAbs y \\<and> qGoodAbs z \\<and> y $= z \\<longrightarrow>\n        qGoodAbs x \\<and> qGoodAbs z \\<and> x $= z)", "using alphaAbs_refl alphaAbs_sym alphaAbs_trans"], ["proof (prove)\nusing this:\n  qGoodAbs ?A \\<Longrightarrow> ?A $= ?A\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. ((\\<forall>x y.\n         qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y \\<or>\n         qGoodAbs y \\<and> qGoodAbs x \\<and> y $= x \\<longrightarrow>\n         qGoodAbs x) \\<and>\n     (\\<forall>x.\n         qGoodAbs x \\<longrightarrow>\n         qGoodAbs x \\<and> qGoodAbs x \\<and> x $= x)) \\<and>\n    (\\<forall>x y.\n        qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y \\<longrightarrow>\n        qGoodAbs y \\<and> qGoodAbs x \\<and> y $= x) \\<and>\n    (\\<forall>x y z.\n        (qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y) \\<and>\n        qGoodAbs y \\<and> qGoodAbs z \\<and> y $= z \\<longrightarrow>\n        qGoodAbs x \\<and> qGoodAbs z \\<and> x $= z)", "by blast"], ["", "lemma univ_asAbs_alphaAbsGood[simp]:\nassumes \"fAbs respectsP alphaAbsGood\" and \"qGoodAbs A\"\nshows \"univ fAbs (asAbs A) = fAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ fAbs (asAbs A) = fAbs A", "by (metis assms alphaAbsGood_equivP asAbs_def univ_commute)"], ["", "corollary univ_asAbs_alphaAbs[simp]:\nassumes *: \"fAbs respectsP alphaAbs\" and **: \"qGoodAbs A\"\nshows \"univ fAbs (asAbs A) = fAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ fAbs (asAbs A) = fAbs A", "apply(rule univ_asAbs_alphaAbsGood)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fAbs respectsP alphaAbsGood\n 2. qGoodAbs A", "using assms"], ["proof (prove)\nusing this:\n  fAbs respectsP ($=)\n  qGoodAbs A\n\ngoal (2 subgoals):\n 1. fAbs respectsP alphaAbsGood\n 2. qGoodAbs A", "unfolding alphaAbsGood_def congruentP_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x $= y \\<longrightarrow> fAbs x = fAbs y\n  qGoodAbs A\n\ngoal (2 subgoals):\n 1. \\<forall>x y.\n       qGoodAbs x \\<and> qGoodAbs y \\<and> x $= y \\<longrightarrow>\n       fAbs x = fAbs y\n 2. qGoodAbs A", "by auto"], ["", "lemma pick_inj_on_goodAbs: \"inj_on pick (Collect goodAbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pick (Collect goodAbs)", "unfolding goodAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pick (Collect (qGoodAbs /// alphaAbsGood))", "using alphaAbsGood_equivP equivP_pick_inj_on"], ["proof (prove)\nusing this:\n  equivP qGoodAbs alphaAbsGood\n  equivP ?P ?\\<phi> \\<Longrightarrow> inj_on pick (Collect (?P /// ?\\<phi>))\n\ngoal (1 subgoal):\n 1. inj_on pick (Collect (qGoodAbs /// alphaAbsGood))", "by auto"], ["", "lemma pick_injective_goodAbs[simp]:\n\"\\<lbrakk>goodAbs A; goodAbs B\\<rbrakk> \\<Longrightarrow> pick A = pick B \\<longleftrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodAbs A; goodAbs B\\<rbrakk>\n    \\<Longrightarrow> (pick A = pick B) = (A = B)", "using pick_inj_on_goodAbs"], ["proof (prove)\nusing this:\n  inj_on pick (Collect goodAbs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>goodAbs A; goodAbs B\\<rbrakk>\n    \\<Longrightarrow> (pick A = pick B) = (A = B)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>Collect goodAbs.\n     \\<forall>y\\<in>Collect goodAbs. pick x = pick y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>goodAbs A; goodAbs B\\<rbrakk>\n    \\<Longrightarrow> (pick A = pick B) = (A = B)", "by auto"], ["", "lemma goodAbs_imp_qGoodAbs_pick:\n\"goodAbs A \\<Longrightarrow> qGoodAbs (pick A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow> qGoodAbs (pick A)", "unfolding goodAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGoodAbs /// alphaAbsGood) A \\<Longrightarrow> qGoodAbs (pick A)", "using alphaAbsGood_equivP equivP_pick_preserves"], ["proof (prove)\nusing this:\n  equivP qGoodAbs alphaAbsGood\n  \\<lbrakk>equivP ?P ?\\<phi>; (?P /// ?\\<phi>) ?X\\<rbrakk>\n  \\<Longrightarrow> ?P (pick ?X)\n\ngoal (1 subgoal):\n 1. (qGoodAbs /// alphaAbsGood) A \\<Longrightarrow> qGoodAbs (pick A)", "by fastforce"], ["", "lemma qGoodAbs_iff_goodAbs_asAbs:\n\"goodAbs(asAbs qA) = qGoodAbs qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA) = qGoodAbs qA", "unfolding goodAbs_def asAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGoodAbs /// alphaAbsGood) (proj alphaAbsGood qA) = qGoodAbs qA", "using alphaAbsGood_equivP proj_in_iff"], ["proof (prove)\nusing this:\n  equivP qGoodAbs alphaAbsGood\n  equivP ?P ?\\<phi> \\<Longrightarrow>\n  (?P /// ?\\<phi>) (proj ?\\<phi> ?x) = ?P ?x\n\ngoal (1 subgoal):\n 1. (qGoodAbs /// alphaAbsGood) (proj alphaAbsGood qA) = qGoodAbs qA", "by fastforce"], ["", "lemma pick_asAbs:\nassumes \"qGoodAbs qA\"\nshows \"pick (asAbs qA) $= qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (asAbs qA) $= qA", "by (metis (full_types) alphaAbsGood_def alphaAbsGood_equivP asAbs_def assms pick_proj)"], ["", "lemma asAbs_pick:\nassumes \"goodAbs A\"\nshows \"asAbs (pick A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (pick A) = A", "by (metis alphaAbsGood_equivP asAbs_def assms goodAbs_def proj_pick)"], ["", "lemma pick_alphaAbs: \"goodAbs A \\<Longrightarrow> pick A $= pick A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow> pick A $= pick A", "using goodAbs_imp_qGoodAbs_pick alphaAbs_refl"], ["proof (prove)\nusing this:\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  qGoodAbs ?A \\<Longrightarrow> ?A $= ?A\n\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow> pick A $= pick A", "by auto"], ["", "lemma alphaAbs_imp_asAbs_equal:\nassumes \"qGoodAbs qA\" and \"qA $= qB\"\nshows \"asAbs qA = asAbs qB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs qA = asAbs qB", "by (metis (no_types, hide_lams) proj_iff alphaAbsGood_def alphaAbsGood_equivP \n alphaAbs_preserves_qGoodAbs asAbs_def assms)"], ["", "lemma asAbs_equal_imp_alphaAbs:\nassumes \"qGoodAbs qA\" and \"asAbs qA = asAbs qB\"\nshows \"qA $= qB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qA $= qB", "by (metis alphaAbs_refl \n  alphaAbs_sym alphaAbs_trans_twice assms pick_asAbs qGoodAbs_iff_goodAbs_asAbs)"], ["", "lemma asAbs_equal_iff_alphaAbs:\nassumes \"qGoodAbs qA \\<or> qGoodAbs qB\"\nshows \"(asAbs qA = asAbs qB) = (qA $= qB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (asAbs qA = asAbs qB) = (qA $= qB)", "by (metis alphaAbs_imp_asAbs_equal alphaAbs_preserves_qGoodAbs \n asAbs_equal_imp_alphaAbs assms)"], ["", "lemma pick_alphaAbs_iff_equal:\nassumes \"goodAbs A\" and \"goodAbs B\"\nshows \"(pick A $= pick B) = (A = B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick A $= pick B) = (A = B)", "using asAbs_equal_iff_alphaAbs asAbs_pick assms goodAbs_imp_qGoodAbs_pick"], ["proof (prove)\nusing this:\n  qGoodAbs ?qA \\<or> qGoodAbs ?qB \\<Longrightarrow>\n  (asAbs ?qA = asAbs ?qB) = (?qA $= ?qB)\n  goodAbs ?A \\<Longrightarrow> asAbs (pick ?A) = ?A\n  goodAbs A\n  goodAbs B\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n\ngoal (1 subgoal):\n 1. (pick A $= pick B) = (A = B)", "by blast"], ["", "lemma pick_swapAbs_qSwapAbs:\nassumes \"goodAbs A\"\nshows \"pick (A $[x1 \\<and> x2]_xs) $= ((pick A) $[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (A $[x1 \\<and> x2]_xs) $= pick A $[[x1 \\<and> x2]]_xs", "by (simp add: assms goodAbs_imp_qGoodAbs_pick \n pick_asAbs qSwapAbs_preserves_qGoodAbs swapAbs_def)"], ["", "lemma asAbs_qSwapAbs_swapAbs:\nassumes \"qGoodAbs qA\"\nshows \"asAbs (qA $[[x1 \\<and> x2]]_xs) = ((asAbs qA) $[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qA $[[x1 \\<and> x2]]_xs) = asAbs qA $[x1 \\<and> x2]_xs", "by (simp add: alphaAbs_imp_asAbs_equal alphaAbs_sym assms pick_asAbs \n   qSwapAbs_preserves_alphaAbs \n  qSwapAbs_preserves_qGoodAbs1 swapAbs_def)"], ["", "lemma freshAbs_asAbs_qFreshAbs:\nassumes \"qGoodAbs qA\"\nshows \"freshAbs xs x (asAbs qA) = qFreshAbs xs x qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs xs x (asAbs qA) = qFreshAbs xs x qA", "by (simp add: assms freshAbs_def pick_asAbs qFreshAbs_preserves_alphaAbs)"], ["", "lemma skelAbs_asAbs_qSkelAbs:\nassumes \"qGoodAbs qA\"\nshows \"skelAbs (asAbs qA) = qSkelAbs qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelAbs (asAbs qA) = qSkelAbs qA", "by (simp add: alphaAll_qSkelAll assms pick_asAbs skelAbs_def)"], ["", "subsubsection \\<open>For inputs\\<close>"], ["", "text \\<open>For unbound inputs:\\<close>"], ["", "lemma pickInp_inj_on_goodInp: \"inj_on pickInp (Collect goodInp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pickInp (Collect goodInp)", "unfolding pickInp_def[abs_def] inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Collect goodInp.\n       \\<forall>y\\<in>Collect goodInp.\n          lift pick x = lift pick y \\<longrightarrow> x = y", "proof(safe, rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodInp x; goodInp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "fix inp inp' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodInp x; goodInp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "assume good: \"goodInp inp\" \"goodInp inp'\" and *: \"lift pick inp = lift pick inp'\""], ["proof (state)\nthis:\n  goodInp inp\n  goodInp inp'\n  lift pick inp = lift pick inp'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodInp x; goodInp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "show \"inp i = inp' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp i = inp' i", "proof(cases \"inp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "assume inp: \"inp i = None\""], ["proof (state)\nthis:\n  inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift pick inp i = None\""], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. lift pick inp i = None", "by (auto simp add: lift_None)"], ["proof (state)\nthis:\n  lift pick inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift pick inp' i = None\""], ["proof (prove)\nusing this:\n  lift pick inp i = None\n\ngoal (1 subgoal):\n 1. lift pick inp' i = None", "using *"], ["proof (prove)\nusing this:\n  lift pick inp i = None\n  lift pick inp = lift pick inp'\n\ngoal (1 subgoal):\n 1. lift pick inp' i = None", "by simp"], ["proof (state)\nthis:\n  lift pick inp' i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"inp' i = None\""], ["proof (prove)\nusing this:\n  lift pick inp' i = None\n\ngoal (1 subgoal):\n 1. inp' i = None", "by (auto simp add: lift_None)"], ["proof (state)\nthis:\n  inp' i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  inp' i = None\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "using inp"], ["proof (prove)\nusing this:\n  inp' i = None\n  inp i = None\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "by simp"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "assume inp: \"inp i = Some X\""], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift pick inp i = Some (pick X)\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. lift pick inp i = Some (pick X)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (pick v)) =\n    Some (pick X)", "by simp"], ["proof (state)\nthis:\n  lift pick inp i = Some (pick X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift pick inp' i = Some (pick X)\""], ["proof (prove)\nusing this:\n  lift pick inp i = Some (pick X)\n\ngoal (1 subgoal):\n 1. lift pick inp' i = Some (pick X)", "using *"], ["proof (prove)\nusing this:\n  lift pick inp i = Some (pick X)\n  lift pick inp = lift pick inp'\n\ngoal (1 subgoal):\n 1. lift pick inp' i = Some (pick X)", "by simp"], ["proof (state)\nthis:\n  lift pick inp' i = Some (pick X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "then"], ["proof (chain)\npicking this:\n  lift pick inp' i = Some (pick X)", "obtain X' where inp': \"inp' i = Some X'\" and XX': \"pick X = pick X'\""], ["proof (prove)\nusing this:\n  lift pick inp' i = Some (pick X)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>inp' i = Some X'; pick X = pick X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case inp' i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (pick v)) =\n  Some (pick X)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>inp' i = Some X'; pick X = pick X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"inp' i\", auto)"], ["proof (state)\nthis:\n  inp' i = Some X'\n  pick X = pick X'\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"good X \\<and> good X'\""], ["proof (prove)\nusing this:\n  inp' i = Some X'\n  pick X = pick X'\n\ngoal (1 subgoal):\n 1. good X \\<and> good X'", "using inp good goodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  inp' i = Some X'\n  pick X = pick X'\n  inp i = Some X\n  goodInp inp\n  goodInp inp'\n  goodInp ?inp \\<equiv>\n  liftAll good ?inp \\<and> |{i. ?inp i \\<noteq> None}| <o |UNIV|\n  liftAll ?phi ?inp \\<equiv>\n  \\<forall>i v. ?inp i = Some v \\<longrightarrow> ?phi v\n\ngoal (1 subgoal):\n 1. good X \\<and> good X'", "by (metis (hide_lams, full_types))"], ["proof (state)\nthis:\n  good X \\<and> good X'\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"X = X'\""], ["proof (prove)\nusing this:\n  good X \\<and> good X'\n\ngoal (1 subgoal):\n 1. X = X'", "using XX'"], ["proof (prove)\nusing this:\n  good X \\<and> good X'\n  pick X = pick X'\n\ngoal (1 subgoal):\n 1. X = X'", "by auto"], ["proof (state)\nthis:\n  X = X'\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  X = X'\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "unfolding inp inp'"], ["proof (prove)\nusing this:\n  X = X'\n\ngoal (1 subgoal):\n 1. Some X = Some X'", "by simp"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma goodInp_imp_qGoodInp_pickInp:\nassumes \"goodInp inp\"\nshows \"qGoodInp (pickInp inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp (pickInp inp)", "unfolding pickInp_def qGoodInp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift pick inp i = Some v \\<longrightarrow> qGood v) \\<and>\n    |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick inp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "fix i qX"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick inp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "assume \"lift pick inp i = Some qX\""], ["proof (state)\nthis:\n  lift pick inp i = Some qX\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick inp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  lift pick inp i = Some qX", "obtain X where inp: \"inp i = Some X\" and qX: \"qX = pick X\""], ["proof (prove)\nusing this:\n  lift pick inp i = Some qX\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>inp i = Some X; qX = pick X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case inp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (pick v)) =\n  Some qX\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>inp i = Some X; qX = pick X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"inp i\", auto)"], ["proof (state)\nthis:\n  inp i = Some X\n  qX = pick X\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick inp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "hence \"good X\""], ["proof (prove)\nusing this:\n  inp i = Some X\n  qX = pick X\n\ngoal (1 subgoal):\n 1. good X", "using assms"], ["proof (prove)\nusing this:\n  inp i = Some X\n  qX = pick X\n  goodInp inp\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  qX = pick X\n  (\\<forall>i v. inp i = Some v \\<longrightarrow> good v) \\<and>\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. good X", "by simp"], ["proof (state)\nthis:\n  good X\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick inp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "thus \"qGood qX\""], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. qGood qX", "unfolding qX"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "using good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. lift pick inp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. inp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift pick inp i \\<noteq> None} = {i. inp i \\<noteq> None}", "by(force simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift pick inp i \\<noteq> None} = {i. inp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift pick inp i \\<noteq> None} = {i. inp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  {i. lift pick inp i \\<noteq> None} = {i. inp i \\<noteq> None}\n  goodInp inp\n\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "unfolding goodInp_def"], ["proof (prove)\nusing this:\n  {i. lift pick inp i \\<noteq> None} = {i. inp i \\<noteq> None}\n  liftAll good inp \\<and> |{i. inp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift pick inp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift pick inp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qGoodInp_iff_goodInp_asInp:\n\"goodInp (asInp qinp) = qGoodInp qinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (asInp qinp) = qGoodInp qinp", "proof(unfold asInp_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "let ?inp = \"lift asTerm qinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "assume qgood_qinp: \"qGoodInp qinp\""], ["proof (state)\nthis:\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "have \"goodInp ?inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp)", "unfolding goodInp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift asTerm qinp i = Some v \\<longrightarrow> good v) \\<and>\n    |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift asTerm qinp i = Some v \\<Longrightarrow> good v\n 2. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "fix i X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift asTerm qinp i = Some v \\<Longrightarrow> good v\n 2. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "assume inp: \"?inp i = Some X\""], ["proof (state)\nthis:\n  lift asTerm qinp i = Some X\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asTerm qinp i = Some v \\<Longrightarrow> good v\n 2. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  lift asTerm qinp i = Some X", "obtain qX where qinp: \"qinp i = Some qX\" and X: \"X = asTerm qX\""], ["proof (prove)\nusing this:\n  lift asTerm qinp i = Some X\n\ngoal (1 subgoal):\n 1. (\\<And>qX.\n        \\<lbrakk>qinp i = Some qX; X = asTerm qX\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case qinp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (asTerm v)) =\n  Some X\n\ngoal (1 subgoal):\n 1. (\\<And>qX.\n        \\<lbrakk>qinp i = Some qX; X = asTerm qX\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qinp i\", auto)"], ["proof (state)\nthis:\n  qinp i = Some qX\n  X = asTerm qX\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asTerm qinp i = Some v \\<Longrightarrow> good v\n 2. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "hence \"qGood qX\""], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  X = asTerm qX\n\ngoal (1 subgoal):\n 1. qGood qX", "using qgood_qinp"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  X = asTerm qX\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. qGood qX", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  X = asTerm qX\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood qX", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asTerm qinp i = Some v \\<Longrightarrow> good v\n 2. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "thus \"good X\""], ["proof (prove)\nusing this:\n  qGood qX\n\ngoal (1 subgoal):\n 1. good X", "using X qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  qGood qX\n  X = asTerm qX\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good X", "by auto"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. lift asTerm qinp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. qinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift asTerm qinp i \\<noteq> None} = {i. qinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift asTerm qinp i \\<noteq> None} = {i. qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift asTerm qinp i \\<noteq> None} = {i. qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "using qgood_qinp"], ["proof (prove)\nusing this:\n  {i. lift asTerm qinp i \\<noteq> None} = {i. qinp i \\<noteq> None}\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "unfolding qGoodInp_def"], ["proof (prove)\nusing this:\n  {i. lift asTerm qinp i \\<noteq> None} = {i. qinp i \\<noteq> None}\n  liftAll qGood qinp \\<and> |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "}"], ["proof (state)\nthis:\n  qGoodInp qinp \\<Longrightarrow> goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "moreover"], ["proof (state)\nthis:\n  qGoodInp qinp \\<Longrightarrow> goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "{"], ["proof (state)\nthis:\n  qGoodInp qinp \\<Longrightarrow> goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "assume good_inp: \"goodInp ?inp\""], ["proof (state)\nthis:\n  goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "have \"qGoodInp qinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp qinp", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n    |{i. qinp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "fix i qX"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "assume qinp: \"qinp i = Some qX\""], ["proof (state)\nthis:\n  qinp i = Some qX\n\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "let ?X = \"asTerm qX\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "have inp: \"?inp i = Some ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asTerm qinp i = Some (asTerm qX)", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case qinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v)) =\n    Some (asTerm qX)", "using qinp"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. (case qinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v)) =\n    Some (asTerm qX)", "by simp"], ["proof (state)\nthis:\n  lift asTerm qinp i = Some (asTerm qX)\n\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "hence \"good ?X\""], ["proof (prove)\nusing this:\n  lift asTerm qinp i = Some (asTerm qX)\n\ngoal (1 subgoal):\n 1. good (asTerm qX)", "using good_inp"], ["proof (prove)\nusing this:\n  lift asTerm qinp i = Some (asTerm qX)\n  goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. good (asTerm qX)", "unfolding goodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  lift asTerm qinp i = Some (asTerm qX)\n  (\\<forall>i v.\n      lift asTerm qinp i = Some v \\<longrightarrow> good v) \\<and>\n  |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. good (asTerm qX)", "by auto"], ["proof (state)\nthis:\n  good (asTerm qX)\n\ngoal (2 subgoals):\n 1. \\<And>i v. qinp i = Some v \\<Longrightarrow> qGood v\n 2. |{i. qinp i \\<noteq> None}| <o |UNIV|", "thus \"qGood qX\""], ["proof (prove)\nusing this:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. qGood qX", "using qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  good (asTerm qX)\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. qGood qX", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. qinp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. lift asTerm qinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. qinp i \\<noteq> None} = {i. lift asTerm qinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. qinp i \\<noteq> None} = {i. lift asTerm qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. qinp i \\<noteq> None} = {i. lift asTerm qinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "using good_inp"], ["proof (prove)\nusing this:\n  {i. qinp i \\<noteq> None} = {i. lift asTerm qinp i \\<noteq> None}\n  goodInp (lift asTerm qinp)\n\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "unfolding goodInp_def"], ["proof (prove)\nusing this:\n  {i. qinp i \\<noteq> None} = {i. lift asTerm qinp i \\<noteq> None}\n  liftAll good (lift asTerm qinp) \\<and>\n  |{i. lift asTerm qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. qinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "}"], ["proof (state)\nthis:\n  goodInp (lift asTerm qinp) \\<Longrightarrow> qGoodInp qinp\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "ultimately"], ["proof (chain)\npicking this:\n  qGoodInp qinp \\<Longrightarrow> goodInp (lift asTerm qinp)\n  goodInp (lift asTerm qinp) \\<Longrightarrow> qGoodInp qinp", "show \"goodInp ?inp = qGoodInp qinp\""], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<Longrightarrow> goodInp (lift asTerm qinp)\n  goodInp (lift asTerm qinp) \\<Longrightarrow> qGoodInp qinp\n\ngoal (1 subgoal):\n 1. goodInp (lift asTerm qinp) = qGoodInp qinp", "by blast"], ["proof (state)\nthis:\n  goodInp (lift asTerm qinp) = qGoodInp qinp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pickInp_asInp:\nassumes \"qGoodInp qinp\"\nshows \"pickInp (asInp qinp) %= qinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickInp (asInp qinp), qinp) \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. (pickInp (asInp qinp), qinp) \\<in> alphaInp", "unfolding pickInp_def asInp_def lift_comp"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> asTerm) qinp, qinp) \\<in> alphaInp", "by (smt CollectI alphaInp_def asTerm_equal_iff_alpha asTerm_pick case_prodI comp_apply liftAll2_def liftAll_def lift_def option.case(2) option.sel qGoodInp_def qGood_iff_good_asTerm \nsameDom_lift2)"], ["", "lemma asInp_pickInp:\nassumes \"goodInp inp\"\nshows \"asInp (pickInp inp) = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asInp (pickInp inp) = inp", "unfolding asInp_def pickInp_def lift_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (asTerm \\<circ> pick) inp = inp", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (asTerm \\<circ> pick) inp x = inp x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (asTerm \\<circ> pick) inp x = inp x", "show \"lift (asTerm \\<circ> pick) inp i = inp i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (asTerm \\<circ> pick) inp i = inp i", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some ((asTerm \\<circ> pick) v)) =\n    inp i", "proof(cases \"inp i\", simp+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> asTerm (pick a) = a", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> asTerm (pick a) = a", "assume \"inp i = Some X\""], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> asTerm (pick a) = a", "hence \"good X\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. good X", "using assms"], ["proof (prove)\nusing this:\n  inp i = Some X\n  goodInp inp\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  (\\<forall>i v. inp i = Some v \\<longrightarrow> good v) \\<and>\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. good X", "by simp"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> asTerm (pick a) = a", "thus \"asTerm (pick X) = X\""], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. asTerm (pick X) = X", "using asTerm_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n\ngoal (1 subgoal):\n 1. asTerm (pick X) = X", "by auto"], ["proof (state)\nthis:\n  asTerm (pick X) = X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift (asTerm \\<circ> pick) inp i = inp i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pickInp_alphaInp:\nassumes goodInp: \"goodInp inp\"\nshows \"pickInp inp %= pickInp inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickInp inp, pickInp inp) \\<in> alphaInp", "using assms goodInp_imp_qGoodInp_pickInp alphaInp_refl"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  qGoodInp ?qinp \\<Longrightarrow> (?qinp, ?qinp) \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (pickInp inp, pickInp inp) \\<in> alphaInp", "by auto"], ["", "lemma alphaInp_imp_asInp_equal:\nassumes \"qGoodInp qinp\" and \"qinp %= qinp'\"\nshows \"asInp qinp = asInp qinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asInp qinp = asInp qinp'", "unfolding asInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asTerm qinp = lift asTerm qinp'", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift asTerm qinp x = lift asTerm qinp' x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift asTerm qinp x = lift asTerm qinp' x", "show \"lift asTerm qinp i = lift asTerm qinp' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asTerm qinp i = lift asTerm qinp' i", "proof(cases \"qinp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. qinp i = None \\<Longrightarrow> lift asTerm qinp i = lift asTerm qinp' i\n 2. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "assume Case1: \"qinp i = None\""], ["proof (state)\nthis:\n  qinp i = None\n\ngoal (2 subgoals):\n 1. qinp i = None \\<Longrightarrow> lift asTerm qinp i = lift asTerm qinp' i\n 2. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "hence \"qinp' i = None\""], ["proof (prove)\nusing this:\n  qinp i = None\n\ngoal (1 subgoal):\n 1. qinp' i = None", "using assms"], ["proof (prove)\nusing this:\n  qinp i = None\n  qGoodInp qinp\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. qinp' i = None", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp i = None\n  qGoodInp qinp\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. qinp' i = None", "by auto"], ["proof (state)\nthis:\n  qinp' i = None\n\ngoal (2 subgoals):\n 1. qinp i = None \\<Longrightarrow> lift asTerm qinp i = lift asTerm qinp' i\n 2. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  qinp' i = None\n\ngoal (1 subgoal):\n 1. lift asTerm qinp i = lift asTerm qinp' i", "using Case1"], ["proof (prove)\nusing this:\n  qinp' i = None\n  qinp i = None\n\ngoal (1 subgoal):\n 1. lift asTerm qinp i = lift asTerm qinp' i", "unfolding lift_def"], ["proof (prove)\nusing this:\n  qinp' i = None\n  qinp i = None\n\ngoal (1 subgoal):\n 1. (case qinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v)) =\n    (case qinp' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v))", "by simp"], ["proof (state)\nthis:\n  lift asTerm qinp i = lift asTerm qinp' i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "fix qX"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "assume Case2: \"qinp i = Some qX\""], ["proof (state)\nthis:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "then"], ["proof (chain)\npicking this:\n  qinp i = Some qX", "obtain qX' where qinp': \"qinp' i = Some qX'\""], ["proof (prove)\nusing this:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qGoodInp qinp\n  (qinp, qinp') \\<in> alphaInp\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qGoodInp qinp\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qX'.\n        qinp' i = Some qX' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"qinp' i\", force)"], ["proof (state)\nthis:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "hence \"qX #= qX'\""], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n\ngoal (1 subgoal):\n 1. qX #= qX'", "using assms Case2"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  qGoodInp qinp\n  (qinp, qinp') \\<in> alphaInp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qX #= qX'", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qinp' i = Some qX'\n  qGoodInp qinp\n  (qinp, qinp')\n  \\<in> {(qinp, qinp').\n         (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n             v1 #= v2)}\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qX #= qX'", "by auto"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "moreover"], ["proof (state)\nthis:\n  qX #= qX'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "have \"qGood qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood qX", "using assms Case2"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  (qinp, qinp') \\<in> alphaInp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  (qinp, qinp') \\<in> alphaInp\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qinp i = Some a \\<Longrightarrow>\n       lift asTerm qinp i = lift asTerm qinp' i", "ultimately"], ["proof (chain)\npicking this:\n  qX #= qX'\n  qGood qX", "show ?thesis"], ["proof (prove)\nusing this:\n  qX #= qX'\n  qGood qX\n\ngoal (1 subgoal):\n 1. lift asTerm qinp i = lift asTerm qinp' i", "using Case2 qinp' alpha_imp_asTerm_equal"], ["proof (prove)\nusing this:\n  qX #= qX'\n  qGood qX\n  qinp i = Some qX\n  qinp' i = Some qX'\n  \\<lbrakk>qGood ?qX; ?qX #= ?qY\\<rbrakk>\n  \\<Longrightarrow> asTerm ?qX = asTerm ?qY\n\ngoal (1 subgoal):\n 1. lift asTerm qinp i = lift asTerm qinp' i", "unfolding lift_def"], ["proof (prove)\nusing this:\n  qX #= qX'\n  qGood qX\n  qinp i = Some qX\n  qinp' i = Some qX'\n  \\<lbrakk>qGood ?qX; ?qX #= ?qY\\<rbrakk>\n  \\<Longrightarrow> asTerm ?qX = asTerm ?qY\n\ngoal (1 subgoal):\n 1. (case qinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v)) =\n    (case qinp' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm v))", "by auto"], ["proof (state)\nthis:\n  lift asTerm qinp i = lift asTerm qinp' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift asTerm qinp i = lift asTerm qinp' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma asInp_equal_imp_alphaInp:\nassumes \"qGoodInp qinp\" and \"asInp qinp = asInp qinp'\"\nshows \"qinp %= qinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qinp, qinp') \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  asInp qinp = asInp qinp'\n\ngoal (1 subgoal):\n 1. (qinp, qinp') \\<in> alphaInp", "unfolding alphaInp_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  asInp qinp = asInp qinp'\n\ngoal (1 subgoal):\n 1. (qinp, qinp')\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by simp (smt asInp_def asTerm_equal_iff_alpha liftAll_def lift_def option.case(2) \n  option.sel qGoodInp_def sameDom_def sameDom_lift2)"], ["", "lemma asInp_equal_iff_alphaInp:\n\"qGoodInp qinp \\<Longrightarrow> (asInp qinp = asInp qinp') = (qinp %= qinp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<Longrightarrow>\n    (asInp qinp = asInp qinp') = ((qinp, qinp') \\<in> alphaInp)", "using asInp_equal_imp_alphaInp alphaInp_imp_asInp_equal"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGoodInp ?qinp; asInp ?qinp = asInp ?qinp'\\<rbrakk>\n  \\<Longrightarrow> (?qinp, ?qinp') \\<in> alphaInp\n  \\<lbrakk>qGoodInp ?qinp; (?qinp, ?qinp') \\<in> alphaInp\\<rbrakk>\n  \\<Longrightarrow> asInp ?qinp = asInp ?qinp'\n\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<Longrightarrow>\n    (asInp qinp = asInp qinp') = ((qinp, qinp') \\<in> alphaInp)", "by blast"], ["", "lemma pickInp_alphaInp_iff_equal:\nassumes \"goodInp inp\" and \"goodInp inp'\"\nshows \"(pickInp inp %= pickInp inp') = (inp = inp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((pickInp inp, pickInp inp') \\<in> alphaInp) = (inp = inp')", "by (metis alphaInp_imp_asInp_equal asInp_equal_imp_alphaInp \n asInp_pickInp assms goodInp_imp_qGoodInp_pickInp)"], ["", "lemma pickInp_swapInp_qSwapInp:\nassumes \"goodInp inp\"\nshows \"pickInp (inp %[x1 \\<and> x2]_xs) %= ((pickInp inp) %[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickInp (inp %[x1 \\<and> x2]_xs), qSwapInp xs x1 x2 (pickInp inp))\n    \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n\ngoal (1 subgoal):\n 1. (pickInp (inp %[x1 \\<and> x2]_xs), qSwapInp xs x1 x2 (pickInp inp))\n    \\<in> alphaInp", "unfolding alphaInp_def sameDom_def liftAll2_def \npickInp_def swapInp_def qSwapInp_def lift_comp"], ["proof (prove)\nusing this:\n  goodInp inp\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> swap xs x1 x2) inp,\n     lift (qSwap xs x1 x2 \\<circ> pick) inp)\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by (simp add: lift_None)  \n(smt assms comp_apply goodInp_imp_qGoodInp_pickInp liftAll_def lift_def local.swap_def option.case_eq_if option.sel option.simps(3) pickInp_def \npick_asTerm qGoodInp_def qSwap_preserves_qGood1)"], ["", "lemma asInp_qSwapInp_swapInp:\nassumes \"qGoodInp qinp\"\nshows \"asInp (qinp %[[x1 \\<and> x2]]_xs) = ((asInp qinp) %[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "fix i qX"], ["proof (state)\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "assume \"qinp i = Some qX\""], ["proof (state)\nthis:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "hence \"qGood qX\""], ["proof (prove)\nusing this:\n  qinp i = Some qX\n\ngoal (1 subgoal):\n 1. qGood qX", "using assms"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. qGood qX", "unfolding qGoodInp_def liftAll_def"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  (\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood qX", "by auto"], ["proof (state)\nthis:\n  qGood qX\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "hence \"asTerm (qX #[[x1 \\<and> x2]]_xs) = swap xs x1 x2 (asTerm qX)\""], ["proof (prove)\nusing this:\n  qGood qX\n\ngoal (1 subgoal):\n 1. asTerm (qX #[[x1 \\<and> x2]]_xs) = asTerm qX #[x1 \\<and> x2]_xs", "by(auto simp add: asTerm_qSwap_swap)"], ["proof (state)\nthis:\n  asTerm (qX #[[x1 \\<and> x2]]_xs) = asTerm qX #[x1 \\<and> x2]_xs\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "}"], ["proof (state)\nthis:\n  qinp ?i92 = Some ?qX92 \\<Longrightarrow>\n  asTerm (?qX92 #[[x1 \\<and> x2]]_xs) = asTerm ?qX92 #[x1 \\<and> x2]_xs\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qinp ?i92 = Some ?qX92 \\<Longrightarrow>\n  asTerm (?qX92 #[[x1 \\<and> x2]]_xs) = asTerm ?qX92 #[x1 \\<and> x2]_xs\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "using assms"], ["proof (prove)\nusing this:\n  qinp ?i92 = Some ?qX92 \\<Longrightarrow>\n  asTerm (?qX92 #[[x1 \\<and> x2]]_xs) = asTerm ?qX92 #[x1 \\<and> x2]_xs\n  qGoodInp qinp\n\ngoal (1 subgoal):\n 1. asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs", "by (smt asInp_def comp_apply lift_comp lift_cong qSwapInp_def swapInp_def)"], ["proof (state)\nthis:\n  asInp (qSwapInp xs x1 x2 qinp) = asInp qinp %[x1 \\<and> x2]_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapInp_def2:\n\"(inp %[x1 \\<and> x2]_xs) = asInp ((pickInp inp) %[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp %[x1 \\<and> x2]_xs = asInp (qSwapInp xs x1 x2 (pickInp inp))", "unfolding swapInp_def asInp_def pickInp_def qSwapInp_def lift_def swap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow>\n            Some (asTerm (pick v #[[x1 \\<and> x2]]_xs))) =\n    (\\<lambda>i.\n        case case case inp i of None \\<Rightarrow> None\n                  | Some v \\<Rightarrow> Some (pick v) of\n             None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v #[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asTerm v))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow>\n            Some (asTerm (pick v #[[x1 \\<and> x2]]_xs))) =\n       (case case case inp i of None \\<Rightarrow> None\n                  | Some v \\<Rightarrow> Some (pick v) of\n             None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v #[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asTerm v))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asTerm (pick v #[[x1 \\<and> x2]]_xs))) =\n    (case case case inp i of None \\<Rightarrow> None\n               | Some v \\<Rightarrow> Some (pick v) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[[x1 \\<and> x2]]_xs) of\n     None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asTerm v))", "by (cases \"inp i\") auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma freshInp_def2:\n\"freshInp xs x inp = qFreshInp xs x (pickInp inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshInp xs x inp = qFreshInp xs x (pickInp inp)", "unfolding freshInp_def qFreshInp_def pickInp_def lift_def fresh_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. inp i = Some v \\<longrightarrow> qFresh xs x (pick v)) =\n    (\\<forall>i v.\n        (case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (pick v)) =\n        Some v \\<longrightarrow>\n        qFresh xs x v)", "apply(rule iff_allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<forall>v. inp i = Some v \\<longrightarrow> qFresh xs x (pick v)) =\n       (\\<forall>v.\n           (case inp i of None \\<Rightarrow> None\n            | Some v \\<Rightarrow> Some (pick v)) =\n           Some v \\<longrightarrow>\n           qFresh xs x v)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>v. inp i = Some v \\<longrightarrow> qFresh xs x (pick v)) =\n    (\\<forall>v.\n        (case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (pick v)) =\n        Some v \\<longrightarrow>\n        qFresh xs x v)", "by (cases \"inp i\") auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>For bound inputs:\\<close>"], ["", "lemma pickBinp_inj_on_goodBinp: \"inj_on pickBinp (Collect goodBinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pickBinp (Collect goodBinp)", "unfolding pickBinp_def[abs_def] inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Collect goodBinp.\n       \\<forall>y\\<in>Collect goodBinp.\n          lift pick x = lift pick y \\<longrightarrow> x = y", "proof(safe, rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodBinp x; goodBinp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "fix binp binp' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodBinp x; goodBinp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "assume good: \"goodBinp binp\" \"goodBinp binp'\" and *: \"lift pick binp = lift pick binp'\""], ["proof (state)\nthis:\n  goodBinp binp\n  goodBinp binp'\n  lift pick binp = lift pick binp'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>goodBinp x; goodBinp y; lift pick x = lift pick y\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "show \"binp i = binp' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp i = binp' i", "proof(cases \"binp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp' i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "assume binp: \"binp i = None\""], ["proof (state)\nthis:\n  binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp' i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"lift pick binp i = None\""], ["proof (prove)\nusing this:\n  binp i = None\n\ngoal (1 subgoal):\n 1. lift pick binp i = None", "by (auto simp add: lift_None)"], ["proof (state)\nthis:\n  lift pick binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp' i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"lift pick binp' i = None\""], ["proof (prove)\nusing this:\n  lift pick binp i = None\n\ngoal (1 subgoal):\n 1. lift pick binp' i = None", "using *"], ["proof (prove)\nusing this:\n  lift pick binp i = None\n  lift pick binp = lift pick binp'\n\ngoal (1 subgoal):\n 1. lift pick binp' i = None", "by simp"], ["proof (state)\nthis:\n  lift pick binp' i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp' i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"binp' i = None\""], ["proof (prove)\nusing this:\n  lift pick binp' i = None\n\ngoal (1 subgoal):\n 1. binp' i = None", "by (auto simp add: lift_None)"], ["proof (state)\nthis:\n  binp' i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp' i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  binp' i = None\n\ngoal (1 subgoal):\n 1. binp i = binp' i", "using binp"], ["proof (prove)\nusing this:\n  binp' i = None\n  binp i = None\n\ngoal (1 subgoal):\n 1. binp i = binp' i", "by simp"], ["proof (state)\nthis:\n  binp i = binp' i\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "assume binp: \"binp i = Some A\""], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"lift pick binp i = Some (pick A)\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. lift pick binp i = Some (pick A)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. (case binp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (pick v)) =\n    Some (pick A)", "by simp"], ["proof (state)\nthis:\n  lift pick binp i = Some (pick A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"lift pick binp' i = Some (pick A)\""], ["proof (prove)\nusing this:\n  lift pick binp i = Some (pick A)\n\ngoal (1 subgoal):\n 1. lift pick binp' i = Some (pick A)", "using *"], ["proof (prove)\nusing this:\n  lift pick binp i = Some (pick A)\n  lift pick binp = lift pick binp'\n\ngoal (1 subgoal):\n 1. lift pick binp' i = Some (pick A)", "by simp"], ["proof (state)\nthis:\n  lift pick binp' i = Some (pick A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "then"], ["proof (chain)\npicking this:\n  lift pick binp' i = Some (pick A)", "obtain A' where binp': \"binp' i = Some A'\" and AA': \"pick A = pick A'\""], ["proof (prove)\nusing this:\n  lift pick binp' i = Some (pick A)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>binp' i = Some A'; pick A = pick A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case binp' i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (pick v)) =\n  Some (pick A)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>binp' i = Some A'; pick A = pick A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"binp' i\", auto)"], ["proof (state)\nthis:\n  binp' i = Some A'\n  pick A = pick A'\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"goodAbs A \\<and> goodAbs A'\""], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  pick A = pick A'\n\ngoal (1 subgoal):\n 1. goodAbs A \\<and> goodAbs A'", "using binp good goodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  pick A = pick A'\n  binp i = Some A\n  goodBinp binp\n  goodBinp binp'\n  goodBinp ?binp \\<equiv>\n  liftAll goodAbs ?binp \\<and> |{i. ?binp i \\<noteq> None}| <o |UNIV|\n  liftAll ?phi ?inp \\<equiv>\n  \\<forall>i v. ?inp i = Some v \\<longrightarrow> ?phi v\n\ngoal (1 subgoal):\n 1. goodAbs A \\<and> goodAbs A'", "by (metis (hide_lams, full_types))"], ["proof (state)\nthis:\n  goodAbs A \\<and> goodAbs A'\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "hence \"A = A'\""], ["proof (prove)\nusing this:\n  goodAbs A \\<and> goodAbs A'\n\ngoal (1 subgoal):\n 1. A = A'", "using AA'"], ["proof (prove)\nusing this:\n  goodAbs A \\<and> goodAbs A'\n  pick A = pick A'\n\ngoal (1 subgoal):\n 1. A = A'", "by auto"], ["proof (state)\nthis:\n  A = A'\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = A'\n\ngoal (1 subgoal):\n 1. binp i = binp' i", "unfolding binp binp'"], ["proof (prove)\nusing this:\n  A = A'\n\ngoal (1 subgoal):\n 1. Some A = Some A'", "by simp"], ["proof (state)\nthis:\n  binp i = binp' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binp i = binp' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma goodBinp_imp_qGoodBinp_pickBinp:\nassumes \"goodBinp binp\"\nshows \"qGoodBinp (pickBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp (pickBinp binp)", "unfolding pickBinp_def qGoodBinp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift pick binp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n    |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick binp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "fix i qA"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick binp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "assume \"lift pick binp i = Some qA\""], ["proof (state)\nthis:\n  lift pick binp i = Some qA\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick binp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  lift pick binp i = Some qA", "obtain A where binp: \"binp i = Some A\" and qA: \"qA = pick A\""], ["proof (prove)\nusing this:\n  lift pick binp i = Some qA\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>binp i = Some A; qA = pick A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case binp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (pick v)) =\n  Some qA\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>binp i = Some A; qA = pick A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"binp i\", auto)"], ["proof (state)\nthis:\n  binp i = Some A\n  qA = pick A\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick binp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "hence \"goodAbs A\""], ["proof (prove)\nusing this:\n  binp i = Some A\n  qA = pick A\n\ngoal (1 subgoal):\n 1. goodAbs A", "using assms"], ["proof (prove)\nusing this:\n  binp i = Some A\n  qA = pick A\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. goodAbs A", "unfolding goodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  qA = pick A\n  (\\<forall>i v. binp i = Some v \\<longrightarrow> goodAbs v) \\<and>\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. goodAbs A", "by simp"], ["proof (state)\nthis:\n  goodAbs A\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift pick binp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "thus \"qGoodAbs qA\""], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "unfolding qA"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. qGoodAbs (pick A)", "using goodAbs_imp_qGoodAbs_pick"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n\ngoal (1 subgoal):\n 1. qGoodAbs (pick A)", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. lift pick binp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. binp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift pick binp i \\<noteq> None} = {i. binp i \\<noteq> None}", "by(force simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift pick binp i \\<noteq> None} = {i. binp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift pick binp i \\<noteq> None} = {i. binp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  {i. lift pick binp i \\<noteq> None} = {i. binp i \\<noteq> None}\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "unfolding goodBinp_def"], ["proof (prove)\nusing this:\n  {i. lift pick binp i \\<noteq> None} = {i. binp i \\<noteq> None}\n  liftAll goodAbs binp \\<and> |{i. binp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift pick binp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift pick binp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qGoodBinp_iff_goodBinp_asBinp:\n\"goodBinp (asBinp qbinp) = qGoodBinp qbinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (asBinp qbinp) = qGoodBinp qbinp", "proof(unfold asBinp_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "let ?binp = \"lift asAbs qbinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "assume qgood_qbinp: \"qGoodBinp qbinp\""], ["proof (state)\nthis:\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "have \"goodBinp ?binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp)", "unfolding goodBinp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift asAbs qbinp i = Some v \\<longrightarrow> goodAbs v) \\<and>\n    |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift asAbs qbinp i = Some v \\<Longrightarrow> goodAbs v\n 2. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "fix i A"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. lift asAbs qbinp i = Some v \\<Longrightarrow> goodAbs v\n 2. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "assume binp: \"?binp i = Some A\""], ["proof (state)\nthis:\n  lift asAbs qbinp i = Some A\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asAbs qbinp i = Some v \\<Longrightarrow> goodAbs v\n 2. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  lift asAbs qbinp i = Some A", "obtain qA where qbinp: \"qbinp i = Some qA\" and A: \"A = asAbs qA\""], ["proof (prove)\nusing this:\n  lift asAbs qbinp i = Some A\n\ngoal (1 subgoal):\n 1. (\\<And>qA.\n        \\<lbrakk>qbinp i = Some qA; A = asAbs qA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case qbinp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (asAbs v)) =\n  Some A\n\ngoal (1 subgoal):\n 1. (\\<And>qA.\n        \\<lbrakk>qbinp i = Some qA; A = asAbs qA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qbinp i\", auto)"], ["proof (state)\nthis:\n  qbinp i = Some qA\n  A = asAbs qA\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asAbs qbinp i = Some v \\<Longrightarrow> goodAbs v\n 2. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "hence \"qGoodAbs qA\""], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  A = asAbs qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "using qgood_qbinp"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  A = asAbs qA\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "unfolding qGoodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  A = asAbs qA\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA\n\ngoal (2 subgoals):\n 1. \\<And>i v. lift asAbs qbinp i = Some v \\<Longrightarrow> goodAbs v\n 2. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "thus \"goodAbs A\""], ["proof (prove)\nusing this:\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. goodAbs A", "using A qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  qGoodAbs qA\n  A = asAbs qA\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs A", "by auto"], ["proof (state)\nthis:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. lift asAbs qbinp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. qbinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift asAbs qbinp i \\<noteq> None} = {i. qbinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. lift asAbs qbinp i \\<noteq> None} = {i. qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift asAbs qbinp i \\<noteq> None} = {i. qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "using qgood_qbinp"], ["proof (prove)\nusing this:\n  {i. lift asAbs qbinp i \\<noteq> None} = {i. qbinp i \\<noteq> None}\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "unfolding qGoodBinp_def"], ["proof (prove)\nusing this:\n  {i. lift asAbs qbinp i \\<noteq> None} = {i. qbinp i \\<noteq> None}\n  liftAll qGoodAbs qbinp \\<and> |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "}"], ["proof (state)\nthis:\n  qGoodBinp qbinp \\<Longrightarrow> goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "moreover"], ["proof (state)\nthis:\n  qGoodBinp qbinp \\<Longrightarrow> goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "{"], ["proof (state)\nthis:\n  qGoodBinp qbinp \\<Longrightarrow> goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "assume good_binp: \"goodBinp ?binp\""], ["proof (state)\nthis:\n  goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "have \"qGoodBinp qbinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp qbinp", "unfolding qGoodBinp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n    |{i. qbinp i \\<noteq> None}| <o |UNIV|", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "fix i qA"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "assume qbinp: \"qbinp i = Some qA\""], ["proof (state)\nthis:\n  qbinp i = Some qA\n\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "let ?A = \"asAbs qA\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "have binp: \"?binp i = Some ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = Some (asAbs qA)", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case qbinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v)) =\n    Some (asAbs qA)", "using qbinp"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. (case qbinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v)) =\n    Some (asAbs qA)", "by simp"], ["proof (state)\nthis:\n  lift asAbs qbinp i = Some (asAbs qA)\n\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "hence \"goodAbs ?A\""], ["proof (prove)\nusing this:\n  lift asAbs qbinp i = Some (asAbs qA)\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA)", "using good_binp"], ["proof (prove)\nusing this:\n  lift asAbs qbinp i = Some (asAbs qA)\n  goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA)", "unfolding goodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  lift asAbs qbinp i = Some (asAbs qA)\n  (\\<forall>i v.\n      lift asAbs qbinp i = Some v \\<longrightarrow> goodAbs v) \\<and>\n  |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA)", "by auto"], ["proof (state)\nthis:\n  goodAbs (asAbs qA)\n\ngoal (2 subgoals):\n 1. \\<And>i v. qbinp i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "thus \"qGoodAbs qA\""], ["proof (prove)\nusing this:\n  goodAbs (asAbs qA)\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "using qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  goodAbs (asAbs qA)\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "let ?Left = \"{i. qbinp i \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "have \"?Left = {i. lift asAbs qbinp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. qbinp i \\<noteq> None} = {i. lift asAbs qbinp i \\<noteq> None}", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  {i. qbinp i \\<noteq> None} = {i. lift asAbs qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "thus \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. qbinp i \\<noteq> None} = {i. lift asAbs qbinp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "using good_binp"], ["proof (prove)\nusing this:\n  {i. qbinp i \\<noteq> None} = {i. lift asAbs qbinp i \\<noteq> None}\n  goodBinp (lift asAbs qbinp)\n\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "unfolding goodBinp_def"], ["proof (prove)\nusing this:\n  {i. qbinp i \\<noteq> None} = {i. lift asAbs qbinp i \\<noteq> None}\n  liftAll goodAbs (lift asAbs qbinp) \\<and>\n  |{i. lift asAbs qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. qbinp i \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "}"], ["proof (state)\nthis:\n  goodBinp (lift asAbs qbinp) \\<Longrightarrow> qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "ultimately"], ["proof (chain)\npicking this:\n  qGoodBinp qbinp \\<Longrightarrow> goodBinp (lift asAbs qbinp)\n  goodBinp (lift asAbs qbinp) \\<Longrightarrow> qGoodBinp qbinp", "show \"goodBinp ?binp = qGoodBinp qbinp\""], ["proof (prove)\nusing this:\n  qGoodBinp qbinp \\<Longrightarrow> goodBinp (lift asAbs qbinp)\n  goodBinp (lift asAbs qbinp) \\<Longrightarrow> qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. goodBinp (lift asAbs qbinp) = qGoodBinp qbinp", "by blast"], ["proof (state)\nthis:\n  goodBinp (lift asAbs qbinp) = qGoodBinp qbinp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pickBinp_asBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"pickBinp (asBinp qbinp) %%= qbinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickBinp (asBinp qbinp), qbinp) \\<in> alphaBinp", "unfolding pickBinp_def asBinp_def lift_comp alphaBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> asAbs) qbinp, qbinp)\n    \\<in> {(qbinp, qbinp').\n           sameDom qbinp qbinp' \\<and> liftAll2 ($=) qbinp qbinp'}", "using sameDom_lift2"], ["proof (prove)\nusing this:\n  sameDom (lift ?f ?inp) ?inp\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> asAbs) qbinp, qbinp)\n    \\<in> {(qbinp, qbinp').\n           sameDom qbinp qbinp' \\<and> liftAll2 ($=) qbinp qbinp'}", "by auto (smt assms comp_apply liftAll2_def liftAll_def \nlift_def option.sel option.simps(5) pick_asAbs qGoodBinp_def)"], ["", "lemma asBinp_pickBinp:\nassumes \"goodBinp binp\"\nshows \"asBinp (pickBinp binp) = binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asBinp (pickBinp binp) = binp", "unfolding asBinp_def pickBinp_def lift_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (asAbs \\<circ> pick) binp = binp", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. lift (asAbs \\<circ> pick) binp x = binp x", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (asAbs \\<circ> pick) binp i = binp i", "apply(cases \"binp i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow>\n    lift (asAbs \\<circ> pick) binp i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow>\n       lift (asAbs \\<circ> pick) binp i = binp i", "using assms asAbs_pick"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodAbs ?A \\<Longrightarrow> asAbs (pick ?A) = ?A\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow>\n    lift (asAbs \\<circ> pick) binp i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow>\n       lift (asAbs \\<circ> pick) binp i = binp i", "unfolding goodBinp_def liftAll_def lift_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. binp i = Some v \\<longrightarrow> goodAbs v) \\<and>\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  goodAbs ?A \\<Longrightarrow> asAbs (pick ?A) = ?A\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow>\n    (case binp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some ((asAbs \\<circ> pick) v)) =\n    binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow>\n       (case binp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some ((asAbs \\<circ> pick) v)) =\n       binp i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma pickBinp_alphaBinp:\nassumes goodBinp: \"goodBinp binp\"\nshows \"pickBinp binp %%= pickBinp binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickBinp binp, pickBinp binp) \\<in> alphaBinp", "using assms goodBinp_imp_qGoodBinp_pickBinp alphaBinp_refl"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n  qGoodBinp ?qbinp \\<Longrightarrow> (?qbinp, ?qbinp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (pickBinp binp, pickBinp binp) \\<in> alphaBinp", "by auto"], ["", "lemma alphaBinp_imp_asBinp_equal:\nassumes \"qGoodBinp qbinp\" and \"qbinp %%= qbinp'\"\nshows \"asBinp qbinp = asBinp qbinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asBinp qbinp = asBinp qbinp'", "unfolding asBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asAbs qbinp = lift asAbs qbinp'", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift asAbs qbinp x = lift asAbs qbinp' x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift asAbs qbinp x = lift asAbs qbinp' x", "show \"lift asAbs qbinp i = lift asAbs qbinp' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = lift asAbs qbinp' i", "proof(cases \"qbinp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. qbinp i = None \\<Longrightarrow>\n    lift asAbs qbinp i = lift asAbs qbinp' i\n 2. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "case None"], ["proof (state)\nthis:\n  qbinp i = None\n\ngoal (2 subgoals):\n 1. qbinp i = None \\<Longrightarrow>\n    lift asAbs qbinp i = lift asAbs qbinp' i\n 2. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "hence \"qbinp' i = None\""], ["proof (prove)\nusing this:\n  qbinp i = None\n\ngoal (1 subgoal):\n 1. qbinp' i = None", "using assms"], ["proof (prove)\nusing this:\n  qbinp i = None\n  qGoodBinp qbinp\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. qbinp' i = None", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp i = None\n  qGoodBinp qbinp\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. qbinp' i = None", "by auto"], ["proof (state)\nthis:\n  qbinp' i = None\n\ngoal (2 subgoals):\n 1. qbinp i = None \\<Longrightarrow>\n    lift asAbs qbinp i = lift asAbs qbinp' i\n 2. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  qbinp' i = None\n\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = lift asAbs qbinp' i", "using None"], ["proof (prove)\nusing this:\n  qbinp' i = None\n  qbinp i = None\n\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = lift asAbs qbinp' i", "unfolding lift_def"], ["proof (prove)\nusing this:\n  qbinp' i = None\n  qbinp i = None\n\ngoal (1 subgoal):\n 1. (case qbinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v)) =\n    (case qbinp' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v))", "by simp"], ["proof (state)\nthis:\n  lift asAbs qbinp i = lift asAbs qbinp' i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "case (Some qA)"], ["proof (state)\nthis:\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "then"], ["proof (chain)\npicking this:\n  qbinp i = Some qA", "obtain qA' where qbinp': \"qbinp' i = Some qA'\""], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qGoodBinp qbinp\n  (qbinp, qbinp') \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  qGoodBinp qbinp\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n\ngoal (1 subgoal):\n 1. (\\<And>qA'.\n        qbinp' i = Some qA' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"qbinp' i\", force)"], ["proof (state)\nthis:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "hence \"qA $= qA'\""], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n\ngoal (1 subgoal):\n 1. qA $= qA'", "using assms Some"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  qGoodBinp qbinp\n  (qbinp, qbinp') \\<in> alphaBinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qA $= qA'", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qbinp' i = Some qA'\n  qGoodBinp qbinp\n  (qbinp, qbinp')\n  \\<in> {(qbinp, qbinp').\n         (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n         (\\<forall>i v1 v2.\n             qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n             v1 $= v2)}\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qA $= qA'", "by auto"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "moreover"], ["proof (state)\nthis:\n  qA $= qA'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "have \"qGoodAbs qA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs qA", "using assms Some"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  (qbinp, qbinp') \\<in> alphaBinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "unfolding qGoodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  (qbinp, qbinp') \\<in> alphaBinp\n  qbinp i = Some qA\n\ngoal (1 subgoal):\n 1. qGoodAbs qA", "by auto"], ["proof (state)\nthis:\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       lift asAbs qbinp i = lift asAbs qbinp' i", "ultimately"], ["proof (chain)\npicking this:\n  qA $= qA'\n  qGoodAbs qA", "show ?thesis"], ["proof (prove)\nusing this:\n  qA $= qA'\n  qGoodAbs qA\n\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = lift asAbs qbinp' i", "using Some qbinp' alphaAbs_imp_asAbs_equal"], ["proof (prove)\nusing this:\n  qA $= qA'\n  qGoodAbs qA\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  \\<lbrakk>qGoodAbs ?qA; ?qA $= ?qB\\<rbrakk>\n  \\<Longrightarrow> asAbs ?qA = asAbs ?qB\n\ngoal (1 subgoal):\n 1. lift asAbs qbinp i = lift asAbs qbinp' i", "unfolding lift_def"], ["proof (prove)\nusing this:\n  qA $= qA'\n  qGoodAbs qA\n  qbinp i = Some qA\n  qbinp' i = Some qA'\n  \\<lbrakk>qGoodAbs ?qA; ?qA $= ?qB\\<rbrakk>\n  \\<Longrightarrow> asAbs ?qA = asAbs ?qB\n\ngoal (1 subgoal):\n 1. (case qbinp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v)) =\n    (case qbinp' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs v))", "by auto"], ["proof (state)\nthis:\n  lift asAbs qbinp i = lift asAbs qbinp' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift asAbs qbinp i = lift asAbs qbinp' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma asBinp_equal_imp_alphaBinp:\nassumes \"qGoodBinp qbinp\" and \"asBinp qbinp = asBinp qbinp'\"\nshows \"qbinp %%= qbinp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qbinp, qbinp') \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  asBinp qbinp = asBinp qbinp'\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp') \\<in> alphaBinp", "unfolding alphaBinp_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  asBinp qbinp = asBinp qbinp'\n\ngoal (1 subgoal):\n 1. (qbinp, qbinp')\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by simp (smt asAbs_equal_imp_alphaAbs asBinp_def liftAll_def \nlift_None lift_def option.inject option.simps(5) qGoodBinp_def)"], ["", "lemma asBinp_equal_iff_alphaBinp:\n\"qGoodBinp qbinp \\<Longrightarrow> (asBinp qbinp = asBinp qbinp') = (qbinp %%= qbinp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodBinp qbinp \\<Longrightarrow>\n    (asBinp qbinp = asBinp qbinp') = ((qbinp, qbinp') \\<in> alphaBinp)", "using asBinp_equal_imp_alphaBinp alphaBinp_imp_asBinp_equal"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGoodBinp ?qbinp; asBinp ?qbinp = asBinp ?qbinp'\\<rbrakk>\n  \\<Longrightarrow> (?qbinp, ?qbinp') \\<in> alphaBinp\n  \\<lbrakk>qGoodBinp ?qbinp; (?qbinp, ?qbinp') \\<in> alphaBinp\\<rbrakk>\n  \\<Longrightarrow> asBinp ?qbinp = asBinp ?qbinp'\n\ngoal (1 subgoal):\n 1. qGoodBinp qbinp \\<Longrightarrow>\n    (asBinp qbinp = asBinp qbinp') = ((qbinp, qbinp') \\<in> alphaBinp)", "by blast"], ["", "lemma pickBinp_alphaBinp_iff_equal:\nassumes \"goodBinp binp\" and \"goodBinp binp'\"\nshows \"(pickBinp binp %%= pickBinp binp') = (binp = binp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((pickBinp binp, pickBinp binp') \\<in> alphaBinp) = (binp = binp')", "using assms goodBinp_imp_qGoodBinp_pickBinp asBinp_pickBinp pickBinp_alphaBinp"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodBinp binp'\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n  goodBinp ?binp \\<Longrightarrow> asBinp (pickBinp ?binp) = ?binp\n  goodBinp ?binp \\<Longrightarrow>\n  (pickBinp ?binp, pickBinp ?binp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. ((pickBinp binp, pickBinp binp') \\<in> alphaBinp) = (binp = binp')", "by (metis asBinp_equal_iff_alphaBinp)"], ["", "lemma pickBinp_swapBinp_qSwapBinp:\nassumes \"goodBinp binp\"\nshows \"pickBinp (binp %%[x1 \\<and> x2]_xs) %%= ((pickBinp binp) %%[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickBinp (binp %%[x1 \\<and> x2]_xs),\n     qSwapBinp xs x1 x2 (pickBinp binp))\n    \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. (pickBinp (binp %%[x1 \\<and> x2]_xs),\n     qSwapBinp xs x1 x2 (pickBinp binp))\n    \\<in> alphaBinp", "unfolding pickBinp_def swapBinp_def qSwapBinp_def lift_comp\nalphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> swapAbs xs x1 x2) binp,\n     lift (qSwapAbs xs x1 x2 \\<circ> pick) binp)\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by (simp add: goodBinp_def liftAll_def lift_def option.case_eq_if pick_swapAbs_qSwapAbs)"], ["", "lemma asBinp_qSwapBinp_swapBinp:\nassumes \"qGoodBinp qbinp\"\nshows \"asBinp (qbinp %%[[x1 \\<and> x2]]_xs) = ((asBinp qbinp) %%[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asBinp (qSwapBinp xs x1 x2 qbinp) = asBinp qbinp %%[x1 \\<and> x2]_xs", "unfolding asBinp_def swapBinp_def qSwapBinp_def lift_comp alphaBinp_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n    (\\<lambda>i.\n        case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (asAbs v) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (asAbs v) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n     None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n    (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (asAbs v) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))", "apply(cases \"qbinp i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. qbinp i = None \\<Longrightarrow>\n    (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n     None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n    (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (asAbs v) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))\n 2. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (asAbs v) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))", "using assms asAbs_qSwapAbs_swapAbs"], ["proof (prove)\nusing this:\n  qGoodBinp qbinp\n  qGoodAbs ?qA \\<Longrightarrow>\n  asAbs (?qA $[[?x1.0 \\<and> ?x2.0]]_?xs) =\n  asAbs ?qA $[?x1.0 \\<and> ?x2.0]_?xs\n\ngoal (2 subgoals):\n 1. qbinp i = None \\<Longrightarrow>\n    (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n     None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n    (case case qbinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (asAbs v) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))\n 2. \\<And>a.\n       qbinp i = Some a \\<Longrightarrow>\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v)) =\n       (case case qbinp i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (asAbs v) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs))", "by (fastforce simp add: liftAll_def qGoodBinp_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma swapBinp_def2:\n\"(binp %%[x1 \\<and> x2]_xs) = asBinp ((pickBinp binp) %%[[x1 \\<and> x2]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp %%[x1 \\<and> x2]_xs = asBinp (qSwapBinp xs x1 x2 (pickBinp binp))", "unfolding swapBinp_def asBinp_def pickBinp_def qSwapBinp_def lift_def swapAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case binp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (asAbs (pick v $[[x1 \\<and> x2]]_xs))) =\n    (\\<lambda>i.\n        case case case binp i of None \\<Rightarrow> None\n                  | Some v \\<Rightarrow> Some (pick v) of\n             None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case binp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (asAbs (pick v $[[x1 \\<and> x2]]_xs))) =\n       (case case case binp i of None \\<Rightarrow> None\n                  | Some v \\<Rightarrow> Some (pick v) of\n             None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case binp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (asAbs (pick v $[[x1 \\<and> x2]]_xs))) =\n    (case case case binp i of None \\<Rightarrow> None\n               | Some v \\<Rightarrow> Some (pick v) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[[x1 \\<and> x2]]_xs) of\n     None \\<Rightarrow> None | Some v \\<Rightarrow> Some (asAbs v))", "by (cases \"binp i\") simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma freshBinp_def2:\n\"freshBinp xs x binp = qFreshBinp xs x (pickBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshBinp xs x binp = qFreshBinp xs x (pickBinp binp)", "unfolding freshBinp_def qFreshBinp_def pickBinp_def lift_def freshAbs_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        binp i = Some v \\<longrightarrow> qFreshAbs xs x (pick v)) =\n    (\\<forall>i v.\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (pick v)) =\n        Some v \\<longrightarrow>\n        qFreshAbs xs x v)", "apply (rule iff_allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<forall>v.\n           binp i = Some v \\<longrightarrow> qFreshAbs xs x (pick v)) =\n       (\\<forall>v.\n           (case binp i of None \\<Rightarrow> None\n            | Some v \\<Rightarrow> Some (pick v)) =\n           Some v \\<longrightarrow>\n           qFreshAbs xs x v)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>v.\n        binp i = Some v \\<longrightarrow> qFreshAbs xs x (pick v)) =\n    (\\<forall>v.\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (pick v)) =\n        Some v \\<longrightarrow>\n        qFreshAbs xs x v)", "by (cases \"binp i\") simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* Note that psubstInp and psubstBinp are discussed in the next subsubsection,\nabout environments.  *)"], ["", "subsubsection \\<open>For environments\\<close>"], ["", "(* Remember we do not have any \"quasi-swap\" for environments --\n   we plan to prove most of the things concerning parallel substitution\n   and environments for equivPalence classes directly. *)"], ["", "lemma goodEnv_imp_qGoodEnv_pickE:\nassumes \"goodEnv rho\"\nshows \"qGoodEnv (pickE rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "unfolding qGoodEnv_def pickE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>xs. liftAll qGood (lift pick (rho xs))) \\<and>\n    (\\<forall>ys. |{y. lift pick (rho ys) y \\<noteq> None}| <o |UNIV|)", "apply(auto simp del: \"not_None_eq\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs. liftAll qGood (lift pick (rho xs))\n 2. \\<And>ys. |{y. lift pick (rho ys) y \\<noteq> None}| <o |UNIV|", "using assms good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (2 subgoals):\n 1. \\<And>xs. liftAll qGood (lift pick (rho xs))\n 2. \\<And>ys. |{y. lift pick (rho ys) y \\<noteq> None}| <o |UNIV|", "unfolding liftAll_lift_comp comp_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (2 subgoals):\n 1. \\<And>xs. liftAll (\\<lambda>x. qGood (pick x)) (rho xs)\n 2. \\<And>ys. |{y. lift pick (rho ys) y \\<noteq> None}| <o |UNIV|", "by (auto simp: goodEnv_def liftAll_def lift_None)"], ["", "lemma qGoodEnv_iff_goodEnv_asEnv:\n\"goodEnv (asEnv qrho) = qGoodEnv qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (asEnv qrho) = qGoodEnv qrho", "unfolding asEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (\\<lambda>xs. lift asTerm (qrho xs)) = qGoodEnv qrho", "unfolding goodEnv_def liftAll_lift_comp comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>ys. liftAll (\\<lambda>x. good (asTerm x)) (qrho ys)) \\<and>\n     (\\<forall>ys.\n         |{y. lift asTerm (qrho ys) y \\<noteq> None}| <o |UNIV|)) =\n    qGoodEnv qrho", "by (auto simp: qGoodEnv_def lift_None liftAll_def qGood_iff_good_asTerm)"], ["", "lemma pickE_asEnv:\nassumes \"qGoodEnv qrho\"\nshows \"pickE (asEnv qrho) &= qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickE (asEnv qrho) &= qrho", "using assms"], ["proof (prove)\nusing this:\n  qGoodEnv qrho\n\ngoal (1 subgoal):\n 1. pickE (asEnv qrho) &= qrho", "by (auto simp: lift_None liftAll_def lift_def alphaEnv_def sameDom_def liftAll2_def\npick_asTerm qGoodEnv_def pickE_def asEnv_def split: option.splits)"], ["", "lemma asEnv_pickE:\nassumes \"goodEnv rho\"  shows \"asEnv (pickE rho) xs x = rho xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asEnv (pickE rho) xs x = rho xs x", "using assms asTerm_pick"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n\ngoal (1 subgoal):\n 1. asEnv (pickE rho) xs x = rho xs x", "by (cases \"rho xs x\") (auto simp: goodEnv_def liftAll_def asEnv_def pickE_def lift_comp lift_def)"], ["", "lemma pickE_alphaEnv:\nassumes goodEnv: \"goodEnv rho\"  shows \"pickE rho &= pickE rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickE rho &= pickE rho", "using assms goodEnv_imp_qGoodEnv_pickE alphaEnv_refl"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n  qGoodEnv ?rho \\<Longrightarrow> ?rho &= ?rho\n\ngoal (1 subgoal):\n 1. pickE rho &= pickE rho", "by auto"], ["", "lemma alphaEnv_imp_asEnv_equal:\nassumes \"qGoodEnv qrho\" and \"qrho &= qrho'\"\nshows \"asEnv qrho = asEnv qrho'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asEnv qrho = asEnv qrho'", "apply (rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. asEnv qrho x xa = asEnv qrho' x xa", "subgoal for xs x"], ["proof (prove)\ngoal (1 subgoal):\n 1. asEnv qrho xs x = asEnv qrho' xs x", "apply(cases \"qrho xs x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. qrho xs x = None \\<Longrightarrow> asEnv qrho xs x = asEnv qrho' xs x\n 2. \\<And>a.\n       qrho xs x = Some a \\<Longrightarrow>\n       asEnv qrho xs x = asEnv qrho' xs x", "using assms asTerm_equal_iff_alpha alpha_imp_asTerm_equal"], ["proof (prove)\nusing this:\n  qGoodEnv qrho\n  qrho &= qrho'\n  qGood ?qX \\<or> qGood ?qY \\<Longrightarrow>\n  (asTerm ?qX = asTerm ?qY) = (?qX #= ?qY)\n  \\<lbrakk>qGood ?qX; ?qX #= ?qY\\<rbrakk>\n  \\<Longrightarrow> asTerm ?qX = asTerm ?qY\n\ngoal (2 subgoals):\n 1. qrho xs x = None \\<Longrightarrow> asEnv qrho xs x = asEnv qrho' xs x\n 2. \\<And>a.\n       qrho xs x = Some a \\<Longrightarrow>\n       asEnv qrho xs x = asEnv qrho' xs x", "by (auto simp add: alphaEnv_def sameDom_def asEnv_def lift_def \n    qGoodEnv_def liftAll_def liftAll2_def option.case_eq_if split: option.splits)\n   blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma asEnv_equal_imp_alphaEnv:\nassumes \"qGoodEnv qrho\" and \"asEnv qrho = asEnv qrho'\"\nshows \"qrho &= qrho'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qrho &= qrho'", "using assms"], ["proof (prove)\nusing this:\n  qGoodEnv qrho\n  asEnv qrho = asEnv qrho'\n\ngoal (1 subgoal):\n 1. qrho &= qrho'", "unfolding alphaEnv_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qGoodEnv qrho\n  asEnv qrho = asEnv qrho'\n\ngoal (1 subgoal):\n 1. (qrho, qrho')\n    \\<in> {(rho, rho').\n           \\<forall>xs.\n              (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n              (\\<forall>i v1 v2.\n                  rho xs i = Some v1 \\<and>\n                  rho' xs i = Some v2 \\<longrightarrow>\n                  v1 #= v2)}", "apply (simp add: asEnv_def lift_None lift_def qGoodEnv_def liftAll_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>xs i v.\n                 qrho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n             (\\<forall>ys.\n                 |{y. \\<exists>ya. qrho ys y = Some ya}| <o |UNIV|);\n     (\\<lambda>xs i.\n         case qrho xs i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (asTerm v)) =\n     (\\<lambda>xs i.\n         case qrho' xs i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (asTerm v))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xs.\n                         (\\<forall>i.\n                             (qrho xs i = None) =\n                             (qrho' xs i = None)) \\<and>\n                         (\\<forall>i v1 v2.\n                             qrho xs i = Some v1 \\<and>\n                             qrho' xs i = Some v2 \\<longrightarrow>\n                             v1 #= v2)", "by (smt asTerm_equal_imp_alpha option.sel option.simps(5) option.case_eq_if option.distinct(1))"], ["", "lemma asEnv_equal_iff_alphaEnv:\n\"qGoodEnv qrho \\<Longrightarrow> (asEnv qrho = asEnv qrho') = (qrho &= qrho')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv qrho \\<Longrightarrow>\n    (asEnv qrho = asEnv qrho') = (qrho &= qrho')", "using asEnv_equal_imp_alphaEnv alphaEnv_imp_asEnv_equal"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGoodEnv ?qrho; asEnv ?qrho = asEnv ?qrho'\\<rbrakk>\n  \\<Longrightarrow> ?qrho &= ?qrho'\n  \\<lbrakk>qGoodEnv ?qrho; ?qrho &= ?qrho'\\<rbrakk>\n  \\<Longrightarrow> asEnv ?qrho = asEnv ?qrho'\n\ngoal (1 subgoal):\n 1. qGoodEnv qrho \\<Longrightarrow>\n    (asEnv qrho = asEnv qrho') = (qrho &= qrho')", "by blast"], ["", "lemma pickE_alphaEnv_iff_equal:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"(pickE rho &= pickE rho') = (rho = rho')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickE rho &= pickE rho') = (rho = rho')", "proof(rule iffI, safe, (rule ext)+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "fix xs x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "assume alpha: \"pickE rho &= pickE rho'\""], ["proof (state)\nthis:\n  pickE rho &= pickE rho'\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "have qgood_rho: \"qGoodEnv (pickE rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "using assms goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "by auto"], ["proof (state)\nthis:\n  qGoodEnv (pickE rho)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "have \"rho xs x = asEnv (pickE rho) xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho xs x = asEnv (pickE rho) xs x", "using assms asEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  goodEnv ?rho \\<Longrightarrow> asEnv (pickE ?rho) ?xs ?x = ?rho ?xs ?x\n\ngoal (1 subgoal):\n 1. rho xs x = asEnv (pickE rho) xs x", "by fastforce"], ["proof (state)\nthis:\n  rho xs x = asEnv (pickE rho) xs x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "also"], ["proof (state)\nthis:\n  rho xs x = asEnv (pickE rho) xs x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "have \"\\<dots> = asEnv (pickE rho') xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asEnv (pickE rho) xs x = asEnv (pickE rho') xs x", "using qgood_rho alpha alphaEnv_imp_asEnv_equal"], ["proof (prove)\nusing this:\n  qGoodEnv (pickE rho)\n  pickE rho &= pickE rho'\n  \\<lbrakk>qGoodEnv ?qrho; ?qrho &= ?qrho'\\<rbrakk>\n  \\<Longrightarrow> asEnv ?qrho = asEnv ?qrho'\n\ngoal (1 subgoal):\n 1. asEnv (pickE rho) xs x = asEnv (pickE rho') xs x", "by fastforce"], ["proof (state)\nthis:\n  asEnv (pickE rho) xs x = asEnv (pickE rho') xs x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "also"], ["proof (state)\nthis:\n  asEnv (pickE rho) xs x = asEnv (pickE rho') xs x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "have \"\\<dots> = rho' xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asEnv (pickE rho') xs x = rho' xs x", "using assms asEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  goodEnv ?rho \\<Longrightarrow> asEnv (pickE ?rho) ?xs ?x = ?rho ?xs ?x\n\ngoal (1 subgoal):\n 1. asEnv (pickE rho') xs x = rho' xs x", "by fastforce"], ["proof (state)\nthis:\n  asEnv (pickE rho') xs x = rho' xs x\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       pickE rho &= pickE rho' \\<Longrightarrow> rho x xa = rho' x xa\n 2. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "finally"], ["proof (chain)\npicking this:\n  rho xs x = rho' xs x", "show \"rho xs x = rho' xs x\""], ["proof (prove)\nusing this:\n  rho xs x = rho' xs x\n\ngoal (1 subgoal):\n 1. rho xs x = rho' xs x", "."], ["proof (state)\nthis:\n  rho xs x = rho' xs x\n\ngoal (1 subgoal):\n 1. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "have \"qGoodEnv(pickE rho')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho')", "using assms goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho')", "by auto"], ["proof (state)\nthis:\n  qGoodEnv (pickE rho')\n\ngoal (1 subgoal):\n 1. rho = rho' \\<Longrightarrow> pickE rho' &= pickE rho'", "thus \"pickE rho' &= pickE rho'\""], ["proof (prove)\nusing this:\n  qGoodEnv (pickE rho')\n\ngoal (1 subgoal):\n 1. pickE rho' &= pickE rho'", "using alphaEnv_refl"], ["proof (prove)\nusing this:\n  qGoodEnv (pickE rho')\n  qGoodEnv ?rho \\<Longrightarrow> ?rho &= ?rho\n\ngoal (1 subgoal):\n 1. pickE rho' &= pickE rho'", "by auto"], ["proof (state)\nthis:\n  pickE rho' &= pickE rho'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma freshEnv_def2:\n\"freshEnv xs x rho = qFreshEnv xs x (pickE rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x rho = qFreshEnv xs x (pickE rho)", "unfolding freshEnv_def qFreshEnv_def pickE_def lift_def fresh_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho xs x = None \\<and>\n     (\\<forall>ys i v.\n         rho ys i = Some v \\<longrightarrow> qFresh xs x (pick v))) =\n    ((case rho xs x of None \\<Rightarrow> None\n      | Some v \\<Rightarrow> Some (pick v)) =\n     None \\<and>\n     (\\<forall>xsa i v.\n         (case rho xsa i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (pick v)) =\n         Some v \\<longrightarrow>\n         qFresh xs x v))", "apply(cases \"rho xs x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    (rho xs x = None \\<and>\n     (\\<forall>ys i v.\n         rho ys i = Some v \\<longrightarrow> qFresh xs x (pick v))) =\n    ((case rho xs x of None \\<Rightarrow> None\n      | Some v \\<Rightarrow> Some (pick v)) =\n     None \\<and>\n     (\\<forall>xsa i v.\n         (case rho xsa i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (pick v)) =\n         Some v \\<longrightarrow>\n         qFresh xs x v))\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       (rho xs x = None \\<and>\n        (\\<forall>ys i v.\n            rho ys i = Some v \\<longrightarrow> qFresh xs x (pick v))) =\n       ((case rho xs x of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (pick v)) =\n        None \\<and>\n        (\\<forall>xsa i v.\n            (case rho xsa i of None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (pick v)) =\n            Some v \\<longrightarrow>\n            qFresh xs x v))", "by (auto intro!: iff_allI) (metis map_option_case map_option_eq_Some)"], ["", "lemma pick_psubst_qPsubst:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"pick (X #[rho]) #= ((pick X) #[[pickE rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick X #[rho] #= pick X #[[pickE rho]]", "by (simp add: assms goodEnv_imp_qGoodEnv_pickE good_imp_qGood_pick \n              pick_asTerm psubst_def qPsubst_preserves_qGood)"], ["", "lemma pick_psubstAbs_qPsubstAbs:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"pick (A $[rho]) $= ((pick A) $[[pickE rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick A $[rho] $= pick A $[[pickE rho]]", "by (simp add: assms goodAbs_imp_qGoodAbs_pick goodEnv_imp_qGoodEnv_pickE pick_asAbs \n   psubstAbs_def qPsubstAbs_preserves_qGoodAbs)"], ["", "lemma pickInp_psubstInp_qPsubstInp:\nassumes good: \"goodInp inp\" and good_rho: \"goodEnv rho\"\nshows \"pickInp (inp %[rho]) %= ((pickInp inp) %[[pickE rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickInp inp %[rho], pickInp inp %[[pickE rho]]) \\<in> alphaInp", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (pickInp inp %[rho], pickInp inp %[[pickE rho]]) \\<in> alphaInp", "unfolding pickInp_def psubstInp_def qPsubstInp_def lift_comp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> psubst rho) inp,\n     lift (qPsubst (pickE rho) \\<circ> pick) inp)\n    \\<in> alphaInp", "unfolding alphaInp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> psubst rho) inp,\n     lift (qPsubst (pickE rho) \\<circ> pick) inp)\n    \\<in> {(qinp, qinp').\n           (\\<forall>i. (qinp i = None) = (qinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qinp i = Some v1 \\<and> qinp' i = Some v2 \\<longrightarrow>\n               v1 #= v2)}", "by (simp add: lift_None)  \n   (smt comp_apply goodEnv_imp_qGoodEnv_pickE goodInp_imp_qGoodInp_pickInp liftAll_def lift_def map_option_case map_option_eq_Some option.sel pickInp_def \n   pick_asTerm psubst_def qGoodInp_def qPsubst_preserves_qGood)"], ["", "lemma pickBinp_psubstBinp_qPsubstBinp:\nassumes good: \"goodBinp binp\" and good_rho: \"goodEnv rho\"\nshows \"pickBinp (binp %%[rho]) %%= ((pickBinp binp) %%[[pickE rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickBinp binp %%[rho], pickBinp binp %%[[pickE rho]]) \\<in> alphaBinp", "using assms"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (pickBinp binp %%[rho], pickBinp binp %%[[pickE rho]]) \\<in> alphaBinp", "unfolding pickBinp_def psubstBinp_def qPsubstBinp_def lift_comp"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> psubstAbs rho) binp,\n     lift (qPsubstAbs (pickE rho) \\<circ> pick) binp)\n    \\<in> alphaBinp", "unfolding alphaBinp_def sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  goodBinp binp\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (lift (pick \\<circ> psubstAbs rho) binp,\n     lift (qPsubstAbs (pickE rho) \\<circ> pick) binp)\n    \\<in> {(qbinp, qbinp').\n           (\\<forall>i. (qbinp i = None) = (qbinp' i = None)) \\<and>\n           (\\<forall>i v1 v2.\n               qbinp i = Some v1 \\<and> qbinp' i = Some v2 \\<longrightarrow>\n               v1 $= v2)}", "by (simp add: lift_None)  \n   (smt comp_apply goodBinp_def liftAll_def lift_def map_option_case map_option_eq_Some \n        option.sel pick_psubstAbs_qPsubstAbs)"], ["", "subsubsection\\<open>The structural alpha-equivPalence maps commute with the syntactic constructs\\<close>"], ["", "lemma pick_Var_qVar:\n\"pick (Var xs x) #= qVar xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (Var xs x) #= qVar xs x", "unfolding Var_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pick (asTerm (qVar xs x)) #= qVar xs x", "using pick_asTerm"], ["proof (prove)\nusing this:\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n\ngoal (1 subgoal):\n 1. pick (asTerm (qVar xs x)) #= qVar xs x", "by force"], ["", "lemma Op_asInp_asTerm_qOp:\nassumes \"qGoodInp qinp\" and \"qGoodBinp qbinp\"\nshows \"Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)", "using assms pickInp_asInp pickBinp_asBinp"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  qGoodBinp qbinp\n  qGoodInp ?qinp \\<Longrightarrow>\n  (pickInp (asInp ?qinp), ?qinp) \\<in> alphaInp\n  qGoodBinp ?qbinp \\<Longrightarrow>\n  (pickBinp (asBinp ?qbinp), ?qbinp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)", "unfolding Op_def"], ["proof (prove)\nusing this:\n  qGoodInp qinp\n  qGoodBinp qbinp\n  qGoodInp ?qinp \\<Longrightarrow>\n  (pickInp (asInp ?qinp), ?qinp) \\<in> alphaInp\n  qGoodBinp ?qbinp \\<Longrightarrow>\n  (pickBinp (asBinp ?qbinp), ?qbinp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. asTerm (qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))) =\n    asTerm (qOp delta qinp qbinp)", "by(auto simp add: asTerm_equal_iff_alpha)"], ["", "lemma qOp_pickInp_pick_Op:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"qOp delta (pickInp inp) (pickBinp binp) #= pick (Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp) (pickBinp binp) #= pick (Op delta inp binp)", "using assms goodInp_imp_qGoodInp_pickInp goodBinp_imp_qGoodBinp_pickBinp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp) (pickBinp binp) #= pick (Op delta inp binp)", "unfolding Op_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp) (pickBinp binp) #=\n    pick (asTerm (qOp delta (pickInp inp) (pickBinp binp)))", "using pick_asTerm alpha_sym"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp) (pickBinp binp) #=\n    pick (asTerm (qOp delta (pickInp inp) (pickBinp binp)))", "by force"], ["", "lemma Abs_asTerm_asAbs_qAbs:\nassumes \"qGood qX\"\nshows \"Abs xs x (asTerm qX) = asAbs (qAbs xs x qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x (asTerm qX) = asAbs (qAbs xs x qX)", "using assms pick_asTerm qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood qX\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. Abs xs x (asTerm qX) = asAbs (qAbs xs x qX)", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  qGood qX\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick (asTerm qX))) = asAbs (qAbs xs x qX)", "by(force simp add: asAbs_equal_iff_alphaAbs)"], ["", "lemma qAbs_pick_Abs:\nassumes \"good X\"\nshows \"qAbs xs x (pick X) $= pick (Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= pick (Abs xs x X)", "using assms good_imp_qGood_pick  pick_asAbs alphaAbs_sym"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  qGoodAbs ?qA \\<Longrightarrow> pick (asAbs ?qA) $= ?qA\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= pick (Abs xs x X)", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  qGoodAbs ?qA \\<Longrightarrow> pick (asAbs ?qA) $= ?qA\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= pick (asAbs (qAbs xs x (pick X)))", "by force"], ["", "lemmas qItem_versus_item_simps =\nuniv_asTerm_alphaGood univ_asAbs_alphaAbsGood\nuniv_asTerm_alpha univ_asAbs_alphaAbs\npick_injective_good pick_injective_goodAbs"], ["", "subsection \\<open>All operators preserve the ``good'' predicate\\<close>"], ["", "(* Note: some facts here simply do not hold as ``iff\"s.  *)"], ["", "lemma Var_preserves_good[simp]:\n\"good(Var xs x::('index,'bindex,'varSort,'var,'opSym)term)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Var xs x)", "by (metis Var_def qGood.simps(1) qGood_iff_good_asTerm)"], ["", "lemma Op_preserves_good[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"good(Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Op delta inp binp)", "using assms goodInp_imp_qGoodInp_pickInp goodBinp_imp_qGoodBinp_pickBinp\nqGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (Op delta inp binp)", "unfolding Op_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm (qOp delta (pickInp inp) (pickBinp binp)))", "by fastforce"], ["", "lemma Abs_preserves_good[simp]:\nassumes good: \"good X\"\nshows \"goodAbs(Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (Abs xs x X)", "using assms good_imp_qGood_pick qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (Abs xs x X)", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs (qAbs xs x (pick X)))", "by fastforce"], ["", "lemmas Cons_preserve_good =\nVar_preserves_good Op_preserves_good Abs_preserves_good"], ["", "lemma swap_preserves_good[simp]:\nassumes \"good X\"\nshows \"good (X #[x \\<and> y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (X #[x \\<and> y]_xs)", "using assms good_imp_qGood_pick qSwap_preserves_qGood qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (X #[x \\<and> y]_xs)", "unfolding swap_def"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm (pick X #[[x \\<and> y]]_xs))", "by fastforce"], ["", "lemma swapAbs_preserves_good[simp]:\nassumes \"goodAbs A\"\nshows \"goodAbs (A $[x \\<and> y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (A $[x \\<and> y]_xs)", "using assms goodAbs_imp_qGoodAbs_pick qSwapAbs_preserves_qGoodAbs qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) = qGoodAbs ?A\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (A $[x \\<and> y]_xs)", "unfolding swapAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) = qGoodAbs ?A\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs (pick A $[[x \\<and> y]]_xs))", "by fastforce"], ["", "lemma swapInp_preserves_good[simp]:\nassumes \"goodInp inp\"\nshows \"goodInp (inp %[x \\<and> y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (inp %[x \\<and> y]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n\ngoal (1 subgoal):\n 1. goodInp (inp %[x \\<and> y]_xs)", "by (auto simp: goodInp_def lift_def swapInp_def liftAll_def split: option.splits)"], ["", "lemma swapBinp_preserves_good[simp]:\nassumes \"goodBinp binp\"\nshows \"goodBinp (binp %%[x \\<and> y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (binp %%[x \\<and> y]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. goodBinp (binp %%[x \\<and> y]_xs)", "by (auto simp: goodBinp_def lift_def swapBinp_def liftAll_def split: option.splits)"], ["", "lemma swapEnvDom_preserves_good:\nassumes \"goodEnv rho\"\nshows \"goodEnv (swapEnvDom xs x y rho)\" (is \"goodEnv ?rho'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (swapEnvDom xs x y rho)", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        swapEnvDom xs x y rho ys i = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys.\n        |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       swapEnvDom xs x y rho ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "fix zs z X'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       swapEnvDom xs x y rho ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "assume rho': \"?rho' zs z = Some X'\""], ["proof (state)\nthis:\n  swapEnvDom xs x y rho zs z = Some X'\n\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       swapEnvDom xs x y rho ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "hence \"rho zs (z @zs[x \\<and> y]_xs) = Some X'\""], ["proof (prove)\nusing this:\n  swapEnvDom xs x y rho zs z = Some X'\n\ngoal (1 subgoal):\n 1. rho zs (z @zs[x \\<and> y]_xs) = Some X'", "unfolding swapEnvDom_def"], ["proof (prove)\nusing this:\n  rho zs (z @zs[x \\<and> y]_xs) = Some X'\n\ngoal (1 subgoal):\n 1. rho zs (z @zs[x \\<and> y]_xs) = Some X'", "by simp"], ["proof (state)\nthis:\n  rho zs (z @zs[x \\<and> y]_xs) = Some X'\n\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       swapEnvDom xs x y rho ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "thus \"good X'\""], ["proof (prove)\nusing this:\n  rho zs (z @zs[x \\<and> y]_xs) = Some X'\n\ngoal (1 subgoal):\n 1. good X'", "using assms"], ["proof (prove)\nusing this:\n  rho zs (z @zs[x \\<and> y]_xs) = Some X'\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good X'", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho zs (z @zs[x \\<and> y]_xs) = Some X'\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X'", "by simp"], ["proof (state)\nthis:\n  good X'\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "fix xsa ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "let ?Left = \"{ya. ?rho' ys ya \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "have \"|{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "using assms var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  goodEnv rho\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "unfolding goodEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys. liftAll good (rho ys)) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "by fastforce"], ["proof (state)\nthis:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "hence \"|{x,y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "using var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "by fastforce"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "{"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "have \"?Left \\<subseteq> {x,y} \\<union> {ya. rho ys ya \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n    \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}", "unfolding swapEnvDom_def sw_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ya.\n     rho ys\n      (if xs = ys then if ya = x then y else if ya = y then x else ya\n       else ya) \\<noteq>\n     None}\n    \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}", "by auto"], ["proof (state)\nthis:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "hence \"|?Left| \\<le>o |{x,y} \\<union> {ya. rho ys ya \\<noteq> None}|\""], ["proof (prove)\nusing this:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n    |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n    |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "by auto"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "}"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "show \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnvIm_preserves_good:\nassumes \"goodEnv rho\"\nshows \"goodEnv (swapEnvIm xs x y rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (swapEnvIm xs x y rho)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. goodEnv (swapEnvIm xs x y rho)", "unfolding goodEnv_def swapEnvIm_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        lift (swap xs x y) (rho ys) i = Some v \\<longrightarrow>\n        good v) \\<and>\n    (\\<forall>ys.\n        |{ya. lift (swap xs x y) (rho ys) ya \\<noteq> None}| <o |UNIV|)", "by (auto simp: lift_def split: option.splits)"], ["", "lemma swapEnv_preserves_good[simp]:\nassumes \"goodEnv rho\"\nshows \"goodEnv (rho &[x \\<and> y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho &[x \\<and> y]_xs)", "unfolding swapEnv_def comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (swapEnvIm xs x y (swapEnvDom xs x y rho))", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. goodEnv (swapEnvIm xs x y (swapEnvDom xs x y rho))", "by(auto simp add: swapEnvDom_preserves_good swapEnvIm_preserves_good)"], ["", "lemmas swapAll_preserve_good =\nswap_preserves_good swapAbs_preserves_good\nswapInp_preserves_good swapBinp_preserves_good\nswapEnv_preserves_good"], ["", "lemma psubst_preserves_good[simp]:\nassumes  \"goodEnv rho\" and \"good X\"\nshows \"good (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X #[rho]", "using assms good_imp_qGood_pick goodEnv_imp_qGoodEnv_pickE  \nqPsubst_preserves_qGood qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good X #[rho]", "unfolding psubst_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm pick X #[[pickE rho]])", "by fastforce"], ["", "lemma psubstAbs_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and goodAbs_A: \"goodAbs A\"\nshows \"goodAbs (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A $[rho]", "using assms goodAbs_A goodAbs_imp_qGoodAbs_pick  goodEnv_imp_qGoodEnv_pickE \nqPsubstAbs_preserves_qGoodAbs qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodAbs A\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n  \\<lbrakk>qGoodEnv ?rho; qGoodAbs ?A\\<rbrakk>\n  \\<Longrightarrow> qGoodAbs ?A $[[?rho]]\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs A $[rho]", "unfolding psubstAbs_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodAbs A\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n  \\<lbrakk>qGoodEnv ?rho; qGoodAbs ?A\\<rbrakk>\n  \\<Longrightarrow> qGoodAbs ?A $[[?rho]]\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs pick A $[[pickE rho]])", "by fastforce"], ["", "lemma psubstInp_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and good: \"goodInp inp\"\nshows \"goodInp (inp %[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp inp %[rho]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodInp inp\n\ngoal (1 subgoal):\n 1. goodInp inp %[rho]", "unfolding goodInp_def psubstInp_def liftAll_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  (\\<forall>i v. inp i = Some v \\<longrightarrow> good v) \\<and>\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift (psubst rho) inp i = Some v \\<longrightarrow> good v) \\<and>\n    |{i. lift (psubst rho) inp i \\<noteq> None}| <o |UNIV|", "by (auto simp add: lift_def split: option.splits)"], ["", "lemma psubstBinp_preserves_good[simp]:\nassumes good_rho: \"goodEnv rho\" and good: \"goodBinp binp\"\nshows \"goodBinp (binp %%[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp binp %%[rho]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. goodBinp binp %%[rho]", "unfolding goodBinp_def psubstBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  (\\<forall>i v. binp i = Some v \\<longrightarrow> goodAbs v) \\<and>\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<forall>i v.\n        lift (psubstAbs rho) binp i = Some v \\<longrightarrow>\n        goodAbs v) \\<and>\n    |{i. lift (psubstAbs rho) binp i \\<noteq> None}| <o |UNIV|", "by (auto simp add: lift_def split: option.splits)"], ["", "lemma psubstEnv_preserves_good[simp]:\nassumes good: \"goodEnv rho\" and good': \"goodEnv rho'\"\nshows \"goodEnv (rho &[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv rho &[rho']", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        rho &[rho'] ys i = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v. rho &[rho'] ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "fix zs z X'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v. rho &[rho'] ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "assume *: \"(rho &[rho']) zs z = Some X'\""], ["proof (state)\nthis:\n  rho &[rho'] zs z = Some X'\n\ngoal (2 subgoals):\n 1. \\<And>ys i v. rho &[rho'] ys i = Some v \\<Longrightarrow> good v\n 2. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "show \"good X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X'", "proof(cases \"rho zs z\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho zs z = None \\<Longrightarrow> good X'\n 2. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "case None"], ["proof (state)\nthis:\n  rho zs z = None\n\ngoal (2 subgoals):\n 1. rho zs z = None \\<Longrightarrow> good X'\n 2. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "hence \"rho' zs z = Some X'\""], ["proof (prove)\nusing this:\n  rho zs z = None\n\ngoal (1 subgoal):\n 1. rho' zs z = Some X'", "using *"], ["proof (prove)\nusing this:\n  rho zs z = None\n  rho &[rho'] zs z = Some X'\n\ngoal (1 subgoal):\n 1. rho' zs z = Some X'", "unfolding psubstEnv_def"], ["proof (prove)\nusing this:\n  rho zs z = None\n  (case rho zs z of None \\<Rightarrow> rho' zs z\n   | Some X \\<Rightarrow> Some X #[rho']) =\n  Some X'\n\ngoal (1 subgoal):\n 1. rho' zs z = Some X'", "by auto"], ["proof (state)\nthis:\n  rho' zs z = Some X'\n\ngoal (2 subgoals):\n 1. rho zs z = None \\<Longrightarrow> good X'\n 2. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  rho' zs z = Some X'\n\ngoal (1 subgoal):\n 1. good X'", "using good'"], ["proof (prove)\nusing this:\n  rho' zs z = Some X'\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. good X'", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho' zs z = Some X'\n  (\\<forall>ys i v. rho' ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho' ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X'", "by auto"], ["proof (state)\nthis:\n  good X'\n\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "case (Some X)"], ["proof (state)\nthis:\n  rho zs z = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "hence \"X' = (X #[rho'])\""], ["proof (prove)\nusing this:\n  rho zs z = Some X\n\ngoal (1 subgoal):\n 1. X' = X #[rho']", "using *"], ["proof (prove)\nusing this:\n  rho zs z = Some X\n  rho &[rho'] zs z = Some X'\n\ngoal (1 subgoal):\n 1. X' = X #[rho']", "unfolding psubstEnv_def"], ["proof (prove)\nusing this:\n  rho zs z = Some X\n  (case rho zs z of None \\<Rightarrow> rho' zs z\n   | Some X \\<Rightarrow> Some X #[rho']) =\n  Some X'\n\ngoal (1 subgoal):\n 1. X' = X #[rho']", "by auto"], ["proof (state)\nthis:\n  X' = X #[rho']\n\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "moreover"], ["proof (state)\nthis:\n  X' = X #[rho']\n\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "have \"good X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X", "using Some good"], ["proof (prove)\nusing this:\n  rho zs z = Some X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho zs z = Some X\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X", "by auto"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a. rho zs z = Some a \\<Longrightarrow> good X'", "ultimately"], ["proof (chain)\npicking this:\n  X' = X #[rho']\n  good X", "show ?thesis"], ["proof (prove)\nusing this:\n  X' = X #[rho']\n  good X\n\ngoal (1 subgoal):\n 1. good X'", "using good' psubst_preserves_good"], ["proof (prove)\nusing this:\n  X' = X #[rho']\n  good X\n  goodEnv rho'\n  \\<lbrakk>goodEnv ?rho; good ?X\\<rbrakk> \\<Longrightarrow> good ?X #[?rho]\n\ngoal (1 subgoal):\n 1. good X'", "by auto"], ["proof (state)\nthis:\n  good X'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  good X'\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "fix xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "let ?Left = \"{y. (rho &[rho']) ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "let ?Left1 = \"{y. rho ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "let ?Left2 = \"{y. rho' ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "have \"|?Left1| <o |UNIV :: 'var set| \\<and> |?Left2| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n    |{y. rho' ys y \\<noteq> None}| <o |UNIV|", "using good good'"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n    |{y. rho' ys y \\<noteq> None}| <o |UNIV|", "unfolding goodEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys. liftAll good (rho ys)) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  (\\<forall>ys. liftAll good (rho' ys)) \\<and>\n  (\\<forall>ys. |{y. rho' ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n    |{y. rho' ys y \\<noteq> None}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n  |{y. rho' ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "hence \"|?Left1 \\<union> ?Left2| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n  |{y. rho' ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n    |UNIV|", "using var_infinite_INNER card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV| \\<and>\n  |{y. rho' ys y \\<noteq> None}| <o |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "{"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "have \"?Left \\<subseteq> ?Left1 \\<union> ?Left2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. rho &[rho'] ys y \\<noteq> None}\n    \\<subseteq> {y. rho ys y \\<noteq> None} \\<union>\n                {y. rho' ys y \\<noteq> None}", "unfolding psubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. (case rho ys y of None \\<Rightarrow> rho' ys y\n         | Some X \\<Rightarrow> Some X #[rho']) \\<noteq>\n        None}\n    \\<subseteq> {y. rho ys y \\<noteq> None} \\<union>\n                {y. rho' ys y \\<noteq> None}", "by auto"], ["proof (state)\nthis:\n  {y. rho &[rho'] ys y \\<noteq> None}\n  \\<subseteq> {y. rho ys y \\<noteq> None} \\<union>\n              {y. rho' ys y \\<noteq> None}\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "hence \"|?Left| \\<le>o |?Left1 \\<union> ?Left2|\""], ["proof (prove)\nusing this:\n  {y. rho &[rho'] ys y \\<noteq> None}\n  \\<subseteq> {y. rho ys y \\<noteq> None} \\<union>\n              {y. rho' ys y \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n    |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  {y. rho &[rho'] ys y \\<noteq> None}\n  \\<subseteq> {y. rho ys y \\<noteq> None} \\<union>\n              {y. rho' ys y \\<noteq> None}\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n    |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|", "by auto"], ["proof (state)\nthis:\n  |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "}"], ["proof (state)\nthis:\n  |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n  |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|", "show \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n  |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}| <o\n  |UNIV|\n  |{y. rho &[rho'] ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {y. rho' ys y \\<noteq> None}|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{y. rho &[rho'] ys y \\<noteq> None}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas psubstAll_preserve_good =\npsubst_preserves_good psubstAbs_preserves_good\npsubstInp_preserves_good psubstBinp_preserves_good\npsubstEnv_preserves_good"], ["", "lemma idEnv_preserves_good[simp]: \"goodEnv idEnv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv idEnv", "unfolding goodEnv_def idEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys i v. None = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys. |{y. None \\<noteq> None}| <o |UNIV|)", "using var_infinite_INNER finite_ordLess_infinite2"], ["proof (prove)\nusing this:\n  infinite UNIV\n  \\<lbrakk>finite ?A; infinite ?B\\<rbrakk> \\<Longrightarrow> |?A| <o |?B|\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v. None = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys. |{y. None \\<noteq> None}| <o |UNIV|)", "by auto"], ["", "lemma updEnv_preserves_good[simp]:\nassumes good_X: \"good X\" and good_rho: \"goodEnv rho\"\nshows \"goodEnv (rho [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho [x \\<leftarrow> X]_xs)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. goodEnv (rho [x \\<leftarrow> X]_xs)", "unfolding updEnv_def goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  good X\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        (if ys = xs \\<and> i = x then Some X else rho ys i) =\n        Some v \\<longrightarrow>\n        good v) \\<and>\n    (\\<forall>ys.\n        |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n             None}| <o\n        |UNIV|)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|;\n        (if ys = xs \\<and> i = x then Some X else rho ys i) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> good v\n 2. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "fix ys y Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|;\n        (if ys = xs \\<and> i = x then Some X else rho ys i) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> good v\n 2. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "assume \"good X\" and \"\\<forall>ys y Y. rho ys y = Some Y \\<longrightarrow> good Y\"\n  and \"(if ys = xs \\<and> y = x then Some X else rho ys y) = Some Y\""], ["proof (state)\nthis:\n  good X\n  \\<forall>ys y Y. rho ys y = Some Y \\<longrightarrow> good Y\n  (if ys = xs \\<and> y = x then Some X else rho ys y) = Some Y\n\ngoal (2 subgoals):\n 1. \\<And>ys i v.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|;\n        (if ys = xs \\<and> i = x then Some X else rho ys i) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> good v\n 2. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "thus \"good Y\""], ["proof (prove)\nusing this:\n  good X\n  \\<forall>ys y Y. rho ys y = Some Y \\<longrightarrow> good Y\n  (if ys = xs \\<and> y = x then Some X else rho ys y) = Some Y\n\ngoal (1 subgoal):\n 1. good Y", "by(cases \"ys = xs \\<and> y = x\") auto"], ["proof (state)\nthis:\n  good Y\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "fix ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "let ?V' = \"{y.  (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "let ?V = \"\\<lambda> ys. {y. rho ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "assume \"\\<forall> ys. |?V ys| <o |UNIV :: 'var set|\""], ["proof (state)\nthis:\n  \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "hence \"|{x} \\<union> ?V ys| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|", "using var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|", "by fastforce"], ["proof (state)\nthis:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "{"], ["proof (state)\nthis:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "have \"?V' \\<subseteq> {x} \\<union> ?V ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq> None}\n    \\<subseteq> {x} \\<union> {y. rho ys y \\<noteq> None}", "by auto"], ["proof (state)\nthis:\n  {y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq> None}\n  \\<subseteq> {x} \\<union> {y. rho ys y \\<noteq> None}\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "hence \"|?V'| \\<le>o |{x} \\<union> ?V ys|\""], ["proof (prove)\nusing this:\n  {y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq> None}\n  \\<subseteq> {x} \\<union> {y. rho ys y \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n         None}| \\<le>o\n    |{x} \\<union> {y. rho ys y \\<noteq> None}|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  {y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq> None}\n  \\<subseteq> {x} \\<union> {y. rho ys y \\<noteq> None}\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n         None}| \\<le>o\n    |{x} \\<union> {y. rho ys y \\<noteq> None}|", "by auto"], ["proof (state)\nthis:\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| \\<le>o\n  |{x} \\<union> {y. rho ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "}"], ["proof (state)\nthis:\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| \\<le>o\n  |{x} \\<union> {y. rho ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>good X;\n        \\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v;\n        \\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{y. (if ys = xs \\<and> y = x then Some X\n                               else rho ys y) \\<noteq>\n                              None}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| \\<le>o\n  |{x} \\<union> {y. rho ys y \\<noteq> None}|", "show \"|?V'| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| \\<le>o\n  |{x} \\<union> {y. rho ys y \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n         None}| <o\n    |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{x} \\<union> {y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| \\<le>o\n  |{x} \\<union> {y. rho ys y \\<noteq> None}|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n         None}| <o\n    |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{y. (if ys = xs \\<and> y = x then Some X else rho ys y) \\<noteq>\n       None}| <o\n  |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getEnv_preserves_good[simp]:\nassumes \"goodEnv rho\" and \"rho xs x = Some X\"\nshows \"good X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. good X", "by simp"], ["", "lemmas envOps_preserve_good =\nidEnv_preserves_good updEnv_preserves_good\ngetEnv_preserves_good"], ["", "lemma subst_preserves_good[simp]:\nassumes \"good X\" and \"good Y\"\nshows \"good (Y #[X / x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Y #[X / x]_xs)", "unfolding subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. good Y #[idEnv [x \\<leftarrow> X]_xs]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. good Y #[idEnv [x \\<leftarrow> X]_xs]", "by simp"], ["", "lemma substAbs_preserves_good[simp]:\nassumes \"good X\" and \"goodAbs A\"\nshows \"goodAbs (A $[X / x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (A $[X / x]_xs)", "unfolding substAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A $[idEnv [x \\<leftarrow> X]_xs]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodAbs A\n\ngoal (1 subgoal):\n 1. goodAbs A $[idEnv [x \\<leftarrow> X]_xs]", "by simp"], ["", "lemma substInp_preserves_good[simp]:\nassumes \"good X\" and \"goodInp inp\"\nshows \"goodInp (inp %[X / x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (inp %[X / x]_xs)", "unfolding substInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp inp %[idEnv [x \\<leftarrow> X]_xs]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodInp inp\n\ngoal (1 subgoal):\n 1. goodInp inp %[idEnv [x \\<leftarrow> X]_xs]", "by simp"], ["", "lemma substBinp_preserves_good[simp]:\nassumes \"good X\" and \"goodBinp binp\"\nshows \"goodBinp (binp %%[X / x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (binp %%[X / x]_xs)", "unfolding substBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp binp %%[idEnv [x \\<leftarrow> X]_xs]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. goodBinp binp %%[idEnv [x \\<leftarrow> X]_xs]", "by simp"], ["", "lemma substEnv_preserves_good[simp]:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"goodEnv (rho &[X / x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho &[X / x]_xs)", "unfolding substEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv rho &[idEnv [x \\<leftarrow> X]_xs]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. goodEnv rho &[idEnv [x \\<leftarrow> X]_xs]", "by simp"], ["", "lemmas substAll_preserve_good =\nsubst_preserves_good substAbs_preserves_good\nsubstInp_preserves_good substBinp_preserves_good\nsubstEnv_preserves_good"], ["", "lemma vsubst_preserves_good[simp]:\nassumes \"good Y\"\nshows \"good (Y #[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Y #[x1 // x]_xs)", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Y #[Var xs x1 / x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  good Y\n\ngoal (1 subgoal):\n 1. good (Y #[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstAbs_preserves_good[simp]:\nassumes \"goodAbs A\"\nshows \"goodAbs (A $[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (A $[x1 // x]_xs)", "unfolding vsubstAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs (A $[Var xs x1 / x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. goodAbs (A $[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstInp_preserves_good[simp]:\nassumes \"goodInp inp\"\nshows \"goodInp (inp %[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (inp %[x1 // x]_xs)", "unfolding vsubstInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (inp %[Var xs x1 / x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n\ngoal (1 subgoal):\n 1. goodInp (inp %[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstBinp_preserves_good[simp]:\nassumes \"goodBinp binp\"\nshows \"goodBinp (binp %%[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (binp %%[x1 // x]_xs)", "unfolding vsubstBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodBinp (binp %%[Var xs x1 / x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. goodBinp (binp %%[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstEnv_preserves_good[simp]:\nassumes \"goodEnv rho\"\nshows \"goodEnv (rho &[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho &[x1 // x]_xs)", "unfolding vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho &[Var xs x1 / x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. goodEnv (rho &[Var xs x1 / x]_xs)", "by simp"], ["", "lemmas vsubstAll_preserve_good =\nvsubst_preserves_good vsubstAbs_preserves_good\nvsubstInp_preserves_good vsubstBinp_preserves_good\nvsubstEnv_preserves_good"], ["", "lemmas all_preserve_good =\nCons_preserve_good\nswapAll_preserve_good\npsubstAll_preserve_good\nenvOps_preserve_good\nsubstAll_preserve_good\nvsubstAll_preserve_good"], ["", "subsubsection \\<open>The syntactic operators are almost constructors\\<close>"], ["", "text\\<open>The only one that does not act precisely like a constructor is ``Abs\".\\<close>"], ["", "theorem Var_inj[simp]:\n\"(((Var xs x)::('index,'bindex,'varSort,'var,'opSym)term) = Var ys y) =\n (xs = ys \\<and> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var xs x = Var ys y) = (xs = ys \\<and> x = y)", "by (metis alpha_qVar_iff pick_Var_qVar qTerm.inject)"], ["", "lemma Op_inj[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nand \"goodInp inp'\" and \"goodBinp binp'\"\nshows\n\"(Op delta inp binp = Op delta' inp' binp') =\n (delta = delta' \\<and> inp = inp' \\<and> binp = binp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Op delta inp binp = Op delta' inp' binp') =\n    (delta = delta' \\<and> inp = inp' \\<and> binp = binp')", "using assms pickInp_alphaInp_iff_equal pickBinp_alphaBinp_iff_equal \ngoodInp_imp_qGoodInp_pickInp goodBinp_imp_qGoodBinp_pickBinp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp inp'\n  goodBinp binp'\n  \\<lbrakk>goodInp ?inp; goodInp ?inp'\\<rbrakk>\n  \\<Longrightarrow> ((pickInp ?inp, pickInp ?inp') \\<in> alphaInp) =\n                    (?inp = ?inp')\n  \\<lbrakk>goodBinp ?binp; goodBinp ?binp'\\<rbrakk>\n  \\<Longrightarrow> ((pickBinp ?binp, pickBinp ?binp') \\<in> alphaBinp) =\n                    (?binp = ?binp')\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n\ngoal (1 subgoal):\n 1. (Op delta inp binp = Op delta' inp' binp') =\n    (delta = delta' \\<and> inp = inp' \\<and> binp = binp')", "unfolding Op_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp inp'\n  goodBinp binp'\n  \\<lbrakk>goodInp ?inp; goodInp ?inp'\\<rbrakk>\n  \\<Longrightarrow> ((pickInp ?inp, pickInp ?inp') \\<in> alphaInp) =\n                    (?inp = ?inp')\n  \\<lbrakk>goodBinp ?binp; goodBinp ?binp'\\<rbrakk>\n  \\<Longrightarrow> ((pickBinp ?binp, pickBinp ?binp') \\<in> alphaBinp) =\n                    (?binp = ?binp')\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n\ngoal (1 subgoal):\n 1. (asTerm (qOp delta (pickInp inp) (pickBinp binp)) =\n     asTerm (qOp delta' (pickInp inp') (pickBinp binp'))) =\n    (delta = delta' \\<and> inp = inp' \\<and> binp = binp')", "by (fastforce simp: asTerm_equal_iff_alpha)"], ["", "text\\<open>``Abs\" is almost injective (``ainj\"), with almost injectivity expressed\n   in two ways:\n   \\\\- maximally, using \"forall\" -- this is suitable for elimination of ``Abs\" equalities;\n   \\\\- minimally, using \"exists\" -- this is suitable for introduction of ``Abs\" equalities.\n\\<close>"], ["", "lemma Abs_ainj_all:\nassumes good: \"good X\" and good': \"good X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "let ?qX = \"pick X\""], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "let ?qX' = \"pick X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have qgood: \"qGood ?qX \\<and> qGood ?qX'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "using good good' good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good X'\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "by auto"], ["proof (state)\nthis:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "hence qgood_qXyx: \"\\<forall> y. qGood (?qX #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"qGoodAbs(qAbs xs x ?qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "using qgood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "hence \"(Abs xs x X = Abs xs' x' X') = (qAbs xs x ?qX $= qAbs xs' x' ?qX')\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (asAbs (qAbs xs x (pick X)) = asAbs (qAbs xs' x' (pick X'))) =\n    (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))", "by (auto simp add: asAbs_equal_iff_alphaAbs)"], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "also"], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"\\<dots> = (xs = xs' \\<and>\n             (\\<forall> y. (y = x \\<or> qFresh xs y ?qX) \\<and> (y = x' \\<or> qFresh xs y ?qX') \\<longrightarrow>\n                   (?qX #[[y \\<and> x]]_xs) #= (?qX' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))", "using qgood alphaAbs_qAbs_iff_all_equal_or_qFresh[of ?qX ?qX']"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n  \\<lbrakk>qGood (pick X); qGood (pick X')\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x (pick X) $= qAbs ?xs' ?x' (pick X')) =\n                    (?xs = ?xs' \\<and>\n                     (\\<forall>y.\n                         (y = ?x \\<or> qFresh ?xs y (pick X)) \\<and>\n                         (y = ?x' \\<or>\n                          qFresh ?xs y (pick X')) \\<longrightarrow>\n                         pick X #[[y \\<and> ?x]]_?xs #=\n                         pick X' #[[y \\<and> ?x']]_?xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qFresh xs y (pick X)) \\<and>\n       (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "also"], ["proof (state)\nthis:\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qFresh xs y (pick X)) \\<and>\n       (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"\\<dots> = (xs = xs' \\<and>\n             (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n                   (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "unfolding fresh_def swap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         asTerm (pick X #[[y \\<and> x]]_xs) =\n         asTerm (pick X' #[[y \\<and> x']]_xs)))", "using qgood_qXyx"], ["proof (prove)\nusing this:\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y (pick X)) \\<and>\n         (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n         asTerm (pick X #[[y \\<and> x]]_xs) =\n         asTerm (pick X' #[[y \\<and> x']]_xs)))", "by (auto simp add: asTerm_equal_iff_alpha)"], ["proof (state)\nthis:\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qFresh xs y (pick X)) \\<and>\n       (y = x' \\<or> qFresh xs y (pick X')) \\<longrightarrow>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "finally"], ["proof (chain)\npicking this:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "."], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_ainj_ex:\nassumes good: \"good X\" and good': \"good X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "let ?qX = \"pick X\""], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "let ?qX' = \"pick X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have qgood: \"qGood ?qX \\<and> qGood ?qX'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "using good good' good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good X'\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "by auto"], ["proof (state)\nthis:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "hence qgood_qXyx: \"\\<forall> y. qGood (?qX #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"qGoodAbs(qAbs xs x ?qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "using qgood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "hence \"(Abs xs x X = Abs xs' x' X') = (qAbs xs x ?qX $= qAbs xs' x' ?qX')\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. (asAbs (qAbs xs x (pick X)) = asAbs (qAbs xs' x' (pick X'))) =\n    (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))", "by (auto simp add: asAbs_equal_iff_alphaAbs)"], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "also"], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X'))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"\\<dots> =  (xs = xs' \\<and>\n              (\\<exists> y. y \\<notin> {x,x'} \\<and> qFresh xs y ?qX \\<and> qFresh xs y ?qX' \\<and>\n                    (?qX #[[y \\<and> x]]_xs) #= (?qX' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))", "using qgood alphaAbs_qAbs_iff_ex_distinct_qFresh[of ?qX xs x xs' x' ?qX']"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n  qGood (pick X) \\<Longrightarrow>\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y (pick X) \\<and>\n       qFresh xs y (pick X') \\<and>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y (pick X) \\<and>\n       qFresh xs y (pick X') \\<and>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "also"], ["proof (state)\nthis:\n  (qAbs xs x (pick X) $= qAbs xs' x' (pick X')) =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y (pick X) \\<and>\n       qFresh xs y (pick X') \\<and>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "have \"\\<dots> =  (xs = xs' \\<and>\n               (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n                     (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "unfolding fresh_def swap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         asTerm (pick X #[[y \\<and> x]]_xs) =\n         asTerm (pick X' #[[y \\<and> x']]_xs)))", "using qgood_qXyx asTerm_equal_iff_alpha"], ["proof (prove)\nusing this:\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n  qGood ?qX \\<or> qGood ?qY \\<Longrightarrow>\n  (asTerm ?qX = asTerm ?qY) = (?qX #= ?qY)\n\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y (pick X) \\<and>\n         qFresh xs y (pick X') \\<and>\n         asTerm (pick X #[[y \\<and> x]]_xs) =\n         asTerm (pick X' #[[y \\<and> x']]_xs)))", "by auto"], ["proof (state)\nthis:\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y (pick X) \\<and>\n       qFresh xs y (pick X') \\<and>\n       pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)) =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       fresh xs y X \\<and>\n       fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "finally"], ["proof (chain)\npicking this:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       fresh xs y X \\<and>\n       fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       fresh xs y X \\<and>\n       fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "."], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       fresh xs y X \\<and>\n       fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_cong[fundef_cong]:\nassumes good: \"good X\" and good': \"good X'\"\nand y: \"fresh xs y X\" and y': \"fresh xs y X'\"\nand eq: \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "let ?qX = \"pick X\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "let ?qX' = \"pick X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "have qgood: \"qGood ?qX \\<and> qGood ?qX'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "using good good' good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good X'\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X) \\<and> qGood (pick X')", "by auto"], ["proof (state)\nthis:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "hence qgood_qXyx: \"\\<forall> y. qGood (?qX #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "have qEq: \"(?qX #[[y \\<and> x]]_xs) #= (?qX' #[[y \\<and> x']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs", "using eq"], ["proof (prove)\nusing this:\n  X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs", "unfolding fresh_def swap_def"], ["proof (prove)\nusing this:\n  asTerm (pick X #[[y \\<and> x]]_xs) = asTerm (pick X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs", "using qgood_qXyx asTerm_equal_iff_alpha"], ["proof (prove)\nusing this:\n  asTerm (pick X #[[y \\<and> x]]_xs) = asTerm (pick X' #[[y \\<and> x']]_xs)\n  \\<forall>y. qGood (pick X #[[y \\<and> x]]_xs)\n  qGood ?qX \\<or> qGood ?qY \\<Longrightarrow>\n  (asTerm ?qX = asTerm ?qY) = (?qX #= ?qY)\n\ngoal (1 subgoal):\n 1. pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs", "by auto"], ["proof (state)\nthis:\n  pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "have \"(qAbs xs x ?qX $= qAbs xs x' ?qX')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick X')", "apply(rule alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. qGood (pick X)\n 2. alphaAbs_ex_equal_or_qFresh xs x (pick X) xs x' (pick X')", "using qgood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (2 subgoals):\n 1. qGood (pick X)\n 2. alphaAbs_ex_equal_or_qFresh xs x (pick X) xs x' (pick X')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x (pick X) xs x' (pick X')", "unfolding alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y (pick X)) \\<and>\n        (y = x' \\<or> qFresh xs y (pick X')) \\<and>\n        pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)", "using y y' qEq"], ["proof (prove)\nusing this:\n  fresh xs y X\n  fresh xs y X'\n  pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. xs = xs \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y (pick X)) \\<and>\n        (y = x' \\<or> qFresh xs y (pick X')) \\<and>\n        pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)", "unfolding fresh_def"], ["proof (prove)\nusing this:\n  qFresh xs y (pick X)\n  qFresh xs y (pick X')\n  pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. xs = xs \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y (pick X)) \\<and>\n        (y = x' \\<or> qFresh xs y (pick X')) \\<and>\n        pick X #[[y \\<and> x]]_xs #= pick X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X')\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X')\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "have \"qGoodAbs(qAbs xs x ?qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "using qgood"], ["proof (prove)\nusing this:\n  qGood (pick X) \\<and> qGood (pick X')\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X')\n  qGoodAbs (qAbs xs x (pick X))", "show \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X')\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "unfolding Abs_def"], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X')\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X)) = asAbs (qAbs xs x' (pick X'))", "by (auto simp add: asAbs_equal_iff_alphaAbs)"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_swap_fresh:\nassumes good_X: \"good X\" and fresh: \"fresh xs x' X\"\nshows \"Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "let ?x'x = \"swap xs x' x\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "let ?qx'x = \"qSwap xs x' x\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have good_pickX: \"qGood (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X)", "using good_X good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "by auto"], ["proof (state)\nthis:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "hence good_qAbs_pickX: \"qGoodAbs (qAbs xs x (pick X))\""], ["proof (prove)\nusing this:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have good_x'x_pickX: \"qGood (?qx'x (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X #[[x' \\<and> x]]_xs)", "using good_pickX qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (pick X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (pick X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "(*  *)"], ["proof (state)\nthis:\n  qGood (pick X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have \"Abs xs x X = asAbs (qAbs xs x (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = asAbs (qAbs xs x (pick X))", "unfolding Abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X)) = asAbs (qAbs xs x (pick X))", "by simp"], ["proof (state)\nthis:\n  Abs xs x X = asAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "also"], ["proof (state)\nthis:\n  Abs xs x X = asAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "{"], ["proof (state)\nthis:\n  Abs xs x X = asAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have \"qAbs xs x (pick X) $= qAbs xs x' (?qx'x (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)", "using good_pickX fresh"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)", "unfolding fresh_def"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  qFresh xs x' (pick X)\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)", "using qAbs_alphaAbs_qSwap_qFresh"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  qFresh xs x' (pick X)\n  \\<lbrakk>qGood ?X; qFresh ?xs ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $=\n                    qAbs ?xs ?x' (?X #[[?x' \\<and> ?x]]_?xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "moreover"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "{"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have \"?qx'x (pick X) #= pick (?x'x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick X #[[x' \\<and> x]]_xs #= pick (X #[x' \\<and> x]_xs)", "using good_X"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. pick X #[[x' \\<and> x]]_xs #= pick (X #[x' \\<and> x]_xs)", "by (auto simp add: pick_swap_qSwap alpha_sym)"], ["proof (state)\nthis:\n  pick X #[[x' \\<and> x]]_xs #= pick (X #[x' \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "hence \"qAbs xs x' (?qx'x (pick X)) $= qAbs xs x' (pick (?x'x X))\""], ["proof (prove)\nusing this:\n  pick X #[[x' \\<and> x]]_xs #= pick (X #[x' \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n    qAbs xs x' (pick (X #[x' \\<and> x]_xs))", "using good_x'x_pickX qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  pick X #[[x' \\<and> x]]_xs #= pick (X #[x' \\<and> x]_xs)\n  qGood (pick X #[[x' \\<and> x]]_xs)\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n    qAbs xs x' (pick (X #[x' \\<and> x]_xs))", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n  qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "}"], ["proof (state)\nthis:\n  qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n  qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n  qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n  qAbs xs x' (pick (X #[x' \\<and> x]_xs))", "have \"qAbs xs x (pick X) $= qAbs xs x' (pick (?x'x X))\""], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n  qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n  qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick (X #[x' \\<and> x]_xs))", "using good_qAbs_pickX alphaAbs_trans"], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick X #[[x' \\<and> x]]_xs)\n  qAbs xs x' (pick X #[[x' \\<and> x]]_xs) $=\n  qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n  qGoodAbs (qAbs xs x (pick X))\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $= qAbs xs x' (pick (X #[x' \\<and> x]_xs))", "by blast"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $= qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "hence \"asAbs (qAbs xs x (pick X)) = asAbs (qAbs xs x' (pick (?x'x X)))\""], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X)) =\n    asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))", "using good_qAbs_pickX"], ["proof (prove)\nusing this:\n  qAbs xs x (pick X) $= qAbs xs x' (pick (X #[x' \\<and> x]_xs))\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X)) =\n    asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))", "by (auto simp add: asAbs_equal_iff_alphaAbs)"], ["proof (state)\nthis:\n  asAbs (qAbs xs x (pick X)) =\n  asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "}"], ["proof (state)\nthis:\n  asAbs (qAbs xs x (pick X)) =\n  asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "also"], ["proof (state)\nthis:\n  asAbs (qAbs xs x (pick X)) =\n  asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "have \"asAbs (qAbs xs x' (pick (?x'x X))) = Abs xs x' (?x'x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs))) =\n    Abs xs x' (X #[x' \\<and> x]_xs)", "unfolding Abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs))) =\n    asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs)))", "by auto"], ["proof (state)\nthis:\n  asAbs (qAbs xs x' (pick (X #[x' \\<and> x]_xs))) =\n  Abs xs x' (X #[x' \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "finally"], ["proof (chain)\npicking this:\n  Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)", "."], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' (X #[x' \\<and> x]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Var_diff_Op[simp]:\n\"Var xs x \\<noteq> Op delta inp binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x \\<noteq> Op delta inp binp", "by (simp add: Op_def Var_def asTerm_equal_iff_alpha)"], ["", "lemma Op_diff_Var[simp]:\n\"Op delta inp binp \\<noteq> Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp \\<noteq> Var xs x", "using Var_diff_Op[of _ _ _ inp]"], ["proof (prove)\nusing this:\n  Var ?xs ?x \\<noteq> Op ?delta inp ?binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp \\<noteq> Var xs x", "by blast"], ["", "theorem term_nchotomy:\nassumes \"good X\"\nshows\n\"(\\<exists> xs x. X = Var xs x) \\<or>\n (\\<exists> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "let ?qX = \"pick X\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "have good_qX: \"qGood ?qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X)", "using assms good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "by auto"], ["proof (state)\nthis:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "have X: \"X = asTerm ?qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = asTerm (pick X)", "using assms asTerm_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n\ngoal (1 subgoal):\n 1. X = asTerm (pick X)", "by auto"], ["proof (state)\nthis:\n  X = asTerm (pick X)\n\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "proof(cases \"?qX\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       pick X = qVar x11 x12 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n 2. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "fix xs x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       pick X = qVar x11 x12 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n 2. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "assume Case1: \"?qX = qVar xs x\""], ["proof (state)\nthis:\n  pick X = qVar xs x\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       pick X = qVar x11 x12 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n 2. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "have \"X = Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Var xs x", "unfolding Var_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X = asTerm (qVar xs x)", "using X Case1"], ["proof (prove)\nusing this:\n  X = asTerm (pick X)\n  pick X = qVar xs x\n\ngoal (1 subgoal):\n 1. X = asTerm (qVar xs x)", "by simp"], ["proof (state)\nthis:\n  X = Var xs x\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       pick X = qVar x11 x12 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n 2. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X = Var xs x\n\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>xs x. X = Var xs x) \\<or>\n  (\\<exists>delta inp binp.\n      goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "fix delta qinp qbinp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "assume Case2: \"?qX = qOp delta qinp qbinp\""], ["proof (state)\nthis:\n  pick X = qOp delta qinp qbinp\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "hence good_qinp: \"qGoodInp qinp \\<and> qGoodBinp qbinp\""], ["proof (prove)\nusing this:\n  pick X = qOp delta qinp qbinp\n\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<and> qGoodBinp qbinp", "using good_qX"], ["proof (prove)\nusing this:\n  pick X = qOp delta qinp qbinp\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<and> qGoodBinp qbinp", "by simp"], ["proof (state)\nthis:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "let ?inp = \"asInp qinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "let ?binp = \"asBinp qbinp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "have \"qinp %= pickInp ?inp \\<and> qbinp %%= pickBinp ?binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qinp, pickInp (asInp qinp)) \\<in> alphaInp \\<and>\n    (qbinp, pickBinp (asBinp qbinp)) \\<in> alphaBinp", "using good_qinp pickInp_asInp alphaInp_sym pickBinp_asBinp alphaBinp_sym"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n  qGoodInp ?qinp \\<Longrightarrow>\n  (pickInp (asInp ?qinp), ?qinp) \\<in> alphaInp\n  (?qinp, ?qinp') \\<in> alphaInp \\<Longrightarrow>\n  (?qinp', ?qinp) \\<in> alphaInp\n  qGoodBinp ?qbinp \\<Longrightarrow>\n  (pickBinp (asBinp ?qbinp), ?qbinp) \\<in> alphaBinp\n  (?qbinp, ?qbinp') \\<in> alphaBinp \\<Longrightarrow>\n  (?qbinp', ?qbinp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (qinp, pickInp (asInp qinp)) \\<in> alphaInp \\<and>\n    (qbinp, pickBinp (asBinp qbinp)) \\<in> alphaBinp", "by blast"], ["proof (state)\nthis:\n  (qinp, pickInp (asInp qinp)) \\<in> alphaInp \\<and>\n  (qbinp, pickBinp (asBinp qbinp)) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "hence \"qOp delta qinp qbinp #= qOp delta (pickInp ?inp) (pickBinp ?binp)\""], ["proof (prove)\nusing this:\n  (qinp, pickInp (asInp qinp)) \\<in> alphaInp \\<and>\n  (qbinp, pickBinp (asBinp qbinp)) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. qOp delta qinp qbinp #=\n    qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))", "by simp"], ["proof (state)\nthis:\n  qOp delta qinp qbinp #=\n  qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "hence \"asTerm (qOp delta qinp qbinp) = Op delta ?inp ?binp\""], ["proof (prove)\nusing this:\n  qOp delta qinp qbinp #=\n  qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))\n\ngoal (1 subgoal):\n 1. asTerm (qOp delta qinp qbinp) = Op delta (asInp qinp) (asBinp qbinp)", "unfolding Op_def"], ["proof (prove)\nusing this:\n  qOp delta qinp qbinp #=\n  qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))\n\ngoal (1 subgoal):\n 1. asTerm (qOp delta qinp qbinp) =\n    asTerm (qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp)))", "using Case2 good_qX"], ["proof (prove)\nusing this:\n  qOp delta qinp qbinp #=\n  qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp))\n  pick X = qOp delta qinp qbinp\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. asTerm (qOp delta qinp qbinp) =\n    asTerm (qOp delta (pickInp (asInp qinp)) (pickBinp (asBinp qbinp)))", "by (auto simp add: asTerm_equal_iff_alpha)"], ["proof (state)\nthis:\n  asTerm (qOp delta qinp qbinp) = Op delta (asInp qinp) (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "hence \"X = Op delta ?inp ?binp\""], ["proof (prove)\nusing this:\n  asTerm (qOp delta qinp qbinp) = Op delta (asInp qinp) (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. X = Op delta (asInp qinp) (asBinp qbinp)", "using X Case2"], ["proof (prove)\nusing this:\n  asTerm (qOp delta qinp qbinp) = Op delta (asInp qinp) (asBinp qbinp)\n  X = asTerm (pick X)\n  pick X = qOp delta qinp qbinp\n\ngoal (1 subgoal):\n 1. X = Op delta (asInp qinp) (asBinp qbinp)", "by auto"], ["proof (state)\nthis:\n  X = Op delta (asInp qinp) (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "moreover"], ["proof (state)\nthis:\n  X = Op delta (asInp qinp) (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "have \"goodInp ?inp \\<and> goodBinp ?binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)", "using good_qinp qGoodInp_iff_goodInp_asInp qGoodBinp_iff_goodBinp_asBinp"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n  goodInp (asInp ?qinp) = qGoodInp ?qinp\n  goodBinp (asBinp ?qbinp) = qGoodBinp ?qbinp\n\ngoal (1 subgoal):\n 1. goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)", "by auto"], ["proof (state)\nthis:\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       pick X = qOp x21 x22 x23 \\<Longrightarrow>\n       (\\<exists>xs x. X = Var xs x) \\<or>\n       (\\<exists>delta inp binp.\n           goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "ultimately"], ["proof (chain)\npicking this:\n  X = Op delta (asInp qinp) (asBinp qbinp)\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)", "show ?thesis"], ["proof (prove)\nusing this:\n  X = Op delta (asInp qinp) (asBinp qbinp)\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. (\\<exists>xs x. X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>xs x. X = Var xs x) \\<or>\n  (\\<exists>delta inp binp.\n      goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>xs x. X = Var xs x) \\<or>\n  (\\<exists>delta inp binp.\n      goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem abs_nchotomy:\nassumes \"goodAbs A\"\nshows \"\\<exists> xs x X. good X \\<and> A = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs x X. good X \\<and> A = Abs xs x X", "by (metis Abs_asTerm_asAbs_qAbs asAbs_pick assms \n     goodAbs_imp_qGoodAbs_pick qGoodAbs.elims(2) qGood_iff_good_asTerm)"], ["", "lemmas good_freeCons =\nOp_inj Var_diff_Op Op_diff_Var"], ["", "subsection \\<open>Properties lifted from quasi-terms to terms\\<close>"], ["", "subsubsection \\<open>Simplification rules\\<close>"], ["", "theorem swap_Var_simp[simp]:\n\"((Var xs x) #[y1 \\<and> y2]_ys) = Var xs (x @xs[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[y1 \\<and> y2]_ys = Var xs (x @xs[y1 \\<and> y2]_ys)", "by (metis QuasiTerms_Swap_Fresh.qSwapAll_simps(1) Var_def asTerm_qSwap_swap qItem_simps(9))"], ["", "lemma swap_Op_simp[simp]:\nassumes \"goodInp inp\"  \"goodBinp binp\"\nshows \"((Op delta inp binp) #[x1 \\<and> x2]_xs) =\n       Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[x1 \\<and> x2]_xs =\n    Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)", "by (metis Op_asInp_asTerm_qOp Op_def asTerm_qSwap_swap assms(1) assms(2) goodBinp_imp_qGoodBinp_pickBinp goodInp_imp_qGoodInp_pickInp qGood_qGoodInp qSwapBinp_preserves_qGoodBinp \n     qSwapInp_preserves_qGoodInp qSwap_qSwapInp swapBinp_def2 swapInp_def2)"], ["", "lemma swapAbs_simp[simp]:\nassumes \"good X\"\nshows \"((Abs xs x X) $[y1 \\<and> y2]_ys) = Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 \\<and> y2]_ys =\n    Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)", "by (metis Abs_asTerm_asAbs_qAbs Abs_preserves_good alphaAbs_preserves_qGoodAbs2 asAbs_qSwapAbs_swapAbs assms goodAbs_imp_qGoodAbs_pick good_imp_qGood_pick local.Abs_def \n     local.swap_def qAbs_pick_Abs qSwapAbs.simps qSwap_preserves_qGood1)"], ["", "lemmas good_swapAll_simps =\nswap_Op_simp swapAbs_simp"], ["", "theorem fresh_Var_simp[simp]:\n\"fresh ys y (Var xs x :: ('index,'bindex,'varSort,'var,'opSym)term) \\<longleftrightarrow>\n (ys \\<noteq> xs \\<or> y \\<noteq> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y (Var xs x) = (ys \\<noteq> xs \\<or> y \\<noteq> x)", "by (simp add: Var_def fresh_asTerm_qFresh)"], ["", "lemma fresh_Op_simp[simp]:\nassumes \"goodInp inp\" \"goodBinp binp\"\nshows\n\"fresh xs x (Op delta inp binp) \\<longleftrightarrow>\n (freshInp xs x inp \\<and> freshBinp xs x binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (Op delta inp binp) =\n    (freshInp xs x inp \\<and> freshBinp xs x binp)", "by (metis Op_def Op_preserves_good assms(1) assms(2) freshBinp_def2 \nfreshInp_def2 fresh_asTerm_qFresh qFresh_qFreshInp qGood_iff_good_asTerm)"], ["", "lemma freshAbs_simp[simp]:\nassumes \"good X\"\nshows \"freshAbs ys y (Abs xs x X) \\<longleftrightarrow> (ys = xs \\<and> y = x \\<or> fresh ys y X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "let ?fr = \"fresh ys y\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "let ?qfr = \"qFresh ys y\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "let ?frA = \"freshAbs ys y\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "let ?qfrA = \"qFreshAbs ys y\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "have \"qGood (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X)", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "by(auto simp add: good_imp_qGood_pick)"], ["proof (state)\nthis:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "hence good_qAbs_pick_X: \"qGoodAbs (qAbs xs x (pick X))\""], ["proof (prove)\nusing this:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "using assms good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "(*  *)"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "have \"?frA (Abs xs x X) = ?qfrA ((pick o asAbs) (qAbs xs x (pick X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) =\n    qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X)))", "unfolding freshAbs_def Abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs ys y (pick (asAbs (qAbs xs x (pick X)))) =\n    qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X)))", "by simp"], ["proof (state)\nthis:\n  freshAbs ys y (Abs xs x X) =\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "also"], ["proof (state)\nthis:\n  freshAbs ys y (Abs xs x X) =\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "{"], ["proof (state)\nthis:\n  freshAbs ys y (Abs xs x X) =\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "have \"(pick o asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)", "using good_qAbs_pick_X pick_asAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n  qGoodAbs ?qA \\<Longrightarrow> pick (asAbs ?qA) $= ?qA\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)", "by fastforce"], ["proof (state)\nthis:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "hence \"?qfrA ((pick o asAbs) (qAbs xs x (pick X))) = ?qfrA (qAbs xs x (pick X))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n\ngoal (1 subgoal):\n 1. qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X))) =\n    qFreshAbs ys y (qAbs xs x (pick X))", "using good_qAbs_pick_X qFreshAbs_preserves_alphaAbs"], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n  qGoodAbs (qAbs xs x (pick X))\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A'; ?A $= ?A'\\<rbrakk>\n  \\<Longrightarrow> qFreshAbs ?zs ?z ?A = qFreshAbs ?zs ?z ?A'\n\ngoal (1 subgoal):\n 1. qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X))) =\n    qFreshAbs ys y (qAbs xs x (pick X))", "by blast"], ["proof (state)\nthis:\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X))) =\n  qFreshAbs ys y (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "}"], ["proof (state)\nthis:\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X))) =\n  qFreshAbs ys y (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "also"], ["proof (state)\nthis:\n  qFreshAbs ys y ((pick \\<circ> asAbs) (qAbs xs x (pick X))) =\n  qFreshAbs ys y (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "have \"?qfrA(qAbs xs x (pick X)) = (ys = xs \\<and> y = x \\<or> ?qfr (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs ys y (qAbs xs x (pick X)) =\n    (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X))", "by simp"], ["proof (state)\nthis:\n  qFreshAbs ys y (qAbs xs x (pick X)) =\n  (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "also"], ["proof (state)\nthis:\n  qFreshAbs ys y (qAbs xs x (pick X)) =\n  (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "have \"\\<dots> = (ys = xs \\<and> y = x \\<or> ?fr X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X)) =\n    (ys = xs \\<and> y = x \\<or> fresh ys y X)", "unfolding fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X)) =\n    (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X))", "by simp"], ["proof (state)\nthis:\n  (ys = xs \\<and> y = x \\<or> qFresh ys y (pick X)) =\n  (ys = xs \\<and> y = x \\<or> fresh ys y X)\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "finally"], ["proof (chain)\npicking this:\n  freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "show ?thesis"], ["proof (prove)\nusing this:\n  freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "."], ["proof (state)\nthis:\n  freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas good_freshAll_simps =\nfresh_Op_simp freshAbs_simp"], ["", "theorem skel_Var_simp[simp]:\n\"skel (Var xs x) = Branch Map.empty Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (Var xs x) = Branch Map.empty Map.empty", "by (metis alpha_qSkel pick_Var_qVar qSkel.simps(1) skel_def)"], ["", "lemma skel_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows \"skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)", "by (metis (no_types, lifting) alpha_qSkel assms \n      qOp_pickInp_pick_Op qSkel_qSkelInp skelBinp_def skelInp_def skel_def)"], ["", "lemma skelAbs_simp[simp]:\nassumes \"good X\"\nshows \"skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty", "by (metis alphaAll_qSkelAll assms qAbs_pick_Abs qSkelAbs.simps skelAbs_def skel_def)"], ["", "lemmas good_skelAll_simps =\nskel_Op_simp skelAbs_simp"], ["", "lemma psubst_Var:\nassumes \"goodEnv rho\"\nshows \"((Var xs x) #[rho]) =\n        (case rho xs x of None \\<Rightarrow> Var xs x\n                         |Some X \\<Rightarrow> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "let ?X = \"Var xs x\""], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "let ?qX = \"qVar xs x\""], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "let ?qrho = \"pickE rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "have good_qX: \"qGood ?qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qVar xs x)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. qGood (qVar xs x)", "by simp"], ["proof (state)\nthis:\n  qGood (qVar xs x)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "moreover"], ["proof (state)\nthis:\n  qGood (qVar xs x)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "have good_qrho: \"qGoodEnv ?qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "using assms goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "by auto"], ["proof (state)\nthis:\n  qGoodEnv (pickE rho)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "ultimately"], ["proof (chain)\npicking this:\n  qGood (qVar xs x)\n  qGoodEnv (pickE rho)", "have good_qXrho: \"qGood (?qX #[[?qrho]])\""], ["proof (prove)\nusing this:\n  qGood (qVar xs x)\n  qGoodEnv (pickE rho)\n\ngoal (1 subgoal):\n 1. qGood qVar xs x #[[pickE rho]]", "using assms qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (qVar xs x)\n  qGoodEnv (pickE rho)\n  goodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood qVar xs x #[[pickE rho]]", "by(auto simp del: qGoodAll_simps qPsubst.simps)"], ["proof (state)\nthis:\n  qGood qVar xs x #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "(*  *)"], ["proof (state)\nthis:\n  qGood qVar xs x #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "have \"(?X #[rho]) = asTerm ((pick (asTerm ?qX)) #[[?qrho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] = asTerm pick (asTerm (qVar xs x)) #[[pickE rho]]", "unfolding Var_def psubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n    asTerm pick (asTerm (qVar xs x)) #[[pickE rho]]", "by simp"], ["proof (state)\nthis:\n  Var xs x #[rho] = asTerm pick (asTerm (qVar xs x)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "also"], ["proof (state)\nthis:\n  Var xs x #[rho] = asTerm pick (asTerm (qVar xs x)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "{"], ["proof (state)\nthis:\n  Var xs x #[rho] = asTerm pick (asTerm (qVar xs x)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "have \"?qX  #= pick (asTerm ?qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qVar xs x #= pick (asTerm (qVar xs x))", "using good_qX pick_asTerm alpha_sym"], ["proof (prove)\nusing this:\n  qGood (qVar xs x)\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. qVar xs x #= pick (asTerm (qVar xs x))", "by fastforce"], ["proof (state)\nthis:\n  qVar xs x #= pick (asTerm (qVar xs x))\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "hence \"(?qX #[[?qrho]]) #= ((pick (asTerm ?qX)) #[[?qrho]])\""], ["proof (prove)\nusing this:\n  qVar xs x #= pick (asTerm (qVar xs x))\n\ngoal (1 subgoal):\n 1. qVar xs x #[[pickE rho]] #= pick (asTerm (qVar xs x)) #[[pickE rho]]", "using good_qrho good_qX qPsubst_preserves_alpha1[of _ ?qX]"], ["proof (prove)\nusing this:\n  qVar xs x #= pick (asTerm (qVar xs x))\n  qGoodEnv (pickE rho)\n  qGood (qVar xs x)\n  \\<lbrakk>qGoodEnv ?rho; qGood (qVar xs x) \\<or> qGood ?Y;\n   qVar xs x #= ?Y\\<rbrakk>\n  \\<Longrightarrow> qVar xs x #[[?rho]] #= ?Y #[[?rho]]\n\ngoal (1 subgoal):\n 1. qVar xs x #[[pickE rho]] #= pick (asTerm (qVar xs x)) #[[pickE rho]]", "by fastforce"], ["proof (state)\nthis:\n  qVar xs x #[[pickE rho]] #= pick (asTerm (qVar xs x)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "hence \"asTerm ((pick (asTerm ?qX))  #[[?qrho]]) = asTerm (?qX #[[?qrho]])\""], ["proof (prove)\nusing this:\n  qVar xs x #[[pickE rho]] #= pick (asTerm (qVar xs x)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n    asTerm qVar xs x #[[pickE rho]]", "using good_qXrho asTerm_equal_iff_alpha[of \"?qX #[[?qrho]]\"]"], ["proof (prove)\nusing this:\n  qVar xs x #[[pickE rho]] #= pick (asTerm (qVar xs x)) #[[pickE rho]]\n  qGood qVar xs x #[[pickE rho]]\n  qGood qVar xs x #[[pickE rho]] \\<or> qGood ?qY \\<Longrightarrow>\n  (asTerm qVar xs x #[[pickE rho]] = asTerm ?qY) =\n  (qVar xs x #[[pickE rho]] #= ?qY)\n\ngoal (1 subgoal):\n 1. asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n    asTerm qVar xs x #[[pickE rho]]", "by blast"], ["proof (state)\nthis:\n  asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n  asTerm qVar xs x #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "}"], ["proof (state)\nthis:\n  asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n  asTerm qVar xs x #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "also"], ["proof (state)\nthis:\n  asTerm pick (asTerm (qVar xs x)) #[[pickE rho]] =\n  asTerm qVar xs x #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "have \"asTerm (?qX #[[?qrho]]) =\n             asTerm (case ?qrho xs x of None \\<Rightarrow> qVar xs x\n                                       |Some qY \\<Rightarrow> qY)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm qVar xs x #[[pickE rho]] =\n    asTerm\n     (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n      | Some qY \\<Rightarrow> qY)", "unfolding Var_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm qVar xs x #[[pickE rho]] =\n    asTerm\n     (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n      | Some qY \\<Rightarrow> qY)", "by simp"], ["proof (state)\nthis:\n  asTerm qVar xs x #[[pickE rho]] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "finally"], ["proof (chain)\npicking this:\n  Var xs x #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)", "have 1: \"(?X #[rho]) =  asTerm (case ?qrho xs x of None \\<Rightarrow> qVar xs x\n                                                            |Some qY \\<Rightarrow> qY)\""], ["proof (prove)\nusing this:\n  Var xs x #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    asTerm\n     (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n      | Some qY \\<Rightarrow> qY)", "."], ["proof (state)\nthis:\n  Var xs x #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "proof(cases \"rho xs x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "assume Case1: \"rho xs x = None\""], ["proof (state)\nthis:\n  rho xs x = None\n\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "hence \"?qrho xs x = None\""], ["proof (prove)\nusing this:\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. pickE rho xs x = None", "unfolding pickE_def lift_def"], ["proof (prove)\nusing this:\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (case rho xs x of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (pick v)) =\n    None", "by simp"], ["proof (state)\nthis:\n  pickE rho xs x = None\n\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "thus ?thesis"], ["proof (prove)\nusing this:\n  pickE rho xs x = None\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "using 1 Case1"], ["proof (prove)\nusing this:\n  pickE rho xs x = None\n  Var xs x #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "unfolding Var_def"], ["proof (prove)\nusing this:\n  pickE rho xs x = None\n  asTerm (qVar xs x) #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. asTerm (qVar xs x) #[rho] =\n    (case rho xs x of None \\<Rightarrow> asTerm (qVar xs x)\n     | Some X \\<Rightarrow> X)", "by simp"], ["proof (state)\nthis:\n  Var xs x #[rho] =\n  (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "assume Case2: \"rho xs x = Some X\""], ["proof (state)\nthis:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "hence \"good X\""], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. good X", "using assms"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X", "by auto"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "hence \"asTerm (pick X) = X\""], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. asTerm (pick X) = X", "using asTerm_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n\ngoal (1 subgoal):\n 1. asTerm (pick X) = X", "by auto"], ["proof (state)\nthis:\n  asTerm (pick X) = X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "moreover"], ["proof (state)\nthis:\n  asTerm (pick X) = X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "have qrho: \"?qrho xs x = Some (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickE rho xs x = Some (pick X)", "using Case2"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. pickE rho xs x = Some (pick X)", "unfolding pickE_def lift_def"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (case rho xs x of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (pick v)) =\n    Some (pick X)", "by simp"], ["proof (state)\nthis:\n  pickE rho xs x = Some (pick X)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       Var xs x #[rho] =\n       (case rho xs x of None \\<Rightarrow> Var xs x\n        | Some X \\<Rightarrow> X)", "ultimately"], ["proof (chain)\npicking this:\n  asTerm (pick X) = X\n  pickE rho xs x = Some (pick X)", "show ?thesis"], ["proof (prove)\nusing this:\n  asTerm (pick X) = X\n  pickE rho xs x = Some (pick X)\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "using 1 Case2"], ["proof (prove)\nusing this:\n  asTerm (pick X) = X\n  pickE rho xs x = Some (pick X)\n  Var xs x #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] =\n    (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)", "unfolding Var_def"], ["proof (prove)\nusing this:\n  asTerm (pick X) = X\n  pickE rho xs x = Some (pick X)\n  asTerm (qVar xs x) #[rho] =\n  asTerm\n   (case pickE rho xs x of None \\<Rightarrow> qVar xs x\n    | Some qY \\<Rightarrow> qY)\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. asTerm (qVar xs x) #[rho] =\n    (case rho xs x of None \\<Rightarrow> asTerm (qVar xs x)\n     | Some X \\<Rightarrow> X)", "by simp"], ["proof (state)\nthis:\n  Var xs x #[rho] =\n  (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Var xs x #[rho] =\n  (case rho xs x of None \\<Rightarrow> Var xs x | Some X \\<Rightarrow> X)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary psubst_Var_simp1[simp]:\nassumes \"goodEnv rho\" and \"rho xs x = None\"\nshows \"((Var xs x) #[rho]) = Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] = Var xs x", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] = Var xs x", "by(simp add: psubst_Var)"], ["", "corollary psubst_Var_simp2[simp]:\nassumes \"goodEnv rho\" and \"rho xs x = Some X\"\nshows \"((Var xs x) #[rho]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] = X", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] = X", "by(simp add: psubst_Var)"], ["", "lemma psubst_Op_simp[simp]:\nassumes good_inp: \"goodInp inp\"  \"goodBinp binp\"\nand good_rho: \"goodEnv rho\"\nshows\n\"((Op delta inp binp) #[rho]) = Op delta (inp %[rho]) (binp %%[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?qrho = \"pickE rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?sbs = \"psubst rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?qsbs = \"qPsubst ?qrho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?sbsI = \"psubstInp rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?qsbsI = \"qPsubstInp ?qrho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?sbsB = \"psubstBinp rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?qsbsB = \"qPsubstBinp ?qrho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?op = \"Op delta\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "let ?qop = \"qOp delta\""], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have good_qop_pickInp_inp: \"qGood (?qop (pickInp inp) (pickBinp binp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qOp delta (pickInp inp) (pickBinp binp))", "using good_inp goodInp_imp_qGoodInp_pickInp\n                 goodBinp_imp_qGoodBinp_pickBinp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  goodInp ?inp \\<Longrightarrow> qGoodInp (pickInp ?inp)\n  goodBinp ?binp \\<Longrightarrow> qGoodBinp (pickBinp ?binp)\n\ngoal (1 subgoal):\n 1. qGood (qOp delta (pickInp inp) (pickBinp binp))", "by auto"], ["proof (state)\nthis:\n  qGood (qOp delta (pickInp inp) (pickBinp binp))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "hence \"qGood ((pick o asTerm) (?qop (pickInp inp) (pickBinp binp)))\""], ["proof (prove)\nusing this:\n  qGood (qOp delta (pickInp inp) (pickBinp binp))\n\ngoal (1 subgoal):\n 1. qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))", "using good_imp_qGood_pick qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  qGood (qOp delta (pickInp inp) (pickBinp binp))\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))", "by fastforce"], ["proof (state)\nthis:\n  qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "moreover"], ["proof (state)\nthis:\n  qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have good_qrho: \"qGoodEnv ?qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "using good_rho goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "by auto"], ["proof (state)\nthis:\n  qGoodEnv (pickE rho)\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "ultimately"], ["proof (chain)\npicking this:\n  qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))\n  qGoodEnv (pickE rho)", "have good: \"qGood (?qsbs((pick o asTerm) (?qop (pickInp inp) (pickBinp binp))))\""], ["proof (prove)\nusing this:\n  qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))\n  qGoodEnv (pickE rho)\n\ngoal (1 subgoal):\n 1. qGood\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]", "using qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood ((pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)))\n  qGoodEnv (pickE rho)\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]", "by auto"], ["proof (state)\nthis:\n  qGood\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "(*  *)"], ["proof (state)\nthis:\n  qGood\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have \"?sbs (?op inp binp) =\n        asTerm (?qsbs ((pick o asTerm) (?qop (pickInp inp) (pickBinp binp))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] =\n    asTerm\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]", "unfolding psubst_def Op_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm\n     pick\n      (asTerm (qOp delta (pickInp inp) (pickBinp binp))) #[[pickE rho]] =\n    asTerm\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]", "by simp"], ["proof (state)\nthis:\n  Op delta inp binp #[rho] =\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "also"], ["proof (state)\nthis:\n  Op delta inp binp #[rho] =\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "{"], ["proof (state)\nthis:\n  Op delta inp binp #[rho] =\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have \"(pick o asTerm) (?qop (pickInp inp) (pickBinp binp)) #=\n         ?qop (pickInp inp) (pickBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)) #=\n    qOp delta (pickInp inp) (pickBinp binp)", "using good_qop_pickInp_inp pick_asTerm"], ["proof (prove)\nusing this:\n  qGood (qOp delta (pickInp inp) (pickBinp binp))\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)) #=\n    qOp delta (pickInp inp) (pickBinp binp)", "by fastforce"], ["proof (state)\nthis:\n  (pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)) #=\n  qOp delta (pickInp inp) (pickBinp binp)\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "hence \"?qsbs((pick o asTerm) (?qop (pickInp inp) (pickBinp binp))) #=\n          ?qsbs(?qop (pickInp inp) (pickBinp binp))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)) #=\n  qOp delta (pickInp inp) (pickBinp binp)\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm)\n     (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n    qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]", "using good_qop_pickInp_inp good_qrho qPsubst_preserves_alpha1"], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm) (qOp delta (pickInp inp) (pickBinp binp)) #=\n  qOp delta (pickInp inp) (pickBinp binp)\n  qGood (qOp delta (pickInp inp) (pickBinp binp))\n  qGoodEnv (pickE rho)\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X \\<or> qGood ?Y; ?X #= ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?rho]] #= ?Y #[[?rho]]\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm)\n     (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n    qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]", "by fastforce"], ["proof (state)\nthis:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "moreover"], ["proof (state)\nthis:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have \"?qsbs (?qop (pickInp inp) (pickBinp binp)) =\n                  ?qop (?qsbsI (pickInp inp)) (?qsbsB (pickBinp binp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n    qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])", "by simp"], ["proof (state)\nthis:\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "moreover"], ["proof (state)\nthis:\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "{"], ["proof (state)\nthis:\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have \"?qsbsI (pickInp inp) %= pickInp (?sbsI inp) \\<and>\n          ?qsbsB (pickBinp binp) %%= pickBinp (?sbsB binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pickInp inp %[[pickE rho]], pickInp inp %[rho]) \\<in> alphaInp \\<and>\n    (pickBinp binp %%[[pickE rho]], pickBinp binp %%[rho]) \\<in> alphaBinp", "using good_rho good_inp pickInp_psubstInp_qPsubstInp[of inp rho]\n          pickBinp_psubstBinp_qPsubstBinp[of binp rho] alphaInp_sym alphaBinp_sym"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodInp inp\n  goodBinp binp\n  \\<lbrakk>goodInp inp; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> (pickInp inp %[rho], pickInp inp %[[pickE rho]])\n                    \\<in> alphaInp\n  \\<lbrakk>goodBinp binp; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> (pickBinp binp %%[rho], pickBinp binp %%[[pickE rho]])\n                    \\<in> alphaBinp\n  (?qinp, ?qinp') \\<in> alphaInp \\<Longrightarrow>\n  (?qinp', ?qinp) \\<in> alphaInp\n  (?qbinp, ?qbinp') \\<in> alphaBinp \\<Longrightarrow>\n  (?qbinp', ?qbinp) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. (pickInp inp %[[pickE rho]], pickInp inp %[rho]) \\<in> alphaInp \\<and>\n    (pickBinp binp %%[[pickE rho]], pickBinp binp %%[rho]) \\<in> alphaBinp", "by auto"], ["proof (state)\nthis:\n  (pickInp inp %[[pickE rho]], pickInp inp %[rho]) \\<in> alphaInp \\<and>\n  (pickBinp binp %%[[pickE rho]], pickBinp binp %%[rho]) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "hence \"?qop (?qsbsI (pickInp inp)) (?qsbsB (pickBinp binp)) #=\n           ?qop (pickInp (?sbsI inp)) (pickBinp (?sbsB binp))\""], ["proof (prove)\nusing this:\n  (pickInp inp %[[pickE rho]], pickInp inp %[rho]) \\<in> alphaInp \\<and>\n  (pickBinp binp %%[[pickE rho]], pickBinp binp %%[rho]) \\<in> alphaBinp\n\ngoal (1 subgoal):\n 1. qOp delta (pickInp inp %[[pickE rho]])\n     (pickBinp binp %%[[pickE rho]]) #=\n    qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])", "by simp"], ["proof (state)\nthis:\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]]) #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "}"], ["proof (state)\nthis:\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]]) #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "ultimately"], ["proof (chain)\npicking this:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]]) #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])", "have \"?qsbs((pick o asTerm) (?qop (pickInp inp) (pickBinp binp))) #=\n                    ?qop (pickInp (?sbsI inp)) (pickBinp (?sbsB binp))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]]) #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm)\n     (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n    qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])", "using good alpha_trans"], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]]\n  qOp delta (pickInp inp) (pickBinp binp) #[[pickE rho]] =\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]])\n  qOp delta (pickInp inp %[[pickE rho]]) (pickBinp binp %%[[pickE rho]]) #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n  qGood\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asTerm)\n     (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n    qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])", "by force"], ["proof (state)\nthis:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "hence \"asTerm (?qsbs((pick o asTerm) (?qop (pickInp inp) (pickBinp binp)))) =\n          asTerm (?qop (pickInp (?sbsI inp)) (pickBinp (?sbsB binp)))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n\ngoal (1 subgoal):\n 1. asTerm\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] =\n    asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))", "using good"], ["proof (prove)\nusing this:\n  (pick \\<circ> asTerm)\n   (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] #=\n  qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])\n  qGood\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. asTerm\n     (pick \\<circ> asTerm)\n      (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] =\n    asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))", "by (auto simp add: asTerm_equal_iff_alpha)"], ["proof (state)\nthis:\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] =\n  asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "}"], ["proof (state)\nthis:\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] =\n  asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "also"], ["proof (state)\nthis:\n  asTerm\n   (pick \\<circ> asTerm)\n    (qOp delta (pickInp inp) (pickBinp binp)) #[[pickE rho]] =\n  asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "have \"asTerm (?qop (pickInp (?sbsI inp)) (pickBinp (?sbsB binp))) =\n             ?op (?sbsI inp) (?sbsB binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])) =\n    Op delta inp %[rho] binp %%[rho]", "unfolding Op_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])) =\n    asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho]))", "by simp"], ["proof (state)\nthis:\n  asTerm (qOp delta (pickInp inp %[rho]) (pickBinp binp %%[rho])) =\n  Op delta inp %[rho] binp %%[rho]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "finally"], ["proof (chain)\npicking this:\n  Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "show ?thesis"], ["proof (prove)\nusing this:\n  Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "."], ["proof (state)\nthis:\n  Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psubstAbs_simp[simp]:\nassumes good_X: \"good X\" and good_rho: \"goodEnv rho\" and\n        x_fresh_rho: \"freshEnv xs x rho\"\nshows \"((Abs xs x X) $[rho]) = Abs xs x (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "let ?qrho = \"pickE rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "let ?sbs = \"psubst rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "let ?qsbs = \"qPsubst ?qrho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "let ?sbsA = \"psubstAbs rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "let ?qsbsA = \"qPsubstAbs ?qrho\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have good_qrho: \"qGoodEnv ?qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "using good_rho goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. qGoodEnv (pickE rho)", "by auto"], ["proof (state)\nthis:\n  qGoodEnv (pickE rho)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have good_pick_X: \"qGood (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (pick X)", "using good_X good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGood (pick X)", "by auto"], ["proof (state)\nthis:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence good_qsbs_pick_X: \"qGood(?qsbs (pick X))\""], ["proof (prove)\nusing this:\n  qGood (pick X)\n\ngoal (1 subgoal):\n 1. qGood pick X #[[pickE rho]]", "using good_qrho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (pick X)\n  qGoodEnv (pickE rho)\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood pick X #[[pickE rho]]", "by auto"], ["proof (state)\nthis:\n  qGood pick X #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have good_qAbs_pick_X: \"qGoodAbs (qAbs xs x (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "using good_X good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x (pick X))", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence \"qGoodAbs ((pick o asAbs) (qAbs xs x (pick X)))\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n\ngoal (1 subgoal):\n 1. qGoodAbs ((pick \\<circ> asAbs) (qAbs xs x (pick X)))", "using goodAbs_imp_qGoodAbs_pick qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. qGoodAbs ((pick \\<circ> asAbs) (qAbs xs x (pick X)))", "by fastforce"], ["proof (state)\nthis:\n  qGoodAbs ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence good: \"qGoodAbs (?qsbsA ((pick o asAbs) (qAbs xs x (pick X))))\""], ["proof (prove)\nusing this:\n  qGoodAbs ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n\ngoal (1 subgoal):\n 1. qGoodAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]", "using good_qrho qPsubstAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs ((pick \\<circ> asAbs) (qAbs xs x (pick X)))\n  qGoodEnv (pickE rho)\n  \\<lbrakk>qGoodEnv ?rho; qGoodAbs ?A\\<rbrakk>\n  \\<Longrightarrow> qGoodAbs ?A $[[?rho]]\n\ngoal (1 subgoal):\n 1. qGoodAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have x_fresh_qrho: \"qFreshEnv xs x ?qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x (pickE rho)", "using x_fresh_rho"], ["proof (prove)\nusing this:\n  freshEnv xs x rho\n\ngoal (1 subgoal):\n 1. qFreshEnv xs x (pickE rho)", "unfolding freshEnv_def2"], ["proof (prove)\nusing this:\n  qFreshEnv xs x (pickE rho)\n\ngoal (1 subgoal):\n 1. qFreshEnv xs x (pickE rho)", "by auto"], ["proof (state)\nthis:\n  qFreshEnv xs x (pickE rho)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "(*  *)"], ["proof (state)\nthis:\n  qFreshEnv xs x (pickE rho)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have \"?sbsA (Abs xs x X) = asAbs (?qsbsA ((pick o asAbs) (qAbs xs x (pick X))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] =\n    asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]", "unfolding psubstAbs_def Abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs pick (asAbs (qAbs xs x (pick X))) $[[pickE rho]] =\n    asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]", "by simp"], ["proof (state)\nthis:\n  Abs xs x X $[rho] =\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "also"], ["proof (state)\nthis:\n  Abs xs x X $[rho] =\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "{"], ["proof (state)\nthis:\n  Abs xs x X $[rho] =\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have \"(pick o asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)", "using good_qAbs_pick_X pick_asAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x (pick X))\n  qGoodAbs ?qA \\<Longrightarrow> pick (asAbs ?qA) $= ?qA\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)", "by fastforce"], ["proof (state)\nthis:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence \"?qsbsA((pick o asAbs) (qAbs xs x (pick X))) $= ?qsbsA(qAbs xs x (pick X))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n    qAbs xs x (pick X) $[[pickE rho]]", "using good_qAbs_pick_X good_qrho qPsubstAbs_preserves_alphaAbs1"], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $= qAbs xs x (pick X)\n  qGoodAbs (qAbs xs x (pick X))\n  qGoodEnv (pickE rho)\n  \\<lbrakk>qGoodEnv ?rho; qGoodAbs ?A \\<or> qGoodAbs ?B; ?A $= ?B\\<rbrakk>\n  \\<Longrightarrow> ?A $[[?rho]] $= ?B $[[?rho]]\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n    qAbs xs x (pick X) $[[pickE rho]]", "by force"], ["proof (state)\nthis:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "moreover"], ["proof (state)\nthis:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X) $[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have \"?qsbsA(qAbs xs x (pick X)) $= qAbs xs x (?qsbs (pick X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]", "using qFresh_qPsubst_commute_qAbs good_pick_X good_qrho x_fresh_qrho"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGood ?X; qGoodEnv ?rho; qFreshEnv ?xs ?x ?rho\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $[[?rho]] $= qAbs ?xs ?x ?X #[[?rho]]\n  qGood (pick X)\n  qGoodEnv (pickE rho)\n  qFreshEnv xs x (pickE rho)\n\ngoal (1 subgoal):\n 1. qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]", "by auto"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "moreover"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "{"], ["proof (state)\nthis:\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have \"?qsbs (pick X) #= pick (?sbs X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick X #[[pickE rho]] #= pick X #[rho]", "using good_rho good_X pick_psubst_qPsubst alpha_sym"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good X\n  \\<lbrakk>good ?X; goodEnv ?rho\\<rbrakk>\n  \\<Longrightarrow> pick ?X #[?rho] #= pick ?X #[[pickE ?rho]]\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. pick X #[[pickE rho]] #= pick X #[rho]", "by fastforce"], ["proof (state)\nthis:\n  pick X #[[pickE rho]] #= pick X #[rho]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence \"qAbs xs x (?qsbs (pick X)) $= qAbs xs x (pick (?sbs X))\""], ["proof (prove)\nusing this:\n  pick X #[[pickE rho]] #= pick X #[rho]\n\ngoal (1 subgoal):\n 1. qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])", "using good_qsbs_pick_X qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  pick X #[[pickE rho]] #= pick X #[rho]\n  qGood pick X #[[pickE rho]]\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "}"], ["proof (state)\nthis:\n  qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "ultimately"], ["proof (chain)\npicking this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X) $[[pickE rho]]\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n  qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])", "have \"?qsbsA((pick o asAbs) (qAbs xs x (pick X))) $= qAbs xs x (pick (?sbs X))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X) $[[pickE rho]]\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n  qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n    qAbs xs x (pick X #[rho])", "using good alphaAbs_trans"], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X) $[[pickE rho]]\n  qAbs xs x (pick X) $[[pickE rho]] $= qAbs xs x pick X #[[pickE rho]]\n  qAbs xs x pick X #[[pickE rho]] $= qAbs xs x (pick X #[rho])\n  qGoodAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n    qAbs xs x (pick X #[rho])", "by blast"], ["proof (state)\nthis:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X #[rho])\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "hence \"asAbs (?qsbsA((pick o asAbs) (qAbs xs x (pick X)))) =\n          asAbs (qAbs xs x (pick (?sbs X)))\""], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X #[rho])\n\ngoal (1 subgoal):\n 1. asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] =\n    asAbs (qAbs xs x (pick X #[rho]))", "using good asAbs_equal_iff_alphaAbs"], ["proof (prove)\nusing this:\n  (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] $=\n  qAbs xs x (pick X #[rho])\n  qGoodAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]]\n  qGoodAbs ?qA \\<or> qGoodAbs ?qB \\<Longrightarrow>\n  (asAbs ?qA = asAbs ?qB) = (?qA $= ?qB)\n\ngoal (1 subgoal):\n 1. asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] =\n    asAbs (qAbs xs x (pick X #[rho]))", "by auto"], ["proof (state)\nthis:\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] =\n  asAbs (qAbs xs x (pick X #[rho]))\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "}"], ["proof (state)\nthis:\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] =\n  asAbs (qAbs xs x (pick X #[rho]))\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "also"], ["proof (state)\nthis:\n  asAbs (pick \\<circ> asAbs) (qAbs xs x (pick X)) $[[pickE rho]] =\n  asAbs (qAbs xs x (pick X #[rho]))\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "have \"asAbs (qAbs xs x (pick (?sbs X))) = Abs xs x (?sbs X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X #[rho])) = Abs xs x X #[rho]", "unfolding Abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asAbs (qAbs xs x (pick X #[rho])) = asAbs (qAbs xs x (pick X #[rho]))", "by simp"], ["proof (state)\nthis:\n  asAbs (qAbs xs x (pick X #[rho])) = Abs xs x X #[rho]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "finally"], ["proof (chain)\npicking this:\n  Abs xs x X $[rho] = Abs xs x X #[rho]", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs xs x X $[rho] = Abs xs x X #[rho]\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "."], ["proof (state)\nthis:\n  Abs xs x X $[rho] = Abs xs x X #[rho]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas good_psubstAll_simps =\npsubst_Var_simp1 psubst_Var_simp2\npsubst_Op_simp psubstAbs_simp"], ["", "theorem getEnv_idEnv[simp]: \"idEnv xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv xs x = None", "unfolding idEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. None = None", "by simp"], ["", "lemma getEnv_updEnv[simp]:\n\"(rho [x \\<leftarrow> X]_xs) ys y = (if ys = xs \\<and> y = x then Some X else rho ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho [x \\<leftarrow> X]_xs) ys y =\n    (if ys = xs \\<and> y = x then Some X else rho ys y)", "unfolding updEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if ys = xs \\<and> y = x then Some X else rho ys y) =\n    (if ys = xs \\<and> y = x then Some X else rho ys y)", "by auto"], ["", "theorem getEnv_updEnv1:\n\"ys \\<noteq> xs \\<or> y \\<noteq> x \\<Longrightarrow> (rho [x \\<leftarrow> X]_xs) ys y = rho ys y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<or> y \\<noteq> x \\<Longrightarrow>\n    (rho [x \\<leftarrow> X]_xs) ys y = rho ys y", "by auto"], ["", "theorem getEnv_updEnv2:\n\"(rho [x \\<leftarrow> X]_xs) xs x = Some X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho [x \\<leftarrow> X]_xs) xs x = Some X", "by auto"], ["", "lemma subst_Var_simp1[simp]:\nassumes \"good Y\"\nand \"ys \\<noteq> xs \\<or> y \\<noteq> x\"\nshows \"((Var xs x) #[Y / y]_ys) = Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[Y / y]_ys = Var xs x", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n\ngoal (1 subgoal):\n 1. Var xs x #[Y / y]_ys = Var xs x", "unfolding subst_def"], ["proof (prove)\nusing this:\n  good Y\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n\ngoal (1 subgoal):\n 1. Var xs x #[idEnv [y \\<leftarrow> Y]_ys] = Var xs x", "by auto"], ["", "lemma subst_Var_simp2[simp]:\nassumes \"good Y\"\nshows \"((Var xs x) #[Y / x]_xs) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[Y / x]_xs = Y", "using assms"], ["proof (prove)\nusing this:\n  good Y\n\ngoal (1 subgoal):\n 1. Var xs x #[Y / x]_xs = Y", "unfolding subst_def"], ["proof (prove)\nusing this:\n  good Y\n\ngoal (1 subgoal):\n 1. Var xs x #[idEnv [x \\<leftarrow> Y]_xs] = Y", "by auto"], ["", "lemma subst_Op_simp[simp]:\nassumes \"good Y\"\nand \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"((Op delta inp binp) #[Y / y]_ys) =\n Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[Y / y]_ys =\n    Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  goodInp inp\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[Y / y]_ys =\n    Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)", "unfolding subst_def substInp_def substBinp_def"], ["proof (prove)\nusing this:\n  good Y\n  goodInp inp\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[idEnv [y \\<leftarrow> Y]_ys] =\n    Op delta inp %[idEnv [y \\<leftarrow> Y]_ys]\n     binp %%[idEnv [y \\<leftarrow> Y]_ys]", "by auto"], ["", "lemma substAbs_simp[simp]:\nassumes good: \"good Y\" and good_X: \"good X\" and\n        x_dif_y: \"xs \\<noteq> ys \\<or> x \\<noteq> y\" and x_fresh: \"fresh xs x Y\"\nshows \"((Abs xs x X) $[Y / y]_ys) = Abs xs x (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "have \"freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (idEnv [y \\<leftarrow> Y]_ys) xs x = None \\<and>\n    (\\<forall>ysa i v.\n        (idEnv [y \\<leftarrow> Y]_ys) ysa i = Some v \\<longrightarrow>\n        fresh xs x v)", "using x_dif_y x_fresh"], ["proof (prove)\nusing this:\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. (idEnv [y \\<leftarrow> Y]_ys) xs x = None \\<and>\n    (\\<forall>ysa i v.\n        (idEnv [y \\<leftarrow> Y]_ys) ysa i = Some v \\<longrightarrow>\n        fresh xs x v)", "by auto"], ["proof (state)\nthis:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n  good Y\n  good X\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "unfolding subst_def substAbs_def"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n  good Y\n  good X\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[idEnv [y \\<leftarrow> Y]_ys] =\n    Abs xs x X #[idEnv [y \\<leftarrow> Y]_ys]", "by auto"], ["proof (state)\nthis:\n  Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas good_substAll_simps =\nsubst_Var_simp1 subst_Var_simp2\nsubst_Op_simp substAbs_simp"], ["", "theorem vsubst_Var_simp[simp]:\n\"((Var xs x) #[y1 // y]_ys) = Var xs (x @xs[y1 / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[y1 // y]_ys = Var xs (x @xs[y1 / y]_ys)", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[Var ys y1 / y]_ys = Var xs (x @xs[y1 / y]_ys)", "apply(case_tac \"ys = xs \\<and> y = x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ys = xs \\<and> y = x \\<Longrightarrow>\n    Var xs x #[Var ys y1 / y]_ys = Var xs (x @xs[y1 / y]_ys)\n 2. \\<not> (ys = xs \\<and> y = x) \\<Longrightarrow>\n    Var xs x #[Var ys y1 / y]_ys = Var xs (x @xs[y1 / y]_ys)", "by simp_all"], ["", "lemma vsubst_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"((Op delta inp binp) #[y1 // y]_ys) =\n Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[y1 // y]_ys =\n    Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[y1 // y]_ys =\n    Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)", "unfolding vsubst_def vsubstInp_def vsubstBinp_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[Var ys y1 / y]_ys =\n    Op delta (inp %[Var ys y1 / y]_ys) (binp %%[Var ys y1 / y]_ys)", "by auto"], ["", "lemma vsubstAbs_simp[simp]:\nassumes \"good X\" and\n        \"xs \\<noteq> ys \\<or> x \\<notin> {y,y1}\"\nshows \"((Abs xs x X) $[y1 // y]_ys) = Abs xs x (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 // y]_ys = Abs xs x (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  xs \\<noteq> ys \\<or> x \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 // y]_ys = Abs xs x (X #[y1 // y]_ys)", "unfolding vsubst_def vsubstAbs_def"], ["proof (prove)\nusing this:\n  good X\n  xs \\<noteq> ys \\<or> x \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Var ys y1 / y]_ys = Abs xs x (X #[Var ys y1 / y]_ys)", "by auto"], ["", "lemmas good_vsubstAll_simps =\nvsubst_Op_simp vsubstAbs_simp"], ["", "lemmas good_allOpers_simps =\ngood_swapAll_simps\ngood_freshAll_simps\ngood_skelAll_simps\ngood_psubstAll_simps\ngood_substAll_simps\ngood_vsubstAll_simps"], ["", "subsubsection \\<open>The ability to pick fresh variables\\<close>"], ["", "lemma single_non_fresh_ordLess_var:\n\"good X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV|", "unfolding fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> |{x. \\<not> qFresh xs x (pick X)}| <o |UNIV|", "by(auto simp add: good_imp_qGood_pick single_non_qFresh_ordLess_var)"], ["", "lemma single_non_freshAbs_ordLess_var:\n\"goodAbs A \\<Longrightarrow> |{x. \\<not> freshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow> |{x. \\<not> freshAbs xs x A}| <o |UNIV|", "unfolding freshAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow>\n    |{x. \\<not> qFreshAbs xs x (pick A)}| <o |UNIV|", "by(auto simp add: goodAbs_imp_qGoodAbs_pick single_non_qFreshAbs_ordLess_var)"], ["", "lemma obtain_fresh1:\nfixes XS::\"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\" and rho\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\" and XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\" and\n        good: \"\\<forall> X \\<in> XS. good X\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\" and RhoGood: \"\\<forall> rho \\<in> Rho. goodEnv rho\"\nshows\n\"\\<exists> z. z \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. fresh xs z X) \\<and>\n (\\<forall> rho \\<in> Rho. freshEnv xs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "let ?qXS = \"pick ` XS\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "let ?qRho = \"pickE ` Rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have \"|?qXS| \\<le>o |XS|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |pick ` XS| \\<le>o |XS|", "using card_of_image"], ["proof (prove)\nusing this:\n  |?f ` ?A| \\<le>o |?A|\n\ngoal (1 subgoal):\n 1. |pick ` XS| \\<le>o |XS|", "by auto"], ["proof (state)\nthis:\n  |pick ` XS| \\<le>o |XS|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence 1: \"|?qXS| <o |UNIV :: 'var set| \\<or> finite ?qXS\""], ["proof (prove)\nusing this:\n  |pick ` XS| \\<le>o |XS|\n\ngoal (1 subgoal):\n 1. |pick ` XS| <o |UNIV| \\<or> finite (pick ` XS)", "using ordLeq_ordLess_trans card_of_ordLeq_finite XSvar"], ["proof (prove)\nusing this:\n  |pick ` XS| \\<le>o |XS|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n  \\<lbrakk>|?A| \\<le>o |?B|; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  |XS| <o |UNIV| \\<or> finite XS\n\ngoal (1 subgoal):\n 1. |pick ` XS| <o |UNIV| \\<or> finite (pick ` XS)", "by blast"], ["proof (state)\nthis:\n  |pick ` XS| <o |UNIV| \\<or> finite (pick ` XS)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have \"|?qRho| \\<le>o |Rho|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |pickE ` Rho| \\<le>o |Rho|", "using card_of_image"], ["proof (prove)\nusing this:\n  |?f ` ?A| \\<le>o |?A|\n\ngoal (1 subgoal):\n 1. |pickE ` Rho| \\<le>o |Rho|", "by auto"], ["proof (state)\nthis:\n  |pickE ` Rho| \\<le>o |Rho|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence 2: \"|?qRho| <o |UNIV :: 'var set| \\<or> finite ?qRho\""], ["proof (prove)\nusing this:\n  |pickE ` Rho| \\<le>o |Rho|\n\ngoal (1 subgoal):\n 1. |pickE ` Rho| <o |UNIV| \\<or> finite (pickE ` Rho)", "using ordLeq_ordLess_trans card_of_ordLeq_finite Rhovar"], ["proof (prove)\nusing this:\n  |pickE ` Rho| \\<le>o |Rho|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n  \\<lbrakk>|?A| \\<le>o |?B|; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  |Rho| <o |UNIV| \\<or> finite Rho\n\ngoal (1 subgoal):\n 1. |pickE ` Rho| <o |UNIV| \\<or> finite (pickE ` Rho)", "by blast"], ["proof (state)\nthis:\n  |pickE ` Rho| <o |UNIV| \\<or> finite (pickE ` Rho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have 3: \"\\<forall> qX \\<in> ?qXS. qGood qX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (pick ` XS) qGood", "using good good_imp_qGood_pick"], ["proof (prove)\nusing this:\n  Ball XS good\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n\ngoal (1 subgoal):\n 1. Ball (pick ` XS) qGood", "by auto"], ["proof (state)\nthis:\n  Ball (pick ` XS) qGood\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have \"\\<forall> qrho \\<in> ?qRho. qGoodEnv qrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (pickE ` Rho) qGoodEnv", "using RhoGood goodEnv_imp_qGoodEnv_pickE"], ["proof (prove)\nusing this:\n  Ball Rho goodEnv\n  goodEnv ?rho \\<Longrightarrow> qGoodEnv (pickE ?rho)\n\ngoal (1 subgoal):\n 1. Ball (pickE ` Rho) qGoodEnv", "by auto"], ["proof (state)\nthis:\n  Ball (pickE ` Rho) qGoodEnv\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "then"], ["proof (chain)\npicking this:\n  Ball (pickE ` Rho) qGoodEnv", "obtain z where\n  \"z \\<notin> V \\<and> (\\<forall> qX \\<in> ?qXS. qFresh xs z qX) \\<and>\n   (\\<forall> qrho \\<in> ?qRho. qFreshEnv xs z qrho)\""], ["proof (prove)\nusing this:\n  Ball (pickE ` Rho) qGoodEnv\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z \\<notin> V \\<and>\n        (\\<forall>qX\\<in>pick ` XS. qFresh xs z qX) \\<and>\n        (\\<forall>qrho\\<in>pickE ` Rho.\n            qFreshEnv xs z qrho) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Vvar 1 2 3 obtain_qFreshEnv[of V ?qXS ?qRho]"], ["proof (prove)\nusing this:\n  Ball (pickE ` Rho) qGoodEnv\n  |V| <o |UNIV| \\<or> finite V\n  |pick ` XS| <o |UNIV| \\<or> finite (pick ` XS)\n  |pickE ` Rho| <o |UNIV| \\<or> finite (pickE ` Rho)\n  Ball (pick ` XS) qGood\n  \\<lbrakk>|V| <o |UNIV| \\<or> finite V;\n   |pick ` XS| <o |UNIV| \\<or> finite (pick ` XS); Ball (pick ` XS) qGood;\n   |pickE ` Rho| <o |UNIV| \\<or> finite (pickE ` Rho);\n   Ball (pickE ` Rho) qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> V \\<and>\n                       (\\<forall>X\\<in>pick ` XS. qFresh ?xs z X) \\<and>\n                       (\\<forall>rho\\<in>pickE ` Rho. qFreshEnv ?xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z \\<notin> V \\<and>\n        (\\<forall>qX\\<in>pick ` XS. qFresh xs z qX) \\<and>\n        (\\<forall>qrho\\<in>pickE ` Rho.\n            qFreshEnv xs z qrho) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  z \\<notin> V \\<and>\n  (\\<forall>qX\\<in>pick ` XS. qFresh xs z qX) \\<and>\n  (\\<forall>qrho\\<in>pickE ` Rho. qFreshEnv xs z qrho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "thus ?thesis"], ["proof (prove)\nusing this:\n  z \\<notin> V \\<and>\n  (\\<forall>qX\\<in>pick ` XS. qFresh xs z qX) \\<and>\n  (\\<forall>qrho\\<in>pickE ` Rho. qFreshEnv xs z qrho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "unfolding fresh_def freshEnv_def2"], ["proof (prove)\nusing this:\n  z \\<notin> V \\<and>\n  (\\<forall>qX\\<in>pick ` XS. qFresh xs z qX) \\<and>\n  (\\<forall>qrho\\<in>pickE ` Rho. qFreshEnv xs z qrho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qFresh xs z (pick X)) \\<and>\n       (\\<forall>rho\\<in>Rho. qFreshEnv xs z (pickE rho))", "by auto"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<notin> V \\<and>\n     (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n     (\\<forall>rho\\<in>Rho. freshEnv xs z rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtain_fresh:\nfixes V::\"'var set\" and\n      XS::\"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      AS::\"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\" and\n        XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\" and\n        ASvar: \"|AS| <o |UNIV :: 'var set| \\<or> finite AS\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\" and\n        good: \"\\<forall> X \\<in> XS. good X\" and\n        ASGood: \"\\<forall> A \\<in> AS. goodAbs A\" and\n        RhoGood: \"\\<forall> rho \\<in> Rho. goodEnv rho\"\nshows\n\"\\<exists> z. z \\<notin> V \\<and>\n     (\\<forall> X \\<in> XS. fresh xs z X) \\<and>\n     (\\<forall> A \\<in> AS. freshAbs xs z A) \\<and>\n     (\\<forall> rho \\<in> Rho. freshEnv xs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have XS: \"|XS| <o |UNIV :: 'var set|\" and AS: \"|AS| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |XS| <o |UNIV| &&& |AS| <o |UNIV|", "using XSvar ASvar finite_ordLess_var"], ["proof (prove)\nusing this:\n  |XS| <o |UNIV| \\<or> finite XS\n  |AS| <o |UNIV| \\<or> finite AS\n  (|?S| <o |UNIV| \\<or> finite ?S) = (|?S| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. |XS| <o |UNIV| &&& |AS| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |XS| <o |UNIV|\n  |AS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "let ?phi = \"% A Y. (good Y \\<and> (EX ys y. A = Abs ys y Y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "assume \"A \\<in> AS\""], ["proof (state)\nthis:\n  A \\<in> AS\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence \"goodAbs A\""], ["proof (prove)\nusing this:\n  A \\<in> AS\n\ngoal (1 subgoal):\n 1. goodAbs A", "using ASGood"], ["proof (prove)\nusing this:\n  A \\<in> AS\n  Ball AS goodAbs\n\ngoal (1 subgoal):\n 1. goodAbs A", "by simp"], ["proof (state)\nthis:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence \"EX Y. ?phi A Y\""], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. \\<exists>Y. good Y \\<and> (\\<exists>ys y. A = Abs ys y Y)", "using abs_nchotomy[of A]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs A \\<Longrightarrow> \\<exists>xs x X. good X \\<and> A = Abs xs x X\n\ngoal (1 subgoal):\n 1. \\<exists>Y. good Y \\<and> (\\<exists>ys y. A = Abs ys y Y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>Y. good Y \\<and> (\\<exists>ys y. A = Abs ys y Y)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "}"], ["proof (state)\nthis:\n  ?A93 \\<in> AS \\<Longrightarrow>\n  \\<exists>Y. good Y \\<and> (\\<exists>ys y. ?A93 = Abs ys y Y)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "then"], ["proof (chain)\npicking this:\n  ?A93 \\<in> AS \\<Longrightarrow>\n  \\<exists>Y. good Y \\<and> (\\<exists>ys y. ?A93 = Abs ys y Y)", "obtain f where 1: \"ALL A : AS. ?phi A (f A)\""], ["proof (prove)\nusing this:\n  ?A93 \\<in> AS \\<Longrightarrow>\n  \\<exists>Y. good Y \\<and> (\\<exists>ys y. ?A93 = Abs ys y Y)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>A\\<in>AS.\n           good (f A) \\<and>\n           (\\<exists>ys y. A = Abs ys y (f A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using bchoice[of AS ?phi]"], ["proof (prove)\nusing this:\n  ?A93 \\<in> AS \\<Longrightarrow>\n  \\<exists>Y. good Y \\<and> (\\<exists>ys y. ?A93 = Abs ys y Y)\n  \\<forall>x\\<in>AS.\n     \\<exists>y.\n        good y \\<and> (\\<exists>ys ya. x = Abs ys ya y) \\<Longrightarrow>\n  \\<exists>f.\n     \\<forall>x\\<in>AS.\n        good (f x) \\<and> (\\<exists>ys y. x = Abs ys y (f x))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>A\\<in>AS.\n           good (f A) \\<and>\n           (\\<exists>ys y. A = Abs ys y (f A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>A\\<in>AS. good (f A) \\<and> (\\<exists>ys y. A = Abs ys y (f A))\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "let ?YS = \"f ` AS\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have 2: \"ALL Y : ?YS. good Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (f ` AS) good", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>AS. good (f A) \\<and> (\\<exists>ys y. A = Abs ys y (f A))\n\ngoal (1 subgoal):\n 1. Ball (f ` AS) good", "by simp"], ["proof (state)\nthis:\n  Ball (f ` AS) good\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "have \"|?YS| <=o |AS|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |f ` AS| \\<le>o |AS|", "using card_of_image"], ["proof (prove)\nusing this:\n  |?f ` ?A| \\<le>o |?A|\n\ngoal (1 subgoal):\n 1. |f ` AS| \\<le>o |AS|", "by auto"], ["proof (state)\nthis:\n  |f ` AS| \\<le>o |AS|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence \"|?YS| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |f ` AS| \\<le>o |AS|\n\ngoal (1 subgoal):\n 1. |f ` AS| <o |UNIV|", "using AS ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |f ` AS| \\<le>o |AS|\n  |AS| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |f ` AS| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |f ` AS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence \"|XS Un ?YS| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |f ` AS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |XS \\<union> f ` AS| <o |UNIV|", "using XS"], ["proof (prove)\nusing this:\n  |f ` AS| <o |UNIV|\n  |XS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |XS \\<union> f ` AS| <o |UNIV|", "by (auto simp add: var_infinite_INNER card_of_Un_ordLess_infinite)"], ["proof (state)\nthis:\n  |XS \\<union> f ` AS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "then"], ["proof (chain)\npicking this:\n  |XS \\<union> f ` AS| <o |UNIV|", "obtain z where z: \"z \\<notin> V\"\n  and XSYS: \"\\<forall> X \\<in> XS Un ?YS. fresh xs z X\"\n  and Rho: \"\\<forall> rho \\<in> Rho. freshEnv xs z rho\""], ["proof (prove)\nusing this:\n  |XS \\<union> f ` AS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> V;\n         \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X;\n         \\<forall>rho\\<in>Rho. freshEnv xs z rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Vvar Rhovar good 2 RhoGood\n        obtain_fresh1[of V \"XS Un ?YS\" Rho xs]"], ["proof (prove)\nusing this:\n  |XS \\<union> f ` AS| <o |UNIV|\n  |V| <o |UNIV| \\<or> finite V\n  |Rho| <o |UNIV| \\<or> finite Rho\n  Ball XS good\n  Ball (f ` AS) good\n  Ball Rho goodEnv\n  \\<lbrakk>|V| <o |UNIV| \\<or> finite V;\n   |XS \\<union> f ` AS| <o |UNIV| \\<or> finite (XS \\<union> f ` AS);\n   Ball (XS \\<union> f ` AS) good; |Rho| <o |UNIV| \\<or> finite Rho;\n   Ball Rho goodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> V \\<and>\n                       (\\<forall>X\\<in>XS \\<union> f ` AS.\n                           fresh xs z X) \\<and>\n                       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> V;\n         \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X;\n         \\<forall>rho\\<in>Rho. freshEnv xs z rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z \\<notin> V\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n  \\<forall>rho\\<in>Rho. freshEnv xs z rho\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "moreover"], ["proof (state)\nthis:\n  z \\<notin> V\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n  \\<forall>rho\\<in>Rho. freshEnv xs z rho\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "{"], ["proof (state)\nthis:\n  z \\<notin> V\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n  \\<forall>rho\\<in>Rho. freshEnv xs z rho\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "obtain Y where Y_def: \"Y = f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y. Y = f A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  Y = f A\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "assume \"A : AS\""], ["proof (state)\nthis:\n  A \\<in> AS\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "hence \"fresh xs z Y\""], ["proof (prove)\nusing this:\n  A \\<in> AS\n\ngoal (1 subgoal):\n 1. fresh xs z Y", "unfolding Y_def"], ["proof (prove)\nusing this:\n  A \\<in> AS\n\ngoal (1 subgoal):\n 1. fresh xs z (f A)", "using XSYS"], ["proof (prove)\nusing this:\n  A \\<in> AS\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n\ngoal (1 subgoal):\n 1. fresh xs z (f A)", "by simp"], ["proof (state)\nthis:\n  fresh xs z Y\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "moreover"], ["proof (state)\nthis:\n  fresh xs z Y\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "obtain ys y where Y: \"good Y\" and A: \"A = Abs ys y Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ys y.\n        \\<lbrakk>good Y; A = Abs ys y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ys y.\n        \\<lbrakk>good (f A); A = Abs ys y (f A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>A : AS\\<close> 1"], ["proof (prove)\nusing this:\n  A \\<in> AS\n  \\<forall>A\\<in>AS. good (f A) \\<and> (\\<exists>ys y. A = Abs ys y (f A))\n\ngoal (1 subgoal):\n 1. (\\<And>ys y.\n        \\<lbrakk>good (f A); A = Abs ys y (f A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  good Y\n  A = Abs ys y Y\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "ultimately"], ["proof (chain)\npicking this:\n  fresh xs z Y\n  good Y\n  A = Abs ys y Y", "have \"freshAbs xs z A\""], ["proof (prove)\nusing this:\n  fresh xs z Y\n  good Y\n  A = Abs ys y Y\n\ngoal (1 subgoal):\n 1. freshAbs xs z A", "unfolding A"], ["proof (prove)\nusing this:\n  fresh xs z Y\n  good Y\n  Abs ys y Y = Abs ys y Y\n\ngoal (1 subgoal):\n 1. freshAbs xs z (Abs ys y Y)", "using z"], ["proof (prove)\nusing this:\n  fresh xs z Y\n  good Y\n  Abs ys y Y = Abs ys y Y\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. freshAbs xs z (Abs ys y Y)", "by auto"], ["proof (state)\nthis:\n  freshAbs xs z A\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "}"], ["proof (state)\nthis:\n  ?A93 \\<in> AS \\<Longrightarrow> freshAbs xs z ?A93\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "ultimately"], ["proof (chain)\npicking this:\n  z \\<notin> V\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n  \\<forall>rho\\<in>Rho. freshEnv xs z rho\n  ?A93 \\<in> AS \\<Longrightarrow> freshAbs xs z ?A93", "show ?thesis"], ["proof (prove)\nusing this:\n  z \\<notin> V\n  \\<forall>X\\<in>XS \\<union> f ` AS. fresh xs z X\n  \\<forall>rho\\<in>Rho. freshEnv xs z rho\n  ?A93 \\<in> AS \\<Longrightarrow> freshAbs xs z ?A93\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n       (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv xs z rho)", "by auto"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<notin> V \\<and>\n     (\\<forall>X\\<in>XS. fresh xs z X) \\<and>\n     (\\<forall>A\\<in>AS. freshAbs xs z A) \\<and>\n     (\\<forall>rho\\<in>Rho. freshEnv xs z rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Compositionality\\<close>"], ["", "lemma swap_ident[simp]:\nassumes \"good X\"\nshows \"(X #[x \\<and> x]_xs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> x]_xs = X", "using assms asTerm_pick qSwap_ident"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n  ?X #[[?x \\<and> ?x]]_?zs = ?X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> x]_xs = X", "unfolding swap_def"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n  ?X #[[?x \\<and> ?x]]_?zs = ?X\n\ngoal (1 subgoal):\n 1. asTerm (pick X #[[x \\<and> x]]_xs) = X", "by auto"], ["", "lemma swap_compose:\nassumes good_X: \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') =\n       ((X #[x' \\<and> y']_zs') #[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "using assms qSwap_compose[of _ _ _ _ _ _ \"pick X\"]"], ["proof (prove)\nusing this:\n  good X\n  pick X #[[?x \\<and> ?y]]_?zs #[[?x' \\<and> ?y']]_?zs' =\n  pick\n   X #[[?x' \\<and> ?y']]_?zs' #[[?x @?zs[?x' \\<and> ?y']_?zs' \\<and> ?y @?zs[?x' \\<and> ?y']_?zs']]_?zs\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "by(auto simp add: double_swap_qSwap)"], ["", "lemma swap_commute:\n\"\\<lbrakk>good X; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = ((X #[x' \\<and> y']_zs') #[x \\<and> y]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n                      X #[x' \\<and> y']_zs' #[x \\<and> y]_zs", "using swap_compose[of X  zs' x' y' zs x y]"], ["proof (prove)\nusing this:\n  good X \\<Longrightarrow>\n  X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n  X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n                      X #[x' \\<and> y']_zs' #[x \\<and> y]_zs", "by(auto simp add: sw_def)"], ["", "lemma swap_involutive[simp]:\nassumes good_X: \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[x \\<and> y]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x \\<and> y]_zs = X", "using assms asTerm_pick[of X]"], ["proof (prove)\nusing this:\n  good X\n  good X \\<Longrightarrow> asTerm (pick X) = X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x \\<and> y]_zs = X", "by (auto simp add: double_swap_qSwap)"], ["", "theorem swap_sym: \"(X #[x \\<and> y]_zs) = (X #[y \\<and> x]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs = X #[y \\<and> x]_zs", "unfolding swap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm (pick X #[[x \\<and> y]]_zs) = asTerm (pick X #[[y \\<and> x]]_zs)", "by(auto simp add: qSwap_sym)"], ["", "lemma swap_involutive2[simp]:\nassumes \"good X\"\nshows \"((X #[x \\<and> y]_zs) #[y \\<and> x]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[y \\<and> x]_zs = X", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[y \\<and> x]_zs = X", "by(simp add: swap_sym)"], ["", "lemma swap_preserves_fresh[simp]:\nassumes \"good X\"\nshows \"fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X", "unfolding fresh_def[of _ _ X]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) =\n    qFresh xs x (pick X)", "using assms qSwap_preserves_qFresh[of _ _ _ _ _ \"pick X\"]"], ["proof (prove)\nusing this:\n  good X\n  qFresh ?ys (?y @?ys[?z1.0 \\<and> ?z2.0]_?zs)\n   (pick X #[[?z1.0 \\<and> ?z2.0]]_?zs) =\n  qFresh ?ys ?y (pick X)\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) =\n    qFresh xs x (pick X)", "by(auto simp add: fresh_swap_qFresh_qSwap)"], ["", "lemma swap_preserves_fresh_distinct:\nassumes \"good X\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X", "unfolding fresh_def[of _ _ X]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) = qFresh xs x (pick X)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  xs \\<noteq> ys \\<or> x \\<notin> {y1, y2}\n\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) = qFresh xs x (pick X)", "by(auto simp: fresh_swap_qFresh_qSwap qSwap_preserves_qFresh_distinct)"], ["", "lemma fresh_swap_exchange1:\nassumes \"good X\"\nshows \"fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X", "unfolding fresh_def[of _ _ X]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x1 \\<and> x2]_xs) = qFresh xs x1 (pick X)", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x1 \\<and> x2]_xs) = qFresh xs x1 (pick X)", "by(auto simp: fresh_swap_qFresh_qSwap qFresh_qSwap_exchange1)"], ["", "lemma fresh_swap_exchange2:\nassumes \"good X\" and \"{x1,x2} \\<subseteq> var xs\"\nshows \"fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X", "using assms"], ["proof (prove)\nusing this:\n  good X\n  {x1, x2} \\<subseteq> var xs\n\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X", "by(simp add: fresh_swap_exchange1 swap_sym)"], ["", "(* Note: the lemmas swap_preserves_fresh_distinct, fresh_swap_exchange1 and\n   fresh_swap_exchange2 do cover all possibilities of simplifying an\n   expression of the form \"fresh ys y (X #[x2 \\<and> x1]_xs)\".   *)"], ["", "lemma fresh_swap_id[simp]:\nassumes \"good X\" and \"fresh xs x1 X\" \"fresh xs x2 X\"\nshows \"(X #[x1 \\<and> x2]_xs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x1 \\<and> x2]_xs = X", "by (metis (no_types, lifting)  assms alpha_imp_asTerm_equal alpha_qFresh_qSwap_id asTerm_pick   \n      fresh_def good_imp_qGood_pick local.swap_def qSwap_preserves_qGood1)"], ["", "lemma freshAbs_swapAbs_id[simp]:\nassumes \"goodAbs A\" \"freshAbs xs x1 A\"  \"freshAbs xs x2 A\"\nshows \"(A $[x1 \\<and> x2]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[x1 \\<and> x2]_xs = A", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs xs x1 A\n  freshAbs xs x2 A\n\ngoal (1 subgoal):\n 1. A $[x1 \\<and> x2]_xs = A", "by (meson alphaAbs_qFreshAbs_qSwapAbs_id alphaAll_trans freshAbs_def goodAbs_imp_qGoodAbs_pick \n    pick_alphaAbs_iff_equal pick_swapAbs_qSwapAbs swapAbs_preserves_good)"], ["", "lemma fresh_swap_compose:\nassumes \"good X\" \"fresh xs y X\" \"fresh xs z X\"\nshows \"((X #[y \\<and> x]_xs) #[z \\<and> y]_xs) = (X #[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs #[z \\<and> y]_xs = X #[z \\<and> x]_xs", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh xs y X\n  fresh xs z X\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs #[z \\<and> y]_xs = X #[z \\<and> x]_xs", "by (simp add: sw_def swap_compose)"], ["", "lemma skel_swap:\nassumes \"good X\"\nshows \"skel (X #[x1 \\<and> x2]_xs) = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (X #[x1 \\<and> x2]_xs) = skel X", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. skel (X #[x1 \\<and> x2]_xs) = skel X", "by (metis alpha_qSkel pick_swap_qSwap qSkel_qSwap skel_def)"], ["", "subsubsection \\<open>Compositionality for environments\\<close>"], ["", "lemma swapEnv_ident[simp]:\nassumes \"goodEnv rho\"\nshows \"(rho &[x \\<and> x]_xs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> x]_xs = rho", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> x]_xs = rho", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (\\<lambda>zs i.\n        case rho zs (i @zs[x \\<and> x]_xs) of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v #[x \\<and> x]_xs)) =\n    rho", "by (intro ext) (auto simp: option.case_eq_if)"], ["", "lemma swapEnv_compose:\nassumes good: \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') =\n       ((rho &[x' \\<and> y']_zs') &[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n    rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "proof(rule ext)+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?xsw = \"x @zs[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?ysw = \"y @zs[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?xswsw = \"?xsw @zs[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?yswsw = \"?ysw @zs[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?rhosw1 = \"rho &[x \\<and> y]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?rhosw11 = \"?rhosw1 &[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?rhosw2 = \"rho &[x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?rhosw22 = \"?rhosw2 &[?xsw \\<and> ?ysw]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?Sw1 = \"\\<lambda>X. (X #[x \\<and> y]_zs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?Sw11 = \"\\<lambda>X. ((?Sw1 X) #[x' \\<and> y']_zs')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?Sw2 = \"\\<lambda>X. (X #[x' \\<and> y']_zs')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?Sw22 = \"\\<lambda>X. ((?Sw2 X) #[?xsw \\<and> ?ysw]_zs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "fix us u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?usw1 = \"u @us [x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?usw11 = \"?usw1 @us [x \\<and> y]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?usw2 = \"u @us [?xsw \\<and> ?ysw]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "let ?usw22 = \"?usw2 @us [x' \\<and> y']_zs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "have \"(?xsw @zs[x' \\<and> y']_zs') = x\" and \"(?ysw @zs[x' \\<and> y']_zs') = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' = x &&&\n    y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' = y", "by auto"], ["proof (state)\nthis:\n  x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' = x\n  y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' = y\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "have \"?usw22 = (?usw1 @us[?xswsw \\<and> ?yswsw]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n    u @us[x' \\<and> y']_zs' @us[x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs']_zs", "using sw_compose"], ["proof (prove)\nusing this:\n  ?z @?zs[?x \\<and> ?y]_?xs @?zs[?x' \\<and> ?y']_?xs' =\n  ?z @?zs[?x' \\<and> ?y']_?xs' @?zs[?x @?xs[?x' \\<and> ?y']_?xs' \\<and> ?y @?xs[?x' \\<and> ?y']_?xs']_?xs\n\ngoal (1 subgoal):\n 1. u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n    u @us[x' \\<and> y']_zs' @us[x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs']_zs", "."], ["proof (state)\nthis:\n  u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n  u @us[x' \\<and> y']_zs' @us[x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "hence *: \"?usw22 = ?usw11\""], ["proof (prove)\nusing this:\n  u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n  u @us[x' \\<and> y']_zs' @us[x @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs' @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n    u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs", "by simp"], ["proof (state)\nthis:\n  u @us[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs @us[x' \\<and> y']_zs' =\n  u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') xa xaa =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        xa xaa", "show \"?rhosw11 us u = ?rhosw22 us u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "proof(cases \"rho us ?usw11\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n    None \\<Longrightarrow>\n    (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u\n 2. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "case None"], ["proof (state)\nthis:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = None\n\ngoal (2 subgoals):\n 1. rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n    None \\<Longrightarrow>\n    (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u\n 2. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "hence \"?rhosw11 us u = None\""], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = None\n\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u = None", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = None\n\ngoal (1 subgoal):\n 1. (case case rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[x \\<and> y]_zs) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[x' \\<and> y']_zs')) =\n    None", "by simp"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u = None\n\ngoal (2 subgoals):\n 1. rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n    None \\<Longrightarrow>\n    (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u\n 2. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "also"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u = None\n\ngoal (2 subgoals):\n 1. rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n    None \\<Longrightarrow>\n    (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u\n 2. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "have \"\\<dots> = ?rhosw22 us u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "using None"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = None\n\ngoal (1 subgoal):\n 1. None =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "unfolding * swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = None\n\ngoal (1 subgoal):\n 1. None =\n    (case case rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[x' \\<and> y']_zs') of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow>\n         Some\n          (v #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs))", "by simp"], ["proof (state)\nthis:\n  None =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal (2 subgoals):\n 1. rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n    None \\<Longrightarrow>\n    (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u\n 2. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "finally"], ["proof (chain)\npicking this:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u", "show ?thesis"], ["proof (prove)\nusing this:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "."], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "case (Some X)"], ["proof (state)\nthis:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "hence \"good X\""], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. good X", "using good"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X", "by simp"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "have \"?rhosw11 us u = Some(?Sw11 X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    Some (X #[x \\<and> y]_zs #[x' \\<and> y']_zs')", "using Some"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    Some (X #[x \\<and> y]_zs #[x' \\<and> y']_zs')", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. (case case rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[x \\<and> y]_zs) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[x' \\<and> y']_zs')) =\n    Some (X #[x \\<and> y]_zs #[x' \\<and> y']_zs')", "by simp"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  Some (X #[x \\<and> y]_zs #[x' \\<and> y']_zs')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "also"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  Some (X #[x \\<and> y]_zs #[x' \\<and> y']_zs')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "have \"?Sw11 X = ?Sw22 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "using \\<open>good X\\<close>"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "by(rule swap_compose)"], ["proof (state)\nthis:\n  X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n  X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "also"], ["proof (state)\nthis:\n  X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n  X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "have \"Some(?Sw22 X) = ?rhosw22 us u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some\n     (X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs) =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "using Some"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. Some\n     (X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs) =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "unfolding * swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) = Some X\n\ngoal (1 subgoal):\n 1. Some\n     (X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs) =\n    (case case rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) of\n          None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[x' \\<and> y']_zs') of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow>\n         Some\n          (v #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs))", "by simp"], ["proof (state)\nthis:\n  Some\n   (X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs) =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us (u @us[x' \\<and> y']_zs' @us[x \\<and> y]_zs) =\n       Some a \\<Longrightarrow>\n       (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n       (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n        us u", "finally"], ["proof (chain)\npicking this:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u", "show ?thesis"], ["proof (prove)\nusing this:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n    (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n     us u", "."], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs &[x' \\<and> y']_zs') us u =\n  (rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs)\n   us u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnv_commute:\n\"\\<lbrakk>goodEnv rho; {x,y} \\<subseteq> var zs; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') = ((rho &[x' \\<and> y']_zs') &[x \\<and> y]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodEnv rho; {x, y} \\<subseteq> var zs;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n                      rho &[x' \\<and> y']_zs' &[x \\<and> y]_zs", "using swapEnv_compose[of rho zs' x' y' zs x y]"], ["proof (prove)\nusing this:\n  goodEnv rho \\<Longrightarrow>\n  rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n  rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>goodEnv rho; {x, y} \\<subseteq> var zs;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n                      rho &[x' \\<and> y']_zs' &[x \\<and> y]_zs", "by(auto simp add: sw_def)"], ["", "lemma swapEnv_involutive[simp]:\nassumes \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x \\<and> y]_zs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x \\<and> y]_zs = rho", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x \\<and> y]_zs = rho", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. (\\<lambda>zsa i.\n        case case rho zsa (i @zsa[x \\<and> y]_zs @zsa[x \\<and> y]_zs) of\n             None \\<Rightarrow> None\n             | Some v \\<Rightarrow> Some (v #[x \\<and> y]_zs) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v #[x \\<and> y]_zs)) =\n    rho", "by (fastforce simp: option.case_eq_if)"], ["", "theorem swapEnv_sym: \"(rho &[x \\<and> y]_zs) = (rho &[y \\<and> x]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs = rho &[y \\<and> x]_zs", "proof(intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs) xa xaa = (rho &[y \\<and> x]_zs) xa xaa", "fix us u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs) xa xaa = (rho &[y \\<and> x]_zs) xa xaa", "have *: \"(u @us[x \\<and> y]_zs) = (u @us[y \\<and> x]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @us[x \\<and> y]_zs = u @us[y \\<and> x]_zs", "using sw_sym"], ["proof (prove)\nusing this:\n  ?z @?zs[?x \\<and> ?y]_?xs = ?z @?zs[?y \\<and> ?x]_?xs\n\ngoal (1 subgoal):\n 1. u @us[x \\<and> y]_zs = u @us[y \\<and> x]_zs", "by fastforce"], ["proof (state)\nthis:\n  u @us[x \\<and> y]_zs = u @us[y \\<and> x]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       (rho &[x \\<and> y]_zs) xa xaa = (rho &[y \\<and> x]_zs) xa xaa", "show \"(rho &[x \\<and> y]_zs) us u = (rho &[y \\<and> x]_zs) us u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs) us u = (rho &[y \\<and> x]_zs) us u", "unfolding swapEnv_defs lift_def *"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case rho us (u @us[y \\<and> x]_zs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[x \\<and> y]_zs)) =\n    (case rho us (u @us[y \\<and> x]_zs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[y \\<and> x]_zs))", "by(cases \"rho us (u @us[y \\<and> x]_zs)\") (auto simp: swap_sym)"], ["proof (state)\nthis:\n  (rho &[x \\<and> y]_zs) us u = (rho &[y \\<and> x]_zs) us u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnv_involutive2[simp]:\nassumes good: \"goodEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[y \\<and> x]_zs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[y \\<and> x]_zs = rho", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[y \\<and> x]_zs = rho", "by(simp add: swapEnv_sym)"], ["", "lemma swapEnv_preserves_freshEnv[simp]:\nassumes good: \"goodEnv rho\"\nshows \"freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "let ?xsw = \"x @xs[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "let ?xswsw = \"?xsw @xs[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "let ?rhosw = \"rho &[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "let ?Left = \"freshEnv xs ?xsw ?rhosw\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "let ?Right = \"freshEnv xs x rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "have \"(?rhosw xs ?xsw = None) = (rho xs x = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rho &[y1 \\<and> y2]_ys) xs (x @xs[y1 \\<and> y2]_ys) = None) =\n    (rho xs x = None)", "unfolding freshEnv_def swapEnv_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift (swap ys y1 y2) (\\<lambda>z. rho xs (z @xs[y1 \\<and> y2]_ys))\n      (x @xs[y1 \\<and> y2]_ys) =\n     None) =\n    (rho xs x = None)", "by(simp add: lift_None sw_involutive)"], ["proof (state)\nthis:\n  ((rho &[y1 \\<and> y2]_ys) xs (x @xs[y1 \\<and> y2]_ys) = None) =\n  (rho xs x = None)\n\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "moreover"], ["proof (state)\nthis:\n  ((rho &[y1 \\<and> y2]_ys) xs (x @xs[y1 \\<and> y2]_ys) = None) =\n  (rho xs x = None)\n\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "have \"(\\<forall> zs z' Z'. ?rhosw zs z' = Some Z' \\<longrightarrow> fresh xs ?xsw Z') =\n       (\\<forall> zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>zs z' Z'.\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n        fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n    (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)", "proof(rule iff_allI, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "fix zs z Z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "assume *: \"\\<forall> z' Z'. ?rhosw zs z' = Some Z' \\<longrightarrow> fresh xs ?xsw Z'\"\n   and **: \"rho zs z = Some Z\""], ["proof (state)\nthis:\n  \\<forall>z' Z'.\n     (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n     fresh xs (x @xs[y1 \\<and> y2]_ys) Z'\n  rho zs z = Some Z\n\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "let ?z' = \"z @zs[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "let ?Z' = \"Z #[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "have \"?rhosw zs ?z' = Some ?Z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[y1 \\<and> y2]_ys) zs (z @zs[y1 \\<and> y2]_ys) =\n    Some (Z #[y1 \\<and> y2]_ys)", "using **"], ["proof (prove)\nusing this:\n  rho zs z = Some Z\n\ngoal (1 subgoal):\n 1. (rho &[y1 \\<and> y2]_ys) zs (z @zs[y1 \\<and> y2]_ys) =\n    Some (Z #[y1 \\<and> y2]_ys)", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho zs z = Some Z\n\ngoal (1 subgoal):\n 1. (case rho zs (z @zs[y1 \\<and> y2]_ys @zs[y1 \\<and> y2]_ys) of\n     None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[y1 \\<and> y2]_ys)) =\n    Some (Z #[y1 \\<and> y2]_ys)", "by(simp add: sw_involutive)"], ["proof (state)\nthis:\n  (rho &[y1 \\<and> y2]_ys) zs (z @zs[y1 \\<and> y2]_ys) =\n  Some (Z #[y1 \\<and> y2]_ys)\n\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "hence \"fresh xs ?xsw ?Z'\""], ["proof (prove)\nusing this:\n  (rho &[y1 \\<and> y2]_ys) zs (z @zs[y1 \\<and> y2]_ys) =\n  Some (Z #[y1 \\<and> y2]_ys)\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)", "using *"], ["proof (prove)\nusing this:\n  (rho &[y1 \\<and> y2]_ys) zs (z @zs[y1 \\<and> y2]_ys) =\n  Some (Z #[y1 \\<and> y2]_ys)\n  \\<forall>z' Z'.\n     (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n     fresh xs (x @xs[y1 \\<and> y2]_ys) Z'\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)", "by simp"], ["proof (state)\nthis:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)\n\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "moreover"], ["proof (state)\nthis:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)\n\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "have \"good Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good Z", "using ** good"], ["proof (prove)\nusing this:\n  rho zs z = Some Z\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good Z", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho zs z = Some Z\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good Z", "by simp"], ["proof (state)\nthis:\n  good Z\n\ngoal (2 subgoals):\n 1. \\<And>zs z Z.\n       \\<lbrakk>\\<forall>z' Z'.\n                   (rho &[y1 \\<and> y2]_ys) zs z' =\n                   Some Z' \\<longrightarrow>\n                   fresh xs (x @xs[y1 \\<and> y2]_ys) Z';\n        rho zs z = Some Z\\<rbrakk>\n       \\<Longrightarrow> fresh xs x Z\n 2. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "ultimately"], ["proof (chain)\npicking this:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)\n  good Z", "show \"fresh xs x Z\""], ["proof (prove)\nusing this:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)\n  good Z\n\ngoal (1 subgoal):\n 1. fresh xs x Z", "using swap_preserves_fresh"], ["proof (prove)\nusing this:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)\n  good Z\n  good ?X \\<Longrightarrow>\n  fresh ?xs (?x @?xs[?y1.0 \\<and> ?y2.0]_?ys)\n   (?X #[?y1.0 \\<and> ?y2.0]_?ys) =\n  fresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. fresh xs x Z", "by auto"], ["proof (state)\nthis:\n  fresh xs x Z\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "fix zs z' Z'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "assume *: \"\\<forall>z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z\" and **: \"?rhosw zs z' = Some Z'\""], ["proof (state)\nthis:\n  \\<forall>z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z\n  (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "let ?z = \"z' @zs[y1 \\<and> y2]_ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "obtain Z where rho: \"rho zs ?z = Some Z\" and Z': \"Z' = Z #[y1 \\<and> y2]_ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Z.\n        \\<lbrakk>rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z;\n         Z' = Z #[y1 \\<and> y2]_ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using **"], ["proof (prove)\nusing this:\n  (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\n\ngoal (1 subgoal):\n 1. (\\<And>Z.\n        \\<lbrakk>rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z;\n         Z' = Z #[y1 \\<and> y2]_ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  (case rho zs (z' @zs[y1 \\<and> y2]_ys) of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (v #[y1 \\<and> y2]_ys)) =\n  Some Z'\n\ngoal (1 subgoal):\n 1. (\\<And>Z.\n        \\<lbrakk>rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z;\n         Z' = Z #[y1 \\<and> y2]_ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"rho zs ?z\", auto)"], ["proof (state)\nthis:\n  rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z\n  Z' = Z #[y1 \\<and> y2]_ys\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "hence \"fresh xs x Z\""], ["proof (prove)\nusing this:\n  rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z\n  Z' = Z #[y1 \\<and> y2]_ys\n\ngoal (1 subgoal):\n 1. fresh xs x Z", "using *"], ["proof (prove)\nusing this:\n  rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z\n  Z' = Z #[y1 \\<and> y2]_ys\n  \\<forall>z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z\n\ngoal (1 subgoal):\n 1. fresh xs x Z", "by simp"], ["proof (state)\nthis:\n  fresh xs x Z\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "moreover"], ["proof (state)\nthis:\n  fresh xs x Z\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "have \"good Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good Z", "using rho good"], ["proof (prove)\nusing this:\n  rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good Z", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho zs (z' @zs[y1 \\<and> y2]_ys) = Some Z\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good Z", "by simp"], ["proof (state)\nthis:\n  good Z\n\ngoal (1 subgoal):\n 1. \\<And>zs z' Z'.\n       \\<lbrakk>\\<forall>z Z.\n                   rho zs z = Some Z \\<longrightarrow> fresh xs x Z;\n        (rho &[y1 \\<and> y2]_ys) zs z' = Some Z'\\<rbrakk>\n       \\<Longrightarrow> fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "ultimately"], ["proof (chain)\npicking this:\n  fresh xs x Z\n  good Z", "show \"fresh xs ?xsw Z'\""], ["proof (prove)\nusing this:\n  fresh xs x Z\n  good Z\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) Z'", "unfolding Z'"], ["proof (prove)\nusing this:\n  fresh xs x Z\n  good Z\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)", "using swap_preserves_fresh"], ["proof (prove)\nusing this:\n  fresh xs x Z\n  good Z\n  good ?X \\<Longrightarrow>\n  fresh ?xs (?x @?xs[?y1.0 \\<and> ?y2.0]_?ys)\n   (?X #[?y1.0 \\<and> ?y2.0]_?ys) =\n  fresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (Z #[y1 \\<and> y2]_ys)", "by auto"], ["proof (state)\nthis:\n  fresh xs (x @xs[y1 \\<and> y2]_ys) Z'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>zs z' Z'.\n      (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n      fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n  (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)\n\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "ultimately"], ["proof (chain)\npicking this:\n  ((rho &[y1 \\<and> y2]_ys) xs (x @xs[y1 \\<and> y2]_ys) = None) =\n  (rho xs x = None)\n  (\\<forall>zs z' Z'.\n      (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n      fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n  (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)", "show ?thesis"], ["proof (prove)\nusing this:\n  ((rho &[y1 \\<and> y2]_ys) xs (x @xs[y1 \\<and> y2]_ys) = None) =\n  (rho xs x = None)\n  (\\<forall>zs z' Z'.\n      (rho &[y1 \\<and> y2]_ys) zs z' = Some Z' \\<longrightarrow>\n      fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n  (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)\n\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "unfolding freshEnv_def swapEnv_defs"], ["proof (prove)\nusing this:\n  (lift (swap ys y1 y2) (\\<lambda>z. rho xs (z @xs[y1 \\<and> y2]_ys))\n    (x @xs[y1 \\<and> y2]_ys) =\n   None) =\n  (rho xs x = None)\n  (\\<forall>zs z' Z'.\n      lift (swap ys y1 y2) (\\<lambda>z. rho zs (z @zs[y1 \\<and> y2]_ys))\n       z' =\n      Some Z' \\<longrightarrow>\n      fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n  (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)\n\ngoal (1 subgoal):\n 1. (lift (swap ys y1 y2) (\\<lambda>z. rho xs (z @xs[y1 \\<and> y2]_ys))\n      (x @xs[y1 \\<and> y2]_ys) =\n     None \\<and>\n     (\\<forall>ysa.\n         liftAll (fresh xs (x @xs[y1 \\<and> y2]_ys))\n          (lift (swap ys y1 y2)\n            (\\<lambda>z. rho ysa (z @ysa[y1 \\<and> y2]_ys))))) =\n    (rho xs x = None \\<and> (\\<forall>ys. liftAll (fresh xs x) (rho ys)))", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  (lift (swap ys y1 y2) (\\<lambda>z. rho xs (z @xs[y1 \\<and> y2]_ys))\n    (x @xs[y1 \\<and> y2]_ys) =\n   None) =\n  (rho xs x = None)\n  (\\<forall>zs z' Z'.\n      lift (swap ys y1 y2) (\\<lambda>z. rho zs (z @zs[y1 \\<and> y2]_ys))\n       z' =\n      Some Z' \\<longrightarrow>\n      fresh xs (x @xs[y1 \\<and> y2]_ys) Z') =\n  (\\<forall>zs z Z. rho zs z = Some Z \\<longrightarrow> fresh xs x Z)\n\ngoal (1 subgoal):\n 1. (lift (swap ys y1 y2) (\\<lambda>z. rho xs (z @xs[y1 \\<and> y2]_ys))\n      (x @xs[y1 \\<and> y2]_ys) =\n     None \\<and>\n     (\\<forall>ysa i v.\n         lift (swap ys y1 y2)\n          (\\<lambda>z. rho ysa (z @ysa[y1 \\<and> y2]_ys)) i =\n         Some v \\<longrightarrow>\n         fresh xs (x @xs[y1 \\<and> y2]_ys) v)) =\n    (rho xs x = None \\<and>\n     (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> fresh xs x v))", "by simp"], ["proof (state)\nthis:\n  freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n  freshEnv xs x rho\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnv_preserves_freshEnv_distinct:\nassumes \"goodEnv rho\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho", "by (metis assms sw_simps3 swapEnv_preserves_freshEnv)"], ["", "lemma freshEnv_swapEnv_exchange1:\nassumes \"goodEnv rho\"\nshows \"freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho", "by (metis assms sw_simps1 swapEnv_preserves_freshEnv)"], ["", "lemma freshEnv_swapEnv_exchange2:\nassumes \"goodEnv rho\"\nshows \"freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho", "by(simp add: freshEnv_swapEnv_exchange1 swapEnv_sym)"], ["", "lemma freshEnv_swapEnv_id[simp]:\nassumes good: \"goodEnv rho\" and\n        fresh: \"freshEnv xs x1 rho\"  \"freshEnv xs x2 rho\"\nshows \"(rho &[x1 \\<and> x2]_xs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x1 \\<and> x2]_xs = rho", "proof(intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. (rho &[x1 \\<and> x2]_xs) x xa = rho x xa", "fix us u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. (rho &[x1 \\<and> x2]_xs) x xa = rho x xa", "let ?usw = \"u @us[x1 \\<and> x2]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. (rho &[x1 \\<and> x2]_xs) x xa = rho x xa", "let ?rhosw = \"rho &[x1 \\<and> x2]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. (rho &[x1 \\<and> x2]_xs) x xa = rho x xa", "let ?Sw = \"\\<lambda> X. (X #[x1 \\<and> x2]_xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. (rho &[x1 \\<and> x2]_xs) x xa = rho x xa", "show \"?rhosw us u = rho us u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = rho us u", "proof(cases \"rho us u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho us u = None \\<Longrightarrow>\n    (rho &[x1 \\<and> x2]_xs) us u = rho us u\n 2. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "case None"], ["proof (state)\nthis:\n  rho us u = None\n\ngoal (2 subgoals):\n 1. rho us u = None \\<Longrightarrow>\n    (rho &[x1 \\<and> x2]_xs) us u = rho us u\n 2. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "hence \"rho us ?usw = None\""], ["proof (prove)\nusing this:\n  rho us u = None\n\ngoal (1 subgoal):\n 1. rho us (u @us[x1 \\<and> x2]_xs) = None", "using fresh"], ["proof (prove)\nusing this:\n  rho us u = None\n  freshEnv xs x1 rho\n  freshEnv xs x2 rho\n\ngoal (1 subgoal):\n 1. rho us (u @us[x1 \\<and> x2]_xs) = None", "unfolding freshEnv_def sw_def"], ["proof (prove)\nusing this:\n  rho us u = None\n  rho xs x1 = None \\<and> (\\<forall>ys. liftAll (fresh xs x1) (rho ys))\n  rho xs x2 = None \\<and> (\\<forall>ys. liftAll (fresh xs x2) (rho ys))\n\ngoal (1 subgoal):\n 1. rho us\n     (if xs = us then if u = x1 then x2 else if u = x2 then x1 else u\n      else u) =\n    None", "by auto"], ["proof (state)\nthis:\n  rho us (u @us[x1 \\<and> x2]_xs) = None\n\ngoal (2 subgoals):\n 1. rho us u = None \\<Longrightarrow>\n    (rho &[x1 \\<and> x2]_xs) us u = rho us u\n 2. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "hence \"?rhosw us u = None\""], ["proof (prove)\nusing this:\n  rho us (u @us[x1 \\<and> x2]_xs) = None\n\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = None", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us (u @us[x1 \\<and> x2]_xs) = None\n\ngoal (1 subgoal):\n 1. (case rho us (u @us[x1 \\<and> x2]_xs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[x1 \\<and> x2]_xs)) =\n    None", "by auto"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = None\n\ngoal (2 subgoals):\n 1. rho us u = None \\<Longrightarrow>\n    (rho &[x1 \\<and> x2]_xs) us u = rho us u\n 2. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "with None"], ["proof (chain)\npicking this:\n  rho us u = None\n  (rho &[x1 \\<and> x2]_xs) us u = None", "show ?thesis"], ["proof (prove)\nusing this:\n  rho us u = None\n  (rho &[x1 \\<and> x2]_xs) us u = None\n\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = rho us u", "by simp"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = rho us u\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "case (Some X)"], ["proof (state)\nthis:\n  rho us u = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "moreover"], ["proof (state)\nthis:\n  rho us u = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "have \"?usw = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @us[x1 \\<and> x2]_xs = u", "using fresh Some"], ["proof (prove)\nusing this:\n  freshEnv xs x1 rho\n  freshEnv xs x2 rho\n  rho us u = Some X\n\ngoal (1 subgoal):\n 1. u @us[x1 \\<and> x2]_xs = u", "unfolding freshEnv_def sw_def"], ["proof (prove)\nusing this:\n  rho xs x1 = None \\<and> (\\<forall>ys. liftAll (fresh xs x1) (rho ys))\n  rho xs x2 = None \\<and> (\\<forall>ys. liftAll (fresh xs x2) (rho ys))\n  rho us u = Some X\n\ngoal (1 subgoal):\n 1. (if xs = us then if u = x1 then x2 else if u = x2 then x1 else u\n     else u) =\n    u", "by auto"], ["proof (state)\nthis:\n  u @us[x1 \\<and> x2]_xs = u\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "ultimately"], ["proof (chain)\npicking this:\n  rho us u = Some X\n  u @us[x1 \\<and> x2]_xs = u", "have \"?rhosw us u = Some (?Sw X)\""], ["proof (prove)\nusing this:\n  rho us u = Some X\n  u @us[x1 \\<and> x2]_xs = u\n\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho us u = Some X\n  u @us[x1 \\<and> x2]_xs = u\n\ngoal (1 subgoal):\n 1. (case rho us (u @us[x1 \\<and> x2]_xs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[x1 \\<and> x2]_xs)) =\n    Some (X #[x1 \\<and> x2]_xs)", "by auto"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "moreover"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "{"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "have \"good X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X", "using Some good"], ["proof (prove)\nusing this:\n  rho us u = Some X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. good X", "unfolding goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho us u = Some X\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. good X", "by auto"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "moreover"], ["proof (state)\nthis:\n  good X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "have \"fresh xs x1 X\" and \"fresh xs x2 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x1 X &&& fresh xs x2 X", "using Some fresh"], ["proof (prove)\nusing this:\n  rho us u = Some X\n  freshEnv xs x1 rho\n  freshEnv xs x2 rho\n\ngoal (1 subgoal):\n 1. fresh xs x1 X &&& fresh xs x2 X", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho us u = Some X\n  rho xs x1 = None \\<and>\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> fresh xs x1 v)\n  rho xs x2 = None \\<and>\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> fresh xs x2 v)\n\ngoal (1 subgoal):\n 1. fresh xs x1 X &&& fresh xs x2 X", "by auto"], ["proof (state)\nthis:\n  fresh xs x1 X\n  fresh xs x2 X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "ultimately"], ["proof (chain)\npicking this:\n  good X\n  fresh xs x1 X\n  fresh xs x2 X", "have \"?Sw X = X\""], ["proof (prove)\nusing this:\n  good X\n  fresh xs x1 X\n  fresh xs x2 X\n\ngoal (1 subgoal):\n 1. X #[x1 \\<and> x2]_xs = X", "by simp"], ["proof (state)\nthis:\n  X #[x1 \\<and> x2]_xs = X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "}"], ["proof (state)\nthis:\n  X #[x1 \\<and> x2]_xs = X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho us u = Some a \\<Longrightarrow>\n       (rho &[x1 \\<and> x2]_xs) us u = rho us u", "ultimately"], ["proof (chain)\npicking this:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n  X #[x1 \\<and> x2]_xs = X", "show ?thesis"], ["proof (prove)\nusing this:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n  X #[x1 \\<and> x2]_xs = X\n\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = rho us u", "using Some"], ["proof (prove)\nusing this:\n  (rho &[x1 \\<and> x2]_xs) us u = Some (X #[x1 \\<and> x2]_xs)\n  X #[x1 \\<and> x2]_xs = X\n  rho us u = Some X\n\ngoal (1 subgoal):\n 1. (rho &[x1 \\<and> x2]_xs) us u = rho us u", "by simp"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = rho us u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (rho &[x1 \\<and> x2]_xs) us u = rho us u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma freshEnv_swapEnv_compose:\nassumes good: \"goodEnv rho\" and\n        fresh: \"freshEnv xs y rho\"  \"freshEnv xs z rho\"\nshows \"((rho &[y \\<and> x]_xs) &[z \\<and> y]_xs) = (rho &[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y \\<and> x]_xs &[z \\<and> y]_xs = rho &[z \\<and> x]_xs", "by (simp add: fresh good sw_def swapEnv_compose)"], ["", "lemmas good_swapAll_freshAll_otherSimps =\nswap_ident swap_involutive swap_involutive2 swap_preserves_fresh fresh_swap_id\nfreshAbs_swapAbs_id\nswapEnv_ident swapEnv_involutive swapEnv_involutive2 swapEnv_preserves_freshEnv freshEnv_swapEnv_id"], ["", "subsubsection \\<open>Properties of the relation of being swapped\\<close>"], ["", "theorem swap_swapped: \"(X, X #[x \\<and> y]_zs) \\<in> swapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[x \\<and> y]_zs) \\<in> swapped", "by(auto simp add: swapped.Refl swapped.Swap)"], ["", "lemma swapped_preserves_good:\nassumes \"good X\" and \"(X,Y) \\<in> swapped\"\nshows \"good Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good Y", "using assms(2,1)"], ["proof (prove)\nusing this:\n  (X, Y) \\<in> swapped\n  good X\n\ngoal (1 subgoal):\n 1. good Y", "by (induct rule: swapped.induct) auto"], ["", "lemma swapped_skel:\nassumes \"good X\" and \"(X,Y) \\<in> swapped\"\nshows \"skel Y = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel Y = skel X", "using assms(2,1)"], ["proof (prove)\nusing this:\n  (X, Y) \\<in> swapped\n  good X\n\ngoal (1 subgoal):\n 1. skel Y = skel X", "by (induct rule: swapped.induct) (auto simp: swapped_preserves_good skel_swap)"], ["", "lemma obtain_rep:\nassumes GOOD: \"good X\" and FRESH: \"fresh xs x' X\"\nshows \"\\<exists> X'. (X,X') \\<in> swapped \\<and> good X' \\<and> Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> swapped \\<and> good X' \\<and> Abs xs x X = Abs xs x' X'", "using Abs_swap_fresh FRESH GOOD swap_preserves_good swap_swapped"], ["proof (prove)\nusing this:\n  \\<lbrakk>good ?X; fresh ?xs ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> Abs ?xs ?x ?X = Abs ?xs ?x' (?X #[?x' \\<and> ?x]_?xs)\n  fresh xs x' X\n  good X\n  good ?X \\<Longrightarrow> good (?X #[?x \\<and> ?y]_?xs)\n  (?X, ?X #[?x \\<and> ?y]_?zs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> swapped \\<and> good X' \\<and> Abs xs x X = Abs xs x' X'", "by blast"], ["", "subsection \\<open>Induction\\<close>"], ["", "subsubsection \\<open>Induction lifted from quasi-terms\\<close>"], ["", "lemma term_templateInduct[case_names rel Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs rel\nassumes\nrel: \"\\<And> X Y. \\<lbrakk>good X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> good Y \\<and> skel Y = skel X\" and\nvar: \"\\<And> xs x. phi (Var xs x)\" and\nop: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nabs: \"\\<And> xs x X. \\<lbrakk>good X; \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n                \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "let ?qX = \"pick X\""], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "let ?qA = \"pick A\""], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "let ?qphi = \"phi o asTerm\""], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "let ?qphiAbs = \"phiAbs o asAbs\""], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "let ?qrel = \"{(qY, qY')| qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "(*   *)"], ["proof (state)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "have \"(good X \\<longrightarrow> qGood ?qX) \\<and> (goodAbs A \\<longrightarrow> qGoodAbs ?qA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> qGood (pick X)) \\<and>\n    (goodAbs A \\<longrightarrow> qGoodAbs (pick A))", "using good_imp_qGood_pick goodAbs_imp_qGoodAbs_pick"], ["proof (prove)\nusing this:\n  good ?X \\<Longrightarrow> qGood (pick ?X)\n  goodAbs ?A \\<Longrightarrow> qGoodAbs (pick ?A)\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> qGood (pick X)) \\<and>\n    (goodAbs A \\<longrightarrow> qGoodAbs (pick A))", "by auto"], ["proof (state)\nthis:\n  (good X \\<longrightarrow> qGood (pick X)) \\<and>\n  (goodAbs A \\<longrightarrow> qGoodAbs (pick A))\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "moreover"], ["proof (state)\nthis:\n  (good X \\<longrightarrow> qGood (pick X)) \\<and>\n  (goodAbs A \\<longrightarrow> qGoodAbs (pick A))\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "have \"(good X \\<longrightarrow> (?qphi ?qX = phi X)) \\<and> (goodAbs A \\<longrightarrow> (?qphiAbs ?qA = phiAbs A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n    (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)", "using asTerm_pick asAbs_pick"], ["proof (prove)\nusing this:\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n  goodAbs ?A \\<Longrightarrow> asAbs (pick ?A) = ?A\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n    (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)", "by fastforce"], ["proof (state)\nthis:\n  (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n  (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "moreover"], ["proof (state)\nthis:\n  (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n  (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "have \"(qGood ?qX \\<longrightarrow> ?qphi ?qX) \\<and> (qGoodAbs ?qA \\<longrightarrow> ?qphiAbs ?qA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood (pick X) \\<longrightarrow> (phi \\<circ> asTerm) (pick X)) \\<and>\n    (qGoodAbs (pick A) \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A))", "proof(induction rule: qGood_qTerm_templateInduct[of ?qrel])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>qGood X;\n        (X, Y)\n        \\<in> {(qY, qY') |qY qY'.\n               (asTerm qY, asTerm qY') \\<in> rel}\\<rbrakk>\n       \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\n 2. \\<And>xs x. (phi \\<circ> asTerm) (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "case (Rel qX qY)"], ["proof (state)\nthis:\n  qGood qX\n  (qX, qY) \\<in> {(qY, qY') |qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>qGood X;\n        (X, Y)\n        \\<in> {(qY, qY') |qY qY'.\n               (asTerm qY, asTerm qY') \\<in> rel}\\<rbrakk>\n       \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\n 2. \\<And>xs x. (phi \\<circ> asTerm) (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "thus ?case"], ["proof (prove)\nusing this:\n  qGood qX\n  (qX, qY) \\<in> {(qY, qY') |qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\n\ngoal (1 subgoal):\n 1. qGood qY \\<and> qSkel qY = qSkel qX", "using qGood_iff_good_asTerm pick_asTerm"], ["proof (prove)\nusing this:\n  qGood qX\n  (qX, qY) \\<in> {(qY, qY') |qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\n  good (asTerm ?qX) = qGood ?qX\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n\ngoal (1 subgoal):\n 1. qGood qY \\<and> qSkel qY = qSkel qX", "unfolding skel_def"], ["proof (prove)\nusing this:\n  qGood qX\n  (qX, qY) \\<in> {(qY, qY') |qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\n  good (asTerm ?qX) = qGood ?qX\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n\ngoal (1 subgoal):\n 1. qGood qY \\<and> qSkel qY = qSkel qX", "using rel skel_asTerm_qSkel"], ["proof (prove)\nusing this:\n  qGood qX\n  (qX, qY) \\<in> {(qY, qY') |qY qY'. (asTerm qY, asTerm qY') \\<in> rel}\n  good (asTerm ?qX) = qGood ?qX\n  qGood ?qX \\<Longrightarrow> pick (asTerm ?qX) #= ?qX\n  \\<lbrakk>good ?X90; (?X90, ?Y90) \\<in> rel\\<rbrakk>\n  \\<Longrightarrow> good ?Y90 \\<and> skel ?Y90 = skel ?X90\n  qGood ?qX \\<Longrightarrow> skel (asTerm ?qX) = qSkel ?qX\n\ngoal (1 subgoal):\n 1. qGood qY \\<and> qSkel qY = qSkel qX", "by simp (smt qGood_iff_good_asTerm skel_asTerm_qSkel)"], ["proof (state)\nthis:\n  qGood qY \\<and> qSkel qY = qSkel qX\n\ngoal (3 subgoals):\n 1. \\<And>xs x. (phi \\<circ> asTerm) (qVar xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. (phi \\<circ> asTerm) (qVar xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x. (phi \\<circ> asTerm) (qVar xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qVar xs x)", "using var"], ["proof (prove)\nusing this:\n  phi (Var ?xs90 ?x90)\n\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qVar xs x)", "unfolding Var_def"], ["proof (prove)\nusing this:\n  phi (asTerm (qVar ?xs90 ?x90))\n\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qVar xs x)", "by simp"], ["proof (state)\nthis:\n  (phi \\<circ> asTerm) (qVar xs x)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "case (Op delta qinp qbinp)"], ["proof (state)\nthis:\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) qinp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A) qbinp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "hence good_qinp: \"qGoodInp qinp \\<and> qGoodBinp qbinp\""], ["proof (prove)\nusing this:\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) qinp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A) qbinp\n\ngoal (1 subgoal):\n 1. qGoodInp qinp \\<and> qGoodBinp qbinp", "unfolding qGoodInp_def qGoodBinp_def liftAll_def"], ["proof (prove)\nusing this:\n  |{i. qinp i \\<noteq> None}| <o |UNIV|\n  |{i. qbinp i \\<noteq> None}| <o |UNIV|\n  \\<forall>i v.\n     qinp i = Some v \\<longrightarrow> qGood v \\<and> (phi \\<circ> asTerm) v\n  \\<forall>i v.\n     qbinp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and> (phiAbs \\<circ> asAbs) v\n\ngoal (1 subgoal):\n 1. ((\\<forall>i v. qinp i = Some v \\<longrightarrow> qGood v) \\<and>\n     |{i. qinp i \\<noteq> None}| <o |UNIV|) \\<and>\n    (\\<forall>i v. qbinp i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n    |{i. qbinp i \\<noteq> None}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "let ?inp = \"asInp qinp\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "let ?binp = \"asBinp qbinp\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have good_inp: \"goodInp ?inp \\<and> goodBinp ?binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)", "using good_qinp qGoodInp_iff_goodInp_asInp qGoodBinp_iff_goodBinp_asBinp"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n  goodInp (asInp ?qinp) = qGoodInp ?qinp\n  goodBinp (asBinp ?qbinp) = qGoodBinp ?qbinp\n\ngoal (1 subgoal):\n 1. goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)", "by auto"], ["proof (state)\nthis:\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have 1: \"Op delta ?inp ?binp = asTerm (qOp delta qinp qbinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)", "using good_qinp Op_asInp_asTerm_qOp"], ["proof (prove)\nusing this:\n  qGoodInp qinp \\<and> qGoodBinp qbinp\n  \\<lbrakk>qGoodInp ?qinp; qGoodBinp ?qbinp\\<rbrakk>\n  \\<Longrightarrow> Op ?delta (asInp ?qinp) (asBinp ?qbinp) =\n                    asTerm (qOp ?delta ?qinp ?qbinp)\n\ngoal (1 subgoal):\n 1. Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)", "by fastforce"], ["proof (state)\nthis:\n  Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "{"], ["proof (state)\nthis:\n  Op delta (asInp qinp) (asBinp qbinp) = asTerm (qOp delta qinp qbinp)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "fix i X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "assume inp: \"?inp i = Some X\""], ["proof (state)\nthis:\n  asInp qinp i = Some X\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "then"], ["proof (chain)\npicking this:\n  asInp qinp i = Some X", "obtain qX where qinp: \"qinp i = Some qX\" and X: \"X = asTerm qX\""], ["proof (prove)\nusing this:\n  asInp qinp i = Some X\n\ngoal (1 subgoal):\n 1. (\\<And>qX.\n        \\<lbrakk>qinp i = Some qX; X = asTerm qX\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding asInp_def lift_def"], ["proof (prove)\nusing this:\n  (case qinp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (asTerm v)) =\n  Some X\n\ngoal (1 subgoal):\n 1. (\\<And>qX.\n        \\<lbrakk>qinp i = Some qX; X = asTerm qX\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qinp i\", auto)"], ["proof (state)\nthis:\n  qinp i = Some qX\n  X = asTerm qX\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have \"qGood qX \\<and> phi (asTerm qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood qX \\<and> phi (asTerm qX)", "using qinp Op.IH"], ["proof (prove)\nusing this:\n  qinp i = Some qX\n  liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) qinp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A) qbinp\n\ngoal (1 subgoal):\n 1. qGood qX \\<and> phi (asTerm qX)", "by (simp add: liftAll_def)"], ["proof (state)\nthis:\n  qGood qX \\<and> phi (asTerm qX)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "hence \"good X \\<and> phi X\""], ["proof (prove)\nusing this:\n  qGood qX \\<and> phi (asTerm qX)\n\ngoal (1 subgoal):\n 1. good X \\<and> phi X", "unfolding X"], ["proof (prove)\nusing this:\n  qGood qX \\<and> phi (asTerm qX)\n\ngoal (1 subgoal):\n 1. good (asTerm qX) \\<and> phi (asTerm qX)", "using qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  qGood qX \\<and> phi (asTerm qX)\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm qX) \\<and> phi (asTerm qX)", "by auto"], ["proof (state)\nthis:\n  good X \\<and> phi X\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "}"], ["proof (state)\nthis:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "moreover"], ["proof (state)\nthis:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "{"], ["proof (state)\nthis:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "fix i A"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "assume binp: \"?binp i = Some A\""], ["proof (state)\nthis:\n  asBinp qbinp i = Some A\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "then"], ["proof (chain)\npicking this:\n  asBinp qbinp i = Some A", "obtain qA where qbinp: \"qbinp i = Some qA\" and A: \"A = asAbs qA\""], ["proof (prove)\nusing this:\n  asBinp qbinp i = Some A\n\ngoal (1 subgoal):\n 1. (\\<And>qA.\n        \\<lbrakk>qbinp i = Some qA; A = asAbs qA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding asBinp_def lift_def"], ["proof (prove)\nusing this:\n  (case qbinp i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (asAbs v)) =\n  Some A\n\ngoal (1 subgoal):\n 1. (\\<And>qA.\n        \\<lbrakk>qbinp i = Some qA; A = asAbs qA\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"qbinp i\", auto)"], ["proof (state)\nthis:\n  qbinp i = Some qA\n  A = asAbs qA\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have \"qGoodAbs qA \\<and> phiAbs (asAbs qA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs qA \\<and> phiAbs (asAbs qA)", "using qbinp Op.IH"], ["proof (prove)\nusing this:\n  qbinp i = Some qA\n  liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) qinp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A) qbinp\n\ngoal (1 subgoal):\n 1. qGoodAbs qA \\<and> phiAbs (asAbs qA)", "by (simp add: liftAll_def)"], ["proof (state)\nthis:\n  qGoodAbs qA \\<and> phiAbs (asAbs qA)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "hence \"goodAbs A \\<and> phiAbs A\""], ["proof (prove)\nusing this:\n  qGoodAbs qA \\<and> phiAbs (asAbs qA)\n\ngoal (1 subgoal):\n 1. goodAbs A \\<and> phiAbs A", "unfolding A"], ["proof (prove)\nusing this:\n  qGoodAbs qA \\<and> phiAbs (asAbs qA)\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA) \\<and> phiAbs (asAbs qA)", "using qGoodAbs_iff_goodAbs_asAbs"], ["proof (prove)\nusing this:\n  qGoodAbs qA \\<and> phiAbs (asAbs qA)\n  goodAbs (asAbs ?qA) = qGoodAbs ?qA\n\ngoal (1 subgoal):\n 1. goodAbs (asAbs qA) \\<and> phiAbs (asAbs qA)", "by auto"], ["proof (state)\nthis:\n  goodAbs A \\<and> phiAbs A\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "}"], ["proof (state)\nthis:\n  asBinp qbinp ?i92 = Some ?Aa92 \\<Longrightarrow>\n  goodAbs ?Aa92 \\<and> phiAbs ?Aa92\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> (phi \\<circ> asTerm) X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> (phiAbs \\<circ> asAbs) A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> (phi \\<circ> asTerm) (qOp delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "ultimately"], ["proof (chain)\npicking this:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n  asBinp qbinp ?i92 = Some ?Aa92 \\<Longrightarrow>\n  goodAbs ?Aa92 \\<and> phiAbs ?Aa92", "show ?case"], ["proof (prove)\nusing this:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n  asBinp qbinp ?i92 = Some ?Aa92 \\<Longrightarrow>\n  goodAbs ?Aa92 \\<and> phiAbs ?Aa92\n\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qOp delta qinp qbinp)", "using op[of ?inp ?binp delta] good_inp"], ["proof (prove)\nusing this:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n  asBinp qbinp ?i92 = Some ?Aa92 \\<Longrightarrow>\n  goodAbs ?Aa92 \\<and> phiAbs ?Aa92\n  \\<lbrakk>goodInp (asInp qinp); goodBinp (asBinp qbinp);\n   liftAll phi (asInp qinp); liftAll phiAbs (asBinp qbinp)\\<rbrakk>\n  \\<Longrightarrow> phi (Op delta (asInp qinp) (asBinp qbinp))\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qOp delta qinp qbinp)", "unfolding 1 liftAll_def"], ["proof (prove)\nusing this:\n  asInp qinp ?i92 = Some ?Xa92 \\<Longrightarrow> good ?Xa92 \\<and> phi ?Xa92\n  asBinp qbinp ?i92 = Some ?Aa92 \\<Longrightarrow>\n  goodAbs ?Aa92 \\<and> phiAbs ?Aa92\n  \\<lbrakk>goodInp (asInp qinp); goodBinp (asBinp qbinp);\n   \\<forall>i v. asInp qinp i = Some v \\<longrightarrow> phi v;\n   \\<forall>i v. asBinp qbinp i = Some v \\<longrightarrow> phiAbs v\\<rbrakk>\n  \\<Longrightarrow> phi (asTerm (qOp delta qinp qbinp))\n  goodInp (asInp qinp) \\<and> goodBinp (asBinp qbinp)\n\ngoal (1 subgoal):\n 1. (phi \\<circ> asTerm) (qOp delta qinp qbinp)", "by simp"], ["proof (state)\nthis:\n  (phi \\<circ> asTerm) (qOp delta qinp qbinp)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "case (Abs xs x qX)"], ["proof (state)\nthis:\n  qGood qX\n  (qX, ?Y90)\n  \\<in> {(qY, qY') |qY qY'.\n         (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n  (phi \\<circ> asTerm) ?Y90\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have \"good (asTerm qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (asTerm qX)", "using \\<open>qGood qX\\<close> qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  qGood qX\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm qX)", "by auto"], ["proof (state)\nthis:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "moreover"], ["proof (state)\nthis:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "{"], ["proof (state)\nthis:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "assume *: \"(asTerm qX, Y) \\<in> rel\""], ["proof (state)\nthis:\n  (asTerm qX, Y) \\<in> rel\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "obtain qY where qY: \"qY = pick Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>qY. qY = pick Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  qY = pick Y\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have \"good (asTerm qX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good (asTerm qX)", "using \\<open>qGood qX\\<close> qGood_iff_good_asTerm"], ["proof (prove)\nusing this:\n  qGood qX\n  good (asTerm ?qX) = qGood ?qX\n\ngoal (1 subgoal):\n 1. good (asTerm qX)", "by auto"], ["proof (state)\nthis:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "hence \"good Y\""], ["proof (prove)\nusing this:\n  good (asTerm qX)\n\ngoal (1 subgoal):\n 1. good Y", "using * rel"], ["proof (prove)\nusing this:\n  good (asTerm qX)\n  (asTerm qX, Y) \\<in> rel\n  \\<lbrakk>good ?X90; (?X90, ?Y90) \\<in> rel\\<rbrakk>\n  \\<Longrightarrow> good ?Y90 \\<and> skel ?Y90 = skel ?X90\n\ngoal (1 subgoal):\n 1. good Y", "by auto"], ["proof (state)\nthis:\n  good Y\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "hence Y: \"Y = asTerm qY\""], ["proof (prove)\nusing this:\n  good Y\n\ngoal (1 subgoal):\n 1. Y = asTerm qY", "unfolding qY"], ["proof (prove)\nusing this:\n  good Y\n\ngoal (1 subgoal):\n 1. Y = asTerm (pick Y)", "using asTerm_pick"], ["proof (prove)\nusing this:\n  good Y\n  good ?X \\<Longrightarrow> asTerm (pick ?X) = ?X\n\ngoal (1 subgoal):\n 1. Y = asTerm (pick Y)", "by auto"], ["proof (state)\nthis:\n  Y = asTerm qY\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "have \"phi Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi Y", "using * Abs.IH"], ["proof (prove)\nusing this:\n  (asTerm qX, Y) \\<in> rel\n  (qX, ?Y90)\n  \\<in> {(qY, qY') |qY qY'.\n         (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n  (phi \\<circ> asTerm) ?Y90\n\ngoal (1 subgoal):\n 1. phi Y", "unfolding Y"], ["proof (prove)\nusing this:\n  (asTerm qX, asTerm qY) \\<in> rel\n  (qX, ?Y90)\n  \\<in> {(qY, qY') |qY qY'.\n         (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n  (phi \\<circ> asTerm) ?Y90\n\ngoal (1 subgoal):\n 1. phi (asTerm qY)", "by simp"], ["proof (state)\nthis:\n  phi Y\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "}"], ["proof (state)\nthis:\n  (asTerm qX, ?Y92) \\<in> rel \\<Longrightarrow> phi ?Y92\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "ultimately"], ["proof (chain)\npicking this:\n  good (asTerm qX)\n  (asTerm qX, ?Y92) \\<in> rel \\<Longrightarrow> phi ?Y92", "have \"phiAbs (Abs xs x (asTerm qX))\""], ["proof (prove)\nusing this:\n  good (asTerm qX)\n  (asTerm qX, ?Y92) \\<in> rel \\<Longrightarrow> phi ?Y92\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x (asTerm qX))", "using abs"], ["proof (prove)\nusing this:\n  good (asTerm qX)\n  (asTerm qX, ?Y92) \\<in> rel \\<Longrightarrow> phi ?Y92\n  \\<lbrakk>good ?X90;\n   \\<And>Y. (?X90, Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs ?xs90 ?x90 ?X90)\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x (asTerm qX))", "by simp"], ["proof (state)\nthis:\n  phiAbs (Abs xs x (asTerm qX))\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(qY, qY') |qY qY'.\n                  (asTerm qY, asTerm qY') \\<in> rel} \\<Longrightarrow>\n           (phi \\<circ> asTerm) Y\\<rbrakk>\n       \\<Longrightarrow> (phiAbs \\<circ> asAbs) (qAbs xs x X)", "thus ?case"], ["proof (prove)\nusing this:\n  phiAbs (Abs xs x (asTerm qX))\n\ngoal (1 subgoal):\n 1. (phiAbs \\<circ> asAbs) (qAbs xs x qX)", "using \\<open>qGood qX\\<close> Abs_asTerm_asAbs_qAbs"], ["proof (prove)\nusing this:\n  phiAbs (Abs xs x (asTerm qX))\n  qGood qX\n  qGood ?qX \\<Longrightarrow>\n  Abs ?xs ?x (asTerm ?qX) = asAbs (qAbs ?xs ?x ?qX)\n\ngoal (1 subgoal):\n 1. (phiAbs \\<circ> asAbs) (qAbs xs x qX)", "by fastforce"], ["proof (state)\nthis:\n  (phiAbs \\<circ> asAbs) (qAbs xs x qX)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (qGood (pick X) \\<longrightarrow> (phi \\<circ> asTerm) (pick X)) \\<and>\n  (qGoodAbs (pick A) \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A))\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "(*  *)"], ["proof (state)\nthis:\n  (qGood (pick X) \\<longrightarrow> (phi \\<circ> asTerm) (pick X)) \\<and>\n  (qGoodAbs (pick A) \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A))\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "ultimately"], ["proof (chain)\npicking this:\n  (good X \\<longrightarrow> qGood (pick X)) \\<and>\n  (goodAbs A \\<longrightarrow> qGoodAbs (pick A))\n  (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n  (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)\n  (qGood (pick X) \\<longrightarrow> (phi \\<circ> asTerm) (pick X)) \\<and>\n  (qGoodAbs (pick A) \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A))", "show ?thesis"], ["proof (prove)\nusing this:\n  (good X \\<longrightarrow> qGood (pick X)) \\<and>\n  (goodAbs A \\<longrightarrow> qGoodAbs (pick A))\n  (good X \\<longrightarrow> (phi \\<circ> asTerm) (pick X) = phi X) \\<and>\n  (goodAbs A \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A) = phiAbs A)\n  (qGood (pick X) \\<longrightarrow> (phi \\<circ> asTerm) (pick X)) \\<and>\n  (qGoodAbs (pick A) \\<longrightarrow> (phiAbs \\<circ> asAbs) (pick A))\n\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "by blast"], ["proof (state)\nthis:\n  (good X \\<longrightarrow> phi X) \\<and>\n  (goodAbs A \\<longrightarrow> phiAbs A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma term_rawInduct[case_names Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>good X; phi X\\<rbrakk> \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "by(rule term_templateInduct[of Id], auto simp add: assms)"], ["", "lemma term_induct[case_names Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n                       \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>good X;\n                 \\<And> Y. (X,Y) \\<in> swapped \\<Longrightarrow> phi Y;\n                 \\<And> Y. \\<lbrakk>good Y; skel Y = skel X\\<rbrakk> \\<Longrightarrow> phi Y\\<rbrakk>\n                \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows \"(good X \\<longrightarrow> phi X) \\<and> (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "apply(induct rule: term_templateInduct[of \"swapped \\<union> {(X,Y). good Y \\<and> skel Y = skel X}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X;\n        (X, Y)\n        \\<in> swapped \\<union>\n              {(X, Y). good Y \\<and> skel Y = skel X}\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> swapped \\<union>\n                 {(X, Y). good Y \\<and> skel Y = skel X} \\<Longrightarrow>\n           phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "by(auto simp: assms swapped_skel swapped_preserves_good)"], ["", "subsubsection \\<open>Fresh induction\\<close>"], ["", "text\\<open>First a general situation, where parameters are of an unspecified type (that should be given by the user):\\<close>"], ["", "lemma term_fresh_forall_induct[case_names PAR Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and A::\"('index,'bindex,'varSort,'var,'opSym)abs\" \nand phi and phiAbs and varsOf :: \"'param \\<Rightarrow> 'varSort \\<Rightarrow> 'var set\" \nassumes\nPAR: \"\\<And> p xs. ( |varsOf xs p| <o |UNIV::'var set| )\" and\nvar: \"\\<And> xs x p. phi (Var xs x) p\" and\nop: \"\\<And> delta inp binp p.  \n   \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV::'var set|; |{i. binp i \\<noteq> None}| <o |UNIV::'var set|;\n    liftAll (\\<lambda> X. good X \\<and> (\\<forall> q. phi X p)) inp; liftAll (\\<lambda> A. goodAbs A \\<and> (\\<forall> q. phiAbs A p)) binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp) p\" and\nabs: \"\\<And> xs x X p. \\<lbrakk>good X; x \\<notin> varsOf p xs; phi X p\\<rbrakk> \\<Longrightarrow> phiAbs (Abs xs x X) p\"\nshows \"(good X \\<longrightarrow> (\\<forall> p. phi X p)) \\<and> (goodAbs A \\<longrightarrow> (\\<forall> p. phiAbs A p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> (\\<forall>p. phi X p)) \\<and>\n    (goodAbs A \\<longrightarrow> (\\<forall>p. phiAbs A p))", "proof(induction rule: term_templateInduct[of swapped])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. \\<forall>p. phi (Var xs x) p\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>p. phi a p) inp;\n        liftAll (\\<lambda>a. \\<forall>p. phiAbs a p) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p. phi (Op delta inp binp) p\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>p. phi Y p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p. phiAbs (Abs xs x X) p", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  (X, ?Y90) \\<in> swapped \\<Longrightarrow> \\<forall>p. phi ?Y90 p\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. \\<forall>p. phi (Var xs x) p\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>p. phi a p) inp;\n        liftAll (\\<lambda>a. \\<forall>p. phiAbs a p) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p. phi (Op delta inp binp) p\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>p. phi Y p\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p. phiAbs (Abs xs x X) p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. phiAbs (Abs xs x X) p", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. phiAbs (Abs xs x X) p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. phiAbs (Abs xs x X) p", "obtain x' where x'_freshP: \"x' \\<notin> varsOf p xs\" and x'_fresh_X: \"fresh xs x' X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<notin> varsOf p xs; fresh xs x' X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>good X\\<close> PAR obtain_fresh[of \"varsOf p xs\" \"{X}\" \"{}\" \"{}\" xs]"], ["proof (prove)\nusing this:\n  good X\n  |varsOf ?xs90 ?p90| <o |UNIV|\n  \\<lbrakk>|varsOf p xs| <o |UNIV| \\<or> finite (varsOf p xs);\n   |{X}| <o |UNIV| \\<or> finite {X}; |{}| <o |UNIV| \\<or> finite {};\n   |{}| <o |UNIV| \\<or> finite {}; Ball {X} good; Ball {} goodAbs;\n   Ball {} goodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> varsOf p xs \\<and>\n                       (\\<forall>X\\<in>{X}. fresh xs z X) \\<and>\n                       (\\<forall>A\\<in>{}. freshAbs xs z A) \\<and>\n                       (\\<forall>rho\\<in>{}. freshEnv xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<notin> varsOf p xs; fresh xs x' X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. \\<And>p. phiAbs (Abs xs x X) p", "then"], ["proof (chain)\npicking this:\n  x' \\<notin> varsOf p xs\n  fresh xs x' X", "obtain X' where XX': \"(X, X') \\<in> swapped\" and good_X': \"good X'\" and\n    Abs_eq: \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>good X\\<close> x'_freshP x'_fresh_X"], ["proof (prove)\nusing this:\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n  good X\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_rep[of X xs x' x]"], ["proof (prove)\nusing this:\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n  good X\n  x' \\<notin> varsOf p xs\n  fresh xs x' X\n  \\<lbrakk>good X; fresh xs x' X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       (X, X') \\<in> swapped \\<and>\n                       good X' \\<and> Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (X, X') \\<in> swapped\n  good X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. \\<And>p. phiAbs (Abs xs x X) p", "thus \"phiAbs (Abs xs x X) p\""], ["proof (prove)\nusing this:\n  (X, X') \\<in> swapped\n  good X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x X) p", "unfolding Abs_eq"], ["proof (prove)\nusing this:\n  (X, X') \\<in> swapped\n  good X'\n  Abs xs x' X' = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x' X') p", "using x'_freshP good_X' abs Abs.IH"], ["proof (prove)\nusing this:\n  (X, X') \\<in> swapped\n  good X'\n  Abs xs x' X' = Abs xs x' X'\n  x' \\<notin> varsOf p xs\n  good X'\n  \\<lbrakk>good ?X90; ?x90 \\<notin> varsOf ?p90 ?xs90;\n   phi ?X90 ?p90\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs ?xs90 ?x90 ?X90) ?p90\n  (X, ?Y90) \\<in> swapped \\<Longrightarrow> \\<forall>p. phi ?Y90 p\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x' X') p", "by simp"], ["proof (state)\nthis:\n  phiAbs (Abs xs x X) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p. phiAbs (Abs xs x X) p\n\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. \\<forall>p. phi (Var xs x) p\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>p. phi a p) inp;\n        liftAll (\\<lambda>a. \\<forall>p. phiAbs a p) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p. phi (Op delta inp binp) p", "qed(insert assms swapped_preserves_good swapped_skel, \n   unfold liftAll_def goodInp_def goodBinp_def, auto)"], ["", "lemma term_templateInduct_fresh[case_names PAR Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      rel and phi and phiAbs and\n      vars :: \"'varSort \\<Rightarrow> 'var set\" and\n      terms :: \"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      abs :: \"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms| <o |UNIV :: 'var set| \\<or> finite terms) \\<and> (\\<forall> X \\<in> terms. good X) \\<and>\n   ( |abs| <o |UNIV :: 'var set| \\<or> finite abs) \\<and> (\\<forall> A \\<in> abs. goodAbs A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite envs) \\<and> (\\<forall> rho \\<in> envs. goodEnv rho)\" and\nrel: \"\\<And> X Y. \\<lbrakk>good X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> good Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nabs:\n\"\\<And> xs x X.\n  \\<lbrakk>good X;\n   x \\<notin> vars xs;\n   \\<And> Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n   \\<And> A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n   \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n   \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "proof(induction rule: term_templateInduct[of \"swapped O rel\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  (X, ?Y90) \\<in> swapped O rel \\<Longrightarrow> phi ?Y90\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "note good_X = \\<open>good X\\<close>"], ["proof (state)\nthis:\n  good X\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "have \"|{X} \\<union> terms| <o |UNIV :: 'var set| \\<or> finite ({X} \\<union> terms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)", "apply(cases \"finite terms\", auto simp add: PAR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite terms \\<Longrightarrow> |insert X terms| <o |UNIV|", "using PAR var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  (|vars ?xs90| <o |UNIV| \\<or> finite (vars ?xs90)) \\<and>\n  (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n  Ball terms good \\<and>\n  (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n  Ball abs goodAbs \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. infinite terms \\<Longrightarrow> |insert X terms| <o |UNIV|", "by force"], ["proof (state)\nthis:\n  |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "then"], ["proof (chain)\npicking this:\n  |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)", "obtain x' where x'_not: \"x' \\<notin> vars xs\" and\n  x'_fresh_X: \"fresh xs x' X\" and\n  x'_freshP: \"(\\<forall> Y \\<in> terms. fresh xs x' Y) \\<and>\n              (\\<forall> A \\<in> abs. freshAbs xs x' A) \\<and>\n              (\\<forall> rho \\<in> envs. freshEnv xs x' rho)\""], ["proof (prove)\nusing this:\n  |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<notin> vars xs; fresh xs x' X;\n         (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n         (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n         (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using good_X PAR"], ["proof (prove)\nusing this:\n  |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)\n  good X\n  (|vars ?xs90| <o |UNIV| \\<or> finite (vars ?xs90)) \\<and>\n  (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n  Ball terms good \\<and>\n  (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n  Ball abs goodAbs \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<notin> vars xs; fresh xs x' X;\n         (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n         (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n         (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_fresh[of \"vars xs\" \"{X} \\<union> terms\" abs envs xs]"], ["proof (prove)\nusing this:\n  |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms)\n  good X\n  (|vars ?xs90| <o |UNIV| \\<or> finite (vars ?xs90)) \\<and>\n  (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n  Ball terms good \\<and>\n  (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n  Ball abs goodAbs \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n  \\<lbrakk>|vars xs| <o |UNIV| \\<or> finite (vars xs);\n   |{X} \\<union> terms| <o |UNIV| \\<or> finite ({X} \\<union> terms);\n   |abs| <o |UNIV| \\<or> finite abs; |envs| <o |UNIV| \\<or> finite envs;\n   Ball ({X} \\<union> terms) good; Ball abs goodAbs;\n   Ball envs goodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> vars xs \\<and>\n                       (\\<forall>X\\<in>{X} \\<union> terms.\n                           fresh xs z X) \\<and>\n                       (\\<forall>A\\<in>abs. freshAbs xs z A) \\<and>\n                       (\\<forall>rho\\<in>envs. freshEnv xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<notin> vars xs; fresh xs x' X;\n         (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n         (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n         (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' \\<notin> vars xs\n  fresh xs x' X\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "then"], ["proof (chain)\npicking this:\n  x' \\<notin> vars xs\n  fresh xs x' X\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)", "obtain X' where XX': \"(X, X') \\<in> swapped\" and good_X': \"good X'\" and\n  Abs_eq: \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  x' \\<notin> vars xs\n  fresh xs x' X\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using good_X x'_not x'_fresh_X"], ["proof (prove)\nusing this:\n  x' \\<notin> vars xs\n  fresh xs x' X\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\n  good X\n  x' \\<notin> vars xs\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_rep[of X xs x' x]"], ["proof (prove)\nusing this:\n  x' \\<notin> vars xs\n  fresh xs x' X\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\n  good X\n  x' \\<notin> vars xs\n  fresh xs x' X\n  \\<lbrakk>good X; fresh xs x' X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       (X, X') \\<in> swapped \\<and>\n                       good X' \\<and> Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>(X, X') \\<in> swapped; good X';\n         Abs xs x X = Abs xs x' X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (X, X') \\<in> swapped\n  good X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "have \"\\<And>Y. (X', Y) \\<in> rel \\<Longrightarrow> phi Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y. (X', Y) \\<in> rel \\<Longrightarrow> phi Y", "using XX' Abs.IH"], ["proof (prove)\nusing this:\n  (X, X') \\<in> swapped\n  (X, ?Y90) \\<in> swapped O rel \\<Longrightarrow> phi ?Y90\n\ngoal (1 subgoal):\n 1. \\<And>Y. (X', Y) \\<in> rel \\<Longrightarrow> phi Y", "by auto"], ["proof (state)\nthis:\n  (X', ?Y90) \\<in> rel \\<Longrightarrow> phi ?Y90\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y. (X, Y) \\<in> swapped O rel \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "thus ?case"], ["proof (prove)\nusing this:\n  (X', ?Y90) \\<in> rel \\<Longrightarrow> phi ?Y90\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x X)", "unfolding Abs_eq"], ["proof (prove)\nusing this:\n  (X', ?Y90) \\<in> rel \\<Longrightarrow> phi ?Y90\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x' X')", "using x'_not x'_freshP good_X' abs"], ["proof (prove)\nusing this:\n  (X', ?Y90) \\<in> rel \\<Longrightarrow> phi ?Y90\n  x' \\<notin> vars xs\n  (\\<forall>Y\\<in>terms. fresh xs x' Y) \\<and>\n  (\\<forall>A\\<in>abs. freshAbs xs x' A) \\<and>\n  (\\<forall>rho\\<in>envs. freshEnv xs x' rho)\n  good X'\n  \\<lbrakk>good ?X90; ?x90 \\<notin> vars ?xs90;\n   \\<And>Y. Y \\<in> terms \\<Longrightarrow> fresh ?xs90 ?x90 Y;\n   \\<And>A. A \\<in> abs \\<Longrightarrow> freshAbs ?xs90 ?x90 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs90 ?x90 rho;\n   \\<And>Y. (?X90, Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs ?xs90 ?x90 ?X90)\n\ngoal (1 subgoal):\n 1. phiAbs (Abs xs x' X')", "by auto"], ["proof (state)\nthis:\n  phiAbs (Abs xs x X)\n\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> swapped O rel\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)", "qed(insert Op rel, unfold relcomp_unfold liftAll_def, simp_all add: Var, \n     metis rel swapped_preserves_good swapped_skel)"], ["", "text\\<open>A version of the above not employing any relation for the bound-argument case:\\<close>"], ["", "lemma term_rawInduct_fresh[case_names Par Var Op Obs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      vars :: \"'varSort \\<Rightarrow> 'var set\" and\n      terms :: \"('index,'bindex,'varSort,'var,'opSym)term set\" and\n      abs :: \"('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms| <o |UNIV :: 'var set| \\<or> finite terms) \\<and> (\\<forall> X \\<in> terms. good X) \\<and>\n   ( |abs| <o |UNIV :: 'var set| \\<or> finite abs) \\<and> (\\<forall> A \\<in> abs. goodAbs A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite envs) \\<and> (\\<forall> rho \\<in> envs. goodEnv rho)\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs:\n\"\\<And> xs x X.\n  \\<lbrakk>good X;\n   x \\<notin> vars xs;\n   \\<And> Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n   \\<And> A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n   \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n   phi X\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "apply(induct rule: term_templateInduct_fresh[of vars terms abs envs Id])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xs.\n       (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n       (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n       Ball terms good \\<and>\n       (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n       Ball abs goodAbs \\<and>\n       (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n 2. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 3. \\<And>xs x. phi (Var xs x)\n 4. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 5. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y. (X, Y) \\<in> Id \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs90| <o |UNIV| \\<or> finite (vars ?xs90)) \\<and>\n  (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n  Ball terms good \\<and>\n  (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n  Ball abs goodAbs \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n  phi (Var ?xs90 ?x90)\n  \\<lbrakk>goodInp ?inp90; goodBinp ?binp90; liftAll phi ?inp90;\n   liftAll phiAbs ?binp90\\<rbrakk>\n  \\<Longrightarrow> phi (Op ?delta90 ?inp90 ?binp90)\n  \\<lbrakk>good ?X90; ?x90 \\<notin> vars ?xs90;\n   \\<And>Y. Y \\<in> terms \\<Longrightarrow> fresh ?xs90 ?x90 Y;\n   \\<And>A. A \\<in> abs \\<Longrightarrow> freshAbs ?xs90 ?x90 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs90 ?x90 rho;\n   phi ?X90\\<rbrakk>\n  \\<Longrightarrow> phiAbs (Abs ?xs90 ?x90 ?X90)\n\ngoal (5 subgoals):\n 1. \\<And>xs.\n       (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n       (|terms| <o |UNIV| \\<or> finite terms) \\<and>\n       Ball terms good \\<and>\n       (|abs| <o |UNIV| \\<or> finite abs) \\<and>\n       Ball abs goodAbs \\<and>\n       (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n 2. \\<And>X Y.\n       \\<lbrakk>good X; (X, Y) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 3. \\<And>xs x. phi (Var xs x)\n 4. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 5. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y. Y \\<in> terms \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> abs \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y. (X, Y) \\<in> Id \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "by auto"], ["", "(* Note that here, since we avoid variable-capture and hence will\n not typically need to swap, term-inductRaw_fresh will suffice in proofs.\n Therefore we do not prove a swapped-and-skel version of fresh induction, although such a version\n could be easily inferred from ``term-templateInduct\". *)"], ["", "text\\<open>The typical raw induction with freshness is one dealing with\n   finitely many variables, terms, abstractions and environments as parameters --\n   we have all these condensed in the notion of a parameter (type\n   constructor ``param\"):\\<close>"], ["", "lemma term_induct_fresh[case_names Par Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P :: \"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes\ngoodP: \"goodPar P\" and\nVar: \"\\<And> xs x. phi (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>goodInp inp; goodBinp binp;\n    liftAll phi inp; liftAll phiAbs binp\\<rbrakk>\n   \\<Longrightarrow> phi (Op delta inp binp)\" and\nAbs:\n\"\\<And> xs x X.\n   \\<lbrakk>good X;\n    x \\<notin> varsOf P;\n    \\<And> Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n    \\<And> A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n    phi X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (Abs xs x X)\"\nshows\n\"(good X \\<longrightarrow> phi X) \\<and>\n (goodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> phi X) \\<and>\n    (goodAbs A \\<longrightarrow> phiAbs A)", "proof(induct rule: term_rawInduct_fresh\n      [of \"\\<lambda> xs. varsOf P\" \"termsOf P\" \"absOf P\" \"envsOf P\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs.\n       (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n       (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n       Ball (termsOf P) good \\<and>\n       (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n       Ball (absOf P) goodAbs \\<and>\n       (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n       Ball (envsOf P) goodEnv\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        phi X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "case (Par xs)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>xs.\n       (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n       (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n       Ball (termsOf P) good \\<and>\n       (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n       Ball (absOf P) goodAbs \\<and>\n       (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n       Ball (envsOf P) goodEnv\n 2. \\<And>xs x. phi (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        phi X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n    (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n    Ball (termsOf P) good \\<and>\n    (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n    Ball (absOf P) goodAbs \\<and>\n    (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n    Ball (envsOf P) goodEnv", "unfolding goodPar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n    (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n    Ball (termsOf P) good \\<and>\n    (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n    Ball (absOf P) goodAbs \\<and>\n    (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n    Ball (envsOf P) goodEnv", "using goodP"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n    (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n    Ball (termsOf P) good \\<and>\n    (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n    Ball (absOf P) goodAbs \\<and>\n    (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n    Ball (envsOf P) goodEnv", "by(cases P) simp"], ["proof (state)\nthis:\n  (|varsOf P| <o |UNIV| \\<or> finite (varsOf P)) \\<and>\n  (|termsOf P| <o |UNIV| \\<or> finite (termsOf P)) \\<and>\n  Ball (termsOf P) good \\<and>\n  (|absOf P| <o |UNIV| \\<or> finite (absOf P)) \\<and>\n  Ball (absOf P) goodAbs \\<and>\n  (|envsOf P| <o |UNIV| \\<or> finite (envsOf P)) \\<and>\n  Ball (envsOf P) goodEnv\n\ngoal (3 subgoals):\n 1. \\<And>xs x. phi (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp; liftAll phi inp;\n        liftAll phiAbs binp\\<rbrakk>\n       \\<Longrightarrow> phi (Op delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        phi X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (Abs xs x X)", "qed(insert assms, auto)"], ["", "end"], ["", "(* context FixVars  *)"], ["", "end"]]}