{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Well_Sorted_Terms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemmas FixSyn_assms =\nFixSyn_var_infinite FixSyn_var_regular\nvarSortAsSort_inj arityOf_lt_var barityOf_lt_var\nsort_lt_var", "lemma sort_lt_var_imp_varSort_lt_var:\nassumes\n**: \"varSortAsSort_inj (Delta :: ('index,'bindex,'varSort,'sort,'opSym)signature)\"\nand ***: \"sort_lt_var (undefined :: 'sort) (undefined :: 'var)\"\nshows \"varSort_lt_var (undefined :: 'varSort) (undefined :: 'var)\"", "lemma freshInp_empInp[simp]:\n\"freshInp xs x empInp\"", "lemma swapInp_empInp[simp]:\n\"(empInp %[x1 \\<and> x2]_xs) = empInp\"", "lemma psubstInp_empInp[simp]:\n\"(empInp %[rho]) = empInp\"", "lemma substInp_empInp[simp]:\n\"(empInp %[Y / y]_ys) = empInp\"", "lemma vsubstInp_empInp[simp]:\n\"(empInp %[y1 // y]_ys) = empInp\"", "lemma freshBinp_empBinp[simp]:\n\"freshBinp xs x empBinp\"", "lemma swapBinp_empBinp[simp]:\n\"(empBinp %%[x1 \\<and> x2]_xs) = empBinp\"", "lemma psubstBinp_empBinp[simp]:\n\"(empBinp %%[rho]) = empBinp\"", "lemma substBinp_empBinp[simp]:\n\"(empBinp %%[Y / y]_ys) = empBinp\"", "lemma vsubstBinp_empBinp[simp]:\n\"(empBinp %%[y1 // y]_ys) = empBinp\"", "lemmas empInp_simps =\nfreshInp_empInp swapInp_empInp psubstInp_empInp substInp_empInp vsubstInp_empInp\nfreshBinp_empBinp swapBinp_empBinp psubstBinp_empBinp substBinp_empBinp vsubstBinp_empBinp", "lemma varSortAsSort_inj_INNER: \"inj asSort\"", "lemma asSort_inj[simp]:\n\"(asSort xs = asSort ys) = (xs = ys)\"", "lemma arityOf_lt_var_INNER:\nassumes \"wlsOpS delta\"\nshows \"|{i. arityOf Delta delta i \\<noteq> None}| <o |UNIV :: 'var set|\"", "lemma barityOf_lt_var_INNER:\nassumes \"wlsOpS delta\"\nshows \"|{i. barityOf Delta delta i \\<noteq> None}| <o |UNIV :: 'var set|\"", "lemma sort_lt_var_INNER:\n\"|UNIV :: 'sort set| <o |UNIV :: 'var set|\"", "lemma sort_le_var:\n\"|UNIV :: 'sort set| \\<le>o |UNIV :: 'var set|\"", "lemma varSort_sort_lt_var:\n\"|UNIV :: ('varSort * 'sort) set| <o |UNIV :: 'var set|\"", "lemma varSort_sort_le_var:\n\"|UNIV :: ('varSort * 'sort) set| \\<le>o |UNIV :: 'var set|\"", "lemmas Var_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Var", "lemmas Op_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Op", "lemmas Abs_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Abs", "lemma barOf_isInBar[simp]:\nassumes \"wlsOpS delta\" and \"barOf delta i = Some (us,s)\"\nshows \"isInBar (us,s)\"", "lemmas Cons_preserve_wls =\nbarOf_isInBar\nVar_preserves_wls Op_preserves_wls\nAbs_preserves_wls", "lemma ParS_preserves_wls[simp]:\nassumes \"\\<And> s X. X \\<in> set (XLF s) \\<Longrightarrow> wls s X\"\nand \"\\<And> xs s A. A \\<in> set (ALF (xs,s)) \\<Longrightarrow> wlsAbs (xs,s) A\"\nand \"\\<And> rho. rho \\<in> set rhoF \\<Longrightarrow> wlsEnv rho\"\nshows \"wlsPar (ParS xLF XLF ALF rhoF)\"", "lemma termsOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"X : termsOfS P s\"\nshows \"wls s X\"", "lemma absOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"A : absOfS P (us,s)\"\nshows \"wlsAbs (us,s) A\"", "lemma envsOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"rho : envsOfS P \"\nshows \"wlsEnv rho\"", "lemma not_isInBar_absOfS_empty[simp]:\nassumes *: \"\\<not> isInBar (us,s)\" and **: \"wlsPar P\"\nshows \"absOfS P (us,s) = {}\"", "lemmas paramS_simps =\nvarsOfS.simps termsOfS.simps absOfS.simps envsOfS.simps\nParS_preserves_wls\ntermsOfS_preserves_wls absOfS_preserves_wls envsOfS_preserves_wls\nnot_isInBar_absOfS_empty", "lemma wlsInp_iff:\n\"wlsInp delta inp =\n (wlsOpS delta \\<and> sameDom (arOf delta) inp \\<and> liftAll2 wls (arOf delta) inp)\"", "lemma wlsBinp_iff:\n\"wlsBinp delta binp =\n(wlsOpS delta \\<and> sameDom (barOf delta) binp \\<and> liftAll2 wlsAbs (barOf delta) binp)\"", "lemma exists_asSort_wls:\n\"\\<exists> X. wls (asSort xs) X\"", "lemma exists_wls_imp_exists_wlsAbs:\nassumes  *: \"isInBar (us,s)\" and **: \"\\<exists> X. wls s X\"\nshows \"\\<exists> A. wlsAbs (us,s) A\"", "lemma exists_asSort_wlsAbs:\nassumes \"isInBar (us,asSort xs)\"\nshows \"\\<exists> A. wlsAbs (us,asSort xs) A\"", "lemma wf_exists_wls:\nassumes wf: \"wf R\" and *: \"\\<And>s. (\\<exists> xs. s = asSort xs) \\<or> witOpS s (f s) R\"\nshows \"\\<exists> X. wls s X\"", "lemma wf_exists_wlsAbs:\nassumes \"isInBar (us,s)\"\nand \"wf R\" and \"\\<And>s. (\\<exists> xs. s = asSort xs) \\<or> witOpS s (f s) R\"\nshows \"\\<exists> A. wlsAbs (us,s) A\"", "lemma wlsInp_empAr_empInp[simp]:\nassumes \"wlsOpS delta\" and \"arOf delta = empAr\"\nshows \"wlsInp delta empInp\"", "lemma wlsBinp_empBar_empBinp[simp]:\nassumes \"wlsOpS delta\" and \"barOf delta = empBar\"\nshows \"wlsBinp delta empBinp\"", "lemmas empInp_otherSimps =\nwlsInp_empAr_empInp wlsBinp_empBar_empBinp", "lemma wlsAll_implies_goodAll:\n\"(wls s X \\<longrightarrow> good X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> goodAbs A) \\<and>\n (wlsInp delta inp \\<longrightarrow> goodInp inp) \\<and>\n (wlsBinp delta binp \\<longrightarrow> goodBinp binp)\"", "lemma wlsEnv_imp_goodEnv[simp]: \"wlsEnv rho \\<Longrightarrow> goodEnv rho\"", "lemmas wlsAll_imp_goodAll =\nwls_imp_good wlsAbs_imp_goodAbs\nwlsInp_imp_goodInp wlsBinp_imp_goodBinp\nwlsEnv_imp_goodEnv", "lemma swapAll_pres_wlsAll:\n\"(wls s X \\<longrightarrow> wls s (X #[z1 \\<and> z2]_zs)) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> wlsAbs (xs,s') (A $[z1 \\<and> z2]_zs)) \\<and>\n (wlsInp delta inp \\<longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)) \\<and>\n (wlsBinp delta binp \\<longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs))\"", "lemma swap_preserves_wls[simp]:\n\"wls s X \\<Longrightarrow> wls s (X #[z1 \\<and> z2]_zs)\"", "lemma swap_preserves_wls2[simp]:\nassumes \"good X\"\nshows \"wls s (X #[z1 \\<and> z2]_zs) = wls s X\"", "lemma swap_preserves_wls3:\nassumes \"good X\" and \"good Y\"\nand \"(X #[x1 \\<and> x2]_xs) = (Y #[y1 \\<and> y2]_ys)\"\nshows \"wls s X = wls s Y\"", "lemma swapAbs_preserves_wls[simp]:\n\"wlsAbs (xs,x) A \\<Longrightarrow> wlsAbs (xs,x) (A $[z1 \\<and> z2]_zs)\"", "lemma swapInp_preserves_wls[simp]:\n\"wlsInp delta inp \\<Longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)\"", "lemma swapBinp_preserves_wls[simp]:\n\"wlsBinp delta binp \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\"", "lemma swapEnvDom_preserves_wls:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (swapEnvDom xs x y rho)\"", "lemma swapEnvIm_preserves_wls:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (swapEnvIm xs x y rho)\"", "lemma swapEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (rho &[z1 \\<and> z2]_zs)\"", "lemmas swapAll_preserve_wls =\nswap_preserves_wls swapAbs_preserves_wls\nswapInp_preserves_wls swapBinp_preserves_wls\nswapEnv_preserves_wls", "lemma swapped_preserves_wls:\nassumes \"wls s X\" and \"(X,Y) \\<in> swapped\"\nshows \"wls s Y\"", "lemma wlsAll_inversion:\n\"(wls s X \\<longrightarrow>\n  (\\<forall> xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n                     stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp))\n\\<and>\n(wlsAbs xs_s A \\<longrightarrow>\n isInBar xs_s \\<and>\n (\\<forall> x X. good X \\<and> A = Abs (fst xs_s) x X \\<longrightarrow>\n         wls (snd xs_s) X))\n\\<and>\n(wlsInp delta inp \\<longrightarrow> True)\n\\<and>\n(wlsBinp delta binp \\<longrightarrow> True)\"", "lemma conjLeft: \"\\<lbrakk>phi1 \\<and> phi2; phi1 \\<Longrightarrow> chi\\<rbrakk> \\<Longrightarrow> chi\"", "lemma conjRight: \"\\<lbrakk>phi1 \\<and> phi2; phi2 \\<Longrightarrow> chi\\<rbrakk> \\<Longrightarrow> chi\"", "lemma wls_inversion[rule_format]:\n\"wls s X \\<longrightarrow>\n (\\<forall> xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n (\\<forall> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n                    stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\"", "lemma wlsAbs_inversion[rule_format]:\n\"wlsAbs (xs,s) A \\<longrightarrow>\n isInBar (xs,s) \\<and>\n (\\<forall> x X. good X \\<and> A = Abs xs x X \\<longrightarrow> wls s X)\"", "lemma wls_Var_simp[simp]:\n\"wls s (Var xs x) =  (s = asSort xs)\"", "lemma wls_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"wls s (Op delta inp binp) =\n (stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\"", "lemma wls_Abs_simp[simp]:\nassumes \"good X\"\nshows \"wlsAbs (xs,s) (Abs xs x X) = (isInBar (xs,s) \\<and> wls s X)\"", "lemma wlsAll_inversion2:\n\"(wls s X \\<longrightarrow> True)\n\\<and>\n(wlsAbs xs_s A \\<longrightarrow>\n isInBar xs_s \\<and>\n (\\<exists> x X. wls (snd xs_s) X \\<and> A = Abs (fst xs_s) x X))\n\\<and>\n(wlsInp delta inp \\<longrightarrow> True)\n\\<and>\n(wlsBinp delta binp \\<longrightarrow> True)\"", "lemma wlsAbs_inversion2[rule_format]:\n\"wlsAbs (xs,s) A \\<longrightarrow>\n isInBar (xs,s) \\<and> (\\<exists> x X. wls s X \\<and> A = Abs xs x X)\"", "lemma wlsAbs:\n\"wlsAbs (xs,s) A \\<longleftrightarrow> \n isInBar (xs,s) \\<and> (\\<exists> x X. wls s X \\<and> A = Abs xs x X)\"", "lemma wlsAbs_Abs[simp]:\nassumes X: \"good X\"\nshows \"wlsAbs (xs',s) (Abs xs x X) = (isInBar (xs',s) \\<and> xs = xs' \\<and> wls s X)\"", "lemmas Cons_wls_simps =\nwls_Var_simp wls_Op_simp wls_Abs_simp wlsAbs_Abs", "theorem wls_templateInduct[case_names rel Var Op Abs]:\nassumes\nrel: \"\\<And> s X Y. \\<lbrakk>wls s X;  (X,Y) \\<in> rel s\\<rbrakk> \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp;  wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X; \\<And> Y. (X,Y) \\<in> rel s \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_rawInduct[case_names Var Op Abs]:\nassumes\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp;  wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs: \"\\<And> s xs x X. \\<lbrakk>isInBar (xs,s); wls s X; phi s X\\<rbrakk> \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_templateInduct_fresh[case_names Par Rel Var Op Abs]:\nfixes s X xs s' A phi phiAbs rel\nand vars :: \"'varSort \\<Rightarrow> 'var set\"\nand terms :: \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\"\nand abs :: \"('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\"\nand envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs us s.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms s| <o |UNIV :: 'var set| \\<or> finite (terms s)) \\<and>\n   ( |abs (us,s)| <o |UNIV :: 'var set| \\<or> finite (abs (us,s))) \\<and>\n   (\\<forall> X \\<in> terms s. wls s X) \\<and>\n   (\\<forall> A \\<in> abs (us,s). wlsAbs (us,s) A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite (envs)) \\<and>\n   (\\<forall> rho \\<in> envs. wlsEnv rho)\" and\nrel: \"\\<And> s X Y. \\<lbrakk>wls s X;  (X,Y) \\<in> rel s\\<rbrakk> \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n    \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n     liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n     liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n    \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> vars xs;\n    \\<And> s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> xs' s' A. A \\<in> abs (xs',s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n    \\<And> Y. (X,Y) \\<in> rel s \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_rawInduct_fresh[case_names Par Var Op Abs]:\nfixes s X xs s' A phi phiAbs\nand vars :: \"'varSort \\<Rightarrow> 'var set\"\nand terms :: \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\"\nand abs :: \"('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\"\nand envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs us s.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms s| <o |UNIV :: 'var set| \\<or> finite (terms s)) \\<and>\n   (\\<forall> X \\<in> terms s. wls s X) \\<and>\n   ( |abs (us,s)| <o |UNIV :: 'var set| \\<or> finite (abs (us,s))) \\<and>\n   (\\<forall> A \\<in> abs (us,s). wlsAbs (us,s) A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite (envs)) \\<and>\n   (\\<forall> rho \\<in> envs. wlsEnv rho)\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n    liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> vars xs;\n    \\<And> s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> us s' A. A \\<in> abs (us,s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n    phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_induct_fresh[case_names Par Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and s and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and xs s' and\n      P :: \"('index,'bindex,'varSort,'var,'opSym,'sort)paramS\" and phi phiAbs\nassumes\nP: \"wlsPar P\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n    liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> varsOfS P xs;\n    \\<And> s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> us s' A. A \\<in> absOfS P (us,s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n    phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_Op_inj[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nand \"wlsInp delta' inp'\" and \"wlsBinp delta' binp'\"\nshows\n\"(Op delta inp binp = Op delta' inp' binp') =\n (delta = delta' \\<and> inp = inp' \\<and> binp = binp')\"", "lemma wls_Abs_ainj_all:\nassumes \"wls s X\" and \"wls s' X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\"", "theorem wls_Abs_swap_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs))\"", "lemma wls_Abs_ainj_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\"", "theorem wls_Abs_swap_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n       (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs))\"", "theorem wls_Abs_inj[simp]:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x X') =\n (X = X')\"", "theorem wls_Abs_swap_cong[fundef_cong]:\nassumes \"wls s X\" and \"wls s X'\"\nand \"fresh xs y X\" and \"fresh xs y X'\"  and \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\"", "theorem wls_Abs_swap_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (X #[x' \\<and> x]_xs) = Abs xs x X\"", "theorem wls_Var_diff_Op[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"Var xs x \\<noteq> Op delta inp binp\"", "theorem wls_Op_diff_Var[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"Op delta inp binp \\<noteq> Var xs x\"", "theorem wls_nchotomy:\nassumes \"wls s X\"\nshows\n\"(\\<exists> xs x. asSort xs = s \\<and> X = Var xs x) \\<or>\n (\\<exists> delta inp binp. stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp\n                    \\<and> X = Op delta inp binp)\"", "lemmas wls_cases = wls_wlsAbs_wlsInp_wlsBinp.inducts(1)", "lemmas wlsAbs_nchotomy = wlsAbs_inversion2", "theorem wlsAbs_cases:\nassumes \"wlsAbs (xs,s) A\"\nand \"\\<And> x X. \\<lbrakk>isInBar (xs,s); wls s X\\<rbrakk> \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows \"phiAbs (xs,s) A\"", "lemma wls_disjoint:\nassumes \"wls s X\" and \"wls s' X\"\nshows \"s = s'\"", "lemma wlsAbs_disjoint:\nassumes \"wlsAbs (xs,s) A\" and \"wlsAbs (xs',s') A\"\nshows \"xs = xs' \\<and> s = s'\"", "lemmas wls_freeCons =\nVar_inj wls_Op_inj wls_Var_diff_Op wls_Op_diff_Var wls_Abs_swap_fresh", "lemma idEnv_preserves_wls[simp]:\n\"wlsEnv idEnv\"", "lemma updEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort xs) X\"\nshows \"wlsEnv (rho [x \\<leftarrow> X]_xs)\"", "lemma getEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = Some X\"\nshows \"wls (asSort xs) X\"", "lemmas envOps_preserve_wls =\nidEnv_preserves_wls updEnv_preserves_wls\ngetEnv_preserves_wls", "lemma psubstAll_preserves_wlsAll:\nassumes P: \"wlsPar P\"\nshows\n\"(wls s X \\<longrightarrow> (\\<forall> rho \\<in> envsOfS P. wls s (X #[rho]))) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> (\\<forall> rho \\<in> envsOfS P. wlsAbs (xs,s') (A $[rho])))\"", "lemma psubst_preserves_wls[simp]:\n\"\\<lbrakk>wls s X; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wls s (X #[rho])\"", "lemma psubstAbs_preserves_wls[simp]:\n\"\\<lbrakk>wlsAbs (xs,s) A; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wlsAbs (xs,s) (A $[rho])\"", "lemma psubstInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\" and \"wlsEnv rho\"\nshows \"wlsInp delta (inp %[rho])\"", "lemma psubstBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\" and \"wlsEnv rho\"\nshows \"wlsBinp delta (binp %%[rho])\"", "lemma psubstEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"wlsEnv (rho &[rho'])\"", "lemmas psubstAll_preserve_wls =\npsubst_preserves_wls psubstAbs_preserves_wls\npsubstInp_preserves_wls psubstBinp_preserves_wls\npsubstEnv_preserves_wls", "lemma subst_preserves_wls[simp]:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"wls s (X #[Y / y]_ys)\"", "lemma substAbs_preserves_wls[simp]:\nassumes \"wlsAbs (xs,s) A\" and \"wls (asSort ys) Y\"\nshows \"wlsAbs (xs,s) (A $[Y / y]_ys)\"", "lemma substInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\" and \"wls (asSort ys) Y\"\nshows \"wlsInp delta (inp %[Y / y]_ys)\"", "lemma substBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\" and \"wls (asSort ys) Y\"\nshows \"wlsBinp delta (binp %%[Y / y]_ys)\"", "lemma substEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nshows \"wlsEnv (rho &[Y / y]_ys)\"", "lemmas substAll_preserve_wls =\nsubst_preserves_wls substAbs_preserves_wls\nsubstInp_preserves_wls substBinp_preserves_wls\nsubstEnv_preserves_wls", "lemma vsubst_preserves_wls[simp]:\nassumes \"wls s Y\"\nshows \"wls s (Y #[x1 // x]_xs)\"", "lemma vsubstAbs_preserves_wls[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"wlsAbs (us,s) (A $[x1 // x]_xs)\"", "lemma vsubstInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\"\nshows \"wlsInp delta (inp %[x1 // x]_xs)\"", "lemma vsubstBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\"\nshows \"wlsBinp delta (binp %%[x1 // x]_xs)\"", "lemma vsubstEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (rho &[x1 // x]_xs)\"", "lemmas vsubstAll_preserve_wls = vsubst_preserves_wls vsubstAbs_preserves_wls\nvsubstInp_preserves_wls vsubstBinp_preserves_wls vsubstEnv_preserves_wls", "lemmas all_preserve_wls = Cons_preserve_wls swapAll_preserve_wls psubstAll_preserve_wls envOps_preserve_wls\nsubstAll_preserve_wls vsubstAll_preserve_wls", "theorem wls_swap_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[x1 \\<and> x2]_xs) =\n Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)\"", "theorem wls_swapAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"((Abs xs x X) $[y1 \\<and> y2]_ys) = Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)\"", "lemmas wls_swapAll_simps =\nswap_Var_simp wls_swap_Op_simp wls_swapAbs_simp", "theorem wls_fresh_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"fresh xs x (Op delta inp binp) =\n (freshInp xs x inp \\<and> freshBinp xs x binp)\"", "theorem wls_freshAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)\"", "lemmas wls_freshAll_simps =\nfresh_Var_simp wls_fresh_Op_simp wls_freshAbs_simp", "theorem wls_skel_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)\"", "lemma wls_skelInp_def2:\nassumes \"wlsInp delta inp\"\nshows \"skelInp inp = lift skel inp\"", "lemma wls_skelBinp_def2:\nassumes \"wlsBinp delta binp\"\nshows \"skelBinp binp = lift skelAbs binp\"", "theorem wls_skelAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty\"", "lemmas wls_skelAll_simps =\nskel_Var_simp wls_skel_Op_simp wls_skelAbs_simp", "theorem wls_psubst_Var_simp1[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = None\"\nshows \"((Var xs x) #[rho]) = Var xs x\"", "theorem wls_psubst_Var_simp2[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = Some X\"\nshows \"((Var xs x) #[rho]) = X\"", "theorem wls_psubst_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\" and \"wlsEnv rho\"\nshows\n\"((Op delta inp binp) #[rho]) = Op delta (inp %[rho]) (binp %%[rho])\"", "theorem wls_psubstAbs_simp[simp]:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"freshEnv xs x rho\"\nshows \"((Abs xs x X) $[rho]) = Abs xs x (X #[rho])\"", "lemmas wls_psubstAll_simps =\nwls_psubst_Var_simp1 wls_psubst_Var_simp2 wls_psubst_Op_simp wls_psubstAbs_simp", "lemmas wls_envOps_simps =\ngetEnv_idEnv getEnv_updEnv1 getEnv_updEnv2", "theorem wls_subst_Var_simp1[simp]:\nassumes \"wls (asSort ys) Y\"\nand \"ys \\<noteq> xs \\<or> y \\<noteq> x \"\nshows \"((Var xs x) #[Y / y]_ys) = Var xs x\"", "theorem wls_subst_Var_simp2[simp]:\nassumes \"wls (asSort xs) Y\"\nshows \"((Var xs x) #[Y / x]_xs) = Y\"", "theorem wls_subst_Op_simp[simp]:\nassumes \"wls (asSort ys) Y\"\n and \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[Y / y]_ys) =\n Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)\"", "theorem wls_substAbs_simp[simp]:\nassumes \"wls (asSort ys) Y\"\nand \"wls s X\" and \"xs \\<noteq> ys \\<or> x \\<noteq> y\" and \"fresh xs x Y\"\nshows \"((Abs xs x X) $[Y / y]_ys) = Abs xs x (X #[Y / y]_ys)\"", "lemmas wls_substAll_simps =\nwls_subst_Var_simp1 wls_subst_Var_simp2 wls_subst_Op_simp wls_substAbs_simp", "theorem wls_vsubst_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[y1 // y]_ys) =\n Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)\"", "theorem wls_vsubstAbs_simp[simp]:\nassumes \"wls s X\" and\n        \"xs \\<noteq> ys \\<or> x \\<notin> {y,y1}\"\nshows \"((Abs xs x X) $[y1 // y]_ys) = Abs xs x (X #[y1 // y]_ys)\"", "lemmas wls_vsubstAll_simps =\nvsubst_Var_simp wls_vsubst_Op_simp wls_vsubstAbs_simp", "theorem wls_swapped_skel:\nassumes \"wls s X\" and \"(X,Y) \\<in> swapped\"\nshows \"skel Y = skel X\"", "theorem wls_obtain_rep:\nassumes \"wls s X\" and FRESH: \"fresh xs x' X\"\nshows \"\\<exists> X'. skel X' = skel X \\<and> (X,X') \\<in> swapped \\<and> wls s X' \\<and> Abs xs x X = Abs xs x' X'\"", "lemmas wls_allOpers_simps =\nwls_swapAll_simps\nwls_freshAll_simps\nwls_skelAll_simps\nwls_envOps_simps\nwls_psubstAll_simps\nwls_substAll_simps\nwls_vsubstAll_simps", "theorem wls_single_non_fresh_ordLess_var:\n\"wls s X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV :: 'var set|\"", "theorem wls_single_non_freshAbs_ordLess_var:\n\"wlsAbs (us,s) A \\<Longrightarrow> |{x. \\<not> freshAbs xs x A}| <o |UNIV :: 'var set|\"", "theorem wls_obtain_fresh:\nfixes V::\"'varSort \\<Rightarrow> 'var set\" and\n      XS::\"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\" and\n      AS::\"'varSort \\<Rightarrow> 'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\" and zs\nassumes VVar: \"\\<forall> xs. |V xs| <o |UNIV :: 'var set| \\<or> finite (V xs)\"\nand XSVar: \"\\<forall> s. |XS s| <o |UNIV :: 'var set| \\<or> finite (XS s)\"\nand ASVar: \"\\<forall> xs s. |AS xs s| <o |UNIV :: 'var set| \\<or> finite (AS xs s)\"\nand XSwls: \"\\<forall> s. \\<forall> X \\<in> XS s. wls s X\"\nand ASwls: \"\\<forall> xs s. \\<forall> A \\<in> AS xs s. wlsAbs (xs,s) A\"\nand RhoVar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\"\nand Rhowls: \"\\<forall> rho \\<in> Rho. wlsEnv rho\"\nshows\n\"\\<exists> z. (\\<forall> xs. z \\<notin> V xs) \\<and>\n      (\\<forall> s. \\<forall> X \\<in> XS s. fresh zs z X) \\<and>\n      (\\<forall> xs s. \\<forall> A \\<in> AS xs s. freshAbs zs z A) \\<and>\n      (\\<forall> rho \\<in> Rho. freshEnv zs z rho)\"", "theorem wls_obtain_fresh_paramS:\nassumes \"wlsPar P\"\nshows\n\"\\<exists> z.\n (\\<forall> xs. z \\<notin> varsOfS P xs) \\<and>\n (\\<forall> s. \\<forall> X \\<in> termsOfS P s. fresh zs z X) \\<and>\n (\\<forall> us s. \\<forall> A \\<in> absOfS P (us,s). freshAbs zs z A) \\<and>\n (\\<forall> rho \\<in> envsOfS P. freshEnv zs z rho)\"", "lemma wlsAbs_freshAbs_nchotomy:\nassumes A: \"wlsAbs (xs,s) A\" and fresh: \"freshAbs xs x A\"\nshows \"\\<exists> X. wls s X \\<and> A = Abs xs x X\"", "theorem wlsAbs_fresh_nchotomy:\nassumes A: \"wlsAbs (xs,s) A\" and P: \"wlsPar P\"\nshows \"\\<exists> x X. A = Abs xs x X \\<and>\n               wls s X \\<and>\n               (\\<forall> ys. x \\<notin> varsOfS P ys) \\<and>\n               (\\<forall> s'. \\<forall> Y \\<in> termsOfS P s'. fresh xs x Y) \\<and>\n               (\\<forall> us s'. \\<forall> B \\<in> absOfS P (us,s'). freshAbs xs x B) \\<and>\n               (\\<forall> rho \\<in> envsOfS P. freshEnv xs x rho)\"", "theorem wlsAbs_fresh_cases:\nassumes \"wlsAbs (xs,s) A\" and \"wlsPar P\"\nand \"\\<And> x X.\n          \\<lbrakk>wls s X;\n           \\<And> ys. x \\<notin> varsOfS P ys;\n           \\<And> s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n           \\<And> us s' B. B \\<in> absOfS P (us,s') \\<Longrightarrow> freshAbs xs x B;\n           \\<And> rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho\\<rbrakk>\n           \\<Longrightarrow> phi (xs,s) (Abs xs x X) P\"\nshows \"phi (xs,s) A P\"", "theorem wls_swap_ident[simp]:\nassumes \"wls s X\"\nshows \"(X #[x \\<and> x]_xs) = X\"", "theorem wls_swap_compose:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') =\n       ((X #[x' \\<and> y']_zs') #[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\"", "theorem wls_swap_commute:\n\"\\<lbrakk>wls s X; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = ((X #[x' \\<and> y']_zs') #[x \\<and> y]_zs)\"", "theorem wls_swap_involutive[simp]:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[x \\<and> y]_zs) = X\"", "theorem wls_swap_inj[simp]:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"((X #[x \\<and> y]_zs) = (X' #[x \\<and> y]_zs)) =\n (X = X')\"", "theorem wls_swap_involutive2[simp]:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[y \\<and> x]_zs) = X\"", "theorem wls_swap_preserves_fresh[simp]:\nassumes \"wls s X\"\nshows \"fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X\"", "theorem wls_swap_preserves_fresh_distinct:\nassumes \"wls s X\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X\"", "theorem wls_fresh_swap_exchange1:\nassumes \"wls s X\"\nshows \"fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X\"", "theorem wls_fresh_swap_exchange2:\nassumes \"wls s X\"\nshows \"fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X\"", "theorem wls_fresh_swap_id[simp]:\nassumes \"wls s X\" and \"fresh xs x1 X\"  and \"fresh xs x2 X\"\nshows \"(X #[x1 \\<and> x2]_xs) = X\"", "theorem wls_fresh_swap_compose:\nassumes \"wls s X\" and \"fresh xs y X\"  and \"fresh xs z X\"\nshows \"((X #[y \\<and> x]_xs) #[z \\<and> y]_xs) = (X #[z \\<and> x]_xs)\"", "theorem wls_skel_swap:\nassumes \"wls s X\"\nshows \"skel (X #[x1 \\<and> x2]_xs) = skel X\"", "theorem wls_swapEnv_ident[simp]:\nassumes \"wlsEnv rho\"\nshows \"(rho &[x \\<and> x]_xs) = rho\"", "theorem wls_swapEnv_compose:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') =\n       ((rho &[x' \\<and> y']_zs') &[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\"", "theorem wls_swapEnv_commute:\n\"\\<lbrakk>wlsEnv rho; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') = ((rho &[x' \\<and> y']_zs') &[x \\<and> y]_zs)\"", "theorem wls_swapEnv_involutive[simp]:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x \\<and> y]_zs) = rho\"", "theorem wls_swapEnv_inj[simp]:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows\n\"((rho &[x \\<and> y]_zs) = (rho' &[x \\<and> y]_zs)) =\n (rho = rho')\"", "theorem wls_swapEnv_involutive2[simp]:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[y \\<and> x]_zs) = rho\"", "theorem wls_swapEnv_preserves_freshEnv[simp]:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\"", "theorem wls_swapEnv_preserves_freshEnv_distinct:\nassumes \"wlsEnv rho\"\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\"", "theorem wls_freshEnv_swapEnv_exchange1:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho\"", "theorem wls_freshEnv_swapEnv_exchange2:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho\"", "theorem wls_freshEnv_swapEnv_id[simp]:\nassumes \"wlsEnv rho\" and \"freshEnv xs x1 rho\" and \"freshEnv xs x2 rho\"\nshows \"(rho &[x1 \\<and> x2]_xs) = rho\"", "theorem wls_freshEnv_swapEnv_compose:\nassumes \"wlsEnv rho\" and \"freshEnv xs y rho\" and \"freshEnv xs z rho\"\nshows \"((rho &[y \\<and> x]_xs) &[z \\<and> y]_xs) = (rho &[z \\<and> x]_xs)\"", "theorem wls_swapAbs_ident[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[x \\<and> x]_xs) = A\"", "theorem wls_swapAbs_compose:\n\"wlsAbs (us,s) A \\<Longrightarrow>\n ((A $[x \\<and> y]_zs) $[x' \\<and> y']_zs') =\n ((A $[x' \\<and> y']_zs') $[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\"", "theorem wls_swapAbs_commute:\nassumes \"zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\"\nshows\n\"wlsAbs (us,s) A \\<Longrightarrow>\n ((A $[x \\<and> y]_zs) $[x' \\<and> y']_zs') = ((A $[x' \\<and> y']_zs') $[x \\<and> y]_zs)\"", "theorem wls_swapAbs_involutive[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> ((A $[x \\<and> y]_zs) $[x \\<and> y]_zs) = A\"", "theorem wls_swapAbs_sym:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[x \\<and> y]_zs) = (A $[y \\<and> x]_zs)\"", "theorem wls_swapAbs_inj[simp]:\nassumes \"wlsAbs (us,s) A\" and \"wlsAbs (us,s) A'\"\nshows\n\"((A $[x \\<and> y]_zs) = (A' $[x \\<and> y]_zs)) =\n (A = A')\"", "theorem wls_swapAbs_involutive2[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> ((A $[x \\<and> y]_zs) $[y \\<and> x]_zs) = A\"", "theorem wls_swapAbs_preserves_freshAbs[simp]:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs (x @xs[y1 \\<and> y2]_ys) (A $[y1 \\<and> y2]_ys) = freshAbs xs x A\"", "theorem wls_swapAbs_preserves_freshAbs_distinct:\n\"\\<lbrakk>wlsAbs (us,s) A; xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\\<rbrakk>\n \\<Longrightarrow> freshAbs xs x (A $[y1 \\<and> y2]_ys) = freshAbs xs x A\"", "theorem wls_freshAbs_swapAbs_exchange1:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs x2 (A $[x1 \\<and> x2]_xs) = freshAbs xs x1 A\"", "theorem wls_freshAbs_swapAbs_exchange2:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs x2 (A $[x2 \\<and> x1]_xs) = freshAbs xs x1 A\"", "theorem wls_freshAbs_swapAbs_id[simp]:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs xs x1 A\" and \"freshAbs xs x2 A\"\nshows \"(A $[x1 \\<and> x2]_xs) = A\"", "lemma wls_freshAbs_swapAbs_compose_aux:\n\"\\<lbrakk>wlsAbs (us,s) A; wlsPar P\\<rbrakk> \\<Longrightarrow>\n \\<forall> x y z. {x,y,z} \\<subseteq> varsOfS P xs \\<and> freshAbs xs y A \\<and> freshAbs xs z A \\<longrightarrow>\n           ((A $[y \\<and> x]_xs) $[z \\<and> y]_xs) = (A $[z \\<and> x]_xs)\"", "theorem wls_freshAbs_swapAbs_compose:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs xs y A\"  and \"freshAbs xs z A\"\nshows \"((A $[y \\<and> x]_xs) $[z \\<and> y]_xs) = (A $[z \\<and> x]_xs)\"", "theorem wls_skelAbs_swapAbs:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> skelAbs (A $[x1 \\<and> x2]_xs) = skelAbs A\"", "lemmas wls_swapAll_freshAll_otherSimps =\nwls_swap_ident wls_swap_involutive wls_swap_inj wls_swap_involutive2 wls_swap_preserves_fresh wls_fresh_swap_id\n\nwls_swapAbs_ident wls_swapAbs_involutive wls_swapAbs_inj wls_swapAbs_involutive2 wls_swapAbs_preserves_freshAbs\nwls_freshAbs_swapAbs_id\n\nwls_swapEnv_ident wls_swapEnv_involutive wls_swapEnv_inj wls_swapEnv_involutive2 wls_swapEnv_preserves_freshEnv\nwls_freshEnv_swapEnv_id", "theorem wls_psubst_idEnv[simp]:\n\"wls s X \\<Longrightarrow> (X #[idEnv]) = X\"", "theorem wls_psubstEnv_idEnv_id[simp]:\n\"wlsEnv rho \\<Longrightarrow> (rho &[idEnv]) = rho\"", "theorem wls_swapEnv_updEnv_fresh:\nassumes \"zs \\<noteq> ys \\<or> y \\<notin> {z1,z2}\" and \"wls (asSort ys) Y\"\nand \"fresh zs z1 Y\" and \"fresh zs z2 Y\"\nshows \"((rho [y \\<leftarrow> Y]_ys) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) [y \\<leftarrow> Y]_ys)\"", "theorem wls_fresh_psubst:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows\n\"fresh zs z (X #[rho]) =\n (\\<forall> ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)\"", "theorem wls_fresh_psubst_E1:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho ys y = None\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\"", "theorem wls_fresh_psubst_E2:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho ys y = Some Y\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> fresh zs z Y\"", "theorem wls_fresh_psubst_I1:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"fresh zs z X\" and \"freshEnv zs z rho\"\nshows \"fresh zs z (X #[rho])\"", "theorem wls_psubstEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nand fresh: \"freshEnv zs z rho\"  \"freshEnv zs z rho'\"\nshows \"freshEnv zs z (rho &[rho'])\"", "theorem wls_fresh_psubst_I:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> fresh zs z X\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> fresh ys y X \\<or> fresh zs z Y\"\nshows \"fresh zs z (X #[rho])\"", "theorem wls_fresh_subst:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"fresh zs z (X #[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> fresh zs z Y))\"", "theorem wls_fresh_vsubst:\nassumes \"wls s X\"\nshows \"fresh zs z (X #[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\"", "theorem wls_subst_preserves_fresh:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z X\" and \"fresh zs z Y\"\nshows \"fresh zs z (X #[Y / y]_ys)\"", "theorem wls_substEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"freshEnv zs z rho\" and \"fresh zs z Y\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\"", "theorem wls_vsubst_preserves_fresh:\nassumes \"wls s X\"\nand \"fresh zs z X\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"fresh zs z (X #[y1 // y]_ys)\"", "theorem wls_vsubstEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\"\nand \"freshEnv zs z rho\" and \"zs \\<noteq> ys \\<or> z \\<notin> {y,y1}\"\nshows \"freshEnv zs z (rho &[y1 // y]_ys)\"", "theorem wls_fresh_fresh_subst[simp]:\nassumes \"wls (asSort ys) Y\" and \"wls s  X\"\nand \"fresh ys y Y\"\nshows \"fresh ys y (X #[Y / y]_ys)\"", "theorem wls_diff_fresh_vsubst[simp]:\nassumes \"wls s X\"\nand \"y \\<noteq> y1\"\nshows \"fresh ys y (X #[y1 // y]_ys)\"", "theorem wls_fresh_subst_E1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z (X #[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\"", "theorem wls_fresh_vsubst_E1:\nassumes \"wls s X\"\nand \"fresh zs z (X #[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\"", "theorem wls_fresh_subst_E2:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z (X #[Y / y]_ys)\"\nshows \"fresh ys y X \\<or> fresh zs z Y\"", "theorem wls_fresh_vsubst_E2:\nassumes \"wls s X\"\nand \"fresh zs z (X #[y1 // y]_ys)\"\nshows \"fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\"", "theorem wls_psubst_cong[fundef_cong]:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nand \"\\<And> ys y. fresh ys y X \\<or> rho ys y = rho' ys y\"\nshows \"(X #[rho]) = (X #[rho'])\"", "theorem wls_fresh_psubst_updEnv:\nassumes \"wls (asSort ys) Y\" and \"wls s X\" and \"wlsEnv rho\"\nand \"fresh ys y X\"\nshows \"(X #[rho [y \\<leftarrow> Y]_ys]) = (X #[rho])\"", "theorem wls_freshEnv_psubst_ident[simp]:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> fresh zs z X\"\nshows \"(X #[rho]) = X\"", "theorem wls_fresh_subst_ident[simp]:\nassumes \"wls (asSort ys) Y\" and \"wls s X\" and \"fresh ys y X\"\nshows \"(X #[Y / y]_ys) = X\"", "theorem wls_substEnv_updEnv_fresh:\nassumes \"wls (asSort xs) X\" and \"wls (asSort ys) Y\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[Y / y]_ys) = ((rho &[Y / y]_ys) [x \\<leftarrow> X]_xs)\"", "theorem wls_fresh_substEnv_updEnv[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"freshEnv ys y rho\"\nshows \"(rho &[Y / y]_ys) = (rho [y \\<leftarrow> Y]_ys)\"", "theorem wls_fresh_vsubst_ident[simp]:\nassumes \"wls s X\" and \"fresh ys y X\"\nshows \"(X #[y1 // y]_ys) = X\"", "theorem wls_vsubstEnv_updEnv_fresh:\nassumes \"wls s X\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[y1 // y]_ys) = ((rho &[y1 // y]_ys) [x \\<leftarrow> X]_xs)\"", "theorem wls_fresh_vsubstEnv_updEnv[simp]:\nassumes \"wlsEnv rho\"\nand \"freshEnv ys y rho\"\nshows \"(rho &[y1 // y]_ys) = (rho [y \\<leftarrow> Var ys y1]_ys)\"", "theorem wls_swap_psubst:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])\"", "theorem wls_swap_subst:\nassumes \"wls s  X\" and \"wls (asSort ys) Y\"\nshows \"((X #[Y / y]_ys) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_swap_vsubst:\nassumes \"wls s X\"\nshows \"((X #[y1 // y]_ys) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_swapEnv_psubstEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) &[rho' &[z1 \\<and> z2]_zs])\"", "theorem wls_swapEnv_substEnv:\nassumes \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((rho &[Y / y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_swapEnv_vsubstEnv:\nassumes \"wlsEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_psubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((X #[rho]) #[rho']) = (X #[(rho &[rho'])])\"", "theorem wls_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\" and \"wlsEnv rho''\"\nshows \"((rho &[rho']) &[rho'']) = (rho &[(rho' &[rho''])])\"", "theorem wls_psubst_subst_compose:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\"", "theorem wls_psubst_subst_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wls s X\" and \"wls (asSort ys) Y\"\nand \"freshEnv ys y rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = ((X #[rho]) #[(Y #[rho]) / y]_ys)\"", "theorem wls_psubstEnv_substEnv_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\" and \"wls (asSort ys) Y\"\nassumes \"freshEnv ys y rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = ((rho &[rho']) &[(Y #[rho']) / y]_ys)\"", "theorem wls_psubstEnv_substEnv_compose:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wlsEnv rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> (Y #[rho'])]_ys)])\"", "theorem wls_psubst_vsubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[y1 // y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\"", "theorem wls_psubstEnv_vsubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[y1 // y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> ((Var ys y1) #[rho'])]_ys)])\"", "theorem wls_subst_psubst_compose:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[Y / y]_ys) = (X #[(rho &[Y / y]_ys)])\"", "theorem wls_substEnv_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[Y / y]_ys) = (rho &[(rho' &[Y / y]_ys)])\"", "theorem wls_vsubst_psubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[y1 // y]_ys) = (X #[(rho &[y1 // y]_ys)])\"", "theorem wls_vsubstEnv_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[y1 // y]_ys) = (rho &[(rho' &[y1 // y]_ys)])\"", "theorem wls_subst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((X #[Y1 / y]_ys) #[Y2 / y]_ys) = (X #[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "theorem wls_substEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((rho &[Y1 / y]_ys) &[Y2 / y]_ys) = (rho &[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "theorem wls_subst_vsubst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((X #[y1 // y]_ys) #[Y / y]_ys) = (X #[y1 // y]_ys)\"", "theorem wls_substEnv_vsubstEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((rho &[y1 // y]_ys) &[Y / y]_ys) = (rho &[y1 // y]_ys)\"", "theorem wls_vsubst_subst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"((X #[Y / y]_ys) #[y1 // y]_ys) = (X #[(Y #[y1 // y]_ys) / y]_ys)\"", "theorem wls_vsubstEnv_substEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nshows \"((rho &[Y / y]_ys) &[y1 // y]_ys) = (rho &[(Y #[y1 // y]_ys) / y]_ys)\"", "theorem wls_vsubst_compose1:\nassumes \"wls s X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y]_ys) = (X #[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "theorem wls_vsubstEnv_compose1:\nassumes \"wlsEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[y2 // y]_ys) = (rho &[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "theorem wls_subst_compose2:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[Y / y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[(Y #[Z / z]_zs) / y]_ys)\"", "theorem wls_substEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[Y / y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[(Y #[Z / z]_zs) / y]_ys)\"", "theorem wls_subst_vsubst_compose2:\nassumes  \"wls s X\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[y1 // y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "theorem wls_substEnv_vsubstEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[y1 // y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "theorem wls_vsubst_subst_compose2:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[Y / y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(Y #[z1 // z]_zs) / y]_ys)\"", "theorem wls_vsubstEnv_substEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[Y / y]_ys) &[z1 // z]_zs) = ((rho &[z1 // z]_zs) &[(Y #[z1 // z]_zs) / y]_ys)\"", "theorem wls_vsubst_compose2:\nassumes  \"wls s X\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[y1 // y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "theorem wls_vsubstEnv_compose2:\nassumes  \"wlsEnv rho\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[y1 // y]_ys) &[z1 // z]_zs) =\n       ((rho &[z1 // z]_zs) &[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "theorem wls_vsubst_ident[simp]:\nassumes \"wls s X\"\nshows \"(X #[z // z]_zs) = X\"", "theorem wls_subst_ident[simp]:\nassumes \"wls s  X\"\nshows \"(X #[(Var zs z) / z]_zs) = X\"", "theorem wls_vsubst_eq_swap:\nassumes \"wls s X\" and \"y1 = y2 \\<or> fresh ys y1 X\"\nshows \"(X #[y1 // y2]_ys) = (X #[y1 \\<and> y2]_ys)\"", "theorem wls_skel_vsubst:\nassumes \"wls s X\"\nshows \"skel (X #[y1 // y2]_ys) = skel X\"", "theorem wls_subst_vsubst_trans:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[Y / y1]_ys) = (X #[Y / y]_ys)\"", "theorem wls_vsubst_trans:\nassumes  \"wls s X\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y1]_ys) = (X #[y2 // y]_ys)\"", "theorem wls_vsubst_commute:\nassumes \"wls s X\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"fresh xs x X\" and \"fresh xs' x' X\"\nshows \"((X #[x // y]_xs) #[x' // y']_xs') = ((X #[x' // y']_xs') #[x // y]_xs)\"", "theorem wls_induct[case_names Var Op Abs]:\nassumes\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    \\<And> Y. (X,Y) \\<in> swapped \\<Longrightarrow> phi s Y;\n    \\<And> ys y1 y2. phi s (X #[y1 // y2]_ys);\n    \\<And> Y. \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk> \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\"", "theorem wls_Abs_vsubst_all_aux:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       (X #[y // x]_xs) = (X' #[y // x']_xs))\"", "theorem wls_Abs_vsubst_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n       (X #[y // x]_xs) = (X' #[y // x']_xs))\"", "theorem wls_Abs_vsubst_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (X #[y // x]_xs) = (X' #[y // x']_xs))\"", "theorem wls_Abs_subst_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> Y. wls (asSort xs) Y \\<longrightarrow> (X #[Y / x]_xs) = (X' #[Y / x']_xs))\"", "lemma Abs_inj_fresh[simp]:\nassumes X: \"wls s X\" and X': \"wls s X'\"\nand fresh_X: \"fresh ys x X\" and fresh_X': \"fresh ys x' X'\"\nand eq: \"Abs ys x X = Abs ys x' X'\"\nshows \"X = X'\"", "theorem wls_Abs_vsubst_cong:\nassumes \"wls s X\" and \"wls s X'\"\nand \"fresh xs y X\" and \"fresh xs y X'\"  and \"(X #[y // x]_xs) = (X' #[y // x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\"", "theorem wls_Abs_vsubst_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (X #[x' // x]_xs) = Abs xs x X\"", "theorem wls_Abs_subst_Var_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (subst xs (Var xs x') x X) = Abs xs x X\"", "theorem wls_Abs_vsubst_congSTR:\nassumes \"wls s X\" and \"wls s X'\"\nand \"y = x \\<or> fresh xs y X\" \"y = x' \\<or> fresh xs y X'\"\nand \"(X #[y // x]_xs) = (X' #[y // x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\"", "theorem wls_psubstAbs_idEnv[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[idEnv]) = A\"", "theorem wls_freshAbs_psubstAbs:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows\n\"freshAbs zs z (A $[rho]) =\n (\\<forall> ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)\"", "theorem wls_freshAbs_psubstAbs_E1:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho ys y = None\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\"", "theorem wls_freshAbs_psubstAbs_E2:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho ys y = Some Y\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\"", "theorem wls_freshAbs_psubstAbs_I1:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"freshAbs zs z A\" and \"freshEnv zs z rho\"\nshows \"freshAbs zs z (A $[rho])\"", "theorem wls_freshAbs_psubstAbs_I:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> freshAbs zs z A\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> freshAbs ys y A \\<or> fresh zs z Y\"\nshows \"freshAbs zs z (A $[rho])\"", "theorem wls_freshAbs_substAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and> (freshAbs ys y A \\<or> fresh zs z Y))\"", "theorem wls_freshAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"freshAbs zs z (A $[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and>\n        (freshAbs ys y A \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\"", "theorem wls_substAbs_preserves_freshAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z A\" and \"fresh zs z Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys)\"", "theorem wls_vsubstAbs_preserves_freshAbs:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z A\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"freshAbs zs z (A $[y1 // y]_ys)\"", "theorem wls_fresh_freshAbs_substAbs[simp]:\nassumes \"wls (asSort ys) Y\" and \"wlsAbs (us,s) A\"\nand \"fresh ys y Y\"\nshows \"freshAbs ys y (A $[Y / y]_ys)\"", "theorem wls_diff_freshAbs_vsubstAbs[simp]:\nassumes \"wlsAbs (us,s) A\"\nand \"y \\<noteq> y1\"\nshows \"freshAbs ys y (A $[y1 // y]_ys)\"", "theorem wls_freshAbs_substAbs_E1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\" and \"z \\<noteq> y \\<or> zs \\<noteq> ys\"\nshows \"freshAbs zs z A\"", "theorem wls_freshAbs_vsubstAbs_E1:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\" and \"z \\<noteq> y \\<or> zs \\<noteq> ys\"\nshows \"freshAbs zs z A\"", "theorem wls_freshAbs_substAbs_E2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\"", "theorem wls_freshAbs_vsubstAbs_E2:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\"\nshows \"freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\"", "theorem wls_psubstAbs_cong[fundef_cong]:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nand \"\\<And> ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y\"\nshows \"(A $[rho]) = (A $[rho'])\"", "theorem wls_freshAbs_psubstAbs_updEnv:\nassumes \"wls (asSort xs) X\" and \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"freshAbs xs x A\"\nshows \"(A $[rho [x \\<leftarrow> X]_xs]) = (A $[rho])\"", "lemma wls_freshEnv_psubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> freshAbs zs z A\"\nshows \"(A $[rho]) = A\"", "theorem wls_freshAbs_substAbs_ident[simp]:\nassumes \"wls (asSort xs) X\" and \"wlsAbs (us,s) A\" and \"freshAbs xs x A\"\nshows \"(A $[X / x]_xs) = A\"", "theorem wls_substAbs_Abs[simp]:\nassumes \"wls s X\" and \"wls (asSort xs) Y\"\nshows \"((Abs xs x X) $[Y / x]_xs) = Abs xs x X\"", "theorem wls_freshAbs_vsubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\" and \"freshAbs xs x A\"\nshows \"(A $[x1 // x]_xs) = A\"", "theorem wls_swapAbs_psubstAbs:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])\"", "theorem wls_swapAbs_substAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"((A $[Y / y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_swapAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"((A $[y1 // y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "theorem wls_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((A $[rho]) $[rho']) = (A $[(rho &[rho'])])\"", "theorem wls_psubstAbs_substAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\"", "theorem wls_psubstAbs_substAbs_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = ((A $[rho]) $[(Y #[rho]) / y]_ys)\"", "theorem wls_psubstAbs_vsubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[y1 // y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\"", "theorem wls_substAbs_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[Y / y]_ys) = (A $[(rho &[Y / y]_ys)])\"", "theorem wls_vsubstAbs_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[y1 // y]_ys) = (A $[(rho &[y1 // y]_ys)])\"", "theorem wls_substAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((A $[Y1 / y]_ys) $[Y2 / y]_ys) = (A $[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "theorem wls_substAbs_vsubstAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((A $[y1 // y]_ys) $[Y / y]_ys) = (A $[y1 // y]_ys)\"", "theorem wls_vsubstAbs_substAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"((A $[Y / y]_ys) $[y1 // y]_ys) = (A $[(Y #[y1 // y]_ys) / y]_ys)\"", "theorem wls_vsubstAbs_compose1:\nassumes \"wlsAbs (us,s) A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y]_ys) = (A $[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "theorem wls_substAbs_compose2:\nassumes  \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[Y / y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[(Y #[Z / z]_zs) / y]_ys)\"", "theorem wls_substAbs_vsubstAbs_compose2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[y1 // y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "theorem wls_vsubstAbs_substAbs_compose2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[Y / y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(Y #[z1 // z]_zs) / y]_ys)\"", "theorem wls_vsubstAbs_compose2:\nassumes  \"wlsAbs (us,s) A\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[y1 // y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "theorem wls_vsubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"(A $[z // z]_zs) = A\"", "theorem wls_substAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"(A $[(Var zs z) / z]_zs) = A\"", "theorem wls_vsubstAbs_eq_swapAbs:\nassumes \"wlsAbs (us,s) A\" and \"y1 = y2 \\<or> freshAbs ys y1 A\"\nshows \"(A $[y1 // y2]_ys) = (A $[y1 \\<and> y2]_ys)\"", "theorem wls_skelAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"skelAbs (A $[y1 // y2]_ys) = skelAbs A\"", "theorem wls_substAbs_vsubstAbs_trans:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[Y / y1]_ys) = (A $[Y / y]_ys)\"", "theorem wls_vsubstAbs_trans:\nassumes \"wlsAbs (us,s) A\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y1]_ys) = (A $[y2 // y]_ys)\"", "theorem wls_vsubstAbs_commute:\nassumes \"wlsAbs (us,s) A\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"freshAbs xs x A\" and \"freshAbs xs' x' A\"\nshows \"((A $[x // y]_xs) $[x' // y']_xs') = ((A $[x' // y']_xs') $[x // y]_xs)\"", "lemmas wls_psubstAll_freshAll_otherSimps =\nwls_psubst_idEnv wls_psubstEnv_idEnv_id wls_psubstAbs_idEnv\nwls_freshEnv_psubst_ident wls_freshEnv_psubstAbs_ident", "lemmas wls_substAll_freshAll_otherSimps =\nwls_fresh_fresh_subst wls_fresh_subst_ident wls_fresh_substEnv_updEnv wls_subst_ident\nwls_fresh_freshAbs_substAbs wls_freshAbs_substAbs_ident wls_substAbs_ident\nwls_Abs_subst_Var_fresh", "lemmas wls_vsubstAll_freshAll_otherSimps =\nwls_diff_fresh_vsubst wls_fresh_vsubst_ident wls_fresh_vsubstEnv_updEnv wls_vsubst_ident\nwls_diff_freshAbs_vsubstAbs wls_freshAbs_vsubstAbs_ident wls_vsubstAbs_ident\nwls_Abs_vsubst_fresh", "lemmas wls_allOpers_otherSimps =\nwls_swapAll_freshAll_otherSimps\nwls_psubstAll_freshAll_otherSimps\nwls_substAll_freshAll_otherSimps\nwls_vsubstAll_freshAll_otherSimps", "lemma isVar_asSort_Var[simp]:\n\"isVar (asSort xs) (Var xs x)\"", "lemma not_isVar_Op[simp]:\n\"\\<not> isVar s (Op delta inp binp)\"", "lemma isVar_imp_wls:\n\"isVar s X \\<Longrightarrow> wls s X\"", "lemmas isVar_simps =\nisVar_asSort_Var not_isVar_Op", "lemma castVar_asSort_Var[simp]:\n\"castVar (asSort xs) (Var xs x) = (xs,x)\"", "lemma isVar_castVar:\nassumes \"isVar s X\"\nshows \"asSort (fst (castVar s X)) = s \\<and>\n       Var (fst (castVar s X)) (snd (castVar s X)) = X\"", "lemma asSort_castVar[simp]:\n\"isVar s X \\<Longrightarrow> asSort (fst (castVar s X)) = s\"", "lemma Var_castVar[simp]:\n\"isVar s X \\<Longrightarrow> Var (fst (castVar s X)) (snd (castVar s X)) = X\"", "lemma castVar_inj[simp]:\nassumes *: \"isVar s X\" and **: \"isVar s' X'\"\nshows \"(castVar s X = castVar s' X') = (s = s' \\<and> X = X')\"", "lemmas castVar_simps =\ncastVar_asSort_Var\nasSort_castVar Var_castVar castVar_inj", "lemma isOp_stOf_Op[simp]:\n\"\\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n \\<Longrightarrow> isOp (stOf delta) (Op delta inp binp)\"", "lemma not_isOp_Var[simp]:\n\"\\<not> isOp s (Var xs X)\"", "lemma isOp_imp_wls:\n\"isOp s X \\<Longrightarrow> wls s X\"", "lemmas isOp_simps =\nisOp_stOf_Op not_isOp_Var", "lemma castOp_stOf_Op[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"castOp (stOf delta) (Op delta inp binp) = (delta,inp,binp)\"", "lemma isOp_castOp:\nassumes \"isOp s X\"\nshows \"wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n       wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n       stOf (fst3 (castOp s X)) = s \\<and>\n       Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X\"", "lemma wlsInp_castOp[simp]:\n\"isOp s X \\<Longrightarrow> wlsInp (fst3 (castOp s X)) (snd3 (castOp s X))\"", "lemma wlsBinp_castOp[simp]:\n\"isOp s X \\<Longrightarrow> wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X))\"", "lemma stOf_castOp[simp]:\n\"isOp s X \\<Longrightarrow> stOf (fst3 (castOp s X)) = s\"", "lemma Op_castOp[simp]:\n\"isOp s X \\<Longrightarrow>\n Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X\"", "lemma castOp_inj[simp]:\nassumes \"isOp s X\" and \"isOp s' X'\"\nshows \"(castOp s X = castOp s' X') = (s = s' \\<and> X = X')\"", "lemmas castOp_simps =\ncastOp_stOf_Op wlsInp_castOp wlsBinp_castOp\nstOf_castOp Op_castOp castOp_inj", "lemma not_isVar_isOp:\n\"\\<not> (isVar s X \\<and> isOp s X)\"", "lemma isVar_or_isOp:\n\"wls s X \\<Longrightarrow> isVar s X \\<or> isOp s X\"", "lemma sortTermCase_asSort_Var_simp[simp]:\n\"sortTermCase fVar fOp (asSort xs) (Var xs x) = fVar xs x\"", "lemma sortTermCase_stOf_Op_simp[simp]:\n\"\\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk> \\<Longrightarrow>\n sortTermCase fVar fOp (stOf delta) (Op delta inp binp) = fOp delta inp binp\"", "lemma sortTermCase_cong[fundef_cong]:\nassumes \"\\<And> xs x. fVar xs x = gVar xs x\"\nand \"\\<And> delta inp binp. \\<lbrakk>wlsInp delta inp; wlsInp delta inp\\<rbrakk>\n                        \\<Longrightarrow> fOp delta inp binp = gOp delta inp binp\"\nshows \"wls s X \\<Longrightarrow>\n       sortTermCase fVar fOp s X = sortTermCase gVar gOp s X\"", "lemmas sortTermCase_simps =\nsortTermCase_asSort_Var_simp\nsortTermCase_stOf_Op_simp", "lemmas term_cast_simps =\nisOp_simps castOp_simps sortTermCase_simps", "lemma wlsAbs_castAbs:\nassumes \"wlsAbs (xs,s) A\"\nshows \"wls s (snd (castAbs xs s A)) \\<and>\n       Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A\"", "lemma wls_castAbs[simp]:\n\"wlsAbs (xs,s) A \\<Longrightarrow> wls s (snd (castAbs xs s A))\"", "lemma Abs_castAbs[simp]:\n\"wlsAbs (xs,s) A \\<Longrightarrow> Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A\"", "lemma castAbs_Abs_swap:\nassumes \"isInBar (xs,s)\" and X: \"wls s X\"\nand yxX: \"y = x \\<or> fresh xs y X\" and yx'X': \"y = x' \\<or> fresh xs y X'\"\nand *: \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\"", "lemma castAbs_Abs_subst:\nassumes isInBar: \"isInBar (xs,s)\"\nand X: \"wls s X\" and Y: \"wls (asSort xs) Y\"\nand *: \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[Y / x]_xs) = (X' #[Y / x']_xs)\"", "lemma castAbs_Abs_vsubst:\nassumes \"isInBar (xs,s)\" and \"wls s X\"\nand \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[y // x]_xs) = (X' #[y // x']_xs)\"", "lemma castAbs_inj[simp]:\nassumes *: \"wlsAbs (xs,s) A\" and **: \"wlsAbs (xs,s) A'\"\nshows \"(castAbs xs s A = castAbs xs s A') = (A = A')\"", "lemmas castAbs_simps =\nwls_castAbs Abs_castAbs castAbs_inj", "lemma absCase_Abs_swap[simp]:\nassumes isInBar: \"isInBar (xs,s)\" and X: \"wls s X\"\nand f_compat: \"compatAbsSwap xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\"", "lemma absCase_Abs_subst[simp]:\nassumes isInBar: \"isInBar (xs,s)\" and X: \"wls s X\"\nand f_compat: \"compatAbsSubst xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\"", "lemma compatAbsVsubst_imp_compatAbsSubst[simp]:\n\"compatAbsVsubst xs s f \\<Longrightarrow> compatAbsSubst xs s f\"", "lemma absCase_Abs_vsubst[simp]:\nassumes \"isInBar (xs,s)\" and \"wls s X\"\nand \"compatAbsVsubst xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\"", "lemma absCase_cong[fundef_cong]:\nassumes \"compatAbsSwap xs s f \\<or> compatAbsSubst xs s f \\<or> compatAbsVsubst xs s f\"\nand \"compatAbsSwap xs s f' \\<or> compatAbsSubst xs s f' \\<or> compatAbsVsubst xs s f'\"\nand \"\\<And> x X. wls s X \\<Longrightarrow> f x X = f' x X\"\nshows \"wlsAbs (xs,s) A \\<Longrightarrow>\n       absCase xs s f A = absCase xs s f' A\"", "lemmas absCase_simps = absCase_Abs_swap absCase_Abs_subst\ncompatAbsVsubst_imp_compatAbsSubst absCase_Abs_vsubst", "lemmas abs_cast_simps = castAbs_simps absCase_simps", "lemmas cast_simps = term_cast_simps abs_cast_simps", "lemmas wls_item_simps =\nwlsAll_imp_goodAll  paramS_simps Cons_wls_simps all_preserve_wls\nwls_freeCons wls_allOpers_simps wls_allOpers_otherSimps Abs_inj_fresh cast_simps", "lemmas wls_copy_of_good_item_simps = good_freeCons  good_allOpers_simps good_allOpers_otherSimps\nparam_simps  all_preserve_good"], "translations": [["", "lemmas FixSyn_assms =\nFixSyn_var_infinite FixSyn_var_regular\nvarSortAsSort_inj arityOf_lt_var barityOf_lt_var\nsort_lt_var"], ["", "end"], ["", "subsection \\<open>Definitions and basic properties of well-sortedness\\<close>"], ["", "subsubsection \\<open>Notations and definitions\\<close>"], ["", "(* Sorted parameters (again, for use in proofs): *)"], ["", "datatype ('index,'bindex,'varSort,'var,'opSym,'sort)paramS =\n  ParS \"'varSort \\<Rightarrow> 'var list\"\n       \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term list\"\n       \"('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs list\"\n       \"('index,'bindex,'varSort,'var,'opSym)env list\""], ["", "fun varsOfS ::\n\"('index,'bindex,'varSort,'var,'opSym,'sort)paramS \\<Rightarrow> 'varSort \\<Rightarrow> 'var set\"\nwhere \"varsOfS (ParS xLF _ _ _) xs = set (xLF xs)\""], ["", "fun termsOfS ::\n\"('index,'bindex,'varSort,'var,'opSym,'sort)paramS \\<Rightarrow>\n 'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\"\nwhere \"termsOfS (ParS _ XLF _ _) s = set (XLF s)\""], ["", "fun absOfS ::\n\"('index,'bindex,'varSort,'var,'opSym,'sort)paramS \\<Rightarrow>\n ('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\"\nwhere \"absOfS (ParS _ _ ALF _) (xs,s) = set (ALF (xs,s))\""], ["", "fun envsOfS ::\n\"('index,'bindex,'varSort,'var,'opSym,'sort)paramS \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)env set\"\nwhere \"envsOfS (ParS _ _ _ rhoL) = set rhoL\""], ["", "subsubsection \\<open>Sublocale of ``FixVars\"\\<close>"], ["", "lemma sort_lt_var_imp_varSort_lt_var:\nassumes\n**: \"varSortAsSort_inj (Delta :: ('index,'bindex,'varSort,'sort,'opSym)signature)\"\nand ***: \"sort_lt_var (undefined :: 'sort) (undefined :: 'var)\"\nshows \"varSort_lt_var (undefined :: 'varSort) (undefined :: 'var)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varSort_lt_var undefined undefined", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. varSort_lt_var undefined undefined", "have \"|UNIV::'varSort set| \\<le>o |UNIV::'sort set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "using card_of_ordLeq **"], ["proof (prove)\nusing this:\n  (\\<exists>f. inj_on f ?A \\<and> f ` ?A \\<subseteq> ?B) =\n  (|?A| \\<le>o |?B|)\n  varSortAsSort_inj Delta\n\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "unfolding  varSortAsSort_inj_def"], ["proof (prove)\nusing this:\n  (\\<exists>f. inj_on f ?A \\<and> f ` ?A \\<subseteq> ?B) =\n  (|?A| \\<le>o |?B|)\n  inj (varSortAsSort Delta)\n\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |UNIV| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. varSort_lt_var undefined undefined", "thus ?thesis"], ["proof (prove)\nusing this:\n  |UNIV| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. varSort_lt_var undefined undefined", "using ordLeq_ordLess_trans assms"], ["proof (prove)\nusing this:\n  |UNIV| \\<le>o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n  varSortAsSort_inj Delta\n  sort_lt_var undefined undefined\n\ngoal (1 subgoal):\n 1. varSort_lt_var undefined undefined", "unfolding sort_lt_var_def varSort_lt_var_def"], ["proof (prove)\nusing this:\n  |UNIV| \\<le>o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n  varSortAsSort_inj Delta\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  varSort_lt_var undefined undefined\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale FixSyn < FixVars\nwhere dummyV = dummyV and dummyVS = \"undefined::'varSort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FixVars TYPE('var) TYPE('varSort)", "using FixSyn_assms"], ["proof (prove)\nusing this:\n  var_infinite undefined\n  var_regular undefined\n  varSortAsSort_inj Delta\n  arityOf_lt_var undefined Delta\n  barityOf_lt_var undefined Delta\n  sort_lt_var undefined undefined\n\ngoal (1 subgoal):\n 1. FixVars TYPE('var) TYPE('varSort)", "by unfold_locales (auto simp add: sort_lt_var_imp_varSort_lt_var)"], ["", "subsubsection \\<open>Abbreviations\\<close>"], ["", "(*********************************************)"], ["", "context FixSyn   (* scope all throughout the file *)\nbegin"], ["", "abbreviation asSort where \"asSort == varSortAsSort Delta\""], ["", "abbreviation wlsOpS where \"wlsOpS == wlsOpSym Delta\""], ["", "abbreviation stOf where \"stOf == sortOf Delta\""], ["", "abbreviation arOf where \"arOf == arityOf Delta\""], ["", "abbreviation barOf where \"barOf == barityOf Delta\""], ["", "abbreviation empInp ::\n\"('index,('index,'bindex,'varSort,'var,'opSym)term)input\"\nwhere \"empInp == \\<lambda>i. None\""], ["", "abbreviation empAr :: \"('index,'sort)input\"\nwhere \"empAr == \\<lambda>i. None\""], ["", "abbreviation empBinp :: \"('bindex,('index,'bindex,'varSort,'var,'opSym)abs)input\"\nwhere \"empBinp == \\<lambda>i. None\""], ["", "abbreviation empBar :: \"('bindex,'varSort * 'sort)input\"\nwhere \"empBar == \\<lambda>i. None\""], ["", "lemma freshInp_empInp[simp]:\n\"freshInp xs x empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshInp xs x empInp", "unfolding freshInp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v. None = Some v \\<longrightarrow> fresh xs x v", "by simp"], ["", "lemma swapInp_empInp[simp]:\n\"(empInp %[x1 \\<and> x2]_xs) = empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[x1 \\<and> x2]_xs = empInp", "unfolding swapInp_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case None of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v #[x1 \\<and> x2]_xs)) =\n    empInp", "by simp"], ["", "lemma psubstInp_empInp[simp]:\n\"(empInp %[rho]) = empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[rho] = empInp", "unfolding psubstInp_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case None of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some v #[rho]) =\n    empInp", "by simp"], ["", "lemma substInp_empInp[simp]:\n\"(empInp %[Y / y]_ys) = empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[Y / y]_ys = empInp", "unfolding substInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[idEnv [y \\<leftarrow> Y]_ys] = empInp", "by simp"], ["", "lemma vsubstInp_empInp[simp]:\n\"(empInp %[y1 // y]_ys) = empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[y1 // y]_ys = empInp", "unfolding vsubstInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. empInp %[Var ys y1 / y]_ys = empInp", "by simp"], ["", "lemma freshBinp_empBinp[simp]:\n\"freshBinp xs x empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshBinp xs x empBinp", "unfolding freshBinp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v. None = Some v \\<longrightarrow> freshAbs xs x v", "by simp"], ["", "lemma swapBinp_empBinp[simp]:\n\"(empBinp %%[x1 \\<and> x2]_xs) = empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[x1 \\<and> x2]_xs = empBinp", "unfolding swapBinp_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case None of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v $[x1 \\<and> x2]_xs)) =\n    empBinp", "by simp"], ["", "lemma psubstBinp_empBinp[simp]:\n\"(empBinp %%[rho]) = empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[rho] = empBinp", "unfolding psubstBinp_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case None of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some v $[rho]) =\n    empBinp", "by simp"], ["", "lemma substBinp_empBinp[simp]:\n\"(empBinp %%[Y / y]_ys) = empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[Y / y]_ys = empBinp", "unfolding substBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[idEnv [y \\<leftarrow> Y]_ys] = empBinp", "by simp"], ["", "lemma vsubstBinp_empBinp[simp]:\n\"(empBinp %%[y1 // y]_ys) = empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[y1 // y]_ys = empBinp", "unfolding vsubstBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. empBinp %%[Var ys y1 / y]_ys = empBinp", "by simp"], ["", "lemmas empInp_simps =\nfreshInp_empInp swapInp_empInp psubstInp_empInp substInp_empInp vsubstInp_empInp\nfreshBinp_empBinp swapBinp_empBinp psubstBinp_empBinp substBinp_empBinp vsubstBinp_empBinp"], ["", "subsubsection \\<open>Inner versions of the locale assumptions\\<close>"], ["", "lemma varSortAsSort_inj_INNER: \"inj asSort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj asSort", "using varSortAsSort_inj"], ["proof (prove)\nusing this:\n  varSortAsSort_inj Delta\n\ngoal (1 subgoal):\n 1. inj asSort", "unfolding varSortAsSort_inj_def"], ["proof (prove)\nusing this:\n  inj asSort\n\ngoal (1 subgoal):\n 1. inj asSort", "by simp"], ["", "lemma asSort_inj[simp]:\n\"(asSort xs = asSort ys) = (xs = ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (asSort xs = asSort ys) = (xs = ys)", "using varSortAsSort_inj_INNER"], ["proof (prove)\nusing this:\n  inj asSort\n\ngoal (1 subgoal):\n 1. (asSort xs = asSort ys) = (xs = ys)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>UNIV.\n     \\<forall>y\\<in>UNIV. asSort x = asSort y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. (asSort xs = asSort ys) = (xs = ys)", "by auto"], ["", "lemma arityOf_lt_var_INNER:\nassumes \"wlsOpS delta\"\nshows \"|{i. arityOf Delta delta i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{i. arOf delta i \\<noteq> None}| <o |UNIV|", "using assms arityOf_lt_var"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arityOf_lt_var undefined Delta\n\ngoal (1 subgoal):\n 1. |{i. arOf delta i \\<noteq> None}| <o |UNIV|", "unfolding arityOf_lt_var_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  \\<forall>delta.\n     wlsOpS delta \\<longrightarrow>\n     |{i. arOf delta i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. arOf delta i \\<noteq> None}| <o |UNIV|", "by simp"], ["", "lemma barityOf_lt_var_INNER:\nassumes \"wlsOpS delta\"\nshows \"|{i. barityOf Delta delta i \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{i. barOf delta i \\<noteq> None}| <o |UNIV|", "using assms barityOf_lt_var"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barityOf_lt_var undefined Delta\n\ngoal (1 subgoal):\n 1. |{i. barOf delta i \\<noteq> None}| <o |UNIV|", "unfolding barityOf_lt_var_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  \\<forall>delta.\n     wlsOpS delta \\<longrightarrow>\n     |{i. barOf delta i \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. barOf delta i \\<noteq> None}| <o |UNIV|", "by simp"], ["", "lemma sort_lt_var_INNER:\n\"|UNIV :: 'sort set| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "using sort_lt_var"], ["proof (prove)\nusing this:\n  sort_lt_var undefined undefined\n\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "unfolding sort_lt_var_def"], ["proof (prove)\nusing this:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by simp"], ["", "lemma sort_le_var:\n\"|UNIV :: 'sort set| \\<le>o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "using sort_lt_var_INNER ordLess_imp_ordLeq"], ["proof (prove)\nusing this:\n  |UNIV| <o |UNIV|\n  ?r <o ?r' \\<Longrightarrow> ?r \\<le>o ?r'\n\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "by auto"], ["", "lemma varSort_sort_lt_var:\n\"|UNIV :: ('varSort * 'sort) set| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "unfolding UNIV_Times_UNIV[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV \\<times> UNIV| <o |UNIV|", "using var_infinite_INNER varSort_lt_var_INNER sort_lt_var_INNER"], ["proof (prove)\nusing this:\n  infinite UNIV\n  |UNIV| <o |UNIV|\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV \\<times> UNIV| <o |UNIV|", "by(rule card_of_Times_ordLess_infinite)"], ["", "lemma varSort_sort_le_var:\n\"|UNIV :: ('varSort * 'sort) set| \\<le>o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "using varSort_sort_lt_var ordLess_imp_ordLeq"], ["proof (prove)\nusing this:\n  |UNIV| <o |UNIV|\n  ?r <o ?r' \\<Longrightarrow> ?r \\<le>o ?r'\n\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "by auto"], ["", "subsubsection \\<open>Definitions of well-sorted items\\<close>"], ["", "text \\<open>We shall only be interested in abstractions that pertain to some bound arities:\\<close>"], ["", "definition isInBar where\n\"isInBar xs_s ==\n \\<exists> delta i. wlsOpS delta \\<and> barOf delta i = Some xs_s\""], ["", "text \\<open>Well-sorted terms (according to the signature) are defined as expected (mutually inductively\ntogether with well-sorted abstractions and inputs):\\<close>"], ["", "inductive\nwls :: \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term \\<Rightarrow> bool\"\nand\nwlsAbs :: \"'varSort * 'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs \\<Rightarrow> bool\"\nand\nwlsInp :: \"'opSym \\<Rightarrow> ('index,('index,'bindex,'varSort,'var,'opSym)term)input \\<Rightarrow> bool\"\nand\nwlsBinp :: \"'opSym \\<Rightarrow> ('bindex,('index,'bindex,'varSort,'var,'opSym)abs)input \\<Rightarrow> bool\"\nwhere\nVar: \"wls (asSort xs) (Var xs x)\"\n|\nOp: \"\\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>  \\<Longrightarrow> wls (stOf delta) (Op delta inp binp)\"\n|\nInp:\n\"\\<lbrakk>wlsOpS delta;\n  \\<And> i. (arOf delta i = None \\<and> inp i = None) \\<or>\n        (\\<exists> s X. arOf delta i = Some s \\<and> inp i = Some X \\<and> wls s X)\\<rbrakk>\n \\<Longrightarrow> wlsInp delta inp\"\n|\nBinp:\n\"\\<lbrakk>wlsOpS delta;\n  \\<And> i. (barOf delta i = None \\<and> binp i = None) \\<or>\n        (\\<exists> us s A. barOf delta i = Some (us,s) \\<and> binp i = Some A \\<and> wlsAbs (us,s) A)\\<rbrakk>\n \\<Longrightarrow> wlsBinp delta binp\"\n|\nAbs: \"\\<lbrakk>isInBar (xs,s); wls s X\\<rbrakk> \\<Longrightarrow> wlsAbs (xs,s) (Abs xs x X)\""], ["", "lemmas Var_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Var"], ["", "lemmas Op_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Op"], ["", "lemmas Abs_preserves_wls = wls_wlsAbs_wlsInp_wlsBinp.Abs"], ["", "lemma barOf_isInBar[simp]:\nassumes \"wlsOpS delta\" and \"barOf delta i = Some (us,s)\"\nshows \"isInBar (us,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isInBar (us, s)", "unfolding isInBar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>delta i. wlsOpS delta \\<and> barOf delta i = Some (us, s)", "using assms"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. \\<exists>delta i. wlsOpS delta \\<and> barOf delta i = Some (us, s)", "by blast"], ["", "lemmas Cons_preserve_wls =\nbarOf_isInBar\nVar_preserves_wls Op_preserves_wls\nAbs_preserves_wls"], ["", "declare Cons_preserve_wls [simp]"], ["", "definition wlsEnv :: \"('index,'bindex,'varSort,'var,'opSym)env \\<Rightarrow> bool\"\nwhere\n\"wlsEnv rho ==\n (\\<forall> ys. liftAll (wls (asSort ys)) (rho ys)) \\<and>\n (\\<forall> ys. |{y. rho ys y \\<noteq> None}| <o |UNIV :: 'var set| )\""], ["", "definition wlsPar :: \"('index,'bindex,'varSort,'var,'opSym,'sort)paramS \\<Rightarrow> bool\"\nwhere\n\"wlsPar P ==\n (\\<forall> s. \\<forall> X \\<in> termsOfS P s. wls s X) \\<and>\n (\\<forall> xs s. \\<forall> A \\<in> absOfS P (xs,s). wlsAbs (xs,s) A) \\<and>\n (\\<forall> rho \\<in> envsOfS P. wlsEnv rho)\""], ["", "lemma ParS_preserves_wls[simp]:\nassumes \"\\<And> s X. X \\<in> set (XLF s) \\<Longrightarrow> wls s X\"\nand \"\\<And> xs s A. A \\<in> set (ALF (xs,s)) \\<Longrightarrow> wlsAbs (xs,s) A\"\nand \"\\<And> rho. rho \\<in> set rhoF \\<Longrightarrow> wlsEnv rho\"\nshows \"wlsPar (ParS xLF XLF ALF rhoF)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsPar (ParS xLF XLF ALF rhoF)", "using assms"], ["proof (prove)\nusing this:\n  ?X1 \\<in> set (XLF ?s1) \\<Longrightarrow> wls ?s1 ?X1\n  ?A1 \\<in> set (ALF (?xs1, ?s1)) \\<Longrightarrow> wlsAbs (?xs1, ?s1) ?A1\n  ?rho1 \\<in> set rhoF \\<Longrightarrow> wlsEnv ?rho1\n\ngoal (1 subgoal):\n 1. wlsPar (ParS xLF XLF ALF rhoF)", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  ?X1 \\<in> set (XLF ?s1) \\<Longrightarrow> wls ?s1 ?X1\n  ?A1 \\<in> set (ALF (?xs1, ?s1)) \\<Longrightarrow> wlsAbs (?xs1, ?s1) ?A1\n  ?rho1 \\<in> set rhoF \\<Longrightarrow> wlsEnv ?rho1\n\ngoal (1 subgoal):\n 1. (\\<forall>s.\n        \\<forall>X\\<in>termsOfS (ParS xLF XLF ALF rhoF) s. wls s X) \\<and>\n    (\\<forall>xs s.\n        \\<forall>A\\<in>absOfS (ParS xLF XLF ALF rhoF) (xs, s).\n           wlsAbs (xs, s) A) \\<and>\n    Ball (envsOfS (ParS xLF XLF ALF rhoF)) wlsEnv", "by auto"], ["", "lemma termsOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"X : termsOfS P s\"\nshows \"wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n  X \\<in> termsOfS P s\n\ngoal (1 subgoal):\n 1. wls s X", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  (\\<forall>s. \\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n  (\\<forall>xs s. \\<forall>A\\<in>absOfS P (xs, s). wlsAbs (xs, s) A) \\<and>\n  Ball (envsOfS P) wlsEnv\n  X \\<in> termsOfS P s\n\ngoal (1 subgoal):\n 1. wls s X", "by auto"], ["", "lemma absOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"A : absOfS P (us,s)\"\nshows \"wlsAbs (us,s) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n  A \\<in> absOfS P (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  (\\<forall>s. \\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n  (\\<forall>xs s. \\<forall>A\\<in>absOfS P (xs, s). wlsAbs (xs, s) A) \\<and>\n  Ball (envsOfS P) wlsEnv\n  A \\<in> absOfS P (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A", "by auto"], ["", "lemma envsOfS_preserves_wls[simp]:\nassumes \"wlsPar P\" and \"rho : envsOfS P \"\nshows \"wlsEnv rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv rho", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n  rho \\<in> envsOfS P\n\ngoal (1 subgoal):\n 1. wlsEnv rho", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  (\\<forall>s. \\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n  (\\<forall>xs s. \\<forall>A\\<in>absOfS P (xs, s). wlsAbs (xs, s) A) \\<and>\n  Ball (envsOfS P) wlsEnv\n  rho \\<in> envsOfS P\n\ngoal (1 subgoal):\n 1. wlsEnv rho", "by blast"], ["", "lemma not_isInBar_absOfS_empty[simp]:\nassumes *: \"\\<not> isInBar (us,s)\" and **: \"wlsPar P\"\nshows \"absOfS P (us,s) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "assume \"A : absOfS P (us,s)\""], ["proof (state)\nthis:\n  A \\<in> absOfS P (us, s)\n\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "hence \"wlsAbs (us,s) A\""], ["proof (prove)\nusing this:\n  A \\<in> absOfS P (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A", "using **"], ["proof (prove)\nusing this:\n  A \\<in> absOfS P (us, s)\n  wlsPar P\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A", "by simp"], ["proof (state)\nthis:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "hence False"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. False", "using *"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  \\<not> isInBar (us, s)\n\ngoal (1 subgoal):\n 1. False", "using wlsAbs.cases"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  \\<not> isInBar (us, s)\n  \\<lbrakk>wlsAbs ?a1.0 ?a2.0;\n   \\<And>xs s X x.\n      \\<lbrakk>?a1.0 = (xs, s); ?a2.0 = Abs xs x X; isInBar (xs, s);\n       wls s X\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "}"], ["proof (state)\nthis:\n  ?A3 \\<in> absOfS P (us, s) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?A3 \\<in> absOfS P (us, s) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. absOfS P (us, s) = {}", "by auto"], ["proof (state)\nthis:\n  absOfS P (us, s) = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas paramS_simps =\nvarsOfS.simps termsOfS.simps absOfS.simps envsOfS.simps\nParS_preserves_wls\ntermsOfS_preserves_wls absOfS_preserves_wls envsOfS_preserves_wls\nnot_isInBar_absOfS_empty"], ["", "subsubsection \\<open>Well-sorted exists\\<close>"], ["", "lemma wlsInp_iff:\n\"wlsInp delta inp =\n (wlsOpS delta \\<and> sameDom (arOf delta) inp \\<and> liftAll2 wls (arOf delta) inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp =\n    (wlsOpS delta \\<and>\n     sameDom (arOf delta) inp \\<and> liftAll2 wls (arOf delta) inp)", "by (simp add: wlsInp.simps wls_wlsAbs_wlsInp_wlsBinp.Inp sameDom_and_liftAll2_iff)"], ["", "lemma wlsBinp_iff:\n\"wlsBinp delta binp =\n(wlsOpS delta \\<and> sameDom (barOf delta) binp \\<and> liftAll2 wlsAbs (barOf delta) binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp =\n    (wlsOpS delta \\<and>\n     sameDom (barOf delta) binp \\<and> liftAll2 wlsAbs (barOf delta) binp)", "by (simp add: wlsBinp.simps wls_wlsAbs_wlsInp_wlsBinp.Inp sameDom_and_liftAll2_iff)"], ["", "lemma exists_asSort_wls:\n\"\\<exists> X. wls (asSort xs) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X. wls (asSort xs) X", "by (intro exI[of _ \"Var xs undefined\"]) simp"], ["", "lemma exists_wls_imp_exists_wlsAbs:\nassumes  *: \"isInBar (us,s)\" and **: \"\\<exists> X. wls s X\"\nshows \"\\<exists> A. wlsAbs (us,s) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "obtain X where \"wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X. wls s X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using **"], ["proof (prove)\nusing this:\n  \\<exists>X. wls s X\n\ngoal (1 subgoal):\n 1. (\\<And>X. wls s X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  wls s X\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "hence \"wlsAbs (us,s) (Abs us undefined X)\""], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) (Abs us undefined X)", "using *"], ["proof (prove)\nusing this:\n  wls s X\n  isInBar (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) (Abs us undefined X)", "by simp"], ["proof (state)\nthis:\n  wlsAbs (us, s) (Abs us undefined X)\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "thus ?thesis"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) (Abs us undefined X)\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. wlsAbs (us, s) A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exists_asSort_wlsAbs:\nassumes \"isInBar (us,asSort xs)\"\nshows \"\\<exists> A. wlsAbs (us,asSort xs) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, asSort xs) A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, asSort xs) A", "obtain X where \"wls (asSort xs) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X. wls (asSort xs) X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using exists_asSort_wls"], ["proof (prove)\nusing this:\n  \\<exists>X. wls (asSort ?xs) X\n\ngoal (1 subgoal):\n 1. (\\<And>X. wls (asSort xs) X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, asSort xs) A", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, asSort xs) A", "using assms exists_wls_imp_exists_wlsAbs"], ["proof (prove)\nusing this:\n  wls (asSort xs) X\n  isInBar (us, asSort xs)\n  \\<lbrakk>isInBar (?us, ?s); \\<exists>X. wls ?s X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A. wlsAbs (?us, ?s) A\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, asSort xs) A", "by auto"], ["proof (state)\nthis:\n  \\<exists>A. wlsAbs (us, asSort xs) A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Standard criterion for the non-emptiness of the sets of well-sorted terms for each sort,\nby a well-founded relation and a function picking, for sorts not corresponding to varSorts,\nan operation symbol as an ``inductive\" witness for non-emptyness.\n``witOpS\" stands for ``witness operation symbol\".\\<close>"], ["", "definition witOpS where\n\"witOpS s delta R ==\n wlsOpS delta \\<and> stOf delta = s \\<and>\n liftAll (\\<lambda>s'. (s',s) : R) (arOf delta) \\<and>\n liftAll (\\<lambda>(us,s'). (s',s) : R) (barOf delta)\""], ["", "lemma wf_exists_wls:\nassumes wf: \"wf R\" and *: \"\\<And>s. (\\<exists> xs. s = asSort xs) \\<or> witOpS s (f s) R\"\nshows \"\\<exists> X. wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X", "proof(induction rule: wf_induct[of R])"], ["proof (state)\ngoal (2 subgoals):\n 1. wf R\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> R \\<longrightarrow>\n          (\\<exists>X. wls y X) \\<Longrightarrow>\n       \\<exists>X. wls x X", "case (2 s)"], ["proof (state)\nthis:\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n\ngoal (2 subgoals):\n 1. wf R\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> R \\<longrightarrow>\n          (\\<exists>X. wls y X) \\<Longrightarrow>\n       \\<exists>X. wls x X", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X", "proof(cases \"\\<exists> xs. s = asSort xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X\n 2. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "case True"], ["proof (state)\nthis:\n  \\<exists>xs. s = asSort xs\n\ngoal (2 subgoals):\n 1. \\<exists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X\n 2. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>xs. s = asSort xs\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X", "using exists_asSort_wls"], ["proof (prove)\nusing this:\n  \\<exists>xs. s = asSort xs\n  \\<exists>X. wls (asSort ?xs) X\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X", "by auto"], ["proof (state)\nthis:\n  \\<exists>X. wls s X\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "let ?delta = \"f s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "case False"], ["proof (state)\nthis:\n  \\<nexists>xs. s = asSort xs\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "hence delta: \"wlsOpS ?delta\" and st: \"stOf ?delta = s\"\n    and ar: \"liftAll (\\<lambda>s'. (s',s) : R) (arOf ?delta)\"\n    and bar: \"liftAll (\\<lambda>(us,s'). (s',s) : R) (barOf ?delta)\""], ["proof (prove)\nusing this:\n  \\<nexists>xs. s = asSort xs\n\ngoal (1 subgoal):\n 1. (wlsOpS (f s) &&& stOf (f s) = s) &&&\n    liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s)) &&&\n    liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))", "using *"], ["proof (prove)\nusing this:\n  \\<nexists>xs. s = asSort xs\n  (\\<exists>xs. ?s1 = asSort xs) \\<or> witOpS ?s1 (f ?s1) R\n\ngoal (1 subgoal):\n 1. (wlsOpS (f s) &&& stOf (f s) = s) &&&\n    liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s)) &&&\n    liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))", "unfolding witOpS_def"], ["proof (prove)\nusing this:\n  \\<nexists>xs. s = asSort xs\n  (\\<exists>xs. ?s1 = asSort xs) \\<or>\n  wlsOpS (f ?s1) \\<and>\n  stOf (f ?s1) = ?s1 \\<and>\n  liftAll (\\<lambda>s'. (s', ?s1) \\<in> R) (arOf (f ?s1)) \\<and>\n  liftAll (\\<lambda>(us, s'). (s', ?s1) \\<in> R) (barOf (f ?s1))\n\ngoal (1 subgoal):\n 1. (wlsOpS (f s) &&& stOf (f s) = s) &&&\n    liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s)) &&&\n    liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))", "by auto"], ["proof (state)\nthis:\n  wlsOpS (f s)\n  stOf (f s) = s\n  liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s))\n  liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "(*  *)"], ["proof (state)\nthis:\n  wlsOpS (f s)\n  stOf (f s) = s\n  liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s))\n  liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "have 1: \"\\<forall> i s'. arOf ?delta i = Some s' \\<longrightarrow> (\\<exists> X. wls s' X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i s'.\n       arOf (f s) i = Some s' \\<longrightarrow> (\\<exists>X. wls s' X)", "using ar 2"], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>s'. (s', s) \\<in> R) (arOf (f s))\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n\ngoal (1 subgoal):\n 1. \\<forall>i s'.\n       arOf (f s) i = Some s' \\<longrightarrow> (\\<exists>X. wls s' X)", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. arOf (f s) i = Some v \\<longrightarrow> (v, s) \\<in> R\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n\ngoal (1 subgoal):\n 1. \\<forall>i s'.\n       arOf (f s) i = Some s' \\<longrightarrow> (\\<exists>X. wls s' X)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i s'.\n     arOf (f s) i = Some s' \\<longrightarrow> (\\<exists>X. wls s' X)\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "let ?chi = \"\\<lambda>i s' X. arOf ?delta i = Some s' \\<longrightarrow> wls s' X\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "define inp where  \n    \"inp \\<equiv> (\\<lambda>i. (if arOf ?delta i = None\n                   then None\n                   else Some (SOME X. \\<forall> s'. ?chi i s' X)))\""], ["proof (state)\nthis:\n  inp \\<equiv>\n  \\<lambda>i.\n     if arOf (f s) i = None then None\n     else Some\n           (SOME X.\n               \\<forall>s'.\n                  arOf (f s) i = Some s' \\<longrightarrow> wls s' X)\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "have inp: \"wlsInp ?delta inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp (f s) inp", "unfolding wlsInp_iff sameDom_def liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsOpS (f s) \\<and>\n    (\\<forall>i. (arOf (f s) i = None) = (inp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf (f s) i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n        wls v1 v2)", "using delta"], ["proof (prove)\nusing this:\n  wlsOpS (f s)\n\ngoal (1 subgoal):\n 1. wlsOpS (f s) \\<and>\n    (\\<forall>i. (arOf (f s) i = None) = (inp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf (f s) i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n        wls v1 v2)", "by (auto simp: inp_def 1 someI2_ex split: if_splits)"], ["proof (state)\nthis:\n  wlsInp (f s) inp\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "(*  *)"], ["proof (state)\nthis:\n  wlsInp (f s) inp\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "have 1: \"\\<forall> i us s'. barOf ?delta i = Some (us,s') \\<longrightarrow> (\\<exists> A. wlsAbs (us,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i us s'.\n       barOf (f s) i = Some (us, s') \\<longrightarrow>\n       (\\<exists>A. wlsAbs (us, s') A)", "using bar 2"], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>(us, s'). (s', s) \\<in> R) (barOf (f s))\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n\ngoal (1 subgoal):\n 1. \\<forall>i us s'.\n       barOf (f s) i = Some (us, s') \\<longrightarrow>\n       (\\<exists>A. wlsAbs (us, s') A)", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v.\n     barOf (f s) i = Some v \\<longrightarrow>\n     (case v of (us, s') \\<Rightarrow> (s', s) \\<in> R)\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n\ngoal (1 subgoal):\n 1. \\<forall>i us s'.\n       barOf (f s) i = Some (us, s') \\<longrightarrow>\n       (\\<exists>A. wlsAbs (us, s') A)", "using delta exists_wls_imp_exists_wlsAbs"], ["proof (prove)\nusing this:\n  \\<forall>i v.\n     barOf (f s) i = Some v \\<longrightarrow>\n     (case v of (us, s') \\<Rightarrow> (s', s) \\<in> R)\n  \\<forall>y. (y, s) \\<in> R \\<longrightarrow> (\\<exists>X. wls y X)\n  wlsOpS (f s)\n  \\<lbrakk>isInBar (?us, ?s); \\<exists>X. wls ?s X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A. wlsAbs (?us, ?s) A\n\ngoal (1 subgoal):\n 1. \\<forall>i us s'.\n       barOf (f s) i = Some (us, s') \\<longrightarrow>\n       (\\<exists>A. wlsAbs (us, s') A)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i us s'.\n     barOf (f s) i = Some (us, s') \\<longrightarrow>\n     (\\<exists>A. wlsAbs (us, s') A)\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "let ?chi = \"\\<lambda>i us s' A. barOf ?delta i = Some (us,s') \\<longrightarrow> wlsAbs (us,s') A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "define binp where  \n    \"binp \\<equiv> (\\<lambda>i. (if barOf ?delta i = None\n                   then None\n                   else Some (SOME A. \\<forall> us s'. ?chi i us s' A)))\""], ["proof (state)\nthis:\n  binp \\<equiv>\n  \\<lambda>i.\n     if barOf (f s) i = None then None\n     else Some\n           (SOME A.\n               \\<forall>us s'.\n                  barOf (f s) i = Some (us, s') \\<longrightarrow>\n                  wlsAbs (us, s') A)\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "have binp: \"wlsBinp ?delta binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp (f s) binp", "unfolding wlsBinp_iff sameDom_def liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsOpS (f s) \\<and>\n    (\\<forall>i. (barOf (f s) i = None) = (binp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf (f s) i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n        wlsAbs v1 v2)", "using delta"], ["proof (prove)\nusing this:\n  wlsOpS (f s)\n\ngoal (1 subgoal):\n 1. wlsOpS (f s) \\<and>\n    (\\<forall>i. (barOf (f s) i = None) = (binp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf (f s) i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n        wlsAbs v1 v2)", "by (auto simp: binp_def 1 someI2_ex split: if_splits)"], ["proof (state)\nthis:\n  wlsBinp (f s) binp\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "(*  *)"], ["proof (state)\nthis:\n  wlsBinp (f s) binp\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "have \"wls s (Op ?delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (Op (f s) inp binp)", "using inp binp st"], ["proof (prove)\nusing this:\n  wlsInp (f s) inp\n  wlsBinp (f s) binp\n  stOf (f s) = s\n\ngoal (1 subgoal):\n 1. wls s (Op (f s) inp binp)", "using Op_preserves_wls[of ?delta inp binp]"], ["proof (prove)\nusing this:\n  wlsInp (f s) inp\n  wlsBinp (f s) binp\n  stOf (f s) = s\n  \\<lbrakk>wlsInp (f s) inp; wlsBinp (f s) binp\\<rbrakk>\n  \\<Longrightarrow> wls (stOf (f s)) (Op (f s) inp binp)\n\ngoal (1 subgoal):\n 1. wls s (Op (f s) inp binp)", "by simp"], ["proof (state)\nthis:\n  wls s (Op (f s) inp binp)\n\ngoal (1 subgoal):\n 1. \\<nexists>xs. s = asSort xs \\<Longrightarrow> \\<exists>X. wls s X", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s (Op (f s) inp binp)\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X", "by blast"], ["proof (state)\nthis:\n  \\<exists>X. wls s X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>X. wls s X\n\ngoal (1 subgoal):\n 1. wf R", "qed(insert assms, auto)"], ["", "lemma wf_exists_wlsAbs:\nassumes \"isInBar (us,s)\"\nand \"wf R\" and \"\\<And>s. (\\<exists> xs. s = asSort xs) \\<or> witOpS s (f s) R\"\nshows \"\\<exists> A. wlsAbs (us,s) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "using assms"], ["proof (prove)\nusing this:\n  isInBar (us, s)\n  wf R\n  (\\<exists>xs. ?s1 = asSort xs) \\<or> witOpS ?s1 (f ?s1) R\n\ngoal (1 subgoal):\n 1. \\<exists>A. wlsAbs (us, s) A", "by (auto intro: exists_wls_imp_exists_wlsAbs wf_exists_wls)"], ["", "subsubsection \\<open>Well-sorted implies Good\\<close>"], ["", "lemma wlsInp_empAr_empInp[simp]:\nassumes \"wlsOpS delta\" and \"arOf delta = empAr\"\nshows \"wlsInp delta empInp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta empInp", "using assms"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arOf delta = empAr\n\ngoal (1 subgoal):\n 1. wlsInp delta empInp", "unfolding wlsInp_iff sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arOf delta = empAr\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i. (arOf delta i = None) = (None = None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and> None = Some v2 \\<longrightarrow>\n        wls v1 v2)", "by auto"], ["", "lemma wlsBinp_empBar_empBinp[simp]:\nassumes \"wlsOpS delta\" and \"barOf delta = empBar\"\nshows \"wlsBinp delta empBinp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta empBinp", "using assms"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta = empBar\n\ngoal (1 subgoal):\n 1. wlsBinp delta empBinp", "unfolding wlsBinp_iff sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta = empBar\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i. (barOf delta i = None) = (None = None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf delta i = Some v1 \\<and> None = Some v2 \\<longrightarrow>\n        wlsAbs v1 v2)", "by auto"], ["", "lemmas empInp_otherSimps =\nwlsInp_empAr_empInp wlsBinp_empBar_empBinp"], ["", "lemma wlsAll_implies_goodAll:\n\"(wls s X \\<longrightarrow> good X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> goodAbs A) \\<and>\n (wlsInp delta inp \\<longrightarrow> goodInp inp) \\<and>\n (wlsBinp delta binp \\<longrightarrow> goodBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> good X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> goodAbs A) \\<and>\n    (wlsInp delta inp \\<longrightarrow> goodInp inp) \\<and>\n    (wlsBinp delta binp \\<longrightarrow> goodBinp binp)", "apply(induct rule: wls_wlsAbs_wlsInp_wlsBinp.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xs x. good (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; goodInp inp; wlsBinp delta binp;\n        goodBinp binp\\<rbrakk>\n       \\<Longrightarrow> good (Op delta inp binp)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and> wls s X \\<and> good X)\\<rbrakk>\n       \\<Longrightarrow> goodInp inp\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n       \\<Longrightarrow> goodBinp binp\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X; good X\\<rbrakk>\n       \\<Longrightarrow> goodAbs (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. good (Var xs_ x_)", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; goodInp inp; wlsBinp delta binp;\n        goodBinp binp\\<rbrakk>\n       \\<Longrightarrow> good (Op delta inp binp)\n 2. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and> wls s X \\<and> good X)\\<rbrakk>\n       \\<Longrightarrow> goodInp inp\n 3. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n       \\<Longrightarrow> goodBinp binp\n 4. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X; good X\\<rbrakk>\n       \\<Longrightarrow> goodAbs (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta_ inp_; goodInp inp_; wlsBinp delta_ binp_;\n     goodBinp binp_\\<rbrakk>\n    \\<Longrightarrow> good (Op delta_ inp_ binp_)", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and> wls s X \\<and> good X)\\<rbrakk>\n       \\<Longrightarrow> goodInp inp\n 2. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n       \\<Longrightarrow> goodBinp binp\n 3. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X; good X\\<rbrakk>\n       \\<Longrightarrow> goodAbs (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsOpS delta_;\n     \\<And>i.\n        arOf delta_ i = None \\<and> inp_ i = None \\<or>\n        (\\<exists>s X.\n            arOf delta_ i = Some s \\<and>\n            inp_ i = Some X \\<and> wls s X \\<and> good X)\\<rbrakk>\n    \\<Longrightarrow> goodInp inp_", "unfolding goodInp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsOpS delta_;\n     \\<And>i.\n        arOf delta_ i = None \\<and> inp_ i = None \\<or>\n        (\\<exists>s X.\n            arOf delta_ i = Some s \\<and>\n            inp_ i = Some X \\<and> wls s X \\<and> good X)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i v.\n                          inp_ i = Some v \\<longrightarrow> good v) \\<and>\n                      |{i. inp_ i \\<noteq> None}| <o |UNIV|", "by simp (smt Collect_cong arityOf_lt_var_INNER option.distinct(1) option.sel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n       \\<Longrightarrow> goodBinp binp\n 2. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X; good X\\<rbrakk>\n       \\<Longrightarrow> goodAbs (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsOpS delta_;\n     \\<And>i.\n        barOf delta_ i = None \\<and> binp_ i = None \\<or>\n        (\\<exists>us s A.\n            barOf delta_ i = Some (us, s) \\<and>\n            binp_ i = Some A \\<and>\n            wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n    \\<Longrightarrow> goodBinp binp_", "unfolding goodBinp_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsOpS delta_;\n     \\<And>i.\n        barOf delta_ i = None \\<and> binp_ i = None \\<or>\n        (\\<exists>us s A.\n            barOf delta_ i = Some (us, s) \\<and>\n            binp_ i = Some A \\<and>\n            wlsAbs (us, s) A \\<and> goodAbs A)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i v.\n                          binp_ i = Some v \\<longrightarrow>\n                          goodAbs v) \\<and>\n                      |{i. binp_ i \\<noteq> None}| <o |UNIV|", "by simp (smt Collect_cong barityOf_lt_var_INNER option.distinct(1) option.sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X; good X\\<rbrakk>\n       \\<Longrightarrow> goodAbs (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs_, s_); wls s_ X_; good X_\\<rbrakk>\n    \\<Longrightarrow> goodAbs (Abs xs_ x_ X_)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "corollary wls_imp_good[simp]: \"wls s X \\<Longrightarrow> good X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow> good X", "by(simp add: wlsAll_implies_goodAll)"], ["", "corollary wlsAbs_imp_goodAbs[simp]: \"wlsAbs (xs,s) A \\<Longrightarrow> goodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow> goodAbs A", "by(simp add: wlsAll_implies_goodAll)"], ["", "corollary wlsInp_imp_goodInp[simp]: \"wlsInp delta inp \\<Longrightarrow> goodInp inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp \\<Longrightarrow> goodInp inp", "by(simp add: wlsAll_implies_goodAll)"], ["", "corollary wlsBinp_imp_goodBinp[simp]: \"wlsBinp delta binp \\<Longrightarrow> goodBinp binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp \\<Longrightarrow> goodBinp binp", "by(simp add: wlsAll_implies_goodAll)"], ["", "lemma wlsEnv_imp_goodEnv[simp]: \"wlsEnv rho \\<Longrightarrow> goodEnv rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv rho \\<Longrightarrow> goodEnv rho", "unfolding wlsEnv_def goodEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n    (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<Longrightarrow>\n    (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)", "by simp (insert wls_imp_good, blast)"], ["", "lemmas wlsAll_imp_goodAll =\nwls_imp_good wlsAbs_imp_goodAbs\nwlsInp_imp_goodInp wlsBinp_imp_goodBinp\nwlsEnv_imp_goodEnv"], ["", "subsubsection \\<open>Swapping preserves well-sortedness\\<close>"], ["", "lemma swapAll_pres_wlsAll:\n\"(wls s X \\<longrightarrow> wls s (X #[z1 \\<and> z2]_zs)) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> wlsAbs (xs,s') (A $[z1 \\<and> z2]_zs)) \\<and>\n (wlsInp delta inp \\<longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)) \\<and>\n (wlsBinp delta binp \\<longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> wls s (X #[z1 \\<and> z2]_zs)) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow>\n     wlsAbs (xs, s') (A $[z1 \\<and> z2]_zs)) \\<and>\n    (wlsInp delta inp \\<longrightarrow>\n     wlsInp delta (inp %[z1 \\<and> z2]_zs)) \\<and>\n    (wlsBinp delta binp \\<longrightarrow>\n     wlsBinp delta (binp %%[z1 \\<and> z2]_zs))", "proof(induct rule: wls_wlsAbs_wlsInp_wlsBinp.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "case (Inp delta inp)"], ["proof (state)\nthis:\n  wlsOpS delta\n  arOf delta ?i1 = None \\<and> inp ?i1 = None \\<or>\n  (\\<exists>s X.\n      arOf delta ?i1 = Some s \\<and>\n      inp ?i1 = Some X \\<and> wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\n\ngoal (5 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "then"], ["proof (chain)\npicking this:\n  wlsOpS delta\n  arOf delta ?i1 = None \\<and> inp ?i1 = None \\<or>\n  (\\<exists>s X.\n      arOf delta ?i1 = Some s \\<and>\n      inp ?i1 = Some X \\<and> wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))", "show ?case"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arOf delta ?i1 = None \\<and> inp ?i1 = None \\<or>\n  (\\<exists>s X.\n      arOf delta ?i1 = Some s \\<and>\n      inp ?i1 = Some X \\<and> wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\n\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[z1 \\<and> z2]_zs)", "unfolding wlsInp_iff sameDom_def liftAll2_def lift_def swapInp_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arOf delta ?i1 = None \\<and> inp ?i1 = None \\<or>\n  (\\<exists>s X.\n      arOf delta ?i1 = Some s \\<and>\n      inp ?i1 = Some X \\<and> wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i.\n        (arOf delta i = None) =\n        ((case inp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and>\n        (case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n        Some v2 \\<longrightarrow>\n        wls v1 v2)", "using option.sel"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  arOf delta ?i1 = None \\<and> inp ?i1 = None \\<or>\n  (\\<exists>s X.\n      arOf delta ?i1 = Some s \\<and>\n      inp ?i1 = Some X \\<and> wls s X \\<and> wls s (X #[z1 \\<and> z2]_zs))\n  the (Some ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i.\n        (arOf delta i = None) =\n        ((case inp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and>\n        (case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n        Some v2 \\<longrightarrow>\n        wls v1 v2)", "by (fastforce simp add: split: option.splits)"], ["proof (state)\nthis:\n  wlsInp delta (inp %[z1 \\<and> z2]_zs)\n\ngoal (4 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n 4. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n 4. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "case (Binp delta binp)"], ["proof (state)\nthis:\n  wlsOpS delta\n  barOf delta ?i1 = None \\<and> binp ?i1 = None \\<or>\n  (\\<exists>us s A.\n      barOf delta ?i1 = Some (us, s) \\<and>\n      binp ?i1 = Some A \\<and>\n      wlsAbs (us, s) A \\<and> wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\n\ngoal (4 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\\<rbrakk>\n       \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n 4. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "then"], ["proof (chain)\npicking this:\n  wlsOpS delta\n  barOf delta ?i1 = None \\<and> binp ?i1 = None \\<or>\n  (\\<exists>us s A.\n      barOf delta ?i1 = Some (us, s) \\<and>\n      binp ?i1 = Some A \\<and>\n      wlsAbs (us, s) A \\<and> wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))", "show ?case"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta ?i1 = None \\<and> binp ?i1 = None \\<or>\n  (\\<exists>us s A.\n      barOf delta ?i1 = Some (us, s) \\<and>\n      binp ?i1 = Some A \\<and>\n      wlsAbs (us, s) A \\<and> wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\n\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[z1 \\<and> z2]_zs)", "unfolding wlsBinp_iff sameDom_def liftAll2_def lift_def swapBinp_def"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta ?i1 = None \\<and> binp ?i1 = None \\<or>\n  (\\<exists>us s A.\n      barOf delta ?i1 = Some (us, s) \\<and>\n      binp ?i1 = Some A \\<and>\n      wlsAbs (us, s) A \\<and> wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i.\n        (barOf delta i = None) =\n        ((case binp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[z1 \\<and> z2]_zs)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf delta i = Some v1 \\<and>\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v $[z1 \\<and> z2]_zs)) =\n        Some v2 \\<longrightarrow>\n        wlsAbs v1 v2)", "using option.sel"], ["proof (prove)\nusing this:\n  wlsOpS delta\n  barOf delta ?i1 = None \\<and> binp ?i1 = None \\<or>\n  (\\<exists>us s A.\n      barOf delta ?i1 = Some (us, s) \\<and>\n      binp ?i1 = Some A \\<and>\n      wlsAbs (us, s) A \\<and> wlsAbs (us, s) (A $[z1 \\<and> z2]_zs))\n  the (Some ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    (\\<forall>i.\n        (barOf delta i = None) =\n        ((case binp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (v $[z1 \\<and> z2]_zs)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf delta i = Some v1 \\<and>\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v $[z1 \\<and> z2]_zs)) =\n        Some v2 \\<longrightarrow>\n        wlsAbs v1 v2)", "by (fastforce simp add: split: option.splits)"], ["proof (state)\nthis:\n  wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\n\ngoal (3 subgoals):\n 1. \\<And>xs x. wls (asSort xs) (Var xs x #[z1 \\<and> z2]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsInp delta (inp %[z1 \\<and> z2]_zs);\n        wlsBinp delta binp;\n        wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wls (stOf delta)\n                          (Op delta inp binp #[z1 \\<and> z2]_zs)\n 3. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        wls s (X #[z1 \\<and> z2]_zs)\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X $[z1 \\<and> z2]_zs)", "qed(insert Cons_preserve_wls, simp_all)"], ["", "lemma swap_preserves_wls[simp]:\n\"wls s X \\<Longrightarrow> wls s (X #[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow> wls s (X #[z1 \\<and> z2]_zs)", "by(simp add: swapAll_pres_wlsAll)"], ["", "lemma swap_preserves_wls2[simp]:\nassumes \"good X\"\nshows \"wls s (X #[z1 \\<and> z2]_zs) = wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (X #[z1 \\<and> z2]_zs) = wls s X", "using assms swap_preserves_wls[of s \"X #[z1 \\<and> z2]_zs\" zs z1 z2]"], ["proof (prove)\nusing this:\n  good X\n  wls s (X #[z1 \\<and> z2]_zs) \\<Longrightarrow>\n  wls s (X #[z1 \\<and> z2]_zs #[z1 \\<and> z2]_zs)\n\ngoal (1 subgoal):\n 1. wls s (X #[z1 \\<and> z2]_zs) = wls s X", "by auto"], ["", "lemma swap_preserves_wls3:\nassumes \"good X\" and \"good Y\"\nand \"(X #[x1 \\<and> x2]_xs) = (Y #[y1 \\<and> y2]_ys)\"\nshows \"wls s X = wls s Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X = wls s Y", "by (metis assms swap_preserves_wls2)"], ["", "lemma swapAbs_preserves_wls[simp]:\n\"wlsAbs (xs,x) A \\<Longrightarrow> wlsAbs (xs,x) (A $[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, x) A \\<Longrightarrow> wlsAbs (xs, x) (A $[z1 \\<and> z2]_zs)", "by(simp add: swapAll_pres_wlsAll)"], ["", "lemma swapInp_preserves_wls[simp]:\n\"wlsInp delta inp \\<Longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp \\<Longrightarrow> wlsInp delta (inp %[z1 \\<and> z2]_zs)", "by(simp add: swapAll_pres_wlsAll)"], ["", "lemma swapBinp_preserves_wls[simp]:\n\"wlsBinp delta binp \\<Longrightarrow> wlsBinp delta (binp %%[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp \\<Longrightarrow>\n    wlsBinp delta (binp %%[z1 \\<and> z2]_zs)", "by(simp add: swapAll_pres_wlsAll)"], ["", "lemma swapEnvDom_preserves_wls:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (swapEnvDom xs x y rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "fix xsa ys"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "let ?Left = \"{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "have \"|{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "using assms var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "unfolding wlsEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys. liftAll (wls (asSort ys)) (rho ys)) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "by fastforce"], ["proof (state)\nthis:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "hence \"|{x,y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "using var_infinite_INNER card_of_Un_singl_ordLess_infinite"], ["proof (prove)\nusing this:\n  |{y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  infinite UNIV\n  infinite ?B \\<Longrightarrow>\n  (|?A| <o |?B|) = (|{?a} \\<union> ?A| <o |?B|)\n\ngoal (1 subgoal):\n 1. |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|", "by fastforce"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "moreover"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "{"], ["proof (state)\nthis:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "have \"?Left \\<subseteq> {x,y} \\<union> {ya. rho ys ya \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n    \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}", "unfolding swapEnvDom_def sw_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ya.\n     rho ys\n      (if xs = ys then if ya = x then y else if ya = y then x else ya\n       else ya) \\<noteq>\n     None}\n    \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}", "by auto"], ["proof (state)\nthis:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "hence \"|?Left| \\<le>o |{x,y} \\<union> {ya. rho ys ya \\<noteq> None}|\""], ["proof (prove)\nusing this:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n    |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  {ya. swapEnvDom xs x y rho ys ya \\<noteq> None}\n  \\<subseteq> {x, y} \\<union> {ya. rho ys ya \\<noteq> None}\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n    |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "by auto"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "}"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "ultimately"], ["proof (chain)\npicking this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|", "have \"|?Left| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}| <o |UNIV|\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| \\<le>o\n  |{x, y} \\<union> {ya. rho ys ya \\<noteq> None}|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "}"], ["proof (state)\nthis:\n  |{ya. swapEnvDom xs x y rho ?ys3 ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "thus ?thesis"], ["proof (prove)\nusing this:\n  |{ya. swapEnvDom xs x y rho ?ys3 ya \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "using assms"], ["proof (prove)\nusing this:\n  |{ya. swapEnvDom xs x y rho ?ys3 ya \\<noteq> None}| <o |UNIV|\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvDom xs x y rho)", "unfolding wlsEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  |{ya. swapEnvDom xs x y rho ?ys3 ya \\<noteq> None}| <o |UNIV|\n  (\\<forall>ys i v.\n      rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        swapEnvDom xs x y rho ys i = Some v \\<longrightarrow>\n        wls (asSort ys) v) \\<and>\n    (\\<forall>ys.\n        |{ya. swapEnvDom xs x y rho ys ya \\<noteq> None}| <o |UNIV|)", "by (auto simp add: swapEnvDom_def)"], ["proof (state)\nthis:\n  wlsEnv (swapEnvDom xs x y rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnvIm_preserves_wls:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (swapEnvIm xs x y rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvIm xs x y rho)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvIm xs x y rho)", "unfolding wlsEnv_def swapEnvIm_def liftAll_def lift_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v.\n      rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        (case rho ys i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v #[x \\<and> y]_xs)) =\n        Some v \\<longrightarrow>\n        wls (asSort ys) v) \\<and>\n    (\\<forall>ys.\n        |{ya.\n          (case rho ys ya of None \\<Rightarrow> None\n           | Some v \\<Rightarrow> Some (v #[x \\<and> y]_xs)) \\<noteq>\n          None}| <o\n        |UNIV|)", "by (auto split: option.splits)"], ["", "lemma swapEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (rho &[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (rho &[z1 \\<and> z2]_zs)", "unfolding swapEnv_def comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvIm zs z1 z2 (swapEnvDom zs z1 z2 rho))", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsEnv (swapEnvIm zs z1 z2 (swapEnvDom zs z1 z2 rho))", "by(auto simp: swapEnvDom_preserves_wls swapEnvIm_preserves_wls)"], ["", "lemmas swapAll_preserve_wls =\nswap_preserves_wls swapAbs_preserves_wls\nswapInp_preserves_wls swapBinp_preserves_wls\nswapEnv_preserves_wls"], ["", "lemma swapped_preserves_wls:\nassumes \"wls s X\" and \"(X,Y) \\<in> swapped\"\nshows \"wls s Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wls s Y", "have \"(X,Y) \\<in> swapped \\<Longrightarrow> wls s X \\<longrightarrow> wls s Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, Y) \\<in> swapped \\<Longrightarrow> wls s X \\<longrightarrow> wls s Y", "by (induct rule: swapped.induct) auto"], ["proof (state)\nthis:\n  (X, Y) \\<in> swapped \\<Longrightarrow> wls s X \\<longrightarrow> wls s Y\n\ngoal (1 subgoal):\n 1. wls s Y", "thus ?thesis"], ["proof (prove)\nusing this:\n  (X, Y) \\<in> swapped \\<Longrightarrow> wls s X \\<longrightarrow> wls s Y\n\ngoal (1 subgoal):\n 1. wls s Y", "using assms"], ["proof (prove)\nusing this:\n  (X, Y) \\<in> swapped \\<Longrightarrow> wls s X \\<longrightarrow> wls s Y\n  wls s X\n  (X, Y) \\<in> swapped\n\ngoal (1 subgoal):\n 1. wls s Y", "by simp"], ["proof (state)\nthis:\n  wls s Y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Inversion rules for well-sortedness\\<close>"], ["", "lemma wlsAll_inversion:\n\"(wls s X \\<longrightarrow>\n  (\\<forall> xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n                     stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp))\n\\<and>\n(wlsAbs xs_s A \\<longrightarrow>\n isInBar xs_s \\<and>\n (\\<forall> x X. good X \\<and> A = Abs (fst xs_s) x X \\<longrightarrow>\n         wls (snd xs_s) X))\n\\<and>\n(wlsInp delta inp \\<longrightarrow> True)\n\\<and>\n(wlsBinp delta binp \\<longrightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow>\n     (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n     (\\<forall>delta inp binp.\n         goodInp inp \\<and>\n         goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n         stOf delta = s \\<and>\n         wlsInp delta inp \\<and> wlsBinp delta binp)) \\<and>\n    (wlsAbs xs_s A \\<longrightarrow>\n     isInBar xs_s \\<and>\n     (\\<forall>x X.\n         good X \\<and> A = Abs (fst xs_s) x X \\<longrightarrow>\n         wls (snd xs_s) X)) \\<and>\n    (wlsInp delta inp \\<longrightarrow> True) \\<and>\n    (wlsBinp delta binp \\<longrightarrow> True)", "proof(induct rule: wls_wlsAbs_wlsInp_wlsBinp.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       (\\<forall>xsa xa.\n           Var xs x = Var xsa xa \\<longrightarrow>\n           asSort xs = asSort xsa) \\<and>\n       (\\<forall>delta inp binp.\n           goodInp inp \\<and>\n           goodBinp binp \\<and>\n           Var xs x = Op delta inp binp \\<longrightarrow>\n           stOf delta = asSort xs \\<and>\n           wlsInp delta inp \\<and> wlsBinp delta binp)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; True; wlsBinp delta binp; True\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xs x.\n                             Op delta inp binp = Var xs x \\<longrightarrow>\n                             stOf delta = asSort xs) \\<and>\n                         (\\<forall>deltaa inpa binpa.\n                             goodInp inpa \\<and>\n                             goodBinp binpa \\<and>\n                             Op delta inp binp =\n                             Op deltaa inpa binpa \\<longrightarrow>\n                             stOf deltaa = stOf delta \\<and>\n                             wlsInp deltaa inpa \\<and> wlsBinp deltaa binpa)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and>\n               (\\<forall>xs x.\n                   X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n               (\\<forall>delta inp binp.\n                   goodInp inp \\<and>\n                   goodBinp binp \\<and>\n                   X = Op delta inp binp \\<longrightarrow>\n                   stOf delta = s \\<and>\n                   wlsInp delta inp \\<and> wlsBinp delta binp))\\<rbrakk>\n       \\<Longrightarrow> True\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               isInBar (us, s) \\<and>\n               (\\<forall>x X.\n                   good X \\<and> A = Abs (fst (us, s)) x X \\<longrightarrow>\n                   wls (snd (us, s)) X))\\<rbrakk>\n       \\<Longrightarrow> True\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n        (\\<forall>delta inp binp.\n            goodInp inp \\<and>\n            goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n            stOf delta = s \\<and>\n            wlsInp delta inp \\<and> wlsBinp delta binp)\\<rbrakk>\n       \\<Longrightarrow> isInBar (xs, s) \\<and>\n                         (\\<forall>xa Xa.\n                             good Xa \\<and>\n                             Abs xs x X =\n                             Abs (fst (xs, s)) xa Xa \\<longrightarrow>\n                             wls (snd (xs, s)) Xa)", "case (Abs xs s X x)"], ["proof (state)\nthis:\n  isInBar (xs, s)\n  wls s X\n  (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n      stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\n\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       (\\<forall>xsa xa.\n           Var xs x = Var xsa xa \\<longrightarrow>\n           asSort xs = asSort xsa) \\<and>\n       (\\<forall>delta inp binp.\n           goodInp inp \\<and>\n           goodBinp binp \\<and>\n           Var xs x = Op delta inp binp \\<longrightarrow>\n           stOf delta = asSort xs \\<and>\n           wlsInp delta inp \\<and> wlsBinp delta binp)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; True; wlsBinp delta binp; True\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xs x.\n                             Op delta inp binp = Var xs x \\<longrightarrow>\n                             stOf delta = asSort xs) \\<and>\n                         (\\<forall>deltaa inpa binpa.\n                             goodInp inpa \\<and>\n                             goodBinp binpa \\<and>\n                             Op delta inp binp =\n                             Op deltaa inpa binpa \\<longrightarrow>\n                             stOf deltaa = stOf delta \\<and>\n                             wlsInp deltaa inpa \\<and> wlsBinp deltaa binpa)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and>\n               (\\<forall>xs x.\n                   X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n               (\\<forall>delta inp binp.\n                   goodInp inp \\<and>\n                   goodBinp binp \\<and>\n                   X = Op delta inp binp \\<longrightarrow>\n                   stOf delta = s \\<and>\n                   wlsInp delta inp \\<and> wlsBinp delta binp))\\<rbrakk>\n       \\<Longrightarrow> True\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               isInBar (us, s) \\<and>\n               (\\<forall>x X.\n                   good X \\<and> A = Abs (fst (us, s)) x X \\<longrightarrow>\n                   wls (snd (us, s)) X))\\<rbrakk>\n       \\<Longrightarrow> True\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n        (\\<forall>delta inp binp.\n            goodInp inp \\<and>\n            goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n            stOf delta = s \\<and>\n            wlsInp delta inp \\<and> wlsBinp delta binp)\\<rbrakk>\n       \\<Longrightarrow> isInBar (xs, s) \\<and>\n                         (\\<forall>xa Xa.\n                             good Xa \\<and>\n                             Abs xs x X =\n                             Abs (fst (xs, s)) xa Xa \\<longrightarrow>\n                             wls (snd (xs, s)) Xa)", "then"], ["proof (chain)\npicking this:\n  isInBar (xs, s)\n  wls s X\n  (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n      stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)", "show ?case"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n      stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\n\ngoal (1 subgoal):\n 1. isInBar (xs, s) \\<and>\n    (\\<forall>xa X.\n        good X \\<and> Abs xs x X = Abs (fst (xs, s)) xa X \\<longrightarrow>\n        wls (snd (xs, s)) X)", "using swap_preserves_wls3 wls_imp_good"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n      stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\n  \\<lbrakk>good ?X; good ?Y;\n   ?X #[?x1.0 \\<and> ?x2.0]_?xs = ?Y #[?y1.0 \\<and> ?y2.0]_?ys\\<rbrakk>\n  \\<Longrightarrow> wls ?s ?X = wls ?s ?Y\n  wls ?s ?X \\<Longrightarrow> good ?X\n\ngoal (1 subgoal):\n 1. isInBar (xs, s) \\<and>\n    (\\<forall>xa X.\n        good X \\<and> Abs xs x X = Abs (fst (xs, s)) xa X \\<longrightarrow>\n        wls (snd (xs, s)) X)", "by (metis FixVars.Abs_ainj_ex FixVars_axioms snd_conv)"], ["proof (state)\nthis:\n  isInBar (xs, s) \\<and>\n  (\\<forall>xa X.\n      good X \\<and> Abs xs x X = Abs (fst (xs, s)) xa X \\<longrightarrow>\n      wls (snd (xs, s)) X)\n\ngoal (4 subgoals):\n 1. \\<And>xs x.\n       (\\<forall>xsa xa.\n           Var xs x = Var xsa xa \\<longrightarrow>\n           asSort xs = asSort xsa) \\<and>\n       (\\<forall>delta inp binp.\n           goodInp inp \\<and>\n           goodBinp binp \\<and>\n           Var xs x = Op delta inp binp \\<longrightarrow>\n           stOf delta = asSort xs \\<and>\n           wlsInp delta inp \\<and> wlsBinp delta binp)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; True; wlsBinp delta binp; True\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xs x.\n                             Op delta inp binp = Var xs x \\<longrightarrow>\n                             stOf delta = asSort xs) \\<and>\n                         (\\<forall>deltaa inpa binpa.\n                             goodInp inpa \\<and>\n                             goodBinp binpa \\<and>\n                             Op delta inp binp =\n                             Op deltaa inpa binpa \\<longrightarrow>\n                             stOf deltaa = stOf delta \\<and>\n                             wlsInp deltaa inpa \\<and> wlsBinp deltaa binpa)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and>\n               (\\<forall>xs x.\n                   X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n               (\\<forall>delta inp binp.\n                   goodInp inp \\<and>\n                   goodBinp binp \\<and>\n                   X = Op delta inp binp \\<longrightarrow>\n                   stOf delta = s \\<and>\n                   wlsInp delta inp \\<and> wlsBinp delta binp))\\<rbrakk>\n       \\<Longrightarrow> True\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and>\n               isInBar (us, s) \\<and>\n               (\\<forall>x X.\n                   good X \\<and> A = Abs (fst (us, s)) x X \\<longrightarrow>\n                   wls (snd (us, s)) X))\\<rbrakk>\n       \\<Longrightarrow> True", "qed (auto simp: Abs_ainj_ex)"], ["", "lemma conjLeft: \"\\<lbrakk>phi1 \\<and> phi2; phi1 \\<Longrightarrow> chi\\<rbrakk> \\<Longrightarrow> chi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>phi1 \\<and> phi2; phi1 \\<Longrightarrow> chi\\<rbrakk>\n    \\<Longrightarrow> chi", "by blast"], ["", "lemma conjRight: \"\\<lbrakk>phi1 \\<and> phi2; phi2 \\<Longrightarrow> chi\\<rbrakk> \\<Longrightarrow> chi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>phi1 \\<and> phi2; phi2 \\<Longrightarrow> chi\\<rbrakk>\n    \\<Longrightarrow> chi", "by blast"], ["", "(* For the next three lemmas, I could not use the simp, auto etc.\npowerhorses freely -- for some reason, they loop\\<dots> *)"], ["", "lemma wls_inversion[rule_format]:\n\"wls s X \\<longrightarrow>\n (\\<forall> xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n (\\<forall> delta inp binp. goodInp inp \\<and> goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n                    stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<longrightarrow>\n    (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n    (\\<forall>delta inp binp.\n        goodInp inp \\<and>\n        goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n        stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)", "using wlsAll_inversion \n[of s X undefined undefined undefined undefined undefined]"], ["proof (prove)\nusing this:\n  (wls s X \\<longrightarrow>\n   (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n   (\\<forall>delta inp binp.\n       goodInp inp \\<and>\n       goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n       stOf delta = s \\<and>\n       wlsInp delta inp \\<and> wlsBinp delta binp)) \\<and>\n  (wlsAbs undefined undefined \\<longrightarrow>\n   isInBar undefined \\<and>\n   (\\<forall>x X.\n       good X \\<and> undefined = Abs (fst undefined) x X \\<longrightarrow>\n       wls (snd undefined) X)) \\<and>\n  (wlsInp undefined undefined \\<longrightarrow> True) \\<and>\n  (wlsBinp undefined undefined \\<longrightarrow> True)\n\ngoal (1 subgoal):\n 1. wls s X \\<longrightarrow>\n    (\\<forall>xs x. X = Var xs x \\<longrightarrow> s = asSort xs) \\<and>\n    (\\<forall>delta inp binp.\n        goodInp inp \\<and>\n        goodBinp binp \\<and> X = Op delta inp binp \\<longrightarrow>\n        stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)", "by (rule conjLeft)"], ["", "lemma wlsAbs_inversion[rule_format]:\n\"wlsAbs (xs,s) A \\<longrightarrow>\n isInBar (xs,s) \\<and>\n (\\<forall> x X. good X \\<and> A = Abs xs x X \\<longrightarrow> wls s X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<longrightarrow>\n    isInBar (xs, s) \\<and>\n    (\\<forall>x X. good X \\<and> A = Abs xs x X \\<longrightarrow> wls s X)", "using wlsAll_inversion\n[of undefined undefined \"(xs,s)\" A undefined undefined undefined]"], ["proof (prove)\nusing this:\n  (wls undefined undefined \\<longrightarrow>\n   (\\<forall>xs x.\n       undefined = Var xs x \\<longrightarrow> undefined = asSort xs) \\<and>\n   (\\<forall>delta inp binp.\n       goodInp inp \\<and>\n       goodBinp binp \\<and> undefined = Op delta inp binp \\<longrightarrow>\n       stOf delta = undefined \\<and>\n       wlsInp delta inp \\<and> wlsBinp delta binp)) \\<and>\n  (wlsAbs (xs, s) A \\<longrightarrow>\n   isInBar (xs, s) \\<and>\n   (\\<forall>x X.\n       good X \\<and> A = Abs (fst (xs, s)) x X \\<longrightarrow>\n       wls (snd (xs, s)) X)) \\<and>\n  (wlsInp undefined undefined \\<longrightarrow> True) \\<and>\n  (wlsBinp undefined undefined \\<longrightarrow> True)\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<longrightarrow>\n    isInBar (xs, s) \\<and>\n    (\\<forall>x X. good X \\<and> A = Abs xs x X \\<longrightarrow> wls s X)", "by auto"], ["", "lemma wls_Var_simp[simp]:\n\"wls s (Var xs x) =  (s = asSort xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (Var xs x) = (s = asSort xs)", "using wls_inversion"], ["proof (prove)\nusing this:\n  wls ?s ?X \\<Longrightarrow>\n  (\\<forall>xs x. ?X = Var xs x \\<longrightarrow> ?s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> ?X = Op delta inp binp \\<longrightarrow>\n      stOf delta = ?s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\n\ngoal (1 subgoal):\n 1. wls s (Var xs x) = (s = asSort xs)", "by auto"], ["", "lemma wls_Op_simp[simp]:\nassumes \"goodInp inp\" and \"goodBinp binp\"\nshows\n\"wls s (Op delta inp binp) =\n (stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (Op delta inp binp) =\n    (stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)", "using Op assms wls_inversion"], ["proof (prove)\nusing this:\n  \\<lbrakk>wlsInp ?delta ?inp; wlsBinp ?delta ?binp\\<rbrakk>\n  \\<Longrightarrow> wls (stOf ?delta) (Op ?delta ?inp ?binp)\n  goodInp inp\n  goodBinp binp\n  wls ?s ?X \\<Longrightarrow>\n  (\\<forall>xs x. ?X = Var xs x \\<longrightarrow> ?s = asSort xs) \\<and>\n  (\\<forall>delta inp binp.\n      goodInp inp \\<and>\n      goodBinp binp \\<and> ?X = Op delta inp binp \\<longrightarrow>\n      stOf delta = ?s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)\n\ngoal (1 subgoal):\n 1. wls s (Op delta inp binp) =\n    (stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp)", "by blast"], ["", "lemma wls_Abs_simp[simp]:\nassumes \"good X\"\nshows \"wlsAbs (xs,s) (Abs xs x X) = (isInBar (xs,s) \\<and> wls s X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X) = (isInBar (xs, s) \\<and> wls s X)", "using Abs assms wlsAbs_inversion"], ["proof (prove)\nusing this:\n  \\<lbrakk>isInBar (?xs, ?s); wls ?s ?X\\<rbrakk>\n  \\<Longrightarrow> wlsAbs (?xs, ?s) (Abs ?xs ?x ?X)\n  good X\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  isInBar (?xs, ?s) \\<and>\n  (\\<forall>x X. good X \\<and> ?A = Abs ?xs x X \\<longrightarrow> wls ?s X)\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X) = (isInBar (xs, s) \\<and> wls s X)", "by blast"], ["", "lemma wlsAll_inversion2:\n\"(wls s X \\<longrightarrow> True)\n\\<and>\n(wlsAbs xs_s A \\<longrightarrow>\n isInBar xs_s \\<and>\n (\\<exists> x X. wls (snd xs_s) X \\<and> A = Abs (fst xs_s) x X))\n\\<and>\n(wlsInp delta inp \\<longrightarrow> True)\n\\<and>\n(wlsBinp delta binp \\<longrightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> True) \\<and>\n    (wlsAbs xs_s A \\<longrightarrow>\n     isInBar xs_s \\<and>\n     (\\<exists>x X. wls (snd xs_s) X \\<and> A = Abs (fst xs_s) x X)) \\<and>\n    (wlsInp delta inp \\<longrightarrow> True) \\<and>\n    (wlsBinp delta binp \\<longrightarrow> True)", "by (induct rule: wls_wlsAbs_wlsInp_wlsBinp.induct)\n  (auto simp add: Abs_ainj_ex simp del: not_None_eq)"], ["", "lemma wlsAbs_inversion2[rule_format]:\n\"wlsAbs (xs,s) A \\<longrightarrow>\n isInBar (xs,s) \\<and> (\\<exists> x X. wls s X \\<and> A = Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<longrightarrow>\n    isInBar (xs, s) \\<and> (\\<exists>x X. wls s X \\<and> A = Abs xs x X)", "using wlsAll_inversion2"], ["proof (prove)\nusing this:\n  (wls ?s ?X \\<longrightarrow> True) \\<and>\n  (wlsAbs ?xs_s ?A \\<longrightarrow>\n   isInBar ?xs_s \\<and>\n   (\\<exists>x X. wls (snd ?xs_s) X \\<and> ?A = Abs (fst ?xs_s) x X)) \\<and>\n  (wlsInp ?delta ?inp \\<longrightarrow> True) \\<and>\n  (wlsBinp ?delta ?binp \\<longrightarrow> True)\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<longrightarrow>\n    isInBar (xs, s) \\<and> (\\<exists>x X. wls s X \\<and> A = Abs xs x X)", "by auto"], ["", "corollary wlsAbs_Abs_varSort:\nassumes X: \"good X\" and wlsAbs: \"wlsAbs (xs,s) (Abs xs' x X)\"\nshows \"xs = xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs'", "by (metis Abs_ainj_all X wlsAbs wlsAbs_inversion2 wls_imp_good)"], ["", "lemma wlsAbs:\n\"wlsAbs (xs,s) A \\<longleftrightarrow> \n isInBar (xs,s) \\<and> (\\<exists> x X. wls s X \\<and> A = Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A =\n    (isInBar (xs, s) \\<and> (\\<exists>x X. wls s X \\<and> A = Abs xs x X))", "using Abs wlsAbs_inversion2"], ["proof (prove)\nusing this:\n  \\<lbrakk>isInBar (?xs, ?s); wls ?s ?X\\<rbrakk>\n  \\<Longrightarrow> wlsAbs (?xs, ?s) (Abs ?xs ?x ?X)\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  isInBar (?xs, ?s) \\<and> (\\<exists>x X. wls ?s X \\<and> ?A = Abs ?xs x X)\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A =\n    (isInBar (xs, s) \\<and> (\\<exists>x X. wls s X \\<and> A = Abs xs x X))", "by blast"], ["", "lemma wlsAbs_Abs[simp]:\nassumes X: \"good X\"\nshows \"wlsAbs (xs',s) (Abs xs x X) = (isInBar (xs',s) \\<and> xs = xs' \\<and> wls s X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs', s) (Abs xs x X) =\n    (isInBar (xs', s) \\<and> xs = xs' \\<and> wls s X)", "using assms wlsAbs_Abs_varSort"], ["proof (prove)\nusing this:\n  good X\n  \\<lbrakk>good ?X; wlsAbs (?xs, ?s) (Abs ?xs' ?x ?X)\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?xs'\n\ngoal (1 subgoal):\n 1. wlsAbs (xs', s) (Abs xs x X) =\n    (isInBar (xs', s) \\<and> xs = xs' \\<and> wls s X)", "by fastforce"], ["", "lemmas Cons_wls_simps =\nwls_Var_simp wls_Op_simp wls_Abs_simp wlsAbs_Abs"], ["", "subsection \\<open>Induction principles for well-sorted terms\\<close>"], ["", "subsubsection \\<open>Regular induction\\<close>"], ["", "(* See also the subsection on substitution of variables for variables\nfrom the section on compositional properties\nfor an induction principle involving a choice between swap, subst and skeleton\nfor the abstraction case.  *)"], ["", "theorem wls_templateInduct[case_names rel Var Op Abs]:\nassumes\nrel: \"\\<And> s X Y. \\<lbrakk>wls s X;  (X,Y) \\<in> rel s\\<rbrakk> \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp;  wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X; \\<And> Y. (X,Y) \\<in> rel s \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "have \"(good X \\<longrightarrow> (\\<forall> s. wls s X \\<longrightarrow> phi s X)) \\<and>\n        (goodAbs A \\<longrightarrow> (\\<forall> xs s. wlsAbs (xs,s) A \\<longrightarrow> phiAbs (xs,s) A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))", "apply(induct rule: term_templateInduct[of \"{(X,Y). \\<exists> s. wls s X \\<and> (X,Y) \\<in> rel s}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X;\n        (X, Y)\n        \\<in> {(X, Y).\n               \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x.\n       \\<forall>s. wls s (Var xs x) \\<longrightarrow> phi s (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     (X_, Y_)\n     \\<in> {(X, Y). \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n    \\<Longrightarrow> good Y_ \\<and> skel Y_ = skel X_", "using rel wls_imp_good"], ["proof (prove)\nusing this:\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n  wls ?s ?X \\<Longrightarrow> good ?X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     (X_, Y_)\n     \\<in> {(X, Y). \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n    \\<Longrightarrow> good Y_ \\<and> skel Y_ = skel X_", "by blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>s. wls s (Var xs x) \\<longrightarrow> phi s (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. wls s (Var xs_ x_) \\<longrightarrow> phi s (Var xs_ x_)", "using Var"], ["proof (prove)\nusing this:\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n\ngoal (1 subgoal):\n 1. \\<forall>s. wls s (Var xs_ x_) \\<longrightarrow> phi s (Var xs_ x_)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodInp inp_; goodBinp binp_;\n     liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n      inp_;\n     liftAll\n      (\\<lambda>a.\n          \\<forall>xs s.\n             wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n      binp_\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s.\n                         wls s (Op delta_ inp_ binp_) \\<longrightarrow>\n                         phi s (Op delta_ inp_ binp_)", "by (auto intro!: Op simp: wlsInp_iff wlsBinp_iff liftAll_def liftAll2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     \\<And>Y.\n        (X_, Y)\n        \\<in> {(X, Y).\n               \\<exists>s.\n                  wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n        \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xs s.\n                         wlsAbs (xs, s) (Abs xs_ x_ X_) \\<longrightarrow>\n                         phiAbs (xs, s) (Abs xs_ x_ X_)", "using Abs rel"], ["proof (prove)\nusing this:\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1;\n   \\<And>Y. (?X1, Y) \\<in> rel ?s1 \\<Longrightarrow> phi ?s1 Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     \\<And>Y.\n        (X_, Y)\n        \\<in> {(X, Y).\n               \\<exists>s.\n                  wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n        \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xs s.\n                         wlsAbs (xs, s) (Abs xs_ x_ X_) \\<longrightarrow>\n                         phiAbs (xs, s) (Abs xs_ x_ X_)", "by simp blast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  (good X \\<longrightarrow>\n   (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (good X \\<longrightarrow>\n   (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "by auto"], ["proof (state)\nthis:\n  (wls s X \\<longrightarrow> phi s X) \\<and>\n  (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_rawInduct[case_names Var Op Abs]:\nassumes\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp;  wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs: \"\\<And> s xs x X. \\<lbrakk>isInBar (xs,s); wls s X; phi s X\\<rbrakk> \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "by (induct rule: wls_templateInduct[of \"\\<lambda>s. Id\"]) (simp_all add: assms)"], ["", "subsubsection \\<open>Fresh induction\\<close>"], ["", "text \\<open>First for an unspecified notion of parameter:\\<close>"], ["", "theorem wls_templateInduct_fresh[case_names Par Rel Var Op Abs]:\nfixes s X xs s' A phi phiAbs rel\nand vars :: \"'varSort \\<Rightarrow> 'var set\"\nand terms :: \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\"\nand abs :: \"('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\"\nand envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs us s.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms s| <o |UNIV :: 'var set| \\<or> finite (terms s)) \\<and>\n   ( |abs (us,s)| <o |UNIV :: 'var set| \\<or> finite (abs (us,s))) \\<and>\n   (\\<forall> X \\<in> terms s. wls s X) \\<and>\n   (\\<forall> A \\<in> abs (us,s). wlsAbs (us,s) A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite (envs)) \\<and>\n   (\\<forall> rho \\<in> envs. wlsEnv rho)\" and\nrel: \"\\<And> s X Y. \\<lbrakk>wls s X;  (X,Y) \\<in> rel s\\<rbrakk> \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n    \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n     liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n     liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n    \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> vars xs;\n    \\<And> s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> xs' s' A. A \\<in> abs (xs',s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n    \\<And> Y. (X,Y) \\<in> rel s \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "let ?terms = \"\\<Union> s. terms s\""], ["proof (state)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "let ?abs = \"\\<Union> xs s. abs (xs,s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "have \"\\<forall> s. |terms s| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. |terms s| <o |UNIV|", "using PAR var_infinite_INNER finite_ordLess_infinite2"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  infinite UNIV\n  \\<lbrakk>finite ?A; infinite ?B\\<rbrakk> \\<Longrightarrow> |?A| <o |?B|\n\ngoal (1 subgoal):\n 1. \\<forall>s. |terms s| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  \\<forall>s. |terms s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "hence 1:\"|\\<Union>s. terms s| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>s. |terms s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union> (range terms)| <o |UNIV|", "using sort_lt_var_INNER var_regular_INNER regular_UNION"], ["proof (prove)\nusing this:\n  \\<forall>s. |terms s| <o |UNIV|\n  |UNIV| <o |UNIV|\n  regular |UNIV|\n  \\<lbrakk>regular ?r; |?A| <o ?r;\n   \\<And>a. a \\<in> ?A \\<Longrightarrow> |?F a| <o ?r\\<rbrakk>\n  \\<Longrightarrow> |\\<Union> (?F ` ?A)| <o ?r\n\ngoal (1 subgoal):\n 1. |\\<Union> (range terms)| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |\\<Union> (range terms)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "have \"\\<forall> us s. |abs (us,s)| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>us s. |abs (us, s)| <o |UNIV|", "using PAR var_infinite_INNER finite_ordLess_infinite2"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  infinite UNIV\n  \\<lbrakk>finite ?A; infinite ?B\\<rbrakk> \\<Longrightarrow> |?A| <o |?B|\n\ngoal (1 subgoal):\n 1. \\<forall>us s. |abs (us, s)| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  \\<forall>us s. |abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "hence \"\\<forall> us. |\\<Union>s. abs (us,s)| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>us s. |abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>us. |\\<Union>s. abs (us, s)| <o |UNIV|", "by(auto simp add: sort_lt_var_INNER var_regular_INNER regular_UNION)"], ["proof (state)\nthis:\n  \\<forall>us. |\\<Union>s. abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "hence 2: \"|\\<Union> us s. abs (us,s)| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>us. |\\<Union>s. abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>us s. abs (us, s)| <o |UNIV|", "using varSort_lt_var_INNER var_regular_INNER"], ["proof (prove)\nusing this:\n  \\<forall>us. |\\<Union>s. abs (us, s)| <o |UNIV|\n  |UNIV| <o |UNIV|\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>us s. abs (us, s)| <o |UNIV|", "by(auto simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>us s. abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "(* *)"], ["proof (state)\nthis:\n  |\\<Union>us s. abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "have \"(good X \\<longrightarrow> (\\<forall> s. wls s X \\<longrightarrow> phi s X)) \\<and>\n        (goodAbs A \\<longrightarrow> (\\<forall> xs s. wlsAbs (xs,s) A \\<longrightarrow> phiAbs (xs,s) A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))", "apply(induct rule: term_templateInduct_fresh\n             [of vars ?terms ?abs envs\n                 \"{(X,Y). \\<exists> s. wls s X \\<and> (X,Y) \\<in> rel s}\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xs.\n       (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n       (|\\<Union> (range terms)| <o |UNIV| \\<or>\n        finite (\\<Union> (range terms))) \\<and>\n       Ball (\\<Union> (range terms)) good \\<and>\n       (|\\<Union>xs s. abs (xs, s)| <o |UNIV| \\<or>\n        finite (\\<Union>xs s. abs (xs, s))) \\<and>\n       Ball (\\<Union>xs s. abs (xs, s)) goodAbs \\<and>\n       (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv\n 2. \\<And>X Y.\n       \\<lbrakk>good X;\n        (X, Y)\n        \\<in> {(X, Y).\n               \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 3. \\<And>xs x.\n       \\<forall>s. wls s (Var xs x) \\<longrightarrow> phi s (Var xs x)\n 4. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 5. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y.\n           Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs x Y;\n        \\<And>A.\n           A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n           freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal for xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n    (|\\<Union> (range terms)| <o |UNIV| \\<or>\n     finite (\\<Union> (range terms))) \\<and>\n    Ball (\\<Union> (range terms)) good \\<and>\n    (|\\<Union>xs s. abs (xs, s)| <o |UNIV| \\<or>\n     finite (\\<Union>xs s. abs (xs, s))) \\<and>\n    Ball (\\<Union>xs s. abs (xs, s)) goodAbs \\<and>\n    (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv", "using PAR 1 2"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  |\\<Union> (range terms)| <o |UNIV|\n  |\\<Union>us s. abs (us, s)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n    (|\\<Union> (range terms)| <o |UNIV| \\<or>\n     finite (\\<Union> (range terms))) \\<and>\n    Ball (\\<Union> (range terms)) good \\<and>\n    (|\\<Union>xs s. abs (xs, s)| <o |UNIV| \\<or>\n     finite (\\<Union>xs s. abs (xs, s))) \\<and>\n    Ball (\\<Union>xs s. abs (xs, s)) goodAbs \\<and>\n    (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs goodEnv", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs s us.\n                (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n                (|terms s| <o |UNIV| \\<or> finite (terms s)) \\<and>\n                (|abs (us, s)| <o |UNIV| \\<or> finite (abs (us, s))) \\<and>\n                (\\<forall>X\\<in>terms s. wls s X) \\<and>\n                (\\<forall>A\\<in>abs (us, s). wlsAbs (us, s) A) \\<and>\n                (|envs| <o |UNIV| \\<or> finite envs) \\<and>\n                Ball envs wlsEnv;\n     |\\<Union> (range terms)| <o |UNIV|;\n     |\\<Union>us s. abs (us, s)| <o |UNIV|\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>y. Ball (terms y) good) \\<and>\n                      (\\<forall>y ya. Ball (abs (y, ya)) goodAbs)", "using wls_imp_good wlsAbs_imp_goodAbs"], ["proof (prove)\nusing this:\n  wls ?s ?X \\<Longrightarrow> good ?X\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow> goodAbs ?A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs s us.\n                (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n                (|terms s| <o |UNIV| \\<or> finite (terms s)) \\<and>\n                (|abs (us, s)| <o |UNIV| \\<or> finite (abs (us, s))) \\<and>\n                (\\<forall>X\\<in>terms s. wls s X) \\<and>\n                (\\<forall>A\\<in>abs (us, s). wlsAbs (us, s) A) \\<and>\n                (|envs| <o |UNIV| \\<or> finite envs) \\<and>\n                Ball envs wlsEnv;\n     |\\<Union> (range terms)| <o |UNIV|;\n     |\\<Union>us s. abs (us, s)| <o |UNIV|\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>y. Ball (terms y) good) \\<and>\n                      (\\<forall>y ya. Ball (abs (y, ya)) goodAbs)", "by blast+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>good X;\n        (X, Y)\n        \\<in> {(X, Y).\n               \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n       \\<Longrightarrow> good Y \\<and> skel Y = skel X\n 2. \\<And>xs x.\n       \\<forall>s. wls s (Var xs x) \\<longrightarrow> phi s (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y.\n           Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs x Y;\n        \\<And>A.\n           A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n           freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     (X_, Y_)\n     \\<in> {(X, Y). \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n    \\<Longrightarrow> good Y_ \\<and> skel Y_ = skel X_", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> vars ?xs1;\n   \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>xs' s' A.\n      A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   \\<And>Y. (?X1, Y) \\<in> rel ?s1 \\<Longrightarrow> phi ?s1 Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_;\n     (X_, Y_)\n     \\<in> {(X, Y). \\<exists>s. wls s X \\<and> (X, Y) \\<in> rel s}\\<rbrakk>\n    \\<Longrightarrow> good Y_ \\<and> skel Y_ = skel X_", "by simp (meson wls_imp_good)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>s. wls s (Var xs x) \\<longrightarrow> phi s (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y.\n           Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs x Y;\n        \\<And>A.\n           A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n           freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. wls s (Var xs_ x_) \\<longrightarrow> phi s (Var xs_ x_)", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> vars ?xs1;\n   \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>xs' s' A.\n      A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   \\<And>Y. (?X1, Y) \\<in> rel ?s1 \\<Longrightarrow> phi ?s1 Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (1 subgoal):\n 1. \\<forall>s. wls s (Var xs_ x_) \\<longrightarrow> phi s (Var xs_ x_)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>xs s.\n                wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            wls s (Op delta inp binp) \\<longrightarrow>\n                            phi s (Op delta inp binp)\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y.\n           Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs x Y;\n        \\<And>A.\n           A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n           freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodInp inp_; goodBinp binp_;\n     liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n      inp_;\n     liftAll\n      (\\<lambda>a.\n          \\<forall>xs s.\n             wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n      binp_\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s.\n                         wls s (Op delta_ inp_ binp_) \\<longrightarrow>\n                         phi s (Op delta_ inp_ binp_)", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> vars ?xs1;\n   \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>xs' s' A.\n      A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   \\<And>Y. (?X1, Y) \\<in> rel ?s1 \\<Longrightarrow> phi ?s1 Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>goodInp inp_; goodBinp binp_;\n     liftAll (\\<lambda>a. \\<forall>s. wls s a \\<longrightarrow> phi s a)\n      inp_;\n     liftAll\n      (\\<lambda>a.\n          \\<forall>xs s.\n             wlsAbs (xs, s) a \\<longrightarrow> phiAbs (xs, s) a)\n      binp_\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s.\n                         wls s (Op delta_ inp_ binp_) \\<longrightarrow>\n                         phi s (Op delta_ inp_ binp_)", "by simp  \n    (smt liftAll2_def liftAll_def option.distinct(1) \n    option.sel wlsBinp.cases wlsInp_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> vars xs;\n        \\<And>Y.\n           Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs x Y;\n        \\<And>A.\n           A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n           freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y).\n                  \\<exists>s.\n                     wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n           \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa s.\n                            wlsAbs (xsa, s) (Abs xs x X) \\<longrightarrow>\n                            phiAbs (xsa, s) (Abs xs x X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_; x_ \\<notin> vars xs_;\n     \\<And>Y.\n        Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs_ x_ Y;\n     \\<And>A.\n        A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n        freshAbs xs_ x_ A;\n     \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs_ x_ rho;\n     \\<And>Y.\n        (X_, Y)\n        \\<in> {(X, Y).\n               \\<exists>s.\n                  wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n        \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xs s.\n                         wlsAbs (xs, s) (Abs xs_ x_ X_) \\<longrightarrow>\n                         phiAbs (xs, s) (Abs xs_ x_ X_)", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  \\<lbrakk>wls ?s1 ?X1; (?X1, ?Y1) \\<in> rel ?s1\\<rbrakk>\n  \\<Longrightarrow> wls ?s1 ?Y1 \\<and> skel ?Y1 = skel ?X1\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> vars ?xs1;\n   \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>xs' s' A.\n      A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   \\<And>Y. (?X1, Y) \\<in> rel ?s1 \\<Longrightarrow> phi ?s1 Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_; x_ \\<notin> vars xs_;\n     \\<And>Y.\n        Y \\<in> \\<Union> (range terms) \\<Longrightarrow> fresh xs_ x_ Y;\n     \\<And>A.\n        A \\<in> (\\<Union>xs s. abs (xs, s)) \\<Longrightarrow>\n        freshAbs xs_ x_ A;\n     \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs_ x_ rho;\n     \\<And>Y.\n        (X_, Y)\n        \\<in> {(X, Y).\n               \\<exists>s.\n                  wls s X \\<and> (X, Y) \\<in> rel s} \\<Longrightarrow>\n        \\<forall>s. wls s Y \\<longrightarrow> phi s Y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xs s.\n                         wlsAbs (xs, s) (Abs xs_ x_ X_) \\<longrightarrow>\n                         phiAbs (xs, s) (Abs xs_ x_ X_)", "by simp metis"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  (good X \\<longrightarrow>\n   (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (good X \\<longrightarrow>\n   (\\<forall>s. wls s X \\<longrightarrow> phi s X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>xs s. wlsAbs (xs, s) A \\<longrightarrow> phiAbs (xs, s) A))\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "by auto"], ["proof (state)\nthis:\n  (wls s X \\<longrightarrow> phi s X) \\<and>\n  (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>A version of the above not employing any relation for\n  the abstraction case:\\<close>"], ["", "theorem wls_rawInduct_fresh[case_names Par Var Op Abs]:\nfixes s X xs s' A phi phiAbs\nand vars :: \"'varSort \\<Rightarrow> 'var set\"\nand terms :: \"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\"\nand abs :: \"('varSort * 'sort) \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\"\nand envs :: \"('index,'bindex,'varSort,'var,'opSym)env set\"\nassumes\nPAR:\n\"\\<And> xs us s.\n   ( |vars xs| <o |UNIV :: 'var set| \\<or> finite (vars xs)) \\<and>\n   ( |terms s| <o |UNIV :: 'var set| \\<or> finite (terms s)) \\<and>\n   (\\<forall> X \\<in> terms s. wls s X) \\<and>\n   ( |abs (us,s)| <o |UNIV :: 'var set| \\<or> finite (abs (us,s))) \\<and>\n   (\\<forall> A \\<in> abs (us,s). wlsAbs (us,s) A) \\<and>\n   ( |envs| <o |UNIV :: 'var set| \\<or> finite (envs)) \\<and>\n   (\\<forall> rho \\<in> envs. wlsEnv rho)\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n    liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> vars xs;\n    \\<And> s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> us s' A. A \\<in> abs (us,s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n    phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "apply(induct rule: wls_templateInduct_fresh[of vars terms abs envs \"\\<lambda>s. Id\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xs us s.\n       (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n       (|terms s| <o |UNIV| \\<or> finite (terms s)) \\<and>\n       (|abs (us, s)| <o |UNIV| \\<or> finite (abs (us, s))) \\<and>\n       (\\<forall>X\\<in>terms s. wls s X) \\<and>\n       (\\<forall>A\\<in>abs (us, s). wlsAbs (us, s) A) \\<and>\n       (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n 2. \\<And>s X Y.\n       \\<lbrakk>wls s X; (X, Y) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\n 3. \\<And>xs x. phi (asSort xs) (Var xs x)\n 4. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf delta)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 5. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> vars xs;\n        \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>xs' s' A.\n           A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y. (X, Y) \\<in> Id \\<Longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  (|vars ?xs1| <o |UNIV| \\<or> finite (vars ?xs1)) \\<and>\n  (|terms ?s1| <o |UNIV| \\<or> finite (terms ?s1)) \\<and>\n  (\\<forall>X\\<in>terms ?s1. wls ?s1 X) \\<and>\n  (|abs (?us1, ?s1)| <o |UNIV| \\<or> finite (abs (?us1, ?s1))) \\<and>\n  (\\<forall>A\\<in>abs (?us1, ?s1). wlsAbs (?us1, ?s1) A) \\<and>\n  (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> vars ?xs1;\n   \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>us s' A.\n      A \\<in> abs (us, s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   phi ?s1 ?X1\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (5 subgoals):\n 1. \\<And>xs us s.\n       (|vars xs| <o |UNIV| \\<or> finite (vars xs)) \\<and>\n       (|terms s| <o |UNIV| \\<or> finite (terms s)) \\<and>\n       (|abs (us, s)| <o |UNIV| \\<or> finite (abs (us, s))) \\<and>\n       (\\<forall>X\\<in>terms s. wls s X) \\<and>\n       (\\<forall>A\\<in>abs (us, s). wlsAbs (us, s) A) \\<and>\n       (|envs| <o |UNIV| \\<or> finite envs) \\<and> Ball envs wlsEnv\n 2. \\<And>s X Y.\n       \\<lbrakk>wls s X; (X, Y) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\n 3. \\<And>xs x. phi (asSort xs) (Var xs x)\n 4. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf delta)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 5. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> vars xs;\n        \\<And>s' Y. Y \\<in> terms s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>xs' s' A.\n           A \\<in> abs (xs', s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envs \\<Longrightarrow> freshEnv xs x rho;\n        \\<And>Y. (X, Y) \\<in> Id \\<Longrightarrow> phi s Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "by auto"], ["", "text\\<open>Then for our notion of sorted parameter:\\<close>"], ["", "theorem wls_induct_fresh[case_names Par Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and s and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and xs s' and\n      P :: \"('index,'bindex,'varSort,'var,'opSym,'sort)paramS\" and phi phiAbs\nassumes\nP: \"wlsPar P\" and\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 (\\<lambda>s X. phi s X) (arOf delta) inp;\n    liftAll2 (\\<lambda>(us,s) A. phiAbs (us,s) A) (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    x \\<notin> varsOfS P xs;\n    \\<And> s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n    \\<And> us s' A. A \\<in> absOfS P (us,s') \\<Longrightarrow> freshAbs xs x A;\n    \\<And> rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n    phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "proof(induct rule: wls_rawInduct_fresh\n      [of \"varsOfS P\" \"termsOfS P\" \"absOfS P\" \"envsOfS P\" _ _ s X xs s' A])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs us s.\n       (|varsOfS P xs| <o |UNIV| \\<or> finite (varsOfS P xs)) \\<and>\n       (|termsOfS P s| <o |UNIV| \\<or> finite (termsOfS P s)) \\<and>\n       (\\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n       (|absOfS P (us, s)| <o |UNIV| \\<or> finite (absOfS P (us, s))) \\<and>\n       (\\<forall>A\\<in>absOfS P (us, s). wlsAbs (us, s) A) \\<and>\n       (|envsOfS P| <o |UNIV| \\<or> finite (envsOfS P)) \\<and>\n       Ball (envsOfS P) wlsEnv\n 2. \\<And>xs x. phi (asSort xs) (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf delta)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 4. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        phi s X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "case (Par xs us s)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>xs us s.\n       (|varsOfS P xs| <o |UNIV| \\<or> finite (varsOfS P xs)) \\<and>\n       (|termsOfS P s| <o |UNIV| \\<or> finite (termsOfS P s)) \\<and>\n       (\\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n       (|absOfS P (us, s)| <o |UNIV| \\<or> finite (absOfS P (us, s))) \\<and>\n       (\\<forall>A\\<in>absOfS P (us, s). wlsAbs (us, s) A) \\<and>\n       (|envsOfS P| <o |UNIV| \\<or> finite (envsOfS P)) \\<and>\n       Ball (envsOfS P) wlsEnv\n 2. \\<And>xs x. phi (asSort xs) (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf delta)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 4. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        phi s X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (|varsOfS P xs| <o |UNIV| \\<or> finite (varsOfS P xs)) \\<and>\n    (|termsOfS P s| <o |UNIV| \\<or> finite (termsOfS P s)) \\<and>\n    (\\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n    (|absOfS P (us, s)| <o |UNIV| \\<or> finite (absOfS P (us, s))) \\<and>\n    (\\<forall>A\\<in>absOfS P (us, s). wlsAbs (us, s) A) \\<and>\n    (|envsOfS P| <o |UNIV| \\<or> finite (envsOfS P)) \\<and>\n    Ball (envsOfS P) wlsEnv", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n  phi (asSort ?xs1) (Var ?xs1 ?x1)\n  \\<lbrakk>wlsInp ?delta1 ?inp1; wlsBinp ?delta1 ?binp1;\n   liftAll2 phi (arOf ?delta1) ?inp1;\n   liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf ?delta1)\n    ?binp1\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta1) (Op ?delta1 ?inp1 ?binp1)\n  \\<lbrakk>isInBar (?xs1, ?s1); wls ?s1 ?X1; ?x1 \\<notin> varsOfS P ?xs1;\n   \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh ?xs1 ?x1 Y;\n   \\<And>us s' A.\n      A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs ?xs1 ?x1 A;\n   \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv ?xs1 ?x1 rho;\n   phi ?s1 ?X1\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs1, ?s1) (Abs ?xs1 ?x1 ?X1)\n\ngoal (1 subgoal):\n 1. (|varsOfS P xs| <o |UNIV| \\<or> finite (varsOfS P xs)) \\<and>\n    (|termsOfS P s| <o |UNIV| \\<or> finite (termsOfS P s)) \\<and>\n    (\\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n    (|absOfS P (us, s)| <o |UNIV| \\<or> finite (absOfS P (us, s))) \\<and>\n    (\\<forall>A\\<in>absOfS P (us, s). wlsAbs (us, s) A) \\<and>\n    (|envsOfS P| <o |UNIV| \\<or> finite (envsOfS P)) \\<and>\n    Ball (envsOfS P) wlsEnv", "by(cases P) simp"], ["proof (state)\nthis:\n  (|varsOfS P xs| <o |UNIV| \\<or> finite (varsOfS P xs)) \\<and>\n  (|termsOfS P s| <o |UNIV| \\<or> finite (termsOfS P s)) \\<and>\n  (\\<forall>X\\<in>termsOfS P s. wls s X) \\<and>\n  (|absOfS P (us, s)| <o |UNIV| \\<or> finite (absOfS P (us, s))) \\<and>\n  (\\<forall>A\\<in>absOfS P (us, s). wlsAbs (us, s) A) \\<and>\n  (|envsOfS P| <o |UNIV| \\<or> finite (envsOfS P)) \\<and>\n  Ball (envsOfS P) wlsEnv\n\ngoal (3 subgoals):\n 1. \\<And>xs x. phi (asSort xs) (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 (\\<lambda>(us, s). phiAbs (us, s)) (barOf delta)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        phi s X\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "qed(insert assms, simp_all)"], ["", "subsubsection \\<open>The syntactic constructs are almost free (on well-sorted terms)\\<close>"], ["", "(* Recall theorem Var_inj. *)"], ["", "theorem wls_Op_inj[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nand \"wlsInp delta' inp'\" and \"wlsBinp delta' binp'\"\nshows\n\"(Op delta inp binp = Op delta' inp' binp') =\n (delta = delta' \\<and> inp = inp' \\<and> binp = binp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Op delta inp binp = Op delta' inp' binp') =\n    (delta = delta' \\<and> inp = inp' \\<and> binp = binp')", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  wlsInp delta' inp'\n  wlsBinp delta' binp'\n\ngoal (1 subgoal):\n 1. (Op delta inp binp = Op delta' inp' binp') =\n    (delta = delta' \\<and> inp = inp' \\<and> binp = binp')", "by simp"], ["", "lemma wls_Abs_ainj_all:\nassumes \"wls s X\" and \"wls s' X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s' X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "by(simp add: Abs_ainj_all)"], ["", "theorem wls_Abs_swap_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>y.\n        (y = x \\<or> fresh xs y X) \\<and>\n        (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>y.\n        (y = x \\<or> fresh xs y X) \\<and>\n        (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs)", "by(simp add: wls_Abs_ainj_all)"], ["", "lemma wls_Abs_ainj_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n        (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         fresh xs y X \\<and>\n         fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs))", "by(simp add: Abs_ainj_ex)"], ["", "theorem wls_Abs_swap_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n       (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs)", "by(simp add: wls_Abs_ainj_ex)"], ["", "theorem wls_Abs_inj[simp]:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x X') =\n (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x X') = (X = X')", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x X') = (X = X')", "by (auto simp: wls_Abs_swap_all)"], ["", "theorem wls_Abs_swap_cong[fundef_cong]:\nassumes \"wls s X\" and \"wls s X'\"\nand \"fresh xs y X\" and \"fresh xs y X'\"  and \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n  fresh xs y X\n  fresh xs y X'\n  X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by (intro Abs_cong) auto"], ["", "theorem wls_Abs_swap_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (X #[x' \\<and> x]_xs) = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x' (X #[x' \\<and> x]_xs) = Abs xs x X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. Abs xs x' (X #[x' \\<and> x]_xs) = Abs xs x X", "by(simp add: Abs_swap_fresh)"], ["", "theorem wls_Var_diff_Op[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"Var xs x \\<noteq> Op delta inp binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x \\<noteq> Op delta inp binp", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Var xs x \\<noteq> Op delta inp binp", "by auto"], ["", "theorem wls_Op_diff_Var[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"Op delta inp binp \\<noteq> Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp \\<noteq> Var xs x", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp \\<noteq> Var xs x", "by auto"], ["", "theorem wls_nchotomy:\nassumes \"wls s X\"\nshows\n\"(\\<exists> xs x. asSort xs = s \\<and> X = Var xs x) \\<or>\n (\\<exists> delta inp binp. stOf delta = s \\<and> wlsInp delta inp \\<and> wlsBinp delta binp\n                    \\<and> X = Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xs x. asSort xs = s \\<and> X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        stOf delta = s \\<and>\n        wlsInp delta inp \\<and>\n        wlsBinp delta binp \\<and> X = Op delta inp binp)", "using assms wls.simps"], ["proof (prove)\nusing this:\n  wls s X\n  wls ?a1.0 ?a2.0 =\n  ((\\<exists>xs x. ?a1.0 = asSort xs \\<and> ?a2.0 = Var xs x) \\<or>\n   (\\<exists>delta inp binp.\n       ?a1.0 = stOf delta \\<and>\n       ?a2.0 = Op delta inp binp \\<and>\n       wlsInp delta inp \\<and> wlsBinp delta binp))\n\ngoal (1 subgoal):\n 1. (\\<exists>xs x. asSort xs = s \\<and> X = Var xs x) \\<or>\n    (\\<exists>delta inp binp.\n        stOf delta = s \\<and>\n        wlsInp delta inp \\<and>\n        wlsBinp delta binp \\<and> X = Op delta inp binp)", "by force"], ["", "lemmas wls_cases = wls_wlsAbs_wlsInp_wlsBinp.inducts(1)"], ["", "lemmas wlsAbs_nchotomy = wlsAbs_inversion2"], ["", "theorem wlsAbs_cases:\nassumes \"wlsAbs (xs,s) A\"\nand \"\\<And> x X. \\<lbrakk>isInBar (xs,s); wls s X\\<rbrakk> \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows \"phiAbs (xs,s) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phiAbs (xs, s) A", "using assms wlsAbs_nchotomy"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  \\<lbrakk>isInBar (xs, s); wls s ?X1\\<rbrakk>\n  \\<Longrightarrow> phiAbs (xs, s) (Abs xs ?x1 ?X1)\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  isInBar (?xs, ?s) \\<and> (\\<exists>x X. wls ?s X \\<and> ?A = Abs ?xs x X)\n\ngoal (1 subgoal):\n 1. phiAbs (xs, s) A", "by blast"], ["", "lemma wls_disjoint:\nassumes \"wls s X\" and \"wls s' X\"\nshows \"s = s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s'", "using assms term_nchotomy wls_imp_good"], ["proof (prove)\nusing this:\n  wls s X\n  wls s' X\n  good ?X \\<Longrightarrow>\n  (\\<exists>xs x. ?X = Var xs x) \\<or>\n  (\\<exists>delta inp binp.\n      goodInp inp \\<and> goodBinp binp \\<and> ?X = Op delta inp binp)\n  wls ?s ?X \\<Longrightarrow> good ?X\n\ngoal (1 subgoal):\n 1. s = s'", "by fastforce"], ["", "lemma wlsAbs_disjoint:\nassumes \"wlsAbs (xs,s) A\" and \"wlsAbs (xs',s') A\"\nshows \"xs = xs' \\<and> s = s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and> s = s'", "using assms abs_nchotomy wlsAbs_imp_goodAbs wls_disjoint"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wlsAbs (xs', s') A\n  goodAbs ?A \\<Longrightarrow>\n  \\<exists>xs x X. good X \\<and> ?A = Abs xs x X\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow> goodAbs ?A\n  \\<lbrakk>wls ?s ?X; wls ?s' ?X\\<rbrakk> \\<Longrightarrow> ?s = ?s'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and> s = s'", "by fastforce"], ["", "lemmas wls_freeCons =\nVar_inj wls_Op_inj wls_Var_diff_Op wls_Op_diff_Var wls_Abs_swap_fresh"], ["", "subsection \\<open>The non-construct operators preserve well-sortedness\\<close>"], ["", "lemma idEnv_preserves_wls[simp]:\n\"wlsEnv idEnv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv idEnv", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv idEnv", "have \"goodEnv idEnv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv idEnv", "by simp"], ["proof (state)\nthis:\n  goodEnv idEnv\n\ngoal (1 subgoal):\n 1. wlsEnv idEnv", "thus ?thesis"], ["proof (prove)\nusing this:\n  goodEnv idEnv\n\ngoal (1 subgoal):\n 1. wlsEnv idEnv", "unfolding wlsEnv_def goodEnv_def liftAll_def idEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v. None = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. None \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        None = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n    (\\<forall>ys. |{y. None \\<noteq> None}| <o |UNIV|)", "by auto"], ["proof (state)\nthis:\n  wlsEnv idEnv\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma updEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort xs) X\"\nshows \"wlsEnv (rho [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "fix ys"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "let ?L = \"{y. rho ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "let ?R = \"{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "have \"?R \\<le> ?L Un {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}\n    \\<subseteq> {y. rho ys y \\<noteq> None} \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  {y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}\n  \\<subseteq> {y. rho ys y \\<noteq> None} \\<union> {x}\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "hence \"|?R| \\<le>o |?L Un {x}|\""], ["proof (prove)\nusing this:\n  {y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}\n  \\<subseteq> {y. rho ys y \\<noteq> None} \\<union> {x}\n\ngoal (1 subgoal):\n 1. |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n    |{y. rho ys y \\<noteq> None} \\<union> {x}|", "by simp"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "moreover"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "{"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "have \"|?L| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV|", "unfolding wlsEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys. liftAll (wls (asSort ys)) (rho ys)) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "moreover"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "have \"|{x}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{x}| <o |UNIV|", "using var_infinite_INNER finite_ordLess_infinite"], ["proof (prove)\nusing this:\n  infinite UNIV\n  \\<lbrakk>Well_order ?r; Well_order ?r'; finite (Field ?r);\n   infinite (Field ?r')\\<rbrakk>\n  \\<Longrightarrow> ?r <o ?r'\n\ngoal (1 subgoal):\n 1. |{x}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "ultimately"], ["proof (chain)\npicking this:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{x}| <o |UNIV|", "have \"|?L Un {x}| <o  |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|", "using var_infinite_INNER card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |{y. rho ys y \\<noteq> None}| <o |UNIV|\n  |{x}| <o |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "}"], ["proof (state)\nthis:\n  |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "ultimately"], ["proof (chain)\npicking this:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n  |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|", "have \"|?R| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n  |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| \\<le>o\n  |{y. rho ys y \\<noteq> None} \\<union> {x}|\n  |{y. rho ys y \\<noteq> None} \\<union> {x}| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "}"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ?ys3 y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "note 0 = this"], ["proof (state)\nthis:\n  |{y. (rho [x \\<leftarrow> X]_xs) ?ys3 y \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "have 1: \"goodEnv (rho [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (rho [x \\<leftarrow> X]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. goodEnv (rho [x \\<leftarrow> X]_xs)", "by simp"], ["proof (state)\nthis:\n  goodEnv (rho [x \\<leftarrow> X]_xs)\n\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (rho [x \\<leftarrow> X]_xs)", "unfolding wlsEnv_def goodEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys.\n        liftAll (wls (asSort ys)) ((rho [x \\<leftarrow> X]_xs) ys)) \\<and>\n    (\\<forall>ys.\n        |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|)", "using 0 1 assms"], ["proof (prove)\nusing this:\n  |{y. (rho [x \\<leftarrow> X]_xs) ?ys3 y \\<noteq> None}| <o |UNIV|\n  goodEnv (rho [x \\<leftarrow> X]_xs)\n  wlsEnv rho\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. (\\<forall>ys.\n        liftAll (wls (asSort ys)) ((rho [x \\<leftarrow> X]_xs) ys)) \\<and>\n    (\\<forall>ys.\n        |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|)", "unfolding wlsEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  |{y. (rho [x \\<leftarrow> X]_xs) ?ys3 y \\<noteq> None}| <o |UNIV|\n  goodEnv (rho [x \\<leftarrow> X]_xs)\n  (\\<forall>ys i v.\n      rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  wls (asSort xs) X\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        (rho [x \\<leftarrow> X]_xs) ys i = Some v \\<longrightarrow>\n        wls (asSort ys) v) \\<and>\n    (\\<forall>ys.\n        |{y. (rho [x \\<leftarrow> X]_xs) ys y \\<noteq> None}| <o |UNIV|)", "by auto"], ["proof (state)\nthis:\n  wlsEnv (rho [x \\<leftarrow> X]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = Some X\"\nshows \"wls (asSort xs) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls (asSort xs) X", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. wls (asSort xs) X", "unfolding wlsEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v.\n      rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. wls (asSort xs) X", "by simp"], ["", "lemmas envOps_preserve_wls =\nidEnv_preserves_wls updEnv_preserves_wls\ngetEnv_preserves_wls"], ["", "lemma psubstAll_preserves_wlsAll:\nassumes P: \"wlsPar P\"\nshows\n\"(wls s X \\<longrightarrow> (\\<forall> rho \\<in> envsOfS P. wls s (X #[rho]))) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> (\\<forall> rho \\<in> envsOfS P. wlsAbs (xs,s') (A $[rho])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOfS P. wls s X #[rho])) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOfS P. wlsAbs (xs, s') A $[rho]))", "proof(induct rule: wls_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. wlsPar P\n 2. \\<And>xs x. \\<forall>rho\\<in>envsOfS P. wls (asSort xs) Var xs x #[rho]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>(us, s) A.\n             \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wls (stOf delta) Op delta inp binp #[rho]\n 4. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. wlsPar P\n 2. \\<And>xs x. \\<forall>rho\\<in>envsOfS P. wls (asSort xs) Var xs x #[rho]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>(us, s) A.\n             \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wls (stOf delta) Op delta inp binp #[rho]\n 4. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOfS P. wls (asSort xs) Var xs x #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOfS P. wls (asSort xs) Var xs x #[rho]", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>wlsPar P; rho \\<in> envsOfS P\\<rbrakk>\n       \\<Longrightarrow> wls (asSort xs) Var xs x #[rho]", "subgoal for rho"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsPar P; rho \\<in> envsOfS P\\<rbrakk>\n    \\<Longrightarrow> wls (asSort xs) Var xs x #[rho]", "apply(cases \"rho xs x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wlsPar P; rho \\<in> envsOfS P; rho xs x = None\\<rbrakk>\n    \\<Longrightarrow> wls (asSort xs) Var xs x #[rho]\n 2. \\<And>a.\n       \\<lbrakk>wlsPar P; rho \\<in> envsOfS P; rho xs x = Some a\\<rbrakk>\n       \\<Longrightarrow> wls (asSort xs) Var xs x #[rho]", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>wlsPar P; rho \\<in> envsOfS P; rho xs x = Some a\\<rbrakk>\n       \\<Longrightarrow> wls (asSort xs) a", "using getEnv_preserves_wls wlsPar_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>wlsEnv ?rho; ?rho ?xs ?x = Some ?X\\<rbrakk>\n  \\<Longrightarrow> wls (asSort ?xs) ?X\n  wlsPar ?P \\<equiv>\n  (\\<forall>s. \\<forall>X\\<in>termsOfS ?P s. wls s X) \\<and>\n  (\\<forall>xs s. \\<forall>A\\<in>absOfS ?P (xs, s). wlsAbs (xs, s) A) \\<and>\n  Ball (envsOfS ?P) wlsEnv\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>wlsPar P; rho \\<in> envsOfS P; rho xs x = Some a\\<rbrakk>\n       \\<Longrightarrow> wls (asSort xs) a", "by blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\nthis:\n  \\<forall>rho\\<in>envsOfS P. wls (asSort xs) Var xs x #[rho]\n\ngoal (3 subgoals):\n 1. wlsPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>(us, s) A.\n             \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wls (stOf delta) Op delta inp binp #[rho]\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. wlsPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>(us, s) A.\n             \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wls (stOf delta) Op delta inp binp #[rho]\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>(us, s) A. \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n   (barOf delta) binp\n\ngoal (3 subgoals):\n 1. wlsPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>(us, s) A.\n             \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wls (stOf delta) Op delta inp binp #[rho]\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "then"], ["proof (chain)\npicking this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>(us, s) A. \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n   (barOf delta) binp", "show ?case"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>(us, s) A. \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOfS P. wls (stOf delta) Op delta inp binp #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>s X. \\<forall>rho\\<in>envsOfS P. wls s X #[rho])\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>(us, s) A. \\<forall>rho\\<in>envsOfS P. wlsAbs (us, s) A $[rho])\n   (barOf delta) binp\n  wlsPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOfS P. wls (stOf delta) Op delta inp binp #[rho]", "by (auto simp: \n  wlsInp_iff psubstInp_def wlsBinp_iff psubstBinp_def liftAll2_def lift_def \n  sameDom_def intro!: Op_preserves_wls split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>rho\\<in>envsOfS P. wls (stOf delta) Op delta inp binp #[rho]\n\ngoal (2 subgoals):\n 1. wlsPar P\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; x \\<notin> varsOfS P xs;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n        \\<And>us s' A.\n           A \\<in> absOfS P (us, s') \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOfS P. wls s X #[rho]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOfS P.\n                            wlsAbs (xs, s) Abs xs x X $[rho]", "qed(insert assms, auto)"], ["", "lemma psubst_preserves_wls[simp]:\n\"\\<lbrakk>wls s X; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wls s (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wls s X; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wls s X #[rho]", "using psubstAll_preserves_wlsAll[of \"ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. []) [rho]\"]"], ["proof (prove)\nusing this:\n  wlsPar\n   (ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. [])\n     [rho]) \\<Longrightarrow>\n  (wls ?s ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wls ?s ?X #[rho])) \\<and>\n  (wlsAbs (?xs, ?s') ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wlsAbs (?xs, ?s') ?A $[rho]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wls s X; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wls s X #[rho]", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  (\\<forall>s.\n      \\<forall>X\\<in>termsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho])\n                      s.\n         wls s X) \\<and>\n  (\\<forall>xs s.\n      \\<forall>A\\<in>absOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho])\n                      (xs, s).\n         wlsAbs (xs, s) A) \\<and>\n  Ball\n   (envsOfS (ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. []) [rho]))\n   wlsEnv \\<Longrightarrow>\n  (wls ?s ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wls ?s ?X #[rho])) \\<and>\n  (wlsAbs (?xs, ?s') ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wlsAbs (?xs, ?s') ?A $[rho]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wls s X; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wls s X #[rho]", "by auto"], ["", "lemma psubstAbs_preserves_wls[simp]:\n\"\\<lbrakk>wlsAbs (xs,s) A; wlsEnv rho\\<rbrakk> \\<Longrightarrow> wlsAbs (xs,s) (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsAbs (xs, s) A; wlsEnv rho\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) A $[rho]", "using psubstAll_preserves_wlsAll[of \"ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. []) [rho]\"]"], ["proof (prove)\nusing this:\n  wlsPar\n   (ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. [])\n     [rho]) \\<Longrightarrow>\n  (wls ?s ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wls ?s ?X #[rho])) \\<and>\n  (wlsAbs (?xs, ?s') ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wlsAbs (?xs, ?s') ?A $[rho]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsAbs (xs, s) A; wlsEnv rho\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) A $[rho]", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  (\\<forall>s.\n      \\<forall>X\\<in>termsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho])\n                      s.\n         wls s X) \\<and>\n  (\\<forall>xs s.\n      \\<forall>A\\<in>absOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho])\n                      (xs, s).\n         wlsAbs (xs, s) A) \\<and>\n  Ball\n   (envsOfS (ParS (\\<lambda>_. []) (\\<lambda>_. []) (\\<lambda>_. []) [rho]))\n   wlsEnv \\<Longrightarrow>\n  (wls ?s ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wls ?s ?X #[rho])) \\<and>\n  (wlsAbs (?xs, ?s') ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOfS\n                      (ParS (\\<lambda>_. []) (\\<lambda>_. [])\n                        (\\<lambda>_. []) [rho]).\n       wlsAbs (?xs, ?s') ?A $[rho]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsAbs (xs, s) A; wlsEnv rho\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) A $[rho]", "by auto"], ["", "lemma psubstInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\" and \"wlsEnv rho\"\nshows \"wlsInp delta (inp %[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp %[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsInp delta inp %[rho]", "by (auto simp: wlsInp_iff psubstInp_def liftAll2_def lift_def \n sameDom_def intro!: Op_preserves_wls split: option.splits)"], ["", "lemma psubstBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\" and \"wlsEnv rho\"\nshows \"wlsBinp delta (binp %%[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp %%[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsBinp delta binp %%[rho]", "by (auto simp: wlsBinp_iff psubstBinp_def liftAll2_def lift_def \n sameDom_def intro!: Op_preserves_wls split: option.splits)"], ["", "lemma psubstEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"wlsEnv (rho &[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "fix ys y Y"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "assume \"(rho &[rho']) ys y = Some Y\""], ["proof (state)\nthis:\n  rho &[rho'] ys y = Some Y\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "hence \"wls (asSort ys) Y\""], ["proof (prove)\nusing this:\n  rho &[rho'] ys y = Some Y\n\ngoal (1 subgoal):\n 1. wls (asSort ys) Y", "using assms"], ["proof (prove)\nusing this:\n  rho &[rho'] ys y = Some Y\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. wls (asSort ys) Y", "unfolding psubstEnv_def wlsEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (case rho ys y of None \\<Rightarrow> rho' ys y\n   | Some X \\<Rightarrow> Some X #[rho']) =\n  Some Y\n  (\\<forall>ys i v.\n      rho ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  (\\<forall>ys i v.\n      rho' ys i = Some v \\<longrightarrow> wls (asSort ys) v) \\<and>\n  (\\<forall>ys. |{y. rho' ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. wls (asSort ys) Y", "by (cases \"rho ys y\") (auto simp add: assms)"], ["proof (state)\nthis:\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "}"], ["proof (state)\nthis:\n  rho &[rho'] ?ys3 ?y3 = Some ?Y3 \\<Longrightarrow> wls (asSort ?ys3) ?Y3\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "moreover"], ["proof (state)\nthis:\n  rho &[rho'] ?ys3 ?y3 = Some ?Y3 \\<Longrightarrow> wls (asSort ?ys3) ?Y3\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "have \"goodEnv (rho &[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv rho &[rho']", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. goodEnv rho &[rho']", "by simp"], ["proof (state)\nthis:\n  goodEnv rho &[rho']\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "ultimately"], ["proof (chain)\npicking this:\n  rho &[rho'] ?ys3 ?y3 = Some ?Y3 \\<Longrightarrow> wls (asSort ?ys3) ?Y3\n  goodEnv rho &[rho']", "show ?thesis"], ["proof (prove)\nusing this:\n  rho &[rho'] ?ys3 ?y3 = Some ?Y3 \\<Longrightarrow> wls (asSort ?ys3) ?Y3\n  goodEnv rho &[rho']\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[rho']", "unfolding goodEnv_def wlsEnv_def psubstEnv_def wlsEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (case rho ?ys3 ?y3 of None \\<Rightarrow> rho' ?ys3 ?y3\n   | Some X \\<Rightarrow> Some X #[rho']) =\n  Some ?Y3 \\<Longrightarrow>\n  wls (asSort ?ys3) ?Y3\n  (\\<forall>ys i v.\n      (case rho ys i of None \\<Rightarrow> rho' ys i\n       | Some X \\<Rightarrow> Some X #[rho']) =\n      Some v \\<longrightarrow>\n      good v) \\<and>\n  (\\<forall>ys.\n      |{y. (case rho ys y of None \\<Rightarrow> rho' ys y\n            | Some X \\<Rightarrow> Some X #[rho']) \\<noteq>\n           None}| <o\n      |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys i v.\n        (case rho ys i of None \\<Rightarrow> rho' ys i\n         | Some X \\<Rightarrow> Some X #[rho']) =\n        Some v \\<longrightarrow>\n        wls (asSort ys) v) \\<and>\n    (\\<forall>ys.\n        |{y. (case rho ys y of None \\<Rightarrow> rho' ys y\n              | Some X \\<Rightarrow> Some X #[rho']) \\<noteq>\n             None}| <o\n        |UNIV|)", "by (auto simp add: assms)"], ["proof (state)\nthis:\n  wlsEnv rho &[rho']\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas psubstAll_preserve_wls =\npsubst_preserves_wls psubstAbs_preserves_wls\npsubstInp_preserves_wls psubstBinp_preserves_wls\npsubstEnv_preserves_wls"], ["", "lemma subst_preserves_wls[simp]:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"wls s (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wls s (X #[Y / y]_ys)", "unfolding subst_def"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wls s X #[idEnv [y \\<leftarrow> Y]_ys]", "by simp"], ["", "lemma substAbs_preserves_wls[simp]:\nassumes \"wlsAbs (xs,s) A\" and \"wls (asSort ys) Y\"\nshows \"wlsAbs (xs,s) (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (A $[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (A $[Y / y]_ys)", "unfolding substAbs_def"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A $[idEnv [y \\<leftarrow> Y]_ys]", "by simp"], ["", "lemma substInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\" and \"wls (asSort ys) Y\"\nshows \"wlsInp delta (inp %[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[Y / y]_ys)", "unfolding substInp_def"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsInp delta inp %[idEnv [y \\<leftarrow> Y]_ys]", "by simp"], ["", "lemma substBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\" and \"wls (asSort ys) Y\"\nshows \"wlsBinp delta (binp %%[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[Y / y]_ys)", "unfolding substBinp_def"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsBinp delta binp %%[idEnv [y \\<leftarrow> Y]_ys]", "by simp"], ["", "lemma substEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nshows \"wlsEnv (rho &[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (rho &[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsEnv (rho &[Y / y]_ys)", "unfolding substEnv_def"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. wlsEnv rho &[idEnv [y \\<leftarrow> Y]_ys]", "by simp"], ["", "lemmas substAll_preserve_wls =\nsubst_preserves_wls substAbs_preserves_wls\nsubstInp_preserves_wls substBinp_preserves_wls\nsubstEnv_preserves_wls"], ["", "lemma vsubst_preserves_wls[simp]:\nassumes \"wls s Y\"\nshows \"wls s (Y #[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (Y #[x1 // x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. wls s (Y #[x1 // x]_xs)", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. wls s (Y #[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstAbs_preserves_wls[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"wlsAbs (us,s) (A $[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) (A $[x1 // x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) (A $[x1 // x]_xs)", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) (A $[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstInp_preserves_wls[simp]:\nassumes \"wlsInp delta inp\"\nshows \"wlsInp delta (inp %[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[x1 // x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[x1 // x]_xs)", "unfolding vsubstInp_def"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n\ngoal (1 subgoal):\n 1. wlsInp delta (inp %[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstBinp_preserves_wls[simp]:\nassumes \"wlsBinp delta binp\"\nshows \"wlsBinp delta (binp %%[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[x1 // x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[x1 // x]_xs)", "unfolding vsubstBinp_def"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. wlsBinp delta (binp %%[Var xs x1 / x]_xs)", "by simp"], ["", "lemma vsubstEnv_preserves_wls[simp]:\nassumes \"wlsEnv rho\"\nshows \"wlsEnv (rho &[x1 // x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv (rho &[x1 // x]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsEnv (rho &[x1 // x]_xs)", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. wlsEnv (rho &[Var xs x1 / x]_xs)", "by simp"], ["", "lemmas vsubstAll_preserve_wls = vsubst_preserves_wls vsubstAbs_preserves_wls\nvsubstInp_preserves_wls vsubstBinp_preserves_wls vsubstEnv_preserves_wls"], ["", "lemmas all_preserve_wls = Cons_preserve_wls swapAll_preserve_wls psubstAll_preserve_wls envOps_preserve_wls\nsubstAll_preserve_wls vsubstAll_preserve_wls"], ["", "subsection \\<open>Simplification rules for swapping, substitution, freshness and skeleton\\<close>"], ["", "(* Recall theorem swap_Var_simp.  *)"], ["", "theorem wls_swap_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[x1 \\<and> x2]_xs) =\n Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[x1 \\<and> x2]_xs =\n    Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[x1 \\<and> x2]_xs =\n    Op delta (inp %[x1 \\<and> x2]_xs) (binp %%[x1 \\<and> x2]_xs)", "by simp"], ["", "theorem wls_swapAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"((Abs xs x X) $[y1 \\<and> y2]_ys) = Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 \\<and> y2]_ys =\n    Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 \\<and> y2]_ys =\n    Abs xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys)", "by simp"], ["", "lemmas wls_swapAll_simps =\nswap_Var_simp wls_swap_Op_simp wls_swapAbs_simp"], ["", "(* Recall theorem fresh_Var_simp. *)"], ["", "theorem wls_fresh_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"fresh xs x (Op delta inp binp) =\n (freshInp xs x inp \\<and> freshBinp xs x binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (Op delta inp binp) =\n    (freshInp xs x inp \\<and> freshBinp xs x binp)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. fresh xs x (Op delta inp binp) =\n    (freshInp xs x inp \\<and> freshBinp xs x binp)", "by simp"], ["", "theorem wls_freshAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X) = (ys = xs \\<and> y = x \\<or> fresh ys y X)", "by simp"], ["", "lemmas wls_freshAll_simps =\nfresh_Var_simp wls_fresh_Op_simp wls_freshAbs_simp"], ["", "(* Recall theorem skel_Var_simp *)"], ["", "theorem wls_skel_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. skel (Op delta inp binp) = Branch (skelInp inp) (skelBinp binp)", "by simp"], ["", "(* The next is not a simplification rule, but belongs here: *)"], ["", "lemma wls_skelInp_def2:\nassumes \"wlsInp delta inp\"\nshows \"skelInp inp = lift skel inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelInp inp = lift skel inp", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n\ngoal (1 subgoal):\n 1. skelInp inp = lift skel inp", "by(simp add: skelInp_def2)"], ["", "lemma wls_skelBinp_def2:\nassumes \"wlsBinp delta binp\"\nshows \"skelBinp binp = lift skelAbs binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelBinp binp = lift skelAbs binp", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. skelBinp binp = lift skelAbs binp", "by(simp add: skelBinp_def2)"], ["", "theorem wls_skelAbs_simp[simp]:\nassumes \"wls s X\"\nshows \"skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. skelAbs (Abs xs x X) = Branch (\\<lambda>i. Some (skel X)) Map.empty", "by simp"], ["", "lemmas wls_skelAll_simps =\nskel_Var_simp wls_skel_Op_simp wls_skelAbs_simp"], ["", "theorem wls_psubst_Var_simp1[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = None\"\nshows \"((Var xs x) #[rho]) = Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] = Var xs x", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] = Var xs x", "by simp"], ["", "theorem wls_psubst_Var_simp2[simp]:\nassumes \"wlsEnv rho\" and \"rho xs x = Some X\"\nshows \"((Var xs x) #[rho]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[rho] = X", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. Var xs x #[rho] = X", "by simp"], ["", "theorem wls_psubst_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\" and \"wlsEnv rho\"\nshows\n\"((Op delta inp binp) #[rho]) = Op delta (inp %[rho]) (binp %%[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp %[rho] binp %%[rho]", "by simp"], ["", "theorem wls_psubstAbs_simp[simp]:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"freshEnv xs x rho\"\nshows \"((Abs xs x X) $[rho]) = Abs xs x (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  freshEnv xs x rho\n\ngoal (1 subgoal):\n 1. Abs xs x X $[rho] = Abs xs x X #[rho]", "by simp"], ["", "lemmas wls_psubstAll_simps =\nwls_psubst_Var_simp1 wls_psubst_Var_simp2 wls_psubst_Op_simp wls_psubstAbs_simp"], ["", "(* Recall lemmas getEnv_idEnv, getEnv_updEnv1 and getEnv_updEnv2. *)"], ["", "lemmas wls_envOps_simps =\ngetEnv_idEnv getEnv_updEnv1 getEnv_updEnv2"], ["", "theorem wls_subst_Var_simp1[simp]:\nassumes \"wls (asSort ys) Y\"\nand \"ys \\<noteq> xs \\<or> y \\<noteq> x \"\nshows \"((Var xs x) #[Y / y]_ys) = Var xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[Y / y]_ys = Var xs x", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n\ngoal (1 subgoal):\n 1. Var xs x #[Y / y]_ys = Var xs x", "unfolding subst_def"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n\ngoal (1 subgoal):\n 1. Var xs x #[idEnv [y \\<leftarrow> Y]_ys] = Var xs x", "by auto"], ["", "theorem wls_subst_Var_simp2[simp]:\nassumes \"wls (asSort xs) Y\"\nshows \"((Var xs x) #[Y / x]_xs) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x #[Y / x]_xs = Y", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Var xs x #[Y / x]_xs = Y", "unfolding subst_def"], ["proof (prove)\nusing this:\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Var xs x #[idEnv [x \\<leftarrow> Y]_xs] = Y", "by auto"], ["", "theorem wls_subst_Op_simp[simp]:\nassumes \"wls (asSort ys) Y\"\n and \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[Y / y]_ys) =\n Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[Y / y]_ys =\n    Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[Y / y]_ys =\n    Op delta (inp %[Y / y]_ys) (binp %%[Y / y]_ys)", "unfolding subst_def substInp_def\n                      substAbs_def substBinp_def"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[idEnv [y \\<leftarrow> Y]_ys] =\n    Op delta inp %[idEnv [y \\<leftarrow> Y]_ys]\n     binp %%[idEnv [y \\<leftarrow> Y]_ys]", "by auto"], ["", "theorem wls_substAbs_simp[simp]:\nassumes \"wls (asSort ys) Y\"\nand \"wls s X\" and \"xs \\<noteq> ys \\<or> x \\<noteq> y\" and \"fresh xs x Y\"\nshows \"((Abs xs x X) $[Y / y]_ys) = Abs xs x (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "have \"freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (idEnv [y \\<leftarrow> Y]_ys) xs x = None \\<and>\n    (\\<forall>ysa i v.\n        (idEnv [y \\<leftarrow> Y]_ys) ysa i = Some v \\<longrightarrow>\n        fresh xs x v)", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. (idEnv [y \\<leftarrow> Y]_ys) xs x = None \\<and>\n    (\\<forall>ysa i v.\n        (idEnv [y \\<leftarrow> Y]_ys) ysa i = Some v \\<longrightarrow>\n        fresh xs x v)", "by simp"], ["proof (state)\nthis:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n  wls (asSort ys) Y\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)", "unfolding subst_def substAbs_def"], ["proof (prove)\nusing this:\n  freshEnv xs x (idEnv [y \\<leftarrow> Y]_ys)\n  wls (asSort ys) Y\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[idEnv [y \\<leftarrow> Y]_ys] =\n    Abs xs x X #[idEnv [y \\<leftarrow> Y]_ys]", "by auto"], ["proof (state)\nthis:\n  Abs xs x X $[Y / y]_ys = Abs xs x (X #[Y / y]_ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas wls_substAll_simps =\nwls_subst_Var_simp1 wls_subst_Var_simp2 wls_subst_Op_simp wls_substAbs_simp"], ["", "(* Recall theorem vsubst_Var_simp. *)"], ["", "theorem wls_vsubst_Op_simp[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows\n\"((Op delta inp binp) #[y1 // y]_ys) =\n Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp #[y1 // y]_ys =\n    Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[y1 // y]_ys =\n    Op delta (inp %[y1 // y]_ys) (binp %%[y1 // y]_ys)", "unfolding vsubst_def vsubstInp_def\n                      vsubstAbs_def vsubstBinp_def"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[Var ys y1 / y]_ys =\n    Op delta (inp %[Var ys y1 / y]_ys) (binp %%[Var ys y1 / y]_ys)", "by simp"], ["", "theorem wls_vsubstAbs_simp[simp]:\nassumes \"wls s X\" and\n        \"xs \\<noteq> ys \\<or> x \\<notin> {y,y1}\"\nshows \"((Abs xs x X) $[y1 // y]_ys) = Abs xs x (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 // y]_ys = Abs xs x (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. Abs xs x X $[y1 // y]_ys = Abs xs x (X #[y1 // y]_ys)", "unfolding vsubst_def vsubstAbs_def"], ["proof (prove)\nusing this:\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Var ys y1 / y]_ys = Abs xs x (X #[Var ys y1 / y]_ys)", "by simp"], ["", "lemmas wls_vsubstAll_simps =\nvsubst_Var_simp wls_vsubst_Op_simp wls_vsubstAbs_simp"], ["", "(* Recall theorem swap_swapped. *)"], ["", "theorem wls_swapped_skel:\nassumes \"wls s X\" and \"(X,Y) \\<in> swapped\"\nshows \"skel Y = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel Y = skel X", "apply(rule swapped_skel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. good X\n 2. (X, Y) \\<in> swapped", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  (X, Y) \\<in> swapped\n\ngoal (2 subgoals):\n 1. good X\n 2. (X, Y) \\<in> swapped", "by auto"], ["", "theorem wls_obtain_rep:\nassumes \"wls s X\" and FRESH: \"fresh xs x' X\"\nshows \"\\<exists> X'. skel X' = skel X \\<and> (X,X') \\<in> swapped \\<and> wls s X' \\<and> Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "have 0: \"skel (X #[x' \\<and> x]_xs) = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (X #[x' \\<and> x]_xs) = skel X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. skel (X #[x' \\<and> x]_xs) = skel X", "by(simp add: skel_swap)"], ["proof (state)\nthis:\n  skel (X #[x' \\<and> x]_xs) = skel X\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "have 1: \"wls s (X #[x' \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (X #[x' \\<and> x]_xs)", "using assms swap_preserves_wls"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n  wls ?s ?X \\<Longrightarrow> wls ?s (?X #[?z1.0 \\<and> ?z2.0]_?zs)\n\ngoal (1 subgoal):\n 1. wls s (X #[x' \\<and> x]_xs)", "by auto"], ["proof (state)\nthis:\n  wls s (X #[x' \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "have 2: \"(X, X #[x' \\<and> x]_xs) \\<in> swapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[x' \\<and> x]_xs) \\<in> swapped", "using Var swap_swapped"], ["proof (prove)\nusing this:\n  wls (asSort ?xs) (Var ?xs ?x)\n  (?X, ?X #[?x \\<and> ?y]_?zs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. (X, X #[x' \\<and> x]_xs) \\<in> swapped", "by auto"], ["proof (state)\nthis:\n  (X, X #[x' \\<and> x]_xs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "using assms 0 1 2"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n  skel (X #[x' \\<and> x]_xs) = skel X\n  wls s (X #[x' \\<and> x]_xs)\n  (X, X #[x' \\<and> x]_xs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       skel X' = skel X \\<and>\n       (X, X') \\<in> swapped \\<and>\n       wls s X' \\<and> Abs xs x X = Abs xs x' X'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>X'.\n     skel X' = skel X \\<and>\n     (X, X') \\<in> swapped \\<and> wls s X' \\<and> Abs xs x X = Abs xs x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas wls_allOpers_simps =\nwls_swapAll_simps\nwls_freshAll_simps\nwls_skelAll_simps\nwls_envOps_simps\nwls_psubstAll_simps\nwls_substAll_simps\nwls_vsubstAll_simps"], ["", "subsection \\<open>The ability to pick fresh variables\\<close>"], ["", "theorem wls_single_non_fresh_ordLess_var:\n\"wls s X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow> |{x. \\<not> fresh xs x X}| <o |UNIV|", "by(simp add: single_non_fresh_ordLess_var)"], ["", "theorem wls_single_non_freshAbs_ordLess_var:\n\"wlsAbs (us,s) A \\<Longrightarrow> |{x. \\<not> freshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    |{x. \\<not> freshAbs xs x A}| <o |UNIV|", "by(simp add: single_non_freshAbs_ordLess_var)"], ["", "theorem wls_obtain_fresh:\nfixes V::\"'varSort \\<Rightarrow> 'var set\" and\n      XS::\"'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)term set\" and\n      AS::\"'varSort \\<Rightarrow> 'sort \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)abs set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)env set\" and zs\nassumes VVar: \"\\<forall> xs. |V xs| <o |UNIV :: 'var set| \\<or> finite (V xs)\"\nand XSVar: \"\\<forall> s. |XS s| <o |UNIV :: 'var set| \\<or> finite (XS s)\"\nand ASVar: \"\\<forall> xs s. |AS xs s| <o |UNIV :: 'var set| \\<or> finite (AS xs s)\"\nand XSwls: \"\\<forall> s. \\<forall> X \\<in> XS s. wls s X\"\nand ASwls: \"\\<forall> xs s. \\<forall> A \\<in> AS xs s. wlsAbs (xs,s) A\"\nand RhoVar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\"\nand Rhowls: \"\\<forall> rho \\<in> Rho. wlsEnv rho\"\nshows\n\"\\<exists> z. (\\<forall> xs. z \\<notin> V xs) \\<and>\n      (\\<forall> s. \\<forall> X \\<in> XS s. fresh zs z X) \\<and>\n      (\\<forall> xs s. \\<forall> A \\<in> AS xs s. freshAbs zs z A) \\<and>\n      (\\<forall> rho \\<in> Rho. freshEnv zs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "let ?VG = \"\\<Union> xs. V xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "let ?XSG = \"\\<Union> s. XS s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "let ?ASG = \"\\<Union> xs s. AS xs s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "have \"\\<forall> xs. |V xs| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. |V xs| <o |UNIV|", "using VVar finite_ordLess_var"], ["proof (prove)\nusing this:\n  \\<forall>xs. |V xs| <o |UNIV| \\<or> finite (V xs)\n  (|?S| <o |UNIV| \\<or> finite ?S) = (|?S| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. \\<forall>xs. |V xs| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>xs. |V xs| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "hence 1: \"|?VG| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>xs. |V xs| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union> (range V)| <o |UNIV|", "using var_regular_INNER varSort_lt_var_INNER regular_UNION"], ["proof (prove)\nusing this:\n  \\<forall>xs. |V xs| <o |UNIV|\n  regular |UNIV|\n  |UNIV| <o |UNIV|\n  \\<lbrakk>regular ?r; |?A| <o ?r;\n   \\<And>a. a \\<in> ?A \\<Longrightarrow> |?F a| <o ?r\\<rbrakk>\n  \\<Longrightarrow> |\\<Union> (?F ` ?A)| <o ?r\n\ngoal (1 subgoal):\n 1. |\\<Union> (range V)| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |\\<Union> (range V)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "have \"\\<forall> s. |XS s| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. |XS s| <o |UNIV|", "using XSVar finite_ordLess_var"], ["proof (prove)\nusing this:\n  \\<forall>s. |XS s| <o |UNIV| \\<or> finite (XS s)\n  (|?S| <o |UNIV| \\<or> finite ?S) = (|?S| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. \\<forall>s. |XS s| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>s. |XS s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "hence 2: \"|?XSG| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>s. |XS s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union> (range XS)| <o |UNIV|", "using var_regular_INNER sort_lt_var_INNER regular_UNION"], ["proof (prove)\nusing this:\n  \\<forall>s. |XS s| <o |UNIV|\n  regular |UNIV|\n  |UNIV| <o |UNIV|\n  \\<lbrakk>regular ?r; |?A| <o ?r;\n   \\<And>a. a \\<in> ?A \\<Longrightarrow> |?F a| <o ?r\\<rbrakk>\n  \\<Longrightarrow> |\\<Union> (?F ` ?A)| <o ?r\n\ngoal (1 subgoal):\n 1. |\\<Union> (range XS)| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |\\<Union> (range XS)| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "have \"\\<forall> xs s. |AS xs s| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs s. |AS xs s| <o |UNIV|", "using ASVar finite_ordLess_var"], ["proof (prove)\nusing this:\n  \\<forall>xs s. |AS xs s| <o |UNIV| \\<or> finite (AS xs s)\n  (|?S| <o |UNIV| \\<or> finite ?S) = (|?S| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. \\<forall>xs s. |AS xs s| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>xs s. |AS xs s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "hence \"\\<forall> xs. |\\<Union> s. AS xs s| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>xs s. |AS xs s| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>xs. |\\<Union> (range (AS xs))| <o |UNIV|", "using var_regular_INNER sort_lt_var_INNER regular_UNION"], ["proof (prove)\nusing this:\n  \\<forall>xs s. |AS xs s| <o |UNIV|\n  regular |UNIV|\n  |UNIV| <o |UNIV|\n  \\<lbrakk>regular ?r; |?A| <o ?r;\n   \\<And>a. a \\<in> ?A \\<Longrightarrow> |?F a| <o ?r\\<rbrakk>\n  \\<Longrightarrow> |\\<Union> (?F ` ?A)| <o ?r\n\ngoal (1 subgoal):\n 1. \\<forall>xs. |\\<Union> (range (AS xs))| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  \\<forall>xs. |\\<Union> (range (AS xs))| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "hence 3: \"|?ASG| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>xs. |\\<Union> (range (AS xs))| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>xs. \\<Union> (range (AS xs))| <o |UNIV|", "using var_regular_INNER varSort_lt_var_INNER"], ["proof (prove)\nusing this:\n  \\<forall>xs. |\\<Union> (range (AS xs))| <o |UNIV|\n  regular |UNIV|\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>xs. \\<Union> (range (AS xs))| <o |UNIV|", "by (auto simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>xs. \\<Union> (range (AS xs))| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "have \"\\<exists> z. z \\<notin> ?VG \\<and>\n             (\\<forall> X \\<in> ?XSG. fresh zs z X) \\<and>\n             (\\<forall> A \\<in> ?ASG. freshAbs zs z A) \\<and>\n             (\\<forall> rho \\<in> Rho. freshEnv zs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> \\<Union> (range V) \\<and>\n       (\\<forall>X\\<in>\\<Union> (range XS). fresh zs z X) \\<and>\n       (\\<forall>A\\<in>\\<Union>xs. \\<Union> (range (AS xs)).\n           freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "using assms 1 2 3"], ["proof (prove)\nusing this:\n  \\<forall>xs. |V xs| <o |UNIV| \\<or> finite (V xs)\n  \\<forall>s. |XS s| <o |UNIV| \\<or> finite (XS s)\n  \\<forall>xs s. |AS xs s| <o |UNIV| \\<or> finite (AS xs s)\n  \\<forall>s. \\<forall>X\\<in>XS s. wls s X\n  \\<forall>xs s. \\<forall>A\\<in>AS xs s. wlsAbs (xs, s) A\n  |Rho| <o |UNIV| \\<or> finite Rho\n  Ball Rho wlsEnv\n  |\\<Union> (range V)| <o |UNIV|\n  |\\<Union> (range XS)| <o |UNIV|\n  |\\<Union>xs. \\<Union> (range (AS xs))| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> \\<Union> (range V) \\<and>\n       (\\<forall>X\\<in>\\<Union> (range XS). fresh zs z X) \\<and>\n       (\\<forall>A\\<in>\\<Union>xs. \\<Union> (range (AS xs)).\n           freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "by (intro obtain_fresh) fastforce+"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<notin> \\<Union> (range V) \\<and>\n     (\\<forall>X\\<in>\\<Union> (range XS). fresh zs z X) \\<and>\n     (\\<forall>A\\<in>\\<Union>xs. \\<Union> (range (AS xs)).\n         freshAbs zs z A) \\<and>\n     (\\<forall>rho\\<in>Rho. freshEnv zs z rho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>z.\n     z \\<notin> \\<Union> (range V) \\<and>\n     (\\<forall>X\\<in>\\<Union> (range XS). fresh zs z X) \\<and>\n     (\\<forall>A\\<in>\\<Union>xs. \\<Union> (range (AS xs)).\n         freshAbs zs z A) \\<and>\n     (\\<forall>rho\\<in>Rho. freshEnv zs z rho)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> V xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n       (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>Rho. freshEnv zs z rho)", "by auto"], ["proof (state)\nthis:\n  \\<exists>z.\n     (\\<forall>xs. z \\<notin> V xs) \\<and>\n     (\\<forall>s. \\<forall>X\\<in>XS s. fresh zs z X) \\<and>\n     (\\<forall>xs s. \\<forall>A\\<in>AS xs s. freshAbs zs z A) \\<and>\n     (\\<forall>rho\\<in>Rho. freshEnv zs z rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_obtain_fresh_paramS:\nassumes \"wlsPar P\"\nshows\n\"\\<exists> z.\n (\\<forall> xs. z \\<notin> varsOfS P xs) \\<and>\n (\\<forall> s. \\<forall> X \\<in> termsOfS P s. fresh zs z X) \\<and>\n (\\<forall> us s. \\<forall> A \\<in> absOfS P (us,s). freshAbs zs z A) \\<and>\n (\\<forall> rho \\<in> envsOfS P. freshEnv zs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> varsOfS P xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>termsOfS P s. fresh zs z X) \\<and>\n       (\\<forall>us s.\n           \\<forall>A\\<in>absOfS P (us, s). freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv zs z rho)", "using assms"], ["proof (prove)\nusing this:\n  wlsPar P\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       (\\<forall>xs. z \\<notin> varsOfS P xs) \\<and>\n       (\\<forall>s. \\<forall>X\\<in>termsOfS P s. fresh zs z X) \\<and>\n       (\\<forall>us s.\n           \\<forall>A\\<in>absOfS P (us, s). freshAbs zs z A) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv zs z rho)", "by(cases P) (auto intro: wls_obtain_fresh)"], ["", "lemma wlsAbs_freshAbs_nchotomy:\nassumes A: \"wlsAbs (xs,s) A\" and fresh: \"freshAbs xs x A\"\nshows \"\\<exists> X. wls s X \\<and> A = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "assume \"wlsAbs (xs,s) A\""], ["proof (state)\nthis:\n  wlsAbs (xs, s) A\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "hence \"freshAbs xs x A \\<longrightarrow> (\\<exists> X. wls s X \\<and> A = Abs xs x X)\""], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n\ngoal (1 subgoal):\n 1. freshAbs xs x A \\<longrightarrow>\n    (\\<exists>X. wls s X \\<and> A = Abs xs x X)", "using fresh wls_obtain_rep[of s _ xs x]"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  freshAbs xs x A\n  \\<lbrakk>wls s ?X; fresh xs x ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       skel X' = skel ?X \\<and>\n                       (?X, X') \\<in> swapped \\<and>\n                       wls s X' \\<and> Abs xs ?x ?X = Abs xs x X'\n\ngoal (1 subgoal):\n 1. freshAbs xs x A \\<longrightarrow>\n    (\\<exists>X. wls s X \\<and> A = Abs xs x X)", "by (fastforce elim!: wlsAbs_cases)"], ["proof (state)\nthis:\n  freshAbs xs x A \\<longrightarrow>\n  (\\<exists>X. wls s X \\<and> A = Abs xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "}"], ["proof (state)\nthis:\n  wlsAbs (xs, s) A \\<Longrightarrow>\n  freshAbs xs x A \\<longrightarrow>\n  (\\<exists>X. wls s X \\<and> A = Abs xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "thus ?thesis"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A \\<Longrightarrow>\n  freshAbs xs x A \\<longrightarrow>\n  (\\<exists>X. wls s X \\<and> A = Abs xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A \\<Longrightarrow>\n  freshAbs xs x A \\<longrightarrow>\n  (\\<exists>X. wls s X \\<and> A = Abs xs x X)\n  wlsAbs (xs, s) A\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. \\<exists>X. wls s X \\<and> A = Abs xs x X", "by auto"], ["proof (state)\nthis:\n  \\<exists>X. wls s X \\<and> A = Abs xs x X\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wlsAbs_fresh_nchotomy:\nassumes A: \"wlsAbs (xs,s) A\" and P: \"wlsPar P\"\nshows \"\\<exists> x X. A = Abs xs x X \\<and>\n               wls s X \\<and>\n               (\\<forall> ys. x \\<notin> varsOfS P ys) \\<and>\n               (\\<forall> s'. \\<forall> Y \\<in> termsOfS P s'. fresh xs x Y) \\<and>\n               (\\<forall> us s'. \\<forall> B \\<in> absOfS P (us,s'). freshAbs xs x B) \\<and>\n               (\\<forall> rho \\<in> envsOfS P. freshEnv xs x rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "let ?chi =\n  \"\\<lambda> x. (\\<forall> xs. x \\<notin> varsOfS P xs) \\<and>\n        (\\<forall> s'. \\<forall> Y \\<in> termsOfS P s'. fresh xs x Y) \\<and>\n        (\\<forall> us s'.\\<forall> B \\<in> (if us = xs \\<and> s' = s then {A} else {}) \\<union> absOfS P (us,s'). freshAbs xs x B) \\<and>\n        (\\<forall> rho \\<in> envsOfS P. freshEnv xs x rho)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "have \"\\<exists> x. ?chi x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A}\n                           else {}) \\<union>\n                          absOfS P (us, s').\n              freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "using A P"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wlsPar P\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A}\n                           else {}) \\<union>\n                          absOfS P (us, s').\n              freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "by (intro wls_obtain_fresh) (cases P, auto)+"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n     (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n     (\\<forall>us s'.\n         \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                        absOfS P (us, s').\n            freshAbs xs x B) \\<and>\n     (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n     (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n     (\\<forall>us s'.\n         \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                        absOfS P (us, s').\n            freshAbs xs x B) \\<and>\n     (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "obtain x where 1: \"?chi x\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n     (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n     (\\<forall>us s'.\n         \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                        absOfS P (us, s').\n            freshAbs xs x B) \\<and>\n     (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n        (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n        (\\<forall>us s'.\n            \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A}\n                            else {}) \\<union>\n                           absOfS P (us, s').\n               freshAbs xs x B) \\<and>\n        (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n  (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n  (\\<forall>us s'.\n      \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                     absOfS P (us, s').\n         freshAbs xs x B) \\<and>\n  (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "hence \"freshAbs xs x A\""], ["proof (prove)\nusing this:\n  (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n  (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n  (\\<forall>us s'.\n      \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                     absOfS P (us, s').\n         freshAbs xs x B) \\<and>\n  (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. freshAbs xs x A", "by fastforce"], ["proof (state)\nthis:\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "then"], ["proof (chain)\npicking this:\n  freshAbs xs x A", "obtain X where X: \"wls s X\" and 2: \"A = Abs xs x X\""], ["proof (prove)\nusing this:\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>wls s X; A = Abs xs x X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A 1 wlsAbs_freshAbs_nchotomy[of xs s A x]"], ["proof (prove)\nusing this:\n  freshAbs xs x A\n  wlsAbs (xs, s) A\n  (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n  (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n  (\\<forall>us s'.\n      \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                     absOfS P (us, s').\n         freshAbs xs x B) \\<and>\n  (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n  \\<lbrakk>wlsAbs (xs, s) A; freshAbs xs x A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X. wls s X \\<and> A = Abs xs x X\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>wls s X; A = Abs xs x X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  wls s X\n  A = Abs xs x X\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s X\n  A = Abs xs x X\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "using 1"], ["proof (prove)\nusing this:\n  wls s X\n  A = Abs xs x X\n  (\\<forall>xs. x \\<notin> varsOfS P xs) \\<and>\n  (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n  (\\<forall>us s'.\n      \\<forall>B\\<in>(if us = xs \\<and> s' = s then {A} else {}) \\<union>\n                     absOfS P (us, s').\n         freshAbs xs x B) \\<and>\n  (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. \\<exists>x X.\n       A = Abs xs x X \\<and>\n       wls s X \\<and>\n       (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n       (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n       (\\<forall>us s'.\n           \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n       (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)", "by blast"], ["proof (state)\nthis:\n  \\<exists>x X.\n     A = Abs xs x X \\<and>\n     wls s X \\<and>\n     (\\<forall>ys. x \\<notin> varsOfS P ys) \\<and>\n     (\\<forall>s'. \\<forall>Y\\<in>termsOfS P s'. fresh xs x Y) \\<and>\n     (\\<forall>us s'.\n         \\<forall>B\\<in>absOfS P (us, s'). freshAbs xs x B) \\<and>\n     (\\<forall>rho\\<in>envsOfS P. freshEnv xs x rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wlsAbs_fresh_cases:\nassumes \"wlsAbs (xs,s) A\" and \"wlsPar P\"\nand \"\\<And> x X.\n          \\<lbrakk>wls s X;\n           \\<And> ys. x \\<notin> varsOfS P ys;\n           \\<And> s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh xs x Y;\n           \\<And> us s' B. B \\<in> absOfS P (us,s') \\<Longrightarrow> freshAbs xs x B;\n           \\<And> rho. rho \\<in> envsOfS P \\<Longrightarrow> freshEnv xs x rho\\<rbrakk>\n           \\<Longrightarrow> phi (xs,s) (Abs xs x X) P\"\nshows \"phi (xs,s) A P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi (xs, s) A P", "by (metis assms wlsAbs_fresh_nchotomy)"], ["", "subsection \\<open>Compositionality properties of freshness and swapping\\<close>"], ["", "subsubsection \\<open>W.r.t. terms\\<close>"], ["", "theorem wls_swap_ident[simp]:\nassumes \"wls s X\"\nshows \"(X #[x \\<and> x]_xs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> x]_xs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> x]_xs = X", "by simp"], ["", "theorem wls_swap_compose:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') =\n       ((X #[x' \\<and> y']_zs') #[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n    X #[x' \\<and> y']_zs' #[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "by (intro swap_compose) auto"], ["", "theorem wls_swap_commute:\n\"\\<lbrakk>wls s X; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((X #[x \\<and> y]_zs) #[x' \\<and> y']_zs') = ((X #[x' \\<and> y']_zs') #[x \\<and> y]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wls s X;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> X #[x \\<and> y]_zs #[x' \\<and> y']_zs' =\n                      X #[x' \\<and> y']_zs' #[x \\<and> y]_zs", "by (intro swap_commute) auto"], ["", "theorem wls_swap_involutive[simp]:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[x \\<and> y]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x \\<and> y]_zs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[x \\<and> y]_zs = X", "by simp"], ["", "theorem wls_swap_inj[simp]:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"((X #[x \\<and> y]_zs) = (X' #[x \\<and> y]_zs)) =\n (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X #[x \\<and> y]_zs = X' #[x \\<and> y]_zs) = (X = X')", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (X #[x \\<and> y]_zs = X' #[x \\<and> y]_zs) = (X = X')", "by (metis wls_swap_involutive)"], ["", "(* Recall theorem swap_sym. *)"], ["", "theorem wls_swap_involutive2[simp]:\nassumes \"wls s X\"\nshows \"((X #[x \\<and> y]_zs) #[y \\<and> x]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[y \\<and> x]_zs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[x \\<and> y]_zs #[y \\<and> x]_zs = X", "by (simp  add: swap_sym)"], ["", "theorem wls_swap_preserves_fresh[simp]:\nassumes \"wls s X\"\nshows \"fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. fresh xs (x @xs[y1 \\<and> y2]_ys) (X #[y1 \\<and> y2]_ys) = fresh xs x X", "by simp"], ["", "theorem wls_swap_preserves_fresh_distinct:\nassumes \"wls s X\" and\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  xs \\<noteq> ys \\<or> x \\<notin> {y1, y2}\n\ngoal (1 subgoal):\n 1. fresh xs x (X #[y1 \\<and> y2]_ys) = fresh xs x X", "by(intro swap_preserves_fresh_distinct) auto"], ["", "theorem wls_fresh_swap_exchange1:\nassumes \"wls s X\"\nshows \"fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x1 \\<and> x2]_xs) = fresh xs x1 X", "by (intro fresh_swap_exchange1) auto"], ["", "theorem wls_fresh_swap_exchange2:\nassumes \"wls s X\"\nshows \"fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. fresh xs x2 (X #[x2 \\<and> x1]_xs) = fresh xs x1 X", "by (intro fresh_swap_exchange2) fastforce+"], ["", "theorem wls_fresh_swap_id[simp]:\nassumes \"wls s X\" and \"fresh xs x1 X\"  and \"fresh xs x2 X\"\nshows \"(X #[x1 \\<and> x2]_xs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x1 \\<and> x2]_xs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x1 X\n  fresh xs x2 X\n\ngoal (1 subgoal):\n 1. X #[x1 \\<and> x2]_xs = X", "by simp"], ["", "theorem wls_fresh_swap_compose:\nassumes \"wls s X\" and \"fresh xs y X\"  and \"fresh xs z X\"\nshows \"((X #[y \\<and> x]_xs) #[z \\<and> y]_xs) = (X #[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs #[z \\<and> y]_xs = X #[z \\<and> x]_xs", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs y X\n  fresh xs z X\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs #[z \\<and> y]_xs = X #[z \\<and> x]_xs", "by (intro fresh_swap_compose) auto"], ["", "theorem wls_skel_swap:\nassumes \"wls s X\"\nshows \"skel (X #[x1 \\<and> x2]_xs) = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (X #[x1 \\<and> x2]_xs) = skel X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. skel (X #[x1 \\<and> x2]_xs) = skel X", "by (intro skel_swap) auto"], ["", "subsubsection \\<open>W.r.t. environments\\<close>"], ["", "theorem wls_swapEnv_ident[simp]:\nassumes \"wlsEnv rho\"\nshows \"(rho &[x \\<and> x]_xs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> x]_xs = rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> x]_xs = rho", "by simp"], ["", "theorem wls_swapEnv_compose:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') =\n       ((rho &[x' \\<and> y']_zs') &[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n    rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n    rho &[x' \\<and> y']_zs' &[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "by (intro swapEnv_compose) auto"], ["", "theorem wls_swapEnv_commute:\n\"\\<lbrakk>wlsEnv rho; zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\\<rbrakk> \\<Longrightarrow>\n ((rho &[x \\<and> y]_zs) &[x' \\<and> y']_zs') = ((rho &[x' \\<and> y']_zs') &[x \\<and> y]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsEnv rho;\n     zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\\<rbrakk>\n    \\<Longrightarrow> rho &[x \\<and> y]_zs &[x' \\<and> y']_zs' =\n                      rho &[x' \\<and> y']_zs' &[x \\<and> y]_zs", "by (intro swapEnv_commute) fastforce+"], ["", "theorem wls_swapEnv_involutive[simp]:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[x \\<and> y]_zs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x \\<and> y]_zs = rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[x \\<and> y]_zs = rho", "by simp"], ["", "theorem wls_swapEnv_inj[simp]:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows\n\"((rho &[x \\<and> y]_zs) = (rho' &[x \\<and> y]_zs)) =\n (rho = rho')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[x \\<and> y]_zs = rho' &[x \\<and> y]_zs) = (rho = rho')", "by (metis assms wls_swapEnv_involutive)"], ["", "(* Recall theorem swapEnv_sym. *)"], ["", "theorem wls_swapEnv_involutive2[simp]:\nassumes \"wlsEnv rho\"\nshows \"((rho &[x \\<and> y]_zs) &[y \\<and> x]_zs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[y \\<and> x]_zs = rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[x \\<and> y]_zs &[y \\<and> x]_zs = rho", "by(simp add: swapEnv_sym)"], ["", "theorem wls_swapEnv_preserves_freshEnv[simp]:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. freshEnv xs (x @xs[y1 \\<and> y2]_ys) (rho &[y1 \\<and> y2]_ys) =\n    freshEnv xs x rho", "by simp"], ["", "theorem wls_swapEnv_preserves_freshEnv_distinct:\nassumes \"wlsEnv rho\"\n       \"xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\"\nshows \"freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  xs \\<noteq> ys \\<or> x \\<notin> {y1, y2}\n\ngoal (1 subgoal):\n 1. freshEnv xs x (rho &[y1 \\<and> y2]_ys) = freshEnv xs x rho", "by (intro swapEnv_preserves_freshEnv_distinct) auto"], ["", "theorem wls_freshEnv_swapEnv_exchange1:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x1 \\<and> x2]_xs) = freshEnv xs x1 rho", "by (intro freshEnv_swapEnv_exchange1) auto"], ["", "theorem wls_freshEnv_swapEnv_exchange2:\nassumes \"wlsEnv rho\"\nshows \"freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. freshEnv xs x2 (rho &[x2 \\<and> x1]_xs) = freshEnv xs x1 rho", "by (intro freshEnv_swapEnv_exchange2) auto"], ["", "theorem wls_freshEnv_swapEnv_id[simp]:\nassumes \"wlsEnv rho\" and \"freshEnv xs x1 rho\" and \"freshEnv xs x2 rho\"\nshows \"(rho &[x1 \\<and> x2]_xs) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[x1 \\<and> x2]_xs = rho", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  freshEnv xs x1 rho\n  freshEnv xs x2 rho\n\ngoal (1 subgoal):\n 1. rho &[x1 \\<and> x2]_xs = rho", "by simp"], ["", "theorem wls_freshEnv_swapEnv_compose:\nassumes \"wlsEnv rho\" and \"freshEnv xs y rho\" and \"freshEnv xs z rho\"\nshows \"((rho &[y \\<and> x]_xs) &[z \\<and> y]_xs) = (rho &[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y \\<and> x]_xs &[z \\<and> y]_xs = rho &[z \\<and> x]_xs", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  freshEnv xs y rho\n  freshEnv xs z rho\n\ngoal (1 subgoal):\n 1. rho &[y \\<and> x]_xs &[z \\<and> y]_xs = rho &[z \\<and> x]_xs", "by (intro freshEnv_swapEnv_compose) auto"], ["", "subsubsection \\<open>W.r.t. abstractions\\<close>"], ["", "theorem wls_swapAbs_ident[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[x \\<and> x]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow> A $[x \\<and> x]_xs = A", "by (elim wlsAbs_cases) auto"], ["", "theorem wls_swapAbs_compose:\n\"wlsAbs (us,s) A \\<Longrightarrow>\n ((A $[x \\<and> y]_zs) $[x' \\<and> y']_zs') =\n ((A $[x' \\<and> y']_zs') $[(x @zs[x' \\<and> y']_zs') \\<and> (y @zs[x' \\<and> y']_zs')]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[x' \\<and> y']_zs' =\n    A $[x' \\<and> y']_zs' $[x @zs[x' \\<and> y']_zs' \\<and> y @zs[x' \\<and> y']_zs']_zs", "by (erule wlsAbs_cases) (simp, metis sw_compose wls_swap_compose)"], ["", "theorem wls_swapAbs_commute:\nassumes \"zs \\<noteq> zs' \\<or> {x,y} \\<inter> {x',y'} = {}\"\nshows\n\"wlsAbs (us,s) A \\<Longrightarrow>\n ((A $[x \\<and> y]_zs) $[x' \\<and> y']_zs') = ((A $[x' \\<and> y']_zs') $[x \\<and> y]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[x' \\<and> y']_zs' =\n    A $[x' \\<and> y']_zs' $[x \\<and> y]_zs", "using assms"], ["proof (prove)\nusing this:\n  zs \\<noteq> zs' \\<or> {x, y} \\<inter> {x', y'} = {}\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[x' \\<and> y']_zs' =\n    A $[x' \\<and> y']_zs' $[x \\<and> y]_zs", "by (elim wlsAbs_cases) (simp add: sw_commute wls_swap_commute)"], ["", "theorem wls_swapAbs_involutive[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> ((A $[x \\<and> y]_zs) $[x \\<and> y]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[x \\<and> y]_zs = A", "by (erule wlsAbs_cases) simp_all"], ["", "theorem wls_swapAbs_sym:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[x \\<and> y]_zs) = (A $[y \\<and> x]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs = A $[y \\<and> x]_zs", "by (erule wlsAbs_cases) (auto simp add: swap_sym sw_sym)"], ["", "theorem wls_swapAbs_inj[simp]:\nassumes \"wlsAbs (us,s) A\" and \"wlsAbs (us,s) A'\"\nshows\n\"((A $[x \\<and> y]_zs) = (A' $[x \\<and> y]_zs)) =\n (A = A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A $[x \\<and> y]_zs = A' $[x \\<and> y]_zs) = (A = A')", "by (metis assms wls_swapAbs_involutive)"], ["", "theorem wls_swapAbs_involutive2[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> ((A $[x \\<and> y]_zs) $[y \\<and> x]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[y \\<and> x]_zs = A", "using wls_swapAbs_sym[of us s A zs x y]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A \\<Longrightarrow> A $[x \\<and> y]_zs = A $[y \\<and> x]_zs\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    A $[x \\<and> y]_zs $[y \\<and> x]_zs = A", "by auto"], ["", "theorem wls_swapAbs_preserves_freshAbs[simp]:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs (x @xs[y1 \\<and> y2]_ys) (A $[y1 \\<and> y2]_ys) = freshAbs xs x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    freshAbs xs (x @xs[y1 \\<and> y2]_ys) (A $[y1 \\<and> y2]_ys) =\n    freshAbs xs x A", "by (erule wlsAbs_cases)   \n  (simp_all add: sw_def wls_fresh_swap_exchange1 wls_fresh_swap_exchange2 \nwls_swap_preserves_fresh_distinct)"], ["", "theorem wls_swapAbs_preserves_freshAbs_distinct:\n\"\\<lbrakk>wlsAbs (us,s) A; xs \\<noteq> ys \\<or> x \\<notin> {y1,y2}\\<rbrakk>\n \\<Longrightarrow> freshAbs xs x (A $[y1 \\<and> y2]_ys) = freshAbs xs x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsAbs (us, s) A;\n     xs \\<noteq> ys \\<or> x \\<notin> {y1, y2}\\<rbrakk>\n    \\<Longrightarrow> freshAbs xs x (A $[y1 \\<and> y2]_ys) = freshAbs xs x A", "apply(erule wlsAbs_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa X.\n       \\<lbrakk>xs \\<noteq> ys \\<or> x \\<notin> {y1, y2}; isInBar (us, s);\n        wls s X\\<rbrakk>\n       \\<Longrightarrow> freshAbs xs x (Abs us xa X $[y1 \\<and> y2]_ys) =\n                         freshAbs xs x (Abs us xa X)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa X.\n       \\<lbrakk>xs = ys \\<longrightarrow>\n                x \\<noteq> y1 \\<and> x \\<noteq> y2;\n        isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and> x = xa @us[y1 \\<and> y2]_ys \\<or>\n                          fresh xs x (X #[y1 \\<and> y2]_ys)) =\n                         (xs = us \\<and> x = xa \\<or> fresh xs x X)", "unfolding sw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa X.\n       \\<lbrakk>xs = ys \\<longrightarrow>\n                x \\<noteq> y1 \\<and> x \\<noteq> y2;\n        isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and>\n                          x =\n                          (if ys = us\n                           then if xa = y1 then y2\n                                else if xa = y2 then y1 else xa\n                           else xa) \\<or>\n                          fresh xs x (X #[y1 \\<and> y2]_ys)) =\n                         (xs = us \\<and> x = xa \\<or> fresh xs x X)", "by (auto simp: wls_swap_preserves_fresh_distinct)"], ["", "theorem wls_freshAbs_swapAbs_exchange1:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs x2 (A $[x1 \\<and> x2]_xs) = freshAbs xs x1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    freshAbs xs x2 (A $[x1 \\<and> x2]_xs) = freshAbs xs x1 A", "apply(erule wlsAbs_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> freshAbs xs x2 (Abs us x X $[x1 \\<and> x2]_xs) =\n                         freshAbs xs x1 (Abs us x X)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and> x2 = x @us[x1 \\<and> x2]_xs \\<or>\n                          fresh xs x2 (X #[x1 \\<and> x2]_xs)) =\n                         (xs = us \\<and> x1 = x \\<or> fresh xs x1 X)", "unfolding sw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and>\n                          x2 =\n                          (if xs = us\n                           then if x = x1 then x2\n                                else if x = x2 then x1 else x\n                           else x) \\<or>\n                          fresh xs x2 (X #[x1 \\<and> x2]_xs)) =\n                         (xs = us \\<and> x1 = x \\<or> fresh xs x1 X)", "by (auto simp add: wls_fresh_swap_exchange1)"], ["", "theorem wls_freshAbs_swapAbs_exchange2:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> freshAbs xs x2 (A $[x2 \\<and> x1]_xs) = freshAbs xs x1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    freshAbs xs x2 (A $[x2 \\<and> x1]_xs) = freshAbs xs x1 A", "apply(erule wlsAbs_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> freshAbs xs x2 (Abs us x X $[x2 \\<and> x1]_xs) =\n                         freshAbs xs x1 (Abs us x X)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and> x2 = x @us[x2 \\<and> x1]_xs \\<or>\n                          fresh xs x2 (X #[x2 \\<and> x1]_xs)) =\n                         (xs = us \\<and> x1 = x \\<or> fresh xs x1 X)", "unfolding sw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (us, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> (xs = us \\<and>\n                          x2 =\n                          (if xs = us\n                           then if x = x2 then x1\n                                else if x = x1 then x2 else x\n                           else x) \\<or>\n                          fresh xs x2 (X #[x2 \\<and> x1]_xs)) =\n                         (xs = us \\<and> x1 = x \\<or> fresh xs x1 X)", "by (auto simp add: wls_fresh_swap_exchange2)"], ["", "theorem wls_freshAbs_swapAbs_id[simp]:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs xs x1 A\" and \"freshAbs xs x2 A\"\nshows \"(A $[x1 \\<and> x2]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[x1 \\<and> x2]_xs = A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs xs x1 A\n  freshAbs xs x2 A\n\ngoal (1 subgoal):\n 1. A $[x1 \\<and> x2]_xs = A", "by simp"], ["", "lemma wls_freshAbs_swapAbs_compose_aux:\n\"\\<lbrakk>wlsAbs (us,s) A; wlsPar P\\<rbrakk> \\<Longrightarrow>\n \\<forall> x y z. {x,y,z} \\<subseteq> varsOfS P xs \\<and> freshAbs xs y A \\<and> freshAbs xs z A \\<longrightarrow>\n           ((A $[y \\<and> x]_xs) $[z \\<and> y]_xs) = (A $[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsAbs (us, s) A; wlsPar P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y z.\n                         {x, y, z} \\<subseteq> varsOfS P xs \\<and>\n                         freshAbs xs y A \\<and>\n                         freshAbs xs z A \\<longrightarrow>\n                         A $[y \\<and> x]_xs $[z \\<and> y]_xs =\n                         A $[z \\<and> x]_xs", "apply(erule wlsAbs_fresh_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wlsPar P \\<Longrightarrow> wlsPar P\n 2. \\<And>x X.\n       \\<lbrakk>wlsPar P; wls s X; \\<And>ys. x \\<notin> varsOfS P ys;\n        \\<And>s' Y. Y \\<in> termsOfS P s' \\<Longrightarrow> fresh us x Y;\n        \\<And>usa s' B.\n           B \\<in> absOfS P (usa, s') \\<Longrightarrow> freshAbs us x B;\n        \\<And>rho.\n           rho \\<in> envsOfS P \\<Longrightarrow> freshEnv us x rho\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa y z.\n                            {xa, y, z} \\<subseteq> varsOfS P xs \\<and>\n                            freshAbs xs y (Abs us x X) \\<and>\n                            freshAbs xs z (Abs us x X) \\<longrightarrow>\n                            Abs us x X $[y \\<and> xa]_xs $[z \\<and> y]_xs =\n                            Abs us x X $[z \\<and> xa]_xs", "by simp_all (metis fresh_swap_compose sw_def wls_imp_good)"], ["", "theorem wls_freshAbs_swapAbs_compose:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs xs y A\"  and \"freshAbs xs z A\"\nshows \"((A $[y \\<and> x]_xs) $[z \\<and> y]_xs) = (A $[z \\<and> x]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "let ?P =\n  \"ParS (\\<lambda>xs'. if xs' = xs then [x,y,z] else []) (\\<lambda>s.[]) (\\<lambda>_. []) [] ::\n  ('index, 'bindex, 'varSort, 'var, 'opSym, 'sort) paramS\""], ["proof (state)\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "using assms wls_freshAbs_swapAbs_compose_aux[of us s A ?P xs]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs xs y A\n  freshAbs xs z A\n  \\<lbrakk>wlsAbs (us, s) A;\n   wlsPar\n    (ParS (\\<lambda>xs'. if xs' = xs then [x, y, z] else [])\n      (\\<lambda>s. []) (\\<lambda>_. []) [])\\<rbrakk>\n  \\<Longrightarrow> \\<forall>xa ya za.\n                       {xa, ya, za}\n                       \\<subseteq> varsOfS\n                                    (ParS\n(\\<lambda>xs'. if xs' = xs then [x, y, z] else []) (\\<lambda>s. [])\n(\\<lambda>_. []) [])\n                                    xs \\<and>\n                       freshAbs xs ya A \\<and>\n                       freshAbs xs za A \\<longrightarrow>\n                       A $[ya \\<and> xa]_xs $[za \\<and> ya]_xs =\n                       A $[za \\<and> xa]_xs\n\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs xs y A\n  freshAbs xs z A\n  \\<lbrakk>wlsAbs (us, s) A;\n   (\\<forall>s.\n       \\<forall>X\\<in>termsOfS\n                       (ParS\n                         (\\<lambda>xs'. if xs' = xs then [x, y, z] else [])\n                         (\\<lambda>s. []) (\\<lambda>_. []) [])\n                       s.\n          wls s X) \\<and>\n   (\\<forall>xsa s.\n       \\<forall>A\\<in>absOfS\n                       (ParS\n                         (\\<lambda>xs'. if xs' = xs then [x, y, z] else [])\n                         (\\<lambda>s. []) (\\<lambda>_. []) [])\n                       (xsa, s).\n          wlsAbs (xsa, s) A) \\<and>\n   Ball\n    (envsOfS\n      (ParS (\\<lambda>xs'. if xs' = xs then [x, y, z] else [])\n        (\\<lambda>s. []) (\\<lambda>_. []) []))\n    wlsEnv\\<rbrakk>\n  \\<Longrightarrow> \\<forall>xa ya za.\n                       {xa, ya, za}\n                       \\<subseteq> varsOfS\n                                    (ParS\n(\\<lambda>xs'. if xs' = xs then [x, y, z] else []) (\\<lambda>s. [])\n(\\<lambda>_. []) [])\n                                    xs \\<and>\n                       freshAbs xs ya A \\<and>\n                       freshAbs xs za A \\<longrightarrow>\n                       A $[ya \\<and> xa]_xs $[za \\<and> ya]_xs =\n                       A $[za \\<and> xa]_xs\n\ngoal (1 subgoal):\n 1. A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs", "by simp"], ["proof (state)\nthis:\n  A $[y \\<and> x]_xs $[z \\<and> y]_xs = A $[z \\<and> x]_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_skelAbs_swapAbs:\n\"wlsAbs (us,s) A\n \\<Longrightarrow> skelAbs (A $[x1 \\<and> x2]_xs) = skelAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow>\n    skelAbs (A $[x1 \\<and> x2]_xs) = skelAbs A", "by (erule wlsAbs_cases) (auto simp: wls_skel_swap)"], ["", "lemmas wls_swapAll_freshAll_otherSimps =\nwls_swap_ident wls_swap_involutive wls_swap_inj wls_swap_involutive2 wls_swap_preserves_fresh wls_fresh_swap_id\n\nwls_swapAbs_ident wls_swapAbs_involutive wls_swapAbs_inj wls_swapAbs_involutive2 wls_swapAbs_preserves_freshAbs\nwls_freshAbs_swapAbs_id\n\nwls_swapEnv_ident wls_swapEnv_involutive wls_swapEnv_inj wls_swapEnv_involutive2 wls_swapEnv_preserves_freshEnv\nwls_freshEnv_swapEnv_id"], ["", "subsection \\<open>Compositionality properties for the other operators\\<close>"], ["", "subsubsection \\<open>Environment identity, update and ``get\" versus other operators\\<close>"], ["", "(* Recall lemmas getEnv_idEnv, getEnv_updEnv_idEnv, getEnv_updEnv1, getEnv_updEnv2,\nsubst_psubst_idEnv, vsubst_psubst_idEnv, substEnv_psubstEnv_idEnv, vsubstEnv_psubstEnv_idEnv,\nfreshEnv_idEnv,\nswapEnv_idEnv, psubstEnv_idEnv, substEnv_idEnv, vsubstEnv_idEnv. *)"], ["", "theorem wls_psubst_idEnv[simp]:\n\"wls s X \\<Longrightarrow> (X #[idEnv]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow> X #[idEnv] = X", "by simp"], ["", "theorem wls_psubstEnv_idEnv_id[simp]:\n\"wlsEnv rho \\<Longrightarrow> (rho &[idEnv]) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsEnv rho \\<Longrightarrow> rho &[idEnv] = rho", "by simp"], ["", "(* Recall lemmas updEnv_overwrite, updEnv_commute,\n   freshEnv_updEnv_E1, freshEnv_updEnv_E2, freshEnv_updEnv_E3, freshEnv_updEnv_E4,\n   freshEnv_updEnv_I,\n   swapEnv_updEnv *)"], ["", "theorem wls_swapEnv_updEnv_fresh:\nassumes \"zs \\<noteq> ys \\<or> y \\<notin> {z1,z2}\" and \"wls (asSort ys) Y\"\nand \"fresh zs z1 Y\" and \"fresh zs z2 Y\"\nshows \"((rho [y \\<leftarrow> Y]_ys) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) [y \\<leftarrow> Y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs [y \\<leftarrow> Y]_ys", "using assms"], ["proof (prove)\nusing this:\n  zs \\<noteq> ys \\<or> y \\<notin> {z1, z2}\n  wls (asSort ys) Y\n  fresh zs z1 Y\n  fresh zs z2 Y\n\ngoal (1 subgoal):\n 1. rho [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs [y \\<leftarrow> Y]_ys", "by (simp add: swapEnv_updEnv_fresh)"], ["", "(* Recall lemmas psubstEnv_updEnv, psubstEnv_updEnv_idEnv,\n   substEnv_updEnv,  vsubstEnv_updEnv, getEnv_ext *)\n\n(* Recall lemmas freshEnv_getEnv1 freshEnv_getEnv2 freshEnv_getEnv swapEnv_getEnv1 swapEnv_getEnv2\n   getEnv_psubstEnv_None getEnv_psubstEnv_Some\n   getEnv_substEnv1 getEnv_substEnv2 getEnv_substEnv3 getEnv_substEnv4\n   getEnv_vsubstEnv1 getEnv_vsubstEnv2 getEnv_vsubstEnv3 getEnv_vsubstEnv4. *)"], ["", "subsubsection \\<open>Substitution versus other operators\\<close>"], ["", "(* Recall definition freshImEnvAt_def. *)"], ["", "theorem wls_fresh_psubst:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows\n\"fresh zs z (X #[rho]) =\n (\\<forall> ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho] =\n    (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho] =\n    (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)", "by(simp add: fresh_psubst)"], ["", "theorem wls_fresh_psubst_E1:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho ys y = None\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "using assms fresh_psubst_E1[of X rho ys y zs z]"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  rho ys y = None\n  fresh zs z X #[rho]\n  \\<lbrakk>good X; goodEnv rho; rho ys y = None;\n   fresh zs z X #[rho]\\<rbrakk>\n  \\<Longrightarrow> fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "by simp"], ["", "theorem wls_fresh_psubst_E2:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho ys y = Some Y\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "using assms fresh_psubst_E2[of X rho ys y Y zs z]"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  rho ys y = Some Y\n  fresh zs z X #[rho]\n  \\<lbrakk>good X; goodEnv rho; rho ys y = Some Y;\n   fresh zs z X #[rho]\\<rbrakk>\n  \\<Longrightarrow> fresh ys y X \\<or> fresh zs z Y\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "by simp"], ["", "theorem wls_fresh_psubst_I1:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"fresh zs z X\" and \"freshEnv zs z rho\"\nshows \"fresh zs z (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  fresh zs z X\n  freshEnv zs z rho\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "by(simp add: fresh_psubst_I1)"], ["", "theorem wls_psubstEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nand fresh: \"freshEnv zs z rho\"  \"freshEnv zs z rho'\"\nshows \"freshEnv zs z (rho &[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z rho &[rho']", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n  freshEnv zs z rho\n  freshEnv zs z rho'\n\ngoal (1 subgoal):\n 1. freshEnv zs z rho &[rho']", "by(simp add: psubstEnv_preserves_freshEnv)"], ["", "theorem wls_fresh_psubst_I:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> fresh zs z X\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> fresh ys y X \\<or> fresh zs z Y\"\nshows \"fresh zs z (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  rho zs z = None \\<Longrightarrow> fresh zs z X\n  rho ?ys1 ?y1 = Some ?Y1 \\<Longrightarrow>\n  fresh ?ys1 ?y1 X \\<or> fresh zs z ?Y1\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "by(simp add: fresh_psubst_I)"], ["", "theorem wls_fresh_subst:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"fresh zs z (X #[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> fresh zs z Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> fresh zs z Y))", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> fresh zs z Y))", "by(simp add: fresh_subst)"], ["", "theorem wls_fresh_vsubst:\nassumes \"wls s X\"\nshows \"fresh zs z (X #[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "by(simp add: fresh_vsubst)"], ["", "theorem wls_subst_preserves_fresh:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z X\" and \"fresh zs z Y\"\nshows \"fresh zs z (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  fresh zs z X\n  fresh zs z Y\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys)", "by(simp add: subst_preserves_fresh)"], ["", "theorem wls_substEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"freshEnv zs z rho\" and \"fresh zs z Y\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  freshEnv zs z rho\n  fresh zs z Y\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "by(simp add: substEnv_preserves_freshEnv)"], ["", "theorem wls_vsubst_preserves_fresh:\nassumes \"wls s X\"\nand \"fresh zs z X\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"fresh zs z (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh zs z X\n  zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys)", "by(simp add: vsubst_preserves_fresh)"], ["", "theorem wls_vsubstEnv_preserves_freshEnv:\nassumes \"wlsEnv rho\"\nand \"freshEnv zs z rho\" and \"zs \\<noteq> ys \\<or> z \\<notin> {y,y1}\"\nshows \"freshEnv zs z (rho &[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  freshEnv zs z rho\n  zs \\<noteq> ys \\<or> z \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[y1 // y]_ys)", "by(simp add: vsubstEnv_preserves_freshEnv)"], ["", "theorem wls_fresh_fresh_subst[simp]:\nassumes \"wls (asSort ys) Y\" and \"wls s  X\"\nand \"fresh ys y Y\"\nshows \"fresh ys y (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wls s X\n  fresh ys y Y\n\ngoal (1 subgoal):\n 1. fresh ys y (X #[Y / y]_ys)", "by(simp add: fresh_fresh_subst)"], ["", "theorem wls_diff_fresh_vsubst[simp]:\nassumes \"wls s X\"\nand \"y \\<noteq> y1\"\nshows \"fresh ys y (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. fresh ys y (X #[y1 // y]_ys)", "by(simp add: diff_fresh_vsubst)"], ["", "theorem wls_fresh_subst_E1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z (X #[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X", "using assms fresh_subst_E1[of X Y zs z ys y]"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  fresh zs z (X #[Y / y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n  \\<lbrakk>good X; good Y; fresh zs z (X #[Y / y]_ys);\n   zs \\<noteq> ys \\<or> z \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> fresh zs z X\n\ngoal (1 subgoal):\n 1. fresh zs z X", "by simp"], ["", "theorem wls_fresh_vsubst_E1:\nassumes \"wls s X\"\nand \"fresh zs z (X #[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X", "using assms fresh_vsubst_E1[of X zs z ys y1 y]"], ["proof (prove)\nusing this:\n  wls s X\n  fresh zs z (X #[y1 // y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n  \\<lbrakk>good X; fresh zs z (X #[y1 // y]_ys);\n   zs \\<noteq> ys \\<or> z \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> fresh zs z X\n\ngoal (1 subgoal):\n 1. fresh zs z X", "by simp"], ["", "theorem wls_fresh_subst_E2:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nand \"fresh zs z (X #[Y / y]_ys)\"\nshows \"fresh ys y X \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "using assms fresh_subst_E2[of X Y zs z ys y]"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  fresh zs z (X #[Y / y]_ys)\n  \\<lbrakk>good X; good Y; fresh zs z (X #[Y / y]_ys)\\<rbrakk>\n  \\<Longrightarrow> fresh ys y X \\<or> fresh zs z Y\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "by simp"], ["", "theorem wls_fresh_vsubst_E2:\nassumes \"wls s X\"\nand \"fresh zs z (X #[y1 // y]_ys)\"\nshows \"fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "using assms fresh_vsubst_E2[of X zs z ys y1 y]"], ["proof (prove)\nusing this:\n  wls s X\n  fresh zs z (X #[y1 // y]_ys)\n  \\<lbrakk>good X; fresh zs z (X #[y1 // y]_ys)\\<rbrakk>\n  \\<Longrightarrow> fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "by simp"], ["", "theorem wls_psubst_cong[fundef_cong]:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nand \"\\<And> ys y. fresh ys y X \\<or> rho ys y = rho' ys y\"\nshows \"(X #[rho]) = (X #[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] = X #[rho']", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  wlsEnv rho'\n  fresh ?ys1 ?y1 X \\<or> rho ?ys1 ?y1 = rho' ?ys1 ?y1\n\ngoal (1 subgoal):\n 1. X #[rho] = X #[rho']", "by (simp add: psubst_cong)"], ["", "theorem wls_fresh_psubst_updEnv:\nassumes \"wls (asSort ys) Y\" and \"wls s X\" and \"wlsEnv rho\"\nand \"fresh ys y X\"\nshows \"(X #[rho [y \\<leftarrow> Y]_ys]) = (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho [y \\<leftarrow> Y]_ys] = X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wls s X\n  wlsEnv rho\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. X #[rho [y \\<leftarrow> Y]_ys] = X #[rho]", "by(simp add: fresh_psubst_updEnv)"], ["", "theorem wls_freshEnv_psubst_ident[simp]:\nassumes \"wls s X\" and \"wlsEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> fresh zs z X\"\nshows \"(X #[rho]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  freshEnv ?zs1 ?z1 rho \\<or> fresh ?zs1 ?z1 X\n\ngoal (1 subgoal):\n 1. X #[rho] = X", "by simp"], ["", "theorem wls_fresh_subst_ident[simp]:\nassumes \"wls (asSort ys) Y\" and \"wls s X\" and \"fresh ys y X\"\nshows \"(X #[Y / y]_ys) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys = X", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wls s X\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys = X", "by(simp add: fresh_subst_ident)"], ["", "theorem wls_substEnv_updEnv_fresh:\nassumes \"wls (asSort xs) X\" and \"wls (asSort ys) Y\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[Y / y]_ys) = ((rho &[Y / y]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Y / y]_ys =\n    rho &[Y / y]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort xs) X\n  wls (asSort ys) Y\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Y / y]_ys =\n    rho &[Y / y]_ys [x \\<leftarrow> X]_xs", "by(simp add: substEnv_updEnv_fresh)"], ["", "theorem wls_fresh_substEnv_updEnv[simp]:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"freshEnv ys y rho\"\nshows \"(rho &[Y / y]_ys) = (rho [y \\<leftarrow> Y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys = rho [y \\<leftarrow> Y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys = rho [y \\<leftarrow> Y]_ys", "by simp"], ["", "theorem wls_fresh_vsubst_ident[simp]:\nassumes \"wls s X\" and \"fresh ys y X\"\nshows \"(X #[y1 // y]_ys) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys = X", "by(simp add: fresh_vsubst_ident)"], ["", "theorem wls_vsubstEnv_updEnv_fresh:\nassumes \"wls s X\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[y1 // y]_ys) = ((rho &[y1 // y]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 // y]_ys =\n    rho &[y1 // y]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 // y]_ys =\n    rho &[y1 // y]_ys [x \\<leftarrow> X]_xs", "by(simp add: vsubstEnv_updEnv_fresh)"], ["", "theorem wls_fresh_vsubstEnv_updEnv[simp]:\nassumes \"wlsEnv rho\"\nand \"freshEnv ys y rho\"\nshows \"(rho &[y1 // y]_ys) = (rho [y \\<leftarrow> Var ys y1]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys = rho [y \\<leftarrow> Var ys y1]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys = rho [y \\<leftarrow> Var ys y1]_ys", "by simp"], ["", "theorem wls_swap_psubst:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. X #[rho] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "by(simp add: swap_psubst)"], ["", "theorem wls_swap_subst:\nassumes \"wls s  X\" and \"wls (asSort ys) Y\"\nshows \"((X #[Y / y]_ys) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swap_subst)"], ["", "theorem wls_swap_vsubst:\nassumes \"wls s X\"\nshows \"((X #[y1 // y]_ys) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swap_vsubst)"], ["", "theorem wls_swapEnv_psubstEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) &[rho' &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs]", "by(simp add: swapEnv_psubstEnv)"], ["", "theorem wls_swapEnv_substEnv:\nassumes \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((rho &[Y / y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapEnv_substEnv)"], ["", "theorem wls_swapEnv_vsubstEnv:\nassumes \"wlsEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapEnv_vsubstEnv)"], ["", "theorem wls_psubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((X #[rho]) #[rho']) = (X #[(rho &[rho'])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[rho'] = X #[rho &[rho']]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. X #[rho] #[rho'] = X #[rho &[rho']]", "by(simp add: psubst_compose)"], ["", "theorem wls_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\" and \"wlsEnv rho''\"\nshows \"((rho &[rho']) &[rho'']) = (rho &[(rho' &[rho''])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[rho''] = rho &[rho' &[rho'']]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n  wlsEnv rho''\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[rho''] = rho &[rho' &[rho'']]", "by(simp add: psubstEnv_compose)"], ["", "theorem wls_psubst_subst_compose:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho [y \\<leftarrow> Y #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho [y \\<leftarrow> Y #[rho]]_ys]", "by(simp add: psubst_subst_compose)"], ["", "theorem wls_psubst_subst_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wls s X\" and \"wls (asSort ys) Y\"\nand \"freshEnv ys y rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = ((X #[rho]) #[(Y #[rho]) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho] #[Y #[rho] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls s X\n  wls (asSort ys) Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho] #[Y #[rho] / y]_ys", "by (simp add: psubst_subst_compose_freshEnv)"], ["", "theorem wls_psubstEnv_substEnv_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\" and \"wls (asSort ys) Y\"\nassumes \"freshEnv ys y rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = ((rho &[rho']) &[(Y #[rho']) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho'] &[Y #[rho'] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n  wls (asSort ys) Y\n  freshEnv ys y rho'\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho'] &[Y #[rho'] / y]_ys", "by (simp add: psubstEnv_substEnv_compose_freshEnv)"], ["", "theorem wls_psubstEnv_substEnv_compose:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wlsEnv rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> (Y #[rho'])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho' [y \\<leftarrow> Y #[rho']]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho' [y \\<leftarrow> Y #[rho']]_ys]", "by(simp add: psubstEnv_substEnv_compose)"], ["", "theorem wls_psubst_vsubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[y1 // y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[rho] = X #[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[rho] = X #[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "by(simp add: psubst_vsubst_compose)"], ["", "theorem wls_psubstEnv_vsubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[y1 // y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> ((Var ys y1) #[rho'])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[rho'] =\n    rho &[rho' [y \\<leftarrow> Var ys y1 #[rho']]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[rho'] =\n    rho &[rho' [y \\<leftarrow> Var ys y1 #[rho']]_ys]", "by(simp add: psubstEnv_vsubstEnv_compose)"], ["", "theorem wls_subst_psubst_compose:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[Y / y]_ys) = (X #[(rho &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[Y / y]_ys = X #[rho &[Y / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. X #[rho] #[Y / y]_ys = X #[rho &[Y / y]_ys]", "by(simp add: subst_psubst_compose)"], ["", "theorem wls_substEnv_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[Y / y]_ys) = (rho &[(rho' &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[Y / y]_ys = rho &[rho' &[Y / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[Y / y]_ys = rho &[rho' &[Y / y]_ys]", "by(simp add: substEnv_psubstEnv_compose)"], ["", "theorem wls_vsubst_psubst_compose:\nassumes \"wls s X\" and \"wlsEnv rho\"\nshows \"((X #[rho]) #[y1 // y]_ys) = (X #[(rho &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[y1 // y]_ys = X #[rho &[y1 // y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. X #[rho] #[y1 // y]_ys = X #[rho &[y1 // y]_ys]", "by(simp add: vsubst_psubst_compose)"], ["", "theorem wls_vsubstEnv_psubstEnv_compose:\nassumes \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((rho &[rho']) &[y1 // y]_ys) = (rho &[(rho' &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[y1 // y]_ys = rho &[rho' &[y1 // y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[y1 // y]_ys = rho &[rho' &[y1 // y]_ys]", "by(simp add: vsubstEnv_psubstEnv_compose)"], ["", "theorem wls_subst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((X #[Y1 / y]_ys) #[Y2 / y]_ys) = (X #[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y1\n  wls (asSort ys) Y2\n\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "by(simp add: subst_compose1)"], ["", "theorem wls_substEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((rho &[Y1 / y]_ys) &[Y2 / y]_ys) = (rho &[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y1 / y]_ys &[Y2 / y]_ys = rho &[Y1 #[Y2 / y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y1\n  wls (asSort ys) Y2\n\ngoal (1 subgoal):\n 1. rho &[Y1 / y]_ys &[Y2 / y]_ys = rho &[Y1 #[Y2 / y]_ys / y]_ys", "by(simp add: substEnv_compose1)"], ["", "theorem wls_subst_vsubst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((X #[y1 // y]_ys) #[Y / y]_ys) = (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y]_ys = X #[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y]_ys = X #[y1 // y]_ys", "by(simp add: subst_vsubst_compose1)"], ["", "theorem wls_substEnv_vsubstEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((rho &[y1 // y]_ys) &[Y / y]_ys) = (rho &[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Y / y]_ys = rho &[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Y / y]_ys = rho &[y1 // y]_ys", "by(simp add: substEnv_vsubstEnv_compose1)"], ["", "theorem wls_vsubst_subst_compose1:\nassumes \"wls s X\" and \"wls (asSort ys) Y\"\nshows \"((X #[Y / y]_ys) #[y1 // y]_ys) = (X #[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[y1 // y]_ys = X #[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[y1 // y]_ys = X #[Y #[y1 // y]_ys / y]_ys", "by(simp add: vsubst_subst_compose1)"], ["", "theorem wls_vsubstEnv_substEnv_compose1:\nassumes \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nshows \"((rho &[Y / y]_ys) &[y1 // y]_ys) = (rho &[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[y1 // y]_ys = rho &[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[y1 // y]_ys = rho &[Y #[y1 // y]_ys / y]_ys", "by(simp add: vsubstEnv_substEnv_compose1)"], ["", "theorem wls_vsubst_compose1:\nassumes \"wls s X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y]_ys) = (X #[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y]_ys = X #[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y]_ys = X #[y1 @ys[y2 / y]_ys // y]_ys", "by(simp add: vsubst_compose1)"], ["", "theorem wls_vsubstEnv_compose1:\nassumes \"wlsEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[y2 // y]_ys) = (rho &[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[y2 // y]_ys = rho &[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[y2 // y]_ys = rho &[y1 @ys[y2 / y]_ys // y]_ys", "by(simp add: vsubstEnv_compose1)"], ["", "theorem wls_subst_compose2:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[Y / y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[Z / z]_zs = X #[Z / z]_zs #[Y #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[Z / z]_zs = X #[Z / z]_zs #[Y #[Z / z]_zs / y]_ys", "by(simp add: subst_compose2)"], ["", "theorem wls_substEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[Y / y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[Z / z]_zs = rho &[Z / z]_zs &[Y #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[Z / z]_zs = rho &[Z / z]_zs &[Y #[Z / z]_zs / y]_ys", "by(simp add: substEnv_compose2)"], ["", "theorem wls_subst_vsubst_compose2:\nassumes  \"wls s X\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[y1 // y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Z / z]_zs =\n    X #[Z / z]_zs #[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Z / z]_zs =\n    X #[Z / z]_zs #[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: subst_vsubst_compose2)"], ["", "theorem wls_substEnv_vsubstEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[y1 // y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Z / z]_zs =\n    rho &[Z / z]_zs &[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Z / z]_zs =\n    rho &[Z / z]_zs &[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: substEnv_vsubstEnv_compose2)"], ["", "theorem wls_vsubst_subst_compose2:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[Y / y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 // z]_zs = X #[z1 // z]_zs #[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 // z]_zs = X #[z1 // z]_zs #[Y #[z1 // z]_zs / y]_ys", "by(simp add: vsubst_subst_compose2)"], ["", "theorem wls_vsubstEnv_substEnv_compose2:\nassumes  \"wlsEnv rho\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[Y / y]_ys) &[z1 // z]_zs) = ((rho &[z1 // z]_zs) &[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wls (asSort ys) Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[Y #[z1 // z]_zs / y]_ys", "by(simp add: vsubstEnv_substEnv_compose2)"], ["", "theorem wls_vsubst_compose2:\nassumes  \"wls s X\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[y1 // y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 // z]_zs =\n    X #[z1 // z]_zs #[y1 @ys[z1 / z]_zs // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 // z]_zs =\n    X #[z1 // z]_zs #[y1 @ys[z1 / z]_zs // y]_ys", "by(simp add: vsubst_compose2)"], ["", "theorem wls_vsubstEnv_compose2:\nassumes  \"wlsEnv rho\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[y1 // y]_ys) &[z1 // z]_zs) =\n       ((rho &[z1 // z]_zs) &[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[y1 @ys[z1 / z]_zs // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[y1 @ys[z1 / z]_zs // y]_ys", "by(simp add: vsubstEnv_compose2)"], ["", "subsubsection \\<open>Properties specific to variable-for-variable substitution\\<close>"], ["", "theorem wls_vsubst_ident[simp]:\nassumes \"wls s X\"\nshows \"(X #[z // z]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[z // z]_zs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[z // z]_zs = X", "by(simp add: vsubst_ident)"], ["", "theorem wls_subst_ident[simp]:\nassumes \"wls s  X\"\nshows \"(X #[(Var zs z) / z]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Var zs z / z]_zs = X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[Var zs z / z]_zs = X", "by simp"], ["", "theorem wls_vsubst_eq_swap:\nassumes \"wls s X\" and \"y1 = y2 \\<or> fresh ys y1 X\"\nshows \"(X #[y1 // y2]_ys) = (X #[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  y1 = y2 \\<or> fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "by(simp add: vsubst_eq_swap)"], ["", "theorem wls_skel_vsubst:\nassumes \"wls s X\"\nshows \"skel (X #[y1 // y2]_ys) = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (X #[y1 // y2]_ys) = skel X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n\ngoal (1 subgoal):\n 1. skel (X #[y1 // y2]_ys) = skel X", "by(simp add: skel_vsubst)"], ["", "theorem wls_subst_vsubst_trans:\nassumes  \"wls s X\" and \"wls (asSort ys) Y\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[Y / y1]_ys) = (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y1]_ys = X #[Y / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort ys) Y\n  fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y1]_ys = X #[Y / y]_ys", "by (simp add: subst_vsubst_trans)"], ["", "theorem wls_vsubst_trans:\nassumes  \"wls s X\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y1]_ys) = (X #[y2 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y1]_ys = X #[y2 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y1]_ys = X #[y2 // y]_ys", "by (simp add: vsubst_trans)"], ["", "theorem wls_vsubst_commute:\nassumes \"wls s X\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"fresh xs x X\" and \"fresh xs' x' X\"\nshows \"((X #[x // y]_xs) #[x' // y']_xs') = ((X #[x' // y']_xs') #[x // y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  fresh xs x X\n  fresh xs' x' X\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "by(simp add: vsubst_commute)"], ["", "(* The next lemmas do not have ``good\" counterparts: *)"], ["", "theorem wls_induct[case_names Var Op Abs]:\nassumes\nVar: \"\\<And> xs x. phi (asSort xs) (Var xs x)\" and\nOp:\n\"\\<And> delta inp binp.\n   \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n    liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n   \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\" and\nAbs:\n\"\\<And> s xs x X.\n   \\<lbrakk>isInBar (xs,s); wls s X;\n    \\<And> Y. (X,Y) \\<in> swapped \\<Longrightarrow> phi s Y;\n    \\<And> ys y1 y2. phi s (X #[y1 // y2]_ys);\n    \\<And> Y. \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk> \\<Longrightarrow> phi s Y\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (Abs xs x X)\"\nshows\n\"(wls s X \\<longrightarrow> phi s X) \\<and>\n (wlsAbs (xs,s') A \\<longrightarrow> phiAbs (xs,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> phi s X) \\<and>\n    (wlsAbs (xs, s') A \\<longrightarrow> phiAbs (xs, s') A)", "apply(induction rule: wls_templateInduct\n[of \"\\<lambda>s. swapped \\<union> {(X, X #[y1 // y2]_ys)| X ys y1 y2. True}\n         \\<union> {(X,Y). wls s Y \\<and> skel Y = skel X}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s X Y.\n       \\<lbrakk>wls s X;\n        (X, Y)\n        \\<in> swapped \\<union>\n              {(X, X #[y1 // y2]_ys) |X ys y1 y2. True} \\<union>\n              {(X, Y). wls s Y \\<and> skel Y = skel X}\\<rbrakk>\n       \\<Longrightarrow> wls s Y \\<and> skel Y = skel X\n 2. \\<And>xs x. phi (asSort xs) (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 phi (arOf delta) inp;\n        liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> phi (stOf delta) (Op delta inp binp)\n 4. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> swapped \\<union>\n                 {(X, X #[y1 // y2]_ys) |X ys y1 y2. True} \\<union>\n                 {(X, Y). wls s Y \\<and> skel Y = skel X} \\<Longrightarrow>\n           phi s Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (xs, s) (Abs xs x X)", "by (auto simp add: assms swapped_preserves_wls swapped_skel wls_skel_vsubst \n   intro!: Abs)"], ["", "theorem wls_Abs_vsubst_all_aux:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n       (X #[y // x]_xs) = (X' #[y // x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>y.\n        (y = x \\<or> fresh xs y X) \\<and>\n        (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        X #[y // x]_xs = X' #[y // x']_xs)", "using assms wls_Abs_swap_all"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n  \\<lbrakk>wls ?s ?X; wls ?s ?X'\\<rbrakk>\n  \\<Longrightarrow> (Abs ?xs ?x ?X = Abs ?xs ?x' ?X') =\n                    (\\<forall>y.\n                        (y = ?x \\<or> fresh ?xs y ?X) \\<and>\n                        (y = ?x' \\<or> fresh ?xs y ?X') \\<longrightarrow>\n                        ?X #[y \\<and> ?x]_?xs = ?X' #[y \\<and> ?x']_?xs)\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>y.\n        (y = x \\<or> fresh xs y X) \\<and>\n        (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n        X #[y // x]_xs = X' #[y // x']_xs)", "by (simp add: wls_vsubst_eq_swap)"], ["", "theorem wls_Abs_vsubst_ex:\nassumes  \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<exists> y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X' \\<and>\n       (X #[y // x]_xs) = (X' #[y // x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "let ?phi = \"\\<lambda> f y. y \\<notin> {x,x'} \\<and> fresh xs y X \\<and> fresh xs y X'\n                     \\<and> (f xs y x X) = (f xs y x' X')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "assume \"Abs xs x X = Abs xs x' X'\""], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "then"], ["proof (chain)\npicking this:\n  Abs xs x X = Abs xs x' X'", "obtain y where \"?phi swap y\""], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and>\n        X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms wls_Abs_swap_ex"], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n  wls s X\n  wls s X'\n  \\<lbrakk>wls ?s ?X; wls ?s ?X'\\<rbrakk>\n  \\<Longrightarrow> (Abs ?xs ?x ?X = Abs ?xs ?x' ?X') =\n                    (\\<exists>y.\n                        y \\<notin> {?x, ?x'} \\<and>\n                        fresh ?xs y ?X \\<and>\n                        fresh ?xs y ?X' \\<and>\n                        ?X #[y \\<and> ?x]_?xs = ?X' #[y \\<and> ?x']_?xs)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and>\n        X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "hence \"?phi (\\<lambda> xs y x X. (X #[y // x]_xs)) y\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. y \\<notin> {x, x'} \\<and>\n    fresh xs y X \\<and>\n    fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs", "using assms"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. y \\<notin> {x, x'} \\<and>\n    fresh xs y X \\<and>\n    fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs", "by(simp add: wls_vsubst_eq_swap)"], ["proof (state)\nthis:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and> fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "hence \"\\<exists> y. ?phi (\\<lambda> xs y x X. (X #[y // x]_xs)) y\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and> fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       fresh xs y X \\<and>\n       fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "}"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "moreover"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "{"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "assume  \"?phi (\\<lambda> xs y x X. (X #[y // x]_xs)) y\""], ["proof (state)\nthis:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and> fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "hence \"?phi swap y\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and> fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. y \\<notin> {x, x'} \\<and>\n    fresh xs y X \\<and>\n    fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "using assms"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and> fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. y \\<notin> {x, x'} \\<and>\n    fresh xs y X \\<and>\n    fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "by(auto simp add: wls_vsubst_eq_swap)"], ["proof (state)\nthis:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "hence \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "using assms wls_Abs_swap_ex"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'} \\<and>\n  fresh xs y X \\<and>\n  fresh xs y X' \\<and> X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n  wls s X\n  wls s X'\n  \\<lbrakk>wls ?s ?X; wls ?s ?X'\\<rbrakk>\n  \\<Longrightarrow> (Abs ?xs ?x ?X = Abs ?xs ?x' ?X') =\n                    (\\<exists>y.\n                        y \\<notin> {?x, ?x'} \\<and>\n                        fresh ?xs y ?X \\<and>\n                        fresh ?xs y ?X' \\<and>\n                        ?X #[y \\<and> ?x]_?xs = ?X' #[y \\<and> ?x']_?xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by auto"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "}"], ["proof (state)\nthis:\n  ?y4 \\<notin> {x, x'} \\<and>\n  fresh xs ?y4 X \\<and>\n  fresh xs ?y4 X' \\<and>\n  X #[?y4 // x]_xs = X' #[?y4 // x']_xs \\<Longrightarrow>\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "ultimately"], ["proof (chain)\npicking this:\n  Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n  ?y4 \\<notin> {x, x'} \\<and>\n  fresh xs ?y4 X \\<and>\n  fresh xs ?y4 X' \\<and>\n  X #[?y4 // x]_xs = X' #[?y4 // x']_xs \\<Longrightarrow>\n  Abs xs x X = Abs xs x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n  \\<exists>y.\n     y \\<notin> {x, x'} \\<and>\n     fresh xs y X \\<and>\n     fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs\n  ?y4 \\<notin> {x, x'} \\<and>\n  fresh xs ?y4 X \\<and>\n  fresh xs ?y4 X' \\<and>\n  X #[?y4 // x]_xs = X' #[?y4 // x']_xs \\<Longrightarrow>\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        fresh xs y X \\<and>\n        fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)", "by auto"], ["proof (state)\nthis:\n  (Abs xs x X = Abs xs x' X') =\n  (\\<exists>y.\n      y \\<notin> {x, x'} \\<and>\n      fresh xs y X \\<and>\n      fresh xs y X' \\<and> X #[y // x]_xs = X' #[y // x']_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_Abs_vsubst_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> y. (X #[y // x]_xs) = (X' #[y // x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>y. X #[y // x]_xs = X' #[y // x']_xs)", "proof(rule iffI, clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs\n 2. \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs \\<Longrightarrow>\n    Abs xs x X = Abs xs x' X'", "assume \"\\<forall> y. (X #[y // x]_xs) = (X' #[y // x']_xs)\""], ["proof (state)\nthis:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs\n 2. \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs \\<Longrightarrow>\n    Abs xs x X = Abs xs x' X'", "thus \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by(auto simp add: wls_Abs_vsubst_all_aux)"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "assume \"Abs xs x X = Abs xs x' X'\""], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "then"], ["proof (chain)\npicking this:\n  Abs xs x X = Abs xs x' X'", "obtain z where z_fresh: \"fresh xs z X \\<and> fresh xs z X'\"\n  and \"(X #[z // x]_xs) = (X' #[z // x']_xs)\""], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>fresh xs z X \\<and> fresh xs z X';\n         X #[z // x]_xs = X' #[z // x']_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>fresh xs z X \\<and> fresh xs z X';\n         X #[z // x]_xs = X' #[z // x']_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wls_Abs_vsubst_ex)"], ["proof (state)\nthis:\n  fresh xs z X \\<and> fresh xs z X'\n  X #[z // x]_xs = X' #[z // x']_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "hence \"((X #[z // x]_xs) #[y // z]_xs) = ((X' #[z // x']_xs) #[y // z]_xs)\""], ["proof (prove)\nusing this:\n  fresh xs z X \\<and> fresh xs z X'\n  X #[z // x]_xs = X' #[z // x']_xs\n\ngoal (1 subgoal):\n 1. X #[z // x]_xs #[y // z]_xs = X' #[z // x']_xs #[y // z]_xs", "by simp"], ["proof (state)\nthis:\n  X #[z // x]_xs #[y // z]_xs = X' #[z // x']_xs #[y // z]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       Abs xs x X = Abs xs x' X' \\<Longrightarrow>\n       X #[y // x]_xs = X' #[y // x']_xs", "thus \"(X #[y // x]_xs) = (X' #[y // x']_xs)\""], ["proof (prove)\nusing this:\n  X #[z // x]_xs #[y // z]_xs = X' #[z // x']_xs #[y // z]_xs\n\ngoal (1 subgoal):\n 1. X #[y // x]_xs = X' #[y // x']_xs", "using assms z_fresh wls_vsubst_trans"], ["proof (prove)\nusing this:\n  X #[z // x]_xs #[y // z]_xs = X' #[z // x']_xs #[y // z]_xs\n  wls s X\n  wls s X'\n  fresh xs z X \\<and> fresh xs z X'\n  \\<lbrakk>wls ?s ?X; fresh ?ys ?y1.0 ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[?y1.0 // ?y]_?ys #[?y2.0 // ?y1.0]_?ys =\n                    ?X #[?y2.0 // ?y]_?ys\n\ngoal (1 subgoal):\n 1. X #[y // x]_xs = X' #[y // x']_xs", "by auto"], ["proof (state)\nthis:\n  X #[y // x]_xs = X' #[y // x']_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_Abs_subst_all:\nassumes \"wls s X\" and \"wls s X'\"\nshows\n\"(Abs xs x X = Abs xs x' X') =\n (\\<forall> Y. wls (asSort xs) Y \\<longrightarrow> (X #[Y / x]_xs) = (X' #[Y / x']_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs xs x X = Abs xs x' X') =\n    (\\<forall>Y.\n        wls (asSort xs) Y \\<longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs)", "proof(rule iffI, clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n 2. \\<forall>Y.\n       wls (asSort xs) Y \\<longrightarrow>\n       X #[Y / x]_xs = X' #[Y / x']_xs \\<Longrightarrow>\n    Abs xs x X = Abs xs x' X'", "assume \"\\<forall> Y. wls (asSort xs) Y \\<longrightarrow> (X #[Y / x]_xs) = (X' #[Y / x']_xs)\""], ["proof (state)\nthis:\n  \\<forall>Y.\n     wls (asSort xs) Y \\<longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n 2. \\<forall>Y.\n       wls (asSort xs) Y \\<longrightarrow>\n       X #[Y / x]_xs = X' #[Y / x']_xs \\<Longrightarrow>\n    Abs xs x X = Abs xs x' X'", "hence \"\\<forall> y. (X #[y // x]_xs) = (X' #[y // x']_xs)\""], ["proof (prove)\nusing this:\n  \\<forall>Y.\n     wls (asSort xs) Y \\<longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n\ngoal (1 subgoal):\n 1. \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  \\<forall>Y.\n     wls (asSort xs) Y \\<longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n\ngoal (1 subgoal):\n 1. \\<forall>y. X #[Var xs y / x]_xs = X' #[Var xs y / x']_xs", "by simp"], ["proof (state)\nthis:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs\n 2. \\<forall>Y.\n       wls (asSort xs) Y \\<longrightarrow>\n       X #[Y / x]_xs = X' #[Y / x']_xs \\<Longrightarrow>\n    Abs xs x X = Abs xs x' X'", "thus \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "using assms wls_Abs_vsubst_all"], ["proof (prove)\nusing this:\n  \\<forall>y. X #[y // x]_xs = X' #[y // x']_xs\n  wls s X\n  wls s X'\n  \\<lbrakk>wls ?s ?X; wls ?s ?X'\\<rbrakk>\n  \\<Longrightarrow> (Abs ?xs ?x ?X = Abs ?xs ?x' ?X') =\n                    (\\<forall>y. ?X #[y // ?x]_?xs = ?X' #[y // ?x']_?xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by auto"], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "assume Y: \"wls (asSort xs) Y\""], ["proof (state)\nthis:\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "assume \"Abs xs x X = Abs xs x' X'\""], ["proof (state)\nthis:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "then"], ["proof (chain)\npicking this:\n  Abs xs x X = Abs xs x' X'", "obtain z where z_fresh: \"fresh xs z X \\<and> fresh xs z X'\"\n  and \"(X #[z // x]_xs) = (X' #[z // x']_xs)\""], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>fresh xs z X \\<and> fresh xs z X';\n         X #[z // x]_xs = X' #[z // x']_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Abs xs x X = Abs xs x' X'\n  wls s X\n  wls s X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>fresh xs z X \\<and> fresh xs z X';\n         X #[z // x]_xs = X' #[z // x']_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wls_Abs_vsubst_ex)"], ["proof (state)\nthis:\n  fresh xs z X \\<and> fresh xs z X'\n  X #[z // x]_xs = X' #[z // x']_xs\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "hence \"((X #[z // x]_xs) #[Y / z]_xs) = ((X' #[z // x']_xs) #[Y / z]_xs)\""], ["proof (prove)\nusing this:\n  fresh xs z X \\<and> fresh xs z X'\n  X #[z // x]_xs = X' #[z // x']_xs\n\ngoal (1 subgoal):\n 1. X #[z // x]_xs #[Y / z]_xs = X' #[z // x']_xs #[Y / z]_xs", "by simp"], ["proof (state)\nthis:\n  X #[z // x]_xs #[Y / z]_xs = X' #[z // x']_xs #[Y / z]_xs\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Abs xs x X = Abs xs x' X'; wls (asSort xs) Y\\<rbrakk>\n       \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "thus \"(X #[Y / x]_xs) = (X' #[Y / x']_xs)\""], ["proof (prove)\nusing this:\n  X #[z // x]_xs #[Y / z]_xs = X' #[z // x']_xs #[Y / z]_xs\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "using assms z_fresh Y wls_subst_vsubst_trans"], ["proof (prove)\nusing this:\n  X #[z // x]_xs #[Y / z]_xs = X' #[z // x']_xs #[Y / z]_xs\n  wls s X\n  wls s X'\n  fresh xs z X \\<and> fresh xs z X'\n  wls (asSort xs) Y\n  \\<lbrakk>wls ?s ?X; wls (asSort ?ys) ?Y; fresh ?ys ?y1.0 ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[?y1.0 // ?y]_?ys #[?Y / ?y1.0]_?ys =\n                    ?X #[?Y / ?y]_?ys\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "by auto"], ["proof (state)\nthis:\n  X #[Y / x]_xs = X' #[Y / x']_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_inj_fresh[simp]:\nassumes X: \"wls s X\" and X': \"wls s X'\"\nand fresh_X: \"fresh ys x X\" and fresh_X': \"fresh ys x' X'\"\nand eq: \"Abs ys x X = Abs ys x' X'\"\nshows \"X = X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X = X'", "obtain z where \"(X #[z // x]_ys) = (X' #[z // x']_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        X #[z // x]_ys = X' #[z // x']_ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using X X' eq"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n  Abs ys x X = Abs ys x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        X #[z // x]_ys = X' #[z // x']_ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wls_Abs_vsubst_ex)"], ["proof (state)\nthis:\n  X #[z // x]_ys = X' #[z // x']_ys\n\ngoal (1 subgoal):\n 1. X = X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[z // x]_ys = X' #[z // x']_ys\n\ngoal (1 subgoal):\n 1. X = X'", "using X X' fresh_X fresh_X'"], ["proof (prove)\nusing this:\n  X #[z // x]_ys = X' #[z // x']_ys\n  wls s X\n  wls s X'\n  fresh ys x X\n  fresh ys x' X'\n\ngoal (1 subgoal):\n 1. X = X'", "by simp"], ["proof (state)\nthis:\n  X = X'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wls_Abs_vsubst_cong:\nassumes \"wls s X\" and \"wls s X'\"\nand \"fresh xs y X\" and \"fresh xs y X'\"  and \"(X #[y // x]_xs) = (X' #[y // x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls s X'\n  fresh xs y X\n  fresh xs y X'\n  X #[y // x]_xs = X' #[y // x']_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by (intro wls_Abs_swap_cong) (auto simp: wls_vsubst_eq_swap)"], ["", "theorem wls_Abs_vsubst_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (X #[x' // x]_xs) = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x' (X #[x' // x]_xs) = Abs xs x X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n\ngoal (1 subgoal):\n 1. Abs xs x' (X #[x' // x]_xs) = Abs xs x X", "by(simp add: wls_vsubst_eq_swap)"], ["", "theorem wls_Abs_subst_Var_fresh[simp]:\nassumes \"wls s X\" and \"fresh xs x' X\"\nshows \"Abs xs x' (subst xs (Var xs x') x X) = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x' (X #[Var xs x' / x]_xs) = Abs xs x X", "using assms wls_Abs_vsubst_fresh"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n  \\<lbrakk>wls ?s ?X; fresh ?xs ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> Abs ?xs ?x' (?X #[?x' // ?x]_?xs) = Abs ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. Abs xs x' (X #[Var xs x' / x]_xs) = Abs xs x X", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  wls s X\n  fresh xs x' X\n  \\<lbrakk>wls ?s ?X; fresh ?xs ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> Abs ?xs ?x' (?X #[Var ?xs ?x' / ?x]_?xs) = Abs ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. Abs xs x' (X #[Var xs x' / x]_xs) = Abs xs x X", "by simp"], ["", "theorem wls_Abs_vsubst_congSTR:\nassumes \"wls s X\" and \"wls s X'\"\nand \"y = x \\<or> fresh xs y X\" \"y = x' \\<or> fresh xs y X'\"\nand \"(X #[y // x]_xs) = (X' #[y // x']_xs)\"\nshows \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs x' X'", "by (metis assms wls_Abs_vsubst_fresh wls_vsubst_ident)"], ["", "subsubsection \\<open>Abstraction versions of the properties\\<close>"], ["", "(* Environment identity and update versus other operators *)"], ["", "theorem wls_psubstAbs_idEnv[simp]:\n\"wlsAbs (us,s) A \\<Longrightarrow> (A $[idEnv]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A \\<Longrightarrow> A $[idEnv] = A", "by simp"], ["", "(* Substitution versus other operators  *)"], ["", "theorem wls_freshAbs_psubstAbs:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows\n\"freshAbs zs z (A $[rho]) =\n (\\<forall> ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho] =\n    (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho] =\n    (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)", "by(simp add: freshAbs_psubstAbs)"], ["", "theorem wls_freshAbs_psubstAbs_E1:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho ys y = None\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "using assms freshAbs_psubstAbs_E1[of A rho ys y zs z]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  rho ys y = None\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs A; goodEnv rho; rho ys y = None;\n   freshAbs zs z A $[rho]\\<rbrakk>\n  \\<Longrightarrow> freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "by simp"], ["", "theorem wls_freshAbs_psubstAbs_E2:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho ys y = Some Y\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "using assms freshAbs_psubstAbs_E2[of A rho ys y Y zs z]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  rho ys y = Some Y\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs A; goodEnv rho; rho ys y = Some Y;\n   freshAbs zs z A $[rho]\\<rbrakk>\n  \\<Longrightarrow> freshAbs ys y A \\<or> fresh zs z Y\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "by simp"], ["", "theorem wls_freshAbs_psubstAbs_I1:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"freshAbs zs z A\" and \"freshEnv zs z rho\"\nshows \"freshAbs zs z (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  freshAbs zs z A\n  freshEnv zs z rho\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "by(simp add: freshAbs_psubstAbs_I1)"], ["", "theorem wls_freshAbs_psubstAbs_I:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> freshAbs zs z A\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> freshAbs ys y A \\<or> fresh zs z Y\"\nshows \"freshAbs zs z (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  rho zs z = None \\<Longrightarrow> freshAbs zs z A\n  rho ?ys1 ?y1 = Some ?Y1 \\<Longrightarrow>\n  freshAbs ?ys1 ?y1 A \\<or> fresh zs z ?Y1\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "by(simp add: freshAbs_psubstAbs_I)"], ["", "theorem wls_freshAbs_substAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and> (freshAbs ys y A \\<or> fresh zs z Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> fresh zs z Y))", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> fresh zs z Y))", "by(simp add: freshAbs_substAbs)"], ["", "theorem wls_freshAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"freshAbs zs z (A $[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and>\n        (freshAbs ys y A \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "by(simp add: freshAbs_vsubstAbs)"], ["", "theorem wls_substAbs_preserves_freshAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z A\" and \"fresh zs z Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  freshAbs zs z A\n  fresh zs z Y\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys)", "by(simp add: substAbs_preserves_freshAbs)"], ["", "theorem wls_vsubstAbs_preserves_freshAbs:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z A\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"freshAbs zs z (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs zs z A\n  zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys)", "by(simp add: vsubstAbs_preserves_freshAbs)"], ["", "theorem wls_fresh_freshAbs_substAbs[simp]:\nassumes \"wls (asSort ys) Y\" and \"wlsAbs (us,s) A\"\nand \"fresh ys y Y\"\nshows \"freshAbs ys y (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort ys) Y\n  wlsAbs (us, s) A\n  fresh ys y Y\n\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[Y / y]_ys)", "by simp"], ["", "theorem wls_diff_freshAbs_vsubstAbs[simp]:\nassumes \"wlsAbs (us,s) A\"\nand \"y \\<noteq> y1\"\nshows \"freshAbs ys y (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[y1 // y]_ys)", "by simp"], ["", "theorem wls_freshAbs_substAbs_E1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\" and \"z \\<noteq> y \\<or> zs \\<noteq> ys\"\nshows \"freshAbs zs z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A", "using assms freshAbs_substAbs_E1[of A Y zs z ys y]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  freshAbs zs z (A $[Y / y]_ys)\n  z \\<noteq> y \\<or> zs \\<noteq> ys\n  \\<lbrakk>goodAbs A; good Y; freshAbs zs z (A $[Y / y]_ys);\n   zs \\<noteq> ys \\<or> z \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> freshAbs zs z A\n\ngoal (1 subgoal):\n 1. freshAbs zs z A", "by auto"], ["", "theorem wls_freshAbs_vsubstAbs_E1:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\" and \"z \\<noteq> y \\<or> zs \\<noteq> ys\"\nshows \"freshAbs zs z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A", "using assms freshAbs_vsubstAbs_E1[of A zs z ys y1 y]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs zs z (A $[y1 // y]_ys)\n  z \\<noteq> y \\<or> zs \\<noteq> ys\n  \\<lbrakk>goodAbs A; freshAbs zs z (A $[y1 // y]_ys);\n   zs \\<noteq> ys \\<or> z \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> freshAbs zs z A\n\ngoal (1 subgoal):\n 1. freshAbs zs z A", "by auto"], ["", "theorem wls_freshAbs_substAbs_E2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "using assms freshAbs_substAbs_E2[of A Y zs z ys]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  freshAbs zs z (A $[Y / y]_ys)\n  \\<lbrakk>goodAbs A; good Y; freshAbs zs z (A $[Y / ?y]_ys)\\<rbrakk>\n  \\<Longrightarrow> freshAbs ys ?y A \\<or> fresh zs z Y\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "by simp"], ["", "theorem wls_freshAbs_vsubstAbs_E2:\nassumes \"wlsAbs (us,s) A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\"\nshows \"freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "using assms freshAbs_vsubstAbs_E2[of A zs z ys y1 y]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs zs z (A $[y1 // y]_ys)\n  \\<lbrakk>goodAbs A; freshAbs zs z (A $[y1 // y]_ys)\\<rbrakk>\n  \\<Longrightarrow> freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "by simp"], ["", "theorem wls_psubstAbs_cong[fundef_cong]:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nand \"\\<And> ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y\"\nshows \"(A $[rho]) = (A $[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] = A $[rho']", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  wlsEnv rho'\n  freshAbs ?ys1 ?y1 A \\<or> rho ?ys1 ?y1 = rho' ?ys1 ?y1\n\ngoal (1 subgoal):\n 1. A $[rho] = A $[rho']", "by(simp add: psubstAbs_cong)"], ["", "theorem wls_freshAbs_psubstAbs_updEnv:\nassumes \"wls (asSort xs) X\" and \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"freshAbs xs x A\"\nshows \"(A $[rho [x \\<leftarrow> X]_xs]) = (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho [x \\<leftarrow> X]_xs] = A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort xs) X\n  wlsAbs (us, s) A\n  wlsEnv rho\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[rho [x \\<leftarrow> X]_xs] = A $[rho]", "by(simp add: freshAbs_psubstAbs_updEnv)"], ["", "lemma wls_freshEnv_psubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> freshAbs zs z A\"\nshows \"(A $[rho]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] = A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  freshEnv ?zs1 ?z1 rho \\<or> freshAbs ?zs1 ?z1 A\n\ngoal (1 subgoal):\n 1. A $[rho] = A", "by simp"], ["", "theorem wls_freshAbs_substAbs_ident[simp]:\nassumes \"wls (asSort xs) X\" and \"wlsAbs (us,s) A\" and \"freshAbs xs x A\"\nshows \"(A $[X / x]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[X / x]_xs = A", "using assms"], ["proof (prove)\nusing this:\n  wls (asSort xs) X\n  wlsAbs (us, s) A\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[X / x]_xs = A", "by simp"], ["", "theorem wls_substAbs_Abs[simp]:\nassumes \"wls s X\" and \"wls (asSort xs) Y\"\nshows \"((Abs xs x X) $[Y / x]_xs) = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / x]_xs = Abs xs x X", "using assms"], ["proof (prove)\nusing this:\n  wls s X\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / x]_xs = Abs xs x X", "by simp"], ["", "theorem wls_freshAbs_vsubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\" and \"freshAbs xs x A\"\nshows \"(A $[x1 // x]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[x1 // x]_xs = A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[x1 // x]_xs = A", "by(simp add: freshAbs_vsubstAbs_ident)"], ["", "theorem wls_swapAbs_psubstAbs:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. A $[rho] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "by(simp add: swapAbs_psubstAbs)"], ["", "theorem wls_swapAbs_substAbs:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"((A $[Y / y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapAbs_substAbs)"], ["", "theorem wls_swapAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"((A $[y1 // y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapAbs_vsubstAbs)"], ["", "theorem wls_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\" and \"wlsEnv rho'\"\nshows \"((A $[rho]) $[rho']) = (A $[(rho &[rho'])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[rho'] = A $[rho &[rho']]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n  wlsEnv rho'\n\ngoal (1 subgoal):\n 1. A $[rho] $[rho'] = A $[rho &[rho']]", "by(simp add: psubstAbs_compose)"], ["", "theorem wls_psubstAbs_substAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho [y \\<leftarrow> Y #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho [y \\<leftarrow> Y #[rho]]_ys]", "by(simp add: psubstAbs_substAbs_compose)"], ["", "theorem wls_psubstAbs_substAbs_compose_freshEnv:\nassumes \"wlsEnv rho\" and \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = ((A $[rho]) $[(Y #[rho]) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho] $[Y #[rho] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsEnv rho\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho] $[Y #[rho] / y]_ys", "by (simp add: psubstAbs_substAbs_compose_freshEnv)"], ["", "theorem wls_psubstAbs_vsubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[y1 // y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[rho] = A $[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[rho] = A $[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "by(simp add: psubstAbs_vsubstAbs_compose)"], ["", "theorem wls_substAbs_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[Y / y]_ys) = (A $[(rho &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[Y / y]_ys = A $[rho &[Y / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. A $[rho] $[Y / y]_ys = A $[rho &[Y / y]_ys]", "by(simp add: substAbs_psubstAbs_compose)"], ["", "theorem wls_vsubstAbs_psubstAbs_compose:\nassumes \"wlsAbs (us,s) A\" and \"wlsEnv rho\"\nshows \"((A $[rho]) $[y1 // y]_ys) = (A $[(rho &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[y1 // y]_ys = A $[rho &[y1 // y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wlsEnv rho\n\ngoal (1 subgoal):\n 1. A $[rho] $[y1 // y]_ys = A $[rho &[y1 // y]_ys]", "by(simp add: vsubstAbs_psubstAbs_compose)"], ["", "theorem wls_substAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y1\" and \"wls (asSort ys) Y2\"\nshows \"((A $[Y1 / y]_ys) $[Y2 / y]_ys) = (A $[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y1 / y]_ys $[Y2 / y]_ys = A $[Y1 #[Y2 / y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y1\n  wls (asSort ys) Y2\n\ngoal (1 subgoal):\n 1. A $[Y1 / y]_ys $[Y2 / y]_ys = A $[Y1 #[Y2 / y]_ys / y]_ys", "by(simp add: substAbs_compose1)"], ["", "theorem wls_substAbs_vsubstAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"y \\<noteq> y1\"\nshows \"((A $[y1 // y]_ys) $[Y / y]_ys) = (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y]_ys = A $[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y]_ys = A $[y1 // y]_ys", "by(simp add: substAbs_vsubstAbs_compose1)"], ["", "theorem wls_vsubstAbs_substAbs_compose1:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nshows \"((A $[Y / y]_ys) $[y1 // y]_ys) = (A $[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[y1 // y]_ys = A $[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[y1 // y]_ys = A $[Y #[y1 // y]_ys / y]_ys", "by(simp add: vsubstAbs_substAbs_compose1)"], ["", "theorem wls_vsubstAbs_compose1:\nassumes \"wlsAbs (us,s) A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y]_ys) = (A $[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y]_ys = A $[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y]_ys = A $[y1 @ys[y2 / y]_ys // y]_ys", "by(simp add: vsubstAbs_compose1)"], ["", "theorem wls_substAbs_compose2:\nassumes  \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[Y / y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[Z / z]_zs = A $[Z / z]_zs $[Y #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[Z / z]_zs = A $[Z / z]_zs $[Y #[Z / z]_zs / y]_ys", "by(simp add: substAbs_compose2)"], ["", "theorem wls_substAbs_vsubstAbs_compose2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort zs) Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[y1 // y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Z / z]_zs =\n    A $[Z / z]_zs $[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort zs) Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Z / z]_zs =\n    A $[Z / z]_zs $[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: substAbs_vsubstAbs_compose2)"], ["", "theorem wls_vsubstAbs_substAbs_compose2:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[Y / y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 // z]_zs = A $[z1 // z]_zs $[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 // z]_zs = A $[z1 // z]_zs $[Y #[z1 // z]_zs / y]_ys", "by(simp add: vsubstAbs_substAbs_compose2)"], ["", "theorem wls_vsubstAbs_compose2:\nassumes  \"wlsAbs (us,s) A\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[y1 // y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 // z]_zs =\n    A $[z1 // z]_zs $[y1 @ys[z1 / z]_zs // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 // z]_zs =\n    A $[z1 // z]_zs $[y1 @ys[z1 / z]_zs // y]_ys", "by(simp add: vsubstAbs_compose2)"], ["", "(* Properties specific to variable-for-variable substitution *)"], ["", "theorem wls_vsubstAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"(A $[z // z]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[z // z]_zs = A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. A $[z // z]_zs = A", "by(simp add: vsubstAbs_ident)"], ["", "theorem wls_substAbs_ident[simp]:\nassumes \"wlsAbs (us,s) A\"\nshows \"(A $[(Var zs z) / z]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Var zs z / z]_zs = A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. A $[Var zs z / z]_zs = A", "by simp"], ["", "theorem wls_vsubstAbs_eq_swapAbs:\nassumes \"wlsAbs (us,s) A\" and \"y1 = y2 \\<or> freshAbs ys y1 A\"\nshows \"(A $[y1 // y2]_ys) = (A $[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "using assms vsubstAll_swapAll[of \"Par [y1, y2] [] [] []\" _ _ A]"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  y1 = y2 \\<or> freshAbs ys y1 A\n  goodPar (Par [y1, y2] [] [] []) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a ?X \\<longrightarrow>\n       ?X #[y1a // y2a]_?ys = ?X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a A \\<longrightarrow>\n       A $[y1a // y2a]_?ys = A $[y1a \\<and> y2a]_?ys))\n\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  y1 = y2 \\<or> freshAbs ys y1 A\n  Ball (termsOf (Par [y1, y2] [] [] [])) good \\<and>\n  Ball (absOf (Par [y1, y2] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [y1, y2] [] [] [])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a ?X \\<longrightarrow>\n       ?X #[y1a // y2a]_?ys = ?X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a A \\<longrightarrow>\n       A $[y1a // y2a]_?ys = A $[y1a \\<and> y2a]_?ys))\n\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "by auto"], ["", "theorem wls_skelAbs_vsubstAbs:\nassumes \"wlsAbs (us,s) A\"\nshows \"skelAbs (A $[y1 // y2]_ys) = skelAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelAbs (A $[y1 // y2]_ys) = skelAbs A", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n\ngoal (1 subgoal):\n 1. skelAbs (A $[y1 // y2]_ys) = skelAbs A", "by(simp add: skelAbs_vsubstAbs)"], ["", "theorem wls_substAbs_vsubstAbs_trans:\nassumes \"wlsAbs (us,s) A\" and \"wls (asSort ys) Y\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[Y / y1]_ys) = (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y1]_ys = A $[Y / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  wls (asSort ys) Y\n  freshAbs ys y1 A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y1]_ys = A $[Y / y]_ys", "by(simp add: substAbs_vsubstAbs_trans)"], ["", "theorem wls_vsubstAbs_trans:\nassumes \"wlsAbs (us,s) A\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y1]_ys) = (A $[y2 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y1]_ys = A $[y2 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  freshAbs ys y1 A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y1]_ys = A $[y2 // y]_ys", "by(simp add: vsubstAbs_trans)"], ["", "theorem wls_vsubstAbs_commute:\nassumes \"wlsAbs (us,s) A\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"freshAbs xs x A\" and \"freshAbs xs' x' A\"\nshows \"((A $[x // y]_xs) $[x' // y']_xs') = ((A $[x' // y']_xs') $[x // y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "have \"freshAbs xs' x' (A $[x // y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs xs' x' (A $[x // y]_xs)", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  freshAbs xs x A\n  freshAbs xs' x' A\n\ngoal (1 subgoal):\n 1. freshAbs xs' x' (A $[x // y]_xs)", "by(auto simp: vsubstAbs_preserves_freshAbs)"], ["proof (state)\nthis:\n  freshAbs xs' x' (A $[x // y]_xs)\n\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "moreover"], ["proof (state)\nthis:\n  freshAbs xs' x' (A $[x // y]_xs)\n\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "have \"freshAbs xs x (A $[x' // y']_xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs xs x (A $[x' // y']_xs')", "using assms"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) A\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  freshAbs xs x A\n  freshAbs xs' x' A\n\ngoal (1 subgoal):\n 1. freshAbs xs x (A $[x' // y']_xs')", "by(auto simp: vsubstAbs_preserves_freshAbs)"], ["proof (state)\nthis:\n  freshAbs xs x (A $[x' // y']_xs')\n\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "ultimately"], ["proof (chain)\npicking this:\n  freshAbs xs' x' (A $[x // y]_xs)\n  freshAbs xs x (A $[x' // y']_xs')", "show ?thesis"], ["proof (prove)\nusing this:\n  freshAbs xs' x' (A $[x // y]_xs)\n  freshAbs xs x (A $[x' // y']_xs')\n\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "using assms"], ["proof (prove)\nusing this:\n  freshAbs xs' x' (A $[x // y]_xs)\n  freshAbs xs x (A $[x' // y']_xs')\n  wlsAbs (us, s) A\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  freshAbs xs x A\n  freshAbs xs' x' A\n\ngoal (1 subgoal):\n 1. A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs", "by (auto simp: vsubstAbs_eq_swapAbs intro!: wls_swapAbs_commute)"], ["proof (state)\nthis:\n  A $[x // y]_xs $[x' // y']_xs' = A $[x' // y']_xs' $[x // y]_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas wls_psubstAll_freshAll_otherSimps =\nwls_psubst_idEnv wls_psubstEnv_idEnv_id wls_psubstAbs_idEnv\nwls_freshEnv_psubst_ident wls_freshEnv_psubstAbs_ident"], ["", "lemmas wls_substAll_freshAll_otherSimps =\nwls_fresh_fresh_subst wls_fresh_subst_ident wls_fresh_substEnv_updEnv wls_subst_ident\nwls_fresh_freshAbs_substAbs wls_freshAbs_substAbs_ident wls_substAbs_ident\nwls_Abs_subst_Var_fresh"], ["", "lemmas wls_vsubstAll_freshAll_otherSimps =\nwls_diff_fresh_vsubst wls_fresh_vsubst_ident wls_fresh_vsubstEnv_updEnv wls_vsubst_ident\nwls_diff_freshAbs_vsubstAbs wls_freshAbs_vsubstAbs_ident wls_vsubstAbs_ident\nwls_Abs_vsubst_fresh"], ["", "lemmas wls_allOpers_otherSimps =\nwls_swapAll_freshAll_otherSimps\nwls_psubstAll_freshAll_otherSimps\nwls_substAll_freshAll_otherSimps\nwls_vsubstAll_freshAll_otherSimps"], ["", "subsection \\<open>Operators for down-casting and case-analyzing well-sorted items\\<close>"], ["", "text\\<open>The features developed here may occasionally turn out more convenient than obtaining\nthe desired effect by hand, via the corresponding nchotomies.\nE.g., when we want to perform the case-analysis uniformly, as part of a\nfunction definition, the operators defined in the subsection save some tedious\ndefinitions and proofs pertaining to Hilbert choice.\\<close>"], ["", "subsubsection \\<open>For terms\\<close>"], ["", "(* Definitions: *)"], ["", "definition isVar where\n\"isVar s (X :: ('index,'bindex,'varSort,'var,'opSym)term) ==\n \\<exists> xs x. s = asSort xs \\<and> X = Var xs x\""], ["", "definition castVar where\n\"castVar s (X :: ('index,'bindex,'varSort,'var,'opSym)term) ==\n SOME xs_x. s = asSort (fst xs_x) \\<and> X = Var (fst xs_x) (snd xs_x)\""], ["", "definition isOp where\n\"isOp s X \\<equiv>\n \\<exists> delta inp binp.\n   wlsInp delta inp \\<and> wlsBinp delta binp \\<and> s = stOf delta \\<and> X = Op delta inp binp\""], ["", "definition castOp where\n\"castOp s X \\<equiv>\n SOME delta_inp_binp.\n   wlsInp (fst3 delta_inp_binp) (snd3 delta_inp_binp) \\<and>\n   wlsBinp (fst3 delta_inp_binp) (trd3 delta_inp_binp) \\<and>\n   s = stOf (fst3 delta_inp_binp) \\<and>\n   X = Op (fst3 delta_inp_binp) (snd3 delta_inp_binp) (trd3 delta_inp_binp)\""], ["", "definition sortTermCase where\n\"sortTermCase fVar fOp s X \\<equiv>\n if isVar s X then fVar (fst (castVar s X)) (snd (castVar s X))\n                else if isOp s X then fOp (fst3 (castOp s X)) (snd3 (castOp s X))  (trd3 (castOp s X))\n                     else undefined\""], ["", "(* Properties of isVar and castVar: *)"], ["", "lemma isVar_asSort_Var[simp]:\n\"isVar (asSort xs) (Var xs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isVar (asSort xs) (Var xs x)", "unfolding isVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xsa xa. asSort xs = asSort xsa \\<and> Var xs x = Var xsa xa", "by auto"], ["", "lemma not_isVar_Op[simp]:\n\"\\<not> isVar s (Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> isVar s (Op delta inp binp)", "unfolding isVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>xs x. s = asSort xs \\<and> Op delta inp binp = Var xs x", "by auto"], ["", "lemma isVar_imp_wls:\n\"isVar s X \\<Longrightarrow> wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isVar s X \\<Longrightarrow> wls s X", "unfolding isVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs x. s = asSort xs \\<and> X = Var xs x \\<Longrightarrow>\n    wls s X", "by auto"], ["", "lemmas isVar_simps =\nisVar_asSort_Var not_isVar_Op"], ["", "lemma castVar_asSort_Var[simp]:\n\"castVar (asSort xs) (Var xs x) = (xs,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. castVar (asSort xs) (Var xs x) = (xs, x)", "unfolding castVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME xs_x.\n        asSort xs = asSort (fst xs_x) \\<and>\n        Var xs x = Var (fst xs_x) (snd xs_x)) =\n    (xs, x)", "by (rule some_equality) auto"], ["", "lemma isVar_castVar:\nassumes \"isVar s X\"\nshows \"asSort (fst (castVar s X)) = s \\<and>\n       Var (fst (castVar s X)) (snd (castVar s X)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asSort (fst (castVar s X)) = s \\<and>\n    Var (fst (castVar s X)) (snd (castVar s X)) = X", "using assms isVar_def"], ["proof (prove)\nusing this:\n  isVar s X\n  isVar ?s ?X \\<equiv> \\<exists>xs x. ?s = asSort xs \\<and> ?X = Var xs x\n\ngoal (1 subgoal):\n 1. asSort (fst (castVar s X)) = s \\<and>\n    Var (fst (castVar s X)) (snd (castVar s X)) = X", "by auto"], ["", "lemma asSort_castVar[simp]:\n\"isVar s X \\<Longrightarrow> asSort (fst (castVar s X)) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isVar s X \\<Longrightarrow> asSort (fst (castVar s X)) = s", "using isVar_castVar"], ["proof (prove)\nusing this:\n  isVar ?s ?X \\<Longrightarrow>\n  asSort (fst (castVar ?s ?X)) = ?s \\<and>\n  Var (fst (castVar ?s ?X)) (snd (castVar ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isVar s X \\<Longrightarrow> asSort (fst (castVar s X)) = s", "by auto"], ["", "lemma Var_castVar[simp]:\n\"isVar s X \\<Longrightarrow> Var (fst (castVar s X)) (snd (castVar s X)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isVar s X \\<Longrightarrow>\n    Var (fst (castVar s X)) (snd (castVar s X)) = X", "using isVar_castVar"], ["proof (prove)\nusing this:\n  isVar ?s ?X \\<Longrightarrow>\n  asSort (fst (castVar ?s ?X)) = ?s \\<and>\n  Var (fst (castVar ?s ?X)) (snd (castVar ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isVar s X \\<Longrightarrow>\n    Var (fst (castVar s X)) (snd (castVar s X)) = X", "by auto"], ["", "lemma castVar_inj[simp]:\nassumes *: \"isVar s X\" and **: \"isVar s' X'\"\nshows \"(castVar s X = castVar s' X') = (s = s' \\<and> X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (castVar s X = castVar s' X') = (s = s' \\<and> X = X')", "using assms Var_castVar asSort_castVar"], ["proof (prove)\nusing this:\n  isVar s X\n  isVar s' X'\n  isVar ?s ?X \\<Longrightarrow>\n  Var (fst (castVar ?s ?X)) (snd (castVar ?s ?X)) = ?X\n  isVar ?s ?X \\<Longrightarrow> asSort (fst (castVar ?s ?X)) = ?s\n\ngoal (1 subgoal):\n 1. (castVar s X = castVar s' X') = (s = s' \\<and> X = X')", "by fastforce"], ["", "lemmas castVar_simps =\ncastVar_asSort_Var\nasSort_castVar Var_castVar castVar_inj"], ["", "(* Properties of isOp and castOp: *)"], ["", "lemma isOp_stOf_Op[simp]:\n\"\\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n \\<Longrightarrow> isOp (stOf delta) (Op delta inp binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n    \\<Longrightarrow> isOp (stOf delta) (Op delta inp binp)", "unfolding isOp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n    \\<Longrightarrow> \\<exists>deltaa inpa binpa.\n                         wlsInp deltaa inpa \\<and>\n                         wlsBinp deltaa binpa \\<and>\n                         stOf delta = stOf deltaa \\<and>\n                         Op delta inp binp = Op deltaa inpa binpa", "by auto"], ["", "lemma not_isOp_Var[simp]:\n\"\\<not> isOp s (Var xs X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> isOp s (Var xs X)", "unfolding isOp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>delta inp binp.\n       wlsInp delta inp \\<and>\n       wlsBinp delta binp \\<and>\n       s = stOf delta \\<and> Var xs X = Op delta inp binp", "by auto"], ["", "lemma isOp_imp_wls:\n\"isOp s X \\<Longrightarrow> wls s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow> wls s X", "unfolding isOp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>delta inp binp.\n       wlsInp delta inp \\<and>\n       wlsBinp delta binp \\<and>\n       s = stOf delta \\<and> X = Op delta inp binp \\<Longrightarrow>\n    wls s X", "by auto"], ["", "lemmas isOp_simps =\nisOp_stOf_Op not_isOp_Var"], ["", "lemma castOp_stOf_Op[simp]:\nassumes \"wlsInp delta inp\" and \"wlsBinp delta binp\"\nshows \"castOp (stOf delta) (Op delta inp binp) = (delta,inp,binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. castOp (stOf delta) (Op delta inp binp) = (delta, inp, binp)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. castOp (stOf delta) (Op delta inp binp) = (delta, inp, binp)", "unfolding castOp_def"], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n\ngoal (1 subgoal):\n 1. (SOME delta_inp_binp.\n        wlsInp (fst3 delta_inp_binp) (snd3 delta_inp_binp) \\<and>\n        wlsBinp (fst3 delta_inp_binp) (trd3 delta_inp_binp) \\<and>\n        stOf delta = stOf (fst3 delta_inp_binp) \\<and>\n        Op delta inp binp =\n        Op (fst3 delta_inp_binp) (snd3 delta_inp_binp)\n         (trd3 delta_inp_binp)) =\n    (delta, inp, binp)", "by (intro some_equality) auto"], ["", "lemma isOp_castOp:\nassumes \"isOp s X\"\nshows \"wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n       wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n       stOf (fst3 (castOp s X)) = s \\<and>\n       Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "let ?phi = \"\\<lambda> DIB. wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n                      wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n                      s = stOf (fst3 DIB) \\<and>\n                      X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)\""], ["proof (state)\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "obtain delta inp binp where \"?phi (delta,inp,binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>delta inp binp.\n        wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n        wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n        s = stOf (fst3 (delta, inp, binp)) \\<and>\n        X =\n        Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n         (trd3 (delta, inp, binp)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  isOp s X\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp binp.\n        wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n        wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n        s = stOf (fst3 (delta, inp, binp)) \\<and>\n        X =\n        Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n         (trd3 (delta, inp, binp)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding isOp_def"], ["proof (prove)\nusing this:\n  \\<exists>delta inp binp.\n     wlsInp delta inp \\<and>\n     wlsBinp delta binp \\<and> s = stOf delta \\<and> X = Op delta inp binp\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp binp.\n        wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n        wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n        s = stOf (fst3 (delta, inp, binp)) \\<and>\n        X =\n        Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n         (trd3 (delta, inp, binp)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n  wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n  s = stOf (fst3 (delta, inp, binp)) \\<and>\n  X =\n  Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n   (trd3 (delta, inp, binp))\n\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "hence \"?phi (castOp s X)\""], ["proof (prove)\nusing this:\n  wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n  wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n  s = stOf (fst3 (delta, inp, binp)) \\<and>\n  X =\n  Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n   (trd3 (delta, inp, binp))\n\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    s = stOf (fst3 (castOp s X)) \\<and>\n    X = Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X))", "using someI[of ?phi]"], ["proof (prove)\nusing this:\n  wlsInp (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp)) \\<and>\n  wlsBinp (fst3 (delta, inp, binp)) (trd3 (delta, inp, binp)) \\<and>\n  s = stOf (fst3 (delta, inp, binp)) \\<and>\n  X =\n  Op (fst3 (delta, inp, binp)) (snd3 (delta, inp, binp))\n   (trd3 (delta, inp, binp))\n  wlsInp (fst3 ?x) (snd3 ?x) \\<and>\n  wlsBinp (fst3 ?x) (trd3 ?x) \\<and>\n  s = stOf (fst3 ?x) \\<and>\n  X = Op (fst3 ?x) (snd3 ?x) (trd3 ?x) \\<Longrightarrow>\n  wlsInp\n   (fst3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)))\n   (snd3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB))) \\<and>\n  wlsBinp\n   (fst3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)))\n   (trd3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB))) \\<and>\n  s =\n  stOf\n   (fst3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB))) \\<and>\n  X =\n  Op (fst3\n       (SOME DIB.\n           wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n           wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n           s = stOf (fst3 DIB) \\<and>\n           X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)))\n   (snd3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)))\n   (trd3\n     (SOME DIB.\n         wlsInp (fst3 DIB) (snd3 DIB) \\<and>\n         wlsBinp (fst3 DIB) (trd3 DIB) \\<and>\n         s = stOf (fst3 DIB) \\<and>\n         X = Op (fst3 DIB) (snd3 DIB) (trd3 DIB)))\n\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    s = stOf (fst3 (castOp s X)) \\<and>\n    X = Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X))", "by simp"], ["proof (state)\nthis:\n  wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n  wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n  s = stOf (fst3 (castOp s X)) \\<and>\n  X = Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X))\n\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "thus ?thesis"], ["proof (prove)\nusing this:\n  wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n  wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n  s = stOf (fst3 (castOp s X)) \\<and>\n  X = Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X))\n\ngoal (1 subgoal):\n 1. wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n    stOf (fst3 (castOp s X)) = s \\<and>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "by simp"], ["proof (state)\nthis:\n  wlsInp (fst3 (castOp s X)) (snd3 (castOp s X)) \\<and>\n  wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X)) \\<and>\n  stOf (fst3 (castOp s X)) = s \\<and>\n  Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wlsInp_castOp[simp]:\n\"isOp s X \\<Longrightarrow> wlsInp (fst3 (castOp s X)) (snd3 (castOp s X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    wlsInp (fst3 (castOp s X)) (snd3 (castOp s X))", "using isOp_castOp"], ["proof (prove)\nusing this:\n  isOp ?s ?X \\<Longrightarrow>\n  wlsInp (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) \\<and>\n  wlsBinp (fst3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) \\<and>\n  stOf (fst3 (castOp ?s ?X)) = ?s \\<and>\n  Op (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    wlsInp (fst3 (castOp s X)) (snd3 (castOp s X))", "by auto"], ["", "lemma wlsBinp_castOp[simp]:\n\"isOp s X \\<Longrightarrow> wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X))", "using isOp_castOp"], ["proof (prove)\nusing this:\n  isOp ?s ?X \\<Longrightarrow>\n  wlsInp (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) \\<and>\n  wlsBinp (fst3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) \\<and>\n  stOf (fst3 (castOp ?s ?X)) = ?s \\<and>\n  Op (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    wlsBinp (fst3 (castOp s X)) (trd3 (castOp s X))", "by auto"], ["", "lemma stOf_castOp[simp]:\n\"isOp s X \\<Longrightarrow> stOf (fst3 (castOp s X)) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow> stOf (fst3 (castOp s X)) = s", "using isOp_castOp"], ["proof (prove)\nusing this:\n  isOp ?s ?X \\<Longrightarrow>\n  wlsInp (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) \\<and>\n  wlsBinp (fst3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) \\<and>\n  stOf (fst3 (castOp ?s ?X)) = ?s \\<and>\n  Op (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow> stOf (fst3 (castOp s X)) = s", "by auto"], ["", "lemma Op_castOp[simp]:\n\"isOp s X \\<Longrightarrow>\n Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "using isOp_castOp"], ["proof (prove)\nusing this:\n  isOp ?s ?X \\<Longrightarrow>\n  wlsInp (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) \\<and>\n  wlsBinp (fst3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) \\<and>\n  stOf (fst3 (castOp ?s ?X)) = ?s \\<and>\n  Op (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) = ?X\n\ngoal (1 subgoal):\n 1. isOp s X \\<Longrightarrow>\n    Op (fst3 (castOp s X)) (snd3 (castOp s X)) (trd3 (castOp s X)) = X", "by auto"], ["", "lemma castOp_inj[simp]:\nassumes \"isOp s X\" and \"isOp s' X'\"\nshows \"(castOp s X = castOp s' X') = (s = s' \\<and> X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (castOp s X = castOp s' X') = (s = s' \\<and> X = X')", "using assms Op_castOp stOf_castOp"], ["proof (prove)\nusing this:\n  isOp s X\n  isOp s' X'\n  isOp ?s ?X \\<Longrightarrow>\n  Op (fst3 (castOp ?s ?X)) (snd3 (castOp ?s ?X)) (trd3 (castOp ?s ?X)) = ?X\n  isOp ?s ?X \\<Longrightarrow> stOf (fst3 (castOp ?s ?X)) = ?s\n\ngoal (1 subgoal):\n 1. (castOp s X = castOp s' X') = (s = s' \\<and> X = X')", "by fastforce"], ["", "lemmas castOp_simps =\ncastOp_stOf_Op wlsInp_castOp wlsBinp_castOp\nstOf_castOp Op_castOp castOp_inj"], ["", "(* isVar and castVar versus isOp and castOp: *)"], ["", "lemma not_isVar_isOp:\n\"\\<not> (isVar s X \\<and> isOp s X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (isVar s X \\<and> isOp s X)", "unfolding isVar_def isOp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>xs x. s = asSort xs \\<and> X = Var xs x) \\<and>\n            (\\<exists>delta inp binp.\n                wlsInp delta inp \\<and>\n                wlsBinp delta binp \\<and>\n                s = stOf delta \\<and> X = Op delta inp binp))", "by auto"], ["", "lemma isVar_or_isOp:\n\"wls s X \\<Longrightarrow> isVar s X \\<or> isOp s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow> isVar s X \\<or> isOp s X", "by(erule wls_cases) auto"], ["", "(* Properties of the case-analysis operator: *)"], ["", "lemma sortTermCase_asSort_Var_simp[simp]:\n\"sortTermCase fVar fOp (asSort xs) (Var xs x) = fVar xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sortTermCase fVar fOp (asSort xs) (Var xs x) = fVar xs x", "unfolding sortTermCase_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if isVar (asSort xs) (Var xs x)\n     then fVar (fst (castVar (asSort xs) (Var xs x)))\n           (snd (castVar (asSort xs) (Var xs x)))\n     else if isOp (asSort xs) (Var xs x)\n          then fOp (fst3 (castOp (asSort xs) (Var xs x)))\n                (snd3 (castOp (asSort xs) (Var xs x)))\n                (trd3 (castOp (asSort xs) (Var xs x)))\n          else undefined) =\n    fVar xs x", "by auto"], ["", "lemma sortTermCase_stOf_Op_simp[simp]:\n\"\\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk> \\<Longrightarrow>\n sortTermCase fVar fOp (stOf delta) (Op delta inp binp) = fOp delta inp binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n    \\<Longrightarrow> sortTermCase fVar fOp (stOf delta)\n                       (Op delta inp binp) =\n                      fOp delta inp binp", "unfolding sortTermCase_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta inp; wlsBinp delta binp\\<rbrakk>\n    \\<Longrightarrow> (if isVar (stOf delta) (Op delta inp binp)\n                       then fVar\n                             (fst (castVar (stOf delta)\n                                    (Op delta inp binp)))\n                             (snd (castVar (stOf delta)\n                                    (Op delta inp binp)))\n                       else if isOp (stOf delta) (Op delta inp binp)\n                            then fOp (fst3\n (castOp (stOf delta) (Op delta inp binp)))\n                                  (snd3\n                                    (castOp (stOf delta)\n(Op delta inp binp)))\n                                  (trd3\n                                    (castOp (stOf delta)\n(Op delta inp binp)))\n                            else undefined) =\n                      fOp delta inp binp", "by auto"], ["", "lemma sortTermCase_cong[fundef_cong]:\nassumes \"\\<And> xs x. fVar xs x = gVar xs x\"\nand \"\\<And> delta inp binp. \\<lbrakk>wlsInp delta inp; wlsInp delta inp\\<rbrakk>\n                        \\<Longrightarrow> fOp delta inp binp = gOp delta inp binp\"\nshows \"wls s X \\<Longrightarrow>\n       sortTermCase fVar fOp s X = sortTermCase gVar gOp s X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s X \\<Longrightarrow>\n    sortTermCase fVar fOp s X = sortTermCase gVar gOp s X", "apply(erule wls_cases)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       sortTermCase fVar fOp (asSort xs) (Var xs x) =\n       sortTermCase gVar gOp (asSort xs) (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; ?P3.0 delta inp; wlsBinp delta binp;\n        ?P4.0 delta binp\\<rbrakk>\n       \\<Longrightarrow> sortTermCase fVar fOp (stOf delta)\n                          (Op delta inp binp) =\n                         sortTermCase gVar gOp (stOf delta)\n                          (Op delta inp binp)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and>\n               sortTermCase fVar fOp s X =\n               sortTermCase gVar gOp s X)\\<rbrakk>\n       \\<Longrightarrow> ?P3.0 delta inp\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> ?P2.0 (us, s) A)\\<rbrakk>\n       \\<Longrightarrow> ?P4.0 delta binp\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        sortTermCase fVar fOp s X = sortTermCase gVar gOp s X\\<rbrakk>\n       \\<Longrightarrow> ?P2.0 (xs, s) (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  fVar ?xs2 ?x2 = gVar ?xs2 ?x2\n  \\<lbrakk>wlsInp ?delta2 ?inp2; wlsInp ?delta2 ?inp2\\<rbrakk>\n  \\<Longrightarrow> fOp ?delta2 ?inp2 ?binp2 = gOp ?delta2 ?inp2 ?binp2\n\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       sortTermCase fVar fOp (asSort xs) (Var xs x) =\n       sortTermCase gVar gOp (asSort xs) (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; ?P3.0 delta inp; wlsBinp delta binp;\n        ?P4.0 delta binp\\<rbrakk>\n       \\<Longrightarrow> sortTermCase fVar fOp (stOf delta)\n                          (Op delta inp binp) =\n                         sortTermCase gVar gOp (stOf delta)\n                          (Op delta inp binp)\n 3. \\<And>delta inp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           arOf delta i = None \\<and> inp i = None \\<or>\n           (\\<exists>s X.\n               arOf delta i = Some s \\<and>\n               inp i = Some X \\<and>\n               wls s X \\<and>\n               sortTermCase fVar fOp s X =\n               sortTermCase gVar gOp s X)\\<rbrakk>\n       \\<Longrightarrow> ?P3.0 delta inp\n 4. \\<And>delta binp.\n       \\<lbrakk>wlsOpS delta;\n        \\<And>i.\n           barOf delta i = None \\<and> binp i = None \\<or>\n           (\\<exists>us s A.\n               barOf delta i = Some (us, s) \\<and>\n               binp i = Some A \\<and>\n               wlsAbs (us, s) A \\<and> ?P2.0 (us, s) A)\\<rbrakk>\n       \\<Longrightarrow> ?P4.0 delta binp\n 5. \\<And>xs s X x.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        sortTermCase fVar fOp s X = sortTermCase gVar gOp s X\\<rbrakk>\n       \\<Longrightarrow> ?P2.0 (xs, s) (Abs xs x X)", "by auto"], ["", "lemmas sortTermCase_simps =\nsortTermCase_asSort_Var_simp\nsortTermCase_stOf_Op_simp"], ["", "lemmas term_cast_simps =\nisOp_simps castOp_simps sortTermCase_simps"], ["", "subsubsection \\<open>For abstractions\\<close>"], ["", "text \\<open>Here, the situation will be different than that of terms, since:\n\\\\- an abstraction can only be built using ``Abs\", hence we need no ``is\" operators;\n\\\\- the constructor ``Abs\" for abstractions is not injective, so need a more subtle condition\non the case-analysis operator.\n\nYet another difference is that when casting an abstraction ``A\" such that ``wlsAbs (xs,s) A\",\nwe need to cast only the value ``A\", and not the sorting part``xs s\", since the latter\nalready contains the desired information. Consequently, below, in the arguments for the case-analysis\noperator, the sorts ``xs s\" come before the function ``f\", and the latter doesnot take sorts into account.\\<close>"], ["", "(* Definitions: *)"], ["", "definition castAbs where\n\"castAbs xs s A \\<equiv> SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)\""], ["", "definition absCase where\n\"absCase xs s f A \\<equiv> if wlsAbs (xs,s) A then f (fst (castAbs xs s A)) (snd (castAbs xs s A)) else undefined\""], ["", "definition compatAbsSwap where\n\"compatAbsSwap xs s f \\<equiv>\n \\<forall> x X x' X'. (\\<forall> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X')\n                    \\<longrightarrow> (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs))\n              \\<longrightarrow> f x X = f x' X'\""], ["", "definition compatAbsSubst where\n\"compatAbsSubst xs s f \\<equiv>\n \\<forall> x X x' X'. (\\<forall> Y. wls (asSort xs) Y \\<longrightarrow> (X #[Y / x]_xs) = (X' #[Y / x']_xs))\n              \\<longrightarrow> f x X = f x' X'\""], ["", "definition compatAbsVsubst where\n\"compatAbsVsubst xs s f \\<equiv>\n \\<forall> x X x' X'. (\\<forall> y. (X #[y // x]_xs) = (X' #[y // x']_xs))\n              \\<longrightarrow> f x X = f x' X'\""], ["", "(* Properties of castAbs: *)"], ["", "lemma wlsAbs_castAbs:\nassumes \"wlsAbs (xs,s) A\"\nshows \"wls s (snd (castAbs xs s A)) \\<and>\n       Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "let ?phi = \"\\<lambda> x_X. wls s (snd x_X) \\<and>\n                     A = Abs xs (fst x_X) (snd x_X)\""], ["proof (state)\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "obtain x X where \"?phi (x,X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x X.\n        wls s (snd (x, X)) \\<and>\n        A = Abs xs (fst (x, X)) (snd (x, X)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms wlsAbs_nchotomy[of xs s A]"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wlsAbs (xs, s) A \\<Longrightarrow>\n  isInBar (xs, s) \\<and> (\\<exists>x X. wls s X \\<and> A = Abs xs x X)\n\ngoal (1 subgoal):\n 1. (\\<And>x X.\n        wls s (snd (x, X)) \\<and>\n        A = Abs xs (fst (x, X)) (snd (x, X)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  wls s (snd (x, X)) \\<and> A = Abs xs (fst (x, X)) (snd (x, X))\n\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "hence \"?phi (castAbs xs s A)\""], ["proof (prove)\nusing this:\n  wls s (snd (x, X)) \\<and> A = Abs xs (fst (x, X)) (snd (x, X))\n\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    A = Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A))", "unfolding castAbs_def"], ["proof (prove)\nusing this:\n  wls s (snd (x, X)) \\<and> A = Abs xs (fst (x, X)) (snd (x, X))\n\ngoal (1 subgoal):\n 1. wls s\n     (snd (SOME x_X.\n              wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X))) \\<and>\n    A =\n    Abs xs\n     (fst (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))\n     (snd (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))", "using someI[of ?phi]"], ["proof (prove)\nusing this:\n  wls s (snd (x, X)) \\<and> A = Abs xs (fst (x, X)) (snd (x, X))\n  wls s (snd ?x) \\<and> A = Abs xs (fst ?x) (snd ?x) \\<Longrightarrow>\n  wls s\n   (snd (SOME x_X.\n            wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X))) \\<and>\n  A =\n  Abs xs\n   (fst (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))\n   (snd (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))\n\ngoal (1 subgoal):\n 1. wls s\n     (snd (SOME x_X.\n              wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X))) \\<and>\n    A =\n    Abs xs\n     (fst (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))\n     (snd (SOME x_X. wls s (snd x_X) \\<and> A = Abs xs (fst x_X) (snd x_X)))", "by auto"], ["proof (state)\nthis:\n  wls s (snd (castAbs xs s A)) \\<and>\n  A = Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A))\n\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s (snd (castAbs xs s A)) \\<and>\n  A = Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A))\n\ngoal (1 subgoal):\n 1. wls s (snd (castAbs xs s A)) \\<and>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "by simp"], ["proof (state)\nthis:\n  wls s (snd (castAbs xs s A)) \\<and>\n  Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wls_castAbs[simp]:\n\"wlsAbs (xs,s) A \\<Longrightarrow> wls s (snd (castAbs xs s A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow> wls s (snd (castAbs xs s A))", "using wlsAbs_castAbs"], ["proof (prove)\nusing this:\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  wls ?s (snd (castAbs ?xs ?s ?A)) \\<and>\n  Abs ?xs (fst (castAbs ?xs ?s ?A)) (snd (castAbs ?xs ?s ?A)) = ?A\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow> wls s (snd (castAbs xs s A))", "by auto"], ["", "lemma Abs_castAbs[simp]:\n\"wlsAbs (xs,s) A \\<Longrightarrow> Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "using wlsAbs_castAbs"], ["proof (prove)\nusing this:\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  wls ?s (snd (castAbs ?xs ?s ?A)) \\<and>\n  Abs ?xs (fst (castAbs ?xs ?s ?A)) (snd (castAbs ?xs ?s ?A)) = ?A\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow>\n    Abs xs (fst (castAbs xs s A)) (snd (castAbs xs s A)) = A", "by auto"], ["", "lemma castAbs_Abs_swap:\nassumes \"isInBar (xs,s)\" and X: \"wls s X\"\nand yxX: \"y = x \\<or> fresh xs y X\" and yx'X': \"y = x' \\<or> fresh xs y X'\"\nand *: \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "have \"wlsAbs (xs,s) (Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  y = x \\<or> fresh xs y X\n  y = x' \\<or> fresh xs y X'\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X)", "by simp"], ["proof (state)\nthis:\n  wlsAbs (xs, s) (Abs xs x X)\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "moreover"], ["proof (state)\nthis:\n  wlsAbs (xs, s) (Abs xs x X)\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "have \"x' = fst (castAbs xs s (Abs xs x X))\" and\n       \"X' = snd (castAbs xs s (Abs xs x X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' = fst (castAbs xs s (Abs xs x X)) &&&\n    X' = snd (castAbs xs s (Abs xs x X))", "using *"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. x' = fst (castAbs xs s (Abs xs x X)) &&&\n    X' = snd (castAbs xs s (Abs xs x X))", "by auto"], ["proof (state)\nthis:\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "ultimately"], ["proof (chain)\npicking this:\n  wlsAbs (xs, s) (Abs xs x X)\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))", "have \"wls s X'\" and \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) (Abs xs x X)\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))\n\ngoal (1 subgoal):\n 1. wls s X' &&& Abs xs x X = Abs xs x' X'", "by auto"], ["proof (state)\nthis:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "using yxX yx'X' X"], ["proof (prove)\nusing this:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n  y = x \\<or> fresh xs y X\n  y = x' \\<or> fresh xs y X'\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "by(auto simp add: wls_Abs_swap_all)"], ["proof (state)\nthis:\n  X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma castAbs_Abs_subst:\nassumes isInBar: \"isInBar (xs,s)\"\nand X: \"wls s X\" and Y: \"wls (asSort xs) Y\"\nand *: \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[Y / x]_xs) = (X' #[Y / x']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "have \"wlsAbs (xs,s) (Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X)", "using isInBar X"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) (Abs xs x X)", "by simp"], ["proof (state)\nthis:\n  wlsAbs (xs, s) (Abs xs x X)\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "moreover"], ["proof (state)\nthis:\n  wlsAbs (xs, s) (Abs xs x X)\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "have \"x' = fst (castAbs xs s (Abs xs x X))\" and\n       \"X' = snd (castAbs xs s (Abs xs x X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' = fst (castAbs xs s (Abs xs x X)) &&&\n    X' = snd (castAbs xs s (Abs xs x X))", "using *"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. x' = fst (castAbs xs s (Abs xs x X)) &&&\n    X' = snd (castAbs xs s (Abs xs x X))", "by auto"], ["proof (state)\nthis:\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "ultimately"], ["proof (chain)\npicking this:\n  wlsAbs (xs, s) (Abs xs x X)\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))", "have \"wls s X'\" and \"Abs xs x X = Abs xs x' X'\""], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) (Abs xs x X)\n  x' = fst (castAbs xs s (Abs xs x X))\n  X' = snd (castAbs xs s (Abs xs x X))\n\ngoal (1 subgoal):\n 1. wls s X' &&& Abs xs x X = Abs xs x' X'", "by auto"], ["proof (state)\nthis:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "using Y X"], ["proof (prove)\nusing this:\n  wls s X'\n  Abs xs x X = Abs xs x' X'\n  wls (asSort xs) Y\n  wls s X\n\ngoal (1 subgoal):\n 1. X #[Y / x]_xs = X' #[Y / x']_xs", "by(auto simp add: wls_Abs_subst_all)"], ["proof (state)\nthis:\n  X #[Y / x]_xs = X' #[Y / x']_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma castAbs_Abs_vsubst:\nassumes \"isInBar (xs,s)\" and \"wls s X\"\nand \"castAbs xs s (Abs xs x X) = (x',X')\"\nshows \"(X #[y // x]_xs) = (X' #[y // x']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y // x]_xs = X' #[y // x']_xs", "using assms"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. X #[y // x]_xs = X' #[y // x']_xs", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. X #[Var xs y / x]_xs = X' #[Var xs y / x']_xs", "by (intro castAbs_Abs_subst) auto"], ["", "lemma castAbs_inj[simp]:\nassumes *: \"wlsAbs (xs,s) A\" and **: \"wlsAbs (xs,s) A'\"\nshows \"(castAbs xs s A = castAbs xs s A') = (A = A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (castAbs xs s A = castAbs xs s A') = (A = A')", "using assms Abs_castAbs"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) A\n  wlsAbs (xs, s) A'\n  wlsAbs (?xs, ?s) ?A \\<Longrightarrow>\n  Abs ?xs (fst (castAbs ?xs ?s ?A)) (snd (castAbs ?xs ?s ?A)) = ?A\n\ngoal (1 subgoal):\n 1. (castAbs xs s A = castAbs xs s A') = (A = A')", "by fastforce"], ["", "lemmas castAbs_simps =\nwls_castAbs Abs_castAbs castAbs_inj"], ["", "(* Properties of the case-analysis operator: *)"], ["", "lemma absCase_Abs_swap[simp]:\nassumes isInBar: \"isInBar (xs,s)\" and X: \"wls s X\"\nand f_compat: \"compatAbsSwap xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "obtain x' X' where 1: \"castAbs xs s (Abs xs x X) = (x',X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' X'.\n        castAbs xs s (Abs xs x X) = (x', X') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"castAbs xs s (Abs xs x X)\", auto)"], ["proof (state)\nthis:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "hence 2: \"absCase xs s f (Abs xs x X) = f x' X'\""], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x' X'", "unfolding absCase_def"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. (if wlsAbs (xs, s) (Abs xs x X)\n     then f (fst (castAbs xs s (Abs xs x X)))\n           (snd (castAbs xs s (Abs xs x X)))\n     else undefined) =\n    f x' X'", "using isInBar X"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n  isInBar (xs, s)\n  wls s X\n\ngoal (1 subgoal):\n 1. (if wlsAbs (xs, s) (Abs xs x X)\n     then f (fst (castAbs xs s (Abs xs x X)))\n           (snd (castAbs xs s (Abs xs x X)))\n     else undefined) =\n    f x' X'", "by auto"], ["proof (state)\nthis:\n  absCase xs s f (Abs xs x X) = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "have \"\\<And> y. (y = x \\<or> fresh xs y X) \\<and> (y = x' \\<or> fresh xs y X')\n              \\<Longrightarrow> (X #[y \\<and> x]_xs) = (X' #[y \\<and> x']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<Longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "using isInBar X 1"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       (y = x \\<or> fresh xs y X) \\<and>\n       (y = x' \\<or> fresh xs y X') \\<Longrightarrow>\n       X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs", "by(simp add: castAbs_Abs_swap)"], ["proof (state)\nthis:\n  (?y6 = x \\<or> fresh xs ?y6 X) \\<and>\n  (?y6 = x' \\<or> fresh xs ?y6 X') \\<Longrightarrow>\n  X #[?y6 \\<and> x]_xs = X' #[?y6 \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "hence \"f x X = f x' X'\""], ["proof (prove)\nusing this:\n  (?y6 = x \\<or> fresh xs ?y6 X) \\<and>\n  (?y6 = x' \\<or> fresh xs ?y6 X') \\<Longrightarrow>\n  X #[?y6 \\<and> x]_xs = X' #[?y6 \\<and> x']_xs\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "using f_compat"], ["proof (prove)\nusing this:\n  (?y6 = x \\<or> fresh xs ?y6 X) \\<and>\n  (?y6 = x' \\<or> fresh xs ?y6 X') \\<Longrightarrow>\n  X #[?y6 \\<and> x]_xs = X' #[?y6 \\<and> x']_xs\n  compatAbsSwap xs s f\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "unfolding compatAbsSwap_def"], ["proof (prove)\nusing this:\n  (?y6 = x \\<or> fresh xs ?y6 X) \\<and>\n  (?y6 = x' \\<or> fresh xs ?y6 X') \\<Longrightarrow>\n  X #[?y6 \\<and> x]_xs = X' #[?y6 \\<and> x']_xs\n  \\<forall>x X x' X'.\n     (\\<forall>y.\n         (y = x \\<or> fresh xs y X) \\<and>\n         (y = x' \\<or> fresh xs y X') \\<longrightarrow>\n         X #[y \\<and> x]_xs = X' #[y \\<and> x']_xs) \\<longrightarrow>\n     f x X = f x' X'\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "by fastforce"], ["proof (state)\nthis:\n  f x X = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x X = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "using 2"], ["proof (prove)\nusing this:\n  f x X = f x' X'\n  absCase xs s f (Abs xs x X) = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "by simp"], ["proof (state)\nthis:\n  absCase xs s f (Abs xs x X) = f x X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma absCase_Abs_subst[simp]:\nassumes isInBar: \"isInBar (xs,s)\" and X: \"wls s X\"\nand f_compat: \"compatAbsSubst xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "obtain x' X' where 1: \"castAbs xs s (Abs xs x X) = (x',X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' X'.\n        castAbs xs s (Abs xs x X) = (x', X') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"castAbs xs s (Abs xs x X)\") auto"], ["proof (state)\nthis:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "hence 2: \"absCase xs s f (Abs xs x X) = f x' X'\""], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x' X'", "unfolding absCase_def"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. (if wlsAbs (xs, s) (Abs xs x X)\n     then f (fst (castAbs xs s (Abs xs x X)))\n           (snd (castAbs xs s (Abs xs x X)))\n     else undefined) =\n    f x' X'", "using isInBar X"], ["proof (prove)\nusing this:\n  castAbs xs s (Abs xs x X) = (x', X')\n  isInBar (xs, s)\n  wls s X\n\ngoal (1 subgoal):\n 1. (if wlsAbs (xs, s) (Abs xs x X)\n     then f (fst (castAbs xs s (Abs xs x X)))\n           (snd (castAbs xs s (Abs xs x X)))\n     else undefined) =\n    f x' X'", "by auto"], ["proof (state)\nthis:\n  absCase xs s f (Abs xs x X) = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "have \"\\<And> Y. wls (asSort xs) Y \\<Longrightarrow> (X #[Y / x]_xs) = (X' #[Y / x']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       wls (asSort xs) Y \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "using isInBar X 1"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  castAbs xs s (Abs xs x X) = (x', X')\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       wls (asSort xs) Y \\<Longrightarrow> X #[Y / x]_xs = X' #[Y / x']_xs", "by(simp add: castAbs_Abs_subst)"], ["proof (state)\nthis:\n  wls (asSort xs) ?Y6 \\<Longrightarrow> X #[?Y6 / x]_xs = X' #[?Y6 / x']_xs\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "hence \"f x X = f x' X'\""], ["proof (prove)\nusing this:\n  wls (asSort xs) ?Y6 \\<Longrightarrow> X #[?Y6 / x]_xs = X' #[?Y6 / x']_xs\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "using f_compat"], ["proof (prove)\nusing this:\n  wls (asSort xs) ?Y6 \\<Longrightarrow> X #[?Y6 / x]_xs = X' #[?Y6 / x']_xs\n  compatAbsSubst xs s f\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "unfolding compatAbsSubst_def"], ["proof (prove)\nusing this:\n  wls (asSort xs) ?Y6 \\<Longrightarrow> X #[?Y6 / x]_xs = X' #[?Y6 / x']_xs\n  \\<forall>x X x' X'.\n     (\\<forall>Y.\n         wls (asSort xs) Y \\<longrightarrow>\n         X #[Y / x]_xs = X' #[Y / x']_xs) \\<longrightarrow>\n     f x X = f x' X'\n\ngoal (1 subgoal):\n 1. f x X = f x' X'", "by blast"], ["proof (state)\nthis:\n  f x X = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x X = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "using 2"], ["proof (prove)\nusing this:\n  f x X = f x' X'\n  absCase xs s f (Abs xs x X) = f x' X'\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "by simp"], ["proof (state)\nthis:\n  absCase xs s f (Abs xs x X) = f x X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compatAbsVsubst_imp_compatAbsSubst[simp]:\n\"compatAbsVsubst xs s f \\<Longrightarrow> compatAbsSubst xs s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatAbsVsubst xs s f \\<Longrightarrow> compatAbsSubst xs s f", "unfolding compatAbsSubst_def compatAbsVsubst_def\nvsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x X x' X'.\n       (\\<forall>y.\n           X #[Var xs y / x]_xs = X' #[Var xs y / x']_xs) \\<longrightarrow>\n       f x X = f x' X' \\<Longrightarrow>\n    \\<forall>x X x' X'.\n       (\\<forall>Y.\n           wls (asSort xs) Y \\<longrightarrow>\n           X #[Y / x]_xs = X' #[Y / x']_xs) \\<longrightarrow>\n       f x X = f x' X'", "by auto"], ["", "lemma absCase_Abs_vsubst[simp]:\nassumes \"isInBar (xs,s)\" and \"wls s X\"\nand \"compatAbsVsubst xs s f\"\nshows \"absCase xs s f (Abs xs x X) = f x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "using assms"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  compatAbsVsubst xs s f\n\ngoal (1 subgoal):\n 1. absCase xs s f (Abs xs x X) = f x X", "by(simp add: absCase_Abs_subst)"], ["", "lemma absCase_cong[fundef_cong]:\nassumes \"compatAbsSwap xs s f \\<or> compatAbsSubst xs s f \\<or> compatAbsVsubst xs s f\"\nand \"compatAbsSwap xs s f' \\<or> compatAbsSubst xs s f' \\<or> compatAbsVsubst xs s f'\"\nand \"\\<And> x X. wls s X \\<Longrightarrow> f x X = f' x X\"\nshows \"wlsAbs (xs,s) A \\<Longrightarrow>\n       absCase xs s f A = absCase xs s f' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsAbs (xs, s) A \\<Longrightarrow> absCase xs s f A = absCase xs s f' A", "apply(erule wlsAbs_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (xs, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> absCase xs s f (Abs xs x X) =\n                         absCase xs s f' (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  compatAbsSwap xs s f \\<or>\n  compatAbsSubst xs s f \\<or> compatAbsVsubst xs s f\n  compatAbsSwap xs s f' \\<or>\n  compatAbsSubst xs s f' \\<or> compatAbsVsubst xs s f'\n  wls s ?X6 \\<Longrightarrow> f ?x6 ?X6 = f' ?x6 ?X6\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>isInBar (xs, s); wls s X\\<rbrakk>\n       \\<Longrightarrow> absCase xs s f (Abs xs x X) =\n                         absCase xs s f' (Abs xs x X)", "by auto"], ["", "lemmas absCase_simps = absCase_Abs_swap absCase_Abs_subst\ncompatAbsVsubst_imp_compatAbsSubst absCase_Abs_vsubst"], ["", "lemmas abs_cast_simps = castAbs_simps absCase_simps"], ["", "lemmas cast_simps = term_cast_simps abs_cast_simps"], ["", "lemmas wls_item_simps =\nwlsAll_imp_goodAll  paramS_simps Cons_wls_simps all_preserve_wls\nwls_freeCons wls_allOpers_simps wls_allOpers_otherSimps Abs_inj_fresh cast_simps"], ["", "(* Since the transition from good terms to well-sorted terms is complete, we\nno longer need the ``good\" layer: *)"], ["", "lemmas wls_copy_of_good_item_simps = good_freeCons  good_allOpers_simps good_allOpers_otherSimps\nparam_simps  all_preserve_good"], ["", "declare wls_copy_of_good_item_simps [simp del]"], ["", "declare qItem_simps [simp del]"], ["", "declare qItem_versus_item_simps [simp del]"], ["", "end"], ["", "(* context FixSyn  *)"], ["", "end"]]}