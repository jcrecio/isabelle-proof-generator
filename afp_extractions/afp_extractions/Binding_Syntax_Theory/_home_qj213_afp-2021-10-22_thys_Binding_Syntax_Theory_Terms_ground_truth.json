{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Terms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["theorem getEnv_updEnv_idEnv[simp]:\n\"(idEnv [x \\<leftarrow> X]_xs) ys y = (if (ys = xs \\<and> y = x) then Some X else None)\"", "theorem subst_psubst_idEnv:\n\"(X #[Y / y]_ys) = (X #[idEnv [y \\<leftarrow> Y]_ys])\"", "theorem vsubst_psubst_idEnv:\n\"(X #[z // y]_ys) = (X #[idEnv [y \\<leftarrow> Var ys z]_ys])\"", "theorem substEnv_psubstEnv_idEnv:\n\"(rho &[Y / y]_ys) = (rho &[idEnv [y \\<leftarrow> Y]_ys])\"", "theorem vsubstEnv_psubstEnv_idEnv:\n\"(rho &[z // y]_ys) = (rho &[idEnv [y \\<leftarrow> Var ys z]_ys])\"", "theorem freshEnv_idEnv: \"freshEnv xs x idEnv\"", "theorem swapEnv_idEnv[simp]: \"(idEnv &[x \\<and> y]_xs) = idEnv\"", "theorem psubstEnv_idEnv[simp]: \"(idEnv &[rho]) = rho\"", "theorem substEnv_idEnv: \"(idEnv &[X / x]_xs) = (idEnv [x \\<leftarrow> X]_xs)\"", "theorem vsubstEnv_idEnv: \"(idEnv &[y // x]_xs) = (idEnv [x \\<leftarrow> (Var xs y)]_xs)\"", "lemma psubstAll_idEnv:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\"\nshows\n\"(good X  \\<longrightarrow> (X #[idEnv]) = X) \\<and>\n (goodAbs A  \\<longrightarrow> (A $[idEnv]) = A)\"", "lemma psubst_idEnv[simp]:\n\"good X \\<Longrightarrow> (X #[idEnv]) = X\"", "lemma psubstEnv_idEnv_id[simp]:\nassumes \"goodEnv rho\"\nshows \"(rho &[idEnv]) = rho\"", "theorem updEnv_overwrite[simp]: \"((rho [x \\<leftarrow> X]_xs) [x \\<leftarrow> X']_xs) = (rho [x \\<leftarrow> X']_xs)\"", "theorem updEnv_commute:\nassumes \"xs \\<noteq> ys \\<or> x \\<noteq> y\"\nshows \"((rho [x \\<leftarrow> X]_xs) [y \\<leftarrow> Y]_ys) = ((rho [y \\<leftarrow> Y]_ys) [x \\<leftarrow> X]_xs)\"", "theorem freshEnv_updEnv_E1:\nassumes \"freshEnv xs y (rho [x \\<leftarrow> X]_xs)\"\nshows \"y \\<noteq> x\"", "theorem freshEnv_updEnv_E2:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nshows \"fresh ys y X\"", "theorem freshEnv_updEnv_E3:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nshows \"rho ys y = None\"", "theorem freshEnv_updEnv_E4:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nand \"zs \\<noteq> xs \\<or> z \\<noteq> x\" and \"rho zs z = Some Z\"\nshows \"fresh ys y Z\"", "theorem freshEnv_updEnv_I:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"fresh ys y X\" and \"rho ys y = None\"\nand \"\\<And> zs z Z. \\<lbrakk>zs \\<noteq> xs \\<or> z \\<noteq> x; rho zs z = Some Z\\<rbrakk> \\<Longrightarrow> fresh ys y Z\"\nshows \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"", "theorem swapEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[y1 \\<and> y2]_ys) =\n ((rho &[y1 \\<and> y2]_ys) [(x @xs[y1 \\<and> y2]_ys) \\<leftarrow> (X #[y1 \\<and> y2]_ys)]_xs)\"", "lemma swapEnv_updEnv_fresh:\nassumes \"ys \\<noteq> xs \\<or> x \\<notin> {y1,y2}\" and \"good X\"\nand \"fresh ys y1 X\" and \"fresh ys y2 X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[y1 \\<and> y2]_ys) =\n       ((rho &[y1 \\<and> y2]_ys) [x \\<leftarrow> X]_xs)\"", "theorem psubstEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[rho']) = ((rho &[rho']) [x \\<leftarrow> (X #[rho'])]_xs)\"", "theorem psubstEnv_updEnv_idEnv:\n\"((idEnv [x \\<leftarrow> X]_xs) &[rho]) = (rho [x \\<leftarrow> (X #[rho])]_xs)\"", "theorem substEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[Y / y]_ys) = ((rho &[Y / y]_ys) [x \\<leftarrow> (X #[Y / y]_ys)]_xs)\"", "theorem vsubstEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[y1 // y]_ys) = ((rho &[y1 // y]_ys) [x \\<leftarrow> (X #[y1 // y]_ys)]_xs)\"", "theorem getEnv_ext:\nassumes \"\\<And> xs x. rho xs x = rho' xs x\"\nshows \"rho = rho'\"", "theorem freshEnv_getEnv1[simp]:\n\"\\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk> \\<Longrightarrow> ys \\<noteq> xs \\<or> y \\<noteq> x\"", "theorem freshEnv_getEnv2[simp]:\n\"\\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk> \\<Longrightarrow> fresh ys y X\"", "theorem freshEnv_getEnv[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> rho ys y = None\"", "theorem getEnv_swapEnv1[simp]:\nassumes \"rho xs (x @xs [z1 \\<and> z2]_zs) = None\"\nshows \"(rho &[z1 \\<and> z2]_zs) xs x = None\"", "theorem getEnv_swapEnv2[simp]:\nassumes \"rho xs (x @xs [z1 \\<and> z2]_zs) = Some X\"\nshows \"(rho &[z1 \\<and> z2]_zs) xs x = Some (X #[z1 \\<and> z2]_zs)\"", "theorem getEnv_psubstEnv_None[simp]:\nassumes \"rho xs x = None\"\nshows \"(rho &[rho']) xs x = rho' xs x\"", "theorem getEnv_psubstEnv_Some[simp]:\nassumes \"rho xs x = Some X\"\nshows \"(rho &[rho']) xs x = Some (X #[rho'])\"", "theorem getEnv_substEnv1[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = None\"\nshows \"(rho &[Y / y]_ys) xs x = None\"", "theorem getEnv_substEnv2[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = Some X\"\nshows \"(rho &[Y / y]_ys) xs x = Some (X #[Y / y]_ys)\"", "theorem getEnv_substEnv3[simp]:\n\"\\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n \\<Longrightarrow> (rho &[Y / y]_ys) xs x = None\"", "theorem getEnv_substEnv4[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> (rho &[Y / y]_ys) ys y = Some Y\"", "theorem getEnv_vsubstEnv1[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = None\"\nshows \"(rho &[y1 // y]_ys) xs x = None\"", "theorem getEnv_vsubstEnv2[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = Some X\"\nshows \"(rho &[y1 // y]_ys) xs x = Some (X #[y1 // y]_ys)\"", "theorem getEnv_vsubstEnv3[simp]:\n\"\\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n \\<Longrightarrow> (rho &[z // y]_ys) xs x = None\"", "theorem getEnv_vsubstEnv4[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> (rho &[z // y]_ys) ys y = Some (Var ys z)\"", "lemma freshAll_psubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and x\nassumes goodP: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n     fresh zs z (X #[rho]) =\n     (\\<forall> ys. \\<forall> y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)))\n \\<and>\n (goodAbs A \\<longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n     freshAbs zs z (A $[rho]) =\n     (\\<forall> ys. \\<forall> y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)))\"", "lemma fresh_subst:\nassumes \"good X\" and \"good Y\"\nshows \"fresh zs z (X #[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> fresh zs z Y))\"", "lemma fresh_vsubst:\nassumes \"good X\"\nshows \"fresh zs z (X #[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\"", "lemma subst_preserves_fresh:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z X\" and \"fresh zs z Y\"\nshows \"fresh zs z (X #[Y / y]_ys)\"", "lemma substEnv_preserves_freshEnv_aux:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand fresh_rho: \"freshEnv zs z rho\" and fresh_Y: \"fresh zs z Y\" and diff: \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\"", "lemma substEnv_preserves_freshEnv:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand fresh_rho: \"freshEnv zs z rho\" and fresh_Y: \"fresh zs z Y\" and diff: \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\"", "lemma vsubst_preserves_fresh:\nassumes \"good X\"\nand \"fresh zs z X\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"fresh zs z (X #[y1 // y]_ys)\"", "lemma vsubstEnv_preserves_freshEnv:\nassumes rho: \"goodEnv rho\"\nand fresh_rho: \"freshEnv zs z rho\" and diff: \"zs \\<noteq> ys \\<or> z \\<notin> {y,y1}\"\nshows \"freshEnv zs z (rho &[y1 // y]_ys)\"", "lemma fresh_fresh_subst[simp]:\nassumes \"good Y\" and \"good X\"\nand \"fresh ys y Y\"\nshows \"fresh ys y (X #[Y / y]_ys)\"", "lemma diff_fresh_vsubst[simp]:\nassumes \"good X\"\nand \"y \\<noteq> y1\"\nshows \"fresh ys y (X #[y1 // y]_ys)\"", "lemma fresh_subst_E1:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z (X #[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\"", "lemma fresh_vsubst_E1:\nassumes \"good X\"\nand \"fresh zs z (X #[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\"", "lemma fresh_subst_E2:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z (X #[Y / y]_ys)\"\nshows \"fresh ys y X \\<or> fresh zs z Y\"", "lemma fresh_vsubst_E2:\nassumes \"good X\"\nand \"fresh zs z (X #[y1 // y]_ys)\"\nshows \"fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\"", "lemma psubstAll_cong:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes goodP: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho rho'. {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n   (\\<forall> ys. \\<forall> y. fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n               (X #[rho]) = (X #[rho'])))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho rho'. {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n   (\\<forall> ys. \\<forall> y. freshAbs ys y A \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n               (A $[rho]) = (A $[rho'])))\"", "lemma fresh_psubst_updEnv:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nand \"fresh xs x Y\"\nshows \"(Y #[rho [x \\<leftarrow> X]_xs]) = (Y #[rho])\"", "lemma psubstAll_ident:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P :: \"('index,'bindex,'varSort,'var,'opSym) Transition_QuasiTerms_Terms.param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n   (\\<forall> zs z. freshEnv zs z rho \\<or> fresh zs z X)\n   \\<longrightarrow> (X #[rho]) = X))\n \\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n   (\\<forall> zs z. freshEnv zs z rho \\<or> freshAbs zs z A)\n   \\<longrightarrow> (A $[rho]) = A))\"", "lemma fresh_subst_ident[simp]:\nassumes \"good X\" and \"good Y\" and \"fresh xs x Y\"\nshows \"(Y #[X / x]_xs) = Y\"", "lemma fresh_substEnv_updEnv[simp]:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand *: \"freshEnv ys y rho\"\nshows \"(rho &[Y / y]_ys) = (rho [y \\<leftarrow> Y]_ys)\"", "lemma fresh_vsubst_ident[simp]:\nassumes \"good Y\" and \"fresh xs x Y\"\nshows \"(Y #[x1 // x]_xs) = Y\"", "lemma fresh_vsubstEnv_updEnv[simp]:\nassumes rho: \"goodEnv rho\"\nand *: \"freshEnv ys y rho\"\nshows \"(rho &[y1 // y]_ys) = (rho [y \\<leftarrow> Var ys y1]_ys)\"", "lemma swapAll_psubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho z1 z2. rho \\<in> envsOf P \\<and> {z1,z2} \\<subseteq> varsOf P \\<longrightarrow>\n                ((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])))\n \\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho z1 z2. rho \\<in> envsOf P \\<and> {z1,z2} \\<subseteq> varsOf P \\<longrightarrow>\n                ((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])))\"", "lemma swap_psubst:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])\"", "lemma swap_subst:\nassumes \"good X\" and \"good Y\"\nshows \"((X #[Y / y]_ys) #[z1 \\<and> z2]_zs) =\n       ((X #[z1 \\<and> z2]_zs) #[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma swap_vsubst:\nassumes \"good X\"\nshows \"((X #[y1 // y]_ys) #[z1 \\<and> z2]_zs) =\n       ((X #[z1 \\<and> z2]_zs) #[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma swapEnv_psubstEnv:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) &[rho' &[z1 \\<and> z2]_zs])\"", "lemma swapEnv_substEnv:\nassumes \"good Y\" and \"goodEnv rho\"\nshows \"((rho &[Y / y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma swapEnv_vsubstEnv:\nassumes \"goodEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma psubstAll_compose:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho rho'. {rho,rho'} \\<subseteq> envsOf P \\<longrightarrow> ((X #[rho]) #[rho']) = (X #[(rho &[rho'])])))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho rho'. {rho,rho'} \\<subseteq> envsOf P \\<longrightarrow> ((A $[rho]) $[rho']) = (A $[(rho &[rho'])])))\"", "lemma psubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\" and \"goodEnv rho''\"\nshows \"((rho &[rho']) &[rho'']) = (rho &[(rho' &[rho''])])\"", "lemma psubst_subst_compose:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\"", "lemma psubstEnv_substEnv_compose:\nassumes \"goodEnv rho\" and \"good Y\" and \"goodEnv rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> (Y #[rho'])]_ys)])\"", "lemma psubst_vsubst_compose:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[y1 // y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\"", "lemma psubstEnv_vsubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[y1 // y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> ((Var ys y1) #[rho'])]_ys)])\"", "lemma subst_psubst_compose:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[Y / y]_ys) = (X #[(rho &[Y / y]_ys)])\"", "lemma substEnv_psubstEnv_compose:\nassumes \"goodEnv rho\" and \"good Y\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[Y / y]_ys) = (rho &[(rho' &[Y / y]_ys)])\"", "lemma psubst_subst_compose_freshEnv:\nassumes \"goodEnv rho\" and \"good X\" and \"good Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = ((X #[rho]) #[(Y #[rho]) / y]_ys)\"", "lemma psubstEnv_substEnv_compose_freshEnv:\nassumes \"goodEnv rho\" and \"goodEnv rho'\" and \"good Y\"\nassumes \"freshEnv ys y rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = ((rho &[rho']) &[(Y #[rho']) / y]_ys)\"", "lemma vsubst_psubst_compose:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[y1 // y]_ys) = (X #[(rho &[y1 // y]_ys)])\"", "lemma vsubstEnv_psubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[y1 // y]_ys) = (rho &[(rho' &[y1 // y]_ys)])\"", "lemma subst_compose1:\nassumes \"good X\" and \"good Y1\" and \"good Y2\"\nshows \"((X #[Y1 / y]_ys) #[Y2 / y]_ys) = (X #[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "lemma substEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y1\" and \"good Y2\"\nshows \"((rho &[Y1 / y]_ys) &[Y2 / y]_ys) = (rho &[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "lemma subst_vsubst_compose1:\nassumes \"good X\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((X #[y1 // y]_ys) #[Y / y]_ys) = (X #[y1 // y]_ys)\"", "lemma substEnv_vsubstEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((rho &[y1 // y]_ys) &[Y / y]_ys) = (rho &[y1 // y]_ys)\"", "lemma vsubst_subst_compose1:\nassumes \"good X\" and \"good Y\"\nshows \"((X #[Y / y]_ys) #[y1 // y]_ys) = (X #[(Y #[y1 // y]_ys) / y]_ys)\"", "lemma vsubstEnv_substEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y\"\nshows \"((rho &[Y / y]_ys) &[y1 // y]_ys) = (rho &[(Y #[y1 // y]_ys) / y]_ys)\"", "lemma vsubst_compose1:\nassumes \"good X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y]_ys) = (X #[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "lemma vsubstEnv_compose1:\nassumes \"goodEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[y2 // y]_ys) = (rho &[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "lemma subst_compose2:\nassumes  \"good X\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[Y / y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[(Y #[Z / z]_zs) / y]_ys)\"", "lemma substEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[Y / y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[(Y #[Z / z]_zs) / y]_ys)\"", "lemma subst_vsubst_compose2:\nassumes  \"good X\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[y1 // y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "lemma substEnv_vsubstEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[y1 // y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "lemma vsubst_subst_compose2:\nassumes  \"good X\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[Y / y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(Y #[z1 // z]_zs) / y]_ys)\"", "lemma vsubstEnv_substEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[Y / y]_ys) &[z1 // z]_zs) = ((rho &[z1 // z]_zs) &[(Y #[z1 // z]_zs) / y]_ys)\"", "lemma vsubst_compose2:\nassumes  \"good X\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[y1 // y]_ys) #[z1 // z]_zs) =\n       ((X #[z1 // z]_zs) #[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "lemma vsubstEnv_compose2:\nassumes \"goodEnv rho\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[y1 // y]_ys) &[z1 // z]_zs) =\n       ((rho &[z1 // z]_zs) &[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "lemma vsubstAll_ident:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and zs\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> z. z \\<in> varsOf P \\<longrightarrow> (X #[z // z]_zs) = X))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> z. z \\<in> varsOf P \\<longrightarrow> (A $[z // z]_zs) = A))\"", "lemma vsubstAll_swapAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and ys\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<and> fresh ys y1 X \\<longrightarrow>\n            (X #[y1 // y2]_ys) = (X #[y1 \\<and> y2]_ys)))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<and> freshAbs ys y1 A  \\<longrightarrow>\n            (A $[y1 // y2]_ys) = (A $[y1 \\<and> y2]_ys)))\"", "lemma skelAll_vsubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and ys\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<longrightarrow>\n            skel (X #[y1 // y2]_ys) = skel X))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<longrightarrow>\n            skelAbs (A $[y1 // y2]_ys) = skelAbs A))\"", "lemma subst_vsubst_trans:\nassumes  \"good X\" and \"good Y\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[Y / y1]_ys) = (X #[Y / y]_ys)\"", "lemma vsubst_trans:\nassumes  \"good X\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y1]_ys) = (X #[y2 // y]_ys)\"", "lemma vsubst_commute:\nassumes X: \"good X\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"fresh xs x X\" and \"fresh xs' x' X\"\nshows \"((X #[x // y]_xs) #[x' // y']_xs') = ((X #[x' // y']_xs') #[x // y]_xs)\"", "lemma psubstAbs_idEnv[simp]:\n\"goodAbs A \\<Longrightarrow> (A $[idEnv]) = A\"", "lemma freshAbs_substAbs:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and> (freshAbs ys y A \\<or> fresh zs z Y))\"", "lemma freshAbs_vsubstAbs:\nassumes \"goodAbs A\"\nshows \"freshAbs zs z (A $[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and>\n        (freshAbs ys y A \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\"", "lemma substAbs_preserves_freshAbs:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z A\" and \"fresh zs z Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys)\"", "lemma vsubstAbs_preserves_freshAbs:\nassumes \"goodAbs A\"\nand \"freshAbs zs z A\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"freshAbs zs z (A $[y1 // y]_ys)\"", "lemma fresh_freshAbs_substAbs[simp]:\nassumes \"good Y\" and \"goodAbs A\"\nand \"fresh ys y Y\"\nshows \"freshAbs ys y (A $[Y / y]_ys)\"", "lemma diff_freshAbs_vsubstAbs[simp]:\nassumes \"goodAbs A\"\nand \"y \\<noteq> y1\"\nshows \"freshAbs ys y (A $[y1 // y]_ys)\"", "lemma freshAbs_substAbs_E1:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshAbs zs z A\"", "lemma freshAbs_vsubstAbs_E1:\nassumes \"goodAbs A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshAbs zs z A\"", "lemma freshAbs_substAbs_E2:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\"", "lemma freshAbs_vsubstAbs_E2:\nassumes \"goodAbs A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\"\nshows \"freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\"", "lemma freshAbs_psubstAbs_updEnv:\nassumes \"good X\" and \"goodAbs A\" and \"goodEnv rho\"\nand \"freshAbs xs x A\"\nshows \"(A $[rho [x \\<leftarrow> X]_xs]) = (A $[rho])\"", "lemma freshAbs_substAbs_ident[simp]:\nassumes \"good X\" and \"goodAbs A\" and \"freshAbs xs x A\"\nshows \"(A $[X / x]_xs) = A\"", "lemma freshAbs_vsubstAbs_ident[simp]:\nassumes \"goodAbs A\" and \"freshAbs xs x A\"\nshows \"(A $[x1 // x]_xs) = A\"", "lemma swapAbs_psubstAbs:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])\"", "lemma swapAbs_substAbs:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"((A $[Y / y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma swapAbs_vsubstAbs:\nassumes \"goodAbs A\"\nshows \"((A $[y1 // y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\"", "lemma psubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((A $[rho]) $[rho']) = (A $[(rho &[rho'])])\"", "lemma psubstAbs_substAbs_compose:\nassumes \"goodAbs A\" and \"good Y\" and \"goodEnv rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\"", "lemma psubstAbs_vsubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[y1 // y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\"", "lemma substAbs_psubstAbs_compose:\nassumes \"goodAbs A\" and \"good Y\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[Y / y]_ys) = (A $[(rho &[Y / y]_ys)])\"", "lemma psubstAbs_substAbs_compose_freshEnv:\nassumes \"goodAbs A\" and \"goodEnv rho\" and \"good Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = ((A $[rho]) $[(Y #[rho]) / y]_ys)\"", "lemma vsubstAbs_psubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[y1 // y]_ys) = (A $[(rho &[y1 // y]_ys)])\"", "lemma substAbs_compose1:\nassumes \"goodAbs A\" and \"good Y1\" and \"good Y2\"\nshows \"((A $[Y1 / y]_ys) $[Y2 / y]_ys) = (A $[(Y1 #[Y2 / y]_ys) / y]_ys)\"", "lemma substAbs_vsubstAbs_compose1:\nassumes \"goodAbs A\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((A $[y1 // y]_ys) $[Y / y]_ys) = (A $[y1 // y]_ys)\"", "lemma vsubstAbs_substAbs_compose1:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"((A $[Y / y]_ys) $[y1 // y]_ys) = (A $[(Y #[y1 // y]_ys) / y]_ys)\"", "lemma vsubstAbs_compose1:\nassumes \"goodAbs A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y]_ys) = (A $[(y1 @ys[y2 / y]_ys) // y]_ys)\"", "lemma substAbs_compose2:\nassumes  \"goodAbs A\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[Y / y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[(Y #[Z / z]_zs) / y]_ys)\"", "lemma substAbs_vsubstAbs_compose2:\nassumes \"goodAbs A\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[y1 // y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[((Var ys y1) #[Z / z]_zs) / y]_ys)\"", "lemma vsubstAbs_substAbs_compose2:\nassumes  \"goodAbs A\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[Y / y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(Y #[z1 // z]_zs) / y]_ys)\"", "lemma vsubstAbs_compose2:\nassumes  \"goodAbs A\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[y1 // y]_ys) $[z1 // z]_zs) =\n       ((A $[z1 // z]_zs) $[(y1 @ys[z1 / z]_zs) // y]_ys)\"", "lemma substAbs_vsubstAbs_trans:\nassumes  \"goodAbs A\" and \"good Y\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[Y / y1]_ys) = (A $[Y / y]_ys)\"", "lemma vsubstAbs_trans:\nassumes  \"goodAbs A\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y1]_ys) = (A $[y2 // y]_ys)\"", "lemmas good_psubstAll_freshAll_otherSimps =\npsubst_idEnv psubstEnv_idEnv_id psubstAbs_idEnv\nfreshEnv_psubst_ident freshEnv_psubstAbs_ident", "lemmas good_substAll_freshAll_otherSimps =\nfresh_fresh_subst fresh_subst_ident fresh_substEnv_updEnv subst_ident\nfresh_freshAbs_substAbs freshAbs_substAbs_ident substAbs_ident", "lemmas good_vsubstAll_freshAll_otherSimps =\ndiff_fresh_vsubst fresh_vsubst_ident fresh_vsubstEnv_updEnv vsubst_ident\ndiff_freshAbs_vsubstAbs freshAbs_vsubstAbs_ident vsubstAbs_ident", "lemmas good_allOpers_otherSimps =\ngood_swapAll_freshAll_otherSimps\ngood_psubstAll_freshAll_otherSimps\ngood_substAll_freshAll_otherSimps\ngood_vsubstAll_freshAll_otherSimps", "lemmas good_item_simps =\nparam_simps\nall_preserve_good\ngood_freeCons\ngood_allOpers_simps\ngood_allOpers_otherSimps"], "translations": [["", "theorem getEnv_updEnv_idEnv[simp]:\n\"(idEnv [x \\<leftarrow> X]_xs) ys y = (if (ys = xs \\<and> y = x) then Some X else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (idEnv [x \\<leftarrow> X]_xs) ys y =\n    (if ys = xs \\<and> y = x then Some X else None)", "unfolding idEnv_def updEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if ys = xs \\<and> y = x then Some X else None) =\n    (if ys = xs \\<and> y = x then Some X else None)", "by simp"], ["", "theorem subst_psubst_idEnv:\n\"(X #[Y / y]_ys) = (X #[idEnv [y \\<leftarrow> Y]_ys])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys = X #[idEnv [y \\<leftarrow> Y]_ys]", "unfolding subst_def idEnv_def updEnv_def psubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. asTerm\n     pick\n      X #[[pickE\n            (\\<lambda>ysa ya.\n                if ysa = ys \\<and> ya = y then Some Y else None)]] =\n    asTerm\n     pick\n      X #[[pickE\n            (\\<lambda>ysa ya.\n                if ysa = ys \\<and> ya = y then Some Y else None)]]", "by simp"], ["", "theorem vsubst_psubst_idEnv:\n\"(X #[z // y]_ys) = (X #[idEnv [y \\<leftarrow> Var ys z]_ys])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[z // y]_ys = X #[idEnv [y \\<leftarrow> Var ys z]_ys]", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Var ys z / y]_ys = X #[idEnv [y \\<leftarrow> Var ys z]_ys]", "by(simp add: subst_psubst_idEnv)"], ["", "theorem substEnv_psubstEnv_idEnv:\n\"(rho &[Y / y]_ys) = (rho &[idEnv [y \\<leftarrow> Y]_ys])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys = rho &[idEnv [y \\<leftarrow> Y]_ys]", "unfolding substEnv_def idEnv_def updEnv_def psubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None]) =\n    (\\<lambda>xs x.\n        case rho xs x of\n        None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n        | Some X \\<Rightarrow>\n            Some\n             X #[\\<lambda>ysa ya.\n                    if ysa = ys \\<and> ya = y then Some Y else None])", "by simp"], ["", "theorem vsubstEnv_psubstEnv_idEnv:\n\"(rho &[z // y]_ys) = (rho &[idEnv [y \\<leftarrow> Var ys z]_ys])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[z // y]_ys = rho &[idEnv [y \\<leftarrow> Var ys z]_ys]", "unfolding vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Var ys z / y]_ys = rho &[idEnv [y \\<leftarrow> Var ys z]_ys]", "by (simp add: substEnv_psubstEnv_idEnv)"], ["", "theorem freshEnv_idEnv: \"freshEnv xs x idEnv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv xs x idEnv", "unfolding idEnv_def freshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. None = None \\<and>\n    (\\<forall>ys i v. None = Some v \\<longrightarrow> fresh xs x v)", "by simp"], ["", "theorem swapEnv_idEnv[simp]: \"(idEnv &[x \\<and> y]_xs) = idEnv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[x \\<and> y]_xs = idEnv", "unfolding idEnv_def swapEnv_def comp_def swapEnvDom_def swapEnvIm_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>zs i.\n        case None of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v #[x \\<and> y]_xs)) =\n    (\\<lambda>xs. Map.empty)", "by simp"], ["", "theorem psubstEnv_idEnv[simp]: \"(idEnv &[rho]) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[rho] = rho", "unfolding idEnv_def psubstEnv_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xs x.\n        case None of None \\<Rightarrow> rho xs x\n        | Some X \\<Rightarrow> Some X #[rho]) =\n    rho", "by simp"], ["", "theorem substEnv_idEnv: \"(idEnv &[X / x]_xs) = (idEnv [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[X / x]_xs = idEnv [x \\<leftarrow> X]_xs", "unfolding substEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[idEnv [x \\<leftarrow> X]_xs] = idEnv [x \\<leftarrow> X]_xs", "using psubstEnv_idEnv"], ["proof (prove)\nusing this:\n  idEnv &[?rho] = ?rho\n\ngoal (1 subgoal):\n 1. idEnv &[idEnv [x \\<leftarrow> X]_xs] = idEnv [x \\<leftarrow> X]_xs", "by auto"], ["", "theorem vsubstEnv_idEnv: \"(idEnv &[y // x]_xs) = (idEnv [x \\<leftarrow> (Var xs y)]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[y // x]_xs = idEnv [x \\<leftarrow> Var xs y]_xs", "unfolding vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv &[Var xs y / x]_xs = idEnv [x \\<leftarrow> Var xs y]_xs", "using substEnv_idEnv"], ["proof (prove)\nusing this:\n  idEnv &[?X / ?x]_?xs = idEnv [?x \\<leftarrow> ?X]_?xs\n\ngoal (1 subgoal):\n 1. idEnv &[Var xs y / x]_xs = idEnv [x \\<leftarrow> Var xs y]_xs", "."], ["", "lemma psubstAll_idEnv:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\"\nshows\n\"(good X  \\<longrightarrow> (X #[idEnv]) = X) \\<and>\n (goodAbs A  \\<longrightarrow> (A $[idEnv]) = A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow> X #[idEnv] = X) \\<and>\n    (goodAbs A \\<longrightarrow> A $[idEnv] = A)", "apply(induct rule: term_rawInduct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x. Var xs x #[idEnv] = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. a #[idEnv] = a) inp;\n        liftAll (\\<lambda>a. a $[idEnv] = a) binp\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[idEnv] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; X #[idEnv] = X\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X $[idEnv] = Abs xs x X", "unfolding psubstInp_def psubstBinp_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x. Var xs x #[idEnv] = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. a #[idEnv] = a) inp;\n        liftAll (\\<lambda>a. a $[idEnv] = a) binp\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[idEnv] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; X #[idEnv] = X\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X $[idEnv] = Abs xs x X", "using idEnv_preserves_good psubst_Var_simp1"], ["proof (prove)\nusing this:\n  goodEnv idEnv\n  \\<lbrakk>goodEnv ?rho; ?rho ?xs ?x = None\\<rbrakk>\n  \\<Longrightarrow> Var ?xs ?x #[?rho] = Var ?xs ?x\n\ngoal (3 subgoals):\n 1. \\<And>xs x. Var xs x #[idEnv] = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll (\\<lambda>a. a #[idEnv] = a) inp;\n        liftAll (\\<lambda>a. a $[idEnv] = a) binp\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[idEnv] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; X #[idEnv] = X\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X $[idEnv] = Abs xs x X", "by (simp_all del: getEnv_idEnv add: \nliftAll_lift_ext lift_ident freshEnv_idEnv psubstBinp_def psubstInp_def)\n  fastforce+"], ["", "lemma psubst_idEnv[simp]:\n\"good X \\<Longrightarrow> (X #[idEnv]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good X \\<Longrightarrow> X #[idEnv] = X", "by(simp add: psubstAll_idEnv)"], ["", "lemma psubstEnv_idEnv_id[simp]:\nassumes \"goodEnv rho\"\nshows \"(rho &[idEnv]) = rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[idEnv] = rho", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[idEnv] = rho", "unfolding psubstEnv_def lift_def goodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. (\\<lambda>xs x.\n        case rho xs x of None \\<Rightarrow> idEnv xs x\n        | Some X \\<Rightarrow> Some X #[idEnv]) =\n    rho", "apply(intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n       (\\<forall>ys.\n           |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<Longrightarrow>\n       (case rho xs x of None \\<Rightarrow> idEnv xs x\n        | Some X \\<Rightarrow> Some X #[idEnv]) =\n       rho xs x", "subgoal for xs x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> good v) \\<and>\n    (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<Longrightarrow>\n    (case rho xs x of None \\<Rightarrow> idEnv xs x\n     | Some X \\<Rightarrow> Some X #[idEnv]) =\n    rho xs x", "by(cases \"rho xs x\") auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "subsection \\<open>Environment update versus other operators\\<close>"], ["", "(* Recall theorem getEnv_updEnv. *)"], ["", "theorem updEnv_overwrite[simp]: \"((rho [x \\<leftarrow> X]_xs) [x \\<leftarrow> X']_xs) = (rho [x \\<leftarrow> X']_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs [x \\<leftarrow> X']_xs =\n    rho [x \\<leftarrow> X']_xs", "unfolding updEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>ys y.\n        if ys = xs \\<and> y = x then Some X'\n        else if ys = xs \\<and> y = x then Some X else rho ys y) =\n    (\\<lambda>ys y. if ys = xs \\<and> y = x then Some X' else rho ys y)", "by fastforce"], ["", "theorem updEnv_commute:\nassumes \"xs \\<noteq> ys \\<or> x \\<noteq> y\"\nshows \"((rho [x \\<leftarrow> X]_xs) [y \\<leftarrow> Y]_ys) = ((rho [y \\<leftarrow> Y]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs [y \\<leftarrow> Y]_ys =\n    rho [y \\<leftarrow> Y]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs [y \\<leftarrow> Y]_ys =\n    rho [y \\<leftarrow> Y]_ys [x \\<leftarrow> X]_xs", "unfolding updEnv_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> ys \\<or> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<lambda>ysa ya.\n        if ysa = ys \\<and> ya = y then Some Y\n        else if ysa = xs \\<and> ya = x then Some X else rho ysa ya) =\n    (\\<lambda>ysa ya.\n        if ysa = xs \\<and> ya = x then Some X\n        else if ysa = ys \\<and> ya = y then Some Y else rho ysa ya)", "by fastforce"], ["", "theorem freshEnv_updEnv_E1:\nassumes \"freshEnv xs y (rho [x \\<leftarrow> X]_xs)\"\nshows \"y \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> x", "using assms"], ["proof (prove)\nusing this:\n  freshEnv xs y (rho [x \\<leftarrow> X]_xs)\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "unfolding freshEnv_def liftAll_def updEnv_def"], ["proof (prove)\nusing this:\n  (if xs = xs \\<and> y = x then Some X else rho xs y) = None \\<and>\n  (\\<forall>ys i v.\n      (if ys = xs \\<and> i = x then Some X else rho ys i) =\n      Some v \\<longrightarrow>\n      fresh xs y v)\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "by auto"], ["", "theorem freshEnv_updEnv_E2:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nshows \"fresh ys y X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X", "using assms"], ["proof (prove)\nusing this:\n  freshEnv ys y (rho [x \\<leftarrow> X]_xs)\n\ngoal (1 subgoal):\n 1. fresh ys y X", "unfolding freshEnv_def liftAll_def updEnv_def"], ["proof (prove)\nusing this:\n  (if ys = xs \\<and> y = x then Some X else rho ys y) = None \\<and>\n  (\\<forall>ysa i v.\n      (if ysa = xs \\<and> i = x then Some X else rho ysa i) =\n      Some v \\<longrightarrow>\n      fresh ys y v)\n\ngoal (1 subgoal):\n 1. fresh ys y X", "by (auto split: if_splits)"], ["", "theorem freshEnv_updEnv_E3:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nshows \"rho ys y = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho ys y = None", "using assms freshEnv_updEnv_E1[of ys y]"], ["proof (prove)\nusing this:\n  freshEnv ys y (rho [x \\<leftarrow> X]_xs)\n  freshEnv ys y (?rho [?x \\<leftarrow> ?X]_ys) \\<Longrightarrow>\n  y \\<noteq> ?x\n\ngoal (1 subgoal):\n 1. rho ys y = None", "unfolding freshEnv_def"], ["proof (prove)\nusing this:\n  (rho [x \\<leftarrow> X]_xs) ys y = None \\<and>\n  (\\<forall>ysa. liftAll (fresh ys y) ((rho [x \\<leftarrow> X]_xs) ysa))\n  (?rho [?x \\<leftarrow> ?X]_ys) ys y = None \\<and>\n  (\\<forall>ysa.\n      liftAll (fresh ys y)\n       ((?rho [?x \\<leftarrow> ?X]_ys) ysa)) \\<Longrightarrow>\n  y \\<noteq> ?x\n\ngoal (1 subgoal):\n 1. rho ys y = None", "by (metis getEnv_updEnv option.simps(3))"], ["", "theorem freshEnv_updEnv_E4:\nassumes \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\"\nand \"zs \\<noteq> xs \\<or> z \\<noteq> x\" and \"rho zs z = Some Z\"\nshows \"fresh ys y Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y Z", "using assms"], ["proof (prove)\nusing this:\n  freshEnv ys y (rho [x \\<leftarrow> X]_xs)\n  zs \\<noteq> xs \\<or> z \\<noteq> x\n  rho zs z = Some Z\n\ngoal (1 subgoal):\n 1. fresh ys y Z", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (rho [x \\<leftarrow> X]_xs) ys y = None \\<and>\n  (\\<forall>ysa i v.\n      (rho [x \\<leftarrow> X]_xs) ysa i = Some v \\<longrightarrow>\n      fresh ys y v)\n  zs \\<noteq> xs \\<or> z \\<noteq> x\n  rho zs z = Some Z\n\ngoal (1 subgoal):\n 1. fresh ys y Z", "by (metis getEnv_updEnv1)"], ["", "theorem freshEnv_updEnv_I:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"fresh ys y X\" and \"rho ys y = None\"\nand \"\\<And> zs z Z. \\<lbrakk>zs \\<noteq> xs \\<or> z \\<noteq> x; rho zs z = Some Z\\<rbrakk> \\<Longrightarrow> fresh ys y Z\"\nshows \"freshEnv ys y (rho [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y (rho [x \\<leftarrow> X]_xs)", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho [x \\<leftarrow> X]_xs) ys y = None \\<and>\n    (\\<forall>ysa i v.\n        (rho [x \\<leftarrow> X]_xs) ysa i = Some v \\<longrightarrow>\n        fresh ys y v)", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  fresh ys y X\n  rho ys y = None\n  \\<lbrakk>?zs90 \\<noteq> xs \\<or> ?z90 \\<noteq> x;\n   rho ?zs90 ?z90 = Some ?Z90\\<rbrakk>\n  \\<Longrightarrow> fresh ys y ?Z90\n\ngoal (1 subgoal):\n 1. (rho [x \\<leftarrow> X]_xs) ys y = None \\<and>\n    (\\<forall>ysa i v.\n        (rho [x \\<leftarrow> X]_xs) ysa i = Some v \\<longrightarrow>\n        fresh ys y v)", "by auto"], ["", "theorem swapEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[y1 \\<and> y2]_ys) =\n ((rho &[y1 \\<and> y2]_ys) [(x @xs[y1 \\<and> y2]_ys) \\<leftarrow> (X #[y1 \\<and> y2]_ys)]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 \\<and> y2]_ys =\n    rho &[y1 \\<and> y2]_ys [x @xs[y1 \\<and> y2]_ys \\<leftarrow> X #[y1 \\<and> y2]_ys]_xs", "unfolding swapEnv_defs sw_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>zs i.\n        case (rho [x \\<leftarrow> X]_xs) zs\n              (if ys = zs\n               then if i = y1 then y2 else if i = y2 then y1 else i\n               else i) of\n        None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (v #[y1 \\<and> y2]_ys)) =\n    \\<lambda>zs i.\n       case rho zs\n             (if ys = zs\n              then if i = y1 then y2 else if i = y2 then y1 else i\n              else i) of\n       None \\<Rightarrow> None\n       | Some v \\<Rightarrow>\n           Some\n            (v #[y1 \\<and> y2]_ys) [if ys = xs\n                                    then if x = y1 then y2\n   else if x = y2 then y1 else x\n                                    else x \\<leftarrow> X #[y1 \\<and> y2]_ys]_xs", "by(cases \"xs = ys\") fastforce+"], ["", "lemma swapEnv_updEnv_fresh:\nassumes \"ys \\<noteq> xs \\<or> x \\<notin> {y1,y2}\" and \"good X\"\nand \"fresh ys y1 X\" and \"fresh ys y2 X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[y1 \\<and> y2]_ys) =\n       ((rho &[y1 \\<and> y2]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 \\<and> y2]_ys =\n    rho &[y1 \\<and> y2]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> x \\<notin> {y1, y2}\n  good X\n  fresh ys y1 X\n  fresh ys y2 X\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 \\<and> y2]_ys =\n    rho &[y1 \\<and> y2]_ys [x \\<leftarrow> X]_xs", "by(simp add: swapEnv_updEnv)"], ["", "theorem psubstEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[rho']) = ((rho &[rho']) [x \\<leftarrow> (X #[rho'])]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[rho'] =\n    rho &[rho'] [x \\<leftarrow> X #[rho']]_xs", "unfolding psubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xsa xa.\n        case (rho [x \\<leftarrow> X]_xs) xsa xa of\n        None \\<Rightarrow> rho' xsa xa\n        | Some X \\<Rightarrow> Some X #[rho']) =\n    \\<lambda>xs x.\n       case rho xs x of None \\<Rightarrow> rho' xs x\n       | Some X \\<Rightarrow> Some X #[rho'] [x \\<leftarrow> X #[rho']]_xs", "by fastforce"], ["", "theorem psubstEnv_updEnv_idEnv:\n\"((idEnv [x \\<leftarrow> X]_xs) &[rho]) = (rho [x \\<leftarrow> (X #[rho])]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv [x \\<leftarrow> X]_xs &[rho] = rho [x \\<leftarrow> X #[rho]]_xs", "by(simp add: psubstEnv_updEnv)"], ["", "theorem substEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[Y / y]_ys) = ((rho &[Y / y]_ys) [x \\<leftarrow> (X #[Y / y]_ys)]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Y / y]_ys =\n    rho &[Y / y]_ys [x \\<leftarrow> X #[Y / y]_ys]_xs", "unfolding substEnv_def subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[idEnv [y \\<leftarrow> Y]_ys] =\n    rho &[idEnv [y \\<leftarrow> Y]_ys] [x \\<leftarrow> X #[idEnv [y \\<leftarrow> Y]_ys]]_xs", "by(rule psubstEnv_updEnv)"], ["", "theorem vsubstEnv_updEnv:\n\"((rho [x \\<leftarrow> X]_xs) &[y1 // y]_ys) = ((rho &[y1 // y]_ys) [x \\<leftarrow> (X #[y1 // y]_ys)]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 // y]_ys =\n    rho &[y1 // y]_ys [x \\<leftarrow> X #[y1 // y]_ys]_xs", "unfolding vsubstEnv_def vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Var ys y1 / y]_ys =\n    rho &[Var ys y1 / y]_ys [x \\<leftarrow> X #[Var ys y1 / y]_ys]_xs", "using substEnv_updEnv"], ["proof (prove)\nusing this:\n  ?rho [?x \\<leftarrow> ?X]_?xs &[?Y / ?y]_?ys =\n  ?rho &[?Y / ?y]_?ys [?x \\<leftarrow> ?X #[?Y / ?y]_?ys]_?xs\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Var ys y1 / y]_ys =\n    rho &[Var ys y1 / y]_ys [x \\<leftarrow> X #[Var ys y1 / y]_ys]_xs", "."], ["", "subsection \\<open>Environment ``get\" versus other operators\\<close>"], ["", "text\\<open>Currently, ``get\" is just function application.  While the next\nproperties are immediate consequences of the definitions, it is worth stating\nthem because of their abstract character (since later, concrete terms\ninferred from abstract terms by a presumptive package, ``get\" will no longer\nbe function application).\\<close>"], ["", "theorem getEnv_ext:\nassumes \"\\<And> xs x. rho xs x = rho' xs x\"\nshows \"rho = rho'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho = rho'", "using assms"], ["proof (prove)\nusing this:\n  rho ?xs90 ?x90 = rho' ?xs90 ?x90\n\ngoal (1 subgoal):\n 1. rho = rho'", "by(simp add: ext)"], ["", "theorem freshEnv_getEnv1[simp]:\n\"\\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk> \\<Longrightarrow> ys \\<noteq> xs \\<or> y \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk>\n    \\<Longrightarrow> ys \\<noteq> xs \\<or> y \\<noteq> x", "unfolding freshEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rho ys y = None \\<and>\n             (\\<forall>ysa. liftAll (fresh ys y) (rho ysa));\n     rho xs x = Some X\\<rbrakk>\n    \\<Longrightarrow> ys \\<noteq> xs \\<or> y \\<noteq> x", "by auto"], ["", "theorem freshEnv_getEnv2[simp]:\n\"\\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk> \\<Longrightarrow> fresh ys y X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>freshEnv ys y rho; rho xs x = Some X\\<rbrakk>\n    \\<Longrightarrow> fresh ys y X", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rho ys y = None \\<and>\n             (\\<forall>ysa i v.\n                 rho ysa i = Some v \\<longrightarrow> fresh ys y v);\n     rho xs x = Some X\\<rbrakk>\n    \\<Longrightarrow> fresh ys y X", "by simp"], ["", "theorem freshEnv_getEnv[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> rho ys y = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y rho \\<Longrightarrow> rho ys y = None", "unfolding freshEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho ys y = None \\<and>\n    (\\<forall>ysa. liftAll (fresh ys y) (rho ysa)) \\<Longrightarrow>\n    rho ys y = None", "by simp"], ["", "theorem getEnv_swapEnv1[simp]:\nassumes \"rho xs (x @xs [z1 \\<and> z2]_zs) = None\"\nshows \"(rho &[z1 \\<and> z2]_zs) xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[z1 \\<and> z2]_zs) xs x = None", "using assms"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = None\n\ngoal (1 subgoal):\n 1. (rho &[z1 \\<and> z2]_zs) xs x = None", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = None\n\ngoal (1 subgoal):\n 1. (case rho xs (x @xs[z1 \\<and> z2]_zs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n    None", "by simp"], ["", "theorem getEnv_swapEnv2[simp]:\nassumes \"rho xs (x @xs [z1 \\<and> z2]_zs) = Some X\"\nshows \"(rho &[z1 \\<and> z2]_zs) xs x = Some (X #[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[z1 \\<and> z2]_zs) xs x = Some (X #[z1 \\<and> z2]_zs)", "using assms"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = Some X\n\ngoal (1 subgoal):\n 1. (rho &[z1 \\<and> z2]_zs) xs x = Some (X #[z1 \\<and> z2]_zs)", "unfolding swapEnv_defs lift_def"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = Some X\n\ngoal (1 subgoal):\n 1. (case rho xs (x @xs[z1 \\<and> z2]_zs) of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (v #[z1 \\<and> z2]_zs)) =\n    Some (X #[z1 \\<and> z2]_zs)", "by simp"], ["", "theorem getEnv_psubstEnv_None[simp]:\nassumes \"rho xs x = None\"\nshows \"(rho &[rho']) xs x = rho' xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] xs x = rho' xs x", "using assms"], ["proof (prove)\nusing this:\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. rho &[rho'] xs x = rho' xs x", "unfolding psubstEnv_def"], ["proof (prove)\nusing this:\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (case rho xs x of None \\<Rightarrow> rho' xs x\n     | Some X \\<Rightarrow> Some X #[rho']) =\n    rho' xs x", "by simp"], ["", "theorem getEnv_psubstEnv_Some[simp]:\nassumes \"rho xs x = Some X\"\nshows \"(rho &[rho']) xs x = Some (X #[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] xs x = Some X #[rho']", "using assms"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. rho &[rho'] xs x = Some X #[rho']", "unfolding psubstEnv_def"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (case rho xs x of None \\<Rightarrow> rho' xs x\n     | Some X \\<Rightarrow> Some X #[rho']) =\n    Some X #[rho']", "by simp"], ["", "theorem getEnv_substEnv1[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = None\"\nshows \"(rho &[Y / y]_ys) xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = None", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = None", "unfolding substEnv_def2"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (case rho xs x of\n     None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n     | Some X \\<Rightarrow> Some (X #[Y / y]_ys)) =\n    None", "by auto"], ["", "theorem getEnv_substEnv2[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = Some X\"\nshows \"(rho &[Y / y]_ys) xs x = Some (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = Some (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = Some (X #[Y / y]_ys)", "unfolding substEnv_def2"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (case rho xs x of\n     None \\<Rightarrow> if xs = ys \\<and> x = y then Some Y else None\n     | Some X \\<Rightarrow> Some (X #[Y / y]_ys)) =\n    Some (X #[Y / y]_ys)", "by auto"], ["", "theorem getEnv_substEnv3[simp]:\n\"\\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n \\<Longrightarrow> (rho &[Y / y]_ys) xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n    \\<Longrightarrow> (rho &[Y / y]_ys) xs x = None", "using getEnv_substEnv1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ys \\<noteq> ?xs \\<or> ?y \\<noteq> ?x;\n   ?rho ?xs ?x = None\\<rbrakk>\n  \\<Longrightarrow> (?rho &[?Y / ?y]_?ys) ?xs ?x = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n    \\<Longrightarrow> (rho &[Y / y]_ys) xs x = None", "by auto"], ["", "theorem getEnv_substEnv4[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> (rho &[Y / y]_ys) ys y = Some Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y rho \\<Longrightarrow> (rho &[Y / y]_ys) ys y = Some Y", "unfolding substEnv_psubstEnv_idEnv"], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y rho \\<Longrightarrow>\n    rho &[idEnv [y \\<leftarrow> Y]_ys] ys y = Some Y", "by simp"], ["", "theorem getEnv_vsubstEnv1[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = None\"\nshows \"(rho &[y1 // y]_ys) xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[y1 // y]_ys) xs x = None", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (rho &[y1 // y]_ys) xs x = None", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. (rho &[Var ys y1 / y]_ys) xs x = None", "by auto"], ["", "theorem getEnv_vsubstEnv2[simp]:\nassumes \"ys \\<noteq> xs \\<or> y \\<noteq> x\" and \"rho xs x = Some X\"\nshows \"(rho &[y1 // y]_ys) xs x = Some (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[y1 // y]_ys) xs x = Some (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (rho &[y1 // y]_ys) xs x = Some (X #[y1 // y]_ys)", "unfolding vsubstEnv_def vsubst_def"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs \\<or> y \\<noteq> x\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. (rho &[Var ys y1 / y]_ys) xs x = Some (X #[Var ys y1 / y]_ys)", "by auto"], ["", "theorem getEnv_vsubstEnv3[simp]:\n\"\\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n \\<Longrightarrow> (rho &[z // y]_ys) xs x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n    \\<Longrightarrow> (rho &[z // y]_ys) xs x = None", "using getEnv_vsubstEnv1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ys \\<noteq> ?xs \\<or> ?y \\<noteq> ?x;\n   ?rho ?xs ?x = None\\<rbrakk>\n  \\<Longrightarrow> (?rho &[?y1.0 // ?y]_?ys) ?xs ?x = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys \\<noteq> xs \\<or> y \\<noteq> x; freshEnv xs x rho\\<rbrakk>\n    \\<Longrightarrow> (rho &[z // y]_ys) xs x = None", "by auto"], ["", "theorem getEnv_vsubstEnv4[simp]:\n\"freshEnv ys y rho \\<Longrightarrow> (rho &[z // y]_ys) ys y = Some (Var ys z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y rho \\<Longrightarrow>\n    (rho &[z // y]_ys) ys y = Some (Var ys z)", "unfolding vsubstEnv_psubstEnv_idEnv"], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv ys y rho \\<Longrightarrow>\n    rho &[idEnv [y \\<leftarrow> Var ys z]_ys] ys y = Some (Var ys z)", "by simp"], ["", "subsection \\<open>Substitution versus other operators\\<close>"], ["", "definition freshImEnvAt ::\n\"'varSort \\<Rightarrow> 'var \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)env \\<Rightarrow> 'varSort \\<Rightarrow> 'var \\<Rightarrow> bool\"\nwhere\n\"freshImEnvAt xs x rho ys y ==\n rho ys y = None \\<and> (ys \\<noteq> xs \\<or> y \\<noteq> x) \\<or>\n (\\<exists> Y. rho ys y = Some Y \\<and> fresh xs x Y)\""], ["", "lemma freshAll_psubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and x\nassumes goodP: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n     fresh zs z (X #[rho]) =\n     (\\<forall> ys. \\<forall> y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)))\n \\<and>\n (goodAbs A \\<longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n     freshAbs zs z (A $[rho]) =\n     (\\<forall> ys. \\<forall> y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     z \\<in> varsOf P \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         fresh zs z X #[rho] =\n         (\\<forall>ys y.\n             fresh ys y X \\<or> freshImEnvAt zs z rho ys y))) \\<and>\n    (goodAbs A \\<longrightarrow>\n     z \\<in> varsOf P \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         freshAbs zs z A $[rho] =\n         (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)))", "proof(induction rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z Var xs x #[rho] =\n           (\\<forall>ys y.\n               fresh ys y (Var xs x) \\<or> freshImEnvAt zs z rho ys y))\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "case Par"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z Var xs x #[rho] =\n           (\\<forall>ys y.\n               fresh ys y (Var xs x) \\<or> freshImEnvAt zs z rho ys y))\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodPar P", "using goodP"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. goodPar P", "by simp"], ["proof (state)\nthis:\n  goodPar P\n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z Var xs x #[rho] =\n           (\\<forall>ys y.\n               fresh ys y (Var xs x) \\<or> freshImEnvAt zs z rho ys y))\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z Var xs x #[rho] =\n           (\\<forall>ys y.\n               fresh ys y (Var xs x) \\<or> freshImEnvAt zs z rho ys y))\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "case (Var ys y)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z Var xs x #[rho] =\n           (\\<forall>ys y.\n               fresh ys y (Var xs x) \\<or> freshImEnvAt zs z rho ys y))\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> varsOf P \\<longrightarrow>\n    (\\<forall>rho\\<in>envsOf P.\n        fresh zs z Var ys y #[rho] =\n        (\\<forall>ysa ya.\n            fresh ysa ya (Var ys y) \\<or> freshImEnvAt zs z rho ysa ya))", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Var ys y #[rho] =\n                         (\\<forall>ysa ya.\n                             fresh ysa ya (Var ys y) \\<or>\n                             freshImEnvAt zs z rho ysa ya)", "fix rho"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Var ys y #[rho] =\n                         (\\<forall>ysa ya.\n                             fresh ysa ya (Var ys y) \\<or>\n                             freshImEnvAt zs z rho ysa ya)", "assume r: \"rho \\<in> envsOf P\""], ["proof (state)\nthis:\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Var ys y #[rho] =\n                         (\\<forall>ysa ya.\n                             fresh ysa ya (Var ys y) \\<or>\n                             freshImEnvAt zs z rho ysa ya)", "hence g: \"goodEnv rho\""], ["proof (prove)\nusing this:\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. goodEnv rho", "using goodP"], ["proof (prove)\nusing this:\n  rho \\<in> envsOf P\n  goodPar P\n\ngoal (1 subgoal):\n 1. goodEnv rho", "by simp"], ["proof (state)\nthis:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Var ys y #[rho] =\n                         (\\<forall>ysa ya.\n                             fresh ysa ya (Var ys y) \\<or>\n                             freshImEnvAt zs z rho ysa ya)", "thus \"fresh zs z (psubst rho (Var ys y)) = \n     (\\<forall>ysa ya. fresh ysa ya (Var ys y) \\<or> freshImEnvAt zs z rho ysa ya)\""], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. fresh zs z Var ys y #[rho] =\n    (\\<forall>ysa ya.\n        fresh ysa ya (Var ys y) \\<or> freshImEnvAt zs z rho ysa ya)", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. fresh zs z Var ys y #[rho] =\n    (\\<forall>ysa ya.\n        fresh ysa ya (Var ys y) \\<or>\n        rho ysa ya = None \\<and> (ysa \\<noteq> zs \\<or> ya \\<noteq> z) \\<or>\n        (\\<exists>Y. rho ysa ya = Some Y \\<and> fresh zs z Y))", "by(cases \"ys = zs \\<and> y = z\", (cases \"rho ys y\", auto)+)"], ["proof (state)\nthis:\n  fresh zs z Var ys y #[rho] =\n  (\\<forall>ysa ya.\n      fresh ysa ya (Var ys y) \\<or> freshImEnvAt zs z rho ysa ya)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      fresh zs z Var ys y #[rho] =\n      (\\<forall>ysa ya.\n          fresh ysa ya (Var ys y) \\<or> freshImEnvAt zs z rho ysa ya))\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z a #[rho] =\n           (\\<forall>ys y. fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n   inp\n  liftAll\n   (\\<lambda>a.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           freshAbs zs z a $[rho] =\n           (\\<forall>ys y.\n               freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 fresh zs z a #[rho] =\n                 (\\<forall>ys y.\n                     fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         inp;\n        liftAll\n         (\\<lambda>a.\n             z \\<in> varsOf P \\<longrightarrow>\n             (\\<forall>rho\\<in>envsOf P.\n                 freshAbs zs z a $[rho] =\n                 (\\<forall>ys y.\n                     freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n         binp\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             fresh zs z Op delta inp binp #[rho] =\n                             (\\<forall>ys y.\n                                 fresh ys y (Op delta inp binp) \\<or>\n                                 freshImEnvAt zs z rho ys y))\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> varsOf P \\<longrightarrow>\n    (\\<forall>rho\\<in>envsOf P.\n        fresh zs z Op delta inp binp #[rho] =\n        (\\<forall>ys y.\n            fresh ys y (Op delta inp binp) \\<or>\n            freshImEnvAt zs z rho ys y))", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "fix rho"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "assume P: \"z \\<in> varsOf P\" \"rho \\<in> envsOf P\""], ["proof (state)\nthis:\n  z \\<in> varsOf P\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "let ?L1 = \"liftAll (fresh zs z \\<circ> psubst rho) inp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "let ?L2 = \"liftAll (freshAbs zs z \\<circ> psubstAbs rho) binp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "let ?R1 = \"%ys y. liftAll (fresh ys y) inp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "let ?R2 = \"%ys y. liftAll (freshAbs ys y) binp\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "let ?R3 = \"%ys y. freshImEnvAt zs z rho ys y\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "have \"(?L1 \\<and> ?L2) = (\\<forall>ys y. ?R1 ys y \\<and> ?R2 ys y \\<or> ?R3 ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (liftAll (fresh zs z \\<circ> psubst rho) inp \\<and>\n     liftAll (freshAbs zs z \\<circ> psubstAbs rho) binp) =\n    (\\<forall>ys y.\n        liftAll (fresh ys y) inp \\<and> liftAll (freshAbs ys y) binp \\<or>\n        freshImEnvAt zs z rho ys y)", "using Op.IH P"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>a.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           fresh zs z a #[rho] =\n           (\\<forall>ys y. fresh ys y a \\<or> freshImEnvAt zs z rho ys y)))\n   inp\n  liftAll\n   (\\<lambda>a.\n       z \\<in> varsOf P \\<longrightarrow>\n       (\\<forall>rho\\<in>envsOf P.\n           freshAbs zs z a $[rho] =\n           (\\<forall>ys y.\n               freshAbs ys y a \\<or> freshImEnvAt zs z rho ys y)))\n   binp\n  z \\<in> varsOf P\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. (liftAll (fresh zs z \\<circ> psubst rho) inp \\<and>\n     liftAll (freshAbs zs z \\<circ> psubstAbs rho) binp) =\n    (\\<forall>ys y.\n        liftAll (fresh ys y) inp \\<and> liftAll (freshAbs ys y) binp \\<or>\n        freshImEnvAt zs z rho ys y)", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     z \\<in> varsOf P \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         fresh zs z v #[rho] =\n         (\\<forall>ys y. fresh ys y v \\<or> freshImEnvAt zs z rho ys y))\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     z \\<in> varsOf P \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         freshAbs zs z v $[rho] =\n         (\\<forall>ys y. freshAbs ys y v \\<or> freshImEnvAt zs z rho ys y))\n  z \\<in> varsOf P\n  rho \\<in> envsOf P\n\ngoal (1 subgoal):\n 1. ((\\<forall>i v.\n         inp i = Some v \\<longrightarrow>\n         (fresh zs z \\<circ> psubst rho) v) \\<and>\n     (\\<forall>i v.\n         binp i = Some v \\<longrightarrow>\n         (freshAbs zs z \\<circ> psubstAbs rho) v)) =\n    (\\<forall>ys y.\n        (\\<forall>i v. inp i = Some v \\<longrightarrow> fresh ys y v) \\<and>\n        (\\<forall>i v.\n            binp i = Some v \\<longrightarrow> freshAbs ys y v) \\<or>\n        freshImEnvAt zs z rho ys y)", "by simp blast"], ["proof (state)\nthis:\n  (liftAll (fresh zs z \\<circ> psubst rho) inp \\<and>\n   liftAll (freshAbs zs z \\<circ> psubstAbs rho) binp) =\n  (\\<forall>ys y.\n      liftAll (fresh ys y) inp \\<and> liftAll (freshAbs ys y) binp \\<or>\n      freshImEnvAt zs z rho ys y)\n\ngoal (1 subgoal):\n 1. \\<And>rho.\n       \\<lbrakk>z \\<in> varsOf P; rho \\<in> envsOf P\\<rbrakk>\n       \\<Longrightarrow> fresh zs z Op delta inp binp #[rho] =\n                         (\\<forall>ys y.\n                             fresh ys y (Op delta inp binp) \\<or>\n                             freshImEnvAt zs z rho ys y)", "thus \"fresh zs z ((Op delta inp binp) #[rho]) =\n           (\\<forall>ys y. fresh ys y (Op delta inp binp) \\<or> freshImEnvAt zs z rho ys y)\""], ["proof (prove)\nusing this:\n  (liftAll (fresh zs z \\<circ> psubst rho) inp \\<and>\n   liftAll (freshAbs zs z \\<circ> psubstAbs rho) binp) =\n  (\\<forall>ys y.\n      liftAll (fresh ys y) inp \\<and> liftAll (freshAbs ys y) binp \\<or>\n      freshImEnvAt zs z rho ys y)\n\ngoal (1 subgoal):\n 1. fresh zs z Op delta inp binp #[rho] =\n    (\\<forall>ys y.\n        fresh ys y (Op delta inp binp) \\<or> freshImEnvAt zs z rho ys y)", "by (metis (no_types, lifting) Op.hyps(1) Op.hyps(2) P(2) envsOf_preserves_good freshBinp_def freshInp_def fresh_Op_simp goodP liftAll_lift_comp psubstBinp_def psubstBinp_preserves_good \n     psubstInp_def psubstInp_preserves_good psubst_Op_simp)"], ["proof (state)\nthis:\n  fresh zs z Op delta inp binp #[rho] =\n  (\\<forall>ys y.\n      fresh ys y (Op delta inp binp) \\<or> freshImEnvAt zs z rho ys y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      fresh zs z Op delta inp binp #[rho] =\n      (\\<forall>ys y.\n          fresh ys y (Op delta inp binp) \\<or> freshImEnvAt zs z rho ys y))\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      fresh zs z X #[rho] =\n      (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        z \\<in> varsOf P \\<longrightarrow>\n        (\\<forall>rho\\<in>envsOf P.\n            fresh zs z X #[rho] =\n            (\\<forall>ys y.\n                fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\\<rbrakk>\n       \\<Longrightarrow> z \\<in> varsOf P \\<longrightarrow>\n                         (\\<forall>rho\\<in>envsOf P.\n                             freshAbs zs z Abs xs x X $[rho] =\n                             (\\<forall>ys y.\n                                 freshAbs ys y (Abs xs x X) \\<or>\n                                 freshImEnvAt zs z rho ys y))", "thus ?case"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      fresh zs z X #[rho] =\n      (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\n\ngoal (1 subgoal):\n 1. z \\<in> varsOf P \\<longrightarrow>\n    (\\<forall>rho\\<in>envsOf P.\n        freshAbs zs z Abs xs x X $[rho] =\n        (\\<forall>ys y.\n            freshAbs ys y (Abs xs x X) \\<or> freshImEnvAt zs z rho ys y))", "using goodP"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      fresh zs z X #[rho] =\n      (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y))\n  goodPar P\n\ngoal (1 subgoal):\n 1. z \\<in> varsOf P \\<longrightarrow>\n    (\\<forall>rho\\<in>envsOf P.\n        freshAbs zs z Abs xs x X $[rho] =\n        (\\<forall>ys y.\n            freshAbs ys y (Abs xs x X) \\<or> freshImEnvAt zs z rho ys y))", "by simp (metis (full_types) freshEnv_def freshImEnvAt_def)"], ["proof (state)\nthis:\n  z \\<in> varsOf P \\<longrightarrow>\n  (\\<forall>rho\\<in>envsOf P.\n      freshAbs zs z Abs xs x X $[rho] =\n      (\\<forall>ys y.\n          freshAbs ys y (Abs xs x X) \\<or> freshImEnvAt zs z rho ys y))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary fresh_psubst:\nassumes \"good X\" and \"goodEnv rho\"\nshows\n\"fresh zs z (X #[rho]) =\n (\\<forall> ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho] =\n    (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)", "using assms freshAll_psubstAll[of \"Par [z] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodPar (Par [z] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       fresh ?zs ?z ?X #[rho] =\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> freshImEnvAt ?zs ?z rho ys y))) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       freshAbs ?zs ?z ?A $[rho] =\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> freshImEnvAt ?zs ?z rho ys y)))\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho] =\n    (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  Ball (termsOf (Par [z] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [z] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [z] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       fresh ?zs ?z ?X #[rho] =\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> freshImEnvAt ?zs ?z rho ys y))) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       freshAbs ?zs ?z ?A $[rho] =\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> freshImEnvAt ?zs ?z rho ys y)))\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho] =\n    (\\<forall>ys y. fresh ys y X \\<or> freshImEnvAt zs z rho ys y)", "by simp"], ["", "corollary fresh_psubst_E1:\nassumes \"good X\" and \"goodEnv rho\"\nand \"rho ys y = None\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "using assms fresh_psubst"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho ys y = None\n  fresh zs z X #[rho]\n  \\<lbrakk>good ?X; goodEnv ?rho\\<rbrakk>\n  \\<Longrightarrow> fresh ?zs ?z ?X #[?rho] =\n                    (\\<forall>ys y.\n                        fresh ys y ?X \\<or> freshImEnvAt ?zs ?z ?rho ys y)\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho ys y = None\n  fresh zs z X #[rho]\n  \\<lbrakk>good ?X; goodEnv ?rho\\<rbrakk>\n  \\<Longrightarrow> fresh ?zs ?z ?X #[?rho] =\n                    (\\<forall>ys y.\n                        fresh ys y ?X \\<or>\n                        ?rho ys y = None \\<and>\n                        (ys \\<noteq> ?zs \\<or> y \\<noteq> ?z) \\<or>\n                        (\\<exists>Y.\n                            ?rho ys y = Some Y \\<and> fresh ?zs ?z Y))\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "by fastforce"], ["", "corollary fresh_psubst_E2:\nassumes \"good X\" and \"goodEnv rho\"\nand \"rho ys y = Some Y\" and \"fresh zs z (X #[rho])\"\nshows \"fresh ys y X \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "using assms fresh_psubst[of X rho]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho ys y = Some Y\n  fresh zs z X #[rho]\n  \\<lbrakk>good X; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> fresh ?zs ?z X #[rho] =\n                    (\\<forall>ys y.\n                        fresh ys y X \\<or> freshImEnvAt ?zs ?z rho ys y)\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho ys y = Some Y\n  fresh zs z X #[rho]\n  \\<lbrakk>good X; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> fresh ?zs ?z X #[rho] =\n                    (\\<forall>ys y.\n                        fresh ys y X \\<or>\n                        rho ys y = None \\<and>\n                        (ys \\<noteq> ?zs \\<or> y \\<noteq> ?z) \\<or>\n                        (\\<exists>Y.\n                            rho ys y = Some Y \\<and> fresh ?zs ?z Y))\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "by fastforce"], ["", "corollary fresh_psubst_I1:\nassumes \"good X\" and \"goodEnv rho\"\nand \"fresh zs z X\" and \"freshEnv zs z rho\"\nshows \"fresh zs z (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  fresh zs z X\n  freshEnv zs z rho\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "apply(simp add: fresh_psubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X; goodEnv rho; fresh zs z X; freshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y.\n                         fresh ys y X \\<or> freshImEnvAt zs z rho ys y", "unfolding freshEnv_def liftAll_def freshImEnvAt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X; goodEnv rho; fresh zs z X;\n     rho zs z = None \\<and>\n     (\\<forall>ys i v.\n         rho ys i = Some v \\<longrightarrow> fresh zs z v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y.\n                         fresh ys y X \\<or>\n                         rho ys y = None \\<and>\n                         (ys \\<noteq> zs \\<or> y \\<noteq> z) \\<or>\n                         (\\<exists>Y. rho ys y = Some Y \\<and> fresh zs z Y)", "by auto"], ["", "corollary psubstEnv_preserves_freshEnv:\nassumes good: \"goodEnv rho\"  \"goodEnv rho'\"\nand fresh: \"freshEnv zs z rho\"  \"freshEnv zs z rho'\"\nshows \"freshEnv zs z (rho &[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z rho &[rho']", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  freshEnv zs z rho\n  freshEnv zs z rho'\n\ngoal (1 subgoal):\n 1. freshEnv zs z rho &[rho']", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  rho zs z = None \\<and>\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> fresh zs z v)\n  rho' zs z = None \\<and>\n  (\\<forall>ys i v. rho' ys i = Some v \\<longrightarrow> fresh zs z v)\n\ngoal (1 subgoal):\n 1. rho &[rho'] zs z = None \\<and>\n    (\\<forall>ys i v.\n        rho &[rho'] ys i = Some v \\<longrightarrow> fresh zs z v)", "by simp (smt Var_preserves_good fresh(2) fresh_psubst_I1 option.case_eq_if \noption.exhaust_sel option.sel psubstEnv_def psubst_Var_simp2 psubst_preserves_good)"], ["", "corollary fresh_psubst_I:\nassumes \"good X\" and \"goodEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> fresh zs z X\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> fresh ys y X \\<or> fresh zs z Y\"\nshows \"fresh zs z (X #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho zs z = None \\<Longrightarrow> fresh zs z X\n  rho ?ys91 ?y91 = Some ?Y91 \\<Longrightarrow>\n  fresh ?ys91 ?y91 X \\<or> fresh zs z ?Y91\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  rho zs z = None \\<Longrightarrow> fresh zs z X\n  rho ?ys91 ?y91 = Some ?Y91 \\<Longrightarrow>\n  fresh ?ys91 ?y91 X \\<or> fresh zs z ?Y91\n\ngoal (1 subgoal):\n 1. fresh zs z X #[rho]", "by (simp add: fresh_psubst) (metis freshImEnvAt_def not_None_eq)"], ["", "lemma fresh_subst:\nassumes \"good X\" and \"good Y\"\nshows \"fresh zs z (X #[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> fresh zs z Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> fresh zs z Y))", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> fresh zs z Y))", "unfolding subst_def freshImEnvAt_def"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. fresh zs z X #[idEnv [y \\<leftarrow> Y]_ys] =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> fresh zs z Y))", "by (simp add: fresh_psubst) \n(metis (no_types, lifting) freshImEnvAt_def fresh_psubst fresh_psubst_E2 \ngetEnv_updEnv_idEnv idEnv_preserves_good option.simps(3) updEnv_preserves_good)"], ["", "lemma fresh_vsubst:\nassumes \"good X\"\nshows \"fresh zs z (X #[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> fresh zs z X) \\<and> (fresh ys y X \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[Var ys y1 / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[Var ys y1 / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> fresh zs z X) \\<and>\n     (fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "by(auto simp: fresh_subst)"], ["", "lemma subst_preserves_fresh:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z X\" and \"fresh zs z Y\"\nshows \"fresh zs z (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh zs z X\n  fresh zs z Y\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[Y / y]_ys)", "by(simp add: fresh_subst)"], ["", "lemma substEnv_preserves_freshEnv_aux:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand fresh_rho: \"freshEnv zs z rho\" and fresh_Y: \"fresh zs z Y\" and diff: \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  freshEnv zs z rho\n  fresh zs z Y\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  rho zs z = None \\<and>\n  (\\<forall>ys i v. rho ys i = Some v \\<longrightarrow> fresh zs z v)\n  fresh zs z Y\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) zs z = None \\<and>\n    (\\<forall>ysa i v.\n        (rho &[Y / y]_ys) ysa i = Some v \\<longrightarrow> fresh zs z v)", "by (simp add: option.case_eq_if substEnv_def2 subst_preserves_fresh)"], ["", "lemma substEnv_preserves_freshEnv:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand fresh_rho: \"freshEnv zs z rho\" and fresh_Y: \"fresh zs z Y\" and diff: \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshEnv zs z (rho &[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  freshEnv zs z rho\n  fresh zs z Y\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Y / y]_ys)", "by(simp add: substEnv_preserves_freshEnv_aux)"], ["", "lemma vsubst_preserves_fresh:\nassumes \"good X\"\nand \"fresh zs z X\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"fresh zs z (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh zs z X\n  zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. fresh zs z (X #[y1 // y]_ys)", "by(simp add: fresh_vsubst)"], ["", "lemma vsubstEnv_preserves_freshEnv:\nassumes rho: \"goodEnv rho\"\nand fresh_rho: \"freshEnv zs z rho\" and diff: \"zs \\<noteq> ys \\<or> z \\<notin> {y,y1}\"\nshows \"freshEnv zs z (rho &[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  freshEnv zs z rho\n  zs \\<noteq> ys \\<or> z \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[y1 // y]_ys)", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  freshEnv zs z rho\n  zs \\<noteq> ys \\<or> z \\<notin> {y, y1}\n\ngoal (1 subgoal):\n 1. freshEnv zs z (rho &[Var ys y1 / y]_ys)", "by(simp add: substEnv_preserves_freshEnv)"], ["", "lemma fresh_fresh_subst[simp]:\nassumes \"good Y\" and \"good X\"\nand \"fresh ys y Y\"\nshows \"fresh ys y (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y (X #[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  good X\n  fresh ys y Y\n\ngoal (1 subgoal):\n 1. fresh ys y (X #[Y / y]_ys)", "by(simp add: fresh_subst)"], ["", "lemma diff_fresh_vsubst[simp]:\nassumes \"good X\"\nand \"y \\<noteq> y1\"\nshows \"fresh ys y (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y (X #[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. fresh ys y (X #[y1 // y]_ys)", "by(simp add: fresh_vsubst)"], ["", "lemma fresh_subst_E1:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z (X #[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh zs z (X #[Y / y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. fresh zs z X", "by(auto simp add: fresh_subst)"], ["", "lemma fresh_vsubst_E1:\nassumes \"good X\"\nand \"fresh zs z (X #[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"fresh zs z X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh zs z X", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh zs z (X #[y1 // y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. fresh zs z X", "by(auto simp add: fresh_vsubst)"], ["", "lemma fresh_subst_E2:\nassumes \"good X\" and \"good Y\"\nand \"fresh zs z (X #[Y / y]_ys)\"\nshows \"fresh ys y X \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh zs z (X #[Y / y]_ys)\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> fresh zs z Y", "by(simp add: fresh_subst)"], ["", "lemma fresh_vsubst_E2:\nassumes \"good X\"\nand \"fresh zs z (X #[y1 // y]_ys)\"\nshows \"fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh zs z (X #[y1 // y]_ys)\n\ngoal (1 subgoal):\n 1. fresh ys y X \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "by(simp add: fresh_vsubst)"], ["", "lemma psubstAll_cong:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes goodP: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho rho'. {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n   (\\<forall> ys. \\<forall> y. fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n               (X #[rho]) = (X #[rho'])))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho rho'. {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n   (\\<forall> ys. \\<forall> y. freshAbs ys y A \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n               (A $[rho]) = (A $[rho'])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         (\\<forall>ys y.\n             fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n         X #[rho] = X #[rho'])) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         (\\<forall>ys y.\n             freshAbs ys y A \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n         A $[rho] = A $[rho']))", "proof(induction rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y (Var xs x) \\<or>\n              rho ys y = rho' ys y) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x #[rho']\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "case Par"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y (Var xs x) \\<or>\n              rho ys y = rho' ys y) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x #[rho']\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. goodPar P", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. goodPar P", "."], ["proof (state)\nthis:\n  goodPar P\n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y (Var xs x) \\<or>\n              rho ys y = rho' ys y) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x #[rho']\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y (Var xs x) \\<or>\n              rho ys y = rho' ys y) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x #[rho']\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y (Var xs x) \\<or>\n              rho ys y = rho' ys y) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x #[rho']\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y (Var xs x) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Var xs x #[rho] = Var xs x #[rho']", "using goodP"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y (Var xs x) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Var xs x #[rho] = Var xs x #[rho']", "by (auto simp: psubst_Var)"], ["proof (state)\nthis:\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y (Var xs x) \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     Var xs x #[rho] = Var xs x #[rho']\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a #[rho] = a #[rho'])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              freshAbs ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a $[rho] = a $[rho'])\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    fresh ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a #[rho] = a #[rho'])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                (\\<forall>ys y.\n                    freshAbs ys y a \\<or>\n                    rho ys y = rho' ys y) \\<longrightarrow>\n                a $[rho] = a $[rho'])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                fresh ys y (Op delta inp binp) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Op delta inp binp #[rho] =\n                            Op delta inp binp #[rho']\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Op delta inp binp #[rho] = Op delta inp binp #[rho']", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "fix rho rho'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "assume envs: \"{rho, rho'} \\<subseteq> envsOf P\""], ["proof (state)\nthis:\n  {rho, rho'} \\<subseteq> envsOf P\n\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "hence goodEnv: \"goodEnv rho \\<and> goodEnv rho'\""], ["proof (prove)\nusing this:\n  {rho, rho'} \\<subseteq> envsOf P\n\ngoal (1 subgoal):\n 1. goodEnv rho \\<and> goodEnv rho'", "using goodP"], ["proof (prove)\nusing this:\n  {rho, rho'} \\<subseteq> envsOf P\n  goodPar P\n\ngoal (1 subgoal):\n 1. goodEnv rho \\<and> goodEnv rho'", "by simp"], ["proof (state)\nthis:\n  goodEnv rho \\<and> goodEnv rho'\n\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "assume \"\\<forall>ys y. fresh ys y (Op delta inp binp) \\<or> rho ys y = rho' ys y\""], ["proof (state)\nthis:\n  \\<forall>ys y. fresh ys y (Op delta inp binp) \\<or> rho ys y = rho' ys y\n\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "hence 1: \"liftAll (\\<lambda> X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y) inp \\<and>\n            liftAll (\\<lambda> A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y) binp\""], ["proof (prove)\nusing this:\n  \\<forall>ys y. fresh ys y (Op delta inp binp) \\<or> rho ys y = rho' ys y\n\ngoal (1 subgoal):\n 1. liftAll\n     (\\<lambda>X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y)\n     inp \\<and>\n    liftAll\n     (\\<lambda>A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y)\n     binp", "using Op"], ["proof (prove)\nusing this:\n  \\<forall>ys y. fresh ys y (Op delta inp binp) \\<or> rho ys y = rho' ys y\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a #[rho] = a #[rho'])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              freshAbs ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a $[rho] = a $[rho'])\n   binp\n\ngoal (1 subgoal):\n 1. liftAll\n     (\\<lambda>X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y)\n     inp \\<and>\n    liftAll\n     (\\<lambda>A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y)\n     binp", "by simp (smt freshBinp_def freshInp_def liftAll_def)"], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y)\n   inp \\<and>\n  liftAll\n   (\\<lambda>A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y)\n   binp\n\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "have \"liftAll (\\<lambda> X. (X #[rho]) = (X #[rho'])) inp \\<and>\n          liftAll (\\<lambda> A. (A $[rho]) = (A $[rho'])) binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>X. X #[rho] = X #[rho']) inp \\<and>\n    liftAll (\\<lambda>A. A $[rho] = A $[rho']) binp", "using Op.IH 1 envs"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a #[rho] = a #[rho'])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              freshAbs ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a $[rho] = a $[rho'])\n   binp\n  liftAll\n   (\\<lambda>X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y)\n   inp \\<and>\n  liftAll\n   (\\<lambda>A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y)\n   binp\n  {rho, rho'} \\<subseteq> envsOf P\n\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>X. X #[rho] = X #[rho']) inp \\<and>\n    liftAll (\\<lambda>A. A $[rho] = A $[rho']) binp", "by (auto simp: liftAll_def)"], ["proof (state)\nthis:\n  liftAll (\\<lambda>X. X #[rho] = X #[rho']) inp \\<and>\n  liftAll (\\<lambda>A. A $[rho] = A $[rho']) binp\n\ngoal (1 subgoal):\n 1. \\<And>rho rho'.\n       \\<lbrakk>{rho, rho'} \\<subseteq> envsOf P;\n        \\<forall>ys y.\n           fresh ys y (Op delta inp binp) \\<or>\n           rho ys y = rho' ys y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp #[rho] =\n                         Op delta inp binp #[rho']", "thus \"(Op delta inp binp) #[rho] = (Op delta inp binp) #[rho']\""], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>X. X #[rho] = X #[rho']) inp \\<and>\n  liftAll (\\<lambda>A. A $[rho] = A $[rho']) binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp binp #[rho']", "using Op.IH 1"], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>X. X #[rho] = X #[rho']) inp \\<and>\n  liftAll (\\<lambda>A. A $[rho] = A $[rho']) binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              fresh ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a #[rho] = a #[rho'])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          (\\<forall>ys y.\n              freshAbs ys y a \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n          a $[rho] = a $[rho'])\n   binp\n  liftAll\n   (\\<lambda>X. \\<forall>ys y. fresh ys y X \\<or> rho ys y = rho' ys y)\n   inp \\<and>\n  liftAll\n   (\\<lambda>A. \\<forall>ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y)\n   binp\n\ngoal (1 subgoal):\n 1. Op delta inp binp #[rho] = Op delta inp binp #[rho']", "by (simp add: Op.hyps goodEnv psubstBinp_def psubstInp_def liftAll_lift_ext)"], ["proof (state)\nthis:\n  Op delta inp binp #[rho] = Op delta inp binp #[rho']\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y (Op delta inp binp) \\<or>\n         rho ys y = rho' ys y) \\<longrightarrow>\n     Op delta inp binp #[rho] = Op delta inp binp #[rho']\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           (\\<forall>ys y.\n               fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n           X #[rho] = X #[rho']\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            (\\<forall>ys y.\n                                freshAbs ys y (Abs xs x X) \\<or>\n                                rho ys y = rho' ys y) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X $[rho']", "thus ?case"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y (Abs xs x X) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Abs xs x X $[rho] = Abs xs x X $[rho']", "using Abs goodP"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y (Abs xs x X) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Abs xs x X $[rho] = Abs xs x X $[rho']", "unfolding freshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow>\n  ?rho91 xs x = None \\<and>\n  (\\<forall>ys i v. ?rho91 ys i = Some v \\<longrightarrow> fresh xs x v)\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow>\n  ?rho91 xs x = None \\<and>\n  (\\<forall>ys i v. ?rho91 ys i = Some v \\<longrightarrow> fresh xs x v)\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         fresh ys y X \\<or> rho ys y = rho' ys y) \\<longrightarrow>\n     X #[rho] = X #[rho']\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y (Abs xs x X) \\<or>\n           rho ys y = rho' ys y) \\<longrightarrow>\n       Abs xs x X $[rho] = Abs xs x X $[rho']", "by simp (metis Abs.hyps(5) envsOf_preserves_good psubstAbs_simp)"], ["proof (state)\nthis:\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     (\\<forall>ys y.\n         freshAbs ys y (Abs xs x X) \\<or>\n         rho ys y = rho' ys y) \\<longrightarrow>\n     Abs xs x X $[rho] = Abs xs x X $[rho']\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary psubst_cong[fundef_cong]:\nassumes \"good X\" and \"goodEnv rho\" and \"goodEnv rho'\"\nand \"\\<And> ys y. fresh ys y X \\<or> rho ys y = rho' ys y\"\nshows \"(X #[rho]) = (X #[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] = X #[rho']", "using assms psubstAll_cong[of \"Par [] [] [] [rho,rho']\"]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodEnv rho'\n  fresh ?ys91 ?y91 X \\<or> rho ?ys91 ?y91 = rho' ?ys91 ?y91\n  goodPar (Par [] [] [] [rho, rho']) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?X #[rhoa] = ?X #[rho'a])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?A $[rhoa] = ?A $[rho'a]))\n\ngoal (1 subgoal):\n 1. X #[rho] = X #[rho']", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodEnv rho'\n  fresh ?ys91 ?y91 X \\<or> rho ?ys91 ?y91 = rho' ?ys91 ?y91\n  Ball (termsOf (Par [] [] [] [rho, rho'])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho, rho'])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho, rho'])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?X #[rhoa] = ?X #[rho'a])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?A $[rhoa] = ?A $[rho'a]))\n\ngoal (1 subgoal):\n 1. X #[rho] = X #[rho']", "by simp"], ["", "(* Note: A congruence principle for ``psubstEnv\" would not hold w.r.t. ``freshEnv\",\nand the one that would hold w.r.t. ``fresh\" would be a mere rephrasing of the\ndefinition of ``psubstEnv\", not worth stating. *)"], ["", "lemma fresh_psubst_updEnv:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nand \"fresh xs x Y\"\nshows \"(Y #[rho [x \\<leftarrow> X]_xs]) = (Y #[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[rho [x \\<leftarrow> X]_xs] = Y #[rho]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  goodEnv rho\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Y #[rho [x \\<leftarrow> X]_xs] = Y #[rho]", "by (auto cong: psubst_cong)"], ["", "lemma psubstAll_ident:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A :: \"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P :: \"('index,'bindex,'varSort,'var,'opSym) Transition_QuasiTerms_Terms.param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n   (\\<forall> zs z. freshEnv zs z rho \\<or> fresh zs z X)\n   \\<longrightarrow> (X #[rho]) = X))\n \\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho \\<in> envsOf P.\n   (\\<forall> zs z. freshEnv zs z rho \\<or> freshAbs zs z A)\n   \\<longrightarrow> (A $[rho]) = A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         (\\<forall>zs z.\n             freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n         X #[rho] = X)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>rho\\<in>envsOf P.\n         (\\<forall>zs z.\n             freshEnv zs z rho \\<or> freshAbs zs z A) \\<longrightarrow>\n         A $[rho] = A))", "proof(induction rule: term_induct_fresh)"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar ?P\n 2. \\<And>xs x.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or>\n              fresh zs z (Var xs x)) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n                a #[rho] = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or>\n                    freshAbs zs z a) \\<longrightarrow>\n                a $[rho] = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                fresh zs z\n                                 (Op delta inp binp)) \\<longrightarrow>\n                            Op delta inp binp #[rho] = Op delta inp binp\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. goodPar ?P\n 2. \\<And>xs x.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or>\n              fresh zs z (Var xs x)) \\<longrightarrow>\n          Var xs x #[rho] = Var xs x\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n                a #[rho] = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or>\n                    freshAbs zs z a) \\<longrightarrow>\n                a $[rho] = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                fresh zs z\n                                 (Op delta inp binp)) \\<longrightarrow>\n                            Op delta inp binp #[rho] = Op delta inp binp\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOf P.\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> fresh zs z (Var xs x)) \\<longrightarrow>\n       Var xs x #[rho] = Var xs x", "by (meson assms freshEnv_def fresh_Var_simp goodPar_def psubst_Var_simp1)"], ["proof (state)\nthis:\n  \\<forall>rho\\<in>envsOf P.\n     (\\<forall>zs z.\n         freshEnv zs z rho \\<or> fresh zs z (Var xs x)) \\<longrightarrow>\n     Var xs x #[rho] = Var xs x\n\ngoal (3 subgoals):\n 1. goodPar ?P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n                a #[rho] = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or>\n                    freshAbs zs z a) \\<longrightarrow>\n                a $[rho] = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                fresh zs z\n                                 (Op delta inp binp)) \\<longrightarrow>\n                            Op delta inp binp #[rho] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. goodPar ?P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n                a #[rho] = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or>\n                    freshAbs zs z a) \\<longrightarrow>\n                a $[rho] = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                fresh zs z\n                                 (Op delta inp binp)) \\<longrightarrow>\n                            Op delta inp binp #[rho] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n          a #[rho] = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> freshAbs zs z a) \\<longrightarrow>\n          a $[rho] = a)\n   binp\n\ngoal (3 subgoals):\n 1. goodPar ?P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n                a #[rho] = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho\\<in>envsOf P.\n                (\\<forall>zs z.\n                    freshEnv zs z rho \\<or>\n                    freshAbs zs z a) \\<longrightarrow>\n                a $[rho] = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                fresh zs z\n                                 (Op delta inp binp)) \\<longrightarrow>\n                            Op delta inp binp #[rho] = Op delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "then"], ["proof (chain)\npicking this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n          a #[rho] = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> freshAbs zs z a) \\<longrightarrow>\n          a $[rho] = a)\n   binp", "show ?case"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> fresh zs z a) \\<longrightarrow>\n          a #[rho] = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho\\<in>envsOf P.\n          (\\<forall>zs z.\n              freshEnv zs z rho \\<or> freshAbs zs z a) \\<longrightarrow>\n          a $[rho] = a)\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>envsOf P.\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or>\n           fresh zs z (Op delta inp binp)) \\<longrightarrow>\n       Op delta inp binp #[rho] = Op delta inp binp", "by (metis (no_types,lifting) Op_preserves_good assms envsOf_preserves_good \n   freshEnv_getEnv idEnv_def idEnv_preserves_good psubst_cong psubst_idEnv)"], ["proof (state)\nthis:\n  \\<forall>rho\\<in>envsOf P.\n     (\\<forall>zs z.\n         freshEnv zs z rho \\<or>\n         fresh zs z (Op delta inp binp)) \\<longrightarrow>\n     Op delta inp binp #[rho] = Op delta inp binp\n\ngoal (2 subgoals):\n 1. goodPar ?P\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf ?P;\n        \\<And>Y. Y \\<in> termsOf ?P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf ?P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf ?P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho\\<in>envsOf P.\n           (\\<forall>zs z.\n               freshEnv zs z rho \\<or> fresh zs z X) \\<longrightarrow>\n           X #[rho] = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho\\<in>envsOf P.\n                            (\\<forall>zs z.\n                                freshEnv zs z rho \\<or>\n                                freshAbs zs z\n                                 (Abs xs x X)) \\<longrightarrow>\n                            Abs xs x X $[rho] = Abs xs x X", "qed(insert P, fastforce+)"], ["", "corollary freshEnv_psubst_ident[simp]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)term\"\nassumes \"good X\" and \"goodEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> fresh zs z X\"\nshows \"(X #[rho]) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] = X", "using assms psubstAll_ident[of \"Par [] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  freshEnv ?zs91 ?z91 rho \\<or> fresh ?zs91 ?z91 X\n  goodPar (Par [] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> fresh zs z ?X) \\<longrightarrow>\n       ?X #[rho] = ?X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> freshAbs zs z ?A) \\<longrightarrow>\n       ?A $[rho] = ?A))\n\ngoal (1 subgoal):\n 1. X #[rho] = X", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  freshEnv ?zs91 ?z91 rho \\<or> fresh ?zs91 ?z91 X\n  Ball (termsOf (Par [] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> fresh zs z ?X) \\<longrightarrow>\n       ?X #[rho] = ?X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> freshAbs zs z ?A) \\<longrightarrow>\n       ?A $[rho] = ?A))\n\ngoal (1 subgoal):\n 1. X #[rho] = X", "by simp"], ["", "lemma fresh_subst_ident[simp]:\nassumes \"good X\" and \"good Y\" and \"fresh xs x Y\"\nshows \"(Y #[X / x]_xs) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[X / x]_xs = Y", "by (simp add: assms fresh_psubst_updEnv subst_def)"], ["", "corollary substEnv_updEnv_fresh:\nassumes \"good X\" and \"good Y\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[Y / y]_ys) = ((rho &[Y / y]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Y / y]_ys =\n    rho &[Y / y]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[Y / y]_ys =\n    rho &[Y / y]_ys [x \\<leftarrow> X]_xs", "by(simp add: substEnv_updEnv)"], ["", "lemma fresh_substEnv_updEnv[simp]:\nassumes rho: \"goodEnv rho\" and Y: \"good Y\"\nand *: \"freshEnv ys y rho\"\nshows \"(rho &[Y / y]_ys) = (rho [y \\<leftarrow> Y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys = rho [y \\<leftarrow> Y]_ys", "apply (rule getEnv_ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x. (rho &[Y / y]_ys) xs x = (rho [y \\<leftarrow> Y]_ys) xs x", "subgoal for xs x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = (rho [y \\<leftarrow> Y]_ys) xs x", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. (rho &[Y / y]_ys) xs x = (rho [y \\<leftarrow> Y]_ys) xs x", "by (cases \"rho xs x\") auto"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma fresh_vsubst_ident[simp]:\nassumes \"good Y\" and \"fresh xs x Y\"\nshows \"(Y #[x1 // x]_xs) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[x1 // x]_xs = Y", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Y #[x1 // x]_xs = Y", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good Y\n  fresh xs x Y\n\ngoal (1 subgoal):\n 1. Y #[Var xs x1 / x]_xs = Y", "by simp"], ["", "corollary vsubstEnv_updEnv_fresh:\nassumes \"good X\" and \"fresh ys y X\"\nshows \"((rho [x \\<leftarrow> X]_xs) &[y1 // y]_ys) = ((rho &[y1 // y]_ys) [x \\<leftarrow> X]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 // y]_ys =\n    rho &[y1 // y]_ys [x \\<leftarrow> X]_xs", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh ys y X\n\ngoal (1 subgoal):\n 1. rho [x \\<leftarrow> X]_xs &[y1 // y]_ys =\n    rho &[y1 // y]_ys [x \\<leftarrow> X]_xs", "by(simp add: vsubstEnv_updEnv)"], ["", "lemma fresh_vsubstEnv_updEnv[simp]:\nassumes rho: \"goodEnv rho\"\nand *: \"freshEnv ys y rho\"\nshows \"(rho &[y1 // y]_ys) = (rho [y \\<leftarrow> Var ys y1]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys = rho [y \\<leftarrow> Var ys y1]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys = rho [y \\<leftarrow> Var ys y1]_ys", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys = rho [y \\<leftarrow> Var ys y1]_ys", "by simp"], ["", "lemma swapAll_psubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho z1 z2. rho \\<in> envsOf P \\<and> {z1,z2} \\<subseteq> varsOf P \\<longrightarrow>\n                ((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])))\n \\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho z1 z2. rho \\<in> envsOf P \\<and> {z1,z2} \\<subseteq> varsOf P \\<longrightarrow>\n                ((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>rho z1 z2.\n         rho \\<in> envsOf P \\<and>\n         {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n         X #[rho] #[z1 \\<and> z2]_zs =\n         X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>rho z1 z2.\n         rho \\<in> envsOf P \\<and>\n         {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n         A $[rho] $[z1 \\<and> z2]_zs =\n         A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]))", "proof(induction rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          Var xs x #[rho] #[z1 \\<and> z2]_zs =\n          Var xs x #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a #[rho] #[z1 \\<and> z2]_zs =\n                a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a $[rho] $[z1 \\<and> z2]_zs =\n                a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n                            Op delta inp\n                             binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          Var xs x #[rho] #[z1 \\<and> z2]_zs =\n          Var xs x #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a #[rho] #[z1 \\<and> z2]_zs =\n                a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a $[rho] $[z1 \\<and> z2]_zs =\n                a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n                            Op delta inp\n                             binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Var xs x #[rho] #[z1 \\<and> z2]_zs =\n       Var xs x #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Var xs x #[rho] #[z1 \\<and> z2]_zs =\n       Var xs x #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "by simp (smt Var_preserves_good envsOf_preserves_good getEnv_swapEnv1 getEnv_swapEnv2 option.case_eq_if option.exhaust_sel psubst_Var psubst_Var_simp2 swapEnv_preserves_good \n swap_Var_simp swap_involutive2 swap_sym)"], ["proof (state)\nthis:\n  \\<forall>rho z1 z2.\n     rho \\<in> envsOf P \\<and>\n     {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n     Var xs x #[rho] #[z1 \\<and> z2]_zs =\n     Var xs x #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a #[rho] #[z1 \\<and> z2]_zs =\n                a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a $[rho] $[z1 \\<and> z2]_zs =\n                a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n                            Op delta inp\n                             binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a #[rho] #[z1 \\<and> z2]_zs =\n                a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a $[rho] $[z1 \\<and> z2]_zs =\n                a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n                            Op delta inp\n                             binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a #[rho] #[z1 \\<and> z2]_zs =\n          a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a $[rho] $[z1 \\<and> z2]_zs =\n          a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n   binp\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a #[rho] #[z1 \\<and> z2]_zs =\n                a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho z1 z2.\n                rho \\<in> envsOf P \\<and>\n                {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                a $[rho] $[z1 \\<and> z2]_zs =\n                a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n                            Op delta inp\n                             binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "then"], ["proof (chain)\npicking this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a #[rho] #[z1 \\<and> z2]_zs =\n          a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a $[rho] $[z1 \\<and> z2]_zs =\n          a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n   binp", "show ?case"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a #[rho] #[z1 \\<and> z2]_zs =\n          a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a $[rho] $[z1 \\<and> z2]_zs =\n          a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n       Op delta inp binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a #[rho] #[z1 \\<and> z2]_zs =\n          a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a $[rho] $[z1 \\<and> z2]_zs =\n          a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n   binp\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n       Op delta inp binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "unfolding psubstInp_def swapInp_def psubstBinp_def swapBinp_def lift_comp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a #[rho] #[z1 \\<and> z2]_zs =\n          a #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho z1 z2.\n          rho \\<in> envsOf P \\<and>\n          {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n          a $[rho] $[z1 \\<and> z2]_zs =\n          a $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n   binp\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n       Op delta inp binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "unfolding liftAll_def lift_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     (\\<forall>rho z1 z2.\n         rho \\<in> envsOf P \\<and>\n         {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n         v #[rho] #[z1 \\<and> z2]_zs =\n         v #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs])\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     (\\<forall>rho z1 z2.\n         rho \\<in> envsOf P \\<and>\n         {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n         v $[rho] $[z1 \\<and> z2]_zs =\n         v $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs])\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho z1 z2.\n       rho \\<in> envsOf P \\<and>\n       {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n       Op delta inp binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "by simp (auto simp: lift_def psubstInp_def swapInp_def \n  psubstBinp_def swapBinp_def split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>rho z1 z2.\n     rho \\<in> envsOf P \\<and>\n     {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n     Op delta inp binp #[rho] #[z1 \\<and> z2]_zs =\n     Op delta inp binp #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\n\ngoal (2 subgoals):\n 1. goodPar P\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho z1 z2.\n           rho \\<in> envsOf P \\<and>\n           {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n           X #[rho] #[z1 \\<and> z2]_zs =\n           X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho z1 z2.\n                            rho \\<in> envsOf P \\<and>\n                            {z1, z2} \\<subseteq> varsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[z1 \\<and> z2]_zs =\n                            Abs xs x\n                             X $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "qed(insert assms, auto)"], ["", "lemma swap_psubst:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[z1 \\<and> z2]_zs) = ((X #[z1 \\<and> z2]_zs) #[rho &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "using assms swapAll_psubstAll[of \"Par [z1,z2] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodPar (Par [z1, z2] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?X #[rhoa] #[z1a \\<and> z2a]_?zs =\n       ?X #[z1a \\<and> z2a]_?zs #[rhoa &[z1a \\<and> z2a]_?zs])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?A $[rhoa] $[z1a \\<and> z2a]_?zs =\n       ?A $[z1a \\<and> z2a]_?zs $[rhoa &[z1a \\<and> z2a]_?zs]))\n\ngoal (1 subgoal):\n 1. X #[rho] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  Ball (termsOf (Par [z1, z2] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [z1, z2] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [z1, z2] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?X #[rhoa] #[z1a \\<and> z2a]_?zs =\n       ?X #[z1a \\<and> z2a]_?zs #[rhoa &[z1a \\<and> z2a]_?zs])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?A $[rhoa] $[z1a \\<and> z2a]_?zs =\n       ?A $[z1a \\<and> z2a]_?zs $[rhoa &[z1a \\<and> z2a]_?zs]))\n\ngoal (1 subgoal):\n 1. X #[rho] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[rho &[z1 \\<and> z2]_zs]", "by auto"], ["", "lemma swap_subst:\nassumes \"good X\" and \"good Y\"\nshows \"((X #[Y / y]_ys) #[z1 \\<and> z2]_zs) =\n       ((X #[z1 \\<and> z2]_zs) #[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "have 1: \"(idEnv [(y @ys[z1 \\<and> z2]_zs) \\<leftarrow> (Y #[z1 \\<and> z2]_zs)]_ys) =\n           ((idEnv [y \\<leftarrow> Y]_ys) &[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n    idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs", "by(simp add: swapEnv_updEnv)"], ["proof (state)\nthis:\n  idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n  idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "unfolding subst_def 1"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. X #[idEnv [y \\<leftarrow> Y]_ys] #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs]", "by (intro swap_psubst) auto"], ["proof (state)\nthis:\n  X #[Y / y]_ys #[z1 \\<and> z2]_zs =\n  X #[z1 \\<and> z2]_zs #[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_vsubst:\nassumes \"good X\"\nshows \"((X #[y1 // y]_ys) #[z1 \\<and> z2]_zs) =\n       ((X #[z1 \\<and> z2]_zs) #[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[Var ys y1 / y]_ys #[z1 \\<and> z2]_zs =\n    X #[z1 \\<and> z2]_zs #[Var ys\n                            (y1 @ys[z1 \\<and> z2]_zs) / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swap_subst)"], ["", "lemma swapEnv_psubstEnv:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[z1 \\<and> z2]_zs) = ((rho &[z1 \\<and> z2]_zs) &[rho' &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs]", "apply(intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>goodEnv rho; goodEnv rho'\\<rbrakk>\n       \\<Longrightarrow> (rho &[rho'] &[z1 \\<and> z2]_zs) x xa =\n                         rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs] x\n                          xa", "subgoal for xs x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodEnv rho; goodEnv rho'\\<rbrakk>\n    \\<Longrightarrow> (rho &[rho'] &[z1 \\<and> z2]_zs) xs x =\n                      rho &[z1 \\<and> z2]_zs &[rho' &[z1 \\<and> z2]_zs] xs x", "by (cases \"rho xs (x @xs[z1 \\<and> z2]_zs)\")\n   (auto simp: lift_def swapEnv_defs swap_psubst)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma swapEnv_substEnv:\nassumes \"good Y\" and \"goodEnv rho\"\nshows \"((rho &[Y / y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "have 1: \"(idEnv [(y @ys[z1 \\<and> z2]_zs) \\<leftarrow> (Y #[z1 \\<and> z2]_zs)]_ys) =\n           ((idEnv [y \\<leftarrow> Y]_ys) &[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n    idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs", "by(simp add: swapEnv_updEnv)"], ["proof (state)\nthis:\n  idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n  idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "unfolding substEnv_def 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[idEnv [y \\<leftarrow> Y]_ys] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[idEnv [y \\<leftarrow> Y]_ys] &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs]", "by (intro swapEnv_psubstEnv) auto"], ["proof (state)\nthis:\n  rho &[Y / y]_ys &[z1 \\<and> z2]_zs =\n  rho &[z1 \\<and> z2]_zs &[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapEnv_vsubstEnv:\nassumes \"goodEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[z1 \\<and> z2]_zs) =\n       ((rho &[z1 \\<and> z2]_zs) &[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys &[z1 \\<and> z2]_zs =\n    rho &[z1 \\<and> z2]_zs &[Var ys\n                              (y1 @ys[z1 \\<and> z2]_zs) / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapEnv_substEnv)"], ["", "lemma psubstAll_compose:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\"\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> rho rho'. {rho,rho'} \\<subseteq> envsOf P \\<longrightarrow> ((X #[rho]) #[rho']) = (X #[(rho &[rho'])])))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> rho rho'. {rho,rho'} \\<subseteq> envsOf P \\<longrightarrow> ((A $[rho]) $[rho']) = (A $[(rho &[rho'])])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         X #[rho] #[rho'] = X #[rho &[rho']])) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         A $[rho] $[rho'] = A $[rho &[rho']]))", "proof(induction rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          Var xs x #[rho] #[rho'] = Var xs x #[rho &[rho']]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a #[rho] #[rho'] = a #[rho &[rho']])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a $[rho] $[rho'] = a $[rho &[rho']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[rho'] =\n                            Op delta inp binp #[rho &[rho']]\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          Var xs x #[rho] #[rho'] = Var xs x #[rho &[rho']]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a #[rho] #[rho'] = a #[rho &[rho']])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a $[rho] $[rho'] = a $[rho &[rho']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[rho'] =\n                            Op delta inp binp #[rho &[rho']]\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Var xs x #[rho] #[rho'] = Var xs x #[rho &[rho']]", "using assms"], ["proof (prove)\nusing this:\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Var xs x #[rho] #[rho'] = Var xs x #[rho &[rho']]", "by simp (smt envsOf_preserves_good option.case_eq_if option.sel psubstEnv_def \n  psubstEnv_idEnv_id psubstEnv_preserves_good psubst_Var_simp1 psubst_Var_simp2)"], ["proof (state)\nthis:\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     Var xs x #[rho] #[rho'] = Var xs x #[rho &[rho']]\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a #[rho] #[rho'] = a #[rho &[rho']])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a $[rho] $[rho'] = a $[rho &[rho']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[rho'] =\n                            Op delta inp binp #[rho &[rho']]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a #[rho] #[rho'] = a #[rho &[rho']])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a $[rho] $[rho'] = a $[rho &[rho']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[rho'] =\n                            Op delta inp binp #[rho &[rho']]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a #[rho] #[rho'] = a #[rho &[rho']])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a $[rho] $[rho'] = a $[rho &[rho']])\n   binp\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a #[rho] #[rho'] = a #[rho &[rho']])\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>rho rho'.\n                {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n                a $[rho] $[rho'] = a $[rho &[rho']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Op delta inp binp #[rho] #[rho'] =\n                            Op delta inp binp #[rho &[rho']]\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "then"], ["proof (chain)\npicking this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a #[rho] #[rho'] = a #[rho &[rho']])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a $[rho] $[rho'] = a $[rho &[rho']])\n   binp", "show ?case"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a #[rho] #[rho'] = a #[rho &[rho']])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a $[rho] $[rho'] = a $[rho &[rho']])\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[rho'] = Op delta inp binp #[rho &[rho']]", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a #[rho] #[rho'] = a #[rho &[rho']])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a $[rho] $[rho'] = a $[rho &[rho']])\n   binp\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[rho'] = Op delta inp binp #[rho &[rho']]", "unfolding psubstInp_def swapInp_def psubstBinp_def swapBinp_def lift_comp"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a #[rho] #[rho'] = a #[rho &[rho']])\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>rho rho'.\n          {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n          a $[rho] $[rho'] = a $[rho &[rho']])\n   binp\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[rho'] = Op delta inp binp #[rho &[rho']]", "unfolding liftAll_def lift_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         v #[rho] #[rho'] = v #[rho &[rho']])\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     (\\<forall>rho rho'.\n         {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n         v $[rho] $[rho'] = v $[rho &[rho']])\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>rho rho'.\n       {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n       Op delta inp binp #[rho] #[rho'] = Op delta inp binp #[rho &[rho']]", "by simp (auto simp: lift_def psubstInp_def swapInp_def \n  psubstBinp_def swapBinp_def split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>rho rho'.\n     {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n     Op delta inp binp #[rho] #[rho'] = Op delta inp binp #[rho &[rho']]\n\ngoal (2 subgoals):\n 1. goodPar P\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>rho rho'.\n           {rho, rho'} \\<subseteq> envsOf P \\<longrightarrow>\n           X #[rho] #[rho'] = X #[rho &[rho']]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>rho rho'.\n                            {rho, rho'}\n                            \\<subseteq> envsOf P \\<longrightarrow>\n                            Abs xs x X $[rho] $[rho'] =\n                            Abs xs x X $[rho &[rho']]", "qed(insert assms, simp_all add: psubstEnv_preserves_freshEnv)"], ["", "corollary psubst_compose:\nassumes \"good X\" and \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((X #[rho]) #[rho']) = (X #[(rho &[rho'])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[rho'] = X #[rho &[rho']]", "using assms psubstAll_compose[of \"Par [] [] [] [rho, rho']\"]"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodEnv rho'\n  goodPar (Par [] [] [] [rho, rho']) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?X #[rhoa] #[rho'a] = ?X #[rhoa &[rho'a]])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?A $[rhoa] $[rho'a] = ?A $[rhoa &[rho'a]]))\n\ngoal (1 subgoal):\n 1. X #[rho] #[rho'] = X #[rho &[rho']]", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n  goodEnv rho'\n  Ball (termsOf (Par [] [] [] [rho, rho'])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho, rho'])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho, rho'])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?X #[rhoa] #[rho'a] = ?X #[rhoa &[rho'a]])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?A $[rhoa] $[rho'a] = ?A $[rhoa &[rho'a]]))\n\ngoal (1 subgoal):\n 1. X #[rho] #[rho'] = X #[rho &[rho']]", "by auto"], ["", "lemma psubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\" and \"goodEnv rho''\"\nshows \"((rho &[rho']) &[rho'']) = (rho &[(rho' &[rho''])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[rho''] = rho &[rho' &[rho'']]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  goodEnv rho''\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[rho''] = rho &[rho' &[rho'']]", "apply(intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>goodEnv rho; goodEnv rho'; goodEnv rho''\\<rbrakk>\n       \\<Longrightarrow> rho &[rho'] &[rho''] x xa =\n                         rho &[rho' &[rho'']] x xa", "subgoal for xs x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodEnv rho; goodEnv rho'; goodEnv rho''\\<rbrakk>\n    \\<Longrightarrow> rho &[rho'] &[rho''] xs x = rho &[rho' &[rho'']] xs x", "by (cases \"rho xs x\") (auto simp: lift_def psubstEnv_def  psubst_compose)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma psubst_subst_compose:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho [y \\<leftarrow> Y #[rho]]_ys]", "by (simp add: assms psubstEnv_updEnv_idEnv psubst_compose subst_psubst_idEnv)"], ["", "lemma psubstEnv_substEnv_compose:\nassumes \"goodEnv rho\" and \"good Y\" and \"goodEnv rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> (Y #[rho'])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho' [y \\<leftarrow> Y #[rho']]_ys]", "by (simp add: assms psubstEnv_compose psubstEnv_updEnv_idEnv substEnv_def)"], ["", "lemma psubst_vsubst_compose:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[y1 // y]_ys) #[rho]) = (X #[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[rho] = X #[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[rho] = X #[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. X #[Var ys y1 / y]_ys #[rho] =\n    X #[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "by(simp add: psubst_subst_compose)"], ["", "lemma psubstEnv_vsubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[y1 // y]_ys) &[rho']) = (rho &[(rho' [y \\<leftarrow> ((Var ys y1) #[rho'])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[rho'] =\n    rho &[rho' [y \\<leftarrow> Var ys y1 #[rho']]_ys]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[rho'] =\n    rho &[rho' [y \\<leftarrow> Var ys y1 #[rho']]_ys]", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys &[rho'] =\n    rho &[rho' [y \\<leftarrow> Var ys y1 #[rho']]_ys]", "by(simp add: psubstEnv_substEnv_compose)"], ["", "lemma subst_psubst_compose:\nassumes \"good X\" and \"good Y\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[Y / y]_ys) = (X #[(rho &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[Y / y]_ys = X #[rho &[Y / y]_ys]", "unfolding subst_def substEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[idEnv [y \\<leftarrow> Y]_ys] =\n    X #[rho &[idEnv [y \\<leftarrow> Y]_ys]]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. X #[rho] #[idEnv [y \\<leftarrow> Y]_ys] =\n    X #[rho &[idEnv [y \\<leftarrow> Y]_ys]]", "by(simp add: psubst_compose)"], ["", "lemma substEnv_psubstEnv_compose:\nassumes \"goodEnv rho\" and \"good Y\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[Y / y]_ys) = (rho &[(rho' &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[Y / y]_ys = rho &[rho' &[Y / y]_ys]", "unfolding substEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[idEnv [y \\<leftarrow> Y]_ys] =\n    rho &[rho' &[idEnv [y \\<leftarrow> Y]_ys]]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[idEnv [y \\<leftarrow> Y]_ys] =\n    rho &[rho' &[idEnv [y \\<leftarrow> Y]_ys]]", "by(simp add: psubstEnv_compose)"], ["", "lemma psubst_subst_compose_freshEnv:\nassumes \"goodEnv rho\" and \"good X\" and \"good Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((X #[Y / y]_ys) #[rho]) = ((X #[rho]) #[(Y #[rho]) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho] #[Y #[rho] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good X\n  good Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[rho] = X #[rho] #[Y #[rho] / y]_ys", "by (simp add: subst_psubst_compose psubst_subst_compose)"], ["", "lemma psubstEnv_substEnv_compose_freshEnv:\nassumes \"goodEnv rho\" and \"goodEnv rho'\" and \"good Y\"\nassumes \"freshEnv ys y rho'\"\nshows \"((rho &[Y / y]_ys) &[rho']) = ((rho &[rho']) &[(Y #[rho']) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho'] &[Y #[rho'] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n  good Y\n  freshEnv ys y rho'\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[rho'] = rho &[rho'] &[Y #[rho'] / y]_ys", "by (simp add: substEnv_psubstEnv_compose psubstEnv_substEnv_compose)"], ["", "lemma vsubst_psubst_compose:\nassumes \"good X\" and \"goodEnv rho\"\nshows \"((X #[rho]) #[y1 // y]_ys) = (X #[(rho &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[y1 // y]_ys = X #[rho &[y1 // y]_ys]", "unfolding vsubst_def vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[rho] #[Var ys y1 / y]_ys = X #[rho &[Var ys y1 / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. X #[rho] #[Var ys y1 / y]_ys = X #[rho &[Var ys y1 / y]_ys]", "by(simp add: subst_psubst_compose)"], ["", "lemma vsubstEnv_psubstEnv_compose:\nassumes \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((rho &[rho']) &[y1 // y]_ys) = (rho &[(rho' &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[y1 // y]_ys = rho &[rho' &[y1 // y]_ys]", "unfolding vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[rho'] &[Var ys y1 / y]_ys = rho &[rho' &[Var ys y1 / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  goodEnv rho'\n\ngoal (1 subgoal):\n 1. rho &[rho'] &[Var ys y1 / y]_ys = rho &[rho' &[Var ys y1 / y]_ys]", "by(simp add: substEnv_psubstEnv_compose)"], ["", "lemma subst_compose1:\nassumes \"good X\" and \"good Y1\" and \"good Y2\"\nshows \"((X #[Y1 / y]_ys) #[Y2 / y]_ys) = (X #[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "have \"goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and> goodEnv (idEnv [y \\<leftarrow> Y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n    goodEnv (idEnv [y \\<leftarrow> Y2]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y1\n  good Y2\n\ngoal (1 subgoal):\n 1. goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n    goodEnv (idEnv [y \\<leftarrow> Y2]_ys)", "by simp"], ["proof (state)\nthis:\n  goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n  goodEnv (idEnv [y \\<leftarrow> Y2]_ys)\n\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n  goodEnv (idEnv [y \\<leftarrow> Y2]_ys)\n\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "using \\<open>good X\\<close>"], ["proof (prove)\nusing this:\n  goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n  goodEnv (idEnv [y \\<leftarrow> Y2]_ys)\n  good X\n\ngoal (1 subgoal):\n 1. X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys", "unfolding subst_def substEnv_def"], ["proof (prove)\nusing this:\n  goodEnv (idEnv [y \\<leftarrow> Y1]_ys) \\<and>\n  goodEnv (idEnv [y \\<leftarrow> Y2]_ys)\n  good X\n\ngoal (1 subgoal):\n 1. X #[idEnv [y \\<leftarrow> Y1]_ys] #[idEnv [y \\<leftarrow> Y2]_ys] =\n    X #[idEnv [y \\<leftarrow> Y1 #[idEnv [y \\<leftarrow> Y2]_ys]]_ys]", "by(simp add: psubst_compose psubstEnv_updEnv)"], ["proof (state)\nthis:\n  X #[Y1 / y]_ys #[Y2 / y]_ys = X #[Y1 #[Y2 / y]_ys / y]_ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y1\" and \"good Y2\"\nshows \"((rho &[Y1 / y]_ys) &[Y2 / y]_ys) = (rho &[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y1 / y]_ys &[Y2 / y]_ys = rho &[Y1 #[Y2 / y]_ys / y]_ys", "by (simp add: assms psubstEnv_compose psubstEnv_updEnv_idEnv substEnv_def subst_psubst_idEnv)"], ["", "lemma subst_vsubst_compose1:\nassumes \"good X\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((X #[y1 // y]_ys) #[Y / y]_ys) = (X #[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y]_ys = X #[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y]_ys = X #[y1 // y]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. X #[Var ys y1 / y]_ys #[Y / y]_ys = X #[Var ys y1 / y]_ys", "by(simp add: subst_compose1)"], ["", "lemma substEnv_vsubstEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((rho &[y1 // y]_ys) &[Y / y]_ys) = (rho &[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Y / y]_ys = rho &[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Y / y]_ys = rho &[y1 // y]_ys", "unfolding vsubst_def vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys &[Y / y]_ys = rho &[Var ys y1 / y]_ys", "by(simp add: substEnv_compose1)"], ["", "lemma vsubst_subst_compose1:\nassumes \"good X\" and \"good Y\"\nshows \"((X #[Y / y]_ys) #[y1 // y]_ys) = (X #[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[y1 // y]_ys = X #[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[y1 // y]_ys = X #[Y #[y1 // y]_ys / y]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[Var ys y1 / y]_ys = X #[Y #[Var ys y1 / y]_ys / y]_ys", "by(simp add: subst_compose1)"], ["", "lemma vsubstEnv_substEnv_compose1:\nassumes \"goodEnv rho\" and \"good Y\"\nshows \"((rho &[Y / y]_ys) &[y1 // y]_ys) = (rho &[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[y1 // y]_ys = rho &[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[y1 // y]_ys = rho &[Y #[y1 // y]_ys / y]_ys", "unfolding vsubst_def vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[Var ys y1 / y]_ys =\n    rho &[Y #[Var ys y1 / y]_ys / y]_ys", "by(simp add: substEnv_compose1)"], ["", "lemma vsubst_compose1:\nassumes \"good X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y]_ys) = (X #[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y]_ys = X #[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y]_ys = X #[y1 @ys[y2 / y]_ys // y]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n\ngoal (1 subgoal):\n 1. X #[Var ys y1 / y]_ys #[Var ys y2 / y]_ys =\n    X #[Var ys (y1 @ys[y2 / y]_ys) / y]_ys", "by(cases \"y = y1\") (auto simp: subst_compose1)"], ["", "lemma vsubstEnv_compose1:\nassumes \"goodEnv rho\"\nshows \"((rho &[y1 // y]_ys) &[y2 // y]_ys) = (rho &[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[y2 // y]_ys = rho &[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[y2 // y]_ys = rho &[y1 @ys[y2 / y]_ys // y]_ys", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys &[Var ys y2 / y]_ys =\n    rho &[Var ys (y1 @ys[y2 / y]_ys) / y]_ys", "by(cases \"y = y1\") (auto simp: substEnv_compose1)"], ["", "lemma subst_compose2:\nassumes  \"good X\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[Y / y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[Z / z]_zs = X #[Z / z]_zs #[Y #[Z / z]_zs / y]_ys", "by (metis assms fresh freshEnv_getEnv freshEnv_getEnv2 freshEnv_idEnv freshEnv_updEnv_I idEnv_preserves_good psubst_subst_compose_freshEnv \n subst_psubst_idEnv updEnv_preserves_good)"], ["", "lemma substEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[Y / y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[Z / z]_zs = rho &[Z / z]_zs &[Y #[Z / z]_zs / y]_ys", "by (metis assms fresh freshEnv_updEnv_I getEnv_idEnv idEnv_preserves_good \n   option.discI psubstEnv_substEnv_compose_freshEnv substEnv_def \n  subst_psubst_idEnv updEnv_preserves_good)"], ["", "lemma subst_vsubst_compose2:\nassumes  \"good X\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((X #[y1 // y]_ys) #[Z / z]_zs) = ((X #[Z / z]_zs) #[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Z / z]_zs =\n    X #[Z / z]_zs #[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Z / z]_zs =\n    X #[Z / z]_zs #[Var ys y1 #[Z / z]_zs / y]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. X #[Var ys y1 / y]_ys #[Z / z]_zs =\n    X #[Z / z]_zs #[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: subst_compose2)"], ["", "lemma substEnv_vsubstEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((rho &[y1 // y]_ys) &[Z / z]_zs) = ((rho &[Z / z]_zs) &[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Z / z]_zs =\n    rho &[Z / z]_zs &[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[Z / z]_zs =\n    rho &[Z / z]_zs &[Var ys y1 #[Z / z]_zs / y]_ys", "unfolding vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. rho &[Var ys y1 / y]_ys &[Z / z]_zs =\n    rho &[Z / z]_zs &[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: substEnv_compose2)"], ["", "lemma vsubst_subst_compose2:\nassumes  \"good X\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[Y / y]_ys) #[z1 // z]_zs) = ((X #[z1 // z]_zs) #[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 // z]_zs = X #[z1 // z]_zs #[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[z1 // z]_zs = X #[z1 // z]_zs #[Y #[z1 // z]_zs / y]_ys", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. X #[Y / y]_ys #[Var zs z1 / z]_zs =\n    X #[Var zs z1 / z]_zs #[Y #[Var zs z1 / z]_zs / y]_ys", "by(simp add: subst_compose2)"], ["", "lemma vsubstEnv_substEnv_compose2:\nassumes  \"goodEnv rho\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[Y / y]_ys) &[z1 // z]_zs) = ((rho &[z1 // z]_zs) &[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[Y #[z1 // z]_zs / y]_ys", "unfolding vsubst_def vsubstEnv_def"], ["proof (prove)\nusing this:\n  goodEnv rho\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. rho &[Y / y]_ys &[Var zs z1 / z]_zs =\n    rho &[Var zs z1 / z]_zs &[Y #[Var zs z1 / z]_zs / y]_ys", "by(simp add: substEnv_compose2)"], ["", "lemma vsubst_compose2:\nassumes  \"good X\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((X #[y1 // y]_ys) #[z1 // z]_zs) =\n       ((X #[z1 // z]_zs) #[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[z1 // z]_zs =\n    X #[z1 // z]_zs #[y1 @ys[z1 / z]_zs // y]_ys", "by (metis vsubst_def Var_preserves_good assms vsubst_Var_simp vsubst_def \n    vsubst_subst_compose2)"], ["", "lemma vsubstEnv_compose2:\nassumes \"goodEnv rho\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((rho &[y1 // y]_ys) &[z1 // z]_zs) =\n       ((rho &[z1 // z]_zs) &[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &[y1 // y]_ys &[z1 // z]_zs =\n    rho &[z1 // z]_zs &[y1 @ys[z1 / z]_zs // y]_ys", "by (metis Var_preserves_good assms \nvsubstEnv_def vsubstEnv_substEnv_compose2 vsubst_Var_simp)"], ["", "subsection \\<open>Properties specific to variable-for-variable substitution\\<close>"], ["", "(* Note: The results in this section cannot be lifted to environments, and therefore\nwe don't have ``environment versions\" of these.  *)"], ["", "lemma vsubstAll_ident:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and zs\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> z. z \\<in> varsOf P \\<longrightarrow> (X #[z // z]_zs) = X))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> z. z \\<in> varsOf P \\<longrightarrow> (A $[z // z]_zs) = A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>z.\n         z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>z. z \\<in> varsOf P \\<longrightarrow> A $[z // z]_zs = A))", "proof(induct rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>z.\n                z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>z.\n                z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[z // z]_zs =\n                            Op delta inp binp\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>z.\n           z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Abs xs x X $[z // z]_zs = Abs xs x X", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n   binp\n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>z.\n                z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>z.\n                z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Op delta inp binp #[z // z]_zs =\n                            Op delta inp binp\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>z.\n           z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Abs xs x X $[z // z]_zs = Abs xs x X", "then"], ["proof (chain)\npicking this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n   binp", "show ?case"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<in> varsOf P \\<longrightarrow>\n       Op delta inp binp #[z // z]_zs = Op delta inp binp", "using assms"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a #[z // z]_zs = a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>z. z \\<in> varsOf P \\<longrightarrow> a $[z // z]_zs = a)\n   binp\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<in> varsOf P \\<longrightarrow>\n       Op delta inp binp #[z // z]_zs = Op delta inp binp", "unfolding vsubst_def vsubstAbs_def liftAll_def lift_def"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     (\\<forall>z.\n         z \\<in> varsOf P \\<longrightarrow> v #[Var zs z / z]_zs = v)\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     (\\<forall>z.\n         z \\<in> varsOf P \\<longrightarrow> v $[Var zs z / z]_zs = v)\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<in> varsOf P \\<longrightarrow>\n       Op delta inp binp #[Var zs z / z]_zs = Op delta inp binp", "by simp (auto simp: lift_def substInp_def2 substBinp_def2 vsubstInp_def2 \n        split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>z.\n     z \\<in> varsOf P \\<longrightarrow>\n     Op delta inp binp #[z // z]_zs = Op delta inp binp\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>z.\n           z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Abs xs x X $[z // z]_zs = Abs xs x X", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>z.\n           z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Abs xs x X $[z // z]_zs = Abs xs x X", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>z. z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>z.\n           z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z.\n                            z \\<in> varsOf P \\<longrightarrow>\n                            Abs xs x X $[z // z]_zs = Abs xs x X", "then"], ["proof (chain)\npicking this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>z. z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X", "show ?case"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>z. z \\<in> varsOf P \\<longrightarrow> X #[z // z]_zs = X\n\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<in> varsOf P \\<longrightarrow>\n       Abs xs x X $[z // z]_zs = Abs xs x X", "by (metis empty_iff insert_iff vsubstAbs_simp)"], ["proof (state)\nthis:\n  \\<forall>z.\n     z \\<in> varsOf P \\<longrightarrow> Abs xs x X $[z // z]_zs = Abs xs x X\n\ngoal (2 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>z.\n          z \\<in> varsOf P \\<longrightarrow>\n          Var xs x #[z // z]_zs = Var xs x", "qed(insert assms, simp_all)"], ["", "corollary vsubst_ident[simp]:\nassumes \"good X\"\nshows \"(X #[z // z]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[z // z]_zs = X", "using assms vsubstAll_ident[of \"Par [z] [] [] []\" X]"], ["proof (prove)\nusing this:\n  good X\n  goodPar (Par [z] [] [] []) \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       X #[za // za]_?zs = X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       ?A $[za // za]_?zs = ?A))\n\ngoal (1 subgoal):\n 1. X #[z // z]_zs = X", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  Ball (termsOf (Par [z] [] [] [])) good \\<and>\n  Ball (absOf (Par [z] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [z] [] [] [])) goodEnv \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       X #[za // za]_?zs = X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       ?A $[za // za]_?zs = ?A))\n\ngoal (1 subgoal):\n 1. X #[z // z]_zs = X", "by simp"], ["", "corollary subst_ident[simp]:\nassumes \"good X\"\nshows \"(X #[(Var zs z) / z]_zs) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[Var zs z / z]_zs = X", "using assms vsubst_ident"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> ?X #[?z // ?z]_?zs = ?X\n\ngoal (1 subgoal):\n 1. X #[Var zs z / z]_zs = X", "unfolding vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good ?X \\<Longrightarrow> ?X #[Var ?zs ?z / ?z]_?zs = ?X\n\ngoal (1 subgoal):\n 1. X #[Var zs z / z]_zs = X", "by auto"], ["", "lemma vsubstAll_swapAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and ys\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<and> fresh ys y1 X \\<longrightarrow>\n            (X #[y1 // y2]_ys) = (X #[y1 \\<and> y2]_ys)))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<and> freshAbs ys y1 A  \\<longrightarrow>\n            (A $[y1 // y2]_ys) = (A $[y1 \\<and> y2]_ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>y1 y2.\n         {y1, y2} \\<subseteq> varsOf P \\<and>\n         fresh ys y1 X \\<longrightarrow>\n         X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>y1 y2.\n         {y1, y2} \\<subseteq> varsOf P \\<and>\n         freshAbs ys y1 A \\<longrightarrow>\n         A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys))", "apply(induction rule: term_induct_fresh[OF P])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<and>\n          fresh ys y1 (Var xs x) \\<longrightarrow>\n          Var xs x #[y1 // y2]_ys = Var xs x #[y1 \\<and> y2]_ys\n 2. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<and>\n                fresh ys y1 a \\<longrightarrow>\n                a #[y1 // y2]_ys = a #[y1 \\<and> y2]_ys)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<and>\n                freshAbs ys y1 a \\<longrightarrow>\n                a $[y1 // y2]_ys = a $[y1 \\<and> y2]_ys)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<and>\n                            fresh ys y1\n                             (Op delta inp binp) \\<longrightarrow>\n                            Op delta inp binp #[y1 // y2]_ys =\n                            Op delta inp binp #[y1 \\<and> y2]_ys\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<and>\n           fresh ys y1 X \\<longrightarrow>\n           X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<and>\n                            freshAbs ys y1 (Abs xs x X) \\<longrightarrow>\n                            Abs xs x X $[y1 // y2]_ys =\n                            Abs xs x X $[y1 \\<and> y2]_ys", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y1 y2.\n       {y1, y2} \\<subseteq> varsOf P \\<and>\n       fresh ys y1 (Var xs_ x_) \\<longrightarrow>\n       Var xs_ x_ #[y1 // y2]_ys = Var xs_ x_ #[y1 \\<and> y2]_ys", "by (force simp add: sw_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<and>\n                fresh ys y1 a \\<longrightarrow>\n                a #[y1 // y2]_ys = a #[y1 \\<and> y2]_ys)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<and>\n                freshAbs ys y1 a \\<longrightarrow>\n                a $[y1 // y2]_ys = a $[y1 \\<and> y2]_ys)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<and>\n                            fresh ys y1\n                             (Op delta inp binp) \\<longrightarrow>\n                            Op delta inp binp #[y1 // y2]_ys =\n                            Op delta inp binp #[y1 \\<and> y2]_ys\n 2. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<and>\n           fresh ys y1 X \\<longrightarrow>\n           X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<and>\n                            freshAbs ys y1 (Abs xs x X) \\<longrightarrow>\n                            Abs xs x X $[y1 // y2]_ys =\n                            Abs xs x X $[y1 \\<and> y2]_ys", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodInp inp_; goodBinp binp_;\n     liftAll\n      (\\<lambda>a.\n          \\<forall>y1 y2.\n             {y1, y2} \\<subseteq> varsOf P \\<and>\n             fresh ys y1 a \\<longrightarrow>\n             a #[y1 // y2]_ys = a #[y1 \\<and> y2]_ys)\n      inp_;\n     liftAll\n      (\\<lambda>a.\n          \\<forall>y1 y2.\n             {y1, y2} \\<subseteq> varsOf P \\<and>\n             freshAbs ys y1 a \\<longrightarrow>\n             a $[y1 // y2]_ys = a $[y1 \\<and> y2]_ys)\n      binp_\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y1 y2.\n                         {y1, y2} \\<subseteq> varsOf P \\<and>\n                         fresh ys y1\n                          (Op delta_ inp_ binp_) \\<longrightarrow>\n                         Op delta_ inp_ binp_ #[y1 // y2]_ys =\n                         Op delta_ inp_ binp_ #[y1 \\<and> y2]_ys", "by simp (auto \n  simp: vsubstInp_def substInp_def2 vsubst_def swapInp_def \n              vsubstBinp_def substBinp_def2 vsubstAbs_def swapBinp_def  \n              freshInp_def  freshBinp_def lift_def liftAll_def\n  split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<and>\n           fresh ys y1 X \\<longrightarrow>\n           X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<and>\n                            freshAbs ys y1 (Abs xs x X) \\<longrightarrow>\n                            Abs xs x X $[y1 // y2]_ys =\n                            Abs xs x X $[y1 \\<and> y2]_ys", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>good X_; x_ \\<notin> varsOf P;\n     \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs_ x_ Y;\n     \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs_ x_ A;\n     \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs_ x_ rho;\n     \\<forall>y1 y2.\n        {y1, y2} \\<subseteq> varsOf P \\<and>\n        fresh ys y1 X_ \\<longrightarrow>\n        X_ #[y1 // y2]_ys = X_ #[y1 \\<and> y2]_ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y1 y2.\n                         {y1, y2} \\<subseteq> varsOf P \\<and>\n                         freshAbs ys y1 (Abs xs_ x_ X_) \\<longrightarrow>\n                         Abs xs_ x_ X_ $[y1 // y2]_ys =\n                         Abs xs_ x_ X_ $[y1 \\<and> y2]_ys", "by simp (metis Var_preserves_good fresh_Var_simp substAbs_simp sw_def\n  vsubstAbs_def vsubst_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "corollary vsubst_eq_swap:\nassumes \"good X\" and \"y1 = y2 \\<or> fresh ys y1 X\"\nshows \"(X #[y1 // y2]_ys) = (X #[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "apply(cases \"y1 = y2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. y1 = y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\n 2. y1 \\<noteq> y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "using assms vsubstAll_swapAll[of \"Par [y1, y2] [] [] []\" X]"], ["proof (prove)\nusing this:\n  good X\n  y1 = y2 \\<or> fresh ys y1 X\n  goodPar (Par [y1, y2] [] [] []) \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a X \\<longrightarrow>\n       X #[y1a // y2a]_?ys = X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a ?A \\<longrightarrow>\n       ?A $[y1a // y2a]_?ys = ?A $[y1a \\<and> y2a]_?ys))\n\ngoal (2 subgoals):\n 1. y1 = y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\n 2. y1 \\<noteq> y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  y1 = y2 \\<or> fresh ys y1 X\n  Ball (termsOf (Par [y1, y2] [] [] [])) good \\<and>\n  Ball (absOf (Par [y1, y2] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [y1, y2] [] [] [])) goodEnv \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a X \\<longrightarrow>\n       X #[y1a // y2a]_?ys = X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a ?A \\<longrightarrow>\n       ?A $[y1a // y2a]_?ys = ?A $[y1a \\<and> y2a]_?ys))\n\ngoal (2 subgoals):\n 1. y1 = y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys\n 2. y1 \\<noteq> y2 \\<Longrightarrow> X #[y1 // y2]_ys = X #[y1 \\<and> y2]_ys", "by auto"], ["", "lemma skelAll_vsubstAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)term\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)abs\" and\n      P::\"('index,'bindex,'varSort,'var,'opSym)param\" and ys\nassumes P: \"goodPar P\"\nshows\n\"(good X \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<longrightarrow>\n            skel (X #[y1 // y2]_ys) = skel X))\n\\<and>\n (goodAbs A \\<longrightarrow>\n  (\\<forall> y1 y2. {y1,y2} \\<subseteq> varsOf P \\<longrightarrow>\n            skelAbs (A $[y1 // y2]_ys) = skelAbs A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (good X \\<longrightarrow>\n     (\\<forall>y1 y2.\n         {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n         skel (X #[y1 // y2]_ys) = skel X)) \\<and>\n    (goodAbs A \\<longrightarrow>\n     (\\<forall>y1 y2.\n         {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n         skelAbs (A $[y1 // y2]_ys) = skelAbs A))", "proof(induction rule: term_induct_fresh[of P])"], ["proof (state)\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                skel (a #[y1 // y2]_ys) = skel a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                skelAbs (a $[y1 // y2]_ys) = skelAbs a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skel (Op delta inp binp #[y1 // y2]_ys) =\n                            skel (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n           skel (X #[y1 // y2]_ys) = skel X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skelAbs (Abs xs x X $[y1 // y2]_ys) =\n                            skelAbs (Abs xs x X)", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (a #[y1 // y2]_ys) = skel a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skelAbs (a $[y1 // y2]_ys) = skelAbs a)\n   binp\n\ngoal (4 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>goodInp inp; goodBinp binp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                skel (a #[y1 // y2]_ys) = skel a)\n         inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>y1 y2.\n                {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                skelAbs (a $[y1 // y2]_ys) = skelAbs a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skel (Op delta inp binp #[y1 // y2]_ys) =\n                            skel (Op delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n           skel (X #[y1 // y2]_ys) = skel X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skelAbs (Abs xs x X $[y1 // y2]_ys) =\n                            skelAbs (Abs xs x X)", "then"], ["proof (chain)\npicking this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (a #[y1 // y2]_ys) = skel a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skelAbs (a $[y1 // y2]_ys) = skelAbs a)\n   binp", "show ?case"], ["proof (prove)\nusing this:\n  goodInp inp\n  goodBinp binp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (a #[y1 // y2]_ys) = skel a)\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skelAbs (a $[y1 // y2]_ys) = skelAbs a)\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>y1 y2.\n       {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n       skel (Op delta inp binp #[y1 // y2]_ys) = skel (Op delta inp binp)", "by (simp add: skelInp_def2 skelBinp_def2)\n   (auto simp: vsubst_def vsubstInp_def substInp_def2\n       vsubstAbs_def vsubstBinp_def substBinp_def2 lift_def liftAll_def\n       split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skel (Op delta inp binp #[y1 // y2]_ys) = skel (Op delta inp binp)\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n           skel (X #[y1 // y2]_ys) = skel X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skelAbs (Abs xs x X $[y1 // y2]_ys) =\n                            skelAbs (Abs xs x X)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n           skel (X #[y1 // y2]_ys) = skel X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skelAbs (Abs xs x X $[y1 // y2]_ys) =\n                            skelAbs (Abs xs x X)", "case (Abs xs x X)"], ["proof (state)\nthis:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skel (X #[y1 // y2]_ys) = skel X\n\ngoal (3 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)\n 3. \\<And>xs x X.\n       \\<lbrakk>good X; x \\<notin> varsOf P;\n        \\<And>Y. Y \\<in> termsOf P \\<Longrightarrow> fresh xs x Y;\n        \\<And>A. A \\<in> absOf P \\<Longrightarrow> freshAbs xs x A;\n        \\<And>rho. rho \\<in> envsOf P \\<Longrightarrow> freshEnv xs x rho;\n        \\<forall>y1 y2.\n           {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n           skel (X #[y1 // y2]_ys) = skel X\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y1 y2.\n                            {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n                            skelAbs (Abs xs x X $[y1 // y2]_ys) =\n                            skelAbs (Abs xs x X)", "then"], ["proof (chain)\npicking this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skel (X #[y1 // y2]_ys) = skel X", "show ?case"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skel (X #[y1 // y2]_ys) = skel X\n\ngoal (1 subgoal):\n 1. \\<forall>y1 y2.\n       {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n       skelAbs (Abs xs x X $[y1 // y2]_ys) = skelAbs (Abs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  x \\<notin> varsOf P\n  ?Y91 \\<in> termsOf P \\<Longrightarrow> fresh xs x ?Y91\n  ?A91 \\<in> absOf P \\<Longrightarrow> freshAbs xs x ?A91\n  ?rho91 \\<in> envsOf P \\<Longrightarrow> freshEnv xs x ?rho91\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skel (X #[y1 // y2]_ys) = skel X\n  goodPar P\n\ngoal (1 subgoal):\n 1. \\<forall>y1 y2.\n       {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n       skelAbs (Abs xs x X $[y1 // y2]_ys) = skelAbs (Abs xs x X)", "by simp (metis not_equals_and_not_equals_not_in \n     skelAbs_simp vsubstAbs_simp vsubst_preserves_good)"], ["proof (state)\nthis:\n  \\<forall>y1 y2.\n     {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n     skelAbs (Abs xs x X $[y1 // y2]_ys) = skelAbs (Abs xs x X)\n\ngoal (2 subgoals):\n 1. goodPar P\n 2. \\<And>xs x.\n       \\<forall>y1 y2.\n          {y1, y2} \\<subseteq> varsOf P \\<longrightarrow>\n          skel (Var xs x #[y1 // y2]_ys) = skel (Var xs x)", "qed(insert assms, simp_all)"], ["", "corollary skel_vsubst:\nassumes \"good X\"\nshows \"skel (X #[y1 // y2]_ys) = skel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skel (X #[y1 // y2]_ys) = skel X", "using assms skelAll_vsubstAll[of \"Par [y1, y2] [] [] []\" X]"], ["proof (prove)\nusing this:\n  good X\n  goodPar (Par [y1, y2] [] [] []) \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skel (X #[y1a // y2a]_?ys) = skel X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skelAbs (?A $[y1a // y2a]_?ys) = skelAbs ?A))\n\ngoal (1 subgoal):\n 1. skel (X #[y1 // y2]_ys) = skel X", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  good X\n  Ball (termsOf (Par [y1, y2] [] [] [])) good \\<and>\n  Ball (absOf (Par [y1, y2] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [y1, y2] [] [] [])) goodEnv \\<Longrightarrow>\n  (good X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skel (X #[y1a // y2a]_?ys) = skel X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skelAbs (?A $[y1a // y2a]_?ys) = skelAbs ?A))\n\ngoal (1 subgoal):\n 1. skel (X #[y1 // y2]_ys) = skel X", "by simp"], ["", "lemma subst_vsubst_trans:\nassumes  \"good X\" and \"good Y\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[Y / y1]_ys) = (X #[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y1]_ys = X #[Y / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Y / y1]_ys = X #[Y / y]_ys", "unfolding subst_def vsubst_def"], ["proof (prove)\nusing this:\n  good X\n  good Y\n  fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[idEnv [y \\<leftarrow> Var ys\n                               y1]_ys] #[idEnv [y1 \\<leftarrow> Y]_ys] =\n    X #[idEnv [y \\<leftarrow> Y]_ys]", "by (cases \"y1 = y\") (simp_all add: fresh_psubst_updEnv psubstEnv_updEnv_idEnv \n  psubst_compose updEnv_commute)"], ["", "lemma vsubst_trans:\nassumes  \"good X\" and \"fresh ys y1 X\"\nshows \"((X #[y1 // y]_ys) #[y2 // y1]_ys) = (X #[y2 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[y2 // y1]_ys = X #[y2 // y]_ys", "unfolding vsubst_def[of _ y2 y1] vsubst_def[of _ y2 y]"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Var ys y2 / y1]_ys = X #[Var ys y2 / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  good X\n  fresh ys y1 X\n\ngoal (1 subgoal):\n 1. X #[y1 // y]_ys #[Var ys y2 / y1]_ys = X #[Var ys y2 / y]_ys", "by(simp add: subst_vsubst_trans)"], ["", "lemma vsubst_commute:\nassumes X: \"good X\"\nand \"xs \\<noteq> xs' \\<or> {x,y} \\<inter> {x',y'} = {}\" and \"fresh xs x X\" and \"fresh xs' x' X\"\nshows \"((X #[x // y]_xs) #[x' // y']_xs') = ((X #[x' // y']_xs') #[x // y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "have \"fresh xs' x' (X #[x // y]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs' x' (X #[x // y]_xs)", "using assms"], ["proof (prove)\nusing this:\n  good X\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  fresh xs x X\n  fresh xs' x' X\n\ngoal (1 subgoal):\n 1. fresh xs' x' (X #[x // y]_xs)", "by (intro vsubst_preserves_fresh) auto"], ["proof (state)\nthis:\n  fresh xs' x' (X #[x // y]_xs)\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "moreover"], ["proof (state)\nthis:\n  fresh xs' x' (X #[x // y]_xs)\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "have \"fresh xs x (X #[x' // y']_xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh xs x (X #[x' // y']_xs')", "using assms"], ["proof (prove)\nusing this:\n  good X\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  fresh xs x X\n  fresh xs' x' X\n\ngoal (1 subgoal):\n 1. fresh xs x (X #[x' // y']_xs')", "by (intro vsubst_preserves_fresh) auto"], ["proof (state)\nthis:\n  fresh xs x (X #[x' // y']_xs')\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "ultimately"], ["proof (chain)\npicking this:\n  fresh xs' x' (X #[x // y]_xs)\n  fresh xs x (X #[x' // y']_xs')", "show ?thesis"], ["proof (prove)\nusing this:\n  fresh xs' x' (X #[x // y]_xs)\n  fresh xs x (X #[x' // y']_xs')\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "using assms"], ["proof (prove)\nusing this:\n  fresh xs' x' (X #[x // y]_xs)\n  fresh xs x (X #[x' // y']_xs')\n  good X\n  xs \\<noteq> xs' \\<or> {x, y} \\<inter> {x', y'} = {}\n  fresh xs x X\n  fresh xs' x' X\n\ngoal (1 subgoal):\n 1. X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs", "by (auto simp: vsubst_eq_swap intro!: swap_commute)"], ["proof (state)\nthis:\n  X #[x // y]_xs #[x' // y']_xs' = X #[x' // y']_xs' #[x // y]_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Abstraction versions of the properties\\<close>"], ["", "text\\<open>Environment identity and update versus other operators:\\<close>"], ["", "lemma psubstAbs_idEnv[simp]:\n\"goodAbs A \\<Longrightarrow> (A $[idEnv]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. goodAbs A \\<Longrightarrow> A $[idEnv] = A", "by(simp add: psubstAll_idEnv)"], ["", "text\\<open>Substitution versus other operators:\\<close>"], ["", "corollary freshAbs_psubstAbs:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows\n\"freshAbs zs z (A $[rho]) =\n (\\<forall> ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho] =\n    (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)", "using assms freshAll_psubstAll[of \"Par [z] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodPar (Par [z] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       fresh ?zs ?z ?X #[rho] =\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> freshImEnvAt ?zs ?z rho ys y))) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       freshAbs ?zs ?z ?A $[rho] =\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> freshImEnvAt ?zs ?z rho ys y)))\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho] =\n    (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  Ball (termsOf (Par [z] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [z] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [z] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       fresh ?zs ?z ?X #[rho] =\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> freshImEnvAt ?zs ?z rho ys y))) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   ?z \\<in> varsOf (Par [z] [] [] [rho]) \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [z] [] [] [rho]).\n       freshAbs ?zs ?z ?A $[rho] =\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> freshImEnvAt ?zs ?z rho ys y)))\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho] =\n    (\\<forall>ys y. freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y)", "by simp"], ["", "corollary freshAbs_psubstAbs_E1:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nand \"rho ys y = None\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> (ys \\<noteq> zs \\<or> y \\<noteq> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "using assms freshAbs_psubstAbs"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho ys y = None\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs ?A; goodEnv ?rho\\<rbrakk>\n  \\<Longrightarrow> freshAbs ?zs ?z ?A $[?rho] =\n                    (\\<forall>ys y.\n                        freshAbs ys y ?A \\<or>\n                        freshImEnvAt ?zs ?z ?rho ys y)\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho ys y = None\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs ?A; goodEnv ?rho\\<rbrakk>\n  \\<Longrightarrow> freshAbs ?zs ?z ?A $[?rho] =\n                    (\\<forall>ys y.\n                        freshAbs ys y ?A \\<or>\n                        ?rho ys y = None \\<and>\n                        (ys \\<noteq> ?zs \\<or> y \\<noteq> ?z) \\<or>\n                        (\\<exists>Y.\n                            ?rho ys y = Some Y \\<and> fresh ?zs ?z Y))\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> ys \\<noteq> zs \\<or> y \\<noteq> z", "by fastforce"], ["", "corollary freshAbs_psubstAbs_E2:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nand \"rho ys y = Some Y\" and \"freshAbs zs z (A $[rho])\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "using assms freshAbs_psubstAbs[of A rho]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho ys y = Some Y\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs A; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> freshAbs ?zs ?z A $[rho] =\n                    (\\<forall>ys y.\n                        freshAbs ys y A \\<or> freshImEnvAt ?zs ?z rho ys y)\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "unfolding freshImEnvAt_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho ys y = Some Y\n  freshAbs zs z A $[rho]\n  \\<lbrakk>goodAbs A; goodEnv rho\\<rbrakk>\n  \\<Longrightarrow> freshAbs ?zs ?z A $[rho] =\n                    (\\<forall>ys y.\n                        freshAbs ys y A \\<or>\n                        rho ys y = None \\<and>\n                        (ys \\<noteq> ?zs \\<or> y \\<noteq> ?z) \\<or>\n                        (\\<exists>Y.\n                            rho ys y = Some Y \\<and> fresh ?zs ?z Y))\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "by fastforce"], ["", "corollary freshAbs_psubstAbs_I1:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nand \"freshAbs zs z A\" and \"freshEnv zs z rho\"\nshows \"freshAbs zs z (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  freshAbs zs z A\n  freshEnv zs z rho\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "apply(simp add: freshAbs_psubstAbs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodAbs A; goodEnv rho; freshAbs zs z A;\n     freshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y.\n                         freshAbs ys y A \\<or> freshImEnvAt zs z rho ys y", "unfolding freshEnv_def liftAll_def freshImEnvAt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>goodAbs A; goodEnv rho; freshAbs zs z A;\n     rho zs z = None \\<and>\n     (\\<forall>ys i v.\n         rho ys i = Some v \\<longrightarrow> fresh zs z v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y.\n                         freshAbs ys y A \\<or>\n                         rho ys y = None \\<and>\n                         (ys \\<noteq> zs \\<or> y \\<noteq> z) \\<or>\n                         (\\<exists>Y. rho ys y = Some Y \\<and> fresh zs z Y)", "by auto"], ["", "corollary freshAbs_psubstAbs_I:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nand \"rho zs z = None \\<Longrightarrow> freshAbs zs z A\" and\n    \"\\<And> ys y Y. rho ys y = Some Y \\<Longrightarrow> freshAbs ys y A \\<or> fresh zs z Y\"\nshows \"freshAbs zs z (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho zs z = None \\<Longrightarrow> freshAbs zs z A\n  rho ?ys91 ?y91 = Some ?Y91 \\<Longrightarrow>\n  freshAbs ?ys91 ?y91 A \\<or> fresh zs z ?Y91\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "using option.exhaust_sel"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  rho zs z = None \\<Longrightarrow> freshAbs zs z A\n  rho ?ys91 ?y91 = Some ?Y91 \\<Longrightarrow>\n  freshAbs ?ys91 ?y91 A \\<or> fresh zs z ?Y91\n  \\<lbrakk>?option = None \\<Longrightarrow> ?P;\n   ?option = Some (the ?option) \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[rho]", "by (simp add: freshAbs_psubstAbs freshImEnvAt_def) blast"], ["", "lemma freshAbs_substAbs:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and> (freshAbs ys y A \\<or> fresh zs z Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> fresh zs z Y))", "unfolding substAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A $[idEnv [y \\<leftarrow> Y]_ys] =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> fresh zs z Y))", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n\ngoal (1 subgoal):\n 1. freshAbs zs z A $[idEnv [y \\<leftarrow> Y]_ys] =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> fresh zs z Y))", "by (auto simp: freshAbs_psubstAbs freshImEnvAt_def)"], ["", "lemma freshAbs_vsubstAbs:\nassumes \"goodAbs A\"\nshows \"freshAbs zs z (A $[y1 // y]_ys) =\n       (((zs = ys \\<and> z = y) \\<or> freshAbs zs z A) \\<and>\n        (freshAbs ys y A \\<or> (zs \\<noteq> ys \\<or> z \\<noteq> y1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "unfolding vsubstAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Var ys y1 / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Var ys y1 / y]_ys) =\n    ((zs = ys \\<and> z = y \\<or> freshAbs zs z A) \\<and>\n     (freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1))", "by(auto simp: freshAbs_substAbs)"], ["", "lemma substAbs_preserves_freshAbs:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z A\" and \"fresh zs z Y\"\nshows \"freshAbs zs z (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  freshAbs zs z A\n  fresh zs z Y\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[Y / y]_ys)", "by(simp add: freshAbs_substAbs)"], ["", "lemma vsubstAbs_preserves_freshAbs:\nassumes \"goodAbs A\"\nand \"freshAbs zs z A\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y1\"\nshows \"freshAbs zs z (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs zs z A\n  zs \\<noteq> ys \\<or> z \\<noteq> y1\n\ngoal (1 subgoal):\n 1. freshAbs zs z (A $[y1 // y]_ys)", "by(simp add: freshAbs_vsubstAbs)"], ["", "lemma fresh_freshAbs_substAbs[simp]:\nassumes \"good Y\" and \"goodAbs A\"\nand \"fresh ys y Y\"\nshows \"freshAbs ys y (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[Y / y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  good Y\n  goodAbs A\n  fresh ys y Y\n\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[Y / y]_ys)", "by(simp add: freshAbs_substAbs)"], ["", "lemma diff_freshAbs_vsubstAbs[simp]:\nassumes \"goodAbs A\"\nand \"y \\<noteq> y1\"\nshows \"freshAbs ys y (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[y1 // y]_ys)", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. freshAbs ys y (A $[y1 // y]_ys)", "by(simp add: freshAbs_vsubstAbs)"], ["", "lemma freshAbs_substAbs_E1:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshAbs zs z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  freshAbs zs z (A $[Y / y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. freshAbs zs z A", "by(auto simp: freshAbs_substAbs)"], ["", "lemma freshAbs_vsubstAbs_E1:\nassumes \"goodAbs A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\" and \"zs \\<noteq> ys \\<or> z \\<noteq> y\"\nshows \"freshAbs zs z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs zs z A", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs zs z (A $[y1 // y]_ys)\n  zs \\<noteq> ys \\<or> z \\<noteq> y\n\ngoal (1 subgoal):\n 1. freshAbs zs z A", "by(auto simp: freshAbs_vsubstAbs)"], ["", "lemma freshAbs_substAbs_E2:\nassumes \"goodAbs A\" and \"good Y\"\nand \"freshAbs zs z (A $[Y / y]_ys)\"\nshows \"freshAbs ys y A \\<or> fresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  freshAbs zs z (A $[Y / y]_ys)\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> fresh zs z Y", "by(simp add: freshAbs_substAbs)"], ["", "lemma freshAbs_vsubstAbs_E2:\nassumes \"goodAbs A\"\nand \"freshAbs zs z (A $[y1 // y]_ys)\"\nshows \"freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs zs z (A $[y1 // y]_ys)\n\ngoal (1 subgoal):\n 1. freshAbs ys y A \\<or> zs \\<noteq> ys \\<or> z \\<noteq> y1", "by(simp add: freshAbs_vsubstAbs)"], ["", "corollary psubstAbs_cong[fundef_cong]:\nassumes \"goodAbs A\" and \"goodEnv rho\" and \"goodEnv rho'\"\nand \"\\<And> ys y. freshAbs ys y A \\<or> rho ys y = rho' ys y\"\nshows \"(A $[rho]) = (A $[rho'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] = A $[rho']", "using assms psubstAll_cong[of \"Par [] [] [] [rho,rho']\"]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodEnv rho'\n  freshAbs ?ys91 ?y91 A \\<or> rho ?ys91 ?y91 = rho' ?ys91 ?y91\n  goodPar (Par [] [] [] [rho, rho']) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?X #[rhoa] = ?X #[rho'a])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?A $[rhoa] = ?A $[rho'a]))\n\ngoal (1 subgoal):\n 1. A $[rho] = A $[rho']", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodEnv rho'\n  freshAbs ?ys91 ?y91 A \\<or> rho ?ys91 ?y91 = rho' ?ys91 ?y91\n  Ball (termsOf (Par [] [] [] [rho, rho'])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho, rho'])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho, rho'])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           fresh ys y ?X \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?X #[rhoa] = ?X #[rho'a])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       (\\<forall>ys y.\n           freshAbs ys y ?A \\<or> rhoa ys y = rho'a ys y) \\<longrightarrow>\n       ?A $[rhoa] = ?A $[rho'a]))\n\ngoal (1 subgoal):\n 1. A $[rho] = A $[rho']", "by simp"], ["", "lemma freshAbs_psubstAbs_updEnv:\nassumes \"good X\" and \"goodAbs A\" and \"goodEnv rho\"\nand \"freshAbs xs x A\"\nshows \"(A $[rho [x \\<leftarrow> X]_xs]) = (A $[rho])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho [x \\<leftarrow> X]_xs] = A $[rho]", "using assms"], ["proof (prove)\nusing this:\n  good X\n  goodAbs A\n  goodEnv rho\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[rho [x \\<leftarrow> X]_xs] = A $[rho]", "by (intro psubstAbs_cong) auto"], ["", "corollary freshEnv_psubstAbs_ident[simp]:\nfixes A :: \"('index,'bindex,'varSort,'var,'opSym)abs\"\nassumes \"goodAbs A\" and \"goodEnv rho\"\nand \"\\<And> zs z. freshEnv zs z rho \\<or> freshAbs zs z A\"\nshows \"(A $[rho]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] = A", "using assms psubstAll_ident[of \"Par [] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  freshEnv ?zs91 ?z91 rho \\<or> freshAbs ?zs91 ?z91 A\n  goodPar (Par [] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> fresh zs z ?X) \\<longrightarrow>\n       ?X #[rho] = ?X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> freshAbs zs z ?A) \\<longrightarrow>\n       ?A $[rho] = ?A))\n\ngoal (1 subgoal):\n 1. A $[rho] = A", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  freshEnv ?zs91 ?z91 rho \\<or> freshAbs ?zs91 ?z91 A\n  Ball (termsOf (Par [] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> fresh zs z ?X) \\<longrightarrow>\n       ?X #[rho] = ?X)) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rho\\<in>envsOf (Par [] [] [] [rho]).\n       (\\<forall>zs z.\n           freshEnv zs z rho \\<or> freshAbs zs z ?A) \\<longrightarrow>\n       ?A $[rho] = ?A))\n\ngoal (1 subgoal):\n 1. A $[rho] = A", "by simp"], ["", "lemma freshAbs_substAbs_ident[simp]:\nassumes \"good X\" and \"goodAbs A\" and \"freshAbs xs x A\"\nshows \"(A $[X / x]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[X / x]_xs = A", "by (simp add: assms freshAbs_psubstAbs_updEnv substAbs_def)"], ["", "corollary substAbs_Abs[simp]:\nassumes \"good X\" and \"good Y\"\nshows \"((Abs xs x X) $[Y / x]_xs) = Abs xs x X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / x]_xs = Abs xs x X", "using assms"], ["proof (prove)\nusing this:\n  good X\n  good Y\n\ngoal (1 subgoal):\n 1. Abs xs x X $[Y / x]_xs = Abs xs x X", "by simp"], ["", "lemma freshAbs_vsubstAbs_ident[simp]:\nassumes \"goodAbs A\" and \"freshAbs xs x A\"\nshows \"(A $[x1 // x]_xs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[x1 // x]_xs = A", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[x1 // x]_xs = A", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs xs x A\n\ngoal (1 subgoal):\n 1. A $[Var xs x1 / x]_xs = A", "by(auto simp: freshAbs_substAbs_ident)"], ["", "lemma swapAbs_psubstAbs:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[z1 \\<and> z2]_zs) = ((A $[z1 \\<and> z2]_zs) $[rho &[z1 \\<and> z2]_zs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "using assms swapAll_psubstAll[of \"Par [z1,z2] [] [] [rho]\"]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodPar (Par [z1, z2] [] [] [rho]) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?X #[rhoa] #[z1a \\<and> z2a]_?zs =\n       ?X #[z1a \\<and> z2a]_?zs #[rhoa &[z1a \\<and> z2a]_?zs])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?A $[rhoa] $[z1a \\<and> z2a]_?zs =\n       ?A $[z1a \\<and> z2a]_?zs $[rhoa &[z1a \\<and> z2a]_?zs]))\n\ngoal (1 subgoal):\n 1. A $[rho] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  Ball (termsOf (Par [z1, z2] [] [] [rho])) good \\<and>\n  Ball (absOf (Par [z1, z2] [] [] [rho])) goodAbs \\<and>\n  Ball (envsOf (Par [z1, z2] [] [] [rho])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?X #[rhoa] #[z1a \\<and> z2a]_?zs =\n       ?X #[z1a \\<and> z2a]_?zs #[rhoa &[z1a \\<and> z2a]_?zs])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa z1a z2a.\n       rhoa \\<in> envsOf (Par [z1, z2] [] [] [rho]) \\<and>\n       {z1a, z2a}\n       \\<subseteq> varsOf (Par [z1, z2] [] [] [rho]) \\<longrightarrow>\n       ?A $[rhoa] $[z1a \\<and> z2a]_?zs =\n       ?A $[z1a \\<and> z2a]_?zs $[rhoa &[z1a \\<and> z2a]_?zs]))\n\ngoal (1 subgoal):\n 1. A $[rho] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[rho &[z1 \\<and> z2]_zs]", "by auto"], ["", "lemma swapAbs_substAbs:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"((A $[Y / y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(Y #[z1 \\<and> z2]_zs) / (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "have 1: \"(idEnv [(y @ys[z1 \\<and> z2]_zs) \\<leftarrow> (Y #[z1 \\<and> z2]_zs)]_ys) =\n           ((idEnv [y \\<leftarrow> Y]_ys) &[z1 \\<and> z2]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n    idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs", "by(simp add: swapEnv_updEnv)"], ["proof (state)\nthis:\n  idEnv [y @ys[z1 \\<and> z2]_zs \\<leftarrow> Y #[z1 \\<and> z2]_zs]_ys =\n  idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys", "unfolding substAbs_def 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[idEnv [y \\<leftarrow> Y]_ys] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n\ngoal (1 subgoal):\n 1. A $[idEnv [y \\<leftarrow> Y]_ys] $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[idEnv [y \\<leftarrow> Y]_ys &[z1 \\<and> z2]_zs]", "by (intro swapAbs_psubstAbs) auto"], ["proof (state)\nthis:\n  A $[Y / y]_ys $[z1 \\<and> z2]_zs =\n  A $[z1 \\<and> z2]_zs $[Y #[z1 \\<and> z2]_zs / y @ys[z1 \\<and> z2]_zs]_ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swapAbs_vsubstAbs:\nassumes \"goodAbs A\"\nshows \"((A $[y1 // y]_ys) $[z1 \\<and> z2]_zs) =\n       ((A $[z1 \\<and> z2]_zs) $[(y1 @ys[z1 \\<and> z2]_zs) // (y @ys[z1 \\<and> z2]_zs)]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[y1 @ys[z1 \\<and> z2]_zs // y @ys[z1 \\<and> z2]_zs]_ys", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[z1 \\<and> z2]_zs =\n    A $[z1 \\<and> z2]_zs $[Var ys\n                            (y1 @ys[z1 \\<and> z2]_zs) / y @ys[z1 \\<and> z2]_zs]_ys", "by(simp add: swapAbs_substAbs)"], ["", "lemma psubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\" and \"goodEnv rho'\"\nshows \"((A $[rho]) $[rho']) = (A $[(rho &[rho'])])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[rho'] = A $[rho &[rho']]", "using assms psubstAll_compose[of \"Par [] [] [] [rho, rho']\"]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodEnv rho'\n  goodPar (Par [] [] [] [rho, rho']) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?X #[rhoa] #[rho'a] = ?X #[rhoa &[rho'a]])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?A $[rhoa] $[rho'a] = ?A $[rhoa &[rho'a]]))\n\ngoal (1 subgoal):\n 1. A $[rho] $[rho'] = A $[rho &[rho']]", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  goodEnv rho'\n  Ball (termsOf (Par [] [] [] [rho, rho'])) good \\<and>\n  Ball (absOf (Par [] [] [] [rho, rho'])) goodAbs \\<and>\n  Ball (envsOf (Par [] [] [] [rho, rho'])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?X #[rhoa] #[rho'a] = ?X #[rhoa &[rho'a]])) \\<and>\n  (goodAbs ?A \\<longrightarrow>\n   (\\<forall>rhoa rho'a.\n       {rhoa, rho'a}\n       \\<subseteq> envsOf (Par [] [] [] [rho, rho']) \\<longrightarrow>\n       ?A $[rhoa] $[rho'a] = ?A $[rhoa &[rho'a]]))\n\ngoal (1 subgoal):\n 1. A $[rho] $[rho'] = A $[rho &[rho']]", "by auto"], ["", "lemma psubstAbs_substAbs_compose:\nassumes \"goodAbs A\" and \"good Y\" and \"goodEnv rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> (Y #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho [y \\<leftarrow> Y #[rho]]_ys]", "by (simp add: assms psubstAbs_compose psubstEnv_updEnv_idEnv substAbs_def)"], ["", "lemma psubstAbs_vsubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[y1 // y]_ys) $[rho]) = (A $[(rho [y \\<leftarrow> ((Var ys y1) #[rho])]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[rho] = A $[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[rho] = A $[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[rho] =\n    A $[rho [y \\<leftarrow> Var ys y1 #[rho]]_ys]", "by(simp add: psubstAbs_substAbs_compose)"], ["", "lemma substAbs_psubstAbs_compose:\nassumes \"goodAbs A\" and \"good Y\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[Y / y]_ys) = (A $[(rho &[Y / y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[Y / y]_ys = A $[rho &[Y / y]_ys]", "unfolding substAbs_def substEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[idEnv [y \\<leftarrow> Y]_ys] =\n    A $[rho &[idEnv [y \\<leftarrow> Y]_ys]]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. A $[rho] $[idEnv [y \\<leftarrow> Y]_ys] =\n    A $[rho &[idEnv [y \\<leftarrow> Y]_ys]]", "by(simp add: psubstAbs_compose)"], ["", "lemma psubstAbs_substAbs_compose_freshEnv:\nassumes \"goodAbs A\" and \"goodEnv rho\" and \"good Y\"\nassumes \"freshEnv ys y rho\"\nshows \"((A $[Y / y]_ys) $[rho]) = ((A $[rho]) $[(Y #[rho]) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho] $[Y #[rho] / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n  good Y\n  freshEnv ys y rho\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[rho] = A $[rho] $[Y #[rho] / y]_ys", "by (simp add: substAbs_psubstAbs_compose psubstAbs_substAbs_compose)"], ["", "lemma vsubstAbs_psubstAbs_compose:\nassumes \"goodAbs A\" and \"goodEnv rho\"\nshows \"((A $[rho]) $[y1 // y]_ys) = (A $[(rho &[y1 // y]_ys)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[y1 // y]_ys = A $[rho &[y1 // y]_ys]", "unfolding vsubstAbs_def vsubstEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[rho] $[Var ys y1 / y]_ys = A $[rho &[Var ys y1 / y]_ys]", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodEnv rho\n\ngoal (1 subgoal):\n 1. A $[rho] $[Var ys y1 / y]_ys = A $[rho &[Var ys y1 / y]_ys]", "by(simp add: substAbs_psubstAbs_compose)"], ["", "lemma substAbs_compose1:\nassumes \"goodAbs A\" and \"good Y1\" and \"good Y2\"\nshows \"((A $[Y1 / y]_ys) $[Y2 / y]_ys) = (A $[(Y1 #[Y2 / y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y1 / y]_ys $[Y2 / y]_ys = A $[Y1 #[Y2 / y]_ys / y]_ys", "by (metis assms idEnv_preserves_good psubstAbs_substAbs_compose substAbs_def \n  subst_psubst_idEnv updEnv_overwrite updEnv_preserves_good)"], ["", "lemma substAbs_vsubstAbs_compose1:\nassumes \"goodAbs A\" and \"good Y\" and \"y \\<noteq> y1\"\nshows \"((A $[y1 // y]_ys) $[Y / y]_ys) = (A $[y1 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y]_ys = A $[y1 // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y]_ys = A $[y1 // y]_ys", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  y \\<noteq> y1\n\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[Y / y]_ys = A $[Var ys y1 / y]_ys", "by(simp add: substAbs_compose1)"], ["", "lemma vsubstAbs_substAbs_compose1:\nassumes \"goodAbs A\" and \"good Y\"\nshows \"((A $[Y / y]_ys) $[y1 // y]_ys) = (A $[(Y #[y1 // y]_ys) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[y1 // y]_ys = A $[Y #[y1 // y]_ys / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[y1 // y]_ys = A $[Y #[y1 // y]_ys / y]_ys", "unfolding vsubstAbs_def vsubst_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[Var ys y1 / y]_ys = A $[Y #[Var ys y1 / y]_ys / y]_ys", "by(simp add: substAbs_compose1)"], ["", "lemma vsubstAbs_compose1:\nassumes \"goodAbs A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y]_ys) = (A $[(y1 @ys[y2 / y]_ys) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y]_ys = A $[y1 @ys[y2 / y]_ys // y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y]_ys = A $[y1 @ys[y2 / y]_ys // y]_ys", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[Var ys y2 / y]_ys =\n    A $[Var ys (y1 @ys[y2 / y]_ys) / y]_ys", "by(cases \"y = y1\") (auto simp: substAbs_compose1)"], ["", "lemma substAbs_compose2:\nassumes  \"goodAbs A\" and \"good Y\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[Y / y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[(Y #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[Z / z]_zs = A $[Z / z]_zs $[Y #[Z / z]_zs / y]_ys", "by (metis assms fresh freshEnv_idEnv idEnv_preserves_good \npsubstAbs_substAbs_compose_freshEnv substAbs_def \nsubstEnv_idEnv substEnv_preserves_freshEnv_aux \n subst_psubst_idEnv updEnv_preserves_good)"], ["", "lemma substAbs_vsubstAbs_compose2:\nassumes \"goodAbs A\" and \"good Z\"\nand \"ys \\<noteq> zs \\<or> y \\<noteq> z\" and fresh: \"fresh ys y Z\"\nshows \"((A $[y1 // y]_ys) $[Z / z]_zs) = ((A $[Z / z]_zs) $[((Var ys y1) #[Z / z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Z / z]_zs =\n    A $[Z / z]_zs $[Var ys y1 #[Z / z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Z / z]_zs =\n    A $[Z / z]_zs $[Var ys y1 #[Z / z]_zs / y]_ys", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Z\n  ys \\<noteq> zs \\<or> y \\<noteq> z\n  fresh ys y Z\n\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[Z / z]_zs =\n    A $[Z / z]_zs $[Var ys y1 #[Z / z]_zs / y]_ys", "by(simp add: substAbs_compose2)"], ["", "lemma vsubstAbs_substAbs_compose2:\nassumes  \"goodAbs A\" and \"good Y\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[Y / y]_ys) $[z1 // z]_zs) = ((A $[z1 // z]_zs) $[(Y #[z1 // z]_zs) / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 // z]_zs = A $[z1 // z]_zs $[Y #[z1 // z]_zs / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[z1 // z]_zs = A $[z1 // z]_zs $[Y #[z1 // z]_zs / y]_ys", "unfolding vsubstAbs_def vsubst_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  ys \\<noteq> zs \\<or> y \\<notin> {z, z1}\n\ngoal (1 subgoal):\n 1. A $[Y / y]_ys $[Var zs z1 / z]_zs =\n    A $[Var zs z1 / z]_zs $[Y #[Var zs z1 / z]_zs / y]_ys", "by(simp add: substAbs_compose2)"], ["", "lemma vsubstAbs_compose2:\nassumes  \"goodAbs A\"\nand \"ys \\<noteq> zs \\<or> y \\<notin> {z,z1}\"\nshows \"((A $[y1 // y]_ys) $[z1 // z]_zs) =\n       ((A $[z1 // z]_zs) $[(y1 @ys[z1 / z]_zs) // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[z1 // z]_zs =\n    A $[z1 // z]_zs $[y1 @ys[z1 / z]_zs // y]_ys", "unfolding vsubstAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Var ys y1 / y]_ys $[Var zs z1 / z]_zs =\n    A $[Var zs z1 / z]_zs $[Var ys (y1 @ys[z1 / z]_zs) / y]_ys", "by (smt Var_preserves_good assms fresh_Var_simp insertCI \n   substAbs_compose2 vsubst_Var_simp vsubst_def)"], ["", "text\\<open>Properties specific to variable-for-variable substitution:\\<close>"], ["", "corollary vsubstAbs_ident[simp]:\nassumes \"goodAbs A\"\nshows \"(A $[z // z]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[z // z]_zs = A", "using assms vsubstAll_ident[of \"Par [z] [] [] []\" _ _ A]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodPar (Par [z] [] [] []) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       ?X #[za // za]_?zs = ?X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       A $[za // za]_?zs = A))\n\ngoal (1 subgoal):\n 1. A $[z // z]_zs = A", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  Ball (termsOf (Par [z] [] [] [])) good \\<and>\n  Ball (absOf (Par [z] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [z] [] [] [])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       ?X #[za // za]_?zs = ?X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>za.\n       za \\<in> varsOf (Par [z] [] [] []) \\<longrightarrow>\n       A $[za // za]_?zs = A))\n\ngoal (1 subgoal):\n 1. A $[z // z]_zs = A", "by simp"], ["", "corollary substAbs_ident[simp]:\nassumes \"goodAbs A\"\nshows \"(A $[(Var zs z) / z]_zs) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[Var zs z / z]_zs = A", "using assms vsubstAbs_ident"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> ?A $[?z // ?z]_?zs = ?A\n\ngoal (1 subgoal):\n 1. A $[Var zs z / z]_zs = A", "unfolding vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodAbs ?A \\<Longrightarrow> ?A $[Var ?zs ?z / ?z]_?zs = ?A\n\ngoal (1 subgoal):\n 1. A $[Var zs z / z]_zs = A", "by auto"], ["", "corollary vsubstAbs_eq_swapAbs:\nassumes \"goodAbs A\" and \"freshAbs ys y1 A\"\nshows \"(A $[y1 // y2]_ys) = (A $[y1 \\<and> y2]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "using assms vsubstAll_swapAll[of \"Par [y1, y2] [] [] []\" _ _ A]"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs ys y1 A\n  goodPar (Par [y1, y2] [] [] []) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a ?X \\<longrightarrow>\n       ?X #[y1a // y2a]_?ys = ?X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a A \\<longrightarrow>\n       A $[y1a // y2a]_?ys = A $[y1a \\<and> y2a]_?ys))\n\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs ys y1 A\n  Ball (termsOf (Par [y1, y2] [] [] [])) good \\<and>\n  Ball (absOf (Par [y1, y2] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [y1, y2] [] [] [])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       fresh ?ys y1a ?X \\<longrightarrow>\n       ?X #[y1a // y2a]_?ys = ?X #[y1a \\<and> y2a]_?ys)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a} \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<and>\n       freshAbs ?ys y1a A \\<longrightarrow>\n       A $[y1a // y2a]_?ys = A $[y1a \\<and> y2a]_?ys))\n\ngoal (1 subgoal):\n 1. A $[y1 // y2]_ys = A $[y1 \\<and> y2]_ys", "by simp"], ["", "corollary skelAbs_vsubstAbs:\nassumes \"goodAbs A\"\nshows \"skelAbs (A $[y1 // y2]_ys) = skelAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skelAbs (A $[y1 // y2]_ys) = skelAbs A", "using assms skelAll_vsubstAll[of \"Par [y1, y2] [] [] []\" _ _ A]"], ["proof (prove)\nusing this:\n  goodAbs A\n  goodPar (Par [y1, y2] [] [] []) \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skel (?X #[y1a // y2a]_?ys) = skel ?X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skelAbs (A $[y1a // y2a]_?ys) = skelAbs A))\n\ngoal (1 subgoal):\n 1. skelAbs (A $[y1 // y2]_ys) = skelAbs A", "unfolding goodPar_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  Ball (termsOf (Par [y1, y2] [] [] [])) good \\<and>\n  Ball (absOf (Par [y1, y2] [] [] [])) goodAbs \\<and>\n  Ball (envsOf (Par [y1, y2] [] [] [])) goodEnv \\<Longrightarrow>\n  (good ?X \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skel (?X #[y1a // y2a]_?ys) = skel ?X)) \\<and>\n  (goodAbs A \\<longrightarrow>\n   (\\<forall>y1a y2a.\n       {y1a, y2a}\n       \\<subseteq> varsOf (Par [y1, y2] [] [] []) \\<longrightarrow>\n       skelAbs (A $[y1a // y2a]_?ys) = skelAbs A))\n\ngoal (1 subgoal):\n 1. skelAbs (A $[y1 // y2]_ys) = skelAbs A", "by simp"], ["", "lemma substAbs_vsubstAbs_trans:\nassumes  \"goodAbs A\" and \"good Y\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[Y / y1]_ys) = (A $[Y / y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y1]_ys = A $[Y / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  freshAbs ys y1 A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Y / y1]_ys = A $[Y / y]_ys", "unfolding substAbs_def vsubstAbs_def"], ["proof (prove)\nusing this:\n  goodAbs A\n  good Y\n  freshAbs ys y1 A\n\ngoal (1 subgoal):\n 1. A $[idEnv [y \\<leftarrow> Var ys\n                               y1]_ys] $[idEnv [y1 \\<leftarrow> Y]_ys] =\n    A $[idEnv [y \\<leftarrow> Y]_ys]", "by (cases \"y1 = y\") (auto simp: freshAbs_psubstAbs_updEnv psubstAbs_compose \n  psubstEnv_updEnv_idEnv updEnv_commute)"], ["", "lemma vsubstAbs_trans:\nassumes  \"goodAbs A\" and \"freshAbs ys y1 A\"\nshows \"((A $[y1 // y]_ys) $[y2 // y1]_ys) = (A $[y2 // y]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[y2 // y1]_ys = A $[y2 // y]_ys", "unfolding vsubstAbs_def[of _ y2 y1] vsubstAbs_def[of _ y2 y]"], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Var ys y2 / y1]_ys = A $[Var ys y2 / y]_ys", "using assms"], ["proof (prove)\nusing this:\n  goodAbs A\n  freshAbs ys y1 A\n\ngoal (1 subgoal):\n 1. A $[y1 // y]_ys $[Var ys y2 / y1]_ys = A $[Var ys y2 / y]_ys", "by(simp add: substAbs_vsubstAbs_trans)"], ["", "lemmas good_psubstAll_freshAll_otherSimps =\npsubst_idEnv psubstEnv_idEnv_id psubstAbs_idEnv\nfreshEnv_psubst_ident freshEnv_psubstAbs_ident"], ["", "lemmas good_substAll_freshAll_otherSimps =\nfresh_fresh_subst fresh_subst_ident fresh_substEnv_updEnv subst_ident\nfresh_freshAbs_substAbs freshAbs_substAbs_ident substAbs_ident"], ["", "lemmas good_vsubstAll_freshAll_otherSimps =\ndiff_fresh_vsubst fresh_vsubst_ident fresh_vsubstEnv_updEnv vsubst_ident\ndiff_freshAbs_vsubstAbs freshAbs_vsubstAbs_ident vsubstAbs_ident"], ["", "lemmas good_allOpers_otherSimps =\ngood_swapAll_freshAll_otherSimps\ngood_psubstAll_freshAll_otherSimps\ngood_substAll_freshAll_otherSimps\ngood_vsubstAll_freshAll_otherSimps"], ["", "lemmas good_item_simps =\nparam_simps\nall_preserve_good\ngood_freeCons\ngood_allOpers_simps\ngood_allOpers_otherSimps"], ["", "end"], ["", "(* context FixVars *)"], ["", "end"]]}