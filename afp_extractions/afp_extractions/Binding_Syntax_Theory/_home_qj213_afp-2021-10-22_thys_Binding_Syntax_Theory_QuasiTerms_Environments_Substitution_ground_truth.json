{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/QuasiTerms_Environments_Substitution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemma qGoodEnv_imp_card_of_qTerm:\nassumes \"qGoodEnv rho\"\nshows \"|{X. \\<exists> y. rho ys y = Some X}| <o |UNIV :: 'var set|\"", "lemma qGoodEnv_imp_card_of_qTerm2:\nassumes \"qGoodEnv rho\"\nshows \"|{X. \\<exists> ys y. rho ys y = Some X}| <o |UNIV :: 'var set|\"", "lemma qGoodEnv_iff:\n\"qGoodEnv rho =\n ((\\<forall> xs. liftAll qGood (rho xs)) \\<and>\n  (\\<forall> ys. |{y. rho ys y \\<noteq> None}| <o |UNIV :: 'var set| ) \\<and>\n  |{X. \\<exists> ys y. rho ys y = Some X}| <o |UNIV :: 'var set| )\"", "lemma alphaEnv_refl:\n\"qGoodEnv rho \\<Longrightarrow> rho &= rho\"", "lemma alphaEnv_sym:\n\"rho &= rho' \\<Longrightarrow> rho' &= rho\"", "lemma alphaEnv_trans:\nassumes good: \"qGoodEnv rho\" and\n        alpha1: \"rho &= rho'\" and alpha2: \"rho' &= rho''\"\nshows \"rho &= rho''\"", "lemma pickQFreshEnv_card_of:\nassumes Vvar: \"|V| <o |UNIV :: 'var set|\" and XSvar: \"|XS| <o |UNIV :: 'var set|\" and\n        good: \"\\<forall> X \\<in> XS. qGood X\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set|\" and RhoGood: \"\\<forall> rho \\<in> Rho. qGoodEnv rho\"\nshows\n\"pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n (\\<forall> rho \\<in> Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\"", "lemma pickQFreshEnv:\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\"\nand XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\"\nand good: \"\\<forall> X \\<in> XS. qGood X\"\nand Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\"\nand RhoGood: \"\\<forall> rho \\<in> Rho. qGoodEnv rho\"\nshows\n\"pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n (\\<forall> rho \\<in> Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\"", "lemma aux_qPsubst_ignoreFirst_qTermLessQSwapped_wf:\n\"wf(inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst)\"", "lemma qPsubstAll_preserves_qGoodAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and rho\nassumes GOOD_ENV: \"qGoodEnv rho\"\nshows\n\"(qGood X \\<longrightarrow> qGood (X #[[rho]])) \\<and> (qGoodAbs A \\<longrightarrow> qGoodAbs (A $[[rho]]))\"", "lemma qPsubstAll_preserves_qFreshAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and rho\nassumes GOOD_ENV: \"qGoodEnv rho\"\nshows\n\"(qFresh zs z X \\<longrightarrow>\n  (qGood X \\<and> qFreshEnv zs z rho \\<longrightarrow> qFresh zs z (X #[[rho]]))) \\<and>\n (qFreshAbs zs z A \\<longrightarrow>\n  (qGoodAbs A \\<and> qFreshEnv zs z rho \\<longrightarrow> qFreshAbs zs z (A $[[rho]])))\"", "lemma qPsubst_preserves_qFresh:\n\"\\<lbrakk>qGood X; qGoodEnv rho; qFresh zs z X; qFreshEnv zs z rho\\<rbrakk>\n \\<Longrightarrow> qFresh zs z (X #[[rho]])\"", "lemma qPsubstAbs_preserves_qFreshAbs:\n\"\\<lbrakk>qGoodAbs A; qGoodEnv rho; qFreshAbs zs z A; qFreshEnv zs z rho\\<rbrakk>\n \\<Longrightarrow> qFreshAbs zs z (A $[[rho]])\"", "lemma qPsubstAll_preserves_alphaAll_qSwapAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and\n      rho::\"('index,'bindex,'varSort,'var,'opSym)qEnv\"\nassumes goodRho: \"qGoodEnv rho\"\nshows\n\"(qGood X \\<longrightarrow>\n  (\\<forall> Y. X #= Y \\<longrightarrow> (X #[[rho]]) #= (Y #[[rho]])) \\<and>\n  (\\<forall> xs z1 z2. qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n               ((X #[[z1 \\<and> z2]]_xs) #[[rho]]) #= ((X #[[rho]]) #[[z1 \\<and> z2]]_xs))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  (\\<forall> B. A $= B \\<longrightarrow> (A $[[rho]]) $= (B $[[rho]])) \\<and>\n  (\\<forall> xs z1 z2. qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n               ((A $[[z1 \\<and> z2]]_xs) $[[rho]]) $= ((A $[[rho]]) $[[z1 \\<and> z2]]_xs)))\"", "lemma qPsubstAll_preserves_alphaAll2:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and\n      rho'::\"('index,'bindex,'varSort,'var,'opSym)qEnv\" and rho''\nassumes rho'_alpha_rho'': \"rho' &= rho''\" and\n        goodRho': \"qGoodEnv rho'\" and goodRho'': \"qGoodEnv rho''\"\nshows\n\"(qGood X \\<longrightarrow> (X #[[rho']]) #= (X #[[rho'']])) \\<and>\n (qGoodAbs A \\<longrightarrow> (A $[[rho']]) $= (A $[[rho'']]))\"", "lemma qPsubst_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"qGoodEnv rho\" and \"qGoodEnv rho'\" \nand \"X #= X'\" and \"rho &= rho'\"\nshows \"(X #[[rho]]) #= (X' #[[rho']])\"", "lemma qPsubstAbs_preserves_alphaAbs:\nassumes \"qGoodAbs A \\<or> qGoodAbs A'\" and \"qGoodEnv rho\" and \"qGoodEnv rho'\" \nand \"A $= A'\" and \"rho &= rho'\"\nshows \"(A $[[rho]]) $= (A' $[[rho']])\"", "lemma qFresh_qPsubst_commute_qAbs:\nassumes good_X: \"qGood X\" and good_rho: \"qGoodEnv rho\" and\n        x_fresh_rho: \"qFreshEnv xs x rho\"\nshows \"((qAbs xs x X) $[[rho]]) $= qAbs xs x (X #[[rho]])\""], "translations": [["", "lemma qGoodEnv_imp_card_of_qTerm:\nassumes \"qGoodEnv rho\"\nshows \"|{X. \\<exists> y. rho ys y = Some X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "let ?rel = \"{(y,X). rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "let ?Left = \"{X. \\<exists> y. rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "let ?Left' = \"{y. \\<exists> X. rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "have \"\\<And> y X X'. (y,X) \\<in> ?rel \\<and> (y,X') \\<in> ?rel \\<longrightarrow> X = X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y X X'.\n       (y, X) \\<in> {(y, X). rho ys y = Some X} \\<and>\n       (y, X') \\<in> {(y, X). rho ys y = Some X} \\<longrightarrow>\n       X = X'", "by force"], ["proof (state)\nthis:\n  (?y13, ?X13) \\<in> {(y, X). rho ys y = Some X} \\<and>\n  (?y13, ?X'13) \\<in> {(y, X). rho ys y = Some X} \\<longrightarrow>\n  ?X13 = ?X'13\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "hence \"|?Left| \\<le>o |?Left'|\""], ["proof (prove)\nusing this:\n  (?y13, ?X13) \\<in> {(y, X). rho ys y = Some X} \\<and>\n  (?y13, ?X'13) \\<in> {(y, X). rho ys y = Some X} \\<longrightarrow>\n  ?X13 = ?X'13\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n    |{y. \\<exists>X. rho ys y = Some X}|", "using card_of_inj_rel[of ?rel]"], ["proof (prove)\nusing this:\n  (?y13, ?X13) \\<in> {(y, X). rho ys y = Some X} \\<and>\n  (?y13, ?X'13) \\<in> {(y, X). rho ys y = Some X} \\<longrightarrow>\n  ?X13 = ?X'13\n  (\\<And>x y y'.\n      \\<lbrakk>(x, y) \\<in> {(y, X). rho ys y = Some X};\n       (x, y') \\<in> {(y, X). rho ys y = Some X}\\<rbrakk>\n      \\<Longrightarrow> y = y') \\<Longrightarrow>\n  |{y. \\<exists>x. (x, y) \\<in> {(y, X). rho ys y = Some X}}| \\<le>o\n  |{x. \\<exists>y. (x, y) \\<in> {(y, X). rho ys y = Some X}}|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n    |{y. \\<exists>X. rho ys y = Some X}|", "by auto"], ["proof (state)\nthis:\n  |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n  |{y. \\<exists>X. rho ys y = Some X}|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n  |{y. \\<exists>X. rho ys y = Some X}|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "have \"|?Left'| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|", "using assms"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|", "unfolding qGoodEnv_def"], ["proof (prove)\nusing this:\n  (\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n  |{y. \\<exists>X. rho ys y = Some X}|\n  |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|", "show ?thesis"], ["proof (prove)\nusing this:\n  |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n  |{y. \\<exists>X. rho ys y = Some X}|\n  |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{X. \\<exists>y. rho ys y = Some X}| \\<le>o\n  |{y. \\<exists>X. rho ys y = Some X}|\n  |{y. \\<exists>X. rho ys y = Some X}| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qGoodEnv_imp_card_of_qTerm2:\nassumes \"qGoodEnv rho\"\nshows \"|{X. \\<exists> ys y. rho ys y = Some X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "let ?Left = \"{X. \\<exists> ys y. rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "let ?F = \"\\<lambda> ys. {X. \\<exists> y. rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "have \"?Left = (\\<Union> ys. ?F ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {X. \\<exists>ys y. rho ys y = Some X} =\n    (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})", "by auto"], ["proof (state)\nthis:\n  {X. \\<exists>ys y. rho ys y = Some X} =\n  (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  {X. \\<exists>ys y. rho ys y = Some X} =\n  (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "have \"\\<forall> ys. |?F ys| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "using assms qGoodEnv_imp_card_of_qTerm"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n  qGoodEnv ?rho \\<Longrightarrow>\n  |{X. \\<exists>y. ?rho ?ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  {X. \\<exists>ys y. rho ys y = Some X} =\n  (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})\n  \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|", "show ?thesis"], ["proof (prove)\nusing this:\n  {X. \\<exists>ys y. rho ys y = Some X} =\n  (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})\n  \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "using var_regular_INNER varSort_lt_var_INNER"], ["proof (prove)\nusing this:\n  {X. \\<exists>ys y. rho ys y = Some X} =\n  (\\<Union>ys. {X. \\<exists>y. rho ys y = Some X})\n  \\<forall>ys. |{X. \\<exists>y. rho ys y = Some X}| <o |UNIV|\n  regular |UNIV|\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "by(force simp add: regular_UNION)"], ["proof (state)\nthis:\n  |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qGoodEnv_iff:\n\"qGoodEnv rho =\n ((\\<forall> xs. liftAll qGood (rho xs)) \\<and>\n  (\\<forall> ys. |{y. rho ys y \\<noteq> None}| <o |UNIV :: 'var set| ) \\<and>\n  |{X. \\<exists> ys y. rho ys y = Some X}| <o |UNIV :: 'var set| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv rho =\n    ((\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|)", "unfolding qGoodEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)) =\n    ((\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs. liftAll qGood (rho xs);\n     \\<forall>ys. |{y. \\<exists>ya. rho ys y = Some ya}| <o |UNIV|\\<rbrakk>\n    \\<Longrightarrow> |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "apply(rule qGoodEnv_imp_card_of_qTerm2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs. liftAll qGood (rho xs);\n     \\<forall>ys. |{y. \\<exists>ya. rho ys y = Some ya}| <o |UNIV|\\<rbrakk>\n    \\<Longrightarrow> qGoodEnv rho", "unfolding qGoodEnv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs. liftAll qGood (rho xs);\n     \\<forall>ys. |{y. \\<exists>ya. rho ys y = Some ya}| <o |UNIV|\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n                      (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)", "by simp"], ["", "lemma alphaEnv_refl:\n\"qGoodEnv rho \\<Longrightarrow> rho &= rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodEnv rho \\<Longrightarrow> rho &= rho", "using alpha_refl"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. qGoodEnv rho \\<Longrightarrow> rho &= rho", "unfolding alphaEnv_def qGoodEnv_def liftAll_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n    (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<Longrightarrow>\n    (rho, rho)\n    \\<in> {(rho, rho').\n           \\<forall>xs.\n              (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n              (\\<forall>i v1 v2.\n                  rho xs i = Some v1 \\<and>\n                  rho' xs i = Some v2 \\<longrightarrow>\n                  v1 #= v2)}", "by fastforce"], ["", "lemma alphaEnv_sym:\n\"rho &= rho' \\<Longrightarrow> rho' &= rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &= rho' \\<Longrightarrow> rho' &= rho", "using alpha_sym"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. rho &= rho' \\<Longrightarrow> rho' &= rho", "unfolding alphaEnv_def liftAll2_def sameDom_def"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. (rho, rho')\n    \\<in> {(rho, rho').\n           \\<forall>xs.\n              (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n              (\\<forall>i v1 v2.\n                  rho xs i = Some v1 \\<and>\n                  rho' xs i = Some v2 \\<longrightarrow>\n                  v1 #= v2)} \\<Longrightarrow>\n    (rho', rho)\n    \\<in> {(rho, rho').\n           \\<forall>xs.\n              (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n              (\\<forall>i v1 v2.\n                  rho xs i = Some v1 \\<and>\n                  rho' xs i = Some v2 \\<longrightarrow>\n                  v1 #= v2)}", "by fastforce"], ["", "lemma alphaEnv_trans:\nassumes good: \"qGoodEnv rho\" and\n        alpha1: \"rho &= rho'\" and alpha2: \"rho' &= rho''\"\nshows \"rho &= rho''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rho &= rho''", "using assms"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n  rho &= rho'\n  rho' &= rho''\n\ngoal (1 subgoal):\n 1. rho &= rho''", "unfolding alphaEnv_def"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n  (rho, rho')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            sameDom (rho xs) (rho' xs) \\<and>\n            liftAll2 (#=) (rho xs) (rho' xs)}\n  (rho', rho'')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            sameDom (rho xs) (rho' xs) \\<and>\n            liftAll2 (#=) (rho xs) (rho' xs)}\n\ngoal (1 subgoal):\n 1. (rho, rho'')\n    \\<in> {(rho, rho').\n           \\<forall>xs.\n              sameDom (rho xs) (rho' xs) \\<and>\n              liftAll2 (#=) (rho xs) (rho' xs)}", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           liftAll2 (#=) (rho xs) (rho' xs);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           liftAll2 (#=) (rho' xs) (rho'' xs)\\<rbrakk>\n       \\<Longrightarrow> sameDom (rho xs) (rho'' xs)\n 2. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           liftAll2 (#=) (rho xs) (rho' xs);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           liftAll2 (#=) (rho' xs) (rho'' xs)\\<rbrakk>\n       \\<Longrightarrow> liftAll2 (#=) (rho xs) (rho'' xs)", "using sameDom_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>sameDom ?inp ?inp'; sameDom ?inp' ?inp''\\<rbrakk>\n  \\<Longrightarrow> sameDom ?inp ?inp''\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           liftAll2 (#=) (rho xs) (rho' xs);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           liftAll2 (#=) (rho' xs) (rho'' xs)\\<rbrakk>\n       \\<Longrightarrow> sameDom (rho xs) (rho'' xs)\n 2. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           liftAll2 (#=) (rho xs) (rho' xs);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           liftAll2 (#=) (rho' xs) (rho'' xs)\\<rbrakk>\n       \\<Longrightarrow> liftAll2 (#=) (rho xs) (rho'' xs)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           liftAll2 (#=) (rho xs) (rho' xs);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           liftAll2 (#=) (rho' xs) (rho'' xs)\\<rbrakk>\n       \\<Longrightarrow> liftAll2 (#=) (rho xs) (rho'' xs)", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i v1 v2.\n                            rho xs i = Some v1 \\<and>\n                            rho'' xs i = Some v2 \\<longrightarrow>\n                            v1 #= v2", "proof(auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "fix xs x X X''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "assume rho: \"rho xs x = Some X\" and rho'': \"rho'' xs x = Some X''\""], ["proof (state)\nthis:\n  rho xs x = Some X\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "moreover"], ["proof (state)\nthis:\n  rho xs x = Some X\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "have \"(rho xs x = None) = (rho' xs x = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rho xs x = None) = (rho' xs x = None)", "using alpha1"], ["proof (prove)\nusing this:\n  rho &= rho'\n\ngoal (1 subgoal):\n 1. (rho xs x = None) = (rho' xs x = None)", "unfolding alphaEnv_def sameDom_def"], ["proof (prove)\nusing this:\n  (rho, rho')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n            liftAll2 (#=) (rho xs) (rho' xs)}\n\ngoal (1 subgoal):\n 1. (rho xs x = None) = (rho' xs x = None)", "by auto"], ["proof (state)\nthis:\n  (rho xs x = None) = (rho' xs x = None)\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "ultimately"], ["proof (chain)\npicking this:\n  rho xs x = Some X\n  rho'' xs x = Some X''\n  (rho xs x = None) = (rho' xs x = None)", "obtain X' where rho': \"rho' xs x = Some X'\""], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  rho'' xs x = Some X''\n  (rho xs x = None) = (rho' xs x = None)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        rho' xs x = Some X' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rho' xs x = Some X'\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "hence \"X #= X'\""], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n\ngoal (1 subgoal):\n 1. X #= X'", "using alpha1 rho"], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n  rho &= rho'\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. X #= X'", "unfolding alphaEnv_def liftAll2_def"], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n  (rho, rho')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            sameDom (rho xs) (rho' xs) \\<and>\n            (\\<forall>i v1 v2.\n                rho xs i = Some v1 \\<and>\n                rho' xs i = Some v2 \\<longrightarrow>\n                v1 #= v2)}\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. X #= X'", "by auto"], ["proof (state)\nthis:\n  X #= X'\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "moreover"], ["proof (state)\nthis:\n  X #= X'\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "have \"X' #= X''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #= X''", "using alpha2 rho' rho''"], ["proof (prove)\nusing this:\n  rho' &= rho''\n  rho' xs x = Some X'\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. X' #= X''", "unfolding alphaEnv_def liftAll2_def"], ["proof (prove)\nusing this:\n  (rho', rho'')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            sameDom (rho xs) (rho' xs) \\<and>\n            (\\<forall>i v1 v2.\n                rho xs i = Some v1 \\<and>\n                rho' xs i = Some v2 \\<longrightarrow>\n                v1 #= v2)}\n  rho' xs x = Some X'\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. X' #= X''", "by auto"], ["proof (state)\nthis:\n  X' #= X''\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "moreover"], ["proof (state)\nthis:\n  X' #= X''\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "have \"qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X", "using good rho"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. qGood X", "unfolding qGoodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. qGood X", "by auto"], ["proof (state)\nthis:\n  qGood X\n\ngoal (1 subgoal):\n 1. \\<And>xs i v1 v2.\n       \\<lbrakk>qGoodEnv rho;\n        \\<forall>xs.\n           sameDom (rho xs) (rho' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho xs i = Some v1 \\<and>\n               rho' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        \\<forall>xs.\n           sameDom (rho' xs) (rho'' xs) \\<and>\n           (\\<forall>i v1 v2.\n               rho' xs i = Some v1 \\<and>\n               rho'' xs i = Some v2 \\<longrightarrow>\n               v1 #= v2);\n        rho xs i = Some v1; rho'' xs i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "ultimately"], ["proof (chain)\npicking this:\n  X #= X'\n  X' #= X''\n  qGood X", "show \"X #= X''\""], ["proof (prove)\nusing this:\n  X #= X'\n  X' #= X''\n  qGood X\n\ngoal (1 subgoal):\n 1. X #= X''", "using alpha_trans"], ["proof (prove)\nusing this:\n  X #= X'\n  X' #= X''\n  qGood X\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #= X''", "by blast"], ["proof (state)\nthis:\n  X #= X''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pickQFreshEnv_card_of:\nassumes Vvar: \"|V| <o |UNIV :: 'var set|\" and XSvar: \"|XS| <o |UNIV :: 'var set|\" and\n        good: \"\\<forall> X \\<in> XS. qGood X\" and\n        Rhovar: \"|Rho| <o |UNIV :: 'var set|\" and RhoGood: \"\\<forall> rho \\<in> Rho. qGoodEnv rho\"\nshows\n\"pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n (\\<forall> rho \\<in> Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "let ?z =\" pickQFreshEnv xs V XS Rho\""], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "let ?V2 = \"\\<Union> rho \\<in> Rho. {x. rho xs x \\<noteq> None}\""], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "let ?W = \"V \\<union> ?V2\""], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "let ?XS2 = \"\\<Union> rho \\<in> Rho. {X. \\<exists> ys y. rho ys y = Some X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "let ?YS = \"XS \\<union> ?XS2\""], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "have \"|?W| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "have \"\\<forall> rho \\<in> Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|", "using RhoGood"], ["proof (prove)\nusing this:\n  Ball Rho qGoodEnv\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|", "unfolding qGoodEnv_iff"], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho.\n     (\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|", "using qGoodEnv_iff"], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho.\n     (\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n  qGoodEnv ?rho =\n  ((\\<forall>xs. liftAll qGood (?rho xs)) \\<and>\n   (\\<forall>ys. |{y. ?rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n   |{X. \\<exists>ys y. ?rho ys y = Some X}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "hence \"|?V2| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}| <o |UNIV|", "using var_regular_INNER Rhovar"], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho. |{x. rho xs x \\<noteq> None}| <o |UNIV|\n  regular |UNIV|\n  |Rho| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}| <o |UNIV|", "by (auto simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "thus ?thesis"], ["proof (prove)\nusing this:\n  |\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "using var_infinite_INNER Vvar card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}| <o |UNIV|\n  infinite UNIV\n  |V| <o |UNIV|\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "moreover"], ["proof (state)\nthis:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "have \"|?YS| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "have \"\\<forall> rho \\<in> Rho. |{X. \\<exists> ys y. rho ys y = Some X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "using RhoGood"], ["proof (prove)\nusing this:\n  Ball Rho qGoodEnv\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "unfolding qGoodEnv_iff"], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho.\n     (\\<forall>xs. liftAll qGood (rho xs)) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "hence \"|?XS2| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "using var_regular_INNER Rhovar"], ["proof (prove)\nusing this:\n  \\<forall>rho\\<in>Rho. |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n  regular |UNIV|\n  |Rho| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|", "by (auto simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "thus ?thesis"], ["proof (prove)\nusing this:\n  |\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "using var_infinite_INNER XSvar card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n  infinite UNIV\n  |XS| <o |UNIV|\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "moreover"], ["proof (state)\nthis:\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "have \"\\<forall> Y \\<in> ?YS. qGood Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball\n     (XS \\<union>\n      (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n     qGood", "using good RhoGood"], ["proof (prove)\nusing this:\n  Ball XS qGood\n  Ball Rho qGoodEnv\n\ngoal (1 subgoal):\n 1. Ball\n     (XS \\<union>\n      (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n     qGood", "unfolding qGoodEnv_iff liftAll_def"], ["proof (prove)\nusing this:\n  Ball XS qGood\n  \\<forall>rho\\<in>Rho.\n     (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n     (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n     |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. Ball\n     (XS \\<union>\n      (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n     qGood", "by blast"], ["proof (state)\nthis:\n  Ball\n   (XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n   qGood\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "ultimately"], ["proof (chain)\npicking this:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n  Ball\n   (XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n   qGood", "have \"?z \\<notin> ?W \\<and> (\\<forall> Y \\<in> ?YS. qFresh xs ?z Y)\""], ["proof (prove)\nusing this:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n  Ball\n   (XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n   qGood\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho\n    \\<notin> V \\<union>\n             (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n    (\\<forall>Y\\<in>XS \\<union>\n                    (\\<Union>rho\\<in>Rho.\n                        {X. \\<exists>ys y. rho ys y = Some X}).\n        qFresh xs (pickQFreshEnv xs V XS Rho) Y)", "unfolding pickQFreshEnv_def"], ["proof (prove)\nusing this:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n  Ball\n   (XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n   qGood\n\ngoal (1 subgoal):\n 1. pickQFresh xs\n     (V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}))\n     (XS \\<union>\n      (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n    \\<notin> V \\<union>\n             (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n    (\\<forall>Y\\<in>XS \\<union>\n                    (\\<Union>rho\\<in>Rho.\n                        {X. \\<exists>ys y. rho ys y = Some X}).\n        qFresh xs\n         (pickQFresh xs\n           (V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}))\n           (XS \\<union>\n            (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})))\n         Y)", "using pickQFresh_card_of[of ?W ?YS]"], ["proof (prove)\nusing this:\n  |V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o |UNIV|\n  |XS \\<union>\n   (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n  |UNIV|\n  Ball\n   (XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n   qGood\n  \\<lbrakk>|V \\<union>\n            (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None})| <o\n           |UNIV|;\n   |XS \\<union>\n    (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})| <o\n   |UNIV|;\n   Ball\n    (XS \\<union>\n     (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n    qGood\\<rbrakk>\n  \\<Longrightarrow> pickQFresh ?xs\n                     (V \\<union>\n                      (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}))\n                     (XS \\<union>\n                      (\\<Union>rho\\<in>Rho.\n                          {X. \\<exists>ys y. rho ys y = Some X}))\n                    \\<notin> V \\<union>\n                             (\\<Union>rho\\<in>Rho.\n                                 {x. rho xs x \\<noteq> None}) \\<and>\n                    (\\<forall>X\\<in>XS \\<union>\n                                    (\\<Union>rho\\<in>Rho.\n  {X. \\<exists>ys y. rho ys y = Some X}).\n                        qAFresh ?xs\n                         (pickQFresh ?xs\n                           (V \\<union>\n                            (\\<Union>rho\\<in>Rho.\n                                {x. rho xs x \\<noteq> None}))\n                           (XS \\<union>\n                            (\\<Union>rho\\<in>Rho.\n                                {X. \\<exists>ys y. rho ys y = Some X})))\n                         X \\<and>\n                        qFresh ?xs\n                         (pickQFresh ?xs\n                           (V \\<union>\n                            (\\<Union>rho\\<in>Rho.\n                                {x. rho xs x \\<noteq> None}))\n                           (XS \\<union>\n                            (\\<Union>rho\\<in>Rho.\n                                {X. \\<exists>ys y. rho ys y = Some X})))\n                         X)\n\ngoal (1 subgoal):\n 1. pickQFresh xs\n     (V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}))\n     (XS \\<union>\n      (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X}))\n    \\<notin> V \\<union>\n             (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n    (\\<forall>Y\\<in>XS \\<union>\n                    (\\<Union>rho\\<in>Rho.\n                        {X. \\<exists>ys y. rho ys y = Some X}).\n        qFresh xs\n         (pickQFresh xs\n           (V \\<union> (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}))\n           (XS \\<union>\n            (\\<Union>rho\\<in>Rho. {X. \\<exists>ys y. rho ys y = Some X})))\n         Y)", "by auto"], ["proof (state)\nthis:\n  pickQFreshEnv xs V XS Rho\n  \\<notin> V \\<union>\n           (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n  (\\<forall>Y\\<in>XS \\<union>\n                  (\\<Union>rho\\<in>Rho.\n                      {X. \\<exists>ys y. rho ys y = Some X}).\n      qFresh xs (pickQFreshEnv xs V XS Rho) Y)\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "thus ?thesis"], ["proof (prove)\nusing this:\n  pickQFreshEnv xs V XS Rho\n  \\<notin> V \\<union>\n           (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n  (\\<forall>Y\\<in>XS \\<union>\n                  (\\<Union>rho\\<in>Rho.\n                      {X. \\<exists>ys y. rho ys y = Some X}).\n      qFresh xs (pickQFreshEnv xs V XS Rho) Y)\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "unfolding qFreshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  pickQFreshEnv xs V XS Rho\n  \\<notin> V \\<union>\n           (\\<Union>rho\\<in>Rho. {x. rho xs x \\<noteq> None}) \\<and>\n  (\\<forall>Y\\<in>XS \\<union>\n                  (\\<Union>rho\\<in>Rho.\n                      {X. \\<exists>ys y. rho ys y = Some X}).\n      qFresh xs (pickQFreshEnv xs V XS Rho) Y)\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho.\n        rho xs (pickQFreshEnv xs V XS Rho) = None \\<and>\n        (\\<forall>xsa i v.\n            rho xsa i = Some v \\<longrightarrow>\n            qFresh xs (pickQFreshEnv xs V XS Rho) v))", "by(auto)"], ["proof (state)\nthis:\n  pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n  (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n  (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pickQFreshEnv:\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\"\nand XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\"\nand good: \"\\<forall> X \\<in> XS. qGood X\"\nand Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\"\nand RhoGood: \"\\<forall> rho \\<in> Rho. qGoodEnv rho\"\nshows\n\"pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n (\\<forall> rho \\<in> Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "have 1: \"|V| <o |UNIV :: 'var set| \\<and> |XS| <o |UNIV :: 'var set| \\<and> |Rho| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |V| <o |UNIV| \\<and> |XS| <o |UNIV| \\<and> |Rho| <o |UNIV|", "using assms var_infinite_INNER"], ["proof (prove)\nusing this:\n  |V| <o |UNIV| \\<or> finite V\n  |XS| <o |UNIV| \\<or> finite XS\n  Ball XS qGood\n  |Rho| <o |UNIV| \\<or> finite Rho\n  Ball Rho qGoodEnv\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. |V| <o |UNIV| \\<and> |XS| <o |UNIV| \\<and> |Rho| <o |UNIV|", "by(auto simp add: finite_ordLess_infinite2)"], ["proof (state)\nthis:\n  |V| <o |UNIV| \\<and> |XS| <o |UNIV| \\<and> |Rho| <o |UNIV|\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "apply(rule pickQFreshEnv_card_of)"], ["proof (prove)\ngoal (5 subgoals):\n 1. |V| <o |UNIV|\n 2. |XS| <o |UNIV|\n 3. Ball XS qGood\n 4. |Rho| <o |UNIV|\n 5. Ball Rho qGoodEnv", "using assms 1"], ["proof (prove)\nusing this:\n  |V| <o |UNIV| \\<or> finite V\n  |XS| <o |UNIV| \\<or> finite XS\n  Ball XS qGood\n  |Rho| <o |UNIV| \\<or> finite Rho\n  Ball Rho qGoodEnv\n  |V| <o |UNIV| \\<and> |XS| <o |UNIV| \\<and> |Rho| <o |UNIV|\n\ngoal (5 subgoals):\n 1. |V| <o |UNIV|\n 2. |XS| <o |UNIV|\n 3. Ball XS qGood\n 4. |Rho| <o |UNIV|\n 5. Ball Rho qGoodEnv", "by auto"], ["proof (state)\nthis:\n  pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n  (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n  (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary obtain_qFreshEnv:\nfixes XS::\"('index,'bindex,'varSort,'var,'opSym)qTerm set\" and\n      Rho::\"('index,'bindex,'varSort,'var,'opSym)qEnv set\" and rho\nassumes Vvar: \"|V| <o |UNIV :: 'var set| \\<or> finite V\"\nand XSvar: \"|XS| <o |UNIV :: 'var set| \\<or> finite XS\"\nand good: \"\\<forall> X \\<in> XS. qGood X\"\nand Rhovar: \"|Rho| <o |UNIV :: 'var set| \\<or> finite Rho\"\nand RhoGood: \"\\<forall> rho \\<in> Rho. qGoodEnv rho\"\nshows\n\"\\<exists> z. z \\<notin> V \\<and>\n (\\<forall> X \\<in> XS. qFresh xs z X) \\<and> (\\<forall> rho \\<in> Rho. qFreshEnv xs z rho)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qFresh xs z X) \\<and>\n       (\\<forall>rho\\<in>Rho. qFreshEnv xs z rho)", "apply(rule exI[of _ \"pickQFreshEnv xs V XS Rho\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "using assms"], ["proof (prove)\nusing this:\n  |V| <o |UNIV| \\<or> finite V\n  |XS| <o |UNIV| \\<or> finite XS\n  Ball XS qGood\n  |Rho| <o |UNIV| \\<or> finite Rho\n  Ball Rho qGoodEnv\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs V XS Rho \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS. qFresh xs (pickQFreshEnv xs V XS Rho) X) \\<and>\n    (\\<forall>rho\\<in>Rho. qFreshEnv xs (pickQFreshEnv xs V XS Rho) rho)", "by(rule pickQFreshEnv)"], ["", "subsection \\<open>Parallel substitution\\<close>"], ["", "(* I shall prove only a *minimal* collection of facts for quasi-\n[parallel substitution], just enough\n  to show that substitution preserves alpha.  The other properties shall be proved\n  for alpha-equivalence directly.   *)"], ["", "definition aux_qPsubst_ignoreFirst ::\n\"('index,'bindex,'varSort,'var,'opSym)qEnv * ('index,'bindex,'varSort,'var,'opSym)qTerm +\n ('index,'bindex,'varSort,'var,'opSym)qEnv * ('index,'bindex,'varSort,'var,'opSym)qAbs\n \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)qTermItem\"\nwhere\n\"aux_qPsubst_ignoreFirst K ==\n case K of Inl (rho,X) \\<Rightarrow> termIn X\n          |Inr (rho,A) \\<Rightarrow> absIn A\""], ["", "lemma aux_qPsubst_ignoreFirst_qTermLessQSwapped_wf:\n\"wf(inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst)", "using qTermQSwappedLess_wf wf_inv_image"], ["proof (prove)\nusing this:\n  wf qTermQSwappedLess\n  wf ?r \\<Longrightarrow> wf (inv_image ?r ?f)\n\ngoal (1 subgoal):\n 1. wf (inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst)", "by auto"], ["", "function\nqPsubst ::\n\"('index,'bindex,'varSort,'var,'opSym)qEnv \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)qTerm \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand\nqPsubstAbs ::\n\"('index,'bindex,'varSort,'var,'opSym)qEnv \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)qAbs \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)qAbs\"\nwhere\n\"qPsubst rho (qVar xs x) = (case rho xs x of None \\<Rightarrow> qVar xs x| Some X \\<Rightarrow> X)\"\n|\n\"qPsubst rho (qOp delta inp binp) =\n qOp delta (lift (qPsubst rho) inp) (lift (qPsubstAbs rho) binp)\"\n|\n\"qPsubstAbs rho (qAbs xs x X) =\n (let x' = pickQFreshEnv xs {x} {X} {rho} in qAbs xs x' (qPsubst rho (X #[[x' \\<and> x]]_xs)))\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>rho xs xa.\n                   x = Inl (rho, qVar xs xa) \\<Longrightarrow> P;\n        \\<And>rho delta inp binp.\n           x = Inl (rho, qOp delta inp binp) \\<Longrightarrow> P;\n        \\<And>rho xs xa X.\n           x = Inr (rho, qAbs xs xa X) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>rho xs x rhoa xsa xa.\n       Inl (rho, qVar xs x) = Inl (rhoa, qVar xsa xa) \\<Longrightarrow>\n       termIn\n        (case rho xs x of None \\<Rightarrow> qVar xs x\n         | Some X \\<Rightarrow> X) =\n       termIn\n        (case rhoa xsa xa of None \\<Rightarrow> qVar xsa xa\n         | Some X \\<Rightarrow> X)\n 3. \\<And>rho xs x rhoa delta inp binp.\n       Inl (rho, qVar xs x) =\n       Inl (rhoa, qOp delta inp binp) \\<Longrightarrow>\n       termIn\n        (case rho xs x of None \\<Rightarrow> qVar xs x\n         | Some X \\<Rightarrow> X) =\n       termIn\n        (qOp delta\n          (lift\n            (\\<lambda>x1. projl (qPsubst_qPsubstAbs_sumC (Inl (rhoa, x1))))\n            inp)\n          (lift\n            (\\<lambda>x1. projr (qPsubst_qPsubstAbs_sumC (Inr (rhoa, x1))))\n            binp))\n 4. \\<And>rho xs x rhoa xsa xa X.\n       Inl (rho, qVar xs x) = Inr (rhoa, qAbs xsa xa X) \\<Longrightarrow>\n       termIn\n        (case rho xs x of None \\<Rightarrow> qVar xs x\n         | Some X \\<Rightarrow> X) =\n       absIn\n        (let x' = pickQFreshEnv xsa {xa} {X} {rhoa}\n         in qAbs xsa x'\n             (projl\n               (qPsubst_qPsubstAbs_sumC\n                 (Inl (rhoa, X #[[x' \\<and> xa]]_xsa)))))\n 5. \\<And>rho delta inp binp rhoa deltaa inpa binpa.\n       Inl (rho, qOp delta inp binp) =\n       Inl (rhoa, qOp deltaa inpa binpa) \\<Longrightarrow>\n       termIn\n        (qOp delta\n          (lift\n            (\\<lambda>x1. projl (qPsubst_qPsubstAbs_sumC (Inl (rho, x1))))\n            inp)\n          (lift\n            (\\<lambda>x1. projr (qPsubst_qPsubstAbs_sumC (Inr (rho, x1))))\n            binp)) =\n       termIn\n        (qOp deltaa\n          (lift\n            (\\<lambda>x1. projl (qPsubst_qPsubstAbs_sumC (Inl (rhoa, x1))))\n            inpa)\n          (lift\n            (\\<lambda>x1. projr (qPsubst_qPsubstAbs_sumC (Inr (rhoa, x1))))\n            binpa))\n 6. \\<And>rho delta inp binp rhoa xs x X.\n       Inl (rho, qOp delta inp binp) =\n       Inr (rhoa, qAbs xs x X) \\<Longrightarrow>\n       termIn\n        (qOp delta\n          (lift\n            (\\<lambda>x1. projl (qPsubst_qPsubstAbs_sumC (Inl (rho, x1))))\n            inp)\n          (lift\n            (\\<lambda>x1. projr (qPsubst_qPsubstAbs_sumC (Inr (rho, x1))))\n            binp)) =\n       absIn\n        (let x' = pickQFreshEnv xs {x} {X} {rhoa}\n         in qAbs xs x'\n             (projl\n               (qPsubst_qPsubstAbs_sumC\n                 (Inl (rhoa, X #[[x' \\<and> x]]_xs)))))\n 7. \\<And>rho xs x X rhoa xsa xa Xa.\n       Inr (rho, qAbs xs x X) = Inr (rhoa, qAbs xsa xa Xa) \\<Longrightarrow>\n       absIn\n        (let x' = pickQFreshEnv xs {x} {X} {rho}\n         in qAbs xs x'\n             (projl\n               (qPsubst_qPsubstAbs_sumC\n                 (Inl (rho, X #[[x' \\<and> x]]_xs))))) =\n       absIn\n        (let x' = pickQFreshEnv xsa {xa} {Xa} {rhoa}\n         in qAbs xsa x'\n             (projl\n               (qPsubst_qPsubstAbs_sumC\n                 (Inl (rhoa, Xa #[[x' \\<and> xa]]_xsa)))))", "by(pat_completeness, auto)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All qPsubst_qPsubstAbs_dom", "apply(relation \"inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf (inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst)\n 2. \\<And>rho delta inp binp i v.\n       inp i = Some v \\<Longrightarrow>\n       (Inl (rho, v), Inl (rho, qOp delta inp binp))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst\n 3. \\<And>rho delta inp binp i v.\n       binp i = Some v \\<Longrightarrow>\n       (Inr (rho, v), Inl (rho, qOp delta inp binp))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst\n 4. \\<And>rho xs x X xa.\n       xa = pickQFreshEnv xs {x} {X} {rho} \\<Longrightarrow>\n       (Inl (rho, X #[[xa \\<and> x]]_xs), Inr (rho, qAbs xs x X))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst", "apply(simp add: aux_qPsubst_ignoreFirst_qTermLessQSwapped_wf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rho delta inp binp i v.\n       inp i = Some v \\<Longrightarrow>\n       (Inl (rho, v), Inl (rho, qOp delta inp binp))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst\n 2. \\<And>rho delta inp binp i v.\n       binp i = Some v \\<Longrightarrow>\n       (Inr (rho, v), Inl (rho, qOp delta inp binp))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst\n 3. \\<And>rho xs x X xa.\n       xa = pickQFreshEnv xs {x} {X} {rho} \\<Longrightarrow>\n       (Inl (rho, X #[[xa \\<and> x]]_xs), Inr (rho, qAbs xs x X))\n       \\<in> inv_image qTermQSwappedLess aux_qPsubst_ignoreFirst", "by(auto simp add: qTermQSwappedLess_def qTermLess_modulo_def\n   aux_qPsubst_ignoreFirst_def qSwap_qSwapped)"], ["", "abbreviation qPsubst_abbrev ::\n\"('index,'bindex,'varSort,'var,'opSym)qTerm \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)qEnv \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)qTerm\" (\"_ #[[_]]\")\nwhere \"X #[[rho]] == qPsubst rho X\""], ["", "abbreviation qPsubstAbs_abbrev ::\n\"('index,'bindex,'varSort,'var,'opSym)qAbs \\<Rightarrow> ('index,'bindex,'varSort,'var,'opSym)qEnv \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)qAbs\" (\"_ $[[_]]\")\nwhere \"A $[[rho]] == qPsubstAbs rho A\""], ["", "lemma qPsubstAll_preserves_qGoodAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and rho\nassumes GOOD_ENV: \"qGoodEnv rho\"\nshows\n\"(qGood X \\<longrightarrow> qGood (X #[[rho]])) \\<and> (qGoodAbs A \\<longrightarrow> qGoodAbs (A $[[rho]]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> qGood X #[[rho]]) \\<and>\n    (qGoodAbs A \\<longrightarrow> qGoodAbs A $[[rho]])", "proof(induction rule: qTerm_induct[of _ _ X A])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood qOp delta inp binp #[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x. qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood qOp delta inp binp #[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]", "using GOOD_ENV"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]", "unfolding qGoodEnv_iff liftAll_def"], ["proof (prove)\nusing this:\n  (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|) \\<and>\n  |{X. \\<exists>ys y. rho ys y = Some X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]", "by(cases \"rho xs x\", auto)"], ["proof (state)\nthis:\n  qGood (qVar xs x) \\<longrightarrow> qGood qVar xs x #[[rho]]\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  liftAll (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]]) inp\n  liftAll (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<Longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "assume g: \"qGood (qOp delta inp binp)\""], ["proof (state)\nthis:\n  qGood (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<Longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "hence 0: \"liftAll qGood (lift (qPsubst rho) inp) \\<and> \n              liftAll qGoodAbs (lift (qPsubstAbs rho) binp)\""], ["proof (prove)\nusing this:\n  qGood (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. liftAll qGood (lift (qPsubst rho) inp) \\<and>\n    liftAll qGoodAbs (lift (qPsubstAbs rho) binp)", "using Op"], ["proof (prove)\nusing this:\n  qGood (qOp delta inp binp)\n  liftAll (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]]) inp\n  liftAll (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n   binp\n\ngoal (1 subgoal):\n 1. liftAll qGood (lift (qPsubst rho) inp) \\<and>\n    liftAll qGoodAbs (lift (qPsubstAbs rho) binp)", "unfolding liftAll_lift_comp comp_def"], ["proof (prove)\nusing this:\n  qGood (qOp delta inp binp)\n  liftAll (\\<lambda>a. qGood a \\<longrightarrow> qGood a #[[rho]]) inp\n  liftAll (\\<lambda>a. qGoodAbs a \\<longrightarrow> qGoodAbs a $[[rho]])\n   binp\n\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>x. qGood x #[[rho]]) inp \\<and>\n    liftAll (\\<lambda>x. qGoodAbs x $[[rho]]) binp", "by (simp_all add: Let_def liftAll_mp)"], ["proof (state)\nthis:\n  liftAll qGood (lift (qPsubst rho) inp) \\<and>\n  liftAll qGoodAbs (lift (qPsubstAbs rho) binp)\n\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<Longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "have \"{i. lift (qPsubst rho) inp i \\<noteq> None} = {i. inp i \\<noteq> None} \\<and> \n     {i. lift (qPsubstAbs rho) binp i \\<noteq> None} = {i. binp i \\<noteq> None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. lift (qPsubst rho) inp i \\<noteq> None} =\n    {i. inp i \\<noteq> None} \\<and>\n    {i. lift (qPsubstAbs rho) binp i \\<noteq> None} =\n    {i. binp i \\<noteq> None}", "by simp (meson lift_Some)"], ["proof (state)\nthis:\n  {i. lift (qPsubst rho) inp i \\<noteq> None} =\n  {i. inp i \\<noteq> None} \\<and>\n  {i. lift (qPsubstAbs rho) binp i \\<noteq> None} =\n  {i. binp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<Longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "hence \"|{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV:: 'var set|\" \n    and \"|{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV:: 'var set|\""], ["proof (prove)\nusing this:\n  {i. lift (qPsubst rho) inp i \\<noteq> None} =\n  {i. inp i \\<noteq> None} \\<and>\n  {i. lift (qPsubstAbs rho) binp i \\<noteq> None} =\n  {i. binp i \\<noteq> None}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV| &&&\n    |{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV|", "using g"], ["proof (prove)\nusing this:\n  {i. lift (qPsubst rho) inp i \\<noteq> None} =\n  {i. inp i \\<noteq> None} \\<and>\n  {i. lift (qPsubstAbs rho) binp i \\<noteq> None} =\n  {i. binp i \\<noteq> None}\n  qGood (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV| &&&\n    |{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV|", "by (auto simp: liftAll_def)"], ["proof (state)\nthis:\n  |{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV|\n  |{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood (qOp delta inp binp) \\<Longrightarrow>\n    qGood qOp delta inp binp #[[rho]]", "thus \"qGood qOp delta inp binp #[[rho]]\""], ["proof (prove)\nusing this:\n  |{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV|\n  |{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. qGood qOp delta inp binp #[[rho]]", "using 0"], ["proof (prove)\nusing this:\n  |{i. \\<exists>y. lift (qPsubst rho) inp i = Some y}| <o |UNIV|\n  |{i. \\<exists>y. lift (qPsubstAbs rho) binp i = Some y}| <o |UNIV|\n  liftAll qGood (lift (qPsubst rho) inp) \\<and>\n  liftAll qGoodAbs (lift (qPsubstAbs rho) binp)\n\ngoal (1 subgoal):\n 1. qGood qOp delta inp binp #[[rho]]", "by simp"], ["proof (state)\nthis:\n  qGood qOp delta inp binp #[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGood (qOp delta inp binp) \\<longrightarrow>\n  qGood qOp delta inp binp #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "case (Abs xs x X)"], ["proof (state)\nthis:\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y22 \\<longrightarrow> qGood ?Y22 #[[rho]]\n  qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  qGood ?Y22 \\<longrightarrow> qGood ?Y22 #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs qAbs xs x X $[[rho]]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "assume g: \"qGoodAbs (qAbs xs x X)\""], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "let ?x' = \"pickQFreshEnv xs {x} {X} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "let ?X' = \"X #[[?x' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "have \"qGood ?X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)", "using g qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x X)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "moreover"], ["proof (state)\nthis:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "have \"(X,?X') \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped", "using qSwap_qSwapped"], ["proof (prove)\nusing this:\n  (?X, ?X #[[?x \\<and> ?y]]_?zs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped", "by fastforce"], ["proof (state)\nthis:\n  (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "ultimately"], ["proof (chain)\npicking this:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n  (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped", "have \"qGood (qPsubst rho ?X')\""], ["proof (prove)\nusing this:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n  (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. qGood X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]", "using Abs.IH"], ["proof (prove)\nusing this:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n  (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y22 \\<longrightarrow> qGood ?Y22 #[[rho]]\n  qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  qGood ?Y22 \\<longrightarrow> qGood ?Y22 #[[rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]", "by simp"], ["proof (state)\nthis:\n  qGood X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X) \\<Longrightarrow> qGoodAbs qAbs xs x X $[[rho]]", "thus \"qGoodAbs ((qAbs xs x X) $[[rho]])\""], ["proof (prove)\nusing this:\n  qGood X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGoodAbs qAbs xs x X $[[rho]]", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  qGoodAbs qAbs xs x X $[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X) \\<longrightarrow> qGoodAbs qAbs xs x X $[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qPsubst_preserves_qGood:\n\"\\<lbrakk>qGoodEnv rho; qGood X\\<rbrakk> \\<Longrightarrow> qGood (X #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGood X\\<rbrakk>\n    \\<Longrightarrow> qGood X #[[rho]]", "using qPsubstAll_preserves_qGoodAll"], ["proof (prove)\nusing this:\n  qGoodEnv ?rho \\<Longrightarrow>\n  (qGood ?X \\<longrightarrow> qGood ?X #[[?rho]]) \\<and>\n  (qGoodAbs ?A \\<longrightarrow> qGoodAbs ?A $[[?rho]])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGood X\\<rbrakk>\n    \\<Longrightarrow> qGood X #[[rho]]", "by auto"], ["", "corollary qPsubstAbs_preserves_qGoodAbs:\n\"\\<lbrakk>qGoodEnv rho; qGoodAbs A\\<rbrakk> \\<Longrightarrow> qGoodAbs (A $[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGoodAbs A\\<rbrakk>\n    \\<Longrightarrow> qGoodAbs A $[[rho]]", "using qPsubstAll_preserves_qGoodAll"], ["proof (prove)\nusing this:\n  qGoodEnv ?rho \\<Longrightarrow>\n  (qGood ?X \\<longrightarrow> qGood ?X #[[?rho]]) \\<and>\n  (qGoodAbs ?A \\<longrightarrow> qGoodAbs ?A $[[?rho]])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGoodAbs A\\<rbrakk>\n    \\<Longrightarrow> qGoodAbs A $[[rho]]", "by auto"], ["", "lemma qPsubstAll_preserves_qFreshAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and rho\nassumes GOOD_ENV: \"qGoodEnv rho\"\nshows\n\"(qFresh zs z X \\<longrightarrow>\n  (qGood X \\<and> qFreshEnv zs z rho \\<longrightarrow> qFresh zs z (X #[[rho]]))) \\<and>\n (qFreshAbs zs z A \\<longrightarrow>\n  (qGoodAbs A \\<and> qFreshEnv zs z rho \\<longrightarrow> qFreshAbs zs z (A $[[rho]])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qFresh zs z X \\<longrightarrow>\n     qGood X \\<and> qFreshEnv zs z rho \\<longrightarrow>\n     qFresh zs z X #[[rho]]) \\<and>\n    (qFreshAbs zs z A \\<longrightarrow>\n     qGoodAbs A \\<and> qFreshEnv zs z rho \\<longrightarrow>\n     qFreshAbs zs z A $[[rho]])", "proof(induction rule: qTerm_induct[of _ _ X A])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       qFresh zs z (qVar xs x) \\<longrightarrow>\n       qGood (qVar xs x) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFresh zs z qVar xs x #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qFresh zs z a \\<longrightarrow>\n                     qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                     qFresh zs z a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qFreshAbs zs z a \\<longrightarrow>\n             qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n             qFreshAbs zs z a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFresh zs z qOp delta inp binp #[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       qFresh zs z (qVar xs x) \\<longrightarrow>\n       qGood (qVar xs x) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFresh zs z qVar xs x #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qFresh zs z a \\<longrightarrow>\n                     qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                     qFresh zs z a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qFreshAbs zs z a \\<longrightarrow>\n             qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n             qFreshAbs zs z a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFresh zs z qOp delta inp binp #[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh zs z (qVar xs x) \\<longrightarrow>\n    qGood (qVar xs x) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n    qFresh zs z qVar xs x #[[rho]]", "unfolding qFreshEnv_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh zs z (qVar xs x) \\<longrightarrow>\n    qGood (qVar xs x) \\<and>\n    rho zs z = None \\<and>\n    (\\<forall>xs i v.\n        rho xs i = Some v \\<longrightarrow> qFresh zs z v) \\<longrightarrow>\n    qFresh zs z qVar xs x #[[rho]]", "by (cases \"rho xs x\") auto"], ["proof (state)\nthis:\n  qFresh zs z (qVar xs x) \\<longrightarrow>\n  qGood (qVar xs x) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n  qFresh zs z qVar xs x #[[rho]]\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qFresh zs z a \\<longrightarrow>\n                     qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                     qFresh zs z a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qFreshAbs zs z a \\<longrightarrow>\n             qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n             qFreshAbs zs z a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFresh zs z qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qFresh zs z a \\<longrightarrow>\n                     qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                     qFresh zs z a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qFreshAbs zs z a \\<longrightarrow>\n             qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n             qFreshAbs zs z a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFresh zs z qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>a.\n       qFresh zs z a \\<longrightarrow>\n       qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFresh zs z a #[[rho]])\n   inp\n  liftAll\n   (\\<lambda>a.\n       qFreshAbs zs z a \\<longrightarrow>\n       qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFreshAbs zs z a $[[rho]])\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qFresh zs z a \\<longrightarrow>\n                     qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                     qFresh zs z a #[[rho]])\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qFreshAbs zs z a \\<longrightarrow>\n             qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n             qFreshAbs zs z a $[[rho]])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFresh zs z qOp delta inp binp #[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "thus ?case"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>a.\n       qFresh zs z a \\<longrightarrow>\n       qGood a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFresh zs z a #[[rho]])\n   inp\n  liftAll\n   (\\<lambda>a.\n       qFreshAbs zs z a \\<longrightarrow>\n       qGoodAbs a \\<and> qFreshEnv zs z rho \\<longrightarrow>\n       qFreshAbs zs z a $[[rho]])\n   binp\n\ngoal (1 subgoal):\n 1. qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n    qGood (qOp delta inp binp) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n    qFresh zs z qOp delta inp binp #[[rho]]", "by (auto simp add: lift_def liftAll_def qFreshEnv_def split: option.splits)"], ["proof (state)\nthis:\n  qFresh zs z (qOp delta inp binp) \\<longrightarrow>\n  qGood (qOp delta inp binp) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n  qFresh zs z qOp delta inp binp #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "case (Abs xs x X)"], ["proof (state)\nthis:\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  qFresh zs z ?Y22 \\<longrightarrow>\n  qGood ?Y22 \\<and> qFreshEnv zs z rho \\<longrightarrow>\n  qFresh zs z ?Y22 #[[rho]]\n  qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  qFresh zs z ?Y22 \\<longrightarrow>\n  qGood ?Y22 \\<and> qFreshEnv zs z rho \\<longrightarrow>\n  qFresh zs z ?Y22 #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qFresh zs z Y \\<longrightarrow>\n                   qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n                   qFresh zs z Y #[[rho]];\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qFresh zs z Y \\<longrightarrow>\n           qGood Y \\<and> qFreshEnv zs z rho \\<longrightarrow>\n           qFresh zs z Y #[[rho]]\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs x X) \\<and>\n                         qFreshEnv zs z rho \\<longrightarrow>\n                         qFreshAbs zs z qAbs xs x X $[[rho]]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n    qGoodAbs (qAbs xs x X) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n    qFreshAbs zs z qAbs xs x X $[[rho]]", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "assume q: \"qFreshAbs zs z (qAbs xs x X)\"\n    \"qGoodAbs (qAbs xs x X)\" \"qFreshEnv zs z rho\""], ["proof (state)\nthis:\n  qFreshAbs zs z (qAbs xs x X)\n  qGoodAbs (qAbs xs x X)\n  qFreshEnv zs z rho\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "let ?x' = \"pickQFreshEnv xs {x} {X} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "let ?X' = \"X #[[?x' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "have x': \"qFresh xs ?x' X \\<and> qFreshEnv xs ?x' rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "using q GOOD_ENV"], ["proof (prove)\nusing this:\n  qFreshAbs zs z (qAbs xs x X)\n  qGoodAbs (qAbs xs x X)\n  qFreshEnv zs z rho\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "by(auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n  qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "hence goodX': \"qGood ?X'\""], ["proof (prove)\nusing this:\n  qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n  qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho\n\ngoal (1 subgoal):\n 1. qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)", "using q qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n  qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho\n  qFreshAbs zs z (qAbs xs x X)\n  qGoodAbs (qAbs xs x X)\n  qFreshEnv zs z rho\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "have XX': \"(X,?X') \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped", "using qSwap_qSwapped"], ["proof (prove)\nusing this:\n  (?X, ?X #[[?x \\<and> ?y]]_?zs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped", "by fastforce"], ["proof (state)\nthis:\n  (X, X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "have  \"(zs = xs \\<and> z = ?x') \\<or> qFresh zs z (qPsubst rho ?X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zs = xs \\<and> z = pickQFreshEnv xs {x} {X} {rho} \\<or>\n    qFresh zs z X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]", "by (meson qSwap_preserves_qFresh_distinct \n    Abs.IH(1) XX' goodX' q qAbs_alphaAbs_qSwap_qFresh qFreshAbs.simps \n    qFreshAbs_preserves_alphaAbs1 qSwap_preserves_qGood2 x')"], ["proof (state)\nthis:\n  zs = xs \\<and> z = pickQFreshEnv xs {x} {X} {rho} \\<or>\n  qFresh zs z X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qFreshAbs zs z (qAbs xs x X); qGoodAbs (qAbs xs x X);\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z qAbs xs x X $[[rho]]", "thus \"qFreshAbs zs z ((qAbs xs x X) $[[rho]])\""], ["proof (prove)\nusing this:\n  zs = xs \\<and> z = pickQFreshEnv xs {x} {X} {rho} \\<or>\n  qFresh zs z X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z qAbs xs x X $[[rho]]", "by simp (meson qFreshAbs.simps)+"], ["proof (state)\nthis:\n  qFreshAbs zs z qAbs xs x X $[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n  qGoodAbs (qAbs xs x X) \\<and> qFreshEnv zs z rho \\<longrightarrow>\n  qFreshAbs zs z qAbs xs x X $[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qPsubst_preserves_qFresh:\n\"\\<lbrakk>qGood X; qGoodEnv rho; qFresh zs z X; qFreshEnv zs z rho\\<rbrakk>\n \\<Longrightarrow> qFresh zs z (X #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGood X; qGoodEnv rho; qFresh zs z X;\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFresh zs z X #[[rho]]", "by(simp add: qPsubstAll_preserves_qFreshAll)"], ["", "lemma qPsubstAbs_preserves_qFreshAbs:\n\"\\<lbrakk>qGoodAbs A; qGoodEnv rho; qFreshAbs zs z A; qFreshEnv zs z rho\\<rbrakk>\n \\<Longrightarrow> qFreshAbs zs z (A $[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodAbs A; qGoodEnv rho; qFreshAbs zs z A;\n     qFreshEnv zs z rho\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z A $[[rho]]", "by(simp add: qPsubstAll_preserves_qFreshAll)"], ["", "text\\<open>While in general we try to avoid proving facts in parallel,\n   here we seem to have no choice -- it is the first time we must use mutual \ninduction:\\<close>"], ["", "lemma qPsubstAll_preserves_alphaAll_qSwapAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and\n      rho::\"('index,'bindex,'varSort,'var,'opSym)qEnv\"\nassumes goodRho: \"qGoodEnv rho\"\nshows\n\"(qGood X \\<longrightarrow>\n  (\\<forall> Y. X #= Y \\<longrightarrow> (X #[[rho]]) #= (Y #[[rho]])) \\<and>\n  (\\<forall> xs z1 z2. qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n               ((X #[[z1 \\<and> z2]]_xs) #[[rho]]) #= ((X #[[rho]]) #[[z1 \\<and> z2]]_xs))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  (\\<forall> B. A $= B \\<longrightarrow> (A $[[rho]]) $= (B $[[rho]])) \\<and>\n  (\\<forall> xs z1 z2. qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n               ((A $[[z1 \\<and> z2]]_xs) $[[rho]]) $= ((A $[[rho]]) $[[z1 \\<and> z2]]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     (\\<forall>Y. X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]) \\<and>\n     (\\<forall>xs z1 z2.\n         qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n         X #[[rho]] #[[z1 \\<and> z2]]_xs)) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     (\\<forall>B. A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]) \\<and>\n     (\\<forall>xs z1 z2.\n         qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n         A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n         A $[[rho]] $[[z1 \\<and> z2]]_xs))", "proof(induction rule: qGood_qTerm_induct_mutual)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          qVar xs x #= Y \\<longrightarrow> qVar xs x #[[rho]] #= Y #[[rho]]\n 2. \\<And>xs x.\n       \\<forall>xsa z1 z2.\n          qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n          qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 4. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 5. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 6. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Var1 xs x)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          qVar xs x #= Y \\<longrightarrow> qVar xs x #[[rho]] #= Y #[[rho]]\n 2. \\<And>xs x.\n       \\<forall>xsa z1 z2.\n          qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n          qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 4. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 5. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 6. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       qVar xs x #= Y \\<longrightarrow> qVar xs x #[[rho]] #= Y #[[rho]]", "by (metis alpha_refl goodRho qGood.simps(1) qPsubst_preserves_qGood qVar_alpha_iff)"], ["proof (state)\nthis:\n  \\<forall>Y.\n     qVar xs x #= Y \\<longrightarrow> qVar xs x #[[rho]] #= Y #[[rho]]\n\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       \\<forall>xsa z1 z2.\n          qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n          qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 5. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       \\<forall>xsa z1 z2.\n          qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n          qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 5. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Var2 xs x)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>xs x.\n       \\<forall>xsa z1 z2.\n          qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n          qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 5. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xsa z1 z2.\n       qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "fix s::'sort and zs z1 z2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "assume FreshEnv: \"qFreshEnv zs z1 rho\" \"qFreshEnv zs z2 rho\""], ["proof (state)\nthis:\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "hence n: \"rho zs z1 = None \\<and> rho zs z2 = None\""], ["proof (prove)\nusing this:\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. rho zs z1 = None \\<and> rho zs z2 = None", "unfolding qFreshEnv_def"], ["proof (prove)\nusing this:\n  rho zs z1 = None \\<and> (\\<forall>xs. liftAll (qFresh zs z1) (rho xs))\n  rho zs z2 = None \\<and> (\\<forall>xs. liftAll (qFresh zs z2) (rho xs))\n\ngoal (1 subgoal):\n 1. rho zs z1 = None \\<and> rho zs z2 = None", "by simp"], ["proof (state)\nthis:\n  rho zs z1 = None \\<and> rho zs z2 = None\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "let ?Left = \"qPsubst rho ((qVar xs x) #[[z1 \\<and> z2]]_zs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "let ?Right = \"(qPsubst rho (qVar xs x)) #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "have \"qGood (qVar xs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qVar xs x)", "by simp"], ["proof (state)\nthis:\n  qGood (qVar xs x)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "hence \"qGood ((qVar xs x) #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  qGood (qVar xs x)\n\ngoal (1 subgoal):\n 1. qGood (qVar xs x #[[z1 \\<and> z2]]_zs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (qVar xs x)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (qVar xs x #[[z1 \\<and> z2]]_zs)", "by blast"], ["proof (state)\nthis:\n  qGood (qVar xs x #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "hence goodLeft: \"qGood ?Left\""], ["proof (prove)\nusing this:\n  qGood (qVar xs x #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. qGood qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]]", "using goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (qVar xs x #[[z1 \\<and> z2]]_zs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]]", "by blast"], ["proof (state)\nthis:\n  qGood qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n                         qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa", "show \"?Left #= ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "proof(cases \"rho xs x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "case None"], ["proof (state)\nthis:\n  rho xs x = None\n\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "hence \"rho xs (x @xs[z1 \\<and> z2]_zs) = None\""], ["proof (prove)\nusing this:\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. rho xs (x @xs[z1 \\<and> z2]_zs) = None", "using n"], ["proof (prove)\nusing this:\n  rho xs x = None\n  rho zs z1 = None \\<and> rho zs z2 = None\n\ngoal (1 subgoal):\n 1. rho xs (x @xs[z1 \\<and> z2]_zs) = None", "unfolding sw_def"], ["proof (prove)\nusing this:\n  rho xs x = None\n  rho zs z1 = None \\<and> rho zs z2 = None\n\ngoal (1 subgoal):\n 1. rho xs\n     (if zs = xs then if x = z1 then z2 else if x = z2 then z1 else x\n      else x) =\n    None", "by auto"], ["proof (state)\nthis:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = None\n\ngoal (2 subgoals):\n 1. rho xs x = None \\<Longrightarrow>\n    qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n 2. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "thus ?thesis"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = None\n\ngoal (1 subgoal):\n 1. qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "using None"], ["proof (prove)\nusing this:\n  rho xs (x @xs[z1 \\<and> z2]_zs) = None\n  rho xs x = None\n\ngoal (1 subgoal):\n 1. qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "by simp"], ["proof (state)\nthis:\n  qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "case (Some X)"], ["proof (state)\nthis:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "hence \"xs \\<noteq> zs \\<or> x \\<notin> {z1,z2}\""], ["proof (prove)\nusing this:\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. xs \\<noteq> zs \\<or> x \\<notin> {z1, z2}", "using n"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  rho zs z1 = None \\<and> rho zs z2 = None\n\ngoal (1 subgoal):\n 1. xs \\<noteq> zs \\<or> x \\<notin> {z1, z2}", "by auto"], ["proof (state)\nthis:\n  xs \\<noteq> zs \\<or> x \\<notin> {z1, z2}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "hence \"(x @xs[z1 \\<and> z2]_zs) = x\""], ["proof (prove)\nusing this:\n  xs \\<noteq> zs \\<or> x \\<notin> {z1, z2}\n\ngoal (1 subgoal):\n 1. x @xs[z1 \\<and> z2]_zs = x", "unfolding sw_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> zs \\<or> x \\<notin> {z1, z2}\n\ngoal (1 subgoal):\n 1. (if zs = xs then if x = z1 then z2 else if x = z2 then z1 else x\n     else x) =\n    x", "by auto"], ["proof (state)\nthis:\n  x @xs[z1 \\<and> z2]_zs = x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "moreover"], ["proof (state)\nthis:\n  x @xs[z1 \\<and> z2]_zs = x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "{"], ["proof (state)\nthis:\n  x @xs[z1 \\<and> z2]_zs = x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "have \"qFresh zs z1 X \\<and> qFresh zs z2 X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh zs z1 X \\<and> qFresh zs z2 X", "using Some FreshEnv"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. qFresh zs z1 X \\<and> qFresh zs z2 X", "unfolding qFreshEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  rho zs z1 = None \\<and>\n  (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qFresh zs z1 v)\n  rho zs z2 = None \\<and>\n  (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qFresh zs z2 v)\n\ngoal (1 subgoal):\n 1. qFresh zs z1 X \\<and> qFresh zs z2 X", "by auto"], ["proof (state)\nthis:\n  qFresh zs z1 X \\<and> qFresh zs z2 X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "moreover"], ["proof (state)\nthis:\n  qFresh zs z1 X \\<and> qFresh zs z2 X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "have \"qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X", "using Some goodRho"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qGood X", "unfolding qGoodEnv_def liftAll_def"], ["proof (prove)\nusing this:\n  rho xs x = Some X\n  (\\<forall>xs i v. rho xs i = Some v \\<longrightarrow> qGood v) \\<and>\n  (\\<forall>ys. |{y. rho ys y \\<noteq> None}| <o |UNIV|)\n\ngoal (1 subgoal):\n 1. qGood X", "by auto"], ["proof (state)\nthis:\n  qGood X\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "ultimately"], ["proof (chain)\npicking this:\n  qFresh zs z1 X \\<and> qFresh zs z2 X\n  qGood X", "have \"X #= (X #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  qFresh zs z1 X \\<and> qFresh zs z2 X\n  qGood X\n\ngoal (1 subgoal):\n 1. X #= X #[[z1 \\<and> z2]]_zs", "by(auto simp: alpha_qFresh_qSwap_id alpha_sym)"], ["proof (state)\nthis:\n  X #= X #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "}"], ["proof (state)\nthis:\n  X #= X #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n       qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "ultimately"], ["proof (chain)\npicking this:\n  x @xs[z1 \\<and> z2]_zs = x\n  X #= X #[[z1 \\<and> z2]]_zs", "show ?thesis"], ["proof (prove)\nusing this:\n  x @xs[z1 \\<and> z2]_zs = x\n  X #= X #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "using Some"], ["proof (prove)\nusing this:\n  x @xs[z1 \\<and> z2]_zs = x\n  X #= X #[[z1 \\<and> z2]]_zs\n  rho xs x = Some X\n\ngoal (1 subgoal):\n 1. qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs", "by simp"], ["proof (state)\nthis:\n  qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qVar xs x #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  qVar xs x #[[rho]] #[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>xsa z1 z2.\n     qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n     qVar xs x #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n     qVar xs x #[[rho]] #[[z1 \\<and> z2]]_xsa\n\ngoal (4 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Op1 delta inp binp)"], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>Y. X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>B. A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n   binp\n\ngoal (4 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>Y.\n                         X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>B.\n                 A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            qOp delta inp binp #= Y \\<longrightarrow>\n                            qOp delta inp binp #[[rho]] #= Y #[[rho]]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       qOp delta inp binp #= Y \\<longrightarrow>\n       qOp delta inp binp #[[rho]] #= Y #[[rho]]", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       qOp delta inp binp #= Y \\<Longrightarrow>\n       qOp delta inp binp #[[rho]] #= Y #[[rho]]", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       qOp delta inp binp #= Y \\<Longrightarrow>\n       qOp delta inp binp #[[rho]] #= Y #[[rho]]", "assume q: \"qOp delta inp binp #= Y\""], ["proof (state)\nthis:\n  qOp delta inp binp #= Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       qOp delta inp binp #= Y \\<Longrightarrow>\n       qOp delta inp binp #[[rho]] #= Y #[[rho]]", "then"], ["proof (chain)\npicking this:\n  qOp delta inp binp #= Y", "obtain inp' binp' where Y: \"Y = qOp delta inp' binp'\" and\n       *: \"(\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n           (\\<forall>i. (binp i = None) = (binp' i = None))\" and\n       **: \"(\\<forall>i X X'. inp i = Some X \\<and> inp' i = Some X' \\<longrightarrow> X #= X') \\<and>\n            (\\<forall>i A A'. binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\""], ["proof (prove)\nusing this:\n  qOp delta inp binp #= Y\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>Y = qOp delta inp' binp';\n         (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n         (\\<forall>i. (binp i = None) = (binp' i = None));\n         (\\<forall>i X X'.\n             inp i = Some X \\<and> inp' i = Some X' \\<longrightarrow>\n             X #= X') \\<and>\n         (\\<forall>i A A'.\n             binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow>\n             A $= A')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  \\<exists>inp' binp'.\n     Y = qOp delta inp' binp' \\<and>\n     (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n     (\\<forall>i. (binp i = None) = (binp' i = None)) \\<and>\n     (\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         v1 #= v2) \\<and>\n     (\\<forall>i v1 v2.\n         binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow>\n         v1 $= v2)\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>Y = qOp delta inp' binp';\n         (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n         (\\<forall>i. (binp i = None) = (binp' i = None));\n         (\\<forall>i X X'.\n             inp i = Some X \\<and> inp' i = Some X' \\<longrightarrow>\n             X #= X') \\<and>\n         (\\<forall>i A A'.\n             binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow>\n             A $= A')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Y = qOp delta inp' binp'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n  (\\<forall>i X X'.\n      inp i = Some X \\<and> inp' i = Some X' \\<longrightarrow>\n      X #= X') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       qOp delta inp binp #= Y \\<Longrightarrow>\n       qOp delta inp binp #[[rho]] #= Y #[[rho]]", "show \"(qOp delta inp binp) #[[rho]] #= (Y #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[rho]] #= Y #[[rho]]", "using Op1 **"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>Y. X #= Y \\<longrightarrow> X #[[rho]] #= Y #[[rho]]))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>B. A $= B \\<longrightarrow> A $[[rho]] $= B $[[rho]]))\n   binp\n  (\\<forall>i X X'.\n      inp i = Some X \\<and> inp' i = Some X' \\<longrightarrow>\n      X #= X') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[rho]] #= Y #[[rho]]", "by (simp add: Y sameDom_def liftAll2_def)\n       (fastforce simp add: * lift_None lift_Some \n        liftAll_def lift_def split: option.splits)"], ["proof (state)\nthis:\n  qOp delta inp binp #[[rho]] #= Y #[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y.\n     qOp delta inp binp #= Y \\<longrightarrow>\n     qOp delta inp binp #[[rho]] #= Y #[[rho]]\n\ngoal (3 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Op2 delta inp binp)"], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>xs z1 z2.\n           qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n           X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n           X #[[rho]] #[[z1 \\<and> z2]]_xs))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>xs z1 z2.\n           qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n           A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n           A $[[rho]] $[[z1 \\<and> z2]]_xs))\n   binp\n\ngoal (3 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>X.\n                     qGood X \\<and>\n                     (\\<forall>xs z1 z2.\n                         qFreshEnv xs z1 rho \\<and>\n                         qFreshEnv xs z2 rho \\<longrightarrow>\n                         X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                         X #[[rho]] #[[z1 \\<and> z2]]_xs))\n                 inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>xs z1 z2.\n                 qFreshEnv xs z1 rho \\<and>\n                 qFreshEnv xs z2 rho \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n                 A $[[rho]] $[[z1 \\<and> z2]]_xs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs z1 z2.\n                            qFreshEnv xs z1 rho \\<and>\n                            qFreshEnv xs z2 rho \\<longrightarrow>\n                            qOp delta inp\n                             binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n                            qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "thus ?case"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>xs z1 z2.\n           qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n           X #[[z1 \\<and> z2]]_xs #[[rho]] #=\n           X #[[rho]] #[[z1 \\<and> z2]]_xs))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>xs z1 z2.\n           qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n           A $[[z1 \\<and> z2]]_xs $[[rho]] $=\n           A $[[rho]] $[[z1 \\<and> z2]]_xs))\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>xs z1 z2.\n       qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n       qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs", "by (auto simp: sameDom_def liftAll2_def lift_None lift_def liftAll_def split: option.splits)"], ["proof (state)\nthis:\n  \\<forall>xs z1 z2.\n     qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n     qOp delta inp binp #[[z1 \\<and> z2]]_xs #[[rho]] #=\n     qOp delta inp binp #[[rho]] #[[z1 \\<and> z2]]_xs\n\ngoal (2 subgoals):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Abs1 xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>xs z1 z2.\n     qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n     ?Y22 #[[z1 \\<and> z2]]_xs #[[rho]] #=\n     ?Y22 #[[rho]] #[[z1 \\<and> z2]]_xs\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>xs z1 z2.\n     qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n     ?Y22 #[[z1 \\<and> z2]]_xs #[[rho]] #=\n     ?Y22 #[[rho]] #[[z1 \\<and> z2]]_xs\n\ngoal (2 subgoals):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            qAbs xs x X $= B \\<longrightarrow>\n                            qAbs xs x X $[[rho]] $= B $[[rho]]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B.\n       qAbs xs x X $= B \\<longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "assume alpha_xXB: \"qAbs xs x X $= B\""], ["proof (state)\nthis:\n  qAbs xs x X $= B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= B", "obtain y Y where B: \"B = qAbs xs y Y\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= B\n\ngoal (1 subgoal):\n 1. (\\<And>y Y. B = qAbs xs y Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     B = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>y Y. B = qAbs xs y Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B = qAbs xs y Y\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"qGoodAbs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs B", "using \\<open>qGood X\\<close> alpha_xXB alphaAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= B\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n\ngoal (1 subgoal):\n 1. qGoodAbs B", "by force"], ["proof (state)\nthis:\n  qGoodAbs B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence goodY: \"qGood Y\""], ["proof (prove)\nusing this:\n  qGoodAbs B\n\ngoal (1 subgoal):\n 1. qGood Y", "unfolding B"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs y Y)\n\ngoal (1 subgoal):\n 1. qGood Y", "by simp"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?x' = \"pickQFreshEnv xs {x} {X} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?y' = \"pickQFreshEnv xs {y} {Y} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "obtain x' and y' where x'y'_def: \"x' = ?x'\" \"y' = ?y'\" and\n           x'y'_rev: \"?x' = x'\" \"?y' = y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>x' = pickQFreshEnv xs {x} {X} {rho};\n         y' = pickQFreshEnv xs {y} {Y} {rho};\n         pickQFreshEnv xs {x} {X} {rho} = x';\n         pickQFreshEnv xs {y} {Y} {rho} = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' = pickQFreshEnv xs {x} {X} {rho}\n  y' = pickQFreshEnv xs {y} {Y} {rho}\n  pickQFreshEnv xs {x} {X} {rho} = x'\n  pickQFreshEnv xs {y} {Y} {rho} = y'\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have x'y'_freshXY: \"qFresh xs x' X \\<and> qFresh xs y' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x' X \\<and> qFresh xs y' Y", "unfolding x'y'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n    qFresh xs (pickQFreshEnv xs {y} {Y} {rho}) Y", "using \\<open>qGood X\\<close> goodY goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X \\<and>\n    qFresh xs (pickQFreshEnv xs {y} {Y} {rho}) Y", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFresh xs x' X \\<and> qFresh xs y' Y\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have x'y'_fresh_rho: \"qFreshEnv xs x' rho \\<and> qFreshEnv xs y' rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x' rho \\<and> qFreshEnv xs y' rho", "unfolding x'y'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {y} {Y} {rho}) rho", "using \\<open>qGood X\\<close> goodY goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {y} {Y} {rho}) rho", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs y' rho\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have x'y'_not_xy: \"x' \\<noteq> x \\<and> y' \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<and> y' \\<noteq> y", "unfolding x'y'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs {x} {X} {rho} \\<noteq> x \\<and>\n    pickQFreshEnv xs {y} {Y} {rho} \\<noteq> y", "using \\<open>qGood X\\<close> goodY goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs {x} {X} {rho} \\<noteq> x \\<and>\n    pickQFreshEnv xs {y} {Y} {rho} \\<noteq> y", "using pickQFreshEnv[of \"{x}\" \"{X}\"] pickQFreshEnv[of \"{y}\" \"{Y}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n  \\<lbrakk>|{x}| <o |UNIV| \\<or> finite {x};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |?Rho| <o |UNIV| \\<or> finite ?Rho; Ball ?Rho qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> pickQFreshEnv ?xs {x} {X} ?Rho \\<notin> {x} \\<and>\n                    (\\<forall>X\\<in>{X}.\n                        qFresh ?xs (pickQFreshEnv ?xs {x} {X} ?Rho)\n                         X) \\<and>\n                    (\\<forall>rho\\<in>?Rho.\n                        qFreshEnv ?xs (pickQFreshEnv ?xs {x} {X} ?Rho) rho)\n  \\<lbrakk>|{y}| <o |UNIV| \\<or> finite {y};\n   |{Y}| <o |UNIV| \\<or> finite {Y}; Ball {Y} qGood;\n   |?Rho| <o |UNIV| \\<or> finite ?Rho; Ball ?Rho qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> pickQFreshEnv ?xs {y} {Y} ?Rho \\<notin> {y} \\<and>\n                    (\\<forall>X\\<in>{Y}.\n                        qFresh ?xs (pickQFreshEnv ?xs {y} {Y} ?Rho)\n                         X) \\<and>\n                    (\\<forall>rho\\<in>?Rho.\n                        qFreshEnv ?xs (pickQFreshEnv ?xs {y} {Y} ?Rho) rho)\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs {x} {X} {rho} \\<noteq> x \\<and>\n    pickQFreshEnv xs {y} {Y} {rho} \\<noteq> y", "by force"], ["proof (state)\nthis:\n  x' \\<noteq> x \\<and> y' \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have goodXx'x: \"qGood (X #[[x' \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence good: \"qGood(qPsubst rho (X #[[x' \\<and> x]]_xs))\""], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "using goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have goodYy'y: \"qGood (Y #[[y' \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (Y #[[y' \\<and> y]]_xs)", "using goodY qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood Y\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (Y #[[y' \\<and> y]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (Y #[[y' \\<and> y]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "obtain z where z_not: \"z \\<notin> {x,y,x',y'}\" and\n    z_fresh_XY: \"qFresh xs z X \\<and> qFresh xs z Y\"\n    and z_fresh_rho: \"qFreshEnv xs z rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> {x, y, x', y'};\n         qFresh xs z X \\<and> qFresh xs z Y; qFreshEnv xs z rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>qGood X\\<close> goodY goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> {x, y, x', y'};\n         qFresh xs z X \\<and> qFresh xs z Y; qFreshEnv xs z rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_qFreshEnv[of \"{x,y,x',y'}\" \"{X,Y}\" \"{rho}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood Y\n  qGoodEnv rho\n  \\<lbrakk>|{x, y, x', y'}| <o |UNIV| \\<or> finite {x, y, x', y'};\n   |{X, Y}| <o |UNIV| \\<or> finite {X, Y}; Ball {X, Y} qGood;\n   |{rho}| <o |UNIV| \\<or> finite {rho}; Ball {rho} qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> {x, y, x', y'} \\<and>\n                       (\\<forall>X\\<in>{X, Y}. qFresh ?xs z X) \\<and>\n                       (\\<forall>rho\\<in>{rho}. qFreshEnv ?xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> {x, y, x', y'};\n         qFresh xs z X \\<and> qFresh xs z Y; qFreshEnv xs z rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<notin> {x, y, x', y'}\n  qFresh xs z X \\<and> qFresh xs z Y\n  qFreshEnv xs z rho\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "(* Notations: *)"], ["proof (state)\nthis:\n  z \\<notin> {x, y, x', y'}\n  qFresh xs z X \\<and> qFresh xs z Y\n  qFreshEnv xs z rho\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Xx'x = \"X #[[x' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Yy'y = \"Y #[[y' \\<and> y]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Xx'xzx' = \"?Xx'x #[[z \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Yy'yzy' = \"?Yy'y #[[z \\<and> y']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Xzx = \"X #[[z \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "let ?Yzy = \"Y #[[z \\<and> y]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "(* Preliminary facts: *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have goodXx'x: \"qGood ?Xx'x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence goodXx'xzx': \"qGood ?Xx'xzx'\""], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"qGood (?Xx'x #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "using goodXx'x goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence goodXx'x_rho_zx': \"qGood ((?Xx'x #[[rho]]) #[[z \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have goodYy'y: \"qGood ?Yy'y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (Y #[[y' \\<and> y]]_xs)", "using goodY qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood Y\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (Y #[[y' \\<and> y]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (Y #[[y' \\<and> y]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "(*  *)"], ["proof (state)\nthis:\n  qGood (Y #[[y' \\<and> y]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have skelXx'x: \"qSkel ?Xx'x = qSkel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkel (X #[[x' \\<and> x]]_xs) = qSkel X", "using qSkel_qSwap"], ["proof (prove)\nusing this:\n  qSkel (?X #[[?x \\<and> ?y]]_?zs) = qSkel ?X\n\ngoal (1 subgoal):\n 1. qSkel (X #[[x' \\<and> x]]_xs) = qSkel X", "by fastforce"], ["proof (state)\nthis:\n  qSkel (X #[[x' \\<and> x]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence skelXx'xzx': \"qSkel ?Xx'xzx' = qSkel X\""], ["proof (prove)\nusing this:\n  qSkel (X #[[x' \\<and> x]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. qSkel (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs) = qSkel X", "by (auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"qSkelAbs B = qSkelAbs (qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkelAbs B = qSkelAbs (qAbs xs x X)", "using alpha_xXB alphaAll_qSkelAll"], ["proof (prove)\nusing this:\n  qAbs xs x X $= B\n  (\\<forall>X'. ?X #= X' \\<longrightarrow> qSkel ?X = qSkel X') \\<and>\n  (\\<forall>A'. ?A $= A' \\<longrightarrow> qSkelAbs ?A = qSkelAbs A')\n\ngoal (1 subgoal):\n 1. qSkelAbs B = qSkelAbs (qAbs xs x X)", "by fastforce"], ["proof (state)\nthis:\n  qSkelAbs B = qSkelAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence \"qSkel Y = qSkel X\""], ["proof (prove)\nusing this:\n  qSkelAbs B = qSkelAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qSkel Y = qSkel X", "unfolding B"], ["proof (prove)\nusing this:\n  qSkelAbs (qAbs xs y Y) = qSkelAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qSkel Y = qSkel X", "by(auto simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  qSkel Y = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence skelYy'y: \"qSkel ?Yy'y = qSkel X\""], ["proof (prove)\nusing this:\n  qSkel Y = qSkel X\n\ngoal (1 subgoal):\n 1. qSkel (Y #[[y' \\<and> y]]_xs) = qSkel X", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel (Y #[[y' \\<and> y]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "(* Main proof: *)"], ["proof (state)\nthis:\n  qSkel (Y #[[y' \\<and> y]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"((?Xx'x #[[rho]]) #[[z \\<and> x']]_xs) #= (?Xx'xzx' #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]", "using skelXx'x goodXx'x z_fresh_rho x'y'_fresh_rho\n          Abs1.IH(2)[of \"?Xx'x\"]"], ["proof (prove)\nusing this:\n  qSkel (X #[[x' \\<and> x]]_xs) = qSkel X\n  qGood (X #[[x' \\<and> x]]_xs)\n  qFreshEnv xs z rho\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs y' rho\n  qGood (X #[[x' \\<and> x]]_xs) \\<and>\n  qSkel (X #[[x' \\<and> x]]_xs) = qSkel X \\<Longrightarrow>\n  \\<forall>xsa z1 z2.\n     qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n     X #[[x' \\<and> x]]_xs #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n     X #[[x' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_xsa\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]", "by (auto simp add: alpha_sym)"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "{"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"?Xx'xzx' #= ?Xzx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs", "using \\<open>qGood X\\<close> x'y'_freshXY z_fresh_XY alpha_qFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs x' X \\<and> qFresh xs y' Y\n  qFresh xs z X \\<and> qFresh xs z Y\n  \\<lbrakk>qGood ?X; qFresh ?zs ?y ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs #=\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"?Xzx #= ?Yzy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs", "using alpha_xXB"], ["proof (prove)\nusing this:\n  qAbs xs x X $= B\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs", "unfolding B"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs y Y\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs", "using z_fresh_XY \\<open>qGood X\\<close> goodY"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs y Y\n  qFresh xs z X \\<and> qFresh xs z Y\n  qGood X\n  qGood Y\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs", "by (simp only: alphaAbs_qAbs_iff_all_qFresh)"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"?Yzy #= ?Yy'yzy'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs", "using goodY x'y'_freshXY z_fresh_XY"], ["proof (prove)\nusing this:\n  qGood Y\n  qFresh xs x' X \\<and> qFresh xs y' Y\n  qFresh xs z X \\<and> qFresh xs z Y\n\ngoal (1 subgoal):\n 1. Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs", "by(auto simp add: alpha_qFresh_qSwap_compose alpha_sym)"], ["proof (state)\nthis:\n  Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "ultimately"], ["proof (chain)\npicking this:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs\n  X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs\n  Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs", "have \"?Xx'xzx' #= ?Yy'yzy'\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs\n  X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs\n  Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs", "using goodXx'xzx' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #= X #[[z \\<and> x]]_xs\n  X #[[z \\<and> x]]_xs #= Y #[[z \\<and> y]]_xs\n  Y #[[z \\<and> y]]_xs #= Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "hence \"(?Xx'xzx' #[[rho]]) #= (?Yy'yzy' #[[rho]])\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n    Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]", "using goodXx'xzx' skelXx'xzx' Abs1.IH(1)"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs)\n  qSkel (X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs) = qSkel X\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n    Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "}"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "have \"(?Yy'yzy' #[[rho]]) #= ((?Yy'y #[[rho]]) #[[z \\<and> y']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs", "using skelYy'y goodYy'y z_fresh_rho x'y'_fresh_rho\n          Abs1.IH(2)[of \"?Yy'y\"] alpha_sym"], ["proof (prove)\nusing this:\n  qSkel (Y #[[y' \\<and> y]]_xs) = qSkel X\n  qGood (Y #[[y' \\<and> y]]_xs)\n  qFreshEnv xs z rho\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs y' rho\n  qGood (Y #[[y' \\<and> y]]_xs) \\<and>\n  qSkel (Y #[[y' \\<and> y]]_xs) = qSkel X \\<Longrightarrow>\n  \\<forall>xsa z1 z2.\n     qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n     Y #[[y' \\<and> y]]_xs #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n     Y #[[y' \\<and> y]]_xs #[[rho]] #[[z1 \\<and> z2]]_xsa\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs", "by fastforce"], ["proof (state)\nthis:\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "ultimately"], ["proof (chain)\npicking this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs", "have \"((?Xx'x #[[rho]]) #[[z \\<and> x']]_xs) #= ((?Yy'y #[[rho]]) #[[z \\<and> y']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs", "using goodXx'x_rho_zx' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[z \\<and> x']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]]\n  Y #[[y' \\<and> y]]_xs #[[z \\<and> y']]_xs #[[rho]] #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       qAbs xs x X $= B \\<Longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]", "thus \"(qAbs xs x X) $[[rho]] $= (B $[[rho]])\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= B $[[rho]]", "unfolding B"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n  Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs y Y $[[rho]]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs \\<Longrightarrow>\n    (let x' = pickQFreshEnv xs {x} {X} {rho}\n     in qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]]) $=\n    (let x' = pickQFreshEnv xs {y} {Y} {rho}\n     in qAbs xs x' Y #[[x' \\<and> y]]_xs #[[rho]])", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs \\<Longrightarrow>\n    qAbs xs (pickQFreshEnv xs {x} {X} {rho})\n     X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]] $=\n    qAbs xs (pickQFreshEnv xs {y} {Y} {rho})\n     Y #[[pickQFreshEnv xs {y} {Y} {rho} \\<and> y]]_xs #[[rho]]", "unfolding x'y'_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs \\<Longrightarrow>\n    qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]] $=\n    qAbs xs y' Y #[[y' \\<and> y]]_xs #[[rho]]", "using good z_not"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n  z \\<notin> {x, y, x', y'}\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n    Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs \\<Longrightarrow>\n    qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]] $=\n    qAbs xs y' Y #[[y' \\<and> y]]_xs #[[rho]]", "apply(simp only: alphaAbs_qAbs_iff_ex_qFresh)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X #[[x' \\<and> x]]_xs #[[rho]] #[[z \\<and> x']]_xs #=\n             Y #[[y' \\<and> y]]_xs #[[rho]] #[[z \\<and> y']]_xs;\n     qGood X #[[x' \\<and> x]]_xs #[[rho]];\n     z \\<notin> {x, y, x', y'}\\<rbrakk>\n    \\<Longrightarrow> xs = xs \\<and>\n                      (\\<exists>ya.\n                          qFresh xs ya X #[[x' \\<and> x]]_xs #[[rho]] \\<and>\n                          qFresh xs ya Y #[[y' \\<and> y]]_xs #[[rho]] \\<and>\n                          X #[[x' \\<and> x]]_xs #[[rho]] #[[ya \\<and> x']]_xs #=\n                          Y #[[y' \\<and> y]]_xs #[[rho]] #[[ya \\<and> y']]_xs)", "by (auto intro!: exI[of _ z]\n    simp: alphaAbs_qAbs_iff_ex_qFresh goodRho goodXx'x qPsubstAll_preserves_qFreshAll \n    qSwap_preserves_qFresh_distinct z_fresh_XY goodYy'y qPsubst_preserves_qFresh z_fresh_rho)"], ["proof (state)\nthis:\n  qAbs xs x X $[[rho]] $= B $[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>B.\n     qAbs xs x X $= B \\<longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "case (Abs2 xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>xs z1 z2.\n     qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n     ?Y22 #[[z1 \\<and> z2]]_xs #[[rho]] #=\n     ?Y22 #[[rho]] #[[z1 \\<and> z2]]_xs\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>xs z1 z2.\n     qFreshEnv xs z1 rho \\<and> qFreshEnv xs z2 rho \\<longrightarrow>\n     ?Y22 #[[z1 \\<and> z2]]_xs #[[rho]] #=\n     ?Y22 #[[rho]] #[[z1 \\<and> z2]]_xs\n  \\<forall>B.\n     qAbs xs x X $= B \\<longrightarrow> qAbs xs x X $[[rho]] $= B $[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>Ya. Y #= Ya \\<longrightarrow> Y #[[rho]] #= Ya #[[rho]];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>xs z1 z2.\n              qFreshEnv xs z1 rho \\<and>\n              qFreshEnv xs z2 rho \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_xs #[[rho]] #=\n              Y #[[rho]] #[[z1 \\<and> z2]]_xs;\n        \\<forall>B.\n           qAbs xs x X $= B \\<longrightarrow>\n           qAbs xs x X $[[rho]] $= B $[[rho]]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xsa z1 z2.\n                            qFreshEnv xsa z1 rho \\<and>\n                            qFreshEnv xsa z2 rho \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                            qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xsa z1 z2.\n       qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n       qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "fix zs z1 z2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "assume z1z2_fresh_rho: \"qFreshEnv zs z1 rho\" \"qFreshEnv zs z2 rho\""], ["proof (state)\nthis:\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?x' = \"pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?x'' = \"pickQFreshEnv xs {x} {X} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "obtain x' x'' where x'x''_def: \"x' = ?x'\" \"x'' = ?x''\" and\n           x'x''_rev: \"?x' = x'\" \"?x'' = x''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' x''.\n        \\<lbrakk>x' =\n                 pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs}\n                  {X #[[z1 \\<and> z2]]_zs} {rho};\n         x'' = pickQFreshEnv xs {x} {X} {rho};\n         pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs}\n          {rho} =\n         x';\n         pickQFreshEnv xs {x} {X} {rho} = x''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' =\n  pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs} {rho}\n  x'' = pickQFreshEnv xs {x} {X} {rho}\n  pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs} {rho} =\n  x'\n  pickQFreshEnv xs {x} {X} {rho} = x''\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?xa = \"x @xs[z1 \\<and> z2]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?xa'' = \"x'' @xs[z1 \\<and> z2]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "obtain u where \"u \\<notin> {x,x',x'',z1,z2}\" and\n    u_fresh_X: \"qFresh xs u X\" and u_fresh_rho: \"qFreshEnv xs u rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', z1, z2}; qFresh xs u X;\n         qFreshEnv xs u rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>qGood X\\<close> goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', z1, z2}; qFresh xs u X;\n         qFreshEnv xs u rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_qFreshEnv[of \"{x,x',x'',z1,z2}\" \"{X}\" \"{rho}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  \\<lbrakk>|{x, x', x'', z1, z2}| <o |UNIV| \\<or>\n           finite {x, x', x'', z1, z2};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |{rho}| <o |UNIV| \\<or> finite {rho}; Ball {rho} qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> {x, x', x'', z1, z2} \\<and>\n                       (\\<forall>X\\<in>{X}. qFresh ?xs z X) \\<and>\n                       (\\<forall>rho\\<in>{rho}. qFreshEnv ?xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', z1, z2}; qFresh xs u X;\n         qFreshEnv xs u rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x'', z1, z2}\n  qFresh xs u X\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence u_not: \"u \\<notin> {x,x',x'',z1,z2,?xa,?xa''}\""], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x'', z1, z2}\n  qFresh xs u X\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n                x'' @xs[z1 \\<and> z2]_zs}", "unfolding sw_def"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x'', z1, z2}\n  qFresh xs u X\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. u \\<notin> {x, x', x'', z1, z2,\n                if zs = xs\n                then if x = z1 then z2 else if x = z2 then z1 else x else x,\n                if zs = xs\n                then if x'' = z1 then z2 else if x'' = z2 then z1 else x''\n                else x''}", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?ua = \"u @xs [z1 \\<and> z2]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2 = \"X #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2x'xa = \"?Xz1z2 #[[x' \\<and> ?xa]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2x'xa_rho = \"?Xz1z2x'xa #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2x'xa_rho_ux' = \"?Xz1z2x'xa_rho #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2x'xaux' = \"?Xz1z2x'xa #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2x'xaux'_rho = \"?Xz1z2x'xaux' #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2uxa = \"?Xz1z2 #[[u \\<and> ?xa]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xz1z2uaxa = \"?Xz1z2 #[[?ua \\<and> ?xa]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xux = \"X #[[u \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xuxz1z2 = \"?Xux #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''x = \"X #[[x'' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xux'' = \"?Xx''x #[[u \\<and> x'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xux''z1z2 = \"?Xx''xux'' #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2 = \"?Xx''x #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2uaxa'' = \"?Xx''xz1z2 #[[?ua \\<and> ?xa'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2uaxa''_rho = \"?Xx''xz1z2uaxa'' #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2uxa'' = \"?Xx''xz1z2 #[[u \\<and> ?xa'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2uxa''_rho = \"?Xx''xz1z2uxa'' #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2_rho = \"?Xx''xz1z2 #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''xz1z2_rho_uxa'' = \"?Xx''xz1z2_rho #[[u \\<and> ?xa'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''x_rho = \"?Xx''x #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''x_rho_z1z2 = \"?Xx''x_rho #[[z1 \\<and> z2]]_zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "let ?Xx''x_rho_z1z2uxa'' = \"?Xx''x_rho_z1z2 #[[u \\<and> ?xa'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "(* Facts about x', x'', ?xa, ?ua, ?xa'': *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXz1z2: \"qGood ?Xz1z2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have x'x''_fresh_Xz1z2: \"qFresh xs x' ?Xz1z2 \\<and> qFresh xs x'' X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x' (X #[[z1 \\<and> z2]]_zs) \\<and> qFresh xs x'' X", "unfolding x'x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs\n     (pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs}\n       {rho})\n     (X #[[z1 \\<and> z2]]_zs) \\<and>\n    qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X", "using \\<open>qGood X\\<close> goodXz1z2 goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qFresh xs\n     (pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs}\n       {rho})\n     (X #[[z1 \\<and> z2]]_zs) \\<and>\n    qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFresh xs x' (X #[[z1 \\<and> z2]]_zs) \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have x'x''_fresh_rho: \"qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho", "unfolding x'x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs\n     (pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs}\n       {rho})\n     rho \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "using \\<open>qGood X\\<close> goodXz1z2 goodRho"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  qGoodEnv rho\n\ngoal (1 subgoal):\n 1. qFreshEnv xs\n     (pickQFreshEnv xs {x @xs[z1 \\<and> z2]_zs} {X #[[z1 \\<and> z2]]_zs}\n       {rho})\n     rho \\<and>\n    qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have ua_eq_u: \"?ua = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @xs[z1 \\<and> z2]_zs = u", "using u_not"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. u @xs[z1 \\<and> z2]_zs = u", "unfolding sw_def"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x'', z1, z2,\n              if zs = xs\n              then if x = z1 then z2 else if x = z2 then z1 else x else x,\n              if zs = xs\n              then if x'' = z1 then z2 else if x'' = z2 then z1 else x''\n              else x''}\n\ngoal (1 subgoal):\n 1. (if zs = xs then if u = z1 then z2 else if u = z2 then z1 else u\n     else u) =\n    u", "by auto"], ["proof (state)\nthis:\n  u @xs[z1 \\<and> z2]_zs = u\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "(* Good: *)"], ["proof (state)\nthis:\n  u @xs[z1 \\<and> z2]_zs = u\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXz1z2x'xa: \"qGood ?Xz1z2x'xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)", "using goodXz1z2 qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXux: \"qGood ?Xux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence goodXuxz1z2: \"qGood ?Xuxz1z2\""], ["proof (prove)\nusing this:\n  qGood (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[u \\<and> x]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXx''x: \"qGood ?Xx''x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence goodXx''xz1z2: \"qGood ?Xx''xz1z2\""], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"qGood ?Xx''xz1z2_rho\""], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]", "using goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence goodXx''xz1z2_rho: \"qGood ?Xx''xz1z2_rho\""], ["proof (prove)\nusing this:\n  qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]", "using goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXz1z2x'xaux': \"qGood ?Xz1z2x'xaux'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs)", "using goodXz1z2x'xa qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have goodXz1z2x'xa_rho: \"qGood ?Xz1z2x'xa_rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "using goodXz1z2x'xa goodRho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence goodXz1z2x'xa_rho_ux': \"qGood ?Xz1z2x'xa_rho_ux'\""], ["proof (prove)\nusing this:\n  qGood\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGood\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "(* Fresh: *)"], ["proof (state)\nthis:\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have xa''_fresh_rho: \"qFreshEnv xs ?xa'' rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs (x'' @xs[z1 \\<and> z2]_zs) rho", "using x'x''_fresh_rho z1z2_fresh_rho"], ["proof (prove)\nusing this:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. qFreshEnv xs (x'' @xs[z1 \\<and> z2]_zs) rho", "unfolding sw_def"], ["proof (prove)\nusing this:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n\ngoal (1 subgoal):\n 1. qFreshEnv xs\n     (if zs = xs then if x'' = z1 then z2 else if x'' = z2 then z1 else x''\n      else x'')\n     rho", "by auto"], ["proof (state)\nthis:\n  qFreshEnv xs (x'' @xs[z1 \\<and> z2]_zs) rho\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have u_fresh_Xz1z2: \"qFresh xs u ?Xz1z2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[z1 \\<and> z2]]_zs)", "using u_fresh_X u_not"], ["proof (prove)\nusing this:\n  qFresh xs u X\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[z1 \\<and> z2]]_zs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"qFresh xs u ?Xz1z2x'xa\""], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. qFresh xs u\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)", "using u_not"], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[z1 \\<and> z2]]_zs)\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. qFresh xs u\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence u_fresh_Xz1z2x'xa_rho: \"qFresh xs u ?Xz1z2x'xa_rho\""], ["proof (prove)\nusing this:\n  qFresh xs u\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh xs u\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "using u_fresh_rho u_fresh_X goodRho goodXz1z2x'xa qPsubst_preserves_qFresh"], ["proof (prove)\nusing this:\n  qFresh xs u\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  qFreshEnv xs u rho\n  qFresh xs u X\n  qGoodEnv rho\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  \\<lbrakk>qGood ?X; qGoodEnv ?rho; qFresh ?zs ?z ?X;\n   qFreshEnv ?zs ?z ?rho\\<rbrakk>\n  \\<Longrightarrow> qFresh ?zs ?z ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qFresh xs u\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qFresh xs u\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"qFresh xs u ?Xx''x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs)", "using u_fresh_X u_not"], ["proof (prove)\nusing this:\n  qFresh xs u X\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"qFresh xs u ?Xx''x_rho\""], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho]]", "using goodRho goodXx''x u_fresh_rho"], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n  qGoodEnv rho\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho]]", "by(auto simp add: qPsubst_preserves_qFresh)"], ["proof (state)\nthis:\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence u_fresh_Xx''x_rho_z1z2: \"qFresh xs u ?Xx''x_rho_z1z2\""], ["proof (prove)\nusing this:\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)", "using u_not"], ["proof (prove)\nusing this:\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho]]\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "(* Skeleton: *)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have skel_Xz1z2x'xa: \"qSkel ?Xz1z2x'xa = qSkel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkel\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n    qSkel X", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n  qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence skel_Xz1z2x'xaux': \"qSkel ?Xz1z2x'xaux' = qSkel X\""], ["proof (prove)\nusing this:\n  qSkel (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n  qSkel X\n\ngoal (1 subgoal):\n 1. qSkel\n     (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs) =\n    qSkel X", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs) =\n  qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have skel_Xx''x: \"qSkel ?Xx''x = qSkel X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence skel_Xx''xz1z2: \"qSkel ?Xx''xz1z2 = qSkel X\""], ["proof (prove)\nusing this:\n  qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X\n\ngoal (1 subgoal):\n 1. qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) = qSkel X", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "(* Main proof: *)"], ["proof (state)\nthis:\n  qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) = qSkel X\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xz1z2x'xaux'_rho #= ?Xz1z2x'xa_rho_ux'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs", "using x'x''_fresh_rho u_fresh_rho skel_Xz1z2x'xa goodXz1z2x'xa"], ["proof (prove)\nusing this:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\n  qFreshEnv xs u rho\n  qSkel (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n  qSkel X\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs", "using Abs2.IH(2)[of ?Xz1z2x'xa]"], ["proof (prove)\nusing this:\n  qFreshEnv xs x' rho \\<and> qFreshEnv xs x'' rho\n  qFreshEnv xs u rho\n  qSkel (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n  qSkel X\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) \\<and>\n  qSkel (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs) =\n  qSkel X \\<Longrightarrow>\n  \\<forall>xsa z1a z2a.\n     qFreshEnv xsa z1a rho \\<and> qFreshEnv xsa z2a rho \\<longrightarrow>\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[z1a \\<and> z2a]]_xsa #[[rho]] #=\n     X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[z1a \\<and> z2a]]_xsa\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"?Xz1z2x'xa_rho_ux' #= ?Xz1z2x'xaux'_rho\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]", "using alpha_sym"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "{"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xz1z2x'xaux' #= ?Xz1z2uxa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n    X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs", "using goodXz1z2 u_fresh_Xz1z2 x'x''_fresh_Xz1z2"], ["proof (prove)\nusing this:\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  qFresh xs u (X #[[z1 \\<and> z2]]_zs)\n  qFresh xs x' (X #[[z1 \\<and> z2]]_zs) \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n    X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs", "using alpha_qFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  qFresh xs u (X #[[z1 \\<and> z2]]_zs)\n  qFresh xs x' (X #[[z1 \\<and> z2]]_zs) \\<and> qFresh xs x'' X\n  \\<lbrakk>qGood ?X; qFresh ?zs ?y ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs #=\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n    X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xz1z2uxa = ?Xuxz1z2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n    X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs", "using ua_eq_u qSwap_compose[of zs z1 z2 xs x u X]"], ["proof (prove)\nusing this:\n  u @xs[z1 \\<and> z2]_zs = u\n  X #[[x \\<and> u]]_xs #[[z1 \\<and> z2]]_zs =\n  X #[[z1 \\<and> z2]]_zs #[[x @xs[z1 \\<and> z2]_zs \\<and> u @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n    X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs", "by(auto simp: qSwap_sym)"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "{"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xux #= ?Xx''xux''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs", "using \\<open>qGood X\\<close> u_fresh_X x'x''_fresh_Xz1z2"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs u X\n  qFresh xs x' (X #[[z1 \\<and> z2]]_zs) \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs", "by(auto simp: alpha_qFresh_qSwap_compose alpha_sym)"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"?Xuxz1z2 #= ?Xx''xux''z1z2\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n    X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs", "using goodXux"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n  qGood (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n    X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "}"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xx''xux''z1z2 = ?Xx''xz1z2uxa''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using ua_eq_u qSwap_compose[of zs z1 z2 _  _ _ ?Xx''x]"], ["proof (prove)\nusing this:\n  u @xs[z1 \\<and> z2]_zs = u\n  X #[[x'' \\<and> x]]_xs #[[?x \\<and> ?y]]_?zs #[[z1 \\<and> z2]]_zs =\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[?x @?zs[z1 \\<and> z2]_zs \\<and> ?y @?zs[z1 \\<and> z2]_zs]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "ultimately"], ["proof (chain)\npicking this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "have \"?Xz1z2x'xaux' #= ?Xx''xz1z2uxa''\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using goodXz1z2x'xaux' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs\n  X #[[u \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[z1 \\<and> z2]]_zs =\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"?Xz1z2x'xaux'_rho #= ?Xx''xz1z2uxa''_rho\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "using goodXz1z2x'xaux' skel_Xz1z2x'xaux' Abs2.IH(1)"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs)\n  qSkel\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs) =\n  qSkel X\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  \\<forall>Y. ?Y22 #= Y \\<longrightarrow> ?Y22 #[[rho]] #= Y #[[rho]]\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "}"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xx''xz1z2uxa''_rho #= ?Xx''xz1z2_rho_uxa''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using xa''_fresh_rho u_fresh_rho skel_Xx''xz1z2 goodXx''xz1z2"], ["proof (prove)\nusing this:\n  qFreshEnv xs (x'' @xs[z1 \\<and> z2]_zs) rho\n  qFreshEnv xs u rho\n  qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) = qSkel X\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using Abs2.IH(2)[of ?Xx''xz1z2]"], ["proof (prove)\nusing this:\n  qFreshEnv xs (x'' @xs[z1 \\<and> z2]_zs) rho\n  qFreshEnv xs u rho\n  qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) = qSkel X\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs)\n  qGood (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) \\<and>\n  qSkel (X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs) =\n  qSkel X \\<Longrightarrow>\n  \\<forall>xsa z1a z2a.\n     qFreshEnv xsa z1a rho \\<and> qFreshEnv xsa z2a rho \\<longrightarrow>\n     X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[z1a \\<and> z2a]]_xsa #[[rho]] #=\n     X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[z1a \\<and> z2a]]_xsa\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "moreover"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "{"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "have \"?Xx''xz1z2_rho #= ?Xx''x_rho_z1z2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs", "using z1z2_fresh_rho skel_Xx''x goodXx''x"], ["proof (prove)\nusing this:\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n  qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X\n  qGood (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs", "using Abs2.IH(2)[of ?Xx''x]"], ["proof (prove)\nusing this:\n  qFreshEnv zs z1 rho\n  qFreshEnv zs z2 rho\n  qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qGood (X #[[x'' \\<and> x]]_xs) \\<and>\n  qSkel (X #[[x'' \\<and> x]]_xs) = qSkel X \\<Longrightarrow>\n  \\<forall>xsa z1 z2.\n     qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n     X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_xsa #[[rho]] #=\n     X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_xsa\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs", "by auto"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "hence \"?Xx''xz1z2_rho_uxa'' #= ?Xx''x_rho_z1z2uxa''\""], ["proof (prove)\nusing this:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using goodXx''xz1z2_rho"], ["proof (prove)\nusing this:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs\n  qGood X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]]\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "by(auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "}"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "ultimately"], ["proof (chain)\npicking this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "have \"?Xz1z2x'xa_rho_ux' #= ?Xx''x_rho_z1z2uxa''\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "using goodXz1z2x'xa_rho_ux' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #=\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  X #[[x'' \\<and> x]]_xs #[[z1 \\<and> z2]]_zs #[[rho]] #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  qGood\n   (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa z1 z2.\n       \\<lbrakk>qFreshEnv xsa z1 rho; qFreshEnv xsa z2 rho\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n                         qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa", "thus \"((qAbs xs x X) $[[z1 \\<and> z2]]_zs) $[[rho]] $= \n          (((qAbs xs x X) $[[rho]]) $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[z1 \\<and> z2]]_zs $[[rho]] $=\n    qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_zs", "using goodXz1z2x'xa_rho    \n    goodXz1z2x'xa u_not u_fresh_Xz1z2x'xa_rho u_fresh_Xx''x_rho_z1z2"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs\n  qGood\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  qGood (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs)\n  u \\<notin> {x, x', x'', z1, z2, x @xs[z1 \\<and> z2]_zs,\n              x'' @xs[z1 \\<and> z2]_zs}\n  qFresh xs u\n   X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]]\n  qFresh xs u (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[z1 \\<and> z2]]_zs $[[rho]] $=\n    qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_zs", "apply(simp add: Let_def x'x''_rev del: alpha.simps alphaAbs.simps )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n             X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs #[[u \\<and> x'' @xs[z1 \\<and> z2]_zs]]_xs;\n     qGood\n      X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]];\n     qGood\n      (X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs);\n     u \\<noteq> x \\<and>\n     u \\<noteq> x' \\<and>\n     u \\<noteq> x'' \\<and>\n     u \\<noteq> z1 \\<and>\n     u \\<noteq> z2 \\<and>\n     u \\<noteq> x @xs[z1 \\<and> z2]_zs \\<and>\n     u \\<noteq> x'' @xs[z1 \\<and> z2]_zs;\n     qFresh xs u\n      X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]];\n     qFresh xs u\n      (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)\\<rbrakk>\n    \\<Longrightarrow> qAbs xs x'\n                       X #[[z1 \\<and> z2]]_zs #[[x' \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #[[rho]] $=\n                      qAbs xs (x'' @xs[z1 \\<and> z2]_zs)\n                       (X #[[x'' \\<and> x]]_xs #[[rho]] #[[z1 \\<and> z2]]_zs)", "by (auto simp only: Let_def alphaAbs_qAbs_iff_ex_qFresh)"], ["proof (state)\nthis:\n  qAbs xs x X $[[z1 \\<and> z2]]_zs $[[rho]] $=\n  qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>xsa z1 z2.\n     qFreshEnv xsa z1 rho \\<and> qFreshEnv xsa z2 rho \\<longrightarrow>\n     qAbs xs x X $[[z1 \\<and> z2]]_xsa $[[rho]] $=\n     qAbs xs x X $[[rho]] $[[z1 \\<and> z2]]_xsa\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qPsubst_preserves_alpha1:\nassumes \"qGoodEnv rho\" and \"qGood X \\<or> qGood Y\" and \"X #= Y\"\nshows \"(X #[[rho]]) #= (Y #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[rho]] #= Y #[[rho]]", "using alpha_preserves_qGood assms qPsubstAll_preserves_alphaAll_qSwapAll"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n  qGoodEnv rho\n  qGood X \\<or> qGood Y\n  X #= Y\n  qGoodEnv ?rho \\<Longrightarrow>\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>Y.\n       ?X #= Y \\<longrightarrow> ?X #[[?rho]] #= Y #[[?rho]]) \\<and>\n   (\\<forall>xs z1 z2.\n       qFreshEnv xs z1 ?rho \\<and> qFreshEnv xs z2 ?rho \\<longrightarrow>\n       ?X #[[z1 \\<and> z2]]_xs #[[?rho]] #=\n       ?X #[[?rho]] #[[z1 \\<and> z2]]_xs)) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>B.\n       ?A $= B \\<longrightarrow> ?A $[[?rho]] $= B $[[?rho]]) \\<and>\n   (\\<forall>xs z1 z2.\n       qFreshEnv xs z1 ?rho \\<and> qFreshEnv xs z2 ?rho \\<longrightarrow>\n       ?A $[[z1 \\<and> z2]]_xs $[[?rho]] $=\n       ?A $[[?rho]] $[[z1 \\<and> z2]]_xs))\n\ngoal (1 subgoal):\n 1. X #[[rho]] #= Y #[[rho]]", "by blast"], ["", "corollary qPsubstAbs_preserves_alphaAbs1:\nassumes \"qGoodEnv rho\" and \"qGoodAbs A \\<or> qGoodAbs B\" and \"A $= B\"\nshows \"(A $[[rho]]) $= (B $[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[[rho]] $= B $[[rho]]", "using alphaAbs_preserves_qGoodAbs assms qPsubstAll_preserves_alphaAll_qSwapAll"], ["proof (prove)\nusing this:\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n  qGoodEnv rho\n  qGoodAbs A \\<or> qGoodAbs B\n  A $= B\n  qGoodEnv ?rho \\<Longrightarrow>\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>Y.\n       ?X #= Y \\<longrightarrow> ?X #[[?rho]] #= Y #[[?rho]]) \\<and>\n   (\\<forall>xs z1 z2.\n       qFreshEnv xs z1 ?rho \\<and> qFreshEnv xs z2 ?rho \\<longrightarrow>\n       ?X #[[z1 \\<and> z2]]_xs #[[?rho]] #=\n       ?X #[[?rho]] #[[z1 \\<and> z2]]_xs)) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>B.\n       ?A $= B \\<longrightarrow> ?A $[[?rho]] $= B $[[?rho]]) \\<and>\n   (\\<forall>xs z1 z2.\n       qFreshEnv xs z1 ?rho \\<and> qFreshEnv xs z2 ?rho \\<longrightarrow>\n       ?A $[[z1 \\<and> z2]]_xs $[[?rho]] $=\n       ?A $[[?rho]] $[[z1 \\<and> z2]]_xs))\n\ngoal (1 subgoal):\n 1. A $[[rho]] $= B $[[rho]]", "by blast"], ["", "corollary alpha_qFreshEnv_qSwap_qPsubst_commute:\n\"\\<lbrakk>qGoodEnv rho; qGood X; qFreshEnv zs z1 rho; qFreshEnv zs z2 rho\\<rbrakk> \\<Longrightarrow>\n ((X #[[z1 \\<and> z2]]_zs) #[[rho]]) #= ((X #[[rho]]) #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGood X; qFreshEnv zs z1 rho;\n     qFreshEnv zs z2 rho\\<rbrakk>\n    \\<Longrightarrow> X #[[z1 \\<and> z2]]_zs #[[rho]] #=\n                      X #[[rho]] #[[z1 \\<and> z2]]_zs", "by(simp add: qPsubstAll_preserves_alphaAll_qSwapAll)"], ["", "corollary alphaAbs_qFreshEnv_qSwapAbs_qPsubstAbs_commute:\n\"\\<lbrakk>qGoodEnv rho; qGoodAbs A;\n  qFreshEnv zs z1 rho; qFreshEnv zs z2 rho\\<rbrakk> \\<Longrightarrow>\n ((A $[[z1 \\<and> z2]]_zs) $[[rho]]) $= ((A $[[rho]]) $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodEnv rho; qGoodAbs A; qFreshEnv zs z1 rho;\n     qFreshEnv zs z2 rho\\<rbrakk>\n    \\<Longrightarrow> A $[[z1 \\<and> z2]]_zs $[[rho]] $=\n                      A $[[rho]] $[[z1 \\<and> z2]]_zs", "by(simp add: qPsubstAll_preserves_alphaAll_qSwapAll)"], ["", "lemma qPsubstAll_preserves_alphaAll2:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and\n      rho'::\"('index,'bindex,'varSort,'var,'opSym)qEnv\" and rho''\nassumes rho'_alpha_rho'': \"rho' &= rho''\" and\n        goodRho': \"qGoodEnv rho'\" and goodRho'': \"qGoodEnv rho''\"\nshows\n\"(qGood X \\<longrightarrow> (X #[[rho']]) #= (X #[[rho'']])) \\<and>\n (qGoodAbs A \\<longrightarrow> (A $[[rho']]) $= (A $[[rho'']]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> X #[[rho']] #= X #[[rho'']]) \\<and>\n    (qGoodAbs A \\<longrightarrow> A $[[rho']] $= A $[[rho'']])", "proof(induction rule: qGood_qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']])\n         inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #[[rho']] #=\n                         qOp delta inp binp #[[rho'']]\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']])\n         inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #[[rho']] #=\n                         qOp delta inp binp #[[rho'']]\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "proof (cases \"rho' xs x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rho' xs x = None \\<Longrightarrow>\n    qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n 2. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "case None"], ["proof (state)\nthis:\n  rho' xs x = None\n\ngoal (2 subgoals):\n 1. rho' xs x = None \\<Longrightarrow>\n    qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n 2. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "hence \"rho'' xs x = None\""], ["proof (prove)\nusing this:\n  rho' xs x = None\n\ngoal (1 subgoal):\n 1. rho'' xs x = None", "using rho'_alpha_rho''"], ["proof (prove)\nusing this:\n  rho' xs x = None\n  rho' &= rho''\n\ngoal (1 subgoal):\n 1. rho'' xs x = None", "unfolding alphaEnv_def sameDom_def"], ["proof (prove)\nusing this:\n  rho' xs x = None\n  (rho', rho'')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n            liftAll2 (#=) (rho xs) (rho' xs)}\n\ngoal (1 subgoal):\n 1. rho'' xs x = None", "by auto"], ["proof (state)\nthis:\n  rho'' xs x = None\n\ngoal (2 subgoals):\n 1. rho' xs x = None \\<Longrightarrow>\n    qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n 2. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "thus ?thesis"], ["proof (prove)\nusing this:\n  rho'' xs x = None\n\ngoal (1 subgoal):\n 1. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "using None"], ["proof (prove)\nusing this:\n  rho'' xs x = None\n  rho' xs x = None\n\ngoal (1 subgoal):\n 1. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "by simp"], ["proof (state)\nthis:\n  qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "case (Some X')"], ["proof (state)\nthis:\n  rho' xs x = Some X'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "then"], ["proof (chain)\npicking this:\n  rho' xs x = Some X'", "obtain X'' where rho'': \"rho'' xs x = Some X''\""], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n\ngoal (1 subgoal):\n 1. (\\<And>X''.\n        rho'' xs x = Some X'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n  rho' &= rho''\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. (\\<And>X''.\n        rho'' xs x = Some X'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaEnv_def sameDom_def"], ["proof (prove)\nusing this:\n  rho' xs x = Some X'\n  (rho', rho'')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            (\\<forall>i. (rho xs i = None) = (rho' xs i = None)) \\<and>\n            liftAll2 (#=) (rho xs) (rho' xs)}\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. (\\<And>X''.\n        rho'' xs x = Some X'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "hence \"X' #= X''\""], ["proof (prove)\nusing this:\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. X' #= X''", "using Some rho'_alpha_rho''"], ["proof (prove)\nusing this:\n  rho'' xs x = Some X''\n  rho' xs x = Some X'\n  rho' &= rho''\n\ngoal (1 subgoal):\n 1. X' #= X''", "unfolding alphaEnv_def liftAll2_def"], ["proof (prove)\nusing this:\n  rho'' xs x = Some X''\n  rho' xs x = Some X'\n  (rho', rho'')\n  \\<in> {(rho, rho').\n         \\<forall>xs.\n            sameDom (rho xs) (rho' xs) \\<and>\n            (\\<forall>i v1 v2.\n                rho xs i = Some v1 \\<and>\n                rho' xs i = Some v2 \\<longrightarrow>\n                v1 #= v2)}\n\ngoal (1 subgoal):\n 1. X' #= X''", "by auto"], ["proof (state)\nthis:\n  X' #= X''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rho' xs x = Some a \\<Longrightarrow>\n       qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "thus ?thesis"], ["proof (prove)\nusing this:\n  X' #= X''\n\ngoal (1 subgoal):\n 1. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "using Some rho''"], ["proof (prove)\nusing this:\n  X' #= X''\n  rho' xs x = Some X'\n  rho'' xs x = Some X''\n\ngoal (1 subgoal):\n 1. qVar xs x #[[rho']] #= qVar xs x #[[rho'']]", "by simp"], ["proof (state)\nthis:\n  qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qVar xs x #[[rho']] #= qVar xs x #[[rho'']]\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']])\n         inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #[[rho']] #=\n                         qOp delta inp binp #[[rho'']]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']])\n         inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #[[rho']] #=\n                         qOp delta inp binp #[[rho'']]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']]) inp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']]) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']])\n         inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']])\n         binp\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #[[rho']] #=\n                         qOp delta inp binp #[[rho'']]\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "then"], ["proof (chain)\npicking this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']]) inp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']]) binp", "show ?case"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll (\\<lambda>X. qGood X \\<and> X #[[rho']] #= X #[[rho'']]) inp\n  liftAll (\\<lambda>A. qGoodAbs A \\<and> A $[[rho']] $= A $[[rho'']]) binp\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[rho']] #= qOp delta inp binp #[[rho'']]", "by (auto simp: lift_def liftAll_def liftAll2_def sameDom_def Let_def\n      split: option.splits)"], ["proof (state)\nthis:\n  qOp delta inp binp #[[rho']] #= qOp delta inp binp #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "case (Abs xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  ?Y22 #[[rho']] #= ?Y22 #[[rho'']]\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  ?Y22 #[[rho']] #= ?Y22 #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?x' = \"pickQFreshEnv xs {x} {X} {rho'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?x'' = \"pickQFreshEnv xs {x} {X} {rho''}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "obtain x' x'' where x'x''_def: \"x' = ?x'\" \"x'' = ?x''\" and\n          x'x''_rev: \"?x' = x'\" \"?x'' = x''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' x''.\n        \\<lbrakk>x' = pickQFreshEnv xs {x} {X} {rho'};\n         x'' = pickQFreshEnv xs {x} {X} {rho''};\n         pickQFreshEnv xs {x} {X} {rho'} = x';\n         pickQFreshEnv xs {x} {X} {rho''} = x''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' = pickQFreshEnv xs {x} {X} {rho'}\n  x'' = pickQFreshEnv xs {x} {X} {rho''}\n  pickQFreshEnv xs {x} {X} {rho'} = x'\n  pickQFreshEnv xs {x} {X} {rho''} = x''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have x'x''_fresh_X: \"qFresh xs x' X \\<and> qFresh xs x'' X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x' X \\<and> qFresh xs x'' X", "unfolding x'x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho'}) X \\<and>\n    qFresh xs (pickQFreshEnv xs {x} {X} {rho''}) X", "using \\<open>qGood X\\<close> goodRho' goodRho''"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho'}) X \\<and>\n    qFresh xs (pickQFreshEnv xs {x} {X} {rho''}) X", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFresh xs x' X \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have x'_fresh_rho': \"qFreshEnv xs x' rho'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x' rho'", "unfolding x'x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho'}) rho'", "using \\<open>qGood X\\<close> goodRho' goodRho''"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho'}) rho'", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFreshEnv xs x' rho'\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have x''_fresh_rho'': \"qFreshEnv xs x'' rho''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x'' rho''", "unfolding x'x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho''}) rho''", "using \\<open>qGood X\\<close> goodRho' goodRho''"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho''}) rho''", "by (auto simp add: pickQFreshEnv)"], ["proof (state)\nthis:\n  qFreshEnv xs x'' rho''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "obtain u where u_not: \"u \\<notin> {x,x',x''}\" and\n  u_fresh_X: \"qFresh xs u X\" and\n  u_fresh_rho': \"qFreshEnv xs u rho'\" and u_fresh_rho'': \"qFreshEnv xs u rho''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x''}; qFresh xs u X;\n         qFreshEnv xs u rho'; qFreshEnv xs u rho''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>qGood X\\<close> goodRho' goodRho''"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho'\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x''}; qFresh xs u X;\n         qFreshEnv xs u rho'; qFreshEnv xs u rho''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_qFreshEnv[of \"{x,x',x''}\" \"{X}\" \"{rho',rho''}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho'\n  qGoodEnv rho''\n  \\<lbrakk>|{x, x', x''}| <o |UNIV| \\<or> finite {x, x', x''};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |{rho', rho''}| <o |UNIV| \\<or> finite {rho', rho''};\n   Ball {rho', rho''} qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> {x, x', x''} \\<and>\n                       (\\<forall>X\\<in>{X}. qFresh ?xs z X) \\<and>\n                       (\\<forall>rho\\<in>{rho', rho''}. qFreshEnv ?xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x''}; qFresh xs u X;\n         qFreshEnv xs u rho'; qFreshEnv xs u rho''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x''}\n  qFresh xs u X\n  qFreshEnv xs u rho'\n  qFreshEnv xs u rho''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "(* Preliminary facts and notations: *)"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x''}\n  qFresh xs u X\n  qFreshEnv xs u rho'\n  qFreshEnv xs u rho''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx'x = \"X #[[x' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx'x_rho' = \"?Xx'x #[[rho']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx'x_rho'_ux' = \"?Xx'x_rho' #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx'xux' = \"?Xx'x #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx'xux'_rho' = \"?Xx'xux' #[[rho']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xux = \"X #[[u \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xux_rho' = \"?Xux #[[rho']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xux_rho'' = \"?Xux #[[rho'']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx''x = \"X #[[x'' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx''xux'' = \"?Xx''x #[[u \\<and> x'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx''xux''_rho'' = \"?Xx''xux'' #[[rho'']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx''x_rho'' = \"?Xx''x #[[rho'']]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "let ?Xx''x_rho''_ux'' = \"?Xx''x_rho'' #[[u \\<and> x'']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "(* Good: *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have goodXx'x: \"qGood ?Xx'x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence goodXx'x_rho': \"qGood ?Xx'x_rho'\""], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho']]", "using \\<open>qGood X\\<close> goodRho' qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGood X\n  qGoodEnv rho'\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho']]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x' \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence goodXx'x_rho'_ux': \"qGood ?Xx'x_rho'_ux'\""], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho']]\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have goodXx'xux': \"qGood ?Xx'xux'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)", "using goodXx'x qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have goodXux: \"qGood ?Xux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[u \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have goodXx''x: \"qGood ?Xx''x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x'' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence goodXx''x_rho'': \"qGood ?Xx''x_rho''\""], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[rho'']]", "using \\<open>qGood X\\<close> goodRho'' qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qGood X\n  qGoodEnv rho''\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x'' \\<and> x]]_xs #[[rho'']]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x'' \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "(* Fresh: *)"], ["proof (state)\nthis:\n  qGood X #[[x'' \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"qFresh xs u ?Xx'x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x' \\<and> x]]_xs)", "using u_not u_fresh_X"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x''}\n  qFresh xs u X\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x' \\<and> x]]_xs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence fresh_Xx'x_rho': \"qFresh xs u ?Xx'x_rho'\""], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x' \\<and> x]]_xs #[[rho']]", "using u_fresh_rho'  goodXx'x goodRho'"], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n  qFreshEnv xs u rho'\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho'\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x' \\<and> x]]_xs #[[rho']]", "by(auto simp add: qPsubst_preserves_qFresh)"], ["proof (state)\nthis:\n  qFresh xs u X #[[x' \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"qFresh xs u ?Xx''x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs)", "using u_not u_fresh_X"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', x''}\n  qFresh xs u X\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x'' \\<and> x]]_xs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence fresh_Xx''x_rho'': \"qFresh xs u ?Xx''x_rho''\""], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho'']]", "using u_fresh_rho''  goodXx''x goodRho''"], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x'' \\<and> x]]_xs)\n  qFreshEnv xs u rho''\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho'']]", "by(auto simp add: qPsubst_preserves_qFresh)"], ["proof (state)\nthis:\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "(* qSwapped: *)"], ["proof (state)\nthis:\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have Xux: \"(X,?Xux) :qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped", "by(simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "(* Main proof: *)"], ["proof (state)\nthis:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"?Xx'x_rho'_ux' #= ?Xx'xux'_rho'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]", "using goodRho' goodXx'x u_fresh_rho' x'_fresh_rho'"], ["proof (prove)\nusing this:\n  qGoodEnv rho'\n  qGood (X #[[x' \\<and> x]]_xs)\n  qFreshEnv xs u rho'\n  qFreshEnv xs x' rho'\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]", "by(auto simp: alpha_qFreshEnv_qSwap_qPsubst_commute alpha_sym)"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "{"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"?Xx'xux' #= ?Xux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs", "using \\<open>qGood X\\<close> u_fresh_X x'x''_fresh_X"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs u X\n  qFresh xs x' X \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs", "using alpha_qFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs u X\n  qFresh xs x' X \\<and> qFresh xs x'' X\n  \\<lbrakk>qGood ?X; qFresh ?zs ?y ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs #=\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence \"?Xx'xux'_rho' #= ?Xux_rho'\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n    X #[[u \\<and> x]]_xs #[[rho']]", "using goodXx'xux' goodRho'"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n  qGoodEnv rho'\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n    X #[[u \\<and> x]]_xs #[[rho']]", "using qPsubst_preserves_alpha1"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n  qGoodEnv rho'\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X \\<or> qGood ?Y; ?X #= ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?rho]] #= ?Y #[[?rho]]\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n    X #[[u \\<and> x]]_xs #[[rho']]", "by auto"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "}"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"?Xux_rho' #= ?Xux_rho''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]", "using Xux Abs.IH"], ["proof (prove)\nusing this:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n  qGood ?Y22 \\<and> qSkel ?Y22 = qSkel X \\<Longrightarrow>\n  ?Y22 #[[rho']] #= ?Y22 #[[rho'']]\n  (X, ?Y22) \\<in> qSwapped \\<Longrightarrow>\n  ?Y22 #[[rho']] #= ?Y22 #[[rho'']]\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]", "by auto"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "{"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"?Xux #= ?Xx''xux''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs", "using \\<open>qGood X\\<close> u_fresh_X x'x''_fresh_X"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs u X\n  qFresh xs x' X \\<and> qFresh xs x'' X\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs", "by(auto simp add: alpha_qFresh_qSwap_compose alpha_sym)"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence \"?Xux_rho'' #= ?Xx''xux''_rho''\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho'']] #=\n    X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]", "using goodXux goodRho''"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n  qGood (X #[[u \\<and> x]]_xs)\n  qGoodEnv rho''\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho'']] #=\n    X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]", "using qPsubst_preserves_alpha1"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs\n  qGood (X #[[u \\<and> x]]_xs)\n  qGoodEnv rho''\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X \\<or> qGood ?Y; ?X #= ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?rho]] #= ?Y #[[?rho]]\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho'']] #=\n    X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]", "by auto"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "}"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "have \"?Xx''xux''_rho'' #= ?Xx''x_rho''_ux''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n    X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs", "using goodRho'' goodXx''x u_fresh_rho'' x''_fresh_rho''"], ["proof (prove)\nusing this:\n  qGoodEnv rho''\n  qGood (X #[[x'' \\<and> x]]_xs)\n  qFreshEnv xs u rho''\n  qFreshEnv xs x'' rho''\n\ngoal (1 subgoal):\n 1. X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n    X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs", "by(auto simp: alpha_qFreshEnv_qSwap_qPsubst_commute)"], ["proof (state)\nthis:\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "ultimately"], ["proof (chain)\npicking this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs", "have \"?Xx'x_rho'_ux' #= ?Xx''x_rho''_ux''\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs", "using goodXx'x_rho'_ux' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho']] #=\n  X #[[u \\<and> x]]_xs #[[rho']]\n  X #[[u \\<and> x]]_xs #[[rho']] #= X #[[u \\<and> x]]_xs #[[rho'']]\n  X #[[u \\<and> x]]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']]\n  X #[[x'' \\<and> x]]_xs #[[u \\<and> x'']]_xs #[[rho'']] #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n    X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "hence \"qAbs xs ?x' (qPsubst rho' (X #[[?x' \\<and> x]]_xs)) $=\n         qAbs xs ?x''(qPsubst rho''(X #[[?x''\\<and> x]]_xs))\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs (pickQFreshEnv xs {x} {X} {rho'})\n     X #[[pickQFreshEnv xs {x} {X} {rho'} \\<and> x]]_xs #[[rho']] $=\n    qAbs xs (pickQFreshEnv xs {x} {X} {rho''})\n     X #[[pickQFreshEnv xs {x} {X} {rho''} \\<and> x]]_xs #[[rho'']]", "unfolding x'x''_rev"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho']] $=\n    qAbs xs x'' X #[[x'' \\<and> x]]_xs #[[rho'']]", "using goodXx'x_rho' fresh_Xx'x_rho' fresh_Xx''x_rho''"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho']] #[[u \\<and> x']]_xs #=\n  X #[[x'' \\<and> x]]_xs #[[rho'']] #[[u \\<and> x'']]_xs\n  qGood X #[[x' \\<and> x]]_xs #[[rho']]\n  qFresh xs u X #[[x' \\<and> x]]_xs #[[rho']]\n  qFresh xs u X #[[x'' \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho']] $=\n    qAbs xs x'' X #[[x'' \\<and> x]]_xs #[[rho'']]", "by (auto simp only: alphaAbs_qAbs_iff_ex_qFresh)"], ["proof (state)\nthis:\n  qAbs xs (pickQFreshEnv xs {x} {X} {rho'})\n   X #[[pickQFreshEnv xs {x} {X} {rho'} \\<and> x]]_xs #[[rho']] $=\n  qAbs xs (pickQFreshEnv xs {x} {X} {rho''})\n   X #[[pickQFreshEnv xs {x} {X} {rho''} \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']];\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           Y #[[rho']] #= Y #[[rho'']]\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "thus ?case"], ["proof (prove)\nusing this:\n  qAbs xs (pickQFreshEnv xs {x} {X} {rho'})\n   X #[[pickQFreshEnv xs {x} {X} {rho'} \\<and> x]]_xs #[[rho']] $=\n  qAbs xs (pickQFreshEnv xs {x} {X} {rho''})\n   X #[[pickQFreshEnv xs {x} {X} {rho''} \\<and> x]]_xs #[[rho'']]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]", "by (metis qPsubstAbs.simps)"], ["proof (state)\nthis:\n  qAbs xs x X $[[rho']] $= qAbs xs x X $[[rho'']]\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qPsubst_preserves_alpha2:\n\"\\<lbrakk>qGood X; qGoodEnv rho'; qGoodEnv rho''; rho' &= rho''\\<rbrakk>\n \\<Longrightarrow> (X #[[rho']]) #= (X #[[rho'']])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGood X; qGoodEnv rho'; qGoodEnv rho''; rho' &= rho''\\<rbrakk>\n    \\<Longrightarrow> X #[[rho']] #= X #[[rho'']]", "by(simp add: qPsubstAll_preserves_alphaAll2)"], ["", "corollary qPsubstAbs_preserves_alphaAbs2:\n\"\\<lbrakk>qGoodAbs A; qGoodEnv rho'; qGoodEnv rho''; rho' &= rho''\\<rbrakk>\n \\<Longrightarrow> (A $[[rho']]) $= (A $[[rho'']])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodAbs A; qGoodEnv rho'; qGoodEnv rho'';\n     rho' &= rho''\\<rbrakk>\n    \\<Longrightarrow> A $[[rho']] $= A $[[rho'']]", "by(simp add: qPsubstAll_preserves_alphaAll2)"], ["", "lemma qPsubst_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"qGoodEnv rho\" and \"qGoodEnv rho'\" \nand \"X #= X'\" and \"rho &= rho'\"\nshows \"(X #[[rho]]) #= (X' #[[rho']])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[rho]] #= X' #[[rho']]", "by (metis (no_types, lifting) assms alpha_trans qPsubst_preserves_alpha1 \nqPsubst_preserves_alpha2 qPsubst_preserves_qGood)"], ["", "lemma qPsubstAbs_preserves_alphaAbs:\nassumes \"qGoodAbs A \\<or> qGoodAbs A'\" and \"qGoodEnv rho\" and \"qGoodEnv rho'\" \nand \"A $= A'\" and \"rho &= rho'\"\nshows \"(A $[[rho]]) $= (A' $[[rho']])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[[rho]] $= A' $[[rho']]", "using assms"], ["proof (prove)\nusing this:\n  qGoodAbs A \\<or> qGoodAbs A'\n  qGoodEnv rho\n  qGoodEnv rho'\n  A $= A'\n  rho &= rho'\n\ngoal (1 subgoal):\n 1. A $[[rho]] $= A' $[[rho']]", "by (meson alphaAbs_trans qPsubstAbs_preserves_alphaAbs1 \n    qPsubstAbs_preserves_qGoodAbs qPsubstAll_preserves_alphaAll2)"], ["", "lemma qFresh_qPsubst_commute_qAbs:\nassumes good_X: \"qGood X\" and good_rho: \"qGoodEnv rho\" and\n        x_fresh_rho: \"qFreshEnv xs x rho\"\nshows \"((qAbs xs x X) $[[rho]]) $= qAbs xs x (X #[[rho]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "(* Preliminary facts and notations: *)"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?x' = \"pickQFreshEnv xs {x} {X} {rho}\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "obtain x' where x'_def: \"x' = ?x'\" and x'_rev: \"?x' = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' = pickQFreshEnv xs {x} {X} {rho};\n         pickQFreshEnv xs {x} {X} {rho} = x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' = pickQFreshEnv xs {x} {X} {rho}\n  pickQFreshEnv xs {x} {X} {rho} = x'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have x'_not: \"x' \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<noteq> x", "unfolding x'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFreshEnv xs {x} {X} {rho} \\<noteq> x", "using assms pickQFreshEnv[of \"{x}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  qFreshEnv xs x rho\n  \\<lbrakk>|{x}| <o |UNIV| \\<or> finite {x};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |?Rho| <o |UNIV| \\<or> finite ?Rho; Ball ?Rho qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> pickQFreshEnv ?xs {x} {X} ?Rho \\<notin> {x} \\<and>\n                    (\\<forall>Xa\\<in>{X}.\n                        qFresh ?xs (pickQFreshEnv ?xs {x} {X} ?Rho)\n                         Xa) \\<and>\n                    (\\<forall>rho\\<in>?Rho.\n                        qFreshEnv ?xs (pickQFreshEnv ?xs {x} {X} ?Rho) rho)\n\ngoal (1 subgoal):\n 1. pickQFreshEnv xs {x} {X} {rho} \\<noteq> x", "by auto"], ["proof (state)\nthis:\n  x' \\<noteq> x\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have x'_fresh_X: \"qFresh xs x' X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs x' X", "unfolding x'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X", "using assms pickQFreshEnv[of \"{x}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  qFreshEnv xs x rho\n  \\<lbrakk>|{x}| <o |UNIV| \\<or> finite {x};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |?Rho| <o |UNIV| \\<or> finite ?Rho; Ball ?Rho qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> pickQFreshEnv ?xs {x} {X} ?Rho \\<notin> {x} \\<and>\n                    (\\<forall>Xa\\<in>{X}.\n                        qFresh ?xs (pickQFreshEnv ?xs {x} {X} ?Rho)\n                         Xa) \\<and>\n                    (\\<forall>rho\\<in>?Rho.\n                        qFreshEnv ?xs (pickQFreshEnv ?xs {x} {X} ?Rho) rho)\n\ngoal (1 subgoal):\n 1. qFresh xs (pickQFreshEnv xs {x} {X} {rho}) X", "by auto"], ["proof (state)\nthis:\n  qFresh xs x' X\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have x'_fresh_rho: \"qFreshEnv xs x' rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs x' rho", "unfolding x'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "using assms pickQFreshEnv[of \"{x}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  qFreshEnv xs x rho\n  \\<lbrakk>|{x}| <o |UNIV| \\<or> finite {x};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |?Rho| <o |UNIV| \\<or> finite ?Rho; Ball ?Rho qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> pickQFreshEnv ?xs {x} {X} ?Rho \\<notin> {x} \\<and>\n                    (\\<forall>Xa\\<in>{X}.\n                        qFresh ?xs (pickQFreshEnv ?xs {x} {X} ?Rho)\n                         Xa) \\<and>\n                    (\\<forall>rho\\<in>?Rho.\n                        qFreshEnv ?xs (pickQFreshEnv ?xs {x} {X} ?Rho) rho)\n\ngoal (1 subgoal):\n 1. qFreshEnv xs (pickQFreshEnv xs {x} {X} {rho}) rho", "by auto"], ["proof (state)\nthis:\n  qFreshEnv xs x' rho\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "obtain u where u_not: \"u \\<notin> {x,x'}\" and\n  u_fresh_X: \"qFresh xs u X\" and u_fresh_rho: \"qFreshEnv xs u rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x'}; qFresh xs u X;\n         qFreshEnv xs u rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using good_X good_rho obtain_qFreshEnv[of \"{x,x'}\" \"{X}\" \"{rho}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  \\<lbrakk>|{x, x'}| <o |UNIV| \\<or> finite {x, x'};\n   |{X}| <o |UNIV| \\<or> finite {X}; Ball {X} qGood;\n   |{rho}| <o |UNIV| \\<or> finite {rho}; Ball {rho} qGoodEnv\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       z \\<notin> {x, x'} \\<and>\n                       (\\<forall>X\\<in>{X}. qFresh ?xs z X) \\<and>\n                       (\\<forall>rho\\<in>{rho}. qFreshEnv ?xs z rho)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x'}; qFresh xs u X;\n         qFreshEnv xs u rho\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x'}\n  qFresh xs u X\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xx'x = \"X #[[x' \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xx'x_rho = \"?Xx'x #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xx'x_rho_ux' = \"?Xx'x_rho #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xx'xux' = \"?Xx'x #[[u \\<and> x']]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xx'xux'_rho = \"?Xx'xux' #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xux = \"X #[[u \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xux_rho = \"?Xux #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xrho = \"X #[[rho]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "let ?Xrho_ux = \"?Xrho #[[u \\<and> x]]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "(* Good: *)"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have good_Xx'x: \"qGood ?Xx'x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using good_X qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "hence good_Xx'x_rho: \"qGood ?Xx'x_rho\""], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "using good_rho qPsubst_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X #[[?rho]]\n\ngoal (1 subgoal):\n 1. qGood X #[[x' \\<and> x]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "hence good_Xx'x_rho_ux': \"qGood ?Xx'x_rho_ux'\""], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have good_Xx'xux': \"qGood ?Xx'xux'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)", "using good_Xx'x qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "(* Fresh: *)"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have u_fresh_Xx'x: \"qFresh xs u ?Xx'x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x' \\<and> x]]_xs)", "using u_fresh_X u_not"], ["proof (prove)\nusing this:\n  qFresh xs u X\n  u \\<notin> {x, x'}\n\ngoal (1 subgoal):\n 1. qFresh xs u (X #[[x' \\<and> x]]_xs)", "by(auto simp add: qSwap_preserves_qFresh_distinct)"], ["proof (state)\nthis:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "hence u_fresh_Xx'x_rho: \"qFresh xs u ?Xx'x_rho\""], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x' \\<and> x]]_xs #[[rho]]", "using good_rho good_Xx'x u_fresh_rho"], ["proof (prove)\nusing this:\n  qFresh xs u (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  qGood (X #[[x' \\<and> x]]_xs)\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[x' \\<and> x]]_xs #[[rho]]", "by(auto simp add: qPsubst_preserves_qFresh)"], ["proof (state)\nthis:\n  qFresh xs u X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have u_fresh_Xrho: \"qFresh xs u ?Xrho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh xs u X #[[rho]]", "using good_rho good_X u_fresh_X u_fresh_rho"], ["proof (prove)\nusing this:\n  qGoodEnv rho\n  qGood X\n  qFresh xs u X\n  qFreshEnv xs u rho\n\ngoal (1 subgoal):\n 1. qFresh xs u X #[[rho]]", "by(auto simp add: qPsubst_preserves_qFresh)\n  (* Main proof: *)  -"], ["proof (state)\nthis:\n  qFresh xs u X #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have \"?Xx'x_rho_ux' #= ?Xx'xux'_rho\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]", "using good_Xx'x good_rho u_fresh_rho x'_fresh_rho"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  qFreshEnv xs u rho\n  qFreshEnv xs x' rho\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]", "using alpha_qFreshEnv_qSwap_qPsubst_commute alpha_sym"], ["proof (prove)\nusing this:\n  qGood (X #[[x' \\<and> x]]_xs)\n  qGoodEnv rho\n  qFreshEnv xs u rho\n  qFreshEnv xs x' rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X; qFreshEnv ?zs ?z1.0 ?rho;\n   qFreshEnv ?zs ?z2.0 ?rho\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #[[?rho]] #=\n                    ?X #[[?rho]] #[[?z1.0 \\<and> ?z2.0]]_?zs\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]", "by blast"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "{"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have \"?Xx'xux' #= ?Xux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs", "using good_X u_fresh_X x'_fresh_X"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs u X\n  qFresh xs x' X\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs", "by (auto simp add: alpha_qFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "hence \"?Xx'xux'_rho #= ?Xux_rho\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[u \\<and> x]]_xs #[[rho]]", "using good_Xx'xux' good_rho qPsubst_preserves_alpha1"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #= X #[[u \\<and> x]]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs)\n  qGoodEnv rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X \\<or> qGood ?Y; ?X #= ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?rho]] #= ?Y #[[?rho]]\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n    X #[[u \\<and> x]]_xs #[[rho]]", "by auto"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "}"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "moreover"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "have \"?Xux_rho #= ?Xrho_ux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs", "using good_X good_rho u_fresh_rho x_fresh_rho"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  qFreshEnv xs u rho\n  qFreshEnv xs x rho\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs", "using alpha_qFreshEnv_qSwap_qPsubst_commute"], ["proof (prove)\nusing this:\n  qGood X\n  qGoodEnv rho\n  qFreshEnv xs u rho\n  qFreshEnv xs x rho\n  \\<lbrakk>qGoodEnv ?rho; qGood ?X; qFreshEnv ?zs ?z1.0 ?rho;\n   qFreshEnv ?zs ?z2.0 ?rho\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #[[?rho]] #=\n                    ?X #[[?rho]] #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "ultimately"], ["proof (chain)\npicking this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n  X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs", "have \"?Xx'x_rho_ux' #= ?Xrho_ux\""], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n  X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs", "using good_Xx'x_rho_ux' alpha_trans"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]]\n  X #[[x' \\<and> x]]_xs #[[u \\<and> x']]_xs #[[rho]] #=\n  X #[[u \\<and> x]]_xs #[[rho]]\n  X #[[u \\<and> x]]_xs #[[rho]] #= X #[[rho]] #[[u \\<and> x]]_xs\n  qGood (X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[rho]] #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n  X #[[rho]] #[[u \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]", "apply (simp add: Let_def del: alpha.simps alphaAbs.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs \\<Longrightarrow>\n    qAbs xs (pickQFreshEnv xs {x} {X} {rho})\n     X #[[pickQFreshEnv xs {x} {X} {rho} \\<and> x]]_xs #[[rho]] $=\n    qAbs xs x X #[[rho]]", "unfolding x'_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs \\<Longrightarrow>\n    qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]] $= qAbs xs x X #[[rho]]", "using good_Xx'x_rho"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs \\<Longrightarrow>\n    qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]] $= qAbs xs x X #[[rho]]", "using u_fresh_Xx'x_rho u_fresh_Xrho"], ["proof (prove)\nusing this:\n  qGood X #[[x' \\<and> x]]_xs #[[rho]]\n  qFresh xs u X #[[x' \\<and> x]]_xs #[[rho]]\n  qFresh xs u X #[[rho]]\n\ngoal (1 subgoal):\n 1. X #[[x' \\<and> x]]_xs #[[rho]] #[[u \\<and> x']]_xs #=\n    X #[[rho]] #[[u \\<and> x]]_xs \\<Longrightarrow>\n    qAbs xs x' X #[[x' \\<and> x]]_xs #[[rho]] $= qAbs xs x X #[[rho]]", "by (auto simp only: alphaAbs_qAbs_iff_ex_qFresh)"], ["proof (state)\nthis:\n  qAbs xs x X $[[rho]] $= qAbs xs x X #[[rho]]\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context FixVars *)"], ["", "end"]]}