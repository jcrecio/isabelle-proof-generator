{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Recursion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemmas gWlsInp_defs = gWlsInp_def sameDom_def liftAll2_def", "lemmas gWlsBinp_defs = gWlsBinp_def sameDom_def liftAll2_def", "lemma sameDom_swapInp_gSwapInp[simp]:\nassumes \"wlsInp delta inp'\" and \"gWlsInp MOD delta inp\"\nshows \"sameDom (swapInp zs z1 z2 inp') (gSwapInp MOD zs z1 z2 inp' inp)\"", "lemma sameDom_substInp_gSubstInp[simp]:\nassumes \"wlsInp delta inp'\" and \"gWlsInp MOD delta inp\"\nshows \"sameDom (substInp ys Y' y inp') (gSubstInp MOD ys Y' Y y inp' inp)\"", "lemma sameDom_swapBinp_gSwapBinp[simp]:\nassumes \"wlsBinp delta binp'\" and \"gWlsBinp MOD delta binp\"\nshows \"sameDom (swapBinp zs z1 z2 binp') (gSwapBinp MOD zs z1 z2 binp' binp)\"", "lemma sameDom_substBinp_gSubstBinp[simp]:\nassumes \"wlsBinp delta binp'\" and \"gWlsBinp MOD delta binp\"\nshows \"sameDom (substBinp ys Y' y binp') (gSubstBinp MOD ys Y' Y y binp' binp)\"", "lemmas sameDom_gInput_simps =\nsameDom_swapInp_gSwapInp sameDom_substInp_gSubstInp\nsameDom_swapBinp_gSwapBinp sameDom_substBinp_gSubstBinp", "lemmas gWlsAllDisj_defs =\ngWlsAllDisj_def gWlsDisj_def gWlsAbsDisj_def", "lemmas gConsPresGWls_defs = gConsPresGWls_def\ngVarPresGWls_def gAbsPresGWls_def gOpPresGWls_def", "lemmas gSwapAllPresGWlsAll_defs = \ngSwapAllPresGWlsAll_def gSwapPresGWls_def gSwapAbsPresGWlsAbs_def", "lemmas gSubstAllPresGWlsAll_defs = \ngSubstAllPresGWlsAll_def gSubstPresGWls_def gSubstAbsPresGWlsAbs_def", "lemmas gFreshCls_defs = gFreshCls_def\ngFreshGVar_def gFreshGAbs1_def gFreshGAbs2_def gFreshGOp_def", "lemmas gSwapCls_defs = gSwapCls_def\ngSwapGVar_def gSwapGAbs_def gSwapGOp_def", "lemmas gSubstCls_defs = gSubstCls_def\ngSubstGVar1_def gSubstGVar2_def gSubstGAbs_def gSubstGOp_def", "lemmas wlsFSw_defs1 = wlsFSw_def\ngWlsAllDisj_def gWlsAbsIsInBar_def\ngConsPresGWls_def gSwapAllPresGWlsAll_def\ngFreshCls_def gSwapCls_def gAbsCongS_def", "lemmas wlsFSw_defs = wlsFSw_def\ngWlsAllDisj_defs gWlsAbsIsInBar_def\ngConsPresGWls_defs gSwapAllPresGWlsAll_defs\ngFreshCls_defs gSwapCls_defs gAbsCongS_def", "lemmas wlsFSb_defs1 = wlsFSb_def\ngWlsAllDisj_def gWlsAbsIsInBar_def\ngConsPresGWls_def gSubstAllPresGWlsAll_def\ngFreshCls_def gSubstCls_def gAbsRen_def", "lemmas wlsFSb_defs = wlsFSb_def\ngWlsAllDisj_defs gWlsAbsIsInBar_def\ngConsPresGWls_defs gSubstAllPresGWlsAll_defs\ngFreshCls_defs gSubstCls_defs gAbsRen_def", "lemmas wlsFSwSb_defs1 = wlsFSwSb_def\nwlsFSw_def gSubstAllPresGWlsAll_def gSubstCls_def", "lemmas wlsFSwSb_defs = wlsFSwSb_def\nwlsFSw_def gSubstAllPresGWlsAll_defs gSubstCls_defs", "lemmas wlsFSbSw_defs1 = wlsFSbSw_def\nwlsFSw_def gSwapAllPresGWlsAll_def gSwapCls_def", "lemmas wlsFSbSw_defs = wlsFSbSw_def\nwlsFSw_def gSwapAllPresGWlsAll_defs gSwapCls_defs", "lemma imp_gSwapInpPresGWlsInp:\n\"gSwapPresGWls MOD \\<Longrightarrow> gSwapInpPresGWlsInp MOD\"", "lemma imp_gSubstInpPresGWlsInp:\n\"gSubstPresGWls MOD \\<Longrightarrow> gSubstInpPresGWlsInp MOD\"", "lemma imp_gSwapBinpPresGWlsBinp:\n\"gSwapAbsPresGWlsAbs MOD \\<Longrightarrow> gSwapBinpPresGWlsBinp MOD\"", "lemma imp_gSubstBinpPresGWlsBinp:\n\"gSubstAbsPresGWlsAbs MOD \\<Longrightarrow> gSubstBinpPresGWlsBinp MOD\"", "lemmas presWlsAll_defs = presWlsAll_def presWls_def presWlsAbs_def", "lemmas presCons_defs = presCons_def\npresVar_def presAbs_def presOp_def", "lemmas presFreshAll_defs = presFreshAll_def\npresFresh_def presFreshAbs_def", "lemmas presSwapAll_defs = presSwapAll_def\npresSwap_def presSwapAbs_def", "lemmas presSubstAll_defs = presSubstAll_def\npresSubst_def presSubstAbs_def", "lemmas termFSwMorph_defs1 = termFSwMorph_def\npresWlsAll_def presCons_def presFreshAll_def presSwapAll_def", "lemmas termFSwMorph_defs = termFSwMorph_def\npresWlsAll_defs presCons_defs presFreshAll_defs presSwapAll_defs", "lemmas termFSbMorph_defs1 = termFSbMorph_def\npresWlsAll_def presCons_def presFreshAll_def presSubstAll_def", "lemmas termFSbMorph_defs = termFSbMorph_def\npresWlsAll_defs presCons_defs presFreshAll_defs presSubstAll_defs", "lemmas termFSwSbMorph_defs1 = termFSwSbMorph_def\ntermFSwMorph_def presSubstAll_def", "lemmas termFSwSbMorph_defs = termFSwSbMorph_def\ntermFSwMorph_defs presSubstAll_defs", "lemma presWls_wlsInp:\n\"wlsInp delta inp \\<Longrightarrow> presWls h MOD \\<Longrightarrow> gWlsInp MOD delta (lift h inp)\"", "lemma presWls_wlsBinp:\n\"wlsBinp delta binp \\<Longrightarrow> presWlsAbs hA MOD \\<Longrightarrow> gWlsBinp MOD delta (lift hA binp)\"", "lemma fromMOD_basic_simps[simp]:\n\"igWls (fromMOD MOD) s X'X =\n (wls s (fst X'X) \\<and> gWls MOD s (snd X'X))\"\n(*  *)\n\"igWlsAbs (fromMOD MOD) us_s A'A =\n (wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A))\"\n(*  *)\n\"igVar (fromMOD MOD) xs x = (Var xs x, gVar MOD xs x)\"\n(*  *)\n\"igAbs (fromMOD MOD) xs x X'X = (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X))\"\n(*  *)\n\"igOp (fromMOD MOD) delta iinp biinp =\n (Op delta (lift fst iinp) (lift fst biinp),\n  gOp MOD delta\n    (lift fst iinp) (lift snd iinp)\n    (lift fst biinp) (lift snd biinp))\"\n(*  *)\n\"igFresh (fromMOD MOD) ys y X'X =\n (fresh ys y (fst X'X) \\<and> gFresh MOD ys y (fst X'X) (snd X'X))\"\n(*  *)\n\"igFreshAbs (fromMOD MOD) ys y A'A  =\n (freshAbs ys y (fst A'A) \\<and> gFreshAbs MOD ys y (fst A'A) (snd A'A))\"\n(*  *)\n\"igSwap (fromMOD MOD) zs z1 z2 X'X =\n ((fst X'X) #[z1 \\<and> z2]_zs, gSwap MOD zs z1 z2 (fst X'X) (snd X'X))\"\n(*  *)\n\"igSwapAbs (fromMOD MOD) zs z1 z2 A'A =\n ((fst A'A) $[z1 \\<and> z2]_zs, gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A))\"\n(*  *)\n\"igSubst (fromMOD MOD) ys Y'Y y X'X =\n ((fst X'X) #[(fst Y'Y) / y]_ys,\n  gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X))\"\n(*  *)\n\"igSubstAbs (fromMOD MOD) ys Y'Y y A'A =\n ((fst A'A) $[(fst Y'Y) / y]_ys,\n  gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A) (snd A'A))\"", "lemma igWlsInp_fromMOD[simp]:\n\"igWlsInp (fromMOD MOD) delta iinp \\<longleftrightarrow>\n wlsInp delta (lift fst iinp) \\<and> gWlsInp MOD delta (lift snd iinp)\"", "lemma igFreshInp_fromMOD[simp]:\n\"igFreshInp (fromMOD MOD) ys y iinp \\<longleftrightarrow> \n freshInp ys y (lift fst iinp) \\<and> gFreshInp MOD ys y (lift fst iinp) (lift snd iinp)\"", "lemma igSwapInp_fromMOD[simp]:\n\"igSwapInp (fromMOD MOD) zs z1 z2 iinp = \n lift2 Pair\n   (swapInp zs z1 z2 (lift fst iinp))\n   (gSwapInp MOD zs z1 z2 (lift fst iinp) (lift snd iinp))\"", "lemma igSubstInp_fromMOD[simp]:\n\"igSubstInp (fromMOD MOD) ys Y'Y y iinp =\n lift2 Pair\n   (substInp ys (fst Y'Y) y (lift fst iinp))\n   (gSubstInp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst iinp) (lift snd iinp))\"", "lemmas input_fromMOD_simps =\nigWlsInp_fromMOD igFreshInp_fromMOD igSwapInp_fromMOD igSubstInp_fromMOD", "lemma igWlsBinp_fromMOD[simp]:\n\"igWlsBinp (fromMOD MOD) delta biinp \\<longleftrightarrow> \n (wlsBinp delta (lift fst biinp) \\<and> gWlsBinp MOD delta (lift snd biinp))\"", "lemma igFreshBinp_fromMOD[simp]:\n\"igFreshBinp (fromMOD MOD) ys y biinp \\<longleftrightarrow> \n (freshBinp ys y (lift fst biinp) \\<and>\n  gFreshBinp MOD ys y (lift fst biinp) (lift snd biinp))\"", "lemma igSwapBinp_fromMOD[simp]:\n\"igSwapBinp (fromMOD MOD) zs z1 z2 biinp = \n lift2 Pair\n   (swapBinp zs z1 z2 (lift fst biinp))\n   (gSwapBinp MOD zs z1 z2 (lift fst biinp) (lift snd biinp))\"", "lemma igSubstBinp_fromMOD[simp]:\n\"igSubstBinp (fromMOD MOD) ys Y'Y y biinp =\n lift2 Pair\n   (substBinp ys (fst Y'Y) y (lift fst biinp))\n   (gSubstBinp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst biinp) (lift snd biinp))\"", "lemmas binput_fromMOD_simps =\nigWlsBinp_fromMOD igFreshBinp_fromMOD igSwapBinp_fromMOD igSubstBinp_fromMOD", "lemma igWlsDisj_fromMOD[simp]:\n\"gWlsDisj MOD \\<Longrightarrow> igWlsDisj (fromMOD MOD)\"", "lemma igWlsAbsDisj_fromMOD[simp]:\n\"gWlsAbsDisj MOD \\<Longrightarrow> igWlsAbsDisj (fromMOD MOD)\"", "lemma igWlsAllDisj_fromMOD[simp]:\n\"gWlsAllDisj MOD \\<Longrightarrow> igWlsAllDisj (fromMOD MOD)\"", "lemmas igWlsAllDisj_fromMOD_simps =\nigWlsDisj_fromMOD igWlsAbsDisj_fromMOD igWlsAllDisj_fromMOD", "lemma igWlsAbsIsInBar_fromMOD[simp]:\n\"gWlsAbsIsInBar MOD \\<Longrightarrow> igWlsAbsIsInBar (fromMOD MOD)\"", "lemma igVarIPresIGWls_fromMOD[simp]:\n\"gVarPresGWls MOD \\<Longrightarrow> igVarIPresIGWls (fromMOD MOD)\"", "lemma igAbsIPresIGWls_fromMOD[simp]:\n\"gAbsPresGWls MOD \\<Longrightarrow> igAbsIPresIGWls (fromMOD MOD)\"", "lemma igOpIPresIGWls_fromMOD[simp]:\n\"gOpPresGWls MOD \\<Longrightarrow> igOpIPresIGWls (fromMOD MOD)\"", "lemma igConsIPresIGWls_fromMOD[simp]:\n\"gConsPresGWls MOD \\<Longrightarrow> igConsIPresIGWls (fromMOD MOD)\"", "lemmas igConsIPresIGWls_fromMOD_simps =\nigVarIPresIGWls_fromMOD igAbsIPresIGWls_fromMOD\nigOpIPresIGWls_fromMOD igConsIPresIGWls_fromMOD", "lemma igSwapIPresIGWls_fromMOD[simp]:\n\"gSwapPresGWls MOD \\<Longrightarrow> igSwapIPresIGWls (fromMOD MOD)\"", "lemma igSwapAbsIPresIGWlsAbs_fromMOD[simp]:\n\"gSwapAbsPresGWlsAbs MOD \\<Longrightarrow> igSwapAbsIPresIGWlsAbs (fromMOD MOD)\"", "lemma igSwapAllIPresIGWlsAll_fromMOD[simp]:\n\"gSwapAllPresGWlsAll MOD \\<Longrightarrow> igSwapAllIPresIGWlsAll (fromMOD MOD)\"", "lemmas igSwapAllIPresIGWlsAll_fromMOD_simps =\nigSwapIPresIGWls_fromMOD igSwapAbsIPresIGWlsAbs_fromMOD igSwapAllIPresIGWlsAll_fromMOD", "lemma igSubstIPresIGWls_fromMOD[simp]:\n\"gSubstPresGWls MOD \\<Longrightarrow> igSubstIPresIGWls (fromMOD MOD)\"", "lemma igSubstAbsIPresIGWlsAbs_fromMOD[simp]:\n\"gSubstAbsPresGWlsAbs MOD \\<Longrightarrow> igSubstAbsIPresIGWlsAbs (fromMOD MOD)\"", "lemma igSubstAllIPresIGWlsAll_fromMOD[simp]:\n\"gSubstAllPresGWlsAll MOD \\<Longrightarrow> igSubstAllIPresIGWlsAll (fromMOD MOD)\"", "lemmas igSubstAllIPresIGWlsAll_fromMOD_simps =\nigSubstIPresIGWls_fromMOD igSubstAbsIPresIGWlsAbs_fromMOD igSubstAllIPresIGWlsAll_fromMOD", "lemma igFreshIGVar_fromMOD[simp]:\n\"gFreshGVar MOD \\<Longrightarrow> igFreshIGVar (fromMOD MOD)\"", "lemma igFreshIGAbs1_fromMOD[simp]:\n\"gFreshGAbs1 MOD \\<Longrightarrow> igFreshIGAbs1 (fromMOD MOD)\"", "lemma igFreshIGAbs2_fromMOD[simp]:\n\"gFreshGAbs2 MOD \\<Longrightarrow> igFreshIGAbs2 (fromMOD MOD)\"", "lemma igFreshIGOp_fromMOD[simp]:\n\"gFreshGOp MOD \\<Longrightarrow> igFreshIGOp (fromMOD MOD)\"", "lemma igFreshCls_fromMOD[simp]:\n\"gFreshCls MOD \\<Longrightarrow> igFreshCls (fromMOD MOD)\"", "lemmas igFreshCls_fromMOD_simps =\nigFreshIGVar_fromMOD igFreshIGAbs1_fromMOD igFreshIGAbs2_fromMOD\nigFreshIGOp_fromMOD igFreshCls_fromMOD", "lemma igSwapIGVar_fromMOD[simp]:\n\"gSwapGVar MOD \\<Longrightarrow> igSwapIGVar (fromMOD MOD)\"", "lemma igSwapIGAbs_fromMOD[simp]:\n\"gSwapGAbs MOD \\<Longrightarrow> igSwapIGAbs (fromMOD MOD)\"", "lemma igSwapIGOp_fromMOD[simp]:\n\"gSwapGOp MOD \\<Longrightarrow> igSwapIGOp (fromMOD MOD)\"", "lemma igSwapCls_fromMOD[simp]:\n\"gSwapCls MOD \\<Longrightarrow> igSwapCls (fromMOD MOD)\"", "lemmas igSwapCls_fromMOD_simps =\nigSwapIGVar_fromMOD igSwapIGAbs_fromMOD\nigSwapIGOp_fromMOD igSwapCls_fromMOD", "lemma igSubstIGVar1_fromMOD[simp]:\n\"gSubstGVar1 MOD \\<Longrightarrow> igSubstIGVar1 (fromMOD MOD)\"", "lemma igSubstIGVar2_fromMOD[simp]:\n\"gSubstGVar2 MOD \\<Longrightarrow> igSubstIGVar2 (fromMOD MOD)\"", "lemma igSubstIGAbs_fromMOD[simp]:\n\"gSubstGAbs MOD \\<Longrightarrow> igSubstIGAbs (fromMOD MOD)\"", "lemma igSubstIGOp_fromMOD[simp]:\n\"gSubstGOp MOD \\<Longrightarrow> igSubstIGOp (fromMOD MOD)\"", "lemma igSubstCls_fromMOD[simp]:\n\"gSubstCls MOD \\<Longrightarrow> igSubstCls (fromMOD MOD)\"", "lemmas igSubstCls_fromMOD_simps =\nigSubstIGVar1_fromMOD igSubstIGVar2_fromMOD igSubstIGAbs_fromMOD\nigSubstIGOp_fromMOD igSubstCls_fromMOD", "lemma igAbsCongS_fromMOD[simp]:\nassumes \"gAbsCongS MOD\"\nshows \"igAbsCongS (fromMOD MOD)\"", "lemma igAbsRen_fromMOD[simp]:\n\"gAbsRen MOD \\<Longrightarrow> igAbsRen (fromMOD MOD)\"", "lemma iwlsFSw_fromMOD[simp]:\n\"wlsFSw MOD \\<Longrightarrow> iwlsFSw (fromMOD MOD)\"", "lemma iwlsFSb_fromMOD[simp]:\n\"wlsFSb MOD \\<Longrightarrow> iwlsFSb (fromMOD MOD)\"", "lemma iwlsFSwSb_fromMOD[simp]:\n\"wlsFSwSb MOD \\<Longrightarrow> iwlsFSwSb (fromMOD MOD)\"", "lemma iwlsFSbSw_fromMOD[simp]:\n\"wlsFSbSw MOD \\<Longrightarrow> iwlsFSbSw (fromMOD MOD)\"", "lemmas iwlsModel_fromMOD_simps =\niwlsFSw_fromMOD iwlsFSb_fromMOD\niwlsFSwSb_fromMOD iwlsFSbSw_fromMOD", "lemmas fromMOD_predicate_simps =\nigWlsAllDisj_fromMOD_simps\nigConsIPresIGWls_fromMOD_simps\nigSwapAllIPresIGWlsAll_fromMOD_simps\nigSubstAllIPresIGWlsAll_fromMOD_simps\nigFreshCls_fromMOD_simps\nigSwapCls_fromMOD_simps\nigSubstCls_fromMOD_simps\nigAbsCongS_fromMOD\nigAbsRen_fromMOD\niwlsModel_fromMOD_simps", "lemmas fromMOD_simps =\nfromMOD_basic_simps\ninput_fromMOD_simps\nbinput_fromMOD_simps\nfromMOD_predicate_simps", "lemma ipresCons_fromMOD_fst:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"(wls s X \\<longrightarrow> fst (h X) = X) \\<and> (wlsAbs (us,s') A \\<longrightarrow> fst (hA A) = A)\"", "lemma ipresCons_fromMOD_fst_simps[simp]:\n\"\\<lbrakk>ipresCons h hA (fromMOD MOD); wls s X\\<rbrakk>\n \\<Longrightarrow> fst (h X) = X\"\n(*  *)\n\"\\<lbrakk>ipresCons h hA (fromMOD MOD); wlsAbs (us,s') A\\<rbrakk>\n \\<Longrightarrow> fst (hA A) = A\"", "lemma ipresCons_fromMOD_fst_inp[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> wlsInp delta inp \\<Longrightarrow> lift (fst o h) inp = inp\"", "lemma ipresCons_fromMOD_fst_binp[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> wlsBinp delta binp \\<Longrightarrow> lift (fst o hA) binp = binp\"", "lemmas ipresCons_fromMOD_fst_all_simps =\nipresCons_fromMOD_fst_simps ipresCons_fromMOD_fst_inp ipresCons_fromMOD_fst_binp", "lemma fromIMor[simp]: \"fromIMor h X' = snd (h X')\"", "lemma fromIMorAbs[simp]: \"fromIMorAbs hA A' = snd (hA A')\"", "lemma fromIMor_snd_inp[simp]:\n\"wlsInp delta inp \\<Longrightarrow> lift (fromIMor h) inp = lift (snd o h) inp\"", "lemma fromIMorAbs_snd_binp[simp]:\n\"wlsBinp delta binp \\<Longrightarrow> lift (fromIMorAbs hA) binp = lift (snd o hA) binp\"", "lemmas fromIMor_basic_simps =\nfromIMor fromIMorAbs fromIMor_snd_inp fromIMorAbs_snd_binp", "lemma presWls_fromIMor[simp]:\n\"ipresWls h (fromMOD MOD) \\<Longrightarrow> presWls (fromIMor h) MOD\"", "lemma presWlsAbs_fromIMorAbs[simp]:\n\"ipresWlsAbs hA (fromMOD MOD) \\<Longrightarrow> presWlsAbs (fromIMorAbs hA) MOD\"", "lemma presWlsAll_fromIMorAll[simp]:\n\"ipresWlsAll h hA (fromMOD MOD) \\<Longrightarrow> presWlsAll (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas presWlsAll_fromIMorAll_simps =\npresWls_fromIMor presWlsAbs_fromIMorAbs presWlsAll_fromIMorAll", "lemma presVar_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> presVar (fromIMor h) MOD\"", "lemma presAbs_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presAbs (fromIMor h) (fromIMorAbs hA) MOD\"", "lemma presOp_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presOp (fromIMor h) (fromIMorAbs hA) MOD\"", "lemma presCons_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presCons (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas presCons_fromIMor_simps =\npresVar_fromIMor presAbs_fromIMor presOp_fromIMor presCons_fromIMor", "lemma presFresh_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFresh h (fromMOD MOD)\n \\<Longrightarrow> presFresh (fromIMor h) MOD\"", "lemma presFreshAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFreshAbs hA (fromMOD MOD) \n \\<Longrightarrow> presFreshAbs (fromIMorAbs hA) MOD\"", "lemma presFreshAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFreshAll h hA (fromMOD MOD) \n \\<Longrightarrow> presFreshAll (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas presFreshAll_fromIMor_simps =\npresFresh_fromIMor presFreshAbs_fromIMor presFreshAll_fromIMor", "lemma presSwap_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwap h (fromMOD MOD) \n \\<Longrightarrow> presSwap (fromIMor h) MOD\"", "lemma presSwapAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwapAbs hA (fromMOD MOD) \n \\<Longrightarrow> presSwapAbs (fromIMorAbs hA) MOD\"", "lemma presSwapAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwapAll h hA (fromMOD MOD)\n \\<Longrightarrow> presSwapAll (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas presSwapAll_fromIMor_simps =\npresSwap_fromIMor presSwapAbs_fromIMor presSwapAll_fromIMor", "lemma presSubst_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubst h (fromMOD MOD)\n \\<Longrightarrow> presSubst (fromIMor h) MOD\"", "lemma presSubstAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubstAbs h hA (fromMOD MOD) \n \\<Longrightarrow> presSubstAbs (fromIMor h) (fromIMorAbs hA) MOD\"", "lemma presSubstAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubstAll h hA (fromMOD MOD) \n \\<Longrightarrow> presSubstAll (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas presSubstAll_fromIMor_simps =\npresSubst_fromIMor presSubstAbs_fromIMor presSubstAll_fromIMor", "lemma fromIMor_termFSwMorph[simp]:\n\"termFSwImorph h hA (fromMOD MOD) \\<Longrightarrow> termFSwMorph (fromIMor h) (fromIMorAbs hA) MOD\"", "lemma fromIMor_termFSbMorph[simp]:\n\"termFSbImorph h hA (fromMOD MOD) \\<Longrightarrow> termFSbMorph (fromIMor h) (fromIMorAbs hA) MOD\"", "lemma fromIMor_termFSwSbMorph[simp]:\nassumes \"termFSwSbImorph h hA (fromMOD MOD)\"\nshows \"termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD\"", "lemmas mor_fromIMor_simps =\nfromIMor_termFSwMorph fromIMor_termFSbMorph fromIMor_termFSwSbMorph", "lemmas fromIMor_predicate_simps =\npresCons_fromIMor_simps\npresFreshAll_fromIMor_simps\npresSwapAll_fromIMor_simps\npresSubstAll_fromIMor_simps\nmor_fromIMor_simps", "lemmas fromIMor_simps =\nfromIMor_basic_simps fromIMor_predicate_simps", "theorem wlsFSw_recAll_termFSwMorph:\n\"wlsFSw MOD \\<Longrightarrow> termFSwMorph (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSb_recAll_termFSbMorph:\n\"wlsFSb MOD \\<Longrightarrow> termFSbMorph (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSwSb_recAll_termFSwSbMorph:\n\"wlsFSwSb MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSbSw_recAll_termFSwSbMorph:\n\"wlsFSbSw MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD\"", "lemma presCons_unique:\nassumes \"presCons f fA MOD\" and \"presCons g gA MOD\"\nshows \"(wls s X \\<longrightarrow> f X = g X) \\<and> (wlsAbs (us,s') A \\<longrightarrow> fA A = gA A)\"", "theorem wlsFSw_recAll_unique_presCons:\nassumes \"wlsFSw MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and> \n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\"", "theorem wlsFSb_recAll_unique_presCons:\nassumes \"wlsFSb MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\"", "theorem wlsFSwSb_recAll_unique_presCons:\nassumes \"wlsFSwSb MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\"", "theorem wlsFSbSw_recAll_unique_presCons:\nassumes \"wlsFSbSw MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n      (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\"", "lemmas gFreshClsRev_defs = gFreshClsRev_def\ngFreshGVarRev_def gFreshGAbsRev_def gFreshGOpRev_def", "lemmas gConsInj_defs = gConsInj_def\ngVarInj_def gAbsInj_def gOpInj_def gVarGOpInj_def", "lemmas gConsIndif_defs = gConsIndif_def gAbsIndif_def gOpIndif_def", "lemma gInduct_elim:\nassumes \"gInduct MOD\" and\nVar: \"\\<And> xs x. phi (asSort xs) (gVar MOD xs x)\" and\nOp:\n\"\\<And> delta inp' inp binp' binp.\n    \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp'; gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n     liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n    \\<Longrightarrow> phi (stOf delta) (gOp MOD delta inp' inp binp' binp)\" and\nAbs:\n\"\\<And> xs s x X' X.\n   \\<lbrakk>isInBar (xs,s); wls s X'; gWls MOD s X; phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (gAbs MOD xs x X' X)\"\nshows\n\"(gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n (gWlsAbs MOD (us,s') A \\<longrightarrow> phiAbs (us,s') A)\"", "lemmas reflFreshAll_defs = reflFreshAll_def\nreflFresh_def reflFreshAbs_def", "lemmas isInjAll_defs = isInjAll_def\nisInj_def isInjAbs_def", "lemmas isSurjAll_defs = isSurjAll_def\nisSurj_def isSurjAbs_def", "lemma gFreshClsRev_recAll_reflFreshAll:\nassumes pWls: \"presWlsAll (rec MOD) (recAbs MOD) MOD\"\nand pCons: \"presCons (rec MOD) (recAbs MOD) MOD\"\nand pFresh: \"presFreshAll (rec MOD) (recAbs MOD) MOD\"\nand **: \"gFreshClsRev MOD\"\nshows \"reflFreshAll (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSw_recAll_reflFreshAll:\n\"wlsFSw MOD \\<Longrightarrow> gFreshClsRev MOD \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSb_recAll_reflFreshAll:\n\"wlsFSb MOD \\<Longrightarrow> gFreshClsRev MOD \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSw_recAll_isInjAll:\nassumes *: \"wlsFSw MOD\"  \"gAbsRenS MOD\" and **: \"gConsInj MOD\"\nshows \"isInjAll (rec MOD) (recAbs MOD)\"", "theorem wlsFSb_recAll_isInjAll:\nassumes *: \"wlsFSb MOD\" and **: \"gConsInj MOD\"\nshows \"isInjAll (rec MOD) (recAbs MOD)\"", "lemma gInduct_gConsIndif_recAll_isSurjAll:\nassumes pWls: \"presWlsAll (rec MOD) (recAbs MOD) MOD\"\nand pCons: \"presCons (rec MOD) (recAbs MOD) MOD\"\nand \"gConsIndif MOD\" and *: \"gInduct MOD\"\nshows \"isSurjAll (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSw_recAll_isSurjAll:\n\"wlsFSw MOD \\<Longrightarrow> gConsIndif MOD \\<Longrightarrow> gInduct MOD\n \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD\"", "theorem wlsFSb_recAll_isSurjAll:\n\"wlsFSb MOD \\<Longrightarrow> gConsIndif MOD \\<Longrightarrow> gInduct MOD\n \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD\"", "lemmas recursion_simps =\nfromMOD_simps ipresCons_fromMOD_fst_all_simps fromIMor_simps"], "translations": [["", "lemmas gWlsInp_defs = gWlsInp_def sameDom_def liftAll2_def"], ["", "definition gWlsBinp where\n\"gWlsBinp MOD delta binp \\<equiv>\n wlsOpS delta \\<and> sameDom (barOf delta) binp \\<and> liftAll2 (gWlsAbs MOD) (barOf delta) binp\""], ["", "lemmas gWlsBinp_defs = gWlsBinp_def sameDom_def liftAll2_def"], ["", "text\\<open>Basic properties of the lifted model operations\\<close>"], ["", "text\\<open>. for free inputs:\\<close>"], ["", "lemma sameDom_swapInp_gSwapInp[simp]:\nassumes \"wlsInp delta inp'\" and \"gWlsInp MOD delta inp\"\nshows \"sameDom (swapInp zs z1 z2 inp') (gSwapInp MOD zs z1 z2 inp' inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (inp' %[z1 \\<and> z2]_zs) (gSwapInp MOD zs z1 z2 inp' inp)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp'\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. sameDom (inp' %[z1 \\<and> z2]_zs) (gSwapInp MOD zs z1 z2 inp' inp)", "by(simp add: wlsInp_iff gWlsInp_def swapInp_def gSwapInp_def\nliftAll2_def lift_def lift2_def sameDom_def split: option.splits)"], ["", "lemma sameDom_substInp_gSubstInp[simp]:\nassumes \"wlsInp delta inp'\" and \"gWlsInp MOD delta inp\"\nshows \"sameDom (substInp ys Y' y inp') (gSubstInp MOD ys Y' Y y inp' inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (inp' %[Y' / y]_ys) (gSubstInp MOD ys Y' Y y inp' inp)", "using assms"], ["proof (prove)\nusing this:\n  wlsInp delta inp'\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. sameDom (inp' %[Y' / y]_ys) (gSubstInp MOD ys Y' Y y inp' inp)", "by(simp add: wlsInp_iff gWlsInp_def substInp_def2 gSubstInp_def\nliftAll2_def lift_def lift2_def sameDom_def split: option.splits)"], ["", "text\\<open>. for bound inputs:\\<close>"], ["", "lemma sameDom_swapBinp_gSwapBinp[simp]:\nassumes \"wlsBinp delta binp'\" and \"gWlsBinp MOD delta binp\"\nshows \"sameDom (swapBinp zs z1 z2 binp') (gSwapBinp MOD zs z1 z2 binp' binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (binp' %%[z1 \\<and> z2]_zs) (gSwapBinp MOD zs z1 z2 binp' binp)", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp'\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. sameDom (binp' %%[z1 \\<and> z2]_zs) (gSwapBinp MOD zs z1 z2 binp' binp)", "by(simp add: wlsBinp_iff gWlsBinp_def swapBinp_def gSwapBinp_def\nliftAll2_def lift_def lift2_def sameDom_def split: option.splits)"], ["", "lemma sameDom_substBinp_gSubstBinp[simp]:\nassumes \"wlsBinp delta binp'\" and \"gWlsBinp MOD delta binp\"\nshows \"sameDom (substBinp ys Y' y binp') (gSubstBinp MOD ys Y' Y y binp' binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (binp' %%[Y' / y]_ys) (gSubstBinp MOD ys Y' Y y binp' binp)", "using assms"], ["proof (prove)\nusing this:\n  wlsBinp delta binp'\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. sameDom (binp' %%[Y' / y]_ys) (gSubstBinp MOD ys Y' Y y binp' binp)", "by(simp add: wlsBinp_iff gWlsBinp_def substBinp_def2 gSubstBinp_def\nliftAll2_def lift_def lift2_def sameDom_def split: option.splits)"], ["", "lemmas sameDom_gInput_simps =\nsameDom_swapInp_gSwapInp sameDom_substInp_gSubstInp\nsameDom_swapBinp_gSwapBinp sameDom_substBinp_gSubstBinp"], ["", "text\\<open>Domain disjointness:\\<close>"], ["", "definition gWlsDisj where\n\"gWlsDisj MOD \\<equiv> \\<forall> s s' X. gWls MOD s X \\<and> gWls MOD s' X \\<longrightarrow> s = s'\""], ["", "definition gWlsAbsDisj where\n\"gWlsAbsDisj MOD \\<equiv> \\<forall> xs s xs' s' A.\n    isInBar (xs,s) \\<and> isInBar (xs',s') \\<and>\n    gWlsAbs MOD (xs,s) A \\<and> gWlsAbs MOD (xs',s') A\n    \\<longrightarrow> xs = xs' \\<and> s = s'\""], ["", "definition gWlsAllDisj where\n\"gWlsAllDisj MOD \\<equiv> gWlsDisj MOD \\<and> gWlsAbsDisj MOD\""], ["", "lemmas gWlsAllDisj_defs =\ngWlsAllDisj_def gWlsDisj_def gWlsAbsDisj_def"], ["", "text \\<open>Abstraction domains inhabited only within bound arities:\\<close>"], ["", "definition gWlsAbsIsInBar where\n\"gWlsAbsIsInBar MOD \\<equiv> \\<forall> us s A. gWlsAbs MOD (us,s) A \\<longrightarrow> isInBar (us,s)\""], ["", "text\\<open>Domain preservation by the operators\\<close>"], ["", "text\\<open>The constructs preserve the domains:\\<close>"], ["", "definition gVarPresGWls where\n\"gVarPresGWls MOD \\<equiv> \\<forall> xs x. gWls MOD (asSort xs) (gVar MOD xs x)\""], ["", "definition gAbsPresGWls where\n\"gAbsPresGWls MOD \\<equiv> \\<forall> xs s x X' X.\n   isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gWlsAbs MOD (xs,s) (gAbs MOD xs x X' X)\""], ["", "definition gOpPresGWls where\n\"gOpPresGWls MOD \\<equiv> \\<forall> delta inp' inp binp' binp.\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<and> wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp\n   \\<longrightarrow> gWls MOD (stOf delta) (gOp MOD delta inp' inp binp' binp)\""], ["", "definition gConsPresGWls where\n\"gConsPresGWls MOD \\<equiv> gVarPresGWls MOD \\<and> gAbsPresGWls MOD \\<and> gOpPresGWls MOD\""], ["", "lemmas gConsPresGWls_defs = gConsPresGWls_def\ngVarPresGWls_def gAbsPresGWls_def gOpPresGWls_def"], ["", "text\\<open>``swap\" preserves the domains:\\<close>"], ["", "definition gSwapPresGWls where\n\"gSwapPresGWls MOD \\<equiv> \\<forall> zs z1 z2 s X' X.\n   wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gWls MOD s (gSwap MOD zs z1 z2 X' X)\""], ["", "definition gSwapAbsPresGWlsAbs where\n\"gSwapAbsPresGWlsAbs MOD \\<equiv> \\<forall> zs z1 z2 us s A' A.\n   isInBar (us,s) \\<and> wlsAbs (us,s) A' \\<and> gWlsAbs MOD (us,s) A \\<longrightarrow>\n   gWlsAbs MOD (us,s) (gSwapAbs MOD zs z1 z2 A' A)\""], ["", "definition gSwapAllPresGWlsAll where\n\"gSwapAllPresGWlsAll MOD \\<equiv> gSwapPresGWls MOD \\<and> gSwapAbsPresGWlsAbs MOD\""], ["", "lemmas gSwapAllPresGWlsAll_defs = \ngSwapAllPresGWlsAll_def gSwapPresGWls_def gSwapAbsPresGWlsAbs_def"], ["", "text\\<open>``subst\" preserves the domains:\\<close>"], ["", "definition gSubstPresGWls where\n\"gSubstPresGWls MOD \\<equiv> \\<forall> ys Y' Y y s X' X.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gWls MOD s (gSubst MOD ys Y' Y y X' X)\""], ["", "definition gSubstAbsPresGWlsAbs where\n\"gSubstAbsPresGWlsAbs MOD \\<equiv> \\<forall> ys Y' Y y us s A' A.\n   isInBar (us,s) \\<and>\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and> wlsAbs (us,s) A' \\<and> gWlsAbs MOD (us,s) A \\<longrightarrow>\n   gWlsAbs MOD (us,s) (gSubstAbs MOD ys Y' Y y A' A)\""], ["", "definition gSubstAllPresGWlsAll where\n\"gSubstAllPresGWlsAll MOD \\<equiv> gSubstPresGWls MOD \\<and> gSubstAbsPresGWlsAbs MOD\""], ["", "lemmas gSubstAllPresGWlsAll_defs = \ngSubstAllPresGWlsAll_def gSubstPresGWls_def gSubstAbsPresGWlsAbs_def"], ["", "text\\<open>Clauses for fresh:\\<close>"], ["", "definition gFreshGVar where\n\"gFreshGVar MOD \\<equiv> \\<forall> ys y xs x.\n   (ys \\<noteq> xs \\<or> y \\<noteq> x) \\<longrightarrow>\n   gFresh MOD ys y (Var xs x) (gVar MOD xs x)\""], ["", "definition gFreshGAbs1 where\n\"gFreshGAbs1 MOD \\<equiv> \\<forall> ys y s X' X.\n   isInBar (ys,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gFreshAbs MOD ys y (Abs ys y X') (gAbs MOD ys y X' X)\""], ["", "definition gFreshGAbs2 where\n\"gFreshGAbs2 MOD \\<equiv> \\<forall> ys y xs x s X' X.\n   isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   fresh ys y X' \\<and> gFresh MOD ys y X' X \\<longrightarrow>\n   gFreshAbs MOD ys y (Abs xs x X') (gAbs MOD xs x X' X)\""], ["", "definition gFreshGOp where\n\"gFreshGOp MOD \\<equiv> \\<forall> ys y delta inp' inp binp' binp.\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<and> wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   freshInp ys y inp' \\<and> gFreshInp MOD ys y inp' inp \\<and>\n   freshBinp ys y binp' \\<and> gFreshBinp MOD ys y binp' binp \\<longrightarrow>\n   gFresh MOD ys y (Op delta inp' binp') (gOp MOD delta inp' inp binp' binp)\""], ["", "definition gFreshCls where\n\"gFreshCls MOD \\<equiv> gFreshGVar MOD \\<and> gFreshGAbs1 MOD \\<and> gFreshGAbs2 MOD \\<and> gFreshGOp MOD\""], ["", "lemmas gFreshCls_defs = gFreshCls_def\ngFreshGVar_def gFreshGAbs1_def gFreshGAbs2_def gFreshGOp_def"], ["", "(* Clauses for swap: fully-conditional versions and less-conditional,\nstronger versions (suffix ``STR\") *)"], ["", "definition gSwapGVar where\n\"gSwapGVar MOD \\<equiv> \\<forall> zs z1 z2 xs x.\n   gSwap MOD zs z1 z2 (Var xs x) (gVar MOD xs x) =\n   gVar MOD xs (x @xs[z1 \\<and> z2]_zs)\""], ["", "definition gSwapGAbs where\n\"gSwapGAbs MOD \\<equiv> \\<forall> zs z1 z2 xs x s X' X.\n   isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gSwapAbs MOD zs z1 z2 (Abs xs x X') (gAbs MOD xs x X' X) =\n   gAbs MOD xs (x @xs[z1 \\<and> z2]_zs) (X' #[z1 \\<and> z2]_zs) (gSwap MOD zs z1 z2 X' X)\""], ["", "definition gSwapGOp where\n\"gSwapGOp MOD \\<equiv> \\<forall> zs z1 z2 delta inp' inp binp' binp.\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<and> wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   gSwap MOD zs z1 z2 (Op delta inp' binp') (gOp MOD delta inp' inp binp' binp) =\n   gOp MOD delta\n     (inp' %[z1 \\<and> z2]_zs) (gSwapInp MOD zs z1 z2 inp' inp)\n     (binp' %%[z1 \\<and> z2]_zs) (gSwapBinp MOD zs z1 z2 binp' binp)\""], ["", "definition gSwapCls where\n\"gSwapCls MOD \\<equiv> gSwapGVar MOD \\<and> gSwapGAbs MOD \\<and> gSwapGOp MOD\""], ["", "lemmas gSwapCls_defs = gSwapCls_def\ngSwapGVar_def gSwapGAbs_def gSwapGOp_def"], ["", "(* Clauses for subst: *)"], ["", "definition gSubstGVar1 where\n\"gSubstGVar1 MOD \\<equiv> \\<forall> ys y Y' Y xs x.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<longrightarrow>\n   (ys \\<noteq> xs \\<or> y \\<noteq> x) \\<longrightarrow>\n   gSubst MOD ys Y' Y y (Var xs x) (gVar MOD xs x) =\n   gVar MOD xs x\""], ["", "definition gSubstGVar2 where\n\"gSubstGVar2 MOD \\<equiv> \\<forall> ys y Y' Y.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<longrightarrow>\n   gSubst MOD ys Y' Y y (Var ys y) (gVar MOD ys y) = Y\""], ["", "definition gSubstGAbs where\n\"gSubstGAbs MOD \\<equiv> \\<forall> ys y Y' Y xs x s X' X.\n   isInBar (xs,s) \\<and>\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and>\n   wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   (xs \\<noteq> ys \\<or> x \\<noteq> y) \\<and> fresh xs x Y' \\<and> gFresh MOD xs x Y' Y \\<longrightarrow>\n   gSubstAbs MOD ys Y' Y y (Abs xs x X') (gAbs MOD xs x X' X) =\n   gAbs MOD xs x (X' #[Y' / y]_ys) (gSubst MOD ys Y' Y y X' X)\""], ["", "definition gSubstGOp where\n\"gSubstGOp MOD \\<equiv> \\<forall> ys y Y' Y delta inp' inp binp' binp.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and>\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<and>\n   wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   gSubst MOD ys Y' Y y (Op delta inp' binp') (gOp MOD delta inp' inp binp' binp) =\n   gOp MOD delta\n     (inp' %[Y' / y]_ys) (gSubstInp MOD ys Y' Y y inp' inp)\n     (binp' %%[Y' / y]_ys) (gSubstBinp MOD ys Y' Y y binp' binp)\""], ["", "definition gSubstCls where\n\"gSubstCls MOD \\<equiv> gSubstGVar1 MOD \\<and> gSubstGVar2 MOD \\<and> gSubstGAbs MOD \\<and> gSubstGOp MOD\""], ["", "lemmas gSubstCls_defs = gSubstCls_def\ngSubstGVar1_def gSubstGVar2_def gSubstGAbs_def gSubstGOp_def"], ["", "(* Freshness-based congruence for abstractions: *)\n\n(* ... employing swap: *)"], ["", "definition gAbsCongS where\n\"gAbsCongS MOD \\<equiv> \\<forall> xs x x2 y s X' X X2' X2.\n   isInBar (xs,s) \\<and>\n   wls s X' \\<and> gWls MOD s X \\<and>\n   wls s X2' \\<and> gWls MOD s X2 \\<longrightarrow>\n   fresh xs y X' \\<and> gFresh MOD xs y X' X \\<and>\n   fresh xs y X2' \\<and> gFresh MOD xs y X2' X2 \\<and>\n   (X' #[y \\<and> x]_xs) = (X2' #[y \\<and> x2]_xs) \\<longrightarrow>\n   gSwap MOD xs y x X' X = gSwap MOD xs y x2 X2' X2 \\<longrightarrow>\n   gAbs MOD xs x X' X = gAbs MOD xs x2 X2' X2\""], ["", "(* ... Note: no need for congruence employing subst (as it is not used in the\ndefinition of rmorphisms *)\n\n(* Abstraction renaming: *)"], ["", "definition gAbsRen where\n\"gAbsRen MOD \\<equiv> \\<forall> xs y x s X' X.\n    isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n    fresh xs y X' \\<and> gFresh MOD xs y X' X \\<longrightarrow>\n    gAbs MOD xs y (X' #[y // x]_xs) (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X' X) =\n    gAbs MOD xs x X' X\""], ["", "text \\<open>Well-sorted fresh-swap models:\\<close>"], ["", "definition wlsFSw where\n\"wlsFSw MOD \\<equiv> gWlsAllDisj MOD \\<and> gWlsAbsIsInBar MOD \\<and>\n gConsPresGWls MOD \\<and> gSwapAllPresGWlsAll MOD \\<and>\n gFreshCls MOD \\<and> gSwapCls MOD \\<and> gAbsCongS MOD\""], ["", "lemmas wlsFSw_defs1 = wlsFSw_def\ngWlsAllDisj_def gWlsAbsIsInBar_def\ngConsPresGWls_def gSwapAllPresGWlsAll_def\ngFreshCls_def gSwapCls_def gAbsCongS_def"], ["", "lemmas wlsFSw_defs = wlsFSw_def\ngWlsAllDisj_defs gWlsAbsIsInBar_def\ngConsPresGWls_defs gSwapAllPresGWlsAll_defs\ngFreshCls_defs gSwapCls_defs gAbsCongS_def"], ["", "text \\<open>Well-sorted fresh-subst models:\\<close>"], ["", "definition wlsFSb where\n\"wlsFSb MOD \\<equiv> gWlsAllDisj MOD \\<and> gWlsAbsIsInBar MOD \\<and>\n gConsPresGWls MOD \\<and> gSubstAllPresGWlsAll MOD \\<and>\n gFreshCls MOD \\<and> gSubstCls MOD \\<and> gAbsRen MOD\""], ["", "lemmas wlsFSb_defs1 = wlsFSb_def\ngWlsAllDisj_def gWlsAbsIsInBar_def\ngConsPresGWls_def gSubstAllPresGWlsAll_def\ngFreshCls_def gSubstCls_def gAbsRen_def"], ["", "lemmas wlsFSb_defs = wlsFSb_def\ngWlsAllDisj_defs gWlsAbsIsInBar_def\ngConsPresGWls_defs gSubstAllPresGWlsAll_defs\ngFreshCls_defs gSubstCls_defs gAbsRen_def"], ["", "text \\<open>Well-sorted fresh-swap-subst-models\\<close>"], ["", "definition wlsFSwSb where\n\"wlsFSwSb MOD \\<equiv> wlsFSw MOD \\<and> gSubstAllPresGWlsAll MOD \\<and> gSubstCls MOD\""], ["", "lemmas wlsFSwSb_defs1 = wlsFSwSb_def\nwlsFSw_def gSubstAllPresGWlsAll_def gSubstCls_def"], ["", "lemmas wlsFSwSb_defs = wlsFSwSb_def\nwlsFSw_def gSubstAllPresGWlsAll_defs gSubstCls_defs"], ["", "text \\<open>Well-sorted fresh-subst-swap-models\\<close>"], ["", "definition wlsFSbSw where\n\"wlsFSbSw MOD \\<equiv> wlsFSb MOD \\<and> gSwapAllPresGWlsAll MOD \\<and> gSwapCls MOD\""], ["", "lemmas wlsFSbSw_defs1 = wlsFSbSw_def\nwlsFSw_def gSwapAllPresGWlsAll_def gSwapCls_def"], ["", "lemmas wlsFSbSw_defs = wlsFSbSw_def\nwlsFSw_def gSwapAllPresGWlsAll_defs gSwapCls_defs"], ["", "text\\<open>Extension of domain preservation (by swap and subst) to inputs:\\<close>"], ["", "text \\<open>First for free inputs:\\<close>"], ["", "definition gSwapInpPresGWlsInp where\n\"gSwapInpPresGWlsInp MOD \\<equiv> \\<forall> zs z1 z2 delta inp' inp.\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<longrightarrow>\n   gWlsInp MOD delta (gSwapInp MOD zs z1 z2 inp' inp)\""], ["", "definition gSubstInpPresGWlsInp where\n\"gSubstInpPresGWlsInp MOD \\<equiv> \\<forall> ys y Y' Y delta inp' inp.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and>\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<longrightarrow>\n   gWlsInp MOD delta (gSubstInp MOD ys Y' Y y inp' inp)\""], ["", "lemma imp_gSwapInpPresGWlsInp:\n\"gSwapPresGWls MOD \\<Longrightarrow> gSwapInpPresGWlsInp MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapPresGWls MOD \\<Longrightarrow> gSwapInpPresGWlsInp MOD", "by (auto simp: lift2_def liftAll2_def sameDom_def wlsInp_iff gWlsInp_def \ngSwapPresGWls_def gSwapInpPresGWlsInp_def gSwapInp_def \nsplit: option.splits)"], ["", "lemma imp_gSubstInpPresGWlsInp:\n\"gSubstPresGWls MOD \\<Longrightarrow> gSubstInpPresGWlsInp MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstPresGWls MOD \\<Longrightarrow> gSubstInpPresGWlsInp MOD", "by (auto simp: lift2_def liftAll2_def sameDom_def wlsInp_iff gWlsInp_def \ngSubstPresGWls_def gSubstInpPresGWlsInp_def gSubstInp_def \nsplit: option.splits)"], ["", "text \\<open>Then for bound inputs:\\<close>"], ["", "definition gSwapBinpPresGWlsBinp where\n\"gSwapBinpPresGWlsBinp MOD \\<equiv> \\<forall> zs z1 z2 delta binp' binp.\n   wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   gWlsBinp MOD delta (gSwapBinp MOD zs z1 z2 binp' binp)\""], ["", "definition gSubstBinpPresGWlsBinp where\n\"gSubstBinpPresGWlsBinp MOD \\<equiv> \\<forall> ys y Y' Y delta binp' binp.\n   wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<and>\n   wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   gWlsBinp MOD delta (gSubstBinp MOD ys Y' Y y binp' binp)\""], ["", "lemma imp_gSwapBinpPresGWlsBinp:\n\"gSwapAbsPresGWlsAbs MOD \\<Longrightarrow> gSwapBinpPresGWlsBinp MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapAbsPresGWlsAbs MOD \\<Longrightarrow> gSwapBinpPresGWlsBinp MOD", "by (auto simp: lift2_def liftAll2_def sameDom_def wlsBinp_iff gWlsBinp_def \ngSwapAbsPresGWlsAbs_def gSwapBinpPresGWlsBinp_def gSwapBinp_def \nsplit: option.splits)"], ["", "lemma imp_gSubstBinpPresGWlsBinp:\n\"gSubstAbsPresGWlsAbs MOD \\<Longrightarrow> gSubstBinpPresGWlsBinp MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstAbsPresGWlsAbs MOD \\<Longrightarrow> gSubstBinpPresGWlsBinp MOD", "by (auto simp: lift2_def liftAll2_def sameDom_def wlsBinp_iff gWlsBinp_def \ngSubstAbsPresGWlsAbs_def gSubstBinpPresGWlsBinp_def gSubstBinp_def \nsplit: option.splits)"], ["", "subsection\\<open>Model morphisms from the term model\\<close>"], ["", "definition presWls where\n\"presWls h MOD \\<equiv> \\<forall> s X. wls s X \\<longrightarrow> gWls MOD s (h X)\""], ["", "definition presWlsAbs where\n\"presWlsAbs hA MOD \\<equiv> \\<forall> us s A. wlsAbs (us,s) A \\<longrightarrow> gWlsAbs MOD (us,s) (hA A)\""], ["", "definition presWlsAll where\n\"presWlsAll h hA MOD \\<equiv> presWls h MOD \\<and> presWlsAbs hA MOD\""], ["", "lemmas presWlsAll_defs = presWlsAll_def presWls_def presWlsAbs_def"], ["", "definition presVar where\n\"presVar h MOD \\<equiv> \\<forall> xs x. h (Var xs x) = gVar MOD xs x\""], ["", "definition presAbs where\n\"presAbs h hA MOD \\<equiv> \\<forall> xs x s X.\n   isInBar (xs,s) \\<and> wls s X \\<longrightarrow>\n   hA (Abs xs x X) = gAbs MOD xs x X (h X)\""], ["", "definition presOp where\n\"presOp h hA MOD \\<equiv> \\<forall> delta inp binp.\n    wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n    h (Op delta inp binp) =\n    gOp MOD delta inp (lift h inp) binp (lift hA binp)\""], ["", "definition presCons where\n\"presCons h hA MOD \\<equiv> presVar h MOD \\<and> presAbs h hA MOD \\<and> presOp h hA MOD\""], ["", "lemmas presCons_defs = presCons_def\npresVar_def presAbs_def presOp_def"], ["", "definition presFresh where\n\"presFresh h MOD \\<equiv> \\<forall> ys y s X.\n    wls s X \\<longrightarrow>\n    fresh ys y X \\<longrightarrow> gFresh MOD ys y X (h X)\""], ["", "definition presFreshAbs where\n\"presFreshAbs hA MOD \\<equiv> \\<forall> ys y us s A.\n    wlsAbs (us,s) A \\<longrightarrow>\n    freshAbs ys y A \\<longrightarrow> gFreshAbs MOD ys y A (hA A)\""], ["", "definition presFreshAll where\n\"presFreshAll h hA MOD \\<equiv> presFresh h MOD \\<and> presFreshAbs hA MOD\""], ["", "lemmas presFreshAll_defs = presFreshAll_def\npresFresh_def presFreshAbs_def"], ["", "definition presSwap where\n\"presSwap h MOD \\<equiv> \\<forall> zs z1 z2 s X.\n    wls s X \\<longrightarrow>\n    h (X #[z1 \\<and> z2]_zs) = gSwap MOD zs z1 z2 X (h X)\""], ["", "definition presSwapAbs where\n\"presSwapAbs hA MOD \\<equiv> \\<forall> zs z1 z2 us s A.\n    wlsAbs (us,s) A \\<longrightarrow>\n    hA (A $[z1 \\<and> z2]_zs) = gSwapAbs MOD zs z1 z2 A (hA A)\""], ["", "definition presSwapAll where\n\"presSwapAll h hA MOD \\<equiv> presSwap h MOD \\<and> presSwapAbs hA MOD\""], ["", "lemmas presSwapAll_defs = presSwapAll_def\npresSwap_def presSwapAbs_def"], ["", "definition presSubst where\n\"presSubst h MOD \\<equiv> \\<forall> ys Y y s X.\n    wls (asSort ys) Y \\<and> wls s X \\<longrightarrow>\n    h (subst ys Y y X) = gSubst MOD ys Y (h Y) y X (h X)\""], ["", "definition presSubstAbs where\n\"presSubstAbs h hA MOD \\<equiv> \\<forall> ys Y y us s A.\n    wls (asSort ys) Y \\<and> wlsAbs (us,s) A \\<longrightarrow>\n    hA (A $[Y / y]_ys) = gSubstAbs MOD ys Y (h Y) y A (hA A)\""], ["", "definition presSubstAll where\n\"presSubstAll h hA MOD \\<equiv> presSubst h MOD \\<and> presSubstAbs h hA MOD\""], ["", "lemmas presSubstAll_defs = presSubstAll_def\npresSubst_def presSubstAbs_def"], ["", "definition termFSwMorph where\n\"termFSwMorph h hA MOD \\<equiv> presWlsAll h hA MOD \\<and> presCons h hA MOD \\<and>\n presFreshAll h hA MOD \\<and> presSwapAll h hA MOD\""], ["", "lemmas termFSwMorph_defs1 = termFSwMorph_def\npresWlsAll_def presCons_def presFreshAll_def presSwapAll_def"], ["", "lemmas termFSwMorph_defs = termFSwMorph_def\npresWlsAll_defs presCons_defs presFreshAll_defs presSwapAll_defs"], ["", "definition termFSbMorph where\n\"termFSbMorph h hA MOD \\<equiv> presWlsAll h hA MOD \\<and> presCons h hA MOD \\<and>\n presFreshAll h hA MOD \\<and> presSubstAll h hA MOD\""], ["", "lemmas termFSbMorph_defs1 = termFSbMorph_def\npresWlsAll_def presCons_def presFreshAll_def presSubstAll_def"], ["", "lemmas termFSbMorph_defs = termFSbMorph_def\npresWlsAll_defs presCons_defs presFreshAll_defs presSubstAll_defs"], ["", "definition termFSwSbMorph where\n\"termFSwSbMorph h hA MOD \\<equiv> termFSwMorph h hA MOD \\<and> presSubstAll h hA MOD\""], ["", "lemmas termFSwSbMorph_defs1 = termFSwSbMorph_def\ntermFSwMorph_def presSubstAll_def"], ["", "lemmas termFSwSbMorph_defs = termFSwSbMorph_def\ntermFSwMorph_defs presSubstAll_defs"], ["", "text\\<open>Extension of domain preservation (by the morphisms) to inputs\\<close>"], ["", "text\\<open>. for free inputs:\\<close>"], ["", "lemma presWls_wlsInp:\n\"wlsInp delta inp \\<Longrightarrow> presWls h MOD \\<Longrightarrow> gWlsInp MOD delta (lift h inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsInp delta inp; presWls h MOD\\<rbrakk>\n    \\<Longrightarrow> gWlsInp MOD delta (lift h inp)", "by(auto simp: wlsInp_iff gWlsInp_def lift_def liftAll2_def sameDom_def \npresWls_def split: option.splits)"], ["", "text\\<open>. for bound inputs:\\<close>"], ["", "lemma presWls_wlsBinp:\n\"wlsBinp delta binp \\<Longrightarrow> presWlsAbs hA MOD \\<Longrightarrow> gWlsBinp MOD delta (lift hA binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsBinp delta binp; presWlsAbs hA MOD\\<rbrakk>\n    \\<Longrightarrow> gWlsBinp MOD delta (lift hA binp)", "by(auto simp: wlsBinp_iff gWlsBinp_def lift_def liftAll2_def sameDom_def \npresWlsAbs_def split: option.splits)"], ["", "subsection \\<open>From models to iterative models\\<close>"], ["", "text \\<open>The transition map:\\<close>"], ["", "definition fromMOD ::\n\"('index,'bindex,'varSort,'sort,'opSym,'var,'gTerm,'gAbs) model\n \\<Rightarrow>\n ('index,'bindex,'varSort,'sort,'opSym,'var,\n  ('index,'bindex,'varSort,'var,'opSym)term \\<times> 'gTerm,\n  ('index,'bindex,'varSort,'var,'opSym)abs \\<times> 'gAbs) Iteration.model\"\nwhere\n\"fromMOD MOD \\<equiv>\n \\<lparr>\n  igWls = \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n  igWlsAbs = \\<lambda>us_s A'A. wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n\n  igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n  igAbs = \\<lambda>xs x X'X. (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n  igOp =\n  \\<lambda>delta iinp biinp.\n    (Op delta (lift fst iinp) (lift fst biinp),\n     gOp MOD delta\n       (lift fst iinp) (lift snd iinp)\n       (lift fst biinp) (lift snd biinp)),\n\n  igFresh =\n  \\<lambda>ys y X'X. fresh ys y (fst X'X) \\<and> gFresh MOD ys y (fst X'X) (snd X'X),\n  igFreshAbs =\n  \\<lambda>ys y A'A. freshAbs ys y (fst A'A) \\<and> gFreshAbs MOD ys y (fst A'A) (snd A'A),\n\n  igSwap =\n  \\<lambda>zs z1 z2 X'X. ((fst X'X) #[z1 \\<and> z2]_zs, gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n  igSwapAbs =\n  \\<lambda>zs z1 z2 A'A. ((fst A'A) $[z1 \\<and> z2]_zs, gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n\n  igSubst =\n  \\<lambda>ys Y'Y y X'X.\n    ((fst X'X) #[(fst Y'Y) / y]_ys,\n     gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n  igSubstAbs =\n  \\<lambda>ys Y'Y y A'A.\n    ((fst A'A) $[(fst Y'Y) / y]_ys,\n     gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A) (snd A'A))\n \\<rparr>\""], ["", "text\\<open>Basic simplification rules:\\<close>"], ["", "lemma fromMOD_basic_simps[simp]:\n\"igWls (fromMOD MOD) s X'X =\n (wls s (fst X'X) \\<and> gWls MOD s (snd X'X))\"\n(*  *)\n\"igWlsAbs (fromMOD MOD) us_s A'A =\n (wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A))\"\n(*  *)\n\"igVar (fromMOD MOD) xs x = (Var xs x, gVar MOD xs x)\"\n(*  *)\n\"igAbs (fromMOD MOD) xs x X'X = (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X))\"\n(*  *)\n\"igOp (fromMOD MOD) delta iinp biinp =\n (Op delta (lift fst iinp) (lift fst biinp),\n  gOp MOD delta\n    (lift fst iinp) (lift snd iinp)\n    (lift fst biinp) (lift snd biinp))\"\n(*  *)\n\"igFresh (fromMOD MOD) ys y X'X =\n (fresh ys y (fst X'X) \\<and> gFresh MOD ys y (fst X'X) (snd X'X))\"\n(*  *)\n\"igFreshAbs (fromMOD MOD) ys y A'A  =\n (freshAbs ys y (fst A'A) \\<and> gFreshAbs MOD ys y (fst A'A) (snd A'A))\"\n(*  *)\n\"igSwap (fromMOD MOD) zs z1 z2 X'X =\n ((fst X'X) #[z1 \\<and> z2]_zs, gSwap MOD zs z1 z2 (fst X'X) (snd X'X))\"\n(*  *)\n\"igSwapAbs (fromMOD MOD) zs z1 z2 A'A =\n ((fst A'A) $[z1 \\<and> z2]_zs, gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A))\"\n(*  *)\n\"igSubst (fromMOD MOD) ys Y'Y y X'X =\n ((fst X'X) #[(fst Y'Y) / y]_ys,\n  gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X))\"\n(*  *)\n\"igSubstAbs (fromMOD MOD) ys Y'Y y A'A =\n ((fst A'A) $[(fst Y'Y) / y]_ys,\n  gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A) (snd A'A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((igWls (fromMOD MOD) s X'X =\n      (wls s (fst X'X) \\<and> gWls MOD s (snd X'X)) &&&\n      igWlsAbs (fromMOD MOD) us_s A'A =\n      (wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A))) &&&\n     igVar (fromMOD MOD) xs x = (Var xs x, gVar MOD xs x) &&&\n     igAbs (fromMOD MOD) xs x X'X =\n     (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)) &&&\n     igOp (fromMOD MOD) delta iinp biinp =\n     (Op delta (lift fst iinp) (lift fst biinp),\n      gOp MOD delta (lift fst iinp) (lift snd iinp) (lift fst biinp)\n       (lift snd biinp))) &&&\n    (igFresh (fromMOD MOD) ys y X'X =\n     (fresh ys y (fst X'X) \\<and> gFresh MOD ys y (fst X'X) (snd X'X)) &&&\n     igFreshAbs (fromMOD MOD) ys y A'A =\n     (freshAbs ys y (fst A'A) \\<and>\n      gFreshAbs MOD ys y (fst A'A) (snd A'A)) &&&\n     igSwap (fromMOD MOD) zs z1 z2 X'X =\n     (fst X'X #[z1 \\<and> z2]_zs,\n      gSwap MOD zs z1 z2 (fst X'X) (snd X'X))) &&&\n    igSwapAbs (fromMOD MOD) zs z1 z2 A'A =\n    (fst A'A $[z1 \\<and> z2]_zs,\n     gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)) &&&\n    igSubst (fromMOD MOD) ys Y'Y y X'X =\n    (fst X'X #[fst Y'Y / y]_ys,\n     gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)) &&&\n    igSubstAbs (fromMOD MOD) ys Y'Y y A'A =\n    (fst A'A $[fst Y'Y / y]_ys,\n     gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A) (snd A'A))", "unfolding fromMOD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((igWls\n       \\<lparr>igWls =\n                 \\<lambda>s X'X.\n                    wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n          igWlsAbs =\n            \\<lambda>us_s A'A.\n               wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n          igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n          igAbs =\n            \\<lambda>xs x X'X.\n               (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n          igOp =\n            \\<lambda>delta iinp biinp.\n               (Op delta (lift fst iinp) (lift fst biinp),\n                gOp MOD delta (lift fst iinp) (lift snd iinp)\n                 (lift fst biinp) (lift snd biinp)),\n          igFresh =\n            \\<lambda>ys y X'X.\n               fresh ys y (fst X'X) \\<and>\n               gFresh MOD ys y (fst X'X) (snd X'X),\n          igFreshAbs =\n            \\<lambda>ys y A'A.\n               freshAbs ys y (fst A'A) \\<and>\n               gFreshAbs MOD ys y (fst A'A) (snd A'A),\n          igSwap =\n            \\<lambda>zs z1 z2 X'X.\n               (fst X'X #[z1 \\<and> z2]_zs,\n                gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n          igSwapAbs =\n            \\<lambda>zs z1 z2 A'A.\n               (fst A'A $[z1 \\<and> z2]_zs,\n                gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n          igSubst =\n            \\<lambda>ys Y'Y y X'X.\n               (fst X'X #[fst Y'Y / y]_ys,\n                gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n          igSubstAbs =\n            \\<lambda>ys Y'Y y A'A.\n               (fst A'A $[fst Y'Y / y]_ys,\n                gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                 (snd A'A))\\<rparr>\n       s X'X =\n      (wls s (fst X'X) \\<and> gWls MOD s (snd X'X)) &&&\n      igWlsAbs\n       \\<lparr>igWls =\n                 \\<lambda>s X'X.\n                    wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n          igWlsAbs =\n            \\<lambda>us_s A'A.\n               wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n          igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n          igAbs =\n            \\<lambda>xs x X'X.\n               (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n          igOp =\n            \\<lambda>delta iinp biinp.\n               (Op delta (lift fst iinp) (lift fst biinp),\n                gOp MOD delta (lift fst iinp) (lift snd iinp)\n                 (lift fst biinp) (lift snd biinp)),\n          igFresh =\n            \\<lambda>ys y X'X.\n               fresh ys y (fst X'X) \\<and>\n               gFresh MOD ys y (fst X'X) (snd X'X),\n          igFreshAbs =\n            \\<lambda>ys y A'A.\n               freshAbs ys y (fst A'A) \\<and>\n               gFreshAbs MOD ys y (fst A'A) (snd A'A),\n          igSwap =\n            \\<lambda>zs z1 z2 X'X.\n               (fst X'X #[z1 \\<and> z2]_zs,\n                gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n          igSwapAbs =\n            \\<lambda>zs z1 z2 A'A.\n               (fst A'A $[z1 \\<and> z2]_zs,\n                gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n          igSubst =\n            \\<lambda>ys Y'Y y X'X.\n               (fst X'X #[fst Y'Y / y]_ys,\n                gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n          igSubstAbs =\n            \\<lambda>ys Y'Y y A'A.\n               (fst A'A $[fst Y'Y / y]_ys,\n                gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                 (snd A'A))\\<rparr>\n       us_s A'A =\n      (wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A))) &&&\n     igVar\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      xs x =\n     (Var xs x, gVar MOD xs x) &&&\n     igAbs\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      xs x X'X =\n     (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)) &&&\n     igOp\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      delta iinp biinp =\n     (Op delta (lift fst iinp) (lift fst biinp),\n      gOp MOD delta (lift fst iinp) (lift snd iinp) (lift fst biinp)\n       (lift snd biinp))) &&&\n    (igFresh\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      ys y X'X =\n     (fresh ys y (fst X'X) \\<and> gFresh MOD ys y (fst X'X) (snd X'X)) &&&\n     igFreshAbs\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      ys y A'A =\n     (freshAbs ys y (fst A'A) \\<and>\n      gFreshAbs MOD ys y (fst A'A) (snd A'A)) &&&\n     igSwap\n      \\<lparr>igWls =\n                \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n         igWlsAbs =\n           \\<lambda>us_s A'A.\n              wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n         igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n         igAbs =\n           \\<lambda>xs x X'X.\n              (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n         igOp =\n           \\<lambda>delta iinp biinp.\n              (Op delta (lift fst iinp) (lift fst biinp),\n               gOp MOD delta (lift fst iinp) (lift snd iinp)\n                (lift fst biinp) (lift snd biinp)),\n         igFresh =\n           \\<lambda>ys y X'X.\n              fresh ys y (fst X'X) \\<and>\n              gFresh MOD ys y (fst X'X) (snd X'X),\n         igFreshAbs =\n           \\<lambda>ys y A'A.\n              freshAbs ys y (fst A'A) \\<and>\n              gFreshAbs MOD ys y (fst A'A) (snd A'A),\n         igSwap =\n           \\<lambda>zs z1 z2 X'X.\n              (fst X'X #[z1 \\<and> z2]_zs,\n               gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n         igSwapAbs =\n           \\<lambda>zs z1 z2 A'A.\n              (fst A'A $[z1 \\<and> z2]_zs,\n               gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n         igSubst =\n           \\<lambda>ys Y'Y y X'X.\n              (fst X'X #[fst Y'Y / y]_ys,\n               gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n         igSubstAbs =\n           \\<lambda>ys Y'Y y A'A.\n              (fst A'A $[fst Y'Y / y]_ys,\n               gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n                (snd A'A))\\<rparr>\n      zs z1 z2 X'X =\n     (fst X'X #[z1 \\<and> z2]_zs,\n      gSwap MOD zs z1 z2 (fst X'X) (snd X'X))) &&&\n    igSwapAbs\n     \\<lparr>igWls =\n               \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n        igWlsAbs =\n          \\<lambda>us_s A'A.\n             wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n        igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n        igAbs =\n          \\<lambda>xs x X'X.\n             (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n        igOp =\n          \\<lambda>delta iinp biinp.\n             (Op delta (lift fst iinp) (lift fst biinp),\n              gOp MOD delta (lift fst iinp) (lift snd iinp) (lift fst biinp)\n               (lift snd biinp)),\n        igFresh =\n          \\<lambda>ys y X'X.\n             fresh ys y (fst X'X) \\<and>\n             gFresh MOD ys y (fst X'X) (snd X'X),\n        igFreshAbs =\n          \\<lambda>ys y A'A.\n             freshAbs ys y (fst A'A) \\<and>\n             gFreshAbs MOD ys y (fst A'A) (snd A'A),\n        igSwap =\n          \\<lambda>zs z1 z2 X'X.\n             (fst X'X #[z1 \\<and> z2]_zs,\n              gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n        igSwapAbs =\n          \\<lambda>zs z1 z2 A'A.\n             (fst A'A $[z1 \\<and> z2]_zs,\n              gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n        igSubst =\n          \\<lambda>ys Y'Y y X'X.\n             (fst X'X #[fst Y'Y / y]_ys,\n              gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n        igSubstAbs =\n          \\<lambda>ys Y'Y y A'A.\n             (fst A'A $[fst Y'Y / y]_ys,\n              gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n               (snd A'A))\\<rparr>\n     zs z1 z2 A'A =\n    (fst A'A $[z1 \\<and> z2]_zs,\n     gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)) &&&\n    igSubst\n     \\<lparr>igWls =\n               \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n        igWlsAbs =\n          \\<lambda>us_s A'A.\n             wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n        igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n        igAbs =\n          \\<lambda>xs x X'X.\n             (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n        igOp =\n          \\<lambda>delta iinp biinp.\n             (Op delta (lift fst iinp) (lift fst biinp),\n              gOp MOD delta (lift fst iinp) (lift snd iinp) (lift fst biinp)\n               (lift snd biinp)),\n        igFresh =\n          \\<lambda>ys y X'X.\n             fresh ys y (fst X'X) \\<and>\n             gFresh MOD ys y (fst X'X) (snd X'X),\n        igFreshAbs =\n          \\<lambda>ys y A'A.\n             freshAbs ys y (fst A'A) \\<and>\n             gFreshAbs MOD ys y (fst A'A) (snd A'A),\n        igSwap =\n          \\<lambda>zs z1 z2 X'X.\n             (fst X'X #[z1 \\<and> z2]_zs,\n              gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n        igSwapAbs =\n          \\<lambda>zs z1 z2 A'A.\n             (fst A'A $[z1 \\<and> z2]_zs,\n              gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n        igSubst =\n          \\<lambda>ys Y'Y y X'X.\n             (fst X'X #[fst Y'Y / y]_ys,\n              gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n        igSubstAbs =\n          \\<lambda>ys Y'Y y A'A.\n             (fst A'A $[fst Y'Y / y]_ys,\n              gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n               (snd A'A))\\<rparr>\n     ys Y'Y y X'X =\n    (fst X'X #[fst Y'Y / y]_ys,\n     gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)) &&&\n    igSubstAbs\n     \\<lparr>igWls =\n               \\<lambda>s X'X. wls s (fst X'X) \\<and> gWls MOD s (snd X'X),\n        igWlsAbs =\n          \\<lambda>us_s A'A.\n             wlsAbs us_s (fst A'A) \\<and> gWlsAbs MOD us_s (snd A'A),\n        igVar = \\<lambda>xs x. (Var xs x, gVar MOD xs x),\n        igAbs =\n          \\<lambda>xs x X'X.\n             (Abs xs x (fst X'X), gAbs MOD xs x (fst X'X) (snd X'X)),\n        igOp =\n          \\<lambda>delta iinp biinp.\n             (Op delta (lift fst iinp) (lift fst biinp),\n              gOp MOD delta (lift fst iinp) (lift snd iinp) (lift fst biinp)\n               (lift snd biinp)),\n        igFresh =\n          \\<lambda>ys y X'X.\n             fresh ys y (fst X'X) \\<and>\n             gFresh MOD ys y (fst X'X) (snd X'X),\n        igFreshAbs =\n          \\<lambda>ys y A'A.\n             freshAbs ys y (fst A'A) \\<and>\n             gFreshAbs MOD ys y (fst A'A) (snd A'A),\n        igSwap =\n          \\<lambda>zs z1 z2 X'X.\n             (fst X'X #[z1 \\<and> z2]_zs,\n              gSwap MOD zs z1 z2 (fst X'X) (snd X'X)),\n        igSwapAbs =\n          \\<lambda>zs z1 z2 A'A.\n             (fst A'A $[z1 \\<and> z2]_zs,\n              gSwapAbs MOD zs z1 z2 (fst A'A) (snd A'A)),\n        igSubst =\n          \\<lambda>ys Y'Y y X'X.\n             (fst X'X #[fst Y'Y / y]_ys,\n              gSubst MOD ys (fst Y'Y) (snd Y'Y) y (fst X'X) (snd X'X)),\n        igSubstAbs =\n          \\<lambda>ys Y'Y y A'A.\n             (fst A'A $[fst Y'Y / y]_ys,\n              gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A)\n               (snd A'A))\\<rparr>\n     ys Y'Y y A'A =\n    (fst A'A $[fst Y'Y / y]_ys,\n     gSubstAbs MOD ys (fst Y'Y) (snd Y'Y) y (fst A'A) (snd A'A))", "by auto"], ["", "text\\<open>Simps for inputs\\<close>"], ["", "text\\<open>. for free inputs:\\<close>"], ["", "lemma igWlsInp_fromMOD[simp]:\n\"igWlsInp (fromMOD MOD) delta iinp \\<longleftrightarrow>\n wlsInp delta (lift fst iinp) \\<and> gWlsInp MOD delta (lift snd iinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igWlsInp (fromMOD MOD) delta iinp =\n    (wlsInp delta (lift fst iinp) \\<and> gWlsInp MOD delta (lift snd iinp))", "apply (intro iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. igWlsInp (fromMOD MOD) delta iinp \\<Longrightarrow>\n    wlsInp delta (lift fst iinp) \\<and> gWlsInp MOD delta (lift snd iinp)\n 2. wlsInp delta (lift fst iinp) \\<and>\n    gWlsInp MOD delta (lift snd iinp) \\<Longrightarrow>\n    igWlsInp (fromMOD MOD) delta iinp", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. igWlsInp (fromMOD MOD) delta iinp \\<Longrightarrow>\n    wlsInp delta (lift fst iinp) \\<and> gWlsInp MOD delta (lift snd iinp)", "apply(simp add: liftAll2_def lift_def sameDom_def \n   igWlsInp_def wlsInp_iff gWlsInp_def split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta (lift fst iinp) \\<and>\n    gWlsInp MOD delta (lift snd iinp) \\<Longrightarrow>\n    igWlsInp (fromMOD MOD) delta iinp", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta (lift fst iinp) \\<and>\n    gWlsInp MOD delta (lift snd iinp) \\<Longrightarrow>\n    igWlsInp (fromMOD MOD) delta iinp", "unfolding liftAll2_def lift_def sameDom_def \n   igWlsInp_def wlsInp_iff gWlsInp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (wlsOpS delta \\<and>\n     (\\<forall>i.\n         (arOf delta i = None) =\n         ((case iinp i of None \\<Rightarrow> None\n           | Some v \\<Rightarrow> Some (fst v)) =\n          None)) \\<and>\n     (\\<forall>i v1 v2.\n         arOf delta i = Some v1 \\<and>\n         (case iinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (fst v)) =\n         Some v2 \\<longrightarrow>\n         wls v1 v2)) \\<and>\n    wlsOpS delta \\<and>\n    (\\<forall>i.\n        (arOf delta i = None) =\n        ((case iinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (snd v)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and>\n        (case iinp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (snd v)) =\n        Some v2 \\<longrightarrow>\n        gWls MOD v1 v2) \\<Longrightarrow>\n    wlsOpS delta \\<and>\n    (\\<forall>i. (arOf delta i = None) = (iinp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and> iinp i = Some v2 \\<longrightarrow>\n        igWls (fromMOD MOD) v1 v2)", "by simp (metis (no_types, lifting) eq_snd_iff fstI option.case_eq_if \n       option.distinct(1) option.simps(5))"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma igFreshInp_fromMOD[simp]:\n\"igFreshInp (fromMOD MOD) ys y iinp \\<longleftrightarrow> \n freshInp ys y (lift fst iinp) \\<and> gFreshInp MOD ys y (lift fst iinp) (lift snd iinp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igFreshInp (fromMOD MOD) ys y iinp =\n    (freshInp ys y (lift fst iinp) \\<and>\n     gFreshInp MOD ys y (lift fst iinp) (lift snd iinp))", "by (auto simp: igFreshInp_def gFreshInp_def freshInp_def\nliftAll2_def liftAll_def lift_def split: option.splits)"], ["", "lemma igSwapInp_fromMOD[simp]:\n\"igSwapInp (fromMOD MOD) zs z1 z2 iinp = \n lift2 Pair\n   (swapInp zs z1 z2 (lift fst iinp))\n   (gSwapInp MOD zs z1 z2 (lift fst iinp) (lift snd iinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igSwapInp (fromMOD MOD) zs z1 z2 iinp =\n    lift2 Pair (lift fst iinp %[z1 \\<and> z2]_zs)\n     (gSwapInp MOD zs z1 z2 (lift fst iinp) (lift snd iinp))", "by(auto simp: igSwapInp_def swapInp_def gSwapInp_def lift_def lift2_def\nsplit: option.splits)"], ["", "lemma igSubstInp_fromMOD[simp]:\n\"igSubstInp (fromMOD MOD) ys Y'Y y iinp =\n lift2 Pair\n   (substInp ys (fst Y'Y) y (lift fst iinp))\n   (gSubstInp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst iinp) (lift snd iinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igSubstInp (fromMOD MOD) ys Y'Y y iinp =\n    lift2 Pair (lift fst iinp %[fst Y'Y / y]_ys)\n     (gSubstInp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst iinp)\n       (lift snd iinp))", "by(auto simp: igSubstInp_def substInp_def2 gSubstInp_def lift_def lift2_def\nsplit: option.splits)"], ["", "lemmas input_fromMOD_simps =\nigWlsInp_fromMOD igFreshInp_fromMOD igSwapInp_fromMOD igSubstInp_fromMOD"], ["", "text\\<open>. for bound inputs:\\<close>"], ["", "lemma igWlsBinp_fromMOD[simp]:\n\"igWlsBinp (fromMOD MOD) delta biinp \\<longleftrightarrow> \n (wlsBinp delta (lift fst biinp) \\<and> gWlsBinp MOD delta (lift snd biinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igWlsBinp (fromMOD MOD) delta biinp =\n    (wlsBinp delta (lift fst biinp) \\<and>\n     gWlsBinp MOD delta (lift snd biinp))", "apply (intro iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. igWlsBinp (fromMOD MOD) delta biinp \\<Longrightarrow>\n    wlsBinp delta (lift fst biinp) \\<and>\n    gWlsBinp MOD delta (lift snd biinp)\n 2. wlsBinp delta (lift fst biinp) \\<and>\n    gWlsBinp MOD delta (lift snd biinp) \\<Longrightarrow>\n    igWlsBinp (fromMOD MOD) delta biinp", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. igWlsBinp (fromMOD MOD) delta biinp \\<Longrightarrow>\n    wlsBinp delta (lift fst biinp) \\<and>\n    gWlsBinp MOD delta (lift snd biinp)", "apply(simp add: liftAll2_def lift_def sameDom_def \n   igWlsBinp_def wlsBinp_iff gWlsBinp_def split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta (lift fst biinp) \\<and>\n    gWlsBinp MOD delta (lift snd biinp) \\<Longrightarrow>\n    igWlsBinp (fromMOD MOD) delta biinp", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta (lift fst biinp) \\<and>\n    gWlsBinp MOD delta (lift snd biinp) \\<Longrightarrow>\n    igWlsBinp (fromMOD MOD) delta biinp", "unfolding liftAll2_def lift_def sameDom_def \n   igWlsBinp_def wlsBinp_iff gWlsBinp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (wlsOpS delta \\<and>\n     (\\<forall>i.\n         (barOf delta i = None) =\n         ((case biinp i of None \\<Rightarrow> None\n           | Some v \\<Rightarrow> Some (fst v)) =\n          None)) \\<and>\n     (\\<forall>i v1 v2.\n         barOf delta i = Some v1 \\<and>\n         (case biinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (fst v)) =\n         Some v2 \\<longrightarrow>\n         wlsAbs v1 v2)) \\<and>\n    wlsOpS delta \\<and>\n    (\\<forall>i.\n        (barOf delta i = None) =\n        ((case biinp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (snd v)) =\n         None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf delta i = Some v1 \\<and>\n        (case biinp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (snd v)) =\n        Some v2 \\<longrightarrow>\n        gWlsAbs MOD v1 v2) \\<Longrightarrow>\n    wlsOpS delta \\<and>\n    (\\<forall>i. (barOf delta i = None) = (biinp i = None)) \\<and>\n    (\\<forall>i v1 v2.\n        barOf delta i = Some v1 \\<and> biinp i = Some v2 \\<longrightarrow>\n        igWlsAbs (fromMOD MOD) v1 v2)", "by simp (metis (no_types, lifting) eq_snd_iff fstI option.case_eq_if \n       option.distinct(1) option.simps(5))"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma igFreshBinp_fromMOD[simp]:\n\"igFreshBinp (fromMOD MOD) ys y biinp \\<longleftrightarrow> \n (freshBinp ys y (lift fst biinp) \\<and>\n  gFreshBinp MOD ys y (lift fst biinp) (lift snd biinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igFreshBinp (fromMOD MOD) ys y biinp =\n    (freshBinp ys y (lift fst biinp) \\<and>\n     gFreshBinp MOD ys y (lift fst biinp) (lift snd biinp))", "by (auto simp: igFreshBinp_def gFreshBinp_def freshBinp_def\nliftAll2_def liftAll_def lift_def split: option.splits)"], ["", "lemma igSwapBinp_fromMOD[simp]:\n\"igSwapBinp (fromMOD MOD) zs z1 z2 biinp = \n lift2 Pair\n   (swapBinp zs z1 z2 (lift fst biinp))\n   (gSwapBinp MOD zs z1 z2 (lift fst biinp) (lift snd biinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igSwapBinp (fromMOD MOD) zs z1 z2 biinp =\n    lift2 Pair (lift fst biinp %%[z1 \\<and> z2]_zs)\n     (gSwapBinp MOD zs z1 z2 (lift fst biinp) (lift snd biinp))", "by(auto simp: igSwapBinp_def swapBinp_def gSwapBinp_def lift_def lift2_def\nsplit: option.splits)"], ["", "lemma igSubstBinp_fromMOD[simp]:\n\"igSubstBinp (fromMOD MOD) ys Y'Y y biinp =\n lift2 Pair\n   (substBinp ys (fst Y'Y) y (lift fst biinp))\n   (gSubstBinp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst biinp) (lift snd biinp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igSubstBinp (fromMOD MOD) ys Y'Y y biinp =\n    lift2 Pair (lift fst biinp %%[fst Y'Y / y]_ys)\n     (gSubstBinp MOD ys (fst Y'Y) (snd Y'Y) y (lift fst biinp)\n       (lift snd biinp))", "by(auto simp: igSubstBinp_def substBinp_def2 gSubstBinp_def lift_def lift2_def\nsplit: option.splits)"], ["", "lemmas binput_fromMOD_simps =\nigWlsBinp_fromMOD igFreshBinp_fromMOD igSwapBinp_fromMOD igSubstBinp_fromMOD"], ["", "text\\<open>Domain disjointness:\\<close>"], ["", "lemma igWlsDisj_fromMOD[simp]:\n\"gWlsDisj MOD \\<Longrightarrow> igWlsDisj (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsDisj MOD \\<Longrightarrow> igWlsDisj (fromMOD MOD)", "unfolding igWlsDisj_def gWlsDisj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s s' X.\n       gWls MOD s X \\<and> gWls MOD s' X \\<longrightarrow>\n       s = s' \\<Longrightarrow>\n    \\<forall>s s' X.\n       igWls (fromMOD MOD) s X \\<and>\n       igWls (fromMOD MOD) s' X \\<longrightarrow>\n       s = s'", "by auto"], ["", "lemma igWlsAbsDisj_fromMOD[simp]:\n\"gWlsAbsDisj MOD \\<Longrightarrow> igWlsAbsDisj (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsAbsDisj MOD \\<Longrightarrow> igWlsAbsDisj (fromMOD MOD)", "unfolding igWlsAbsDisj_def gWlsAbsDisj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs s xs' s' A.\n       isInBar (xs, s) \\<and>\n       isInBar (xs', s') \\<and>\n       gWlsAbs MOD (xs, s) A \\<and>\n       gWlsAbs MOD (xs', s') A \\<longrightarrow>\n       xs = xs' \\<and> s = s' \\<Longrightarrow>\n    \\<forall>xs s xs' s' A.\n       isInBar (xs, s) \\<and>\n       isInBar (xs', s') \\<and>\n       igWlsAbs (fromMOD MOD) (xs, s) A \\<and>\n       igWlsAbs (fromMOD MOD) (xs', s') A \\<longrightarrow>\n       xs = xs' \\<and> s = s'", "by fastforce"], ["", "lemma igWlsAllDisj_fromMOD[simp]:\n\"gWlsAllDisj MOD \\<Longrightarrow> igWlsAllDisj (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsAllDisj MOD \\<Longrightarrow> igWlsAllDisj (fromMOD MOD)", "unfolding igWlsAllDisj_def gWlsAllDisj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsDisj MOD \\<and> gWlsAbsDisj MOD \\<Longrightarrow>\n    igWlsDisj (fromMOD MOD) \\<and> igWlsAbsDisj (fromMOD MOD)", "by fastforce"], ["", "lemmas igWlsAllDisj_fromMOD_simps =\nigWlsDisj_fromMOD igWlsAbsDisj_fromMOD igWlsAllDisj_fromMOD"], ["", "text\\<open>Abstractions only within IsInBar:\\<close>"], ["", "lemma igWlsAbsIsInBar_fromMOD[simp]:\n\"gWlsAbsIsInBar MOD \\<Longrightarrow> igWlsAbsIsInBar (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsAbsIsInBar MOD \\<Longrightarrow> igWlsAbsIsInBar (fromMOD MOD)", "unfolding gWlsAbsIsInBar_def igWlsAbsIsInBar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>us s A.\n       gWlsAbs MOD (us, s) A \\<longrightarrow>\n       isInBar (us, s) \\<Longrightarrow>\n    \\<forall>us s A.\n       igWlsAbs (fromMOD MOD) (us, s) A \\<longrightarrow> isInBar (us, s)", "by simp"], ["", "text\\<open>The constructs preserve the domains:\\<close>"], ["", "lemma igVarIPresIGWls_fromMOD[simp]:\n\"gVarPresGWls MOD \\<Longrightarrow> igVarIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gVarPresGWls MOD \\<Longrightarrow> igVarIPresIGWls (fromMOD MOD)", "unfolding igVarIPresIGWls_def gVarPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs x. gWls MOD (asSort xs) (gVar MOD xs x) \\<Longrightarrow>\n    \\<forall>xs x.\n       igWls (fromMOD MOD) (asSort xs) (igVar (fromMOD MOD) xs x)", "by simp"], ["", "lemma igAbsIPresIGWls_fromMOD[simp]:\n\"gAbsPresGWls MOD \\<Longrightarrow> igAbsIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gAbsPresGWls MOD \\<Longrightarrow> igAbsIPresIGWls (fromMOD MOD)", "unfolding igAbsIPresIGWls_def gAbsPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs s x X' X.\n       isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWlsAbs MOD (xs, s) (gAbs MOD xs x X' X) \\<Longrightarrow>\n    \\<forall>xs s x X.\n       isInBar (xs, s) \\<and> igWls (fromMOD MOD) s X \\<longrightarrow>\n       igWlsAbs (fromMOD MOD) (xs, s) (igAbs (fromMOD MOD) xs x X)", "by simp"], ["", "lemma igOpIPresIGWls_fromMOD[simp]:\n\"gOpPresGWls MOD \\<Longrightarrow> igOpIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gOpPresGWls MOD \\<Longrightarrow> igOpIPresIGWls (fromMOD MOD)", "unfolding igOpIPresIGWls_def gOpPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>delta inp' inp binp' binp.\n       wlsInp delta inp' \\<and>\n       gWlsInp MOD delta inp \\<and>\n       wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n       gWls MOD (stOf delta)\n        (gOp MOD delta inp' inp binp' binp) \\<Longrightarrow>\n    \\<forall>delta inp binp.\n       igWlsInp (fromMOD MOD) delta inp \\<and>\n       igWlsBinp (fromMOD MOD) delta binp \\<longrightarrow>\n       igWls (fromMOD MOD) (stOf delta) (igOp (fromMOD MOD) delta inp binp)", "by simp"], ["", "lemma igConsIPresIGWls_fromMOD[simp]:\n\"gConsPresGWls MOD \\<Longrightarrow> igConsIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gConsPresGWls MOD \\<Longrightarrow> igConsIPresIGWls (fromMOD MOD)", "unfolding igConsIPresIGWls_def gConsPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gVarPresGWls MOD \\<and>\n    gAbsPresGWls MOD \\<and> gOpPresGWls MOD \\<Longrightarrow>\n    igVarIPresIGWls (fromMOD MOD) \\<and>\n    igAbsIPresIGWls (fromMOD MOD) \\<and> igOpIPresIGWls (fromMOD MOD)", "by simp"], ["", "lemmas igConsIPresIGWls_fromMOD_simps =\nigVarIPresIGWls_fromMOD igAbsIPresIGWls_fromMOD\nigOpIPresIGWls_fromMOD igConsIPresIGWls_fromMOD"], ["", "text\\<open>Swap preserves the domains:\\<close>"], ["", "lemma igSwapIPresIGWls_fromMOD[simp]:\n\"gSwapPresGWls MOD \\<Longrightarrow> igSwapIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapPresGWls MOD \\<Longrightarrow> igSwapIPresIGWls (fromMOD MOD)", "unfolding igSwapIPresIGWls_def gSwapPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>zs z1 z2 s X' X.\n       wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWls MOD s (gSwap MOD zs z1 z2 X' X) \\<Longrightarrow>\n    \\<forall>zs z1 z2 s X.\n       igWls (fromMOD MOD) s X \\<longrightarrow>\n       igWls (fromMOD MOD) s (igSwap (fromMOD MOD) zs z1 z2 X)", "by simp"], ["", "lemma igSwapAbsIPresIGWlsAbs_fromMOD[simp]:\n\"gSwapAbsPresGWlsAbs MOD \\<Longrightarrow> igSwapAbsIPresIGWlsAbs (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapAbsPresGWlsAbs MOD \\<Longrightarrow>\n    igSwapAbsIPresIGWlsAbs (fromMOD MOD)", "unfolding igSwapAbsIPresIGWlsAbs_def gSwapAbsPresGWlsAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>zs z1 z2 us s A' A.\n       isInBar (us, s) \\<and>\n       wlsAbs (us, s) A' \\<and> gWlsAbs MOD (us, s) A \\<longrightarrow>\n       gWlsAbs MOD (us, s) (gSwapAbs MOD zs z1 z2 A' A) \\<Longrightarrow>\n    \\<forall>zs z1 z2 us s A.\n       isInBar (us, s) \\<and>\n       igWlsAbs (fromMOD MOD) (us, s) A \\<longrightarrow>\n       igWlsAbs (fromMOD MOD) (us, s) (igSwapAbs (fromMOD MOD) zs z1 z2 A)", "by simp"], ["", "lemma igSwapAllIPresIGWlsAll_fromMOD[simp]:\n\"gSwapAllPresGWlsAll MOD \\<Longrightarrow> igSwapAllIPresIGWlsAll (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapAllPresGWlsAll MOD \\<Longrightarrow>\n    igSwapAllIPresIGWlsAll (fromMOD MOD)", "unfolding igSwapAllIPresIGWlsAll_def gSwapAllPresGWlsAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapPresGWls MOD \\<and> gSwapAbsPresGWlsAbs MOD \\<Longrightarrow>\n    igSwapIPresIGWls (fromMOD MOD) \\<and>\n    igSwapAbsIPresIGWlsAbs (fromMOD MOD)", "by simp"], ["", "lemmas igSwapAllIPresIGWlsAll_fromMOD_simps =\nigSwapIPresIGWls_fromMOD igSwapAbsIPresIGWlsAbs_fromMOD igSwapAllIPresIGWlsAll_fromMOD"], ["", "text\\<open>Subst preserves the domains:\\<close>"], ["", "lemma igSubstIPresIGWls_fromMOD[simp]:\n\"gSubstPresGWls MOD \\<Longrightarrow> igSubstIPresIGWls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstPresGWls MOD \\<Longrightarrow> igSubstIPresIGWls (fromMOD MOD)", "unfolding igSubstIPresIGWls_def gSubstPresGWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys Y' Y y s X' X.\n       wls (asSort ys) Y' \\<and>\n       gWls MOD (asSort ys) Y \\<and>\n       wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWls MOD s (gSubst MOD ys Y' Y y X' X) \\<Longrightarrow>\n    \\<forall>ys Y y s X.\n       igWls (fromMOD MOD) (asSort ys) Y \\<and>\n       igWls (fromMOD MOD) s X \\<longrightarrow>\n       igWls (fromMOD MOD) s (igSubst (fromMOD MOD) ys Y y X)", "by simp"], ["", "lemma igSubstAbsIPresIGWlsAbs_fromMOD[simp]:\n\"gSubstAbsPresGWlsAbs MOD \\<Longrightarrow> igSubstAbsIPresIGWlsAbs (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstAbsPresGWlsAbs MOD \\<Longrightarrow>\n    igSubstAbsIPresIGWlsAbs (fromMOD MOD)", "unfolding igSubstAbsIPresIGWlsAbs_def gSubstAbsPresGWlsAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys Y' Y y us s A' A.\n       isInBar (us, s) \\<and>\n       wls (asSort ys) Y' \\<and>\n       gWls MOD (asSort ys) Y \\<and>\n       wlsAbs (us, s) A' \\<and> gWlsAbs MOD (us, s) A \\<longrightarrow>\n       gWlsAbs MOD (us, s) (gSubstAbs MOD ys Y' Y y A' A) \\<Longrightarrow>\n    \\<forall>ys Y y us s A.\n       isInBar (us, s) \\<and>\n       igWls (fromMOD MOD) (asSort ys) Y \\<and>\n       igWlsAbs (fromMOD MOD) (us, s) A \\<longrightarrow>\n       igWlsAbs (fromMOD MOD) (us, s) (igSubstAbs (fromMOD MOD) ys Y y A)", "by simp"], ["", "lemma igSubstAllIPresIGWlsAll_fromMOD[simp]:\n\"gSubstAllPresGWlsAll MOD \\<Longrightarrow> igSubstAllIPresIGWlsAll (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstAllPresGWlsAll MOD \\<Longrightarrow>\n    igSubstAllIPresIGWlsAll (fromMOD MOD)", "unfolding igSubstAllIPresIGWlsAll_def gSubstAllPresGWlsAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstPresGWls MOD \\<and> gSubstAbsPresGWlsAbs MOD \\<Longrightarrow>\n    igSubstIPresIGWls (fromMOD MOD) \\<and>\n    igSubstAbsIPresIGWlsAbs (fromMOD MOD)", "by simp"], ["", "lemmas igSubstAllIPresIGWlsAll_fromMOD_simps =\nigSubstIPresIGWls_fromMOD igSubstAbsIPresIGWlsAbs_fromMOD igSubstAllIPresIGWlsAll_fromMOD"], ["", "text\\<open>The fresh clauses:\\<close>"], ["", "lemma igFreshIGVar_fromMOD[simp]:\n\"gFreshGVar MOD \\<Longrightarrow> igFreshIGVar (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshGVar MOD \\<Longrightarrow> igFreshIGVar (fromMOD MOD)", "unfolding igFreshIGVar_def gFreshGVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y xs x.\n       ys \\<noteq> xs \\<or> y \\<noteq> x \\<longrightarrow>\n       gFresh MOD ys y (Var xs x) (gVar MOD xs x) \\<Longrightarrow>\n    \\<forall>ys y xs x.\n       ys \\<noteq> xs \\<or> y \\<noteq> x \\<longrightarrow>\n       igFresh (fromMOD MOD) ys y (igVar (fromMOD MOD) xs x)", "by simp"], ["", "lemma igFreshIGAbs1_fromMOD[simp]:\n\"gFreshGAbs1 MOD \\<Longrightarrow> igFreshIGAbs1 (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshGAbs1 MOD \\<Longrightarrow> igFreshIGAbs1 (fromMOD MOD)", "unfolding igFreshIGAbs1_def gFreshGAbs1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y s X' X.\n       isInBar (ys, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gFreshAbs MOD ys y (Abs ys y X')\n        (gAbs MOD ys y X' X) \\<Longrightarrow>\n    \\<forall>ys y s X.\n       isInBar (ys, s) \\<and> igWls (fromMOD MOD) s X \\<longrightarrow>\n       igFreshAbs (fromMOD MOD) ys y (igAbs (fromMOD MOD) ys y X)", "by auto"], ["", "lemma igFreshIGAbs2_fromMOD[simp]:\n\"gFreshGAbs2 MOD \\<Longrightarrow> igFreshIGAbs2 (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshGAbs2 MOD \\<Longrightarrow> igFreshIGAbs2 (fromMOD MOD)", "unfolding igFreshIGAbs2_def gFreshGAbs2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y xs x s X' X.\n       isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       fresh ys y X' \\<and> gFresh MOD ys y X' X \\<longrightarrow>\n       gFreshAbs MOD ys y (Abs xs x X')\n        (gAbs MOD xs x X' X) \\<Longrightarrow>\n    \\<forall>ys y xs x s X.\n       isInBar (xs, s) \\<and> igWls (fromMOD MOD) s X \\<longrightarrow>\n       igFresh (fromMOD MOD) ys y X \\<longrightarrow>\n       igFreshAbs (fromMOD MOD) ys y (igAbs (fromMOD MOD) xs x X)", "by auto"], ["", "lemma igFreshIGOp_fromMOD[simp]:\n\"gFreshGOp MOD \\<Longrightarrow> igFreshIGOp (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshGOp MOD \\<Longrightarrow> igFreshIGOp (fromMOD MOD)", "unfolding igFreshIGOp_def gFreshGOp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y delta inp' inp binp' binp.\n       wlsInp delta inp' \\<and>\n       gWlsInp MOD delta inp \\<and>\n       wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n       freshInp ys y inp' \\<and>\n       gFreshInp MOD ys y inp' inp \\<and>\n       freshBinp ys y binp' \\<and>\n       gFreshBinp MOD ys y binp' binp \\<longrightarrow>\n       gFresh MOD ys y (Op delta inp' binp')\n        (gOp MOD delta inp' inp binp' binp) \\<Longrightarrow>\n    \\<forall>ys y delta inp binp.\n       igWlsInp (fromMOD MOD) delta inp \\<and>\n       igWlsBinp (fromMOD MOD) delta binp \\<longrightarrow>\n       igFreshInp (fromMOD MOD) ys y inp \\<and>\n       igFreshBinp (fromMOD MOD) ys y binp \\<longrightarrow>\n       igFresh (fromMOD MOD) ys y (igOp (fromMOD MOD) delta inp binp)", "by simp"], ["", "lemma igFreshCls_fromMOD[simp]:\n\"gFreshCls MOD \\<Longrightarrow> igFreshCls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshCls MOD \\<Longrightarrow> igFreshCls (fromMOD MOD)", "unfolding igFreshCls_def gFreshCls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshGVar MOD \\<and>\n    gFreshGAbs1 MOD \\<and>\n    gFreshGAbs2 MOD \\<and> gFreshGOp MOD \\<Longrightarrow>\n    igFreshIGVar (fromMOD MOD) \\<and>\n    igFreshIGAbs1 (fromMOD MOD) \\<and>\n    igFreshIGAbs2 (fromMOD MOD) \\<and> igFreshIGOp (fromMOD MOD)", "by simp"], ["", "lemmas igFreshCls_fromMOD_simps =\nigFreshIGVar_fromMOD igFreshIGAbs1_fromMOD igFreshIGAbs2_fromMOD\nigFreshIGOp_fromMOD igFreshCls_fromMOD"], ["", "text\\<open>The swap clauses\\<close>"], ["", "lemma igSwapIGVar_fromMOD[simp]:\n\"gSwapGVar MOD \\<Longrightarrow> igSwapIGVar (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapGVar MOD \\<Longrightarrow> igSwapIGVar (fromMOD MOD)", "unfolding igSwapIGVar_def gSwapGVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>zs z1 z2 xs x.\n       gSwap MOD zs z1 z2 (Var xs x) (gVar MOD xs x) =\n       gVar MOD xs (x @xs[z1 \\<and> z2]_zs) \\<Longrightarrow>\n    \\<forall>zs z1 z2 xs x.\n       igSwap (fromMOD MOD) zs z1 z2 (igVar (fromMOD MOD) xs x) =\n       igVar (fromMOD MOD) xs (x @xs[z1 \\<and> z2]_zs)", "by simp"], ["", "lemma igSwapIGAbs_fromMOD[simp]:\n\"gSwapGAbs MOD \\<Longrightarrow> igSwapIGAbs (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapGAbs MOD \\<Longrightarrow> igSwapIGAbs (fromMOD MOD)", "unfolding igSwapIGAbs_def gSwapGAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>zs z1 z2 xs x s X' X.\n       isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gSwapAbs MOD zs z1 z2 (Abs xs x X') (gAbs MOD xs x X' X) =\n       gAbs MOD xs (x @xs[z1 \\<and> z2]_zs) (X' #[z1 \\<and> z2]_zs)\n        (gSwap MOD zs z1 z2 X' X) \\<Longrightarrow>\n    \\<forall>zs z1 z2 xs x s X.\n       isInBar (xs, s) \\<and> igWls (fromMOD MOD) s X \\<longrightarrow>\n       igSwapAbs (fromMOD MOD) zs z1 z2 (igAbs (fromMOD MOD) xs x X) =\n       igAbs (fromMOD MOD) xs (x @xs[z1 \\<and> z2]_zs)\n        (igSwap (fromMOD MOD) zs z1 z2 X)", "by auto"], ["", "lemma igSwapIGOp_fromMOD[simp]:\n\"gSwapGOp MOD \\<Longrightarrow> igSwapIGOp (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapGOp MOD \\<Longrightarrow> igSwapIGOp (fromMOD MOD)", "by (auto simp: igSwapIGOp_def gSwapGOp_def lift_lift2)"], ["", "lemma igSwapCls_fromMOD[simp]:\n\"gSwapCls MOD \\<Longrightarrow> igSwapCls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapCls MOD \\<Longrightarrow> igSwapCls (fromMOD MOD)", "unfolding igSwapCls_def gSwapCls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwapGVar MOD \\<and> gSwapGAbs MOD \\<and> gSwapGOp MOD \\<Longrightarrow>\n    igSwapIGVar (fromMOD MOD) \\<and>\n    igSwapIGAbs (fromMOD MOD) \\<and> igSwapIGOp (fromMOD MOD)", "by simp"], ["", "lemmas igSwapCls_fromMOD_simps =\nigSwapIGVar_fromMOD igSwapIGAbs_fromMOD\nigSwapIGOp_fromMOD igSwapCls_fromMOD"], ["", "text\\<open>The subst clauses\\<close>"], ["", "lemma igSubstIGVar1_fromMOD[simp]:\n\"gSubstGVar1 MOD \\<Longrightarrow> igSubstIGVar1 (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstGVar1 MOD \\<Longrightarrow> igSubstIGVar1 (fromMOD MOD)", "unfolding igSubstIGVar1_def gSubstGVar1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y Y' Y xs x.\n       wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<longrightarrow>\n       ys \\<noteq> xs \\<or> y \\<noteq> x \\<longrightarrow>\n       gSubst MOD ys Y' Y y (Var xs x) (gVar MOD xs x) =\n       gVar MOD xs x \\<Longrightarrow>\n    \\<forall>ys y Y xs x.\n       igWls (fromMOD MOD) (asSort ys) Y \\<longrightarrow>\n       ys \\<noteq> xs \\<or> y \\<noteq> x \\<longrightarrow>\n       igSubst (fromMOD MOD) ys Y y (igVar (fromMOD MOD) xs x) =\n       igVar (fromMOD MOD) xs x", "by simp"], ["", "lemma igSubstIGVar2_fromMOD[simp]:\n\"gSubstGVar2 MOD \\<Longrightarrow> igSubstIGVar2 (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstGVar2 MOD \\<Longrightarrow> igSubstIGVar2 (fromMOD MOD)", "unfolding igSubstIGVar2_def gSubstGVar2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y Y' Y.\n       wls (asSort ys) Y' \\<and> gWls MOD (asSort ys) Y \\<longrightarrow>\n       gSubst MOD ys Y' Y y (Var ys y) (gVar MOD ys y) = Y \\<Longrightarrow>\n    \\<forall>ys y Y.\n       igWls (fromMOD MOD) (asSort ys) Y \\<longrightarrow>\n       igSubst (fromMOD MOD) ys Y y (igVar (fromMOD MOD) ys y) = Y", "by simp"], ["", "lemma igSubstIGAbs_fromMOD[simp]:\n\"gSubstGAbs MOD \\<Longrightarrow> igSubstIGAbs (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstGAbs MOD \\<Longrightarrow> igSubstIGAbs (fromMOD MOD)", "unfolding igSubstIGAbs_def gSubstGAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ys y Y' Y xs x s X' X.\n       isInBar (xs, s) \\<and>\n       wls (asSort ys) Y' \\<and>\n       gWls MOD (asSort ys) Y \\<and>\n       wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       (xs \\<noteq> ys \\<or> x \\<noteq> y) \\<and>\n       fresh xs x Y' \\<and> gFresh MOD xs x Y' Y \\<longrightarrow>\n       gSubstAbs MOD ys Y' Y y (Abs xs x X') (gAbs MOD xs x X' X) =\n       gAbs MOD xs x (X' #[Y' / y]_ys)\n        (gSubst MOD ys Y' Y y X' X) \\<Longrightarrow>\n    \\<forall>ys y Y xs x s X.\n       isInBar (xs, s) \\<and>\n       igWls (fromMOD MOD) (asSort ys) Y \\<and>\n       igWls (fromMOD MOD) s X \\<longrightarrow>\n       (xs \\<noteq> ys \\<or> x \\<noteq> y) \\<and>\n       igFresh (fromMOD MOD) xs x Y \\<longrightarrow>\n       igSubstAbs (fromMOD MOD) ys Y y (igAbs (fromMOD MOD) xs x X) =\n       igAbs (fromMOD MOD) xs x (igSubst (fromMOD MOD) ys Y y X)", "by fastforce+"], ["", "lemma igSubstIGOp_fromMOD[simp]:\n\"gSubstGOp MOD \\<Longrightarrow> igSubstIGOp (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstGOp MOD \\<Longrightarrow> igSubstIGOp (fromMOD MOD)", "by(auto simp: igSubstIGOp_def gSubstGOp_def lift_lift2)"], ["", "lemma igSubstCls_fromMOD[simp]:\n\"gSubstCls MOD \\<Longrightarrow> igSubstCls (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstCls MOD \\<Longrightarrow> igSubstCls (fromMOD MOD)", "unfolding igSubstCls_def gSubstCls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubstGVar1 MOD \\<and>\n    gSubstGVar2 MOD \\<and>\n    gSubstGAbs MOD \\<and> gSubstGOp MOD \\<Longrightarrow>\n    igSubstIGVar1 (fromMOD MOD) \\<and>\n    igSubstIGVar2 (fromMOD MOD) \\<and>\n    igSubstIGAbs (fromMOD MOD) \\<and> igSubstIGOp (fromMOD MOD)", "by simp"], ["", "lemmas igSubstCls_fromMOD_simps =\nigSubstIGVar1_fromMOD igSubstIGVar2_fromMOD igSubstIGAbs_fromMOD\nigSubstIGOp_fromMOD igSubstCls_fromMOD"], ["", "text\\<open>Abstraction swapping congruence:\\<close>"], ["", "lemma igAbsCongS_fromMOD[simp]:\nassumes \"gAbsCongS MOD\"\nshows \"igAbsCongS (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. igAbsCongS (fromMOD MOD)", "using assms"], ["proof (prove)\nusing this:\n  gAbsCongS MOD\n\ngoal (1 subgoal):\n 1. igAbsCongS (fromMOD MOD)", "unfolding igAbsCongS_def gAbsCongS_def"], ["proof (prove)\nusing this:\n  \\<forall>xs x x2 y s X' X X2' X2.\n     isInBar (xs, s) \\<and>\n     wls s X' \\<and>\n     gWls MOD s X \\<and> wls s X2' \\<and> gWls MOD s X2 \\<longrightarrow>\n     fresh xs y X' \\<and>\n     gFresh MOD xs y X' X \\<and>\n     fresh xs y X2' \\<and>\n     gFresh MOD xs y X2' X2 \\<and>\n     X' #[y \\<and> x]_xs = X2' #[y \\<and> x2]_xs \\<longrightarrow>\n     gSwap MOD xs y x X' X = gSwap MOD xs y x2 X2' X2 \\<longrightarrow>\n     gAbs MOD xs x X' X = gAbs MOD xs x2 X2' X2\n\ngoal (1 subgoal):\n 1. \\<forall>xs x x' y s X X'.\n       isInBar (xs, s) \\<and>\n       igWls (fromMOD MOD) s X \\<and>\n       igWls (fromMOD MOD) s X' \\<longrightarrow>\n       igFresh (fromMOD MOD) xs y X \\<and>\n       igFresh (fromMOD MOD) xs y X' \\<and>\n       igSwap (fromMOD MOD) xs y x X =\n       igSwap (fromMOD MOD) xs y x' X' \\<longrightarrow>\n       igAbs (fromMOD MOD) xs x X = igAbs (fromMOD MOD) xs x' X'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs x x2 y s X' X X2' X2.\n       isInBar (xs, s) \\<and>\n       wls s X' \\<and>\n       gWls MOD s X \\<and> wls s X2' \\<and> gWls MOD s X2 \\<longrightarrow>\n       fresh xs y X' \\<and>\n       gFresh MOD xs y X' X \\<and>\n       fresh xs y X2' \\<and>\n       gFresh MOD xs y X2' X2 \\<and>\n       X' #[y \\<and> x]_xs = X2' #[y \\<and> x2]_xs \\<longrightarrow>\n       gSwap MOD xs y x X' X = gSwap MOD xs y x2 X2' X2 \\<longrightarrow>\n       gAbs MOD xs x X' X = gAbs MOD xs x2 X2' X2 \\<Longrightarrow>\n    \\<forall>xs x x' y s a b aa ba.\n       isInBar (xs, s) \\<and>\n       wls s a \\<and>\n       gWls MOD s b \\<and> wls s aa \\<and> gWls MOD s ba \\<longrightarrow>\n       fresh xs y a \\<and>\n       gFresh MOD xs y a b \\<and>\n       fresh xs y aa \\<and>\n       gFresh MOD xs y aa ba \\<and>\n       a #[y \\<and> x]_xs = aa #[y \\<and> x']_xs \\<and>\n       gSwap MOD xs y x a b = gSwap MOD xs y x' aa ba \\<longrightarrow>\n       Abs xs x a = Abs xs x' aa \\<and>\n       gAbs MOD xs x a b = gAbs MOD xs x' aa ba", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x x' y s a b aa ba.\n       \\<lbrakk>\\<forall>xs x x2 y s X' X X2' X2.\n                   isInBar (xs, s) \\<and>\n                   wls s X' \\<and>\n                   gWls MOD s X \\<and>\n                   wls s X2' \\<and> gWls MOD s X2 \\<longrightarrow>\n                   fresh xs y X' \\<and>\n                   gFresh MOD xs y X' X \\<and>\n                   fresh xs y X2' \\<and>\n                   gFresh MOD xs y X2' X2 \\<and>\n                   X' #[y \\<and> x]_xs =\n                   X2' #[y \\<and> x2]_xs \\<longrightarrow>\n                   gSwap MOD xs y x X' X =\n                   gSwap MOD xs y x2 X2' X2 \\<longrightarrow>\n                   gAbs MOD xs x X' X = gAbs MOD xs x2 X2' X2;\n        isInBar (xs, s); wls s a; gWls MOD s b; wls s aa; gWls MOD s ba;\n        fresh xs y a; gFresh MOD xs y a b; fresh xs y aa;\n        gFresh MOD xs y aa ba; a #[y \\<and> x]_xs = aa #[y \\<and> x']_xs;\n        gSwap MOD xs y x a b = gSwap MOD xs y x' aa ba\\<rbrakk>\n       \\<Longrightarrow> Abs xs x a = Abs xs x' aa \\<and>\n                         gAbs MOD xs x a b = gAbs MOD xs x' aa ba", "by (intro conjI, erule wls_Abs_swap_cong) blast+"], ["", "text\\<open>Abstraction renaming:\\<close>"], ["", "lemma igAbsRen_fromMOD[simp]:\n\"gAbsRen MOD \\<Longrightarrow> igAbsRen (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gAbsRen MOD \\<Longrightarrow> igAbsRen (fromMOD MOD)", "unfolding igAbsRen_def gAbsRen_def vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs y x s X' X.\n       isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       fresh xs y X' \\<and> gFresh MOD xs y X' X \\<longrightarrow>\n       gAbs MOD xs y (X' #[Var xs y / x]_xs)\n        (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X' X) =\n       gAbs MOD xs x X' X \\<Longrightarrow>\n    \\<forall>xs y x s X.\n       isInBar (xs, s) \\<and> igWls (fromMOD MOD) s X \\<longrightarrow>\n       igFresh (fromMOD MOD) xs y X \\<longrightarrow>\n       igAbs (fromMOD MOD) xs y\n        (igSubst (fromMOD MOD) xs (igVar (fromMOD MOD) xs y) x X) =\n       igAbs (fromMOD MOD) xs x X", "by auto"], ["", "text\\<open>Models:\\<close>"], ["", "lemma iwlsFSw_fromMOD[simp]:\n\"wlsFSw MOD \\<Longrightarrow> iwlsFSw (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSw MOD \\<Longrightarrow> iwlsFSw (fromMOD MOD)", "unfolding iwlsFSw_def wlsFSw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsAllDisj MOD \\<and>\n    gWlsAbsIsInBar MOD \\<and>\n    gConsPresGWls MOD \\<and>\n    gSwapAllPresGWlsAll MOD \\<and>\n    gFreshCls MOD \\<and> gSwapCls MOD \\<and> gAbsCongS MOD \\<Longrightarrow>\n    igWlsAllDisj (fromMOD MOD) \\<and>\n    igWlsAbsIsInBar (fromMOD MOD) \\<and>\n    igConsIPresIGWls (fromMOD MOD) \\<and>\n    igSwapAllIPresIGWlsAll (fromMOD MOD) \\<and>\n    igFreshCls (fromMOD MOD) \\<and>\n    igSwapCls (fromMOD MOD) \\<and> igAbsCongS (fromMOD MOD)", "by simp"], ["", "lemma iwlsFSb_fromMOD[simp]:\n\"wlsFSb MOD \\<Longrightarrow> iwlsFSb (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSb MOD \\<Longrightarrow> iwlsFSb (fromMOD MOD)", "unfolding iwlsFSb_def wlsFSb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gWlsAllDisj MOD \\<and>\n    gWlsAbsIsInBar MOD \\<and>\n    gConsPresGWls MOD \\<and>\n    gSubstAllPresGWlsAll MOD \\<and>\n    gFreshCls MOD \\<and> gSubstCls MOD \\<and> gAbsRen MOD \\<Longrightarrow>\n    igWlsAllDisj (fromMOD MOD) \\<and>\n    igWlsAbsIsInBar (fromMOD MOD) \\<and>\n    igConsIPresIGWls (fromMOD MOD) \\<and>\n    igSubstAllIPresIGWlsAll (fromMOD MOD) \\<and>\n    igFreshCls (fromMOD MOD) \\<and>\n    igSubstCls (fromMOD MOD) \\<and> igAbsRen (fromMOD MOD)", "by simp"], ["", "lemma iwlsFSwSb_fromMOD[simp]:\n\"wlsFSwSb MOD \\<Longrightarrow> iwlsFSwSb (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSwSb MOD \\<Longrightarrow> iwlsFSwSb (fromMOD MOD)", "unfolding iwlsFSwSb_def wlsFSwSb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSw MOD \\<and>\n    gSubstAllPresGWlsAll MOD \\<and> gSubstCls MOD \\<Longrightarrow>\n    iwlsFSw (fromMOD MOD) \\<and>\n    igSubstAllIPresIGWlsAll (fromMOD MOD) \\<and> igSubstCls (fromMOD MOD)", "by simp"], ["", "lemma iwlsFSbSw_fromMOD[simp]:\n\"wlsFSbSw MOD \\<Longrightarrow> iwlsFSbSw (fromMOD MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSbSw MOD \\<Longrightarrow> iwlsFSbSw (fromMOD MOD)", "unfolding iwlsFSbSw_def wlsFSbSw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSb MOD \\<and>\n    gSwapAllPresGWlsAll MOD \\<and> gSwapCls MOD \\<Longrightarrow>\n    iwlsFSb (fromMOD MOD) \\<and>\n    igSwapAllIPresIGWlsAll (fromMOD MOD) \\<and> igSwapCls (fromMOD MOD)", "by simp"], ["", "lemmas iwlsModel_fromMOD_simps =\niwlsFSw_fromMOD iwlsFSb_fromMOD\niwlsFSwSb_fromMOD iwlsFSbSw_fromMOD"], ["", "(******************************)"], ["", "lemmas fromMOD_predicate_simps =\nigWlsAllDisj_fromMOD_simps\nigConsIPresIGWls_fromMOD_simps\nigSwapAllIPresIGWlsAll_fromMOD_simps\nigSubstAllIPresIGWlsAll_fromMOD_simps\nigFreshCls_fromMOD_simps\nigSwapCls_fromMOD_simps\nigSubstCls_fromMOD_simps\nigAbsCongS_fromMOD\nigAbsRen_fromMOD\niwlsModel_fromMOD_simps"], ["", "lemmas fromMOD_simps =\nfromMOD_basic_simps\ninput_fromMOD_simps\nbinput_fromMOD_simps\nfromMOD_predicate_simps"], ["", "subsection \\<open>The recursion-iteration ``identity trick\"\\<close>"], ["", "text \\<open>Here we show that any construct-preserving map from terms to ``fromMOD MOD\"\nis the identity on its first projection -- this is the main trick when\nreducing recursion to iteration.\\<close>"], ["", "lemma ipresCons_fromMOD_fst:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"(wls s X \\<longrightarrow> fst (h X) = X) \\<and> (wlsAbs (us,s') A \\<longrightarrow> fst (hA A) = A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> fst (h X) = X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> fst (hA A) = A)", "proof(induction rule: wls_rawInduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. fst (h (Var xs x)) = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> fst (h (Op delta inp binp)) = Op delta inp binp\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; fst (h X) = X\\<rbrakk>\n       \\<Longrightarrow> fst (hA (Abs xs x X)) = Abs xs x X", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. fst (h (Var xs x)) = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> fst (h (Op delta inp binp)) = Op delta inp binp\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; fst (h X) = X\\<rbrakk>\n       \\<Longrightarrow> fst (hA (Abs xs x X)) = Abs xs x X", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\n\ngoal (3 subgoals):\n 1. \\<And>xs x. fst (h (Var xs x)) = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> fst (h (Op delta inp binp)) = Op delta inp binp\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; fst (h X) = X\\<rbrakk>\n       \\<Longrightarrow> fst (hA (Abs xs x X)) = Abs xs x X", "hence \"lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp\""], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp", "by (simp add: lift_def fun_eq_iff liftAll2_def \n   wlsInp_iff wlsBinp_iff sameDom_def split: option.splits) \n  (metis not_Some_eq old.prod.exhaust)"], ["proof (state)\nthis:\n  lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp\n\ngoal (3 subgoals):\n 1. \\<And>xs x. fst (h (Var xs x)) = Var xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> fst (h (Op delta inp binp)) = Op delta inp binp\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; fst (h X) = X\\<rbrakk>\n       \\<Longrightarrow> fst (hA (Abs xs x X)) = Abs xs x X", "then"], ["proof (chain)\npicking this:\n  lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp", "show ?case"], ["proof (prove)\nusing this:\n  lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp\n\ngoal (1 subgoal):\n 1. fst (h (Op delta inp binp)) = Op delta inp binp", "using assms Op"], ["proof (prove)\nusing this:\n  lift (fst \\<circ> h) inp = inp \\<and> lift (fst \\<circ> hA) binp = binp\n  ipresCons h hA (fromMOD MOD)\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. fst (h b) = b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fst (hA b) = b) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. fst (h (Op delta inp binp)) = Op delta inp binp", "by (auto simp: ipresCons_def ipresOp_def lift_comp)"], ["proof (state)\nthis:\n  fst (h (Op delta inp binp)) = Op delta inp binp\n\ngoal (2 subgoals):\n 1. \\<And>xs x. fst (h (Var xs x)) = Var xs x\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; fst (h X) = X\\<rbrakk>\n       \\<Longrightarrow> fst (hA (Abs xs x X)) = Abs xs x X", "qed(insert assms, auto simp: ipresVar_def ipresCons_def ipresAbs_def)"], ["", "lemma ipresCons_fromMOD_fst_simps[simp]:\n\"\\<lbrakk>ipresCons h hA (fromMOD MOD); wls s X\\<rbrakk>\n \\<Longrightarrow> fst (h X) = X\"\n(*  *)\n\"\\<lbrakk>ipresCons h hA (fromMOD MOD); wlsAbs (us,s') A\\<rbrakk>\n \\<Longrightarrow> fst (hA A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>ipresCons h hA (fromMOD MOD); wls s X\\<rbrakk>\n     \\<Longrightarrow> fst (h X) = X) &&&\n    (\\<lbrakk>ipresCons h hA (fromMOD MOD); wlsAbs (us, s') A\\<rbrakk>\n     \\<Longrightarrow> fst (hA A) = A)", "using ipresCons_fromMOD_fst"], ["proof (prove)\nusing this:\n  ipresCons ?h ?hA (fromMOD ?MOD) \\<Longrightarrow>\n  (wls ?s ?X \\<longrightarrow> fst (?h ?X) = ?X) \\<and>\n  (wlsAbs (?us, ?s') ?A \\<longrightarrow> fst (?hA ?A) = ?A)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>ipresCons h hA (fromMOD MOD); wls s X\\<rbrakk>\n     \\<Longrightarrow> fst (h X) = X) &&&\n    (\\<lbrakk>ipresCons h hA (fromMOD MOD); wlsAbs (us, s') A\\<rbrakk>\n     \\<Longrightarrow> fst (hA A) = A)", "by blast+"], ["", "lemma ipresCons_fromMOD_fst_inp[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> wlsInp delta inp \\<Longrightarrow> lift (fst o h) inp = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD); wlsInp delta inp\\<rbrakk>\n    \\<Longrightarrow> lift (fst \\<circ> h) inp = inp", "by (force simp add: lift_def fun_eq_iff liftAll2_def \nwlsInp_iff sameDom_def split: option.splits)"], ["", "lemma ipresCons_fromMOD_fst_binp[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> wlsBinp delta binp \\<Longrightarrow> lift (fst o hA) binp = binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD); wlsBinp delta binp\\<rbrakk>\n    \\<Longrightarrow> lift (fst \\<circ> hA) binp = binp", "by (force simp add: lift_def fun_eq_iff liftAll2_def \nwlsBinp_iff sameDom_def split: option.splits)"], ["", "lemmas ipresCons_fromMOD_fst_all_simps =\nipresCons_fromMOD_fst_simps ipresCons_fromMOD_fst_inp ipresCons_fromMOD_fst_binp"], ["", "subsection \\<open>From iteration morphisms to morphisms\\<close>"], ["", "text\\<open>The transition map:\\<close>"], ["", "definition fromIMor ::\n\"(('index,'bindex,'varSort,'var,'opSym)term \\<Rightarrow>\n  ('index,'bindex,'varSort,'var,'opSym)term \\<times> 'gTerm)\n \\<Rightarrow>\n (('index,'bindex,'varSort,'var,'opSym)term \\<Rightarrow> 'gTerm)\"\nwhere \"fromIMor h \\<equiv> snd o h\""], ["", "definition fromIMorAbs ::\n\"(('index,'bindex,'varSort,'var,'opSym)abs \\<Rightarrow>\n  ('index,'bindex,'varSort,'var,'opSym)abs \\<times> 'gAbs)\n \\<Rightarrow>\n (('index,'bindex,'varSort,'var,'opSym)abs \\<Rightarrow> 'gAbs)\"\nwhere \"fromIMorAbs hA \\<equiv> snd o hA\""], ["", "text\\<open>Basic simplification rules:\\<close>"], ["", "lemma fromIMor[simp]: \"fromIMor h X' = snd (h X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fromIMor h X' = snd (h X')", "unfolding fromIMor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> h) X' = snd (h X')", "by simp"], ["", "lemma fromIMorAbs[simp]: \"fromIMorAbs hA A' = snd (hA A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fromIMorAbs hA A' = snd (hA A')", "unfolding fromIMorAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> hA) A' = snd (hA A')", "by simp"], ["", "lemma fromIMor_snd_inp[simp]:\n\"wlsInp delta inp \\<Longrightarrow> lift (fromIMor h) inp = lift (snd o h) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp \\<Longrightarrow>\n    lift (fromIMor h) inp = lift (snd \\<circ> h) inp", "by (auto simp: lift_def split: option.splits)"], ["", "lemma fromIMorAbs_snd_binp[simp]:\n\"wlsBinp delta binp \\<Longrightarrow> lift (fromIMorAbs hA) binp = lift (snd o hA) binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp \\<Longrightarrow>\n    lift (fromIMorAbs hA) binp = lift (snd \\<circ> hA) binp", "by (auto simp: lift_def split: option.splits)"], ["", "lemmas fromIMor_basic_simps =\nfromIMor fromIMorAbs fromIMor_snd_inp fromIMorAbs_snd_binp"], ["", "text\\<open>Predicate simplification rules\\<close>"], ["", "text\\<open>Domain preservation\\<close>"], ["", "lemma presWls_fromIMor[simp]:\n\"ipresWls h (fromMOD MOD) \\<Longrightarrow> presWls (fromIMor h) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWls h (fromMOD MOD) \\<Longrightarrow> presWls (fromIMor h) MOD", "unfolding ipresWls_def presWls_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s X.\n       wls s X \\<longrightarrow>\n       igWls (fromMOD MOD) s (h X) \\<Longrightarrow>\n    \\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (fromIMor h X)", "by simp"], ["", "lemma presWlsAbs_fromIMorAbs[simp]:\n\"ipresWlsAbs hA (fromMOD MOD) \\<Longrightarrow> presWlsAbs (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWlsAbs hA (fromMOD MOD) \\<Longrightarrow>\n    presWlsAbs (fromIMorAbs hA) MOD", "unfolding ipresWlsAbs_def presWlsAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>us s A.\n       wlsAbs (us, s) A \\<longrightarrow>\n       igWlsAbs (fromMOD MOD) (us, s) (hA A) \\<Longrightarrow>\n    \\<forall>us s A.\n       wlsAbs (us, s) A \\<longrightarrow>\n       gWlsAbs MOD (us, s) (fromIMorAbs hA A)", "by simp"], ["", "lemma presWlsAll_fromIMorAll[simp]:\n\"ipresWlsAll h hA (fromMOD MOD) \\<Longrightarrow> presWlsAll (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWlsAll h hA (fromMOD MOD) \\<Longrightarrow>\n    presWlsAll (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresWlsAll_def presWlsAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWls h (fromMOD MOD) \\<and>\n    ipresWlsAbs hA (fromMOD MOD) \\<Longrightarrow>\n    presWls (fromIMor h) MOD \\<and> presWlsAbs (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas presWlsAll_fromIMorAll_simps =\npresWls_fromIMor presWlsAbs_fromIMorAbs presWlsAll_fromIMorAll"], ["", "text\\<open>Preservation of the constructs\\<close>"], ["", "lemma presVar_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> presVar (fromIMor h) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresCons h hA (fromMOD MOD) \\<Longrightarrow> presVar (fromIMor h) MOD", "unfolding ipresCons_def ipresVar_def presVar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>xs x. h (Var xs x) = igVar (fromMOD MOD) xs x) \\<and>\n    ipresAbs h hA (fromMOD MOD) \\<and>\n    ipresOp h hA (fromMOD MOD) \\<Longrightarrow>\n    \\<forall>xs x. fromIMor h (Var xs x) = gVar MOD xs x", "by simp"], ["", "lemma presAbs_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presAbs (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presAbs (fromIMor h) (fromIMorAbs hA) MOD", "using assms"], ["proof (prove)\nusing this:\n  ipresCons h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. presAbs (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresCons_def ipresAbs_def presAbs_def"], ["proof (prove)\nusing this:\n  ipresVar h (fromMOD MOD) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      hA (Abs xs x X) = igAbs (fromMOD MOD) xs x (h X)) \\<and>\n  ipresOp h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. \\<forall>xs x s X.\n       isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n       fromIMorAbs hA (Abs xs x X) = gAbs MOD xs x X (fromIMor h X)", "using assms"], ["proof (prove)\nusing this:\n  ipresVar h (fromMOD MOD) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      hA (Abs xs x X) = igAbs (fromMOD MOD) xs x (h X)) \\<and>\n  ipresOp h hA (fromMOD MOD)\n  ipresCons h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. \\<forall>xs x s X.\n       isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n       fromIMorAbs hA (Abs xs x X) = gAbs MOD xs x X (fromIMor h X)", "by fastforce"], ["", "lemma presOp_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presOp (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presOp (fromIMor h) (fromIMorAbs hA) MOD", "using assms"], ["proof (prove)\nusing this:\n  ipresCons h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. presOp (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresCons_def ipresOp_def presOp_def"], ["proof (prove)\nusing this:\n  ipresVar h (fromMOD MOD) \\<and>\n  ipresAbs h hA (fromMOD MOD) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      h (Op delta inp binp) =\n      igOp (fromMOD MOD) delta (lift h inp) (lift hA binp))\n\ngoal (1 subgoal):\n 1. \\<forall>delta inp binp.\n       wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n       fromIMor h (Op delta inp binp) =\n       gOp MOD delta inp (lift (fromIMor h) inp) binp\n        (lift (fromIMorAbs hA) binp)", "using assms"], ["proof (prove)\nusing this:\n  ipresVar h (fromMOD MOD) \\<and>\n  ipresAbs h hA (fromMOD MOD) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      h (Op delta inp binp) =\n      igOp (fromMOD MOD) delta (lift h inp) (lift hA binp))\n  ipresCons h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. \\<forall>delta inp binp.\n       wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n       fromIMor h (Op delta inp binp) =\n       gOp MOD delta inp (lift (fromIMor h) inp) binp\n        (lift (fromIMorAbs hA) binp)", "by (auto simp: lift_comp)"], ["", "lemma presCons_fromIMor[simp]:\nassumes \"ipresCons h hA (fromMOD MOD)\"\nshows \"presCons (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. presCons (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresCons_def presCons_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. presVar (fromIMor h) MOD \\<and>\n    presAbs (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presOp (fromIMor h) (fromIMorAbs hA) MOD", "using assms"], ["proof (prove)\nusing this:\n  ipresCons h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. presVar (fromIMor h) MOD \\<and>\n    presAbs (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presOp (fromIMor h) (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas presCons_fromIMor_simps =\npresVar_fromIMor presAbs_fromIMor presOp_fromIMor presCons_fromIMor"], ["", "text\\<open>Preservation of freshness\\<close>"], ["", "lemma presFresh_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFresh h (fromMOD MOD)\n \\<Longrightarrow> presFresh (fromIMor h) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresFresh h (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presFresh (fromIMor h) MOD", "unfolding ipresFresh_def presFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>ys y s X.\n        wls s X \\<longrightarrow>\n        fresh ys y X \\<longrightarrow>\n        igFresh (fromMOD MOD) ys y (h X)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y s X.\n                         wls s X \\<longrightarrow>\n                         fresh ys y X \\<longrightarrow>\n                         gFresh MOD ys y X (fromIMor h X)", "by simp"], ["", "lemma presFreshAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFreshAbs hA (fromMOD MOD) \n \\<Longrightarrow> presFreshAbs (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresFreshAbs hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presFreshAbs (fromIMorAbs hA) MOD", "unfolding ipresFreshAbs_def presFreshAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>ys y us s A.\n        wlsAbs (us, s) A \\<longrightarrow>\n        freshAbs ys y A \\<longrightarrow>\n        igFreshAbs (fromMOD MOD) ys y (hA A)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys y us s A.\n                         wlsAbs (us, s) A \\<longrightarrow>\n                         freshAbs ys y A \\<longrightarrow>\n                         gFreshAbs MOD ys y A (fromIMorAbs hA A)", "by simp"], ["", "lemma presFreshAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresFreshAll h hA (fromMOD MOD) \n \\<Longrightarrow> presFreshAll (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresFreshAll h hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presFreshAll (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresFreshAll_def presFreshAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresFresh h (fromMOD MOD) \\<and>\n     ipresFreshAbs hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presFresh (fromIMor h) MOD \\<and>\n                      presFreshAbs (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas presFreshAll_fromIMor_simps =\npresFresh_fromIMor presFreshAbs_fromIMor presFreshAll_fromIMor"], ["", "text\\<open>Preservation of swap\\<close>"], ["", "lemma presSwap_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwap h (fromMOD MOD) \n \\<Longrightarrow> presSwap (fromIMor h) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSwap h (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSwap (fromIMor h) MOD", "unfolding ipresSwap_def presSwap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>zs z1 z2 s X.\n        wls s X \\<longrightarrow>\n        h (X #[z1 \\<and> z2]_zs) =\n        igSwap (fromMOD MOD) zs z1 z2 (h X)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>zs z1 z2 s X.\n                         wls s X \\<longrightarrow>\n                         fromIMor h (X #[z1 \\<and> z2]_zs) =\n                         gSwap MOD zs z1 z2 X (fromIMor h X)", "by simp"], ["", "lemma presSwapAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwapAbs hA (fromMOD MOD) \n \\<Longrightarrow> presSwapAbs (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSwapAbs hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSwapAbs (fromIMorAbs hA) MOD", "unfolding ipresSwapAbs_def presSwapAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>zs z1 z2 us s A.\n        wlsAbs (us, s) A \\<longrightarrow>\n        hA (A $[z1 \\<and> z2]_zs) =\n        igSwapAbs (fromMOD MOD) zs z1 z2 (hA A)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>zs z1 z2 us s A.\n                         wlsAbs (us, s) A \\<longrightarrow>\n                         fromIMorAbs hA (A $[z1 \\<and> z2]_zs) =\n                         gSwapAbs MOD zs z1 z2 A (fromIMorAbs hA A)", "by simp"], ["", "lemma presSwapAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSwapAll h hA (fromMOD MOD)\n \\<Longrightarrow> presSwapAll (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSwapAll h hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSwapAll (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresSwapAll_def presSwapAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSwap h (fromMOD MOD) \\<and> ipresSwapAbs hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSwap (fromIMor h) MOD \\<and>\n                      presSwapAbs (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas presSwapAll_fromIMor_simps =\npresSwap_fromIMor presSwapAbs_fromIMor presSwapAll_fromIMor"], ["", "text\\<open>Preservation of subst\\<close>"], ["", "lemma presSubst_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubst h (fromMOD MOD)\n \\<Longrightarrow> presSubst (fromIMor h) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSubst h (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSubst (fromIMor h) MOD", "unfolding ipresSubst_def presSubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>ys Y y s X.\n        wls (asSort ys) Y \\<and> wls s X \\<longrightarrow>\n        h (X #[Y / y]_ys) = igSubst (fromMOD MOD) ys (h Y) y (h X)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys Y y s X.\n                         wls (asSort ys) Y \\<and> wls s X \\<longrightarrow>\n                         fromIMor h (X #[Y / y]_ys) =\n                         gSubst MOD ys Y (fromIMor h Y) y X (fromIMor h X)", "by auto"], ["", "lemma presSubstAbs_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubstAbs h hA (fromMOD MOD) \n \\<Longrightarrow> presSubstAbs (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSubstAbs h hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSubstAbs (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresSubstAbs_def presSubstAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     \\<forall>ys Y y us s A.\n        wls (asSort ys) Y \\<and> wlsAbs (us, s) A \\<longrightarrow>\n        hA (A $[Y / y]_ys) =\n        igSubstAbs (fromMOD MOD) ys (h Y) y (hA A)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ys Y y us s A.\n                         wls (asSort ys) Y \\<and>\n                         wlsAbs (us, s) A \\<longrightarrow>\n                         fromIMorAbs hA (A $[Y / y]_ys) =\n                         gSubstAbs MOD ys Y (fromIMor h Y) y A\n                          (fromIMorAbs hA A)", "by auto"], ["", "lemma presSubstAll_fromIMor[simp]:\n\"ipresCons h hA (fromMOD MOD) \\<Longrightarrow> ipresSubstAll h hA (fromMOD MOD) \n \\<Longrightarrow> presSubstAll (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSubstAll h hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSubstAll (fromIMor h) (fromIMorAbs hA) MOD", "unfolding ipresSubstAll_def presSubstAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipresCons h hA (fromMOD MOD);\n     ipresSubst h (fromMOD MOD) \\<and>\n     ipresSubstAbs h hA (fromMOD MOD)\\<rbrakk>\n    \\<Longrightarrow> presSubst (fromIMor h) MOD \\<and>\n                      presSubstAbs (fromIMor h) (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas presSubstAll_fromIMor_simps =\npresSubst_fromIMor presSubstAbs_fromIMor presSubstAll_fromIMor"], ["", "text\\<open>Morphisms\\<close>"], ["", "lemma fromIMor_termFSwMorph[simp]:\n\"termFSwImorph h hA (fromMOD MOD) \\<Longrightarrow> termFSwMorph (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. termFSwImorph h hA (fromMOD MOD) \\<Longrightarrow>\n    termFSwMorph (fromIMor h) (fromIMorAbs hA) MOD", "unfolding termFSwImorph_def termFSwMorph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWlsAll h hA (fromMOD MOD) \\<and>\n    ipresCons h hA (fromMOD MOD) \\<and>\n    ipresFreshAll h hA (fromMOD MOD) \\<and>\n    ipresSwapAll h hA (fromMOD MOD) \\<Longrightarrow>\n    presWlsAll (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presCons (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presFreshAll (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presSwapAll (fromIMor h) (fromIMorAbs hA) MOD", "by simp"], ["", "lemma fromIMor_termFSbMorph[simp]:\n\"termFSbImorph h hA (fromMOD MOD) \\<Longrightarrow> termFSbMorph (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. termFSbImorph h hA (fromMOD MOD) \\<Longrightarrow>\n    termFSbMorph (fromIMor h) (fromIMorAbs hA) MOD", "unfolding termFSbImorph_def termFSbMorph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipresWlsAll h hA (fromMOD MOD) \\<and>\n    ipresCons h hA (fromMOD MOD) \\<and>\n    ipresFreshAll h hA (fromMOD MOD) \\<and>\n    ipresSubstAll h hA (fromMOD MOD) \\<Longrightarrow>\n    presWlsAll (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presCons (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presFreshAll (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presSubstAll (fromIMor h) (fromIMorAbs hA) MOD", "by simp"], ["", "lemma fromIMor_termFSwSbMorph[simp]:\nassumes \"termFSwSbImorph h hA (fromMOD MOD)\"\nshows \"termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD", "using assms"], ["proof (prove)\nusing this:\n  termFSwSbImorph h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD", "unfolding termFSwSbImorph_defs1"], ["proof (prove)\nusing this:\n  (ipresWlsAll h hA (fromMOD MOD) \\<and>\n   ipresCons h hA (fromMOD MOD) \\<and>\n   ipresFreshAll h hA (fromMOD MOD) \\<and>\n   ipresSwapAll h hA (fromMOD MOD)) \\<and>\n  ipresSubst h (fromMOD MOD) \\<and> ipresSubstAbs h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD", "using assms"], ["proof (prove)\nusing this:\n  (ipresWlsAll h hA (fromMOD MOD) \\<and>\n   ipresCons h hA (fromMOD MOD) \\<and>\n   ipresFreshAll h hA (fromMOD MOD) \\<and>\n   ipresSwapAll h hA (fromMOD MOD)) \\<and>\n  ipresSubst h (fromMOD MOD) \\<and> ipresSubstAbs h hA (fromMOD MOD)\n  termFSwSbImorph h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. termFSwSbMorph (fromIMor h) (fromIMorAbs hA) MOD", "unfolding termFSwSbImorph_def termFSwSbMorph_def"], ["proof (prove)\nusing this:\n  (ipresWlsAll h hA (fromMOD MOD) \\<and>\n   ipresCons h hA (fromMOD MOD) \\<and>\n   ipresFreshAll h hA (fromMOD MOD) \\<and>\n   ipresSwapAll h hA (fromMOD MOD)) \\<and>\n  ipresSubst h (fromMOD MOD) \\<and> ipresSubstAbs h hA (fromMOD MOD)\n  termFSwImorph h hA (fromMOD MOD) \\<and> ipresSubstAll h hA (fromMOD MOD)\n\ngoal (1 subgoal):\n 1. termFSwMorph (fromIMor h) (fromIMorAbs hA) MOD \\<and>\n    presSubstAll (fromIMor h) (fromIMorAbs hA) MOD", "by simp"], ["", "lemmas mor_fromIMor_simps =\nfromIMor_termFSwMorph fromIMor_termFSbMorph fromIMor_termFSwSbMorph"], ["", "(********************************)"], ["", "lemmas fromIMor_predicate_simps =\npresCons_fromIMor_simps\npresFreshAll_fromIMor_simps\npresSwapAll_fromIMor_simps\npresSubstAll_fromIMor_simps\nmor_fromIMor_simps"], ["", "lemmas fromIMor_simps =\nfromIMor_basic_simps fromIMor_predicate_simps"], ["", "subsection \\<open>The recursion theorem\\<close>"], ["", "text\\<open>The recursion maps:\\<close>"], ["", "definition rec where \"rec MOD \\<equiv> fromIMor (iter (fromMOD MOD))\""], ["", "definition recAbs where \"recAbs MOD \\<equiv> fromIMorAbs (iterAbs (fromMOD MOD))\""], ["", "text\\<open>Existence:\\<close>"], ["", "theorem wlsFSw_recAll_termFSwMorph:\n\"wlsFSw MOD \\<Longrightarrow> termFSwMorph (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSw MOD \\<Longrightarrow> termFSwMorph (rec MOD) (recAbs MOD) MOD", "by (simp add: rec_def recAbs_def iwlsFSw_iterAll_termFSwImorph)"], ["", "theorem wlsFSb_recAll_termFSbMorph:\n\"wlsFSb MOD \\<Longrightarrow> termFSbMorph (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSb MOD \\<Longrightarrow> termFSbMorph (rec MOD) (recAbs MOD) MOD", "by (simp add: rec_def recAbs_def iwlsFSb_iterAll_termFSbImorph)"], ["", "theorem wlsFSwSb_recAll_termFSwSbMorph:\n\"wlsFSwSb MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSwSb MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD", "by (simp add: rec_def recAbs_def iwlsFSwSb_iterAll_termFSwSbImorph)"], ["", "theorem wlsFSbSw_recAll_termFSwSbMorph:\n\"wlsFSbSw MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsFSbSw MOD \\<Longrightarrow> termFSwSbMorph (rec MOD) (recAbs MOD) MOD", "by (simp add: rec_def recAbs_def iwlsFSbSw_iterAll_termFSwSbImorph)"], ["", "text\\<open>Uniqueness:\\<close>"], ["", "lemma presCons_unique:\nassumes \"presCons f fA MOD\" and \"presCons g gA MOD\"\nshows \"(wls s X \\<longrightarrow> f X = g X) \\<and> (wlsAbs (us,s') A \\<longrightarrow> fA A = gA A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> f X = g X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> fA A = gA A)", "proof(induction rule: wls_rawInduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x. f (Var xs x) = g (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> f (Op delta inp binp) = g (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; f X = g X\\<rbrakk>\n       \\<Longrightarrow> fA (Abs xs x X) = gA (Abs xs x X)", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\n\ngoal (3 subgoals):\n 1. \\<And>xs x. f (Var xs x) = g (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> f (Op delta inp binp) = g (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; f X = g X\\<rbrakk>\n       \\<Longrightarrow> fA (Abs xs x X) = gA (Abs xs x X)", "hence \"lift f inp = lift g inp \\<and> lift fA binp = lift gA binp\""], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. lift f inp = lift g inp \\<and> lift fA binp = lift gA binp", "apply(simp add: lift_def wlsInp_iff wlsBinp_iff sameDom_def liftAll2_def fun_eq_iff split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsOpS delta \\<and>\n             (\\<forall>i. (arOf delta i = None) = (inp i = None)) \\<and>\n             (\\<forall>i v1 v2.\n                 arOf delta i = Some v1 \\<and>\n                 inp i = Some v2 \\<longrightarrow>\n                 wls v1 v2);\n     (\\<forall>i. (barOf delta i = None) = (binp i = None)) \\<and>\n     (\\<forall>i a b v2.\n         barOf delta i = Some (a, b) \\<and>\n         binp i = Some v2 \\<longrightarrow>\n         wlsAbs (a, b) v2);\n     \\<forall>i v1 v2.\n        arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n        f v2 = g v2;\n     \\<forall>i a b v2.\n        barOf delta i = Some (a, b) \\<and>\n        binp i = Some v2 \\<longrightarrow>\n        fA v2 = gA v2\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x x2.\n                          inp x = Some x2 \\<longrightarrow>\n                          f x2 = g x2) \\<and>\n                      (\\<forall>x x2.\n                          binp x = Some x2 \\<longrightarrow> fA x2 = gA x2)", "by (metis not_Some_eq old.prod.exhaust)"], ["proof (state)\nthis:\n  lift f inp = lift g inp \\<and> lift fA binp = lift gA binp\n\ngoal (3 subgoals):\n 1. \\<And>xs x. f (Var xs x) = g (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp;\n        liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> f (Op delta inp binp) = g (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; f X = g X\\<rbrakk>\n       \\<Longrightarrow> fA (Abs xs x X) = gA (Abs xs x X)", "then"], ["proof (chain)\npicking this:\n  lift f inp = lift g inp \\<and> lift fA binp = lift gA binp", "show ?case"], ["proof (prove)\nusing this:\n  lift f inp = lift g inp \\<and> lift fA binp = lift gA binp\n\ngoal (1 subgoal):\n 1. f (Op delta inp binp) = g (Op delta inp binp)", "using assms Op"], ["proof (prove)\nusing this:\n  lift f inp = lift g inp \\<and> lift fA binp = lift gA binp\n  presCons f fA MOD\n  presCons g gA MOD\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. f (Op delta inp binp) = g (Op delta inp binp)", "unfolding presCons_def presOp_def"], ["proof (prove)\nusing this:\n  lift f inp = lift g inp \\<and> lift fA binp = lift gA binp\n  presVar f MOD \\<and>\n  presAbs f fA MOD \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      f (Op delta inp binp) =\n      gOp MOD delta inp (lift f inp) binp (lift fA binp))\n  presVar g MOD \\<and>\n  presAbs g gA MOD \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      g (Op delta inp binp) =\n      gOp MOD delta inp (lift g inp) binp (lift gA binp))\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2 (\\<lambda>a b. f b = g b) (arOf delta) inp\n  liftAll2 (\\<lambda>a b. fA b = gA b) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. f (Op delta inp binp) = g (Op delta inp binp)", "by simp"], ["proof (state)\nthis:\n  f (Op delta inp binp) = g (Op delta inp binp)\n\ngoal (2 subgoals):\n 1. \\<And>xs x. f (Var xs x) = g (Var xs x)\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X; f X = g X\\<rbrakk>\n       \\<Longrightarrow> fA (Abs xs x X) = gA (Abs xs x X)", "qed(insert assms, auto simp: presVar_def presCons_def presAbs_def )"], ["", "theorem wlsFSw_recAll_unique_presCons:\nassumes \"wlsFSw MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and> \n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "using assms wlsFSw_recAll_termFSwMorph"], ["proof (prove)\nusing this:\n  wlsFSw MOD\n  presCons h hA MOD\n  wlsFSw ?MOD \\<Longrightarrow> termFSwMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "by (intro presCons_unique) (auto simp: termFSwMorph_def)"], ["", "theorem wlsFSb_recAll_unique_presCons:\nassumes \"wlsFSb MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "using assms wlsFSb_recAll_termFSbMorph"], ["proof (prove)\nusing this:\n  wlsFSb MOD\n  presCons h hA MOD\n  wlsFSb ?MOD \\<Longrightarrow> termFSbMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "by (intro presCons_unique) (auto simp: termFSbMorph_def)"], ["", "theorem wlsFSwSb_recAll_unique_presCons:\nassumes \"wlsFSwSb MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n       (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "using assms wlsFSw_recAll_unique_presCons"], ["proof (prove)\nusing this:\n  wlsFSwSb MOD\n  presCons h hA MOD\n  \\<lbrakk>wlsFSw ?MOD; presCons ?h ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> (wls ?s ?X \\<longrightarrow> ?h ?X = rec ?MOD ?X) \\<and>\n                    (wlsAbs (?us, ?s') ?A \\<longrightarrow>\n                     ?hA ?A = recAbs ?MOD ?A)\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "unfolding wlsFSwSb_def"], ["proof (prove)\nusing this:\n  wlsFSw MOD \\<and> gSubstAllPresGWlsAll MOD \\<and> gSubstCls MOD\n  presCons h hA MOD\n  \\<lbrakk>wlsFSw ?MOD; presCons ?h ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> (wls ?s ?X \\<longrightarrow> ?h ?X = rec ?MOD ?X) \\<and>\n                    (wlsAbs (?us, ?s') ?A \\<longrightarrow>\n                     ?hA ?A = recAbs ?MOD ?A)\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "by blast"], ["", "theorem wlsFSbSw_recAll_unique_presCons:\nassumes \"wlsFSbSw MOD\" and \"presCons h hA MOD\"\nshows \"(wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n      (wlsAbs (us,s') A \\<longrightarrow> hA A = recAbs MOD A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "using assms wlsFSb_recAll_unique_presCons"], ["proof (prove)\nusing this:\n  wlsFSbSw MOD\n  presCons h hA MOD\n  \\<lbrakk>wlsFSb ?MOD; presCons ?h ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> (wls ?s ?X \\<longrightarrow> ?h ?X = rec ?MOD ?X) \\<and>\n                    (wlsAbs (?us, ?s') ?A \\<longrightarrow>\n                     ?hA ?A = recAbs ?MOD ?A)\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "unfolding wlsFSbSw_def"], ["proof (prove)\nusing this:\n  wlsFSb MOD \\<and> gSwapAllPresGWlsAll MOD \\<and> gSwapCls MOD\n  presCons h hA MOD\n  \\<lbrakk>wlsFSb ?MOD; presCons ?h ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> (wls ?s ?X \\<longrightarrow> ?h ?X = rec ?MOD ?X) \\<and>\n                    (wlsAbs (?us, ?s') ?A \\<longrightarrow>\n                     ?hA ?A = recAbs ?MOD ?A)\n\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow> h X = rec MOD X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow> hA A = recAbs MOD A)", "by blast"], ["", "subsection\\<open>Models that are even ``closer\" to the term model\\<close>"], ["", "text\\<open>We describe various conditions (later referred to as ``extra clauses\"\nor ``extra conditions\")\nthat, when satisfied by models,\nyield the recursive maps\n(1) freshness-preserving and/or (2) injective and/or (3) surjective, thus bringing the\nconsidered models ``closer\" to (being isomorphic to) the term model.\nThe extreme case, when all of (1)-(3) above are ensured, means indeed isomorphism to\nthe term model -- this is in fact an abstract characterization of the term model.\\<close>"], ["", "subsubsection \\<open>Relevant predicates on models\\<close>"], ["", "text\\<open>The fresh clauses reversed\\<close>"], ["", "definition gFreshGVarRev where\n\"gFreshGVarRev MOD \\<equiv> \\<forall> xs y x.\n   gFresh MOD xs y (Var xs x) (gVar MOD xs x) \\<longrightarrow> y \\<noteq> x\""], ["", "definition gFreshGAbsRev where\n\"gFreshGAbsRev MOD \\<equiv> \\<forall> ys y xs x s X' X.\n   isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n   gFreshAbs MOD ys y (Abs xs x X') (gAbs MOD xs x X' X) \\<longrightarrow>\n   (ys = xs \\<and> y = x) \\<or> gFresh MOD ys y X' X\""], ["", "definition gFreshGOpRev where\n\"gFreshGOpRev MOD \\<equiv> \\<forall> ys y delta inp' inp binp' binp.\n   wlsInp delta inp' \\<and> gWlsInp MOD delta inp \\<and> wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n   gFresh MOD ys y (Op delta inp' binp') (gOp MOD delta inp' inp binp' binp) \\<longrightarrow>\n   gFreshInp MOD ys y inp' inp \\<and> gFreshBinp MOD ys y binp' binp\""], ["", "definition gFreshClsRev where\n\"gFreshClsRev MOD \\<equiv> gFreshGVarRev MOD \\<and> gFreshGAbsRev MOD \\<and> gFreshGOpRev MOD\""], ["", "lemmas gFreshClsRev_defs = gFreshClsRev_def\ngFreshGVarRev_def gFreshGAbsRev_def gFreshGOpRev_def"], ["", "text\\<open>Injectiveness of the construct operators\\<close>"], ["", "definition gVarInj where\n\"gVarInj MOD \\<equiv> \\<forall> xs x y. gVar MOD xs x = gVar MOD xs y \\<longrightarrow> x = y\""], ["", "definition gAbsInj where\n\"gAbsInj MOD \\<equiv> \\<forall> xs s x X' X X1' X1.\n   isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<and> wls s X1' \\<and> gWls MOD s X1 \\<and>\n   gAbs MOD xs x X' X = gAbs MOD xs x X1' X1\n   \\<longrightarrow>\n   X = X1\""], ["", "definition gOpInj where\n\"gOpInj MOD \\<equiv> \\<forall> delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n   wlsInp delta inp' \\<and> wlsBinp delta binp' \\<and> gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp \\<and>\n   wlsInp delta1 inp1' \\<and> wlsBinp delta1 binp1' \\<and> gWlsInp MOD delta1 inp1 \\<and> gWlsBinp MOD delta1 binp1 \\<and>\n   stOf delta = stOf delta1 \\<and>\n   gOp MOD delta inp' inp binp' binp = gOp MOD delta1 inp1' inp1 binp1' binp1\n   \\<longrightarrow>\n   delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1\""], ["", "definition gVarGOpInj where\n\"gVarGOpInj MOD \\<equiv> \\<forall> xs x delta inp' binp' inp binp.\n   wlsInp delta inp' \\<and> wlsBinp delta binp' \\<and> gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp \\<and>\n   asSort xs = stOf delta\n   \\<longrightarrow>\n   gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp\""], ["", "definition gConsInj where\n\"gConsInj MOD \\<equiv> gVarInj MOD \\<and> gAbsInj MOD \\<and> gOpInj MOD \\<and> gVarGOpInj MOD\""], ["", "lemmas gConsInj_defs = gConsInj_def\ngVarInj_def gAbsInj_def gOpInj_def gVarGOpInj_def"], ["", "text\\<open>Abstraction renaming for swapping\\<close>"], ["", "definition gAbsRenS where\n\"gAbsRenS MOD \\<equiv> \\<forall> xs y x s X' X.\n    isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n    fresh xs y X' \\<and> gFresh MOD xs y X' X \\<longrightarrow>\n    gAbs MOD xs y (X' #[y \\<and> x]_xs) (gSwap MOD xs y x X' X) =\n    gAbs MOD xs x X' X\""], ["", "text\\<open>Indifference to the general-recursive argument\\<close>"], ["", "text\\<open>. This ``indifference\" property says that the construct operators\nfrom the model only depend on\nthe generalized item (i.e., generalized term or abstraction) argument,\nand {\\em not} on the ``item\" (i.e., concrete term or abstraction) argument.\nIn other words, the model constructs correspond to {\\em iterative clauses},\nand not to the more general notion of ``general-recursive\" clause.\\<close>"], ["", "definition gAbsIndif where\n\"gAbsIndif MOD \\<equiv> \\<forall> xs s x X1' X2' X.\n    isInBar (xs,s) \\<and> wls s X1' \\<and> wls s X2' \\<and> gWls MOD s X \\<longrightarrow>\n    gAbs MOD xs x X1' X = gAbs MOD xs x X2' X\""], ["", "definition gOpIndif where\n\"gOpIndif MOD \\<equiv> \\<forall> delta inp1' inp2' inp binp1' binp2' binp.\n   wlsInp delta inp1' \\<and> wlsBinp delta binp1' \\<and> wlsInp delta inp2' \\<and> wlsBinp delta binp2' \\<and>\n   gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp\n   \\<longrightarrow>\n   gOp MOD delta inp1' inp binp1' binp = gOp MOD delta inp2' inp binp2' binp\""], ["", "definition gConsIndif where\n\"gConsIndif MOD \\<equiv> gOpIndif MOD \\<and> gAbsIndif MOD\""], ["", "lemmas gConsIndif_defs = gConsIndif_def gAbsIndif_def gOpIndif_def"], ["", "text\\<open>Inductiveness\\<close>"], ["", "text\\<open>. Inductiveness of a model means the satisfaction of a minimal inductive\nprinciple (``minimal\" in the sense that no fancy swapping or freshness\ninduction-friendly conditions are involved).\\<close>"], ["", "definition gInduct where\n\"gInduct MOD \\<equiv> \\<forall> phi phiAbs s X us s' A.\n   (\n    (\\<forall> xs x. phi (asSort xs) (gVar MOD xs x))\n    \\<and>\n    (\\<forall> delta inp' inp binp' binp.\n       wlsInp delta inp' \\<and> wlsBinp delta binp' \\<and> gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp \\<and>\n       liftAll2 phi (arOf delta) inp \\<and> liftAll2 phiAbs (barOf delta) binp\n       \\<longrightarrow> phi (stOf delta) (gOp MOD delta inp' inp binp' binp))\n    \\<and>\n    (\\<forall> xs s x X' X.\n        isInBar (xs,s) \\<and> wls s X' \\<and> gWls MOD s X \\<and>\n        phi s X\n        \\<longrightarrow> phiAbs (xs,s) (gAbs MOD xs x X' X))\n   )\n   \\<longrightarrow>\n   (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n   (gWlsAbs MOD (us,s') A \\<longrightarrow> phiAbs (us,s') A)\""], ["", "lemma gInduct_elim:\nassumes \"gInduct MOD\" and\nVar: \"\\<And> xs x. phi (asSort xs) (gVar MOD xs x)\" and\nOp:\n\"\\<And> delta inp' inp binp' binp.\n    \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp'; gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n     liftAll2 phi (arOf delta) inp; liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n    \\<Longrightarrow> phi (stOf delta) (gOp MOD delta inp' inp binp' binp)\" and\nAbs:\n\"\\<And> xs s x X' X.\n   \\<lbrakk>isInBar (xs,s); wls s X'; gWls MOD s X; phi s X\\<rbrakk>\n   \\<Longrightarrow> phiAbs (xs,s) (gAbs MOD xs x X' X)\"\nshows\n\"(gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n (gWlsAbs MOD (us,s') A \\<longrightarrow> phiAbs (us,s') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n    (gWlsAbs MOD (us, s') A \\<longrightarrow> phiAbs (us, s') A)", "using assms"], ["proof (prove)\nusing this:\n  gInduct MOD\n  phi (asSort ?xs194) (gVar MOD ?xs194 ?x194)\n  \\<lbrakk>wlsInp ?delta194 ?inp'194; wlsBinp ?delta194 ?binp'194;\n   gWlsInp MOD ?delta194 ?inp194; gWlsBinp MOD ?delta194 ?binp194;\n   liftAll2 phi (arOf ?delta194) ?inp194;\n   liftAll2 phiAbs (barOf ?delta194) ?binp194\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta194)\n                     (gOp MOD ?delta194 ?inp'194 ?inp194 ?binp'194 ?binp194)\n  \\<lbrakk>isInBar (?xs194, ?s194); wls ?s194 ?X'194; gWls MOD ?s194 ?X194;\n   phi ?s194 ?X194\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs194, ?s194)\n                     (gAbs MOD ?xs194 ?x194 ?X'194 ?X194)\n\ngoal (1 subgoal):\n 1. (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n    (gWlsAbs MOD (us, s') A \\<longrightarrow> phiAbs (us, s') A)", "unfolding gInduct_def"], ["proof (prove)\nusing this:\n  \\<forall>phi phiAbs s X us s' A.\n     (\\<forall>xs x. phi (asSort xs) (gVar MOD xs x)) \\<and>\n     (\\<forall>delta inp' inp binp' binp.\n         wlsInp delta inp' \\<and>\n         wlsBinp delta binp' \\<and>\n         gWlsInp MOD delta inp \\<and>\n         gWlsBinp MOD delta binp \\<and>\n         liftAll2 phi (arOf delta) inp \\<and>\n         liftAll2 phiAbs (barOf delta) binp \\<longrightarrow>\n         phi (stOf delta) (gOp MOD delta inp' inp binp' binp)) \\<and>\n     (\\<forall>xs s x X' X.\n         isInBar (xs, s) \\<and>\n         wls s X' \\<and> gWls MOD s X \\<and> phi s X \\<longrightarrow>\n         phiAbs (xs, s) (gAbs MOD xs x X' X)) \\<longrightarrow>\n     (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n     (gWlsAbs MOD (us, s') A \\<longrightarrow> phiAbs (us, s') A)\n  phi (asSort ?xs194) (gVar MOD ?xs194 ?x194)\n  \\<lbrakk>wlsInp ?delta194 ?inp'194; wlsBinp ?delta194 ?binp'194;\n   gWlsInp MOD ?delta194 ?inp194; gWlsBinp MOD ?delta194 ?binp194;\n   liftAll2 phi (arOf ?delta194) ?inp194;\n   liftAll2 phiAbs (barOf ?delta194) ?binp194\\<rbrakk>\n  \\<Longrightarrow> phi (stOf ?delta194)\n                     (gOp MOD ?delta194 ?inp'194 ?inp194 ?binp'194 ?binp194)\n  \\<lbrakk>isInBar (?xs194, ?s194); wls ?s194 ?X'194; gWls MOD ?s194 ?X194;\n   phi ?s194 ?X194\\<rbrakk>\n  \\<Longrightarrow> phiAbs (?xs194, ?s194)\n                     (gAbs MOD ?xs194 ?x194 ?X'194 ?X194)\n\ngoal (1 subgoal):\n 1. (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n    (gWlsAbs MOD (us, s') A \\<longrightarrow> phiAbs (us, s') A)", "apply(elim allE[of _ phi] allE[of _ phiAbs] allE[of _ s] allE[of _ X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x. phi (asSort xs) (gVar MOD xs x);\n     \\<And>delta inp' binp' inp binp.\n        \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n         gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n         liftAll2 phi (arOf delta) inp;\n         liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n        \\<Longrightarrow> phi (stOf delta)\n                           (gOp MOD delta inp' inp binp' binp);\n     \\<And>xs s X' X x.\n        \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s X; phi s X\\<rbrakk>\n        \\<Longrightarrow> phiAbs (xs, s) (gAbs MOD xs x X' X);\n     \\<forall>us s' A.\n        (\\<forall>xs x. phi (asSort xs) (gVar MOD xs x)) \\<and>\n        (\\<forall>delta inp' inp binp' binp.\n            wlsInp delta inp' \\<and>\n            wlsBinp delta binp' \\<and>\n            gWlsInp MOD delta inp \\<and>\n            gWlsBinp MOD delta binp \\<and>\n            liftAll2 phi (arOf delta) inp \\<and>\n            liftAll2 phiAbs (barOf delta) binp \\<longrightarrow>\n            phi (stOf delta) (gOp MOD delta inp' inp binp' binp)) \\<and>\n        (\\<forall>xs s x X' X.\n            isInBar (xs, s) \\<and>\n            wls s X' \\<and> gWls MOD s X \\<and> phi s X \\<longrightarrow>\n            phiAbs (xs, s) (gAbs MOD xs x X' X)) \\<longrightarrow>\n        (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n        (gWlsAbs MOD (us, s') A \\<longrightarrow>\n         phiAbs (us, s') A)\\<rbrakk>\n    \\<Longrightarrow> (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n                      (gWlsAbs MOD (us, s') A \\<longrightarrow>\n                       phiAbs (us, s') A)", "apply(elim allE[of _ us] allE[of _ s'] allE[of _ A])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x. phi (asSort xs) (gVar MOD xs x);\n     \\<And>delta inp' binp' inp binp.\n        \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n         gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n         liftAll2 phi (arOf delta) inp;\n         liftAll2 phiAbs (barOf delta) binp\\<rbrakk>\n        \\<Longrightarrow> phi (stOf delta)\n                           (gOp MOD delta inp' inp binp' binp);\n     \\<And>xs s X' X x.\n        \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s X; phi s X\\<rbrakk>\n        \\<Longrightarrow> phiAbs (xs, s) (gAbs MOD xs x X' X);\n     (\\<forall>xs x. phi (asSort xs) (gVar MOD xs x)) \\<and>\n     (\\<forall>delta inp' inp binp' binp.\n         wlsInp delta inp' \\<and>\n         wlsBinp delta binp' \\<and>\n         gWlsInp MOD delta inp \\<and>\n         gWlsBinp MOD delta binp \\<and>\n         liftAll2 phi (arOf delta) inp \\<and>\n         liftAll2 phiAbs (barOf delta) binp \\<longrightarrow>\n         phi (stOf delta) (gOp MOD delta inp' inp binp' binp)) \\<and>\n     (\\<forall>xs s x X' X.\n         isInBar (xs, s) \\<and>\n         wls s X' \\<and> gWls MOD s X \\<and> phi s X \\<longrightarrow>\n         phiAbs (xs, s) (gAbs MOD xs x X' X)) \\<longrightarrow>\n     (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n     (gWlsAbs MOD (us, s') A \\<longrightarrow> phiAbs (us, s') A)\\<rbrakk>\n    \\<Longrightarrow> (gWls MOD s X \\<longrightarrow> phi s X) \\<and>\n                      (gWlsAbs MOD (us, s') A \\<longrightarrow>\n                       phiAbs (us, s') A)", "by blast"], ["", "subsubsection \\<open>Relevant predicates on maps from the term model\\<close>"], ["", "text\\<open>Reflection of freshness\\<close>"], ["", "definition reflFresh where\n\"reflFresh h MOD \\<equiv> \\<forall> ys y s X.\n   wls s X \\<longrightarrow>\n   gFresh MOD ys y X (h X) \\<longrightarrow> fresh ys y X\""], ["", "definition reflFreshAbs where\n\"reflFreshAbs hA MOD \\<equiv> \\<forall> ys y us s A.\n   wlsAbs (us,s) A \\<longrightarrow>\n   gFreshAbs MOD ys y A (hA A) \\<longrightarrow> freshAbs ys y A\""], ["", "definition reflFreshAll where\n\"reflFreshAll h hA MOD \\<equiv> reflFresh h MOD \\<and> reflFreshAbs hA MOD\""], ["", "lemmas reflFreshAll_defs = reflFreshAll_def\nreflFresh_def reflFreshAbs_def"], ["", "text\\<open>Injectiveness\\<close>"], ["", "definition isInj where\n\"isInj h \\<equiv> \\<forall> s X Y.\n   wls s X \\<and> wls s Y \\<longrightarrow>\n   h X = h Y \\<longrightarrow> X = Y\""], ["", "definition isInjAbs where\n\"isInjAbs hA \\<equiv> \\<forall> us s A B.\n   wlsAbs (us,s) A \\<and> wlsAbs (us,s) B \\<longrightarrow>\n   hA A = hA B \\<longrightarrow> A = B\""], ["", "definition isInjAll where\n\"isInjAll h hA \\<equiv> isInj h \\<and> isInjAbs hA\""], ["", "lemmas isInjAll_defs = isInjAll_def\nisInj_def isInjAbs_def"], ["", "text\\<open>Surjectiveness\\<close>"], ["", "definition isSurj where\n\"isSurj h MOD \\<equiv> \\<forall> s X.\n   gWls MOD s X \\<longrightarrow>\n   (\\<exists> X'. wls s X' \\<and> h X' = X)\""], ["", "definition isSurjAbs where\n\"isSurjAbs hA MOD \\<equiv> \\<forall> us s A.\n   gWlsAbs MOD (us,s) A \\<longrightarrow>\n   (\\<exists> A'. wlsAbs (us,s) A' \\<and> hA A' = A)\""], ["", "definition isSurjAll where\n\"isSurjAll h hA MOD \\<equiv> isSurj h MOD \\<and> isSurjAbs hA MOD\""], ["", "lemmas isSurjAll_defs = isSurjAll_def\nisSurj_def isSurjAbs_def"], ["", "subsubsection\\<open>Criterion for the reflection of freshness\\<close>"], ["", "text\\<open>First an auxiliary fact, independent of the type of model:\\<close>"], ["", "lemma gFreshClsRev_recAll_reflFreshAll:\nassumes pWls: \"presWlsAll (rec MOD) (recAbs MOD) MOD\"\nand pCons: \"presCons (rec MOD) (recAbs MOD) MOD\"\nand pFresh: \"presFreshAll (rec MOD) (recAbs MOD) MOD\"\nand **: \"gFreshClsRev MOD\"\nshows \"reflFreshAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "let ?h = \"rec MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "let ?hA = \"recAbs MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "have pWlsInps[simp]:\n  \"\\<And> delta inp. wlsInp delta inp \\<Longrightarrow> gWlsInp MOD delta (lift ?h inp)\"\n  \"\\<And> delta binp. wlsBinp delta binp \\<Longrightarrow> gWlsBinp MOD delta (lift ?hA binp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "using pWls presWls_wlsInp presWls_wlsBinp"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "unfolding presWlsAll_def"], ["proof (prove)\nusing this:\n  presWls (rec MOD) MOD \\<and> presWlsAbs (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "by auto"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "{"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "fix ys y s X us s' A"], ["proof (state)\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "have\n   \"(wls s X \\<longrightarrow> gFresh MOD ys y X (rec MOD X) \\<longrightarrow> fresh ys y X) \\<and>\n    (wlsAbs (us,s') A \\<longrightarrow> gFreshAbs MOD ys y A (recAbs MOD A) \\<longrightarrow> freshAbs ys y A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow>\n     gFresh MOD ys y X (rec MOD X) \\<longrightarrow> fresh ys y X) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow>\n     gFreshAbs MOD ys y A (recAbs MOD A) \\<longrightarrow> freshAbs ys y A)", "proof(induction rule: wls_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       gFresh MOD ys y (Var xs x) (rec MOD (Var xs x)) \\<longrightarrow>\n       fresh ys y (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n             freshAbs ys y b)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> gFresh MOD ys y (Op delta inp binp)\n                          (rec MOD (Op delta inp binp)) \\<longrightarrow>\n                         fresh ys y (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       gFresh MOD ys y (Var xs x) (rec MOD (Var xs x)) \\<longrightarrow>\n       fresh ys y (Var xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n             freshAbs ys y b)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> gFresh MOD ys y (Op delta inp binp)\n                          (rec MOD (Op delta inp binp)) \\<longrightarrow>\n                         fresh ys y (Op delta inp binp)\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Var xs x) (rec MOD (Var xs x)) \\<longrightarrow>\n    fresh ys y (Var xs x)", "using assms"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  gFreshClsRev MOD\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Var xs x) (rec MOD (Var xs x)) \\<longrightarrow>\n    fresh ys y (Var xs x)", "by (fastforce simp: presWlsAll_defs presCons_defs gFreshClsRev_def gFreshGVarRev_def)"], ["proof (state)\nthis:\n  gFresh MOD ys y (Var xs x) (rec MOD (Var xs x)) \\<longrightarrow>\n  fresh ys y (Var xs x)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n             freshAbs ys y b)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> gFresh MOD ys y (Op delta inp binp)\n                          (rec MOD (Op delta inp binp)) \\<longrightarrow>\n                         fresh ys y (Op delta inp binp)\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n             freshAbs ys y b)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> gFresh MOD ys y (Op delta inp binp)\n                          (rec MOD (Op delta inp binp)) \\<longrightarrow>\n                         fresh ys y (Op delta inp binp)\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n             freshAbs ys y b)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> gFresh MOD ys y (Op delta inp binp)\n                          (rec MOD (Op delta inp binp)) \\<longrightarrow>\n                         fresh ys y (Op delta inp binp)\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<longrightarrow>\n    fresh ys y (Op delta inp binp)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "let ?ar = \"arOf delta\""], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "let ?bar = \"barOf delta\""], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "let ?st = \"stOf delta\""], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "let ?linp = \"lift ?h inp\""], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "let ?lbinp = \"lift ?hA binp\""], ["proof (state)\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "assume \"gFresh MOD ys y (Op delta inp binp) (rec MOD (Op delta inp binp))\""], ["proof (state)\nthis:\n  gFresh MOD ys y (Op delta inp binp) (rec MOD (Op delta inp binp))\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "hence \"gFresh MOD ys y (Op delta inp binp) (gOp MOD delta inp ?linp binp ?lbinp)\""], ["proof (prove)\nusing this:\n  gFresh MOD ys y (Op delta inp binp) (rec MOD (Op delta inp binp))\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))", "using assms Op"], ["proof (prove)\nusing this:\n  gFresh MOD ys y (Op delta inp binp) (rec MOD (Op delta inp binp))\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  gFreshClsRev MOD\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))", "by (simp add: presCons_def presOp_def)"], ["proof (state)\nthis:\n  gFresh MOD ys y (Op delta inp binp)\n   (gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "hence \"gFreshInp MOD ys y inp ?linp \\<and> gFreshBinp MOD ys y binp ?lbinp\""], ["proof (prove)\nusing this:\n  gFresh MOD ys y (Op delta inp binp)\n   (gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. gFreshInp MOD ys y inp (lift (rec MOD) inp) \\<and>\n    gFreshBinp MOD ys y binp (lift (recAbs MOD) binp)", "using Op **"], ["proof (prove)\nusing this:\n  gFresh MOD ys y (Op delta inp binp)\n   (gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n  gFreshClsRev MOD\n\ngoal (1 subgoal):\n 1. gFreshInp MOD ys y inp (lift (rec MOD) inp) \\<and>\n    gFreshBinp MOD ys y binp (lift (recAbs MOD) binp)", "by (force simp:  gFreshClsRev_def gFreshGOpRev_def)"], ["proof (state)\nthis:\n  gFreshInp MOD ys y inp (lift (rec MOD) inp) \\<and>\n  gFreshBinp MOD ys y binp (lift (recAbs MOD) binp)\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "with Op"], ["proof (chain)\npicking this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n  gFreshInp MOD ys y inp (lift (rec MOD) inp) \\<and>\n  gFreshBinp MOD ys y binp (lift (recAbs MOD) binp)", "have freshInp: \"freshInp ys y inp \\<and> freshBinp ys y binp\""], ["proof (prove)\nusing this:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n  gFreshInp MOD ys y inp (lift (rec MOD) inp) \\<and>\n  gFreshBinp MOD ys y binp (lift (recAbs MOD) binp)\n\ngoal (1 subgoal):\n 1. freshInp ys y inp \\<and> freshBinp ys y binp", "by (simp add: freshInp_def freshBinp_def liftAll_def gFreshInp_def gFreshBinp_def liftAll2_def lift_def \n     sameDom_def wlsInp_iff wlsBinp_iff split: option.splits) (metis eq_snd_iff not_Some_eq)"], ["proof (state)\nthis:\n  freshInp ys y inp \\<and> freshBinp ys y binp\n\ngoal (1 subgoal):\n 1. gFresh MOD ys y (Op delta inp binp)\n     (rec MOD (Op delta inp binp)) \\<Longrightarrow>\n    fresh ys y (Op delta inp binp)", "thus \"fresh ys y (Op delta inp binp)\""], ["proof (prove)\nusing this:\n  freshInp ys y inp \\<and> freshBinp ys y binp\n\ngoal (1 subgoal):\n 1. fresh ys y (Op delta inp binp)", "using Op"], ["proof (prove)\nusing this:\n  freshInp ys y inp \\<and> freshBinp ys y binp\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       gFresh MOD ys y b (rec MOD b) \\<longrightarrow> fresh ys y b)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       gFreshAbs MOD ys y b (recAbs MOD b) \\<longrightarrow>\n       freshAbs ys y b)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. fresh ys y (Op delta inp binp)", "by auto"], ["proof (state)\nthis:\n  fresh ys y (Op delta inp binp)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gFresh MOD ys y (Op delta inp binp)\n   (rec MOD (Op delta inp binp)) \\<longrightarrow>\n  fresh ys y (Op delta inp binp)\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "case (Abs s xs x X)"], ["proof (state)\nthis:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow> fresh ys y Y;\n        \\<And>ysa y1 y2.\n           gFresh MOD ys y (X #[y1 // y2]_ysa)\n            (rec MOD (X #[y1 // y2]_ysa)) \\<longrightarrow>\n           fresh ys y (X #[y1 // y2]_ysa);\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> gFresh MOD ys y Y (rec MOD Y) \\<longrightarrow>\n                             fresh ys y Y\\<rbrakk>\n       \\<Longrightarrow> gFreshAbs MOD ys y (Abs xs x X)\n                          (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n                         freshAbs ys y (Abs xs x X)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n    freshAbs ys y (Abs xs x X)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "have hX: \"gWls MOD s (?h X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "using Abs pWls"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "unfolding presWlsAll_defs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  (\\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (rec MOD X)) \\<and>\n  (\\<forall>us s A.\n      wlsAbs (us, s) A \\<longrightarrow> gWlsAbs MOD (us, s) (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (rec MOD X)\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "assume \"gFreshAbs MOD ys y (Abs xs x X) (recAbs MOD (Abs xs x X))\""], ["proof (state)\nthis:\n  gFreshAbs MOD ys y (Abs xs x X) (recAbs MOD (Abs xs x X))\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "hence \"gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\""], ["proof (prove)\nusing this:\n  gFreshAbs MOD ys y (Abs xs x X) (recAbs MOD (Abs xs x X))\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))", "using Abs"], ["proof (prove)\nusing this:\n  gFreshAbs MOD ys y (Abs xs x X) (recAbs MOD (Abs xs x X))\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))", "by (metis pCons presAbs_def presCons_def)"], ["proof (state)\nthis:\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "moreover"], ["proof (state)\nthis:\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "have \"?hA (Abs xs x X) = gAbs MOD xs x X (?h X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)", "using Abs pCons"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)", "by blast"], ["proof (state)\nthis:\n  recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "ultimately"], ["proof (chain)\npicking this:\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n  recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)", "have 1: \"gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (?h X))\""], ["proof (prove)\nusing this:\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n  recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))", "by simp"], ["proof (state)\nthis:\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. gFreshAbs MOD ys y (Abs xs x X)\n     (recAbs MOD (Abs xs x X)) \\<Longrightarrow>\n    freshAbs ys y (Abs xs x X)", "show \"freshAbs ys y (Abs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X)", "using assms hX Abs **"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  gFreshClsRev MOD\n  gWls MOD s (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  gFreshClsRev MOD\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X)", "unfolding gFreshClsRev_def gFreshGAbsRev_def"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  gFreshGVarRev MOD \\<and>\n  (\\<forall>ys y xs x s X' X.\n      isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n      gFreshAbs MOD ys y (Abs xs x X')\n       (gAbs MOD xs x X' X) \\<longrightarrow>\n      ys = xs \\<and> y = x \\<or> gFresh MOD ys y X' X) \\<and>\n  gFreshGOpRev MOD\n  gWls MOD s (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  gFreshGVarRev MOD \\<and>\n  (\\<forall>ys y xs x s X' X.\n      isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n      gFreshAbs MOD ys y (Abs xs x X')\n       (gAbs MOD xs x X' X) \\<longrightarrow>\n      ys = xs \\<and> y = x \\<or> gFresh MOD ys y X' X) \\<and>\n  gFreshGOpRev MOD\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X)", "using 1"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  gFreshGVarRev MOD \\<and>\n  (\\<forall>ys y xs x s X' X.\n      isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n      gFreshAbs MOD ys y (Abs xs x X')\n       (gAbs MOD xs x X' X) \\<longrightarrow>\n      ys = xs \\<and> y = x \\<or> gFresh MOD ys y X' X) \\<and>\n  gFreshGOpRev MOD\n  gWls MOD s (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow> fresh ys y ?Y203\n  gFresh MOD ys y (X #[?y1.203 // ?y2.203]_?ys203)\n   (rec MOD (X #[?y1.203 // ?y2.203]_?ys203)) \\<longrightarrow>\n  fresh ys y (X #[?y1.203 // ?y2.203]_?ys203)\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> gFresh MOD ys y ?Y203 (rec MOD ?Y203) \\<longrightarrow>\n                    fresh ys y ?Y203\n  gFreshGVarRev MOD \\<and>\n  (\\<forall>ys y xs x s X' X.\n      isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n      gFreshAbs MOD ys y (Abs xs x X')\n       (gAbs MOD xs x X' X) \\<longrightarrow>\n      ys = xs \\<and> y = x \\<or> gFresh MOD ys y X' X) \\<and>\n  gFreshGOpRev MOD\n  gFreshAbs MOD ys y (Abs xs x X) (gAbs MOD xs x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. freshAbs ys y (Abs xs x X)", "by fastforce"], ["proof (state)\nthis:\n  freshAbs ys y (Abs xs x X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gFreshAbs MOD ys y (Abs xs x X)\n   (recAbs MOD (Abs xs x X)) \\<longrightarrow>\n  freshAbs ys y (Abs xs x X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (wls s X \\<longrightarrow>\n   gFresh MOD ys y X (rec MOD X) \\<longrightarrow> fresh ys y X) \\<and>\n  (wlsAbs (us, s') A \\<longrightarrow>\n   gFreshAbs MOD ys y A (recAbs MOD A) \\<longrightarrow> freshAbs ys y A)\n\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "}"], ["proof (state)\nthis:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   gFresh MOD ?ys205 ?y205 ?X205 (rec MOD ?X205) \\<longrightarrow>\n   fresh ?ys205 ?y205 ?X205) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   gFreshAbs MOD ?ys205 ?y205 ?A205 (recAbs MOD ?A205) \\<longrightarrow>\n   freshAbs ?ys205 ?y205 ?A205)\n\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "thus ?thesis"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   gFresh MOD ?ys205 ?y205 ?X205 (rec MOD ?X205) \\<longrightarrow>\n   fresh ?ys205 ?y205 ?X205) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   gFreshAbs MOD ?ys205 ?y205 ?A205 (recAbs MOD ?A205) \\<longrightarrow>\n   freshAbs ?ys205 ?y205 ?A205)\n\ngoal (1 subgoal):\n 1. reflFreshAll (rec MOD) (recAbs MOD) MOD", "unfolding reflFreshAll_defs"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   gFresh MOD ?ys205 ?y205 ?X205 (rec MOD ?X205) \\<longrightarrow>\n   fresh ?ys205 ?y205 ?X205) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   gFreshAbs MOD ?ys205 ?y205 ?A205 (recAbs MOD ?A205) \\<longrightarrow>\n   freshAbs ?ys205 ?y205 ?A205)\n\ngoal (1 subgoal):\n 1. (\\<forall>ys y s X.\n        wls s X \\<longrightarrow>\n        gFresh MOD ys y X (rec MOD X) \\<longrightarrow> fresh ys y X) \\<and>\n    (\\<forall>ys y us s A.\n        wlsAbs (us, s) A \\<longrightarrow>\n        gFreshAbs MOD ys y A (recAbs MOD A) \\<longrightarrow>\n        freshAbs ys y A)", "by blast"], ["proof (state)\nthis:\n  reflFreshAll (rec MOD) (recAbs MOD) MOD\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>For fresh-swap models\\<close>"], ["", "theorem wlsFSw_recAll_reflFreshAll:\n\"wlsFSw MOD \\<Longrightarrow> gFreshClsRev MOD \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSw MOD; gFreshClsRev MOD\\<rbrakk>\n    \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD", "using wlsFSw_recAll_termFSwMorph"], ["proof (prove)\nusing this:\n  wlsFSw ?MOD \\<Longrightarrow> termFSwMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSw MOD; gFreshClsRev MOD\\<rbrakk>\n    \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD", "by (auto simp: termFSwMorph_def intro: gFreshClsRev_recAll_reflFreshAll)"], ["", "text\\<open>For fresh-subst models\\<close>"], ["", "theorem wlsFSb_recAll_reflFreshAll:\n\"wlsFSb MOD \\<Longrightarrow> gFreshClsRev MOD \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSb MOD; gFreshClsRev MOD\\<rbrakk>\n    \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD", "using wlsFSb_recAll_termFSbMorph"], ["proof (prove)\nusing this:\n  wlsFSb ?MOD \\<Longrightarrow> termFSbMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSb MOD; gFreshClsRev MOD\\<rbrakk>\n    \\<Longrightarrow> reflFreshAll (rec MOD) (recAbs MOD) MOD", "by (auto simp: termFSbMorph_def intro: gFreshClsRev_recAll_reflFreshAll)"], ["", "(* Note: Here and below: No need for corresponding results for FSwSb and FSbSw models, as they\nwould follow at once from the above. *)"], ["", "subsubsection\\<open>Criterion for the injectiveness of the recursive map\\<close>"], ["", "text\\<open>For fresh-swap models\\<close>"], ["", "theorem wlsFSw_recAll_isInjAll:\nassumes *: \"wlsFSw MOD\"  \"gAbsRenS MOD\" and **: \"gConsInj MOD\"\nshows \"isInjAll (rec MOD) (recAbs MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "let ?h = \"rec MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "let ?hA = \"recAbs MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "have 1: \"termFSwMorph ?h ?hA MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. termFSwMorph (rec MOD) (recAbs MOD) MOD", "using * wlsFSw_recAll_termFSwMorph"], ["proof (prove)\nusing this:\n  wlsFSw MOD\n  gAbsRenS MOD\n  wlsFSw ?MOD \\<Longrightarrow> termFSwMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. termFSwMorph (rec MOD) (recAbs MOD) MOD", "by auto"], ["proof (state)\nthis:\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "hence pWls: \"presWlsAll ?h ?hA MOD\"\n  and pCons: \"presCons ?h ?hA MOD\"\n  and pFresh: \"presFreshAll ?h ?hA MOD\"\n  and pSwap: \"presSwapAll ?h ?hA MOD\""], ["proof (prove)\nusing this:\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (presWlsAll (rec MOD) (recAbs MOD) MOD &&&\n     presCons (rec MOD) (recAbs MOD) MOD) &&&\n    presFreshAll (rec MOD) (recAbs MOD) MOD &&&\n    presSwapAll (rec MOD) (recAbs MOD) MOD", "unfolding termFSwMorph_def"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD \\<and>\n  presCons (rec MOD) (recAbs MOD) MOD \\<and>\n  presFreshAll (rec MOD) (recAbs MOD) MOD \\<and>\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (presWlsAll (rec MOD) (recAbs MOD) MOD &&&\n     presCons (rec MOD) (recAbs MOD) MOD) &&&\n    presFreshAll (rec MOD) (recAbs MOD) MOD &&&\n    presSwapAll (rec MOD) (recAbs MOD) MOD", "by auto"], ["proof (state)\nthis:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "hence pWlsInps[simp]:\n  \"\\<And> delta inp. wlsInp delta inp \\<Longrightarrow> gWlsInp MOD delta (lift ?h inp)\"\n  \"\\<And> delta binp. wlsBinp delta binp \\<Longrightarrow> gWlsBinp MOD delta (lift ?hA binp)\""], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "using presWls_wlsInp presWls_wlsBinp"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "unfolding presWlsAll_def"], ["proof (prove)\nusing this:\n  presWls (rec MOD) MOD \\<and> presWlsAbs (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "by auto"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "{"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "fix s X us s' A"], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "have\n   \"(wls s X \\<longrightarrow> (\\<forall> Y. wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow> X = Y)) \\<and>\n    (wlsAbs (us,s') A \\<longrightarrow> (\\<forall> B. wlsAbs (us,s') B \\<and> recAbs MOD A = recAbs MOD B \\<longrightarrow> A = B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow>\n     (\\<forall>Y.\n         wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow>\n         X = Y)) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs (us, s') B \\<and>\n         recAbs MOD A = recAbs MOD B \\<longrightarrow>\n         A = B))", "proof (induction rule: wls_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          wls (asSort xs) Y \\<and>\n          rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n          Var xs x = Y\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          wls (asSort xs) Y \\<and>\n          rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n          Var xs x = Y\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       wls (asSort xs) Y \\<and>\n       rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n       Var xs x = Y", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "assume eq: \"rec MOD (Var xs x) = rec MOD Y\" and Y: \"wls (asSort xs) Y\""], ["proof (state)\nthis:\n  rec MOD (Var xs x) = rec MOD Y\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "thus \"Var xs x = Y\""], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = rec MOD Y\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "fix ys y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "assume Y_def: \"Y = Var ys y\" and \"asSort ys = asSort xs\""], ["proof (state)\nthis:\n  Y = Var ys y\n  asSort ys = asSort xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "hence ys_def: \"ys = xs\""], ["proof (prove)\nusing this:\n  Y = Var ys y\n  asSort ys = asSort xs\n\ngoal (1 subgoal):\n 1. ys = xs", "by simp"], ["proof (state)\nthis:\n  ys = xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "have rec_y_def: \"rec MOD (Var ys y) = gVar MOD ys y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "using pCons"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "by simp"], ["proof (state)\nthis:\n  rec MOD (Var ys y) = gVar MOD ys y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x = Y", "using eq ** 1"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = rec MOD Y\n  gConsInj MOD\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "unfolding Y_def rec_y_def gConsInj_def gVarInj_def"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = gVar MOD ys y\n  (\\<forall>xs x y.\n      gVar MOD xs x = gVar MOD xs y \\<longrightarrow> x = y) \\<and>\n  gAbsInj MOD \\<and> gOpInj MOD \\<and> gVarGOpInj MOD\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Var ys y", "unfolding ys_def"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = gVar MOD xs y\n  (\\<forall>xs x y.\n      gVar MOD xs x = gVar MOD xs y \\<longrightarrow> x = y) \\<and>\n  gAbsInj MOD \\<and> gOpInj MOD \\<and> gVarGOpInj MOD\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Var xs y", "by (simp add: termFSwMorph_defs)"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "{"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "fix delta1 inp1 binp1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "assume inp1s: \"wlsInp delta1 inp1\"  \"wlsBinp delta1 binp1\"\n          and Y_def: \"Y = Op delta1 inp1 binp1\" and st: \"stOf delta1 = asSort xs\""], ["proof (state)\nthis:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "hence rec_Op_def:\n          \"rec MOD (Op delta1 inp1 binp1) =\n           gOp MOD delta1 inp1 (lift ?h inp1) binp1 (lift ?hA binp1)\""], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "using pCons"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "by simp"], ["proof (state)\nthis:\n  rec MOD (Op delta1 inp1 binp1) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x = Y", "using eq **"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = rec MOD Y\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "unfolding Y_def rec_Op_def gConsInj_def gVarGOpInj_def"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n\ngoal (1 subgoal):\n 1. Var xs x = Op delta1 inp1 binp1", "using inp1s st 1"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  stOf delta1 = asSort xs\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Op delta1 inp1 binp1", "by (simp add: termFSwMorph_defs)"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rec MOD (Var xs x) = rec MOD Y; wls (asSort xs) Y\\<rbrakk>\n    \\<Longrightarrow> Var xs x = Y", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "using wls_nchotomy[of \"asSort xs\" Y] Y"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  wls (asSort xs) Y \\<Longrightarrow>\n  (\\<exists>xsa x. asSort xsa = asSort xs \\<and> Y = Var xsa x) \\<or>\n  (\\<exists>delta inp binp.\n      stOf delta = asSort xs \\<and>\n      wlsInp delta inp \\<and>\n      wlsBinp delta binp \\<and> Y = Op delta inp binp)\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "by blast"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y.\n     wls (asSort xs) Y \\<and>\n     rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n     Var xs x = Y\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       wls (stOf delta) Y \\<and>\n       rec MOD (Op delta inp binp) = rec MOD Y \\<longrightarrow>\n       Op delta inp binp = Y", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "assume Y: \"wls (stOf delta) Y\"\n       and \"rec MOD (Op delta inp binp) = rec MOD Y\""], ["proof (state)\nthis:\n  wls (stOf delta) Y\n  rec MOD (Op delta inp binp) = rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "hence eq: \"gOp MOD delta inp (lift ?h inp) binp (lift ?hA binp) = ?h Y\""], ["proof (prove)\nusing this:\n  wls (stOf delta) Y\n  rec MOD (Op delta inp binp) = rec MOD Y\n\ngoal (1 subgoal):\n 1. gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n    rec MOD Y", "using 1 Op"], ["proof (prove)\nusing this:\n  wls (stOf delta) Y\n  rec MOD (Op delta inp binp) = rec MOD Y\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n    rec MOD Y", "by (simp add: termFSwMorph_defs)"], ["proof (state)\nthis:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "show \"Op delta inp binp = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "fix ys y"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "assume Y_def: \"Y = Var ys y\" and st: \"asSort ys = stOf delta\""], ["proof (state)\nthis:\n  Y = Var ys y\n  asSort ys = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have rec_y_def: \"rec MOD (Var ys y) = gVar MOD ys y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "using pCons"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "by simp"], ["proof (state)\nthis:\n  rec MOD (Var ys y) = gVar MOD ys y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "using eq[THEN sym] **"], ["proof (prove)\nusing this:\n  rec MOD Y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "unfolding Y_def rec_y_def gConsInj_def gVarGOpInj_def"], ["proof (prove)\nusing this:\n  gVar MOD ys y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Var ys y", "using Op st"], ["proof (prove)\nusing this:\n  gVar MOD ys y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n  asSort ys = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Var ys y", "by simp"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "{"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "fix delta1 inp1 binp1"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "assume inp1s: \"wlsInp delta1 inp1\"  \"wlsBinp delta1 binp1\"\n          and Y_def: \"Y = Op delta1 inp1 binp1\" and st: \"stOf delta1 = stOf delta\""], ["proof (state)\nthis:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "hence rec_Op_def:\n          \"rec MOD (Op delta1 inp1 binp1) =\n           gOp MOD delta1 inp1 (lift ?h inp1) binp1 (lift ?hA binp1)\""], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "using pCons"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "by simp"], ["proof (state)\nthis:\n  rec MOD (Op delta1 inp1 binp1) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 0: \"delta = delta1 \\<and> lift ?h inp = lift ?h inp1 \\<and> lift ?hA binp = lift ?hA binp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "using eq **"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  rec MOD Y\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "unfolding Y_def rec_Op_def gConsInj_def gOpInj_def"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  (\\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      wlsInp delta1 inp1' \\<and>\n      wlsBinp delta1 binp1' \\<and>\n      gWlsInp MOD delta1 inp1 \\<and>\n      gWlsBinp MOD delta1 binp1 \\<and>\n      stOf delta = stOf delta1 \\<and>\n      gOp MOD delta inp' inp binp' binp =\n      gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n      delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1) \\<and>\n  gVarGOpInj MOD\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "using Op inp1s st"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  (\\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      wlsInp delta1 inp1' \\<and>\n      wlsBinp delta1 binp1' \\<and>\n      gWlsInp MOD delta1 inp1 \\<and>\n      gWlsBinp MOD delta1 binp1 \\<and>\n      stOf delta = stOf delta1 \\<and>\n      gOp MOD delta inp' inp binp' binp =\n      gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n      delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1) \\<and>\n  gVarGOpInj MOD\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD;\n     \\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1;\n     gVarGOpInj MOD\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply(erule allE[of _ delta])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD; gVarGOpInj MOD;\n     \\<forall>delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply(erule allE[of _ delta1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD; gVarGOpInj MOD;\n     \\<forall>inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "by force"], ["proof (state)\nthis:\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "hence delta1_def: \"delta1 = delta\""], ["proof (prove)\nusing this:\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. delta1 = delta", "by simp"], ["proof (state)\nthis:\n  delta1 = delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 1: \"inp = inp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp = inp1", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. inp x = inp1 x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. inp x = inp1 x", "show \"inp i = inp1 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp i = inp1 i", "proof(cases \"inp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "case None"], ["proof (state)\nthis:\n  inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp i = None\""], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp i = None", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  lift (rec MOD) inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp1 i = None\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = None", "using 0"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = None\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = None", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp1 i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = None\n\ngoal (1 subgoal):\n 1. inp i = inp1 i", "unfolding None"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = None\n\ngoal (1 subgoal):\n 1. None = inp1 i", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "case (Some X)"], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp i = Some (?h X)\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp i = Some (rec MOD X)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (rec MOD v)) =\n    Some (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp1 i = Some (?h X)\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = Some (rec MOD X)", "using 0"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = Some (rec MOD X)\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = Some (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp1 i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "then"], ["proof (chain)\npicking this:\n  lift (rec MOD) inp1 i = Some (rec MOD X)", "obtain Y where inp1_i: \"inp1 i = Some Y\" and hXY: \"?h X = ?h Y\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>inp1 i = Some Y; rec MOD X = rec MOD Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case inp1 i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (rec MOD v)) =\n  Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>inp1 i = Some Y; rec MOD X = rec MOD Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"inp1 i\") auto"], ["proof (state)\nthis:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "then"], ["proof (chain)\npicking this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y", "obtain s where ar_i: \"arOf delta i = Some s\""], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inp1s"], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding delta1_def wlsInp_iff sameDom_def"], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n  wlsOpS delta \\<and>\n  (\\<forall>i. (arOf delta i = None) = (inp1 i = None)) \\<and>\n  liftAll2 wls (arOf delta) inp1\n  wlsBinp delta binp1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"arOf delta i\") auto"], ["proof (state)\nthis:\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence Y: \"wls s Y\""], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. wls s Y", "using inp1s inp1_i"], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  inp1 i = Some Y\n\ngoal (1 subgoal):\n 1. wls s Y", "unfolding delta1_def wlsInp_iff liftAll2_def"], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n  wlsOpS delta \\<and>\n  sameDom (arOf delta) inp1 \\<and>\n  (\\<forall>i v1 v2.\n      arOf delta i = Some v1 \\<and> inp1 i = Some v2 \\<longrightarrow>\n      wls v1 v2)\n  wlsBinp delta binp1\n  inp1 i = Some Y\n\ngoal (1 subgoal):\n 1. wls s Y", "by auto"], ["proof (state)\nthis:\n  wls s Y\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. inp i = inp1 i", "unfolding Some inp1_i"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "using ar_i Some hXY Op.IH"], ["proof (prove)\nusing this:\n  wls s Y\n  arOf delta i = Some s\n  inp i = Some X\n  rec MOD X = rec MOD Y\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  wls s Y\n  arOf delta i = Some s\n  inp i = Some X\n  rec MOD X = rec MOD Y\n  wlsInp delta inp\n  wlsBinp delta binp\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<forall>Y.\n         wls v1 Y \\<and> rec MOD v2 = rec MOD Y \\<longrightarrow> v2 = Y)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs v1 B \\<and> recAbs MOD v2 = recAbs MOD B \\<longrightarrow>\n         v2 = B)\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "by auto"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp = inp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 2: \"binp = binp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp = binp1", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. binp x = binp1 x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. binp x = binp1 x", "show \"binp i = binp1 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp i = binp1 i", "proof(cases \"binp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "case None"], ["proof (state)\nthis:\n  binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp i = None\""], ["proof (prove)\nusing this:\n  binp i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp i = None", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp1 i = None\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = None", "using 0"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = None\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = None", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (1 subgoal):\n 1. binp i = binp1 i", "unfolding None"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (1 subgoal):\n 1. None = binp1 i", "by (simp add: lift_None)"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "case (Some A)"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp i = Some (?hA A)\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp i = Some (recAbs MOD A)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. (case binp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (recAbs MOD v)) =\n    Some (recAbs MOD A)", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp1 i = Some (?hA A)\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "using 0"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "then"], ["proof (chain)\npicking this:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "obtain B where binp1_i: \"binp1 i = Some B\" and hAB: \"?hA A = ?hA B\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>binp1 i = Some B; recAbs MOD A = recAbs MOD B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case binp1 i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (recAbs MOD v)) =\n  Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>binp1 i = Some B; recAbs MOD A = recAbs MOD B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"binp1 i\") auto"], ["proof (state)\nthis:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "then"], ["proof (chain)\npicking this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B", "obtain us s where bar_i: \"barOf delta i = Some (us,s)\""], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using inp1s"], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding delta1_def wlsBinp_iff sameDom_def"], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp1\n  wlsOpS delta \\<and>\n  (\\<forall>i. (barOf delta i = None) = (binp1 i = None)) \\<and>\n  liftAll2 wlsAbs (barOf delta) binp1\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"barOf delta i\") auto"], ["proof (state)\nthis:\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence B: \"wlsAbs (us,s) B\""], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "using inp1s binp1_i"], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  binp1 i = Some B\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "unfolding delta1_def wlsBinp_iff liftAll2_def"], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n  wlsInp delta inp1\n  wlsOpS delta \\<and>\n  sameDom (barOf delta) binp1 \\<and>\n  (\\<forall>i v1 v2.\n      barOf delta i = Some v1 \\<and> binp1 i = Some v2 \\<longrightarrow>\n      wlsAbs v1 v2)\n  binp1 i = Some B\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "by auto"], ["proof (state)\nthis:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. binp i = binp1 i", "unfolding Some binp1_i"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. Some A = Some B", "using bar_i Some hAB Op.IH"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n  barOf delta i = Some (us, s)\n  binp i = Some A\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. Some A = Some B", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n  barOf delta i = Some (us, s)\n  binp i = Some A\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp\n  wlsBinp delta binp\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<forall>Y.\n         wls v1 Y \\<and> rec MOD v2 = rec MOD Y \\<longrightarrow> v2 = Y)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs v1 B \\<and> recAbs MOD v2 = recAbs MOD B \\<longrightarrow>\n         v2 = B)\n\ngoal (1 subgoal):\n 1. Some A = Some B", "by fastforce"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binp = binp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "unfolding Y_def delta1_def 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp1 binp1 = Op delta inp1 binp1", "by simp"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "using wls_nchotomy[of \"stOf delta\" Y] Y"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  wls (stOf delta) Y \\<Longrightarrow>\n  (\\<exists>xs x. asSort xs = stOf delta \\<and> Y = Var xs x) \\<or>\n  (\\<exists>deltaa inp binp.\n      stOf deltaa = stOf delta \\<and>\n      wlsInp deltaa inp \\<and>\n      wlsBinp deltaa binp \\<and> Y = Op deltaa inp binp)\n  wls (stOf delta) Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "by blast"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y.\n     wls (stOf delta) Y \\<and>\n     rec MOD (Op delta inp binp) = rec MOD Y \\<longrightarrow>\n     Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Abs s xs x X)"], ["proof (state)\nthis:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B.\n       wlsAbs (xs, s) B \\<and>\n       recAbs MOD (Abs xs x X) = recAbs MOD B \\<longrightarrow>\n       Abs xs x X = B", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "assume B: \"wlsAbs (xs,s) B\" and \"recAbs MOD (Abs xs x X) = recAbs MOD B\""], ["proof (state)\nthis:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "hence eq: \"gAbs MOD xs x X (rec MOD X) = ?hA B\""], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "using 1 Abs"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n  termFSwMorph (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "by (simp add: termFSwMorph_defs)"], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "hence hX: \"gWls MOD s (?h X)\""], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "using pWls Abs"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "unfolding presWlsAll_defs"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n  (\\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (rec MOD X)) \\<and>\n  (\\<forall>us s A.\n      wlsAbs (us, s) A \\<longrightarrow> gWlsAbs MOD (us, s) (recAbs MOD A))\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "show \"Abs xs x X = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?P = \"ParS\n          (\\<lambda> xs'. [])\n          (\\<lambda> s'. if s' = s then [X] else [])\n          (\\<lambda> us_s. [])\n          []\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have P: \"wlsPar ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsPar\n     (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n       (\\<lambda>us_s. []) [])", "using Abs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. wlsPar\n     (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n       (\\<lambda>us_s. []) [])", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. (\\<forall>s.\n        \\<forall>X\\<in>termsOfS\n                        (ParS (\\<lambda>xs'. [])\n                          (\\<lambda>s'. if s' = s then [X] else [])\n                          (\\<lambda>us_s. []) [])\n                        s.\n           wls s X) \\<and>\n    (\\<forall>xs s.\n        \\<forall>A\\<in>absOfS\n                        (ParS (\\<lambda>xs'. [])\n                          (\\<lambda>s'. if s' = s then [X] else [])\n                          (\\<lambda>us_s. []) [])\n                        (xs, s).\n           wlsAbs (xs, s) A) \\<and>\n    Ball\n     (envsOfS\n       (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n         (\\<lambda>us_s. []) []))\n     wlsEnv", "by simp"], ["proof (state)\nthis:\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "{"], ["proof (state)\nthis:\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "fix y Y"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "assume Y: \"wls s Y\" and B_def: \"B = Abs xs y Y\""], ["proof (state)\nthis:\n  wls s Y\n  B = Abs xs y Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence hY: \"gWls MOD s (?h Y)\""], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "using pWls"], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "unfolding presWlsAll_defs"], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n  (\\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (rec MOD X)) \\<and>\n  (\\<forall>us s A.\n      wlsAbs (us, s) A \\<longrightarrow> gWlsAbs MOD (us, s) (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?Xsw = \"X #[y \\<and> x]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?hXsw = \"gSwap MOD xs y x X (?h X)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have hXsw: \"gWls MOD s ?hXsw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gWls MOD s (gSwap MOD xs y x X (rec MOD X))", "using Abs hX"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSwap MOD xs y x X (rec MOD X))", "using *"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  wlsFSw MOD\n  gAbsRenS MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSwap MOD xs y x X (rec MOD X))", "unfolding wlsFSw_def gSwapAllPresGWlsAll_defs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWlsAllDisj MOD \\<and>\n  gWlsAbsIsInBar MOD \\<and>\n  gConsPresGWls MOD \\<and>\n  ((\\<forall>zs z1 z2 s X' X.\n       wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWls MOD s (gSwap MOD zs z1 z2 X' X)) \\<and>\n   (\\<forall>zs z1 z2 us s A' A.\n       isInBar (us, s) \\<and>\n       wlsAbs (us, s) A' \\<and> gWlsAbs MOD (us, s) A \\<longrightarrow>\n       gWlsAbs MOD (us, s) (gSwapAbs MOD zs z1 z2 A' A))) \\<and>\n  gFreshCls MOD \\<and> gSwapCls MOD \\<and> gAbsCongS MOD\n  gAbsRenS MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSwap MOD xs y x X (rec MOD X))", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (gSwap MOD xs y x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "assume \"\\<forall> s. \\<forall> Y \\<in> termsOfS ?P s. fresh xs y Y\""], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<forall>Y\\<in>termsOfS\n                     (ParS (\\<lambda>xs'. [])\n                       (\\<lambda>s'. if s' = s then [X] else [])\n                       (\\<lambda>us_s. []) [])\n                     s.\n        fresh xs y Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence y_fresh: \"fresh xs y X\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     \\<forall>Y\\<in>termsOfS\n                     (ParS (\\<lambda>xs'. [])\n                       (\\<lambda>s'. if s' = s then [X] else [])\n                       (\\<lambda>us_s. []) [])\n                     s.\n        fresh xs y Y\n\ngoal (1 subgoal):\n 1. fresh xs y X", "by simp"], ["proof (state)\nthis:\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"gFresh MOD xs y X (?h X)\""], ["proof (prove)\nusing this:\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "using Abs pFresh"], ["proof (prove)\nusing this:\n  fresh xs y X\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "unfolding presFreshAll_defs"], ["proof (prove)\nusing this:\n  fresh xs y X\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  (\\<forall>ys y s X.\n      wls s X \\<longrightarrow>\n      fresh ys y X \\<longrightarrow> gFresh MOD ys y X (rec MOD X)) \\<and>\n  (\\<forall>ys y us s A.\n      wlsAbs (us, s) A \\<longrightarrow>\n      freshAbs ys y A \\<longrightarrow> gFreshAbs MOD ys y A (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  gFresh MOD xs y X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"gAbs MOD xs y (?Xsw) ?hXsw = gAbs MOD xs x X (?h X)\""], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "using Abs hX y_fresh *"], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  fresh xs y X\n  wlsFSw MOD\n  gAbsRenS MOD\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "unfolding gAbsRenS_def"], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  fresh xs y X\n  wlsFSw MOD\n  \\<forall>xs y x s X' X.\n     isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n     fresh xs y X' \\<and> gFresh MOD xs y X' X \\<longrightarrow>\n     gAbs MOD xs y (X' #[y \\<and> x]_xs) (gSwap MOD xs y x X' X) =\n     gAbs MOD xs x X' X\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "by fastforce"], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "also"], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"\\<dots> = ?hA B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "using eq"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "."], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "also"], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"recAbs MOD B = gAbs MOD xs y Y (?h Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recAbs MOD B = gAbs MOD xs y Y (rec MOD Y)", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "using pCons Abs Y"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  wls s Y\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  wls s Y\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "by blast"], ["proof (state)\nthis:\n  recAbs MOD B = gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "finally"], ["proof (chain)\npicking this:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)", "have \"gAbs MOD xs y ?Xsw ?hXsw = gAbs MOD xs y Y (?h Y)\""], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n    gAbs MOD xs y Y (rec MOD Y)", "."], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"?hXsw = ?h Y\""], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "using ** Abs hX hXsw Y hY"], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n  gConsInj MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWls MOD s (gSwap MOD xs y x X (rec MOD X))\n  wls s Y\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "unfolding gConsInj_def gAbsInj_def"], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y \\<and> x]_xs) (gSwap MOD xs y x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n  gVarInj MOD \\<and>\n  (\\<forall>xs s x X' X X1' X1.\n      isInBar (xs, s) \\<and>\n      wls s X' \\<and>\n      gWls MOD s X \\<and>\n      wls s X1' \\<and>\n      gWls MOD s X1 \\<and>\n      gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n      X = X1) \\<and>\n  gOpInj MOD \\<and> gVarGOpInj MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWls MOD s (gSwap MOD xs y x X (rec MOD X))\n  wls s Y\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y \\<and> x]_xs)\n              (gSwap MOD xs y x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X); gWls MOD s (gSwap MOD xs y x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD;\n     \\<forall>xs s x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1;\n     gOpInj MOD; gVarGOpInj MOD\\<rbrakk>\n    \\<Longrightarrow> gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "apply(erule allE[of _ xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y \\<and> x]_xs)\n              (gSwap MOD xs y x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X); gWls MOD s (gSwap MOD xs y x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>s x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "apply(erule allE[of _ s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y \\<and> x]_xs)\n              (gSwap MOD xs y x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X); gWls MOD s (gSwap MOD xs y x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "apply(erule allE[of _ y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y \\<and> x]_xs)\n              (gSwap MOD xs y x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X); gWls MOD s (gSwap MOD xs y x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs y X' X = gAbs MOD xs y X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "apply(erule allE[of _ ?Xsw])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y \\<and> x]_xs)\n              (gSwap MOD xs y x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X); gWls MOD s (gSwap MOD xs y x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s (X #[y \\<and> x]_xs) \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs y (X #[y \\<and> x]_xs) X =\n        gAbs MOD xs y X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSwap MOD xs y x X (rec MOD X) = rec MOD Y", "by fastforce"], ["proof (state)\nthis:\n  gSwap MOD xs y x X (rec MOD X) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "moreover"], ["proof (state)\nthis:\n  gSwap MOD xs y x X (rec MOD X) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"?hXsw = ?h ?Xsw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)", "using Abs pSwap"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  presSwapAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)", "unfolding presSwapAll_defs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  (\\<forall>zs z1 z2 s X.\n      wls s X \\<longrightarrow>\n      rec MOD (X #[z1 \\<and> z2]_zs) =\n      gSwap MOD zs z1 z2 X (rec MOD X)) \\<and>\n  (\\<forall>zs z1 z2 us s A.\n      wlsAbs (us, s) A \\<longrightarrow>\n      recAbs MOD (A $[z1 \\<and> z2]_zs) =\n      gSwapAbs MOD zs z1 z2 A (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)", "by simp"], ["proof (state)\nthis:\n  gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "ultimately"], ["proof (chain)\npicking this:\n  gSwap MOD xs y x X (rec MOD X) = rec MOD Y\n  gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)", "have \"?h ?Xsw = ?h Y\""], ["proof (prove)\nusing this:\n  gSwap MOD xs y x X (rec MOD X) = rec MOD Y\n  gSwap MOD xs y x X (rec MOD X) = rec MOD (X #[y \\<and> x]_xs)\n\ngoal (1 subgoal):\n 1. rec MOD (X #[y \\<and> x]_xs) = rec MOD Y", "by simp"], ["proof (state)\nthis:\n  rec MOD (X #[y \\<and> x]_xs) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "moreover"], ["proof (state)\nthis:\n  rec MOD (X #[y \\<and> x]_xs) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"(X,?Xsw) \\<in> swapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[y \\<and> x]_xs) \\<in> swapped", "using swap_swapped"], ["proof (prove)\nusing this:\n  (?X, ?X #[?x \\<and> ?y]_?zs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. (X, X #[y \\<and> x]_xs) \\<in> swapped", "."], ["proof (state)\nthis:\n  (X, X #[y \\<and> x]_xs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "ultimately"], ["proof (chain)\npicking this:\n  rec MOD (X #[y \\<and> x]_xs) = rec MOD Y\n  (X, X #[y \\<and> x]_xs) \\<in> swapped", "have Y_def: \"Y = ?Xsw\""], ["proof (prove)\nusing this:\n  rec MOD (X #[y \\<and> x]_xs) = rec MOD Y\n  (X, X #[y \\<and> x]_xs) \\<in> swapped\n\ngoal (1 subgoal):\n 1. Y = X #[y \\<and> x]_xs", "using Y Abs.IH"], ["proof (prove)\nusing this:\n  rec MOD (X #[y \\<and> x]_xs) = rec MOD Y\n  (X, X #[y \\<and> x]_xs) \\<in> swapped\n  wls s Y\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. Y = X #[y \\<and> x]_xs", "by auto"], ["proof (state)\nthis:\n  Y = X #[y \\<and> x]_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "unfolding B_def Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs y (X #[y \\<and> x]_xs)", "using Abs y_fresh"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs y (X #[y \\<and> x]_xs)", "by simp"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "using B P wlsAbs_fresh_nchotomy[of xs s B]"], ["proof (prove)\nusing this:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n  wlsAbs (xs, s) B\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n  \\<lbrakk>wlsAbs (xs, s) B; wlsPar ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x X.\n                       B = Abs xs x X \\<and>\n                       wls s X \\<and>\n                       (\\<forall>ys. x \\<notin> varsOfS ?P ys) \\<and>\n                       (\\<forall>s'.\n                           \\<forall>Y\\<in>termsOfS ?P s'.\n                              fresh xs x Y) \\<and>\n                       (\\<forall>us s'.\n                           \\<forall>B\\<in>absOfS ?P (us, s').\n                              freshAbs xs x B) \\<and>\n                       (\\<forall>rho\\<in>envsOfS ?P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "by blast"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>B.\n     wlsAbs (xs, s) B \\<and>\n     recAbs MOD (Abs xs x X) = recAbs MOD B \\<longrightarrow>\n     Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (wls s X \\<longrightarrow>\n   (\\<forall>Y.\n       wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow> X = Y)) \\<and>\n  (wlsAbs (us, s') A \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (us, s') B \\<and>\n       recAbs MOD A = recAbs MOD B \\<longrightarrow>\n       A = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "}"], ["proof (state)\nthis:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "unfolding isInjAll_defs"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. (\\<forall>s X Y.\n        wls s X \\<and> wls s Y \\<longrightarrow>\n        rec MOD X = rec MOD Y \\<longrightarrow> X = Y) \\<and>\n    (\\<forall>us s A B.\n        wlsAbs (us, s) A \\<and> wlsAbs (us, s) B \\<longrightarrow>\n        recAbs MOD A = recAbs MOD B \\<longrightarrow> A = B)", "by blast"], ["proof (state)\nthis:\n  isInjAll (rec MOD) (recAbs MOD)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>For fresh-subst models\\<close>"], ["", "theorem wlsFSb_recAll_isInjAll:\nassumes *: \"wlsFSb MOD\" and **: \"gConsInj MOD\"\nshows \"isInjAll (rec MOD) (recAbs MOD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "let ?h = \"rec MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "let ?hA = \"recAbs MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "have 1: \"termFSbMorph ?h ?hA MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. termFSbMorph (rec MOD) (recAbs MOD) MOD", "using * wlsFSb_recAll_termFSbMorph"], ["proof (prove)\nusing this:\n  wlsFSb MOD\n  wlsFSb ?MOD \\<Longrightarrow> termFSbMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. termFSbMorph (rec MOD) (recAbs MOD) MOD", "by auto"], ["proof (state)\nthis:\n  termFSbMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "hence pWls: \"presWlsAll ?h ?hA MOD\"\n  and pCons: \"presCons ?h ?hA MOD\"\n  and pFresh: \"presFreshAll ?h ?hA MOD\"\n  and pSubst: \"presSubstAll ?h ?hA MOD\""], ["proof (prove)\nusing this:\n  termFSbMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (presWlsAll (rec MOD) (recAbs MOD) MOD &&&\n     presCons (rec MOD) (recAbs MOD) MOD) &&&\n    presFreshAll (rec MOD) (recAbs MOD) MOD &&&\n    presSubstAll (rec MOD) (recAbs MOD) MOD", "unfolding termFSbMorph_def"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD \\<and>\n  presCons (rec MOD) (recAbs MOD) MOD \\<and>\n  presFreshAll (rec MOD) (recAbs MOD) MOD \\<and>\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (presWlsAll (rec MOD) (recAbs MOD) MOD &&&\n     presCons (rec MOD) (recAbs MOD) MOD) &&&\n    presFreshAll (rec MOD) (recAbs MOD) MOD &&&\n    presSubstAll (rec MOD) (recAbs MOD) MOD", "by auto"], ["proof (state)\nthis:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "hence pWlsInps[simp]:\n  \"\\<And> delta inp. wlsInp delta inp \\<Longrightarrow> gWlsInp MOD delta (lift ?h inp)\"\n  \"\\<And> delta binp. wlsBinp delta binp \\<Longrightarrow> gWlsBinp MOD delta (lift ?hA binp)\""], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "using presWls_wlsInp presWls_wlsBinp"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "unfolding presWlsAll_def"], ["proof (prove)\nusing this:\n  presWls (rec MOD) MOD \\<and> presWlsAbs (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n  \\<lbrakk>wlsInp ?delta ?inp; presWls ?h ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsInp ?MOD ?delta (lift ?h ?inp)\n  \\<lbrakk>wlsBinp ?delta ?binp; presWlsAbs ?hA ?MOD\\<rbrakk>\n  \\<Longrightarrow> gWlsBinp ?MOD ?delta (lift ?hA ?binp)\n\ngoal (1 subgoal):\n 1. (\\<And>delta inp.\n        wlsInp delta inp \\<Longrightarrow>\n        gWlsInp MOD delta (lift (rec MOD) inp)) &&&\n    (\\<And>delta binp.\n        wlsBinp delta binp \\<Longrightarrow>\n        gWlsBinp MOD delta (lift (recAbs MOD) binp))", "by auto"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "{"], ["proof (state)\nthis:\n  wlsInp ?delta203 ?inp203 \\<Longrightarrow>\n  gWlsInp MOD ?delta203 (lift (rec MOD) ?inp203)\n  wlsBinp ?delta203 ?binp203 \\<Longrightarrow>\n  gWlsBinp MOD ?delta203 (lift (recAbs MOD) ?binp203)\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "fix s X us s' A"], ["proof (state)\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "have\n   \"(wls s X \\<longrightarrow> (\\<forall> Y. wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow> X = Y)) \\<and>\n    (wlsAbs (us,s') A \\<longrightarrow> (\\<forall> B. wlsAbs (us,s') B \\<and> recAbs MOD A = recAbs MOD B \\<longrightarrow> A = B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wls s X \\<longrightarrow>\n     (\\<forall>Y.\n         wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow>\n         X = Y)) \\<and>\n    (wlsAbs (us, s') A \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs (us, s') B \\<and>\n         recAbs MOD A = recAbs MOD B \\<longrightarrow>\n         A = B))", "proof(induction rule: wls_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          wls (asSort xs) Y \\<and>\n          rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n          Var xs x = Y\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>Y.\n          wls (asSort xs) Y \\<and>\n          rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n          Var xs x = Y\n 2. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 3. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       wls (asSort xs) Y \\<and>\n       rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n       Var xs x = Y", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "assume \"rec MOD (Var xs x) = rec MOD Y\" and Y: \"wls (asSort xs) Y\""], ["proof (state)\nthis:\n  rec MOD (Var xs x) = rec MOD Y\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "hence eq: \"gVar MOD xs x = rec MOD Y\""], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = rec MOD Y\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. gVar MOD xs x = rec MOD Y", "using 1"], ["proof (prove)\nusing this:\n  rec MOD (Var xs x) = rec MOD Y\n  wls (asSort xs) Y\n  termFSbMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gVar MOD xs x = rec MOD Y", "by (simp add: termFSbMorph_defs)"], ["proof (state)\nthis:\n  gVar MOD xs x = rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (asSort xs) Y; rec MOD (Var xs x) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Var xs x = Y", "show \"Var xs x = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x = Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x = Y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x = Y", "fix ys y"], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x = Y", "assume Y_def: \"Y = Var ys y\" and \"asSort ys = asSort xs\""], ["proof (state)\nthis:\n  Y = Var ys y\n  asSort ys = asSort xs\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "hence ys_def: \"ys = xs\""], ["proof (prove)\nusing this:\n  Y = Var ys y\n  asSort ys = asSort xs\n\ngoal (1 subgoal):\n 1. ys = xs", "by simp"], ["proof (state)\nthis:\n  ys = xs\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "have rec_y_def: \"rec MOD (Var ys y) = gVar MOD ys y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "using pCons"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "by simp"], ["proof (state)\nthis:\n  rec MOD (Var ys y) = gVar MOD ys y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x = Y", "using eq **"], ["proof (prove)\nusing this:\n  gVar MOD xs x = rec MOD Y\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "unfolding Y_def rec_y_def gConsInj_def gVarInj_def"], ["proof (prove)\nusing this:\n  gVar MOD xs x = gVar MOD ys y\n  (\\<forall>xs x y.\n      gVar MOD xs x = gVar MOD xs y \\<longrightarrow> x = y) \\<and>\n  gAbsInj MOD \\<and> gOpInj MOD \\<and> gVarGOpInj MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Var ys y", "unfolding ys_def"], ["proof (prove)\nusing this:\n  gVar MOD xs x = gVar MOD xs y\n  (\\<forall>xs x y.\n      gVar MOD xs x = gVar MOD xs y \\<longrightarrow> x = y) \\<and>\n  gAbsInj MOD \\<and> gOpInj MOD \\<and> gVarGOpInj MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Var xs y", "by simp"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "{"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "fix delta1 inp1 binp1"], ["proof (state)\ngoal (1 subgoal):\n 1. Var xs x = Y", "assume inp1s: \"wlsInp delta1 inp1\"  \"wlsBinp delta1 binp1\"\n          and Y_def: \"Y = Op delta1 inp1 binp1\" and st: \"stOf delta1 = asSort xs\""], ["proof (state)\nthis:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "hence rec_Op_def:\n          \"rec MOD (Op delta1 inp1 binp1) =\n           gOp MOD delta1 inp1 (lift ?h inp1) binp1 (lift ?hA binp1)\""], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "using pCons"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = asSort xs\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "by simp"], ["proof (state)\nthis:\n  rec MOD (Op delta1 inp1 binp1) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var xs x = Y", "using eq **"], ["proof (prove)\nusing this:\n  gVar MOD xs x = rec MOD Y\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "unfolding Y_def rec_Op_def gConsInj_def gVarGOpInj_def"], ["proof (prove)\nusing this:\n  gVar MOD xs x =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n\ngoal (1 subgoal):\n 1. Var xs x = Op delta1 inp1 binp1", "using inp1s st"], ["proof (prove)\nusing this:\n  gVar MOD xs x =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  stOf delta1 = asSort xs\n\ngoal (1 subgoal):\n 1. Var xs x = Op delta1 inp1 binp1", "by simp"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "using wls_nchotomy[of \"asSort xs\" Y] Y"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = asSort xs\\<rbrakk>\n  \\<Longrightarrow> Var xs x = Y\n  wls (asSort xs) Y \\<Longrightarrow>\n  (\\<exists>xsa x. asSort xsa = asSort xs \\<and> Y = Var xsa x) \\<or>\n  (\\<exists>delta inp binp.\n      stOf delta = asSort xs \\<and>\n      wlsInp delta inp \\<and>\n      wlsBinp delta binp \\<and> Y = Op delta inp binp)\n  wls (asSort xs) Y\n\ngoal (1 subgoal):\n 1. Var xs x = Y", "by blast"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Var xs x = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y.\n     wls (asSort xs) Y \\<and>\n     rec MOD (Var xs x) = rec MOD Y \\<longrightarrow>\n     Var xs x = Y\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>wlsInp delta inp; wlsBinp delta binp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>Y.\n                wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow>\n                b = Y)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b.\n             \\<forall>B.\n                wlsAbs a B \\<and>\n                recAbs MOD b = recAbs MOD B \\<longrightarrow>\n                b = B)\n         (barOf delta) binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y.\n                            wls (stOf delta) Y \\<and>\n                            rec MOD (Op delta inp binp) =\n                            rec MOD Y \\<longrightarrow>\n                            Op delta inp binp = Y\n 2. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       wls (stOf delta) Y \\<and>\n       rec MOD (Op delta inp binp) = rec MOD Y \\<longrightarrow>\n       Op delta inp binp = Y", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "fix Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "assume  \"rec MOD (Op delta inp binp) = rec MOD Y\" and Y: \"wls (stOf delta) Y\""], ["proof (state)\nthis:\n  rec MOD (Op delta inp binp) = rec MOD Y\n  wls (stOf delta) Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "hence eq: \"gOp MOD delta inp (lift ?h inp) binp (lift ?hA binp) = ?h Y\""], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp binp) = rec MOD Y\n  wls (stOf delta) Y\n\ngoal (1 subgoal):\n 1. gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n    rec MOD Y", "using Op 1"], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp binp) = rec MOD Y\n  wls (stOf delta) Y\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n  termFSbMorph (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n    rec MOD Y", "by (simp add: termFSbMorph_defs)"], ["proof (state)\nthis:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>wls (stOf delta) Y;\n        rec MOD (Op delta inp binp) = rec MOD Y\\<rbrakk>\n       \\<Longrightarrow> Op delta inp binp = Y", "show \"Op delta inp binp = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "fix ys y"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "assume Y_def: \"Y = Var ys y\" and st: \"asSort ys = stOf delta\""], ["proof (state)\nthis:\n  Y = Var ys y\n  asSort ys = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have rec_y_def: \"rec MOD (Var ys y) = gVar MOD ys y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "using pCons"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Var ys y) = gVar MOD ys y", "by simp"], ["proof (state)\nthis:\n  rec MOD (Var ys y) = gVar MOD ys y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "using eq[THEN sym] **"], ["proof (prove)\nusing this:\n  rec MOD Y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "unfolding Y_def rec_y_def gConsInj_def gVarGOpInj_def"], ["proof (prove)\nusing this:\n  gVar MOD ys y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Var ys y", "using Op st"], ["proof (prove)\nusing this:\n  gVar MOD ys y =\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  gOpInj MOD \\<and>\n  (\\<forall>xs x delta inp' binp' inp binp.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      asSort xs = stOf delta \\<longrightarrow>\n      gVar MOD xs x \\<noteq> gOp MOD delta inp' inp binp' binp)\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n  asSort ys = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Var ys y", "by simp"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "{"], ["proof (state)\nthis:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "fix delta1 inp1 binp1"], ["proof (state)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "assume inp1s: \"wlsInp delta1 inp1\"  \"wlsBinp delta1 binp1\"\n          and Y_def: \"Y = Op delta1 inp1 binp1\" and st: \"stOf delta1 = stOf delta\""], ["proof (state)\nthis:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "hence rec_Op_def:\n          \"rec MOD (Op delta1 inp1 binp1) =\n           gOp MOD delta1 inp1 (lift ?h inp1) binp1 (lift ?hA binp1)\""], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "using pCons"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  Y = Op delta1 inp1 binp1\n  stOf delta1 = stOf delta\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta1 inp1 binp1) =\n    gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n     (lift (recAbs MOD) binp1)", "by simp"], ["proof (state)\nthis:\n  rec MOD (Op delta1 inp1 binp1) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 0: \"delta = delta1 \\<and> lift ?h inp = lift ?h inp1 \\<and> lift ?hA binp = lift ?hA binp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "using eq **"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  rec MOD Y\n  gConsInj MOD\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "unfolding Y_def rec_Op_def gConsInj_def gOpInj_def"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  (\\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      wlsInp delta1 inp1' \\<and>\n      wlsBinp delta1 binp1' \\<and>\n      gWlsInp MOD delta1 inp1 \\<and>\n      gWlsBinp MOD delta1 binp1 \\<and>\n      stOf delta = stOf delta1 \\<and>\n      gOp MOD delta inp' inp binp' binp =\n      gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n      delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1) \\<and>\n  gVarGOpInj MOD\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "using Op inp1s st"], ["proof (prove)\nusing this:\n  gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp) =\n  gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1 (lift (recAbs MOD) binp1)\n  gVarInj MOD \\<and>\n  gAbsInj MOD \\<and>\n  (\\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n      wlsInp delta inp' \\<and>\n      wlsBinp delta binp' \\<and>\n      gWlsInp MOD delta inp \\<and>\n      gWlsBinp MOD delta binp \\<and>\n      wlsInp delta1 inp1' \\<and>\n      wlsBinp delta1 binp1' \\<and>\n      gWlsInp MOD delta1 inp1 \\<and>\n      gWlsBinp MOD delta1 binp1 \\<and>\n      stOf delta = stOf delta1 \\<and>\n      gOp MOD delta inp' inp binp' binp =\n      gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n      delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1) \\<and>\n  gVarGOpInj MOD\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  stOf delta1 = stOf delta\n\ngoal (1 subgoal):\n 1. delta = delta1 \\<and>\n    lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n    lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD;\n     \\<forall>delta delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1;\n     gVarGOpInj MOD\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply(erule allE[of _ delta])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD; gVarGOpInj MOD;\n     \\<forall>delta1 inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "apply(erule allE[of _ delta1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gOp MOD delta inp (lift (rec MOD) inp) binp\n              (lift (recAbs MOD) binp) =\n             gOp MOD delta1 inp1 (lift (rec MOD) inp1) binp1\n              (lift (recAbs MOD) binp1);\n     wlsInp delta inp; wlsBinp delta binp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>Y.\n             wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n      (arOf delta) inp;\n     liftAll2\n      (\\<lambda>a b.\n          \\<forall>B.\n             wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n             b = B)\n      (barOf delta) binp;\n     wlsInp delta1 inp1; wlsBinp delta1 binp1; stOf delta1 = stOf delta;\n     gVarInj MOD; gAbsInj MOD; gVarGOpInj MOD;\n     \\<forall>inp' binp' inp binp inp1' binp1' inp1 binp1.\n        wlsInp delta inp' \\<and>\n        wlsBinp delta binp' \\<and>\n        gWlsInp MOD delta inp \\<and>\n        gWlsBinp MOD delta binp \\<and>\n        wlsInp delta1 inp1' \\<and>\n        wlsBinp delta1 binp1' \\<and>\n        gWlsInp MOD delta1 inp1 \\<and>\n        gWlsBinp MOD delta1 binp1 \\<and>\n        stOf delta = stOf delta1 \\<and>\n        gOp MOD delta inp' inp binp' binp =\n        gOp MOD delta1 inp1' inp1 binp1' binp1 \\<longrightarrow>\n        delta = delta1 \\<and> inp = inp1 \\<and> binp = binp1\\<rbrakk>\n    \\<Longrightarrow> delta = delta1 \\<and>\n                      lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n                      lift (recAbs MOD) binp = lift (recAbs MOD) binp1", "by force"], ["proof (state)\nthis:\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "hence delta1_def: \"delta1 = delta\""], ["proof (prove)\nusing this:\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. delta1 = delta", "by simp"], ["proof (state)\nthis:\n  delta1 = delta\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 1: \"inp = inp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp = inp1", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. inp x = inp1 x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. inp x = inp1 x", "show \"inp i = inp1 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp i = inp1 i", "proof(cases \"inp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "case None"], ["proof (state)\nthis:\n  inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp i = None\""], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp i = None", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  lift (rec MOD) inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp1 i = None\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = None", "using 0"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = None\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = None", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp1 i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp1 i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = None\n\ngoal (1 subgoal):\n 1. inp i = inp1 i", "unfolding None"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = None\n\ngoal (1 subgoal):\n 1. None = inp1 i", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "case (Some X)"], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp i = Some (?h X)\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp i = Some (rec MOD X)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (rec MOD v)) =\n    Some (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence \"lift ?h inp1 i = Some (?h X)\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = Some (rec MOD X)", "using 0"], ["proof (prove)\nusing this:\n  lift (rec MOD) inp i = Some (rec MOD X)\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1 i = Some (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp1 i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "then"], ["proof (chain)\npicking this:\n  lift (rec MOD) inp1 i = Some (rec MOD X)", "obtain Y where inp1_i: \"inp1 i = Some Y\" and hXY: \"?h X = ?h Y\""], ["proof (prove)\nusing this:\n  lift (rec MOD) inp1 i = Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>inp1 i = Some Y; rec MOD X = rec MOD Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case inp1 i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (rec MOD v)) =\n  Some (rec MOD X)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>inp1 i = Some Y; rec MOD X = rec MOD Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"inp1 i\") auto"], ["proof (state)\nthis:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "then"], ["proof (chain)\npicking this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y", "obtain s where ar_i: \"arOf delta i = Some s\""], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inp1s"], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding delta1_def wlsInp_iff sameDom_def"], ["proof (prove)\nusing this:\n  inp1 i = Some Y\n  rec MOD X = rec MOD Y\n  wlsOpS delta \\<and>\n  (\\<forall>i. (arOf delta i = None) = (inp1 i = None)) \\<and>\n  liftAll2 wls (arOf delta) inp1\n  wlsBinp delta binp1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"arOf delta i\") auto"], ["proof (state)\nthis:\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "hence Y: \"wls s Y\""], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. wls s Y", "using inp1s inp1_i"], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  inp1 i = Some Y\n\ngoal (1 subgoal):\n 1. wls s Y", "unfolding delta1_def wlsInp_iff liftAll2_def"], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n  wlsOpS delta \\<and>\n  sameDom (arOf delta) inp1 \\<and>\n  (\\<forall>i v1 v2.\n      arOf delta i = Some v1 \\<and> inp1 i = Some v2 \\<longrightarrow>\n      wls v1 v2)\n  wlsBinp delta binp1\n  inp1 i = Some Y\n\ngoal (1 subgoal):\n 1. wls s Y", "by auto"], ["proof (state)\nthis:\n  wls s Y\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. inp i = inp1 i", "unfolding Some inp1_i"], ["proof (prove)\nusing this:\n  wls s Y\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "using ar_i Some hXY Op.IH"], ["proof (prove)\nusing this:\n  wls s Y\n  arOf delta i = Some s\n  inp i = Some X\n  rec MOD X = rec MOD Y\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  wls s Y\n  arOf delta i = Some s\n  inp i = Some X\n  rec MOD X = rec MOD Y\n  wlsInp delta inp\n  wlsBinp delta binp\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<forall>Y.\n         wls v1 Y \\<and> rec MOD v2 = rec MOD Y \\<longrightarrow> v2 = Y)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs v1 B \\<and> recAbs MOD v2 = recAbs MOD B \\<longrightarrow>\n         v2 = B)\n\ngoal (1 subgoal):\n 1. Some X = Some Y", "by auto"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp i = inp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp = inp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have 2: \"binp = binp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp = binp1", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. binp x = binp1 x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. binp x = binp1 x", "show \"binp i = binp1 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp i = binp1 i", "proof(cases \"binp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "case None"], ["proof (state)\nthis:\n  binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp i = None\""], ["proof (prove)\nusing this:\n  binp i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp i = None", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp1 i = None\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = None", "using 0"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = None\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = None", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> binp i = binp1 i\n 2. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (1 subgoal):\n 1. binp i = binp1 i", "unfolding None"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = None\n\ngoal (1 subgoal):\n 1. None = binp1 i", "by(simp add: lift_None)"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "case (Some A)"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp i = Some (?hA A)\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp i = Some (recAbs MOD A)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. (case binp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (recAbs MOD v)) =\n    Some (recAbs MOD A)", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence \"lift ?hA binp1 i = Some (?hA A)\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "using 0"], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp i = Some (recAbs MOD A)\n  delta = delta1 \\<and>\n  lift (rec MOD) inp = lift (rec MOD) inp1 \\<and>\n  lift (recAbs MOD) binp = lift (recAbs MOD) binp1\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "then"], ["proof (chain)\npicking this:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)", "obtain B where binp1_i: \"binp1 i = Some B\" and hAB: \"?hA A = ?hA B\""], ["proof (prove)\nusing this:\n  lift (recAbs MOD) binp1 i = Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>binp1 i = Some B; recAbs MOD A = recAbs MOD B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case binp1 i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (recAbs MOD v)) =\n  Some (recAbs MOD A)\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>binp1 i = Some B; recAbs MOD A = recAbs MOD B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"binp1 i\", auto)"], ["proof (state)\nthis:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "then"], ["proof (chain)\npicking this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B", "obtain us s where bar_i: \"barOf delta i = Some (us,s)\""], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using inp1s"], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding delta1_def wlsBinp_iff sameDom_def"], ["proof (prove)\nusing this:\n  binp1 i = Some B\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp1\n  wlsOpS delta \\<and>\n  (\\<forall>i. (barOf delta i = None) = (binp1 i = None)) \\<and>\n  liftAll2 wlsAbs (barOf delta) binp1\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"barOf delta i\") auto"], ["proof (state)\nthis:\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "hence B: \"wlsAbs (us,s) B\""], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "using inp1s binp1_i"], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n  wlsInp delta1 inp1\n  wlsBinp delta1 binp1\n  binp1 i = Some B\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "unfolding delta1_def wlsBinp_iff liftAll2_def"], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n  wlsInp delta inp1\n  wlsOpS delta \\<and>\n  sameDom (barOf delta) binp1 \\<and>\n  (\\<forall>i v1 v2.\n      barOf delta i = Some v1 \\<and> binp1 i = Some v2 \\<longrightarrow>\n      wlsAbs v1 v2)\n  binp1 i = Some B\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) B", "by auto"], ["proof (state)\nthis:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. \\<And>a. binp i = Some a \\<Longrightarrow> binp i = binp1 i", "thus ?thesis"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. binp i = binp1 i", "unfolding Some binp1_i"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n\ngoal (1 subgoal):\n 1. Some A = Some B", "using bar_i Some hAB Op.IH"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n  barOf delta i = Some (us, s)\n  binp i = Some A\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp\n  wlsBinp delta binp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>Y.\n          wls a Y \\<and> rec MOD b = rec MOD Y \\<longrightarrow> b = Y)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>a b.\n       \\<forall>B.\n          wlsAbs a B \\<and> recAbs MOD b = recAbs MOD B \\<longrightarrow>\n          b = B)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. Some A = Some B", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  wlsAbs (us, s) B\n  barOf delta i = Some (us, s)\n  binp i = Some A\n  recAbs MOD A = recAbs MOD B\n  wlsInp delta inp\n  wlsBinp delta binp\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<forall>Y.\n         wls v1 Y \\<and> rec MOD v2 = rec MOD Y \\<longrightarrow> v2 = Y)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<forall>B.\n         wlsAbs v1 B \\<and> recAbs MOD v2 = recAbs MOD B \\<longrightarrow>\n         v2 = B)\n\ngoal (1 subgoal):\n 1. Some A = Some B", "by fastforce"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binp i = binp1 i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binp = binp1\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "unfolding Y_def delta1_def 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. Op delta inp1 binp1 = Op delta inp1 binp1", "by simp"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "using wls_nchotomy[of \"stOf delta\" Y] Y"], ["proof (prove)\nusing this:\n  \\<lbrakk>Y = Var ?ys205 ?y205; asSort ?ys205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  \\<lbrakk>wlsInp ?delta1.205 ?inp1.205; wlsBinp ?delta1.205 ?binp1.205;\n   Y = Op ?delta1.205 ?inp1.205 ?binp1.205;\n   stOf ?delta1.205 = stOf delta\\<rbrakk>\n  \\<Longrightarrow> Op delta inp binp = Y\n  wls (stOf delta) Y \\<Longrightarrow>\n  (\\<exists>xs x. asSort xs = stOf delta \\<and> Y = Var xs x) \\<or>\n  (\\<exists>deltaa inp binp.\n      stOf deltaa = stOf delta \\<and>\n      wlsInp deltaa inp \\<and>\n      wlsBinp deltaa binp \\<and> Y = Op deltaa inp binp)\n  wls (stOf delta) Y\n\ngoal (1 subgoal):\n 1. Op delta inp binp = Y", "by blast"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Op delta inp binp = Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y.\n     wls (stOf delta) Y \\<and>\n     rec MOD (Op delta inp binp) = rec MOD Y \\<longrightarrow>\n     Op delta inp binp = Y\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "case (Abs s xs x X)"], ["proof (state)\nthis:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. \\<And>s xs x X.\n       \\<lbrakk>isInBar (xs, s); wls s X;\n        \\<And>Y.\n           (X, Y) \\<in> swapped \\<Longrightarrow>\n           \\<forall>Ya.\n              wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow>\n              Y = Ya;\n        \\<And>ys y1 y2.\n           \\<forall>Y.\n              wls s Y \\<and>\n              rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n              X #[y1 // y2]_ys = Y;\n        \\<And>Y.\n           \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n           \\<Longrightarrow> \\<forall>Ya.\n                                wls s Ya \\<and>\n                                rec MOD Y = rec MOD Ya \\<longrightarrow>\n                                Y = Ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            wlsAbs (xs, s) B \\<and>\n                            recAbs MOD (Abs xs x X) =\n                            recAbs MOD B \\<longrightarrow>\n                            Abs xs x X = B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B.\n       wlsAbs (xs, s) B \\<and>\n       recAbs MOD (Abs xs x X) = recAbs MOD B \\<longrightarrow>\n       Abs xs x X = B", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "assume B: \"wlsAbs (xs,s) B\" and \"recAbs MOD (Abs xs x X) = recAbs MOD B\""], ["proof (state)\nthis:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "hence eq: \"gAbs MOD xs x X (rec MOD X) = ?hA B\""], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "using 1 Abs"], ["proof (prove)\nusing this:\n  wlsAbs (xs, s) B\n  recAbs MOD (Abs xs x X) = recAbs MOD B\n  termFSbMorph (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "by (simp add: termFSbMorph_defs)"], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "hence hX: \"gWls MOD s (?h X)\""], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "using pWls Abs"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "unfolding presWlsAll_defs"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n  (\\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (rec MOD X)) \\<and>\n  (\\<forall>us s A.\n      wlsAbs (us, s) A \\<longrightarrow> gWlsAbs MOD (us, s) (recAbs MOD A))\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (rec MOD X)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<lbrakk>wlsAbs (xs, s) B;\n        recAbs MOD (Abs xs x X) = recAbs MOD B\\<rbrakk>\n       \\<Longrightarrow> Abs xs x X = B", "show \"Abs xs x X = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?P = \"ParS\n          (\\<lambda> xs'. [])\n          (\\<lambda> s'. if s' = s then [X] else [])\n          (\\<lambda> us_s. [])\n          []\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have P: \"wlsPar ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsPar\n     (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n       (\\<lambda>us_s. []) [])", "using Abs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. wlsPar\n     (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n       (\\<lambda>us_s. []) [])", "unfolding wlsPar_def"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. (\\<forall>s.\n        \\<forall>X\\<in>termsOfS\n                        (ParS (\\<lambda>xs'. [])\n                          (\\<lambda>s'. if s' = s then [X] else [])\n                          (\\<lambda>us_s. []) [])\n                        s.\n           wls s X) \\<and>\n    (\\<forall>xs s.\n        \\<forall>A\\<in>absOfS\n                        (ParS (\\<lambda>xs'. [])\n                          (\\<lambda>s'. if s' = s then [X] else [])\n                          (\\<lambda>us_s. []) [])\n                        (xs, s).\n           wlsAbs (xs, s) A) \\<and>\n    Ball\n     (envsOfS\n       (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n         (\\<lambda>us_s. []) []))\n     wlsEnv", "by simp"], ["proof (state)\nthis:\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "{"], ["proof (state)\nthis:\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "fix y Y"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "assume Y: \"wls s Y\" and B_def: \"B = Abs xs y Y\""], ["proof (state)\nthis:\n  wls s Y\n  B = Abs xs y Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence hY: \"gWls MOD s (?h Y)\""], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "using pWls"], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "unfolding presWlsAll_defs"], ["proof (prove)\nusing this:\n  wls s Y\n  B = Abs xs y Y\n  (\\<forall>s X. wls s X \\<longrightarrow> gWls MOD s (rec MOD X)) \\<and>\n  (\\<forall>us s A.\n      wlsAbs (us, s) A \\<longrightarrow> gWlsAbs MOD (us, s) (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gWls MOD s (rec MOD Y)", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?Xsb = \"X #[y // x]_xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "let ?hXsb = \"gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (?h X)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have 1: \"wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)", "using *"], ["proof (prove)\nusing this:\n  wlsFSb MOD\n\ngoal (1 subgoal):\n 1. wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)", "unfolding wlsFSb_def gConsPresGWls_defs"], ["proof (prove)\nusing this:\n  gWlsAllDisj MOD \\<and>\n  gWlsAbsIsInBar MOD \\<and>\n  ((\\<forall>xs x. gWls MOD (asSort xs) (gVar MOD xs x)) \\<and>\n   (\\<forall>xs s x X' X.\n       isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWlsAbs MOD (xs, s) (gAbs MOD xs x X' X)) \\<and>\n   (\\<forall>delta inp' inp binp' binp.\n       wlsInp delta inp' \\<and>\n       gWlsInp MOD delta inp \\<and>\n       wlsBinp delta binp' \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n       gWls MOD (stOf delta) (gOp MOD delta inp' inp binp' binp))) \\<and>\n  gSubstAllPresGWlsAll MOD \\<and>\n  gFreshCls MOD \\<and> gSubstCls MOD \\<and> gAbsRen MOD\n\ngoal (1 subgoal):\n 1. wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)", "by simp"], ["proof (state)\nthis:\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence hXsb: \"gWls MOD s ?hXsb\""], ["proof (prove)\nusing this:\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))", "using Abs hX"], ["proof (prove)\nusing this:\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))", "using *"], ["proof (prove)\nusing this:\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  wlsFSb MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))", "unfolding wlsFSb_def gSubstAllPresGWlsAll_defs"], ["proof (prove)\nusing this:\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWlsAllDisj MOD \\<and>\n  gWlsAbsIsInBar MOD \\<and>\n  gConsPresGWls MOD \\<and>\n  ((\\<forall>ys Y' Y y s X' X.\n       wls (asSort ys) Y' \\<and>\n       gWls MOD (asSort ys) Y \\<and>\n       wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n       gWls MOD s (gSubst MOD ys Y' Y y X' X)) \\<and>\n   (\\<forall>ys Y' Y y us s A' A.\n       isInBar (us, s) \\<and>\n       wls (asSort ys) Y' \\<and>\n       gWls MOD (asSort ys) Y \\<and>\n       wlsAbs (us, s) A' \\<and> gWlsAbs MOD (us, s) A \\<longrightarrow>\n       gWlsAbs MOD (us, s) (gSubstAbs MOD ys Y' Y y A' A))) \\<and>\n  gFreshCls MOD \\<and> gSubstCls MOD \\<and> gAbsRen MOD\n\ngoal (1 subgoal):\n 1. gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))", "by simp"], ["proof (state)\nthis:\n  gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "assume \"\\<forall> s. \\<forall> Y \\<in> termsOfS ?P s. fresh xs y Y\""], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<forall>Y\\<in>termsOfS\n                     (ParS (\\<lambda>xs'. [])\n                       (\\<lambda>s'. if s' = s then [X] else [])\n                       (\\<lambda>us_s. []) [])\n                     s.\n        fresh xs y Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence y_fresh: \"fresh xs y X\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     \\<forall>Y\\<in>termsOfS\n                     (ParS (\\<lambda>xs'. [])\n                       (\\<lambda>s'. if s' = s then [X] else [])\n                       (\\<lambda>us_s. []) [])\n                     s.\n        fresh xs y Y\n\ngoal (1 subgoal):\n 1. fresh xs y X", "by simp"], ["proof (state)\nthis:\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"gFresh MOD xs y X (?h X)\""], ["proof (prove)\nusing this:\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "using Abs pFresh"], ["proof (prove)\nusing this:\n  fresh xs y X\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  presFreshAll (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "unfolding presFreshAll_defs"], ["proof (prove)\nusing this:\n  fresh xs y X\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  (\\<forall>ys y s X.\n      wls s X \\<longrightarrow>\n      fresh ys y X \\<longrightarrow> gFresh MOD ys y X (rec MOD X)) \\<and>\n  (\\<forall>ys y us s A.\n      wlsAbs (us, s) A \\<longrightarrow>\n      freshAbs ys y A \\<longrightarrow> gFreshAbs MOD ys y A (recAbs MOD A))\n\ngoal (1 subgoal):\n 1. gFresh MOD xs y X (rec MOD X)", "by simp"], ["proof (state)\nthis:\n  gFresh MOD xs y X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"gAbs MOD xs y (?Xsb) ?hXsb = gAbs MOD xs x X (?h X)\""], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y // x]_xs)\n     (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "using Abs hX y_fresh *"], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  fresh xs y X\n  wlsFSb MOD\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y // x]_xs)\n     (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "unfolding wlsFSb_def gAbsRen_def"], ["proof (prove)\nusing this:\n  gFresh MOD xs y X (rec MOD X)\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  fresh xs y X\n  gWlsAllDisj MOD \\<and>\n  gWlsAbsIsInBar MOD \\<and>\n  gConsPresGWls MOD \\<and>\n  gSubstAllPresGWlsAll MOD \\<and>\n  gFreshCls MOD \\<and>\n  gSubstCls MOD \\<and>\n  (\\<forall>xs y x s X' X.\n      isInBar (xs, s) \\<and> wls s X' \\<and> gWls MOD s X \\<longrightarrow>\n      fresh xs y X' \\<and> gFresh MOD xs y X' X \\<longrightarrow>\n      gAbs MOD xs y (X' #[y // x]_xs)\n       (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X' X) =\n      gAbs MOD xs x X' X)\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y // x]_xs)\n     (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n    gAbs MOD xs x X (rec MOD X)", "by fastforce"], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "also"], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs x X (rec MOD X)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"\\<dots> = ?hA B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "using eq"], ["proof (prove)\nusing this:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. gAbs MOD xs x X (rec MOD X) = recAbs MOD B", "."], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "also"], ["proof (state)\nthis:\n  gAbs MOD xs x X (rec MOD X) = recAbs MOD B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"\\<dots> = gAbs MOD xs y Y (?h Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recAbs MOD B = gAbs MOD xs y Y (rec MOD Y)", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "using pCons Abs Y"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  wls s Y\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  wls s Y\n\ngoal (1 subgoal):\n 1. recAbs MOD (Abs xs y Y) = gAbs MOD xs y Y (rec MOD Y)", "by blast"], ["proof (state)\nthis:\n  recAbs MOD B = gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "finally"], ["proof (chain)\npicking this:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)", "have\n          \"gAbs MOD xs y ?Xsb ?hXsb = gAbs MOD xs y Y (?h Y)\""], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gAbs MOD xs y (X #[y // x]_xs)\n     (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n    gAbs MOD xs y Y (rec MOD Y)", "."], ["proof (state)\nthis:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence \"?hXsb = ?h Y\""], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y", "using ** Abs hX hXsb Y hY"], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n  gConsInj MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))\n  wls s Y\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y", "unfolding gConsInj_def gAbsInj_def"], ["proof (prove)\nusing this:\n  gAbs MOD xs y (X #[y // x]_xs)\n   (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n  gAbs MOD xs y Y (rec MOD Y)\n  gVarInj MOD \\<and>\n  (\\<forall>xs s x X' X X1' X1.\n      isInBar (xs, s) \\<and>\n      wls s X' \\<and>\n      gWls MOD s X \\<and>\n      wls s X1' \\<and>\n      gWls MOD s X1 \\<and>\n      gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n      X = X1) \\<and>\n  gOpInj MOD \\<and> gVarGOpInj MOD\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  gWls MOD s (rec MOD X)\n  gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X))\n  wls s Y\n  gWls MOD s (rec MOD Y)\n\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y // x]_xs)\n              (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X);\n     gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD;\n     \\<forall>xs s x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1;\n     gOpInj MOD; gVarGOpInj MOD\\<rbrakk>\n    \\<Longrightarrow> gSubst MOD xs (Var xs y) (gVar MOD xs y) x X\n                       (rec MOD X) =\n                      rec MOD Y", "apply(erule allE[of _ xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y // x]_xs)\n              (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X);\n     gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>s x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSubst MOD xs (Var xs y) (gVar MOD xs y) x X\n                       (rec MOD X) =\n                      rec MOD Y", "apply(erule allE[of _ s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y // x]_xs)\n              (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X);\n     gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>x X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs x X' X = gAbs MOD xs x X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSubst MOD xs (Var xs y) (gVar MOD xs y) x X\n                       (rec MOD X) =\n                      rec MOD Y", "apply(erule allE[of _ y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y // x]_xs)\n              (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X);\n     gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>X' X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s X' \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs y X' X = gAbs MOD xs y X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSubst MOD xs (Var xs y) (gVar MOD xs y) x X\n                       (rec MOD X) =\n                      rec MOD Y", "apply(erule allE[of _ ?Xsb])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gAbs MOD xs y (X #[y // x]_xs)\n              (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X)) =\n             gAbs MOD xs y Y (rec MOD Y);\n     isInBar (xs, s); wls s X;\n     \\<And>Y.\n        (X, Y) \\<in> swapped \\<Longrightarrow>\n        \\<forall>Ya.\n           wls s Ya \\<and> rec MOD Y = rec MOD Ya \\<longrightarrow> Y = Ya;\n     \\<And>ys y1 y2.\n        \\<forall>Y.\n           wls s Y \\<and>\n           rec MOD (X #[y1 // y2]_ys) = rec MOD Y \\<longrightarrow>\n           X #[y1 // y2]_ys = Y;\n     \\<And>Y.\n        \\<lbrakk>wls s Y; skel Y = skel X\\<rbrakk>\n        \\<Longrightarrow> \\<forall>Ya.\n                             wls s Ya \\<and>\n                             rec MOD Y = rec MOD Ya \\<longrightarrow>\n                             Y = Ya;\n     gWls MOD s (rec MOD X);\n     gWls MOD s (gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X));\n     wls s Y; gWls MOD s (rec MOD Y); gVarInj MOD; gOpInj MOD;\n     gVarGOpInj MOD;\n     \\<forall>X X1' X1.\n        isInBar (xs, s) \\<and>\n        wls s (X #[y // x]_xs) \\<and>\n        gWls MOD s X \\<and>\n        wls s X1' \\<and>\n        gWls MOD s X1 \\<and>\n        gAbs MOD xs y (X #[y // x]_xs) X =\n        gAbs MOD xs y X1' X1 \\<longrightarrow>\n        X = X1\\<rbrakk>\n    \\<Longrightarrow> gSubst MOD xs (Var xs y) (gVar MOD xs y) x X\n                       (rec MOD X) =\n                      rec MOD Y", "by fastforce"], ["proof (state)\nthis:\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "moreover"], ["proof (state)\nthis:\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have \"?hXsb = ?h ?Xsb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n    rec MOD (X #[y // x]_xs)", "using Abs pSubst 1 pCons"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  presSubstAll (rec MOD) (recAbs MOD) MOD\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n    rec MOD (X #[y // x]_xs)", "unfolding presSubstAll_defs vsubst_def presCons_defs"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[Var ?ys203 ?y1.203 / ?y2.203]_?ys203) =\n     rec MOD Y \\<longrightarrow>\n     X #[Var ?ys203 ?y1.203 / ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  (\\<forall>ys Y y s X.\n      wls (asSort ys) Y \\<and> wls s X \\<longrightarrow>\n      rec MOD (X #[Y / y]_ys) =\n      gSubst MOD ys Y (rec MOD Y) y X (rec MOD X)) \\<and>\n  (\\<forall>ys Y y us s A.\n      wls (asSort ys) Y \\<and> wlsAbs (us, s) A \\<longrightarrow>\n      recAbs MOD (A $[Y / y]_ys) =\n      gSubstAbs MOD ys Y (rec MOD Y) y A (recAbs MOD A))\n  wls (asSort xs) (Var xs y) \\<and> gWls MOD (asSort xs) (gVar MOD xs y)\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n\ngoal (1 subgoal):\n 1. gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n    rec MOD (X #[Var xs y / x]_xs)", "by simp"], ["proof (state)\nthis:\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n  rec MOD (X #[y // x]_xs)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "ultimately"], ["proof (chain)\npicking this:\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n  rec MOD (X #[y // x]_xs)", "have \"?h ?Xsb = ?h Y\""], ["proof (prove)\nusing this:\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) = rec MOD Y\n  gSubst MOD xs (Var xs y) (gVar MOD xs y) x X (rec MOD X) =\n  rec MOD (X #[y // x]_xs)\n\ngoal (1 subgoal):\n 1. rec MOD (X #[y // x]_xs) = rec MOD Y", "by simp"], ["proof (state)\nthis:\n  rec MOD (X #[y // x]_xs) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "hence Y_def: \"Y = ?Xsb\""], ["proof (prove)\nusing this:\n  rec MOD (X #[y // x]_xs) = rec MOD Y\n\ngoal (1 subgoal):\n 1. Y = X #[y // x]_xs", "using Y Abs.IH"], ["proof (prove)\nusing this:\n  rec MOD (X #[y // x]_xs) = rec MOD Y\n  wls s Y\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n\ngoal (1 subgoal):\n 1. Y = X #[y // x]_xs", "by (fastforce simp add: termFSbMorph_defs)"], ["proof (state)\nthis:\n  Y = X #[y // x]_xs\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = B", "unfolding B_def Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs y (X #[y // x]_xs)", "using Abs y_fresh"], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X\n  (X, ?Y203) \\<in> swapped \\<Longrightarrow>\n  \\<forall>Y.\n     wls s Y \\<and> rec MOD ?Y203 = rec MOD Y \\<longrightarrow> ?Y203 = Y\n  \\<forall>Y.\n     wls s Y \\<and>\n     rec MOD (X #[?y1.203 // ?y2.203]_?ys203) = rec MOD Y \\<longrightarrow>\n     X #[?y1.203 // ?y2.203]_?ys203 = Y\n  \\<lbrakk>wls s ?Y203; skel ?Y203 = skel X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>Y.\n                       wls s Y \\<and>\n                       rec MOD ?Y203 = rec MOD Y \\<longrightarrow>\n                       ?Y203 = Y\n  fresh xs y X\n\ngoal (1 subgoal):\n 1. Abs xs x X = Abs xs y (X #[y // x]_xs)", "by simp"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "}"], ["proof (state)\nthis:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "using B P wlsAbs_fresh_nchotomy[of xs s B]"], ["proof (prove)\nusing this:\n  \\<lbrakk>wls s ?Y205; B = Abs xs ?y205 ?Y205;\n   \\<forall>s.\n      \\<forall>Y\\<in>termsOfS\n                      (ParS (\\<lambda>xs'. [])\n                        (\\<lambda>s'. if s' = s then [X] else [])\n                        (\\<lambda>us_s. []) [])\n                      s.\n         fresh xs ?y205 Y\\<rbrakk>\n  \\<Longrightarrow> Abs xs x X = B\n  wlsAbs (xs, s) B\n  wlsPar\n   (ParS (\\<lambda>xs'. []) (\\<lambda>s'. if s' = s then [X] else [])\n     (\\<lambda>us_s. []) [])\n  \\<lbrakk>wlsAbs (xs, s) B; wlsPar ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x X.\n                       B = Abs xs x X \\<and>\n                       wls s X \\<and>\n                       (\\<forall>ys. x \\<notin> varsOfS ?P ys) \\<and>\n                       (\\<forall>s'.\n                           \\<forall>Y\\<in>termsOfS ?P s'.\n                              fresh xs x Y) \\<and>\n                       (\\<forall>us s'.\n                           \\<forall>B\\<in>absOfS ?P (us, s').\n                              freshAbs xs x B) \\<and>\n                       (\\<forall>rho\\<in>envsOfS ?P. freshEnv xs x rho)\n\ngoal (1 subgoal):\n 1. Abs xs x X = B", "by blast"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>B.\n     wlsAbs (xs, s) B \\<and>\n     recAbs MOD (Abs xs x X) = recAbs MOD B \\<longrightarrow>\n     Abs xs x X = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (wls s X \\<longrightarrow>\n   (\\<forall>Y.\n       wls s Y \\<and> rec MOD X = rec MOD Y \\<longrightarrow> X = Y)) \\<and>\n  (wlsAbs (us, s') A \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (us, s') B \\<and>\n       recAbs MOD A = recAbs MOD B \\<longrightarrow>\n       A = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "}"], ["proof (state)\nthis:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. isInjAll (rec MOD) (recAbs MOD)", "unfolding isInjAll_defs"], ["proof (prove)\nusing this:\n  (wls ?s205 ?X205 \\<longrightarrow>\n   (\\<forall>Y.\n       wls ?s205 Y \\<and> rec MOD ?X205 = rec MOD Y \\<longrightarrow>\n       ?X205 = Y)) \\<and>\n  (wlsAbs (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<forall>B.\n       wlsAbs (?us205, ?s'205) B \\<and>\n       recAbs MOD ?A205 = recAbs MOD B \\<longrightarrow>\n       ?A205 = B))\n\ngoal (1 subgoal):\n 1. (\\<forall>s X Y.\n        wls s X \\<and> wls s Y \\<longrightarrow>\n        rec MOD X = rec MOD Y \\<longrightarrow> X = Y) \\<and>\n    (\\<forall>us s A B.\n        wlsAbs (us, s) A \\<and> wlsAbs (us, s) B \\<longrightarrow>\n        recAbs MOD A = recAbs MOD B \\<longrightarrow> A = B)", "by blast"], ["proof (state)\nthis:\n  isInjAll (rec MOD) (recAbs MOD)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Criterion for the surjectiveness of the recursive map\\<close>"], ["", "text\\<open>First an auxiliary fact, independent of the type of model:\\<close>"], ["", "lemma gInduct_gConsIndif_recAll_isSurjAll:\nassumes pWls: \"presWlsAll (rec MOD) (recAbs MOD) MOD\"\nand pCons: \"presCons (rec MOD) (recAbs MOD) MOD\"\nand \"gConsIndif MOD\" and *: \"gInduct MOD\"\nshows \"isSurjAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "let ?h = \"rec MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "let ?hA = \"recAbs MOD\""], ["proof (state)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "fix s X us s' A"], ["proof (state)\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "from *"], ["proof (chain)\npicking this:\n  gInduct MOD", "have\n   \"(gWls MOD s X \\<longrightarrow> (\\<exists> X'. wls s X' \\<and> rec MOD X' = X)) \\<and>\n    (gWlsAbs MOD (us,s') A \\<longrightarrow> (\\<exists> A'. wlsAbs (us,s') A' \\<and> recAbs MOD A' = A))\""], ["proof (prove)\nusing this:\n  gInduct MOD\n\ngoal (1 subgoal):\n 1. (gWls MOD s X \\<longrightarrow>\n     (\\<exists>X'. wls s X' \\<and> rec MOD X' = X)) \\<and>\n    (gWlsAbs MOD (us, s') A \\<longrightarrow>\n     (\\<exists>A'. wlsAbs (us, s') A' \\<and> recAbs MOD A' = A))", "proof (elim gInduct_elim, safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       gInduct MOD \\<Longrightarrow>\n       \\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x\n 2. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 3. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "fix xs x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       gInduct MOD \\<Longrightarrow>\n       \\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x\n 2. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 3. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "show \"\\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x", "using pWls pCons"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. \\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x", "by (auto simp: presWlsAll_defs presCons_defs intro: exI[of _ \"Var xs x\"])"], ["proof (state)\nthis:\n  \\<exists>X'. wls (asSort xs) X' \\<and> rec MOD X' = gVar MOD xs x\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "fix delta inp' inp binp' binp"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?ar = \"arOf delta\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?bar = \"barOf delta\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?st = \"stOf delta\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "assume inp': \"wlsInp delta inp'\" and binp': \"wlsBinp delta binp'\"\n     and inp: \"gWlsInp MOD delta inp\" and binp: \"gWlsBinp MOD delta binp\"\n     and IH: \"liftAll2 (\\<lambda>s X. \\<exists>X'. wls s X' \\<and> ?h X' = X) ?ar inp\"\n     and BIH: \"liftAll2 (\\<lambda>us_s A. \\<exists>A'. wlsAbs us_s A' \\<and> ?hA A' = A) ?bar binp\""], ["proof (state)\nthis:\n  wlsInp delta inp'\n  wlsBinp delta binp'\n  gWlsInp MOD delta inp\n  gWlsBinp MOD delta binp\n  liftAll2 (\\<lambda>s X. \\<exists>X'. wls s X' \\<and> rec MOD X' = X)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>us_s A. \\<exists>A'. wlsAbs us_s A' \\<and> recAbs MOD A' = A)\n   (barOf delta) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "(*  *)"], ["proof (state)\nthis:\n  wlsInp delta inp'\n  wlsBinp delta binp'\n  gWlsInp MOD delta inp\n  gWlsBinp MOD delta binp\n  liftAll2 (\\<lambda>s X. \\<exists>X'. wls s X' \\<and> rec MOD X' = X)\n   (arOf delta) inp\n  liftAll2\n   (\\<lambda>us_s A. \\<exists>A'. wlsAbs us_s A' \\<and> recAbs MOD A' = A)\n   (barOf delta) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?phi = \"\\<lambda> s X X'. wls s X' \\<and> ?h X' = X\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "obtain inp1' where inp1'_def:\n     \"inp1' =\n      (\\<lambda> i.\n         case (?ar i, inp i) of\n           (None, None) \\<Rightarrow> None\n          |(Some s, Some X) \\<Rightarrow> Some (SOME X'. ?phi s X X'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>inp1'.\n        inp1' =\n        (\\<lambda>i.\n            case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n            | (Some s, Some X) \\<Rightarrow>\n                Some\n                 (SOME X'.\n                     wls s X' \\<and> rec MOD X' = X)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inp1' =\n  (\\<lambda>i.\n      case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n      | (Some s, Some X) \\<Rightarrow>\n          Some (SOME X'. wls s X' \\<and> rec MOD X' = X))\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "hence [simp]:\n     \"\\<And> i. ?ar i = None \\<and> inp i = None \\<Longrightarrow> inp1' i = None\"\n     \"\\<And> i s X. ?ar i = Some s \\<and> inp i = Some X \\<Longrightarrow> inp1' i = Some (SOME X'. ?phi s X X')\""], ["proof (prove)\nusing this:\n  inp1' =\n  (\\<lambda>i.\n      case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n      | (Some s, Some X) \\<Rightarrow>\n          Some (SOME X'. wls s X' \\<and> rec MOD X' = X))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        arOf delta i = None \\<and> inp i = None \\<Longrightarrow>\n        inp1' i = None) &&&\n    (\\<And>i s X.\n        arOf delta i = Some s \\<and> inp i = Some X \\<Longrightarrow>\n        inp1' i = Some (SOME X'. wls s X' \\<and> rec MOD X' = X))", "unfolding inp1'_def"], ["proof (prove)\nusing this:\n  (\\<lambda>i.\n      case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n      | (Some s, Some X) \\<Rightarrow>\n          Some (SOME X'. wls s X' \\<and> rec MOD X' = X)) =\n  (\\<lambda>i.\n      case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n      | (Some s, Some X) \\<Rightarrow>\n          Some (SOME X'. wls s X' \\<and> rec MOD X' = X))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        arOf delta i = None \\<and> inp i = None \\<Longrightarrow>\n        (case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n         | (Some s, Some X) \\<Rightarrow>\n             Some (SOME X'. wls s X' \\<and> rec MOD X' = X)) =\n        None) &&&\n    (\\<And>i s X.\n        arOf delta i = Some s \\<and> inp i = Some X \\<Longrightarrow>\n        (case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n         | (Some s, Some X) \\<Rightarrow>\n             Some (SOME X'. wls s X' \\<and> rec MOD X' = X)) =\n        Some (SOME X'. wls s X' \\<and> rec MOD X' = X))", "by auto"], ["proof (state)\nthis:\n  arOf delta ?i203 = None \\<and> inp ?i203 = None \\<Longrightarrow>\n  inp1' ?i203 = None\n  arOf delta ?i203 = Some ?s203 \\<and>\n  inp ?i203 = Some ?X203 \\<Longrightarrow>\n  inp1' ?i203 = Some (SOME X'. wls ?s203 X' \\<and> rec MOD X' = ?X203)\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have inp1': \"wlsInp delta inp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsInp delta inp1'", "unfolding wlsInp_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    sameDom (arOf delta) inp1' \\<and> liftAll2 wls (arOf delta) inp1'", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. wlsOpS delta\n 2. sameDom (arOf delta) inp1'\n 3. liftAll2 wls (arOf delta) inp1'", "show \"sameDom ?ar inp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (arOf delta) inp1'", "unfolding sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (arOf delta i = None) = (inp1' i = None)", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. (arOf delta i = None) = (inp1' i = None)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. (arOf delta i = None) = (inp1' i = None)", "have \"(?ar i = None) = (inp i = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (arOf delta i = None) = (inp i = None)", "using inp"], ["proof (prove)\nusing this:\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. (arOf delta i = None) = (inp i = None)", "unfolding gWlsInp_def sameDom_def"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  (\\<forall>i. (arOf delta i = None) = (inp i = None)) \\<and>\n  liftAll2 (gWls MOD) (arOf delta) inp\n\ngoal (1 subgoal):\n 1. (arOf delta i = None) = (inp i = None)", "by simp"], ["proof (state)\nthis:\n  (arOf delta i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. \\<And>i. (arOf delta i = None) = (inp1' i = None)", "thus \"(?ar i = None) = (inp1' i = None)\""], ["proof (prove)\nusing this:\n  (arOf delta i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (arOf delta i = None) = (inp1' i = None)", "unfolding inp1'_def"], ["proof (prove)\nusing this:\n  (arOf delta i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (arOf delta i = None) =\n    ((case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n      | (Some s, Some X) \\<Rightarrow>\n          Some (SOME X'. wls s X' \\<and> rec MOD X' = X)) =\n     None)", "by auto"], ["proof (state)\nthis:\n  (arOf delta i = None) = (inp1' i = None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sameDom (arOf delta) inp1'\n\ngoal (2 subgoals):\n 1. wlsOpS delta\n 2. liftAll2 wls (arOf delta) inp1'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. wlsOpS delta\n 2. liftAll2 wls (arOf delta) inp1'", "show \"liftAll2 wls ?ar inp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 wls (arOf delta) inp1'", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       arOf delta i = Some v1 \\<and> inp1' i = Some v2 \\<longrightarrow>\n       wls v1 v2", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "fix i s X1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "assume ari: \"?ar i = Some s\" and inp1'i: \"inp1' i = Some X1'\""], ["proof (state)\nthis:\n  arOf delta i = Some s\n  inp1' i = Some X1'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "have \"sameDom inp ?ar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp (arOf delta)", "using inp"], ["proof (prove)\nusing this:\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. sameDom inp (arOf delta)", "unfolding gWlsInp_def"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  sameDom (arOf delta) inp \\<and> liftAll2 (gWls MOD) (arOf delta) inp\n\ngoal (1 subgoal):\n 1. sameDom inp (arOf delta)", "using sameDom_sym"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  sameDom (arOf delta) inp \\<and> liftAll2 (gWls MOD) (arOf delta) inp\n  sameDom ?inp ?inp' = sameDom ?inp' ?inp\n\ngoal (1 subgoal):\n 1. sameDom inp (arOf delta)", "by blast"], ["proof (state)\nthis:\n  sameDom inp (arOf delta)\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "then"], ["proof (chain)\npicking this:\n  sameDom inp (arOf delta)", "obtain X where inpi: \"inp i = Some X\""], ["proof (prove)\nusing this:\n  sameDom inp (arOf delta)\n\ngoal (1 subgoal):\n 1. (\\<And>X. inp i = Some X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ari"], ["proof (prove)\nusing this:\n  sameDom inp (arOf delta)\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. (\\<And>X. inp i = Some X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp i = None) = (arOf delta i = None)\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. (\\<And>X. inp i = Some X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"inp i\") auto"], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "hence X1'_def: \"X1' = (SOME X1'. ?phi s X X1')\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. X1' = (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)", "using ari inp1'i"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  inp1' i = Some X1'\n\ngoal (1 subgoal):\n 1. X1' = (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)", "unfolding inp1'_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  (case (arOf delta i, inp i) of (None, None) \\<Rightarrow> None\n   | (Some s, Some X) \\<Rightarrow>\n       Some (SOME X'. wls s X' \\<and> rec MOD X' = X)) =\n  Some X1'\n\ngoal (1 subgoal):\n 1. X1' = (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)", "by simp"], ["proof (state)\nthis:\n  X1' = (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "obtain X' where X': \"?phi s X X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using inpi ari IH"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  liftAll2 (\\<lambda>s X. \\<exists>X'. wls s X' \\<and> rec MOD X' = X)\n   (arOf delta) inp\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<exists>X'. wls v1 X' \\<and> rec MOD X' = v2)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wls s X' \\<and> rec MOD X' = X\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "hence \"?phi s X X1'\""], ["proof (prove)\nusing this:\n  wls s X' \\<and> rec MOD X' = X\n\ngoal (1 subgoal):\n 1. wls s X1' \\<and> rec MOD X1' = X", "unfolding X1'_def"], ["proof (prove)\nusing this:\n  wls s X' \\<and> rec MOD X' = X\n\ngoal (1 subgoal):\n 1. wls s (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) \\<and>\n    rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) = X", "by(rule someI[of \"?phi s X\"])"], ["proof (state)\nthis:\n  wls s X1' \\<and> rec MOD X1' = X\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>arOf delta i = Some v1; inp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wls v1 v2", "thus \"wls s X1'\""], ["proof (prove)\nusing this:\n  wls s X1' \\<and> rec MOD X1' = X\n\ngoal (1 subgoal):\n 1. wls s X1'", "by simp"], ["proof (state)\nthis:\n  wls s X1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  liftAll2 wls (arOf delta) inp1'\n\ngoal (1 subgoal):\n 1. wlsOpS delta", "qed(insert binp' wlsBinp.cases, blast)"], ["proof (state)\nthis:\n  wlsInp delta inp1'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "(* *)"], ["proof (state)\nthis:\n  wlsInp delta inp1'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have lift_inp1': \"lift ?h inp1' = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' = inp", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (rec MOD) inp1' x = inp x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (rec MOD) inp1' x = inp x", "let ?linp1' = \"lift ?h inp1'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (rec MOD) inp1' x = inp x", "show \"?linp1' i = inp i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i = inp i", "proof(cases \"inp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> lift (rec MOD) inp1' i = inp i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "case None"], ["proof (state)\nthis:\n  inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> lift (rec MOD) inp1' i = inp i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "hence \"?ar i = None\""], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. arOf delta i = None", "using inp"], ["proof (prove)\nusing this:\n  inp i = None\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. arOf delta i = None", "unfolding gWlsInp_def sameDom_def"], ["proof (prove)\nusing this:\n  inp i = None\n  wlsOpS delta \\<and>\n  (\\<forall>i. (arOf delta i = None) = (inp i = None)) \\<and>\n  liftAll2 (gWls MOD) (arOf delta) inp\n\ngoal (1 subgoal):\n 1. arOf delta i = None", "by simp"], ["proof (state)\nthis:\n  arOf delta i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> lift (rec MOD) inp1' i = inp i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "hence \"inp1' i = None\""], ["proof (prove)\nusing this:\n  arOf delta i = None\n\ngoal (1 subgoal):\n 1. inp1' i = None", "using None"], ["proof (prove)\nusing this:\n  arOf delta i = None\n  inp i = None\n\ngoal (1 subgoal):\n 1. inp1' i = None", "by simp"], ["proof (state)\nthis:\n  inp1' i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> lift (rec MOD) inp1' i = inp i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "thus \"lift (rec MOD) inp1' i = inp i\""], ["proof (prove)\nusing this:\n  inp1' i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i = inp i", "using None"], ["proof (prove)\nusing this:\n  inp1' i = None\n  inp i = None\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i = inp i", "by (auto simp: lift_def)"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' i = inp i\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "case (Some X)"], ["proof (state)\nthis:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "then"], ["proof (chain)\npicking this:\n  inp i = Some X", "obtain s where ari: \"?ar i = Some s\""], ["proof (prove)\nusing this:\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inp"], ["proof (prove)\nusing this:\n  inp i = Some X\n  gWlsInp MOD delta inp\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding gWlsInp_def sameDom_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  wlsOpS delta \\<and>\n  (\\<forall>i. (arOf delta i = None) = (inp i = None)) \\<and>\n  liftAll2 (gWls MOD) (arOf delta) inp\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        arOf delta i = Some s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"?ar i\") auto"], ["proof (state)\nthis:\n  arOf delta i = Some s\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "let ?X1' = \"SOME X1'. ?phi s X X1'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "have inp1'i: \"inp1' i = Some ?X1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp1' i = Some (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)", "using ari Some"], ["proof (prove)\nusing this:\n  arOf delta i = Some s\n  inp i = Some X\n\ngoal (1 subgoal):\n 1. inp1' i = Some (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)", "by simp"], ["proof (state)\nthis:\n  inp1' i = Some (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "hence linp1'i: \"?linp1' i = Some (?h ?X1')\""], ["proof (prove)\nusing this:\n  inp1' i = Some (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i =\n    Some (rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X))", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp1' i = Some (SOME X1'. wls s X1' \\<and> rec MOD X1' = X)\n\ngoal (1 subgoal):\n 1. (case inp1' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (rec MOD v)) =\n    Some (rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X))", "by simp"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' i =\n  Some (rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X))\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "obtain X' where X': \"?phi s X X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Some ari IH"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  liftAll2 (\\<lambda>s X. \\<exists>X'. wls s X' \\<and> rec MOD X' = X)\n   (arOf delta) inp\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  inp i = Some X\n  arOf delta i = Some s\n  \\<forall>i v1 v2.\n     arOf delta i = Some v1 \\<and> inp i = Some v2 \\<longrightarrow>\n     (\\<exists>X'. wls v1 X' \\<and> rec MOD X' = v2)\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        wls s X' \\<and> rec MOD X' = X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wls s X' \\<and> rec MOD X' = X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "hence \"?phi s X ?X1'\""], ["proof (prove)\nusing this:\n  wls s X' \\<and> rec MOD X' = X\n\ngoal (1 subgoal):\n 1. wls s (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) \\<and>\n    rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) = X", "by(rule someI[of \"?phi s X\"])"], ["proof (state)\nthis:\n  wls s (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) \\<and>\n  rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) = X\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> lift (rec MOD) inp1' i = inp i", "thus \"lift (rec MOD) inp1' i = inp i\""], ["proof (prove)\nusing this:\n  wls s (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) \\<and>\n  rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) = X\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i = inp i", "using Some linp1'i"], ["proof (prove)\nusing this:\n  wls s (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) \\<and>\n  rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X) = X\n  inp i = Some X\n  lift (rec MOD) inp1' i =\n  Some (rec MOD (SOME X1'. wls s X1' \\<and> rec MOD X1' = X))\n\ngoal (1 subgoal):\n 1. lift (rec MOD) inp1' i = inp i", "by (auto simp: lift_def)"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' i = inp i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' i = inp i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' = inp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "(*  *)"], ["proof (state)\nthis:\n  lift (rec MOD) inp1' = inp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?bphi = \"\\<lambda> (us,s) A A'. wlsAbs (us,s) A' \\<and> ?hA A' = A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "obtain binp1' where binp1'_def:\n     \"binp1' =\n      (\\<lambda> i.\n         case (?bar i, binp i) of\n           (None, None) \\<Rightarrow> None\n          |(Some (us,s), Some A) \\<Rightarrow> Some (SOME A'. ?bphi (us,s) A A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>binp1'.\n        binp1' =\n        (\\<lambda>i.\n            case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n            | (Some (us, s), Some A) \\<Rightarrow>\n                Some\n                 (SOME A'.\n                     (case (us, s) of\n                      (us, s) \\<Rightarrow>\n                        \\<lambda>A A'.\n                           wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                      A A')) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  binp1' =\n  (\\<lambda>i.\n      case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n      | (Some (us, s), Some A) \\<Rightarrow>\n          Some\n           (SOME A'.\n               (case (us, s) of\n                (us, s) \\<Rightarrow>\n                  \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                A A'))\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "hence [simp]:\n     \"\\<And> i. ?bar i = None \\<and> binp i = None \\<Longrightarrow> binp1' i = None\"\n     and *:\n     \"\\<And> i us s A. ?bar i = Some (us,s) \\<and> binp i = Some A \\<Longrightarrow>\n        binp1' i = Some (SOME A'. ?bphi (us,s) A A')\""], ["proof (prove)\nusing this:\n  binp1' =\n  (\\<lambda>i.\n      case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n      | (Some (us, s), Some A) \\<Rightarrow>\n          Some\n           (SOME A'.\n               (case (us, s) of\n                (us, s) \\<Rightarrow>\n                  \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                A A'))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        barOf delta i = None \\<and> binp i = None \\<Longrightarrow>\n        binp1' i = None) &&&\n    (\\<And>i us s A.\n        barOf delta i = Some (us, s) \\<and>\n        binp i = Some A \\<Longrightarrow>\n        binp1' i =\n        Some\n         (SOME A'.\n             (case (us, s) of\n              (us, s) \\<Rightarrow>\n                \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n              A A'))", "unfolding binp1'_def"], ["proof (prove)\nusing this:\n  (\\<lambda>i.\n      case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n      | (Some (us, s), Some A) \\<Rightarrow>\n          Some\n           (Eps ((case (us, s) of\n                  (us, s) \\<Rightarrow>\n                    \\<lambda>A A'.\n                       wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                  A))) =\n  (\\<lambda>i.\n      case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n      | (Some (us, s), Some A) \\<Rightarrow>\n          Some\n           (SOME A'.\n               (case (us, s) of\n                (us, s) \\<Rightarrow>\n                  \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                A A'))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        barOf delta i = None \\<and> binp i = None \\<Longrightarrow>\n        (case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n         | (Some (us, s), Some A) \\<Rightarrow>\n             Some\n              (Eps ((case (us, s) of\n                     (us, s) \\<Rightarrow>\n                       \\<lambda>A A'.\n                          wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                     A))) =\n        None) &&&\n    (\\<And>i us s A.\n        barOf delta i = Some (us, s) \\<and>\n        binp i = Some A \\<Longrightarrow>\n        (case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n         | (Some (us, s), Some A) \\<Rightarrow>\n             Some\n              (Eps ((case (us, s) of\n                     (us, s) \\<Rightarrow>\n                       \\<lambda>A A'.\n                          wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                     A))) =\n        Some\n         (SOME A'.\n             (case (us, s) of\n              (us, s) \\<Rightarrow>\n                \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n              A A'))", "by auto"], ["proof (state)\nthis:\n  barOf delta ?i203 = None \\<and> binp ?i203 = None \\<Longrightarrow>\n  binp1' ?i203 = None\n  barOf delta ?i203 = Some (?us203, ?s203) \\<and>\n  binp ?i203 = Some ?A203 \\<Longrightarrow>\n  binp1' ?i203 =\n  Some\n   (SOME A'.\n       (case (?us203, ?s203) of\n        (us, s) \\<Rightarrow>\n          \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n        ?A203 A')\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have binp1': \"wlsBinp delta binp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsBinp delta binp1'", "unfolding wlsBinp_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlsOpS delta \\<and>\n    sameDom (barOf delta) binp1' \\<and> liftAll2 wlsAbs (barOf delta) binp1'", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. wlsOpS delta\n 2. sameDom (barOf delta) binp1'\n 3. liftAll2 wlsAbs (barOf delta) binp1'", "show \"sameDom ?bar binp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (barOf delta) binp1'", "unfolding sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (barOf delta i = None) = (binp1' i = None)", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. (barOf delta i = None) = (binp1' i = None)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. (barOf delta i = None) = (binp1' i = None)", "have \"(?bar i = None) = (binp i = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (barOf delta i = None) = (binp i = None)", "using binp"], ["proof (prove)\nusing this:\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. (barOf delta i = None) = (binp i = None)", "unfolding gWlsBinp_def sameDom_def"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  (\\<forall>i. (barOf delta i = None) = (binp i = None)) \\<and>\n  liftAll2 (gWlsAbs MOD) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. (barOf delta i = None) = (binp i = None)", "by simp"], ["proof (state)\nthis:\n  (barOf delta i = None) = (binp i = None)\n\ngoal (1 subgoal):\n 1. \\<And>i. (barOf delta i = None) = (binp1' i = None)", "thus \"(?bar i = None) = (binp1' i = None)\""], ["proof (prove)\nusing this:\n  (barOf delta i = None) = (binp i = None)\n\ngoal (1 subgoal):\n 1. (barOf delta i = None) = (binp1' i = None)", "unfolding binp1'_def"], ["proof (prove)\nusing this:\n  (barOf delta i = None) = (binp i = None)\n\ngoal (1 subgoal):\n 1. (barOf delta i = None) =\n    ((case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n      | (Some (us, s), Some A) \\<Rightarrow>\n          Some\n           (Eps ((case (us, s) of\n                  (us, s) \\<Rightarrow>\n                    \\<lambda>A A'.\n                       wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n                  A))) =\n     None)", "by auto"], ["proof (state)\nthis:\n  (barOf delta i = None) = (binp1' i = None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sameDom (barOf delta) binp1'\n\ngoal (2 subgoals):\n 1. wlsOpS delta\n 2. liftAll2 wlsAbs (barOf delta) binp1'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. wlsOpS delta\n 2. liftAll2 wlsAbs (barOf delta) binp1'", "show \"liftAll2 wlsAbs ?bar binp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 wlsAbs (barOf delta) binp1'", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       barOf delta i = Some v1 \\<and> binp1' i = Some v2 \\<longrightarrow>\n       wlsAbs v1 v2", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "fix i us s A1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "assume bari: \"?bar i = Some (us,s)\" and binp1'i: \"binp1' i = Some A1'\""], ["proof (state)\nthis:\n  barOf delta i = Some (us, s)\n  binp1' i = Some A1'\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "have \"sameDom binp ?bar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom binp (barOf delta)", "using binp"], ["proof (prove)\nusing this:\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. sameDom binp (barOf delta)", "unfolding gWlsBinp_def"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  sameDom (barOf delta) binp \\<and>\n  liftAll2 (gWlsAbs MOD) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. sameDom binp (barOf delta)", "using sameDom_sym"], ["proof (prove)\nusing this:\n  wlsOpS delta \\<and>\n  sameDom (barOf delta) binp \\<and>\n  liftAll2 (gWlsAbs MOD) (barOf delta) binp\n  sameDom ?inp ?inp' = sameDom ?inp' ?inp\n\ngoal (1 subgoal):\n 1. sameDom binp (barOf delta)", "by blast"], ["proof (state)\nthis:\n  sameDom binp (barOf delta)\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "then"], ["proof (chain)\npicking this:\n  sameDom binp (barOf delta)", "obtain A where binpi: \"binp i = Some A\""], ["proof (prove)\nusing this:\n  sameDom binp (barOf delta)\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bari"], ["proof (prove)\nusing this:\n  sameDom binp (barOf delta)\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (binp i = None) = (barOf delta i = None)\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"binp i\", auto)"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "hence A1'_def: \"A1' = (SOME A1'. ?bphi (us,s) A A1')\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. A1' =\n    (SOME A1'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A1')", "using bari binp1'i"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  binp1' i = Some A1'\n\ngoal (1 subgoal):\n 1. A1' =\n    (SOME A1'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A1')", "unfolding binp1'_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  (case (barOf delta i, binp i) of (None, None) \\<Rightarrow> None\n   | (Some (us, s), Some A) \\<Rightarrow>\n       Some\n        (Eps ((case (us, s) of\n               (us, s) \\<Rightarrow>\n                 \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n               A))) =\n  Some A1'\n\ngoal (1 subgoal):\n 1. A1' =\n    (SOME A1'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A1')", "by simp"], ["proof (state)\nthis:\n  A1' =\n  (SOME A1'.\n      (case (us, s) of\n       (us, s) \\<Rightarrow>\n         \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n       A A1')\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "obtain A' where A': \"?bphi (us,s) A A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using binpi bari BIH"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  liftAll2\n   (\\<lambda>us_s A. \\<exists>A'. wlsAbs us_s A' \\<and> recAbs MOD A' = A)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<exists>A'. wlsAbs v1 A' \\<and> recAbs MOD A' = v2)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A'\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "hence \"?bphi (us,s) A A1'\""], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A'\n\ngoal (1 subgoal):\n 1. (case (us, s) of\n     (us, s) \\<Rightarrow>\n       \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n     A A1'", "unfolding A1'_def"], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A'\n\ngoal (1 subgoal):\n 1. (case (us, s) of\n     (us, s) \\<Rightarrow>\n       \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n     A (Eps ((case (us, s) of\n              (us, s) \\<Rightarrow>\n                \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n              A))", "by(rule someI[of \"?bphi (us,s) A\"])"], ["proof (state)\nthis:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A1'\n\ngoal (1 subgoal):\n 1. \\<And>i a b v2.\n       \\<lbrakk>barOf delta i = Some (a, b); binp1' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> wlsAbs (a, b) v2", "thus \"wlsAbs (us,s) A1'\""], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A1'\n\ngoal (1 subgoal):\n 1. wlsAbs (us, s) A1'", "by simp"], ["proof (state)\nthis:\n  wlsAbs (us, s) A1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  liftAll2 wlsAbs (barOf delta) binp1'\n\ngoal (1 subgoal):\n 1. wlsOpS delta", "qed(insert binp' wlsBinp.cases, blast)"], ["proof (state)\nthis:\n  wlsBinp delta binp1'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "(* *)"], ["proof (state)\nthis:\n  wlsBinp delta binp1'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have lift_binp1': \"lift ?hA binp1' = binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' = binp", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (recAbs MOD) binp1' x = binp x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (recAbs MOD) binp1' x = binp x", "let ?lbinp1' = \"lift ?hA binp1'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lift (recAbs MOD) binp1' x = binp x", "show \"?lbinp1' i = binp i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i = binp i", "proof(cases \"binp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "case None"], ["proof (state)\nthis:\n  binp i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "hence \"?bar i = None\""], ["proof (prove)\nusing this:\n  binp i = None\n\ngoal (1 subgoal):\n 1. barOf delta i = None", "using binp"], ["proof (prove)\nusing this:\n  binp i = None\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. barOf delta i = None", "unfolding gWlsBinp_def sameDom_def"], ["proof (prove)\nusing this:\n  binp i = None\n  wlsOpS delta \\<and>\n  (\\<forall>i. (barOf delta i = None) = (binp i = None)) \\<and>\n  liftAll2 (gWlsAbs MOD) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. barOf delta i = None", "by simp"], ["proof (state)\nthis:\n  barOf delta i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "hence \"binp1' i = None\""], ["proof (prove)\nusing this:\n  barOf delta i = None\n\ngoal (1 subgoal):\n 1. binp1' i = None", "using None"], ["proof (prove)\nusing this:\n  barOf delta i = None\n  binp i = None\n\ngoal (1 subgoal):\n 1. binp1' i = None", "by simp"], ["proof (state)\nthis:\n  binp1' i = None\n\ngoal (2 subgoals):\n 1. binp i = None \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i\n 2. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "thus \"lift (recAbs MOD) binp1' i = binp i\""], ["proof (prove)\nusing this:\n  binp1' i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i = binp i", "using None"], ["proof (prove)\nusing this:\n  binp1' i = None\n  binp i = None\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i = binp i", "by (simp add: lift_def)"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' i = binp i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "case (Some A)"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "then"], ["proof (chain)\npicking this:\n  binp i = Some A", "obtain us s where bari: \"?bar i = Some (us,s)\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using binp"], ["proof (prove)\nusing this:\n  binp i = Some A\n  gWlsBinp MOD delta binp\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding gWlsBinp_def sameDom_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  wlsOpS delta \\<and>\n  (\\<forall>i. (barOf delta i = None) = (binp i = None)) \\<and>\n  liftAll2 (gWlsAbs MOD) (barOf delta) binp\n\ngoal (1 subgoal):\n 1. (\\<And>us s.\n        barOf delta i = Some (us, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"?bar i\", auto)"], ["proof (state)\nthis:\n  barOf delta i = Some (us, s)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "let ?A1' = \"SOME A1'. ?bphi (us,s) A A1'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "have binp1'i: \"binp1' i = Some ?A1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binp1' i =\n    Some\n     (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1')", "using bari Some *[of i us s A]"], ["proof (prove)\nusing this:\n  barOf delta i = Some (us, s)\n  binp i = Some A\n  barOf delta i = Some (us, s) \\<and> binp i = Some A \\<Longrightarrow>\n  binp1' i =\n  Some\n   (SOME A'.\n       (case (us, s) of\n        (us, s) \\<Rightarrow>\n          \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n        A A')\n\ngoal (1 subgoal):\n 1. binp1' i =\n    Some\n     (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1')", "by simp"], ["proof (state)\nthis:\n  binp1' i =\n  Some\n   (SOME A1'.\n       (case (us, s) of\n        (us, s) \\<Rightarrow>\n          \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n        A A1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "hence lbinp1'i: \"?lbinp1' i = Some (?hA ?A1')\""], ["proof (prove)\nusing this:\n  binp1' i =\n  Some\n   (SOME A1'.\n       (case (us, s) of\n        (us, s) \\<Rightarrow>\n          \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n        A A1')\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i =\n    Some\n     (recAbs MOD\n       (SOME A1'.\n           (case (us, s) of\n            (us, s) \\<Rightarrow>\n              \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n            A A1'))", "unfolding lift_def"], ["proof (prove)\nusing this:\n  binp1' i =\n  Some\n   (SOME A1'.\n       (case (us, s) of\n        (us, s) \\<Rightarrow>\n          \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n        A A1')\n\ngoal (1 subgoal):\n 1. (case binp1' i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (recAbs MOD v)) =\n    Some\n     (recAbs MOD\n       (SOME A1'.\n           (case (us, s) of\n            (us, s) \\<Rightarrow>\n              \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n            A A1'))", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' i =\n  Some\n   (recAbs MOD\n     (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "obtain A' where A': \"?bphi (us,s) A A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Some bari BIH"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  liftAll2\n   (\\<lambda>us_s A. \\<exists>A'. wlsAbs us_s A' \\<and> recAbs MOD A' = A)\n   (barOf delta) binp\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  barOf delta i = Some (us, s)\n  \\<forall>i v1 v2.\n     barOf delta i = Some v1 \\<and> binp i = Some v2 \\<longrightarrow>\n     (\\<exists>A'. wlsAbs v1 A' \\<and> recAbs MOD A' = v2)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        (case (us, s) of\n         (us, s) \\<Rightarrow>\n           \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n         A A' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "hence \"?bphi (us,s) A ?A1'\""], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A A'\n\ngoal (1 subgoal):\n 1. (case (us, s) of\n     (us, s) \\<Rightarrow>\n       \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n     A (SOME A1'.\n           (case (us, s) of\n            (us, s) \\<Rightarrow>\n              \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n            A A1')", "by(rule someI[of \"?bphi (us,s) A\"])"], ["proof (state)\nthis:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       binp i = Some a \\<Longrightarrow> lift (recAbs MOD) binp1' i = binp i", "thus \"lift (recAbs MOD) binp1' i = binp i\""], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1')\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i = binp i", "using Some lbinp1'i"], ["proof (prove)\nusing this:\n  (case (us, s) of\n   (us, s) \\<Rightarrow>\n     \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n   A (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1')\n  binp i = Some A\n  lift (recAbs MOD) binp1' i =\n  Some\n   (recAbs MOD\n     (SOME A1'.\n         (case (us, s) of\n          (us, s) \\<Rightarrow>\n            \\<lambda>A A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A)\n          A A1'))\n\ngoal (1 subgoal):\n 1. lift (recAbs MOD) binp1' i = binp i", "by simp"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' i = binp i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' i = binp i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' = binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "(*  *)"], ["proof (state)\nthis:\n  lift (recAbs MOD) binp1' = binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "let ?X' = \"Op delta inp1' binp1'\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have X': \"wls ?st ?X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wls (stOf delta) (Op delta inp1' binp1')", "using inp1' binp1'"], ["proof (prove)\nusing this:\n  wlsInp delta inp1'\n  wlsBinp delta binp1'\n\ngoal (1 subgoal):\n 1. wls (stOf delta) (Op delta inp1' binp1')", "by simp"], ["proof (state)\nthis:\n  wls (stOf delta) (Op delta inp1' binp1')\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "have \"?h ?X' = gOp MOD delta inp1' inp binp1' binp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp", "using inp1' binp1' pCons lift_inp1' lift_binp1'"], ["proof (prove)\nusing this:\n  wlsInp delta inp1'\n  wlsBinp delta binp1'\n  presCons (rec MOD) (recAbs MOD) MOD\n  lift (rec MOD) inp1' = inp\n  lift (recAbs MOD) binp1' = binp\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp", "unfolding presCons_defs"], ["proof (prove)\nusing this:\n  wlsInp delta inp1'\n  wlsBinp delta binp1'\n  (\\<forall>xs x. rec MOD (Var xs x) = gVar MOD xs x) \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  (\\<forall>delta inp binp.\n      wlsInp delta inp \\<and> wlsBinp delta binp \\<longrightarrow>\n      rec MOD (Op delta inp binp) =\n      gOp MOD delta inp (lift (rec MOD) inp) binp (lift (recAbs MOD) binp))\n  lift (rec MOD) inp1' = inp\n  lift (recAbs MOD) binp1' = binp\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp", "by simp"], ["proof (state)\nthis:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "hence \"?h ?X' = gOp MOD delta inp' inp binp' binp\""], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp", "using inp' inp1' inp binp' binp1' binp assms"], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp\n  wlsInp delta inp'\n  wlsInp delta inp1'\n  gWlsInp MOD delta inp\n  wlsBinp delta binp'\n  wlsBinp delta binp1'\n  gWlsBinp MOD delta binp\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  gConsIndif MOD\n  gInduct MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp", "unfolding gConsIndif_defs"], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp1' inp binp1' binp\n  wlsInp delta inp'\n  wlsInp delta inp1'\n  gWlsInp MOD delta inp\n  wlsBinp delta binp'\n  wlsBinp delta binp1'\n  gWlsBinp MOD delta binp\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  (\\<forall>delta inp1' inp2' inp binp1' binp2' binp.\n      wlsInp delta inp1' \\<and>\n      wlsBinp delta binp1' \\<and>\n      wlsInp delta inp2' \\<and>\n      wlsBinp delta binp2' \\<and>\n      gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n      gOp MOD delta inp1' inp binp1' binp =\n      gOp MOD delta inp2' inp binp2' binp) \\<and>\n  (\\<forall>xs s x X1' X2' X.\n      isInBar (xs, s) \\<and>\n      wls s X1' \\<and> wls s X2' \\<and> gWls MOD s X \\<longrightarrow>\n      gAbs MOD xs x X1' X = gAbs MOD xs x X2' X)\n  gInduct MOD\n\ngoal (1 subgoal):\n 1. rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp", "by metis"], ["proof (state)\nthis:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp' inp binp' binp.\n       \\<lbrakk>wlsInp delta inp'; wlsBinp delta binp';\n        gWlsInp MOD delta inp; gWlsBinp MOD delta binp;\n        liftAll2 (\\<lambda>a b. \\<exists>X'. wls a X' \\<and> rec MOD X' = b)\n         (arOf delta) inp;\n        liftAll2\n         (\\<lambda>a b. \\<exists>A'. wlsAbs a A' \\<and> recAbs MOD A' = b)\n         (barOf delta) binp;\n        gInduct MOD\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X'.\n                            wls (stOf delta) X' \\<and>\n                            rec MOD X' = gOp MOD delta inp' inp binp' binp\n 2. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "thus \"\\<exists>X'. wls (stOf delta) X' \\<and> ?h X' = gOp MOD delta inp' inp binp' binp\""], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       wls (stOf delta) X' \\<and>\n       rec MOD X' = gOp MOD delta inp' inp binp' binp", "using X'"], ["proof (prove)\nusing this:\n  rec MOD (Op delta inp1' binp1') = gOp MOD delta inp' inp binp' binp\n  wls (stOf delta) (Op delta inp1' binp1')\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       wls (stOf delta) X' \\<and>\n       rec MOD X' = gOp MOD delta inp' inp binp' binp", "by blast"], ["proof (state)\nthis:\n  \\<exists>X'.\n     wls (stOf delta) X' \\<and>\n     rec MOD X' = gOp MOD delta inp' inp binp' binp\n\ngoal (1 subgoal):\n 1. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "fix xs s x X' X1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "assume xs_s: \"isInBar (xs,s)\" and X': \"wls s X'\" and\n     hX1': \"gWls MOD s (?h X1')\" and X1': \"wls s X1'\""], ["proof (state)\nthis:\n  isInBar (xs, s)\n  wls s X'\n  gWls MOD s (rec MOD X1')\n  wls s X1'\n\ngoal (1 subgoal):\n 1. \\<And>xs s x X' X X'a.\n       \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X'a);\n        gInduct MOD; wls s X'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            wlsAbs (xs, s) A' \\<and>\n                            recAbs MOD A' = gAbs MOD xs x X' (rec MOD X'a)", "thus \"\\<exists>A'. wlsAbs (xs,s) A' \\<and> ?hA A' = gAbs MOD xs x X' (?h X1')\""], ["proof (prove)\nusing this:\n  isInBar (xs, s)\n  wls s X'\n  gWls MOD s (rec MOD X1')\n  wls s X1'\n\ngoal (1 subgoal):\n 1. \\<exists>A'.\n       wlsAbs (xs, s) A' \\<and>\n       recAbs MOD A' = gAbs MOD xs x X' (rec MOD X1')", "apply(intro exI[of _ \"Abs xs x X1'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1');\n     wls s X1'\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1') \\<and>\n                      recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "using pCons"], ["proof (prove)\nusing this:\n  presCons (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1');\n     wls s X1'\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1') \\<and>\n                      recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "unfolding presCons_def presAbs_def"], ["proof (prove)\nusing this:\n  presVar (rec MOD) MOD \\<and>\n  (\\<forall>xs x s X.\n      isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n      recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)) \\<and>\n  presOp (rec MOD) (recAbs MOD) MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1');\n     wls s X1'\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1') \\<and>\n                      recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1')\n 2. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "apply(elim allE[of _ xs])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD; presOp (rec MOD) (recAbs MOD) MOD;\n     \\<forall>x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1')\n 2. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "apply(elim allE[of _ x])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD; presOp (rec MOD) (recAbs MOD) MOD;\n     \\<forall>s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1')\n 2. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "apply(elim allE[of _ s])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD; presOp (rec MOD) (recAbs MOD) MOD;\n     \\<forall>X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X)\\<rbrakk>\n    \\<Longrightarrow> wlsAbs (xs, s) (Abs xs x X1')\n 2. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> recAbs MOD (Abs xs x X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> gAbs MOD xs x X1' (rec MOD X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "using assms"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  gConsIndif MOD\n  gInduct MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> gAbs MOD xs x X1' (rec MOD X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "unfolding gConsIndif_defs"], ["proof (prove)\nusing this:\n  presWlsAll (rec MOD) (recAbs MOD) MOD\n  presCons (rec MOD) (recAbs MOD) MOD\n  (\\<forall>delta inp1' inp2' inp binp1' binp2' binp.\n      wlsInp delta inp1' \\<and>\n      wlsBinp delta binp1' \\<and>\n      wlsInp delta inp2' \\<and>\n      wlsBinp delta binp2' \\<and>\n      gWlsInp MOD delta inp \\<and> gWlsBinp MOD delta binp \\<longrightarrow>\n      gOp MOD delta inp1' inp binp1' binp =\n      gOp MOD delta inp2' inp binp2' binp) \\<and>\n  (\\<forall>xs s x X1' X2' X.\n      isInBar (xs, s) \\<and>\n      wls s X1' \\<and> wls s X2' \\<and> gWls MOD s X \\<longrightarrow>\n      gAbs MOD xs x X1' X = gAbs MOD xs x X2' X)\n  gInduct MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isInBar (xs, s); wls s X'; gWls MOD s (rec MOD X1'); wls s X1';\n     presVar (rec MOD) MOD;\n     \\<forall>xs x s X.\n        isInBar (xs, s) \\<and> wls s X \\<longrightarrow>\n        recAbs MOD (Abs xs x X) = gAbs MOD xs x X (rec MOD X);\n     presOp (rec MOD) (recAbs MOD) MOD\\<rbrakk>\n    \\<Longrightarrow> gAbs MOD xs x X1' (rec MOD X1') =\n                      gAbs MOD xs x X' (rec MOD X1')", "by blast"], ["proof (state)\nthis:\n  \\<exists>A'.\n     wlsAbs (xs, s) A' \\<and> recAbs MOD A' = gAbs MOD xs x X' (rec MOD X1')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (gWls MOD s X \\<longrightarrow>\n   (\\<exists>X'. wls s X' \\<and> rec MOD X' = X)) \\<and>\n  (gWlsAbs MOD (us, s') A \\<longrightarrow>\n   (\\<exists>A'. wlsAbs (us, s') A' \\<and> recAbs MOD A' = A))\n\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "}"], ["proof (state)\nthis:\n  (gWls MOD ?s205 ?X205 \\<longrightarrow>\n   (\\<exists>X'. wls ?s205 X' \\<and> rec MOD X' = ?X205)) \\<and>\n  (gWlsAbs MOD (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<exists>A'. wlsAbs (?us205, ?s'205) A' \\<and> recAbs MOD A' = ?A205))\n\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "thus ?thesis"], ["proof (prove)\nusing this:\n  (gWls MOD ?s205 ?X205 \\<longrightarrow>\n   (\\<exists>X'. wls ?s205 X' \\<and> rec MOD X' = ?X205)) \\<and>\n  (gWlsAbs MOD (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<exists>A'. wlsAbs (?us205, ?s'205) A' \\<and> recAbs MOD A' = ?A205))\n\ngoal (1 subgoal):\n 1. isSurjAll (rec MOD) (recAbs MOD) MOD", "unfolding isSurjAll_defs"], ["proof (prove)\nusing this:\n  (gWls MOD ?s205 ?X205 \\<longrightarrow>\n   (\\<exists>X'. wls ?s205 X' \\<and> rec MOD X' = ?X205)) \\<and>\n  (gWlsAbs MOD (?us205, ?s'205) ?A205 \\<longrightarrow>\n   (\\<exists>A'. wlsAbs (?us205, ?s'205) A' \\<and> recAbs MOD A' = ?A205))\n\ngoal (1 subgoal):\n 1. (\\<forall>s X.\n        gWls MOD s X \\<longrightarrow>\n        (\\<exists>X'. wls s X' \\<and> rec MOD X' = X)) \\<and>\n    (\\<forall>us s A.\n        gWlsAbs MOD (us, s) A \\<longrightarrow>\n        (\\<exists>A'. wlsAbs (us, s) A' \\<and> recAbs MOD A' = A))", "by blast"], ["proof (state)\nthis:\n  isSurjAll (rec MOD) (recAbs MOD) MOD\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>For fresh-swap models\\<close>"], ["", "theorem wlsFSw_recAll_isSurjAll:\n\"wlsFSw MOD \\<Longrightarrow> gConsIndif MOD \\<Longrightarrow> gInduct MOD\n \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSw MOD; gConsIndif MOD; gInduct MOD\\<rbrakk>\n    \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD", "using wlsFSw_recAll_termFSwMorph"], ["proof (prove)\nusing this:\n  wlsFSw ?MOD \\<Longrightarrow> termFSwMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSw MOD; gConsIndif MOD; gInduct MOD\\<rbrakk>\n    \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD", "by (auto simp: termFSwMorph_def intro: gInduct_gConsIndif_recAll_isSurjAll)"], ["", "text\\<open>For fresh-subst models\\<close>"], ["", "theorem wlsFSb_recAll_isSurjAll:\n\"wlsFSb MOD \\<Longrightarrow> gConsIndif MOD \\<Longrightarrow> gInduct MOD\n \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSb MOD; gConsIndif MOD; gInduct MOD\\<rbrakk>\n    \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD", "using wlsFSb_recAll_termFSbMorph"], ["proof (prove)\nusing this:\n  wlsFSb ?MOD \\<Longrightarrow> termFSbMorph (rec ?MOD) (recAbs ?MOD) ?MOD\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wlsFSb MOD; gConsIndif MOD; gInduct MOD\\<rbrakk>\n    \\<Longrightarrow> isSurjAll (rec MOD) (recAbs MOD) MOD", "by (auto simp: termFSbMorph_def intro: gInduct_gConsIndif_recAll_isSurjAll)"], ["", "(********************************************)"], ["", "lemmas recursion_simps =\nfromMOD_simps ipresCons_fromMOD_fst_all_simps fromIMor_simps"], ["", "declare recursion_simps [simp del]"], ["", "end"], ["", "(* context FixSyn *)\n(************************************************)"], ["", "end"]]}