{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Equiv_Relation2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemma S2P_app[simp]: \"S2P r x \\<longleftrightarrow> x \\<in> r\"", "lemma S2P_Collect[simp]: \"S2P (Collect \\<phi>) = \\<phi>\"", "lemma Collect_S2P[simp]: \"Collect (S2P r) = r\"", "lemma in_P2R[simp]: \"xy \\<in> P2R \\<phi> \\<longleftrightarrow> \\<phi> (fst xy) (snd xy)\"", "lemma in_P2R_pair[simp]: \"(x,y) \\<in> P2R \\<phi> \\<longleftrightarrow> \\<phi> x y\"", "lemma R2P_app[simp]: \"R2P r x y \\<longleftrightarrow> (x,y) \\<in> r\"", "lemma R2P_P2R[simp]: \"R2P (P2R \\<phi>) = \\<phi>\"", "lemma P2R_R2P[simp]: \"P2R (R2P r) = r\"", "lemma refl_on_P2R[simp]: \"refl_on (Collect P) (P2R \\<phi>) \\<longleftrightarrow> reflP P \\<phi>\"", "lemma reflP_R2P[simp]: \"reflP (S2P A) (R2P r) \\<longleftrightarrow> refl_on A r\"", "lemma sym_P2R[simp]: \"sym (P2R \\<phi>) \\<longleftrightarrow> symP \\<phi>\"", "lemma symP_R2P[simp]: \"symP (R2P r) \\<longleftrightarrow> sym r\"", "lemma trans_P2R[simp]: \"trans (P2R \\<phi>) \\<longleftrightarrow> transP \\<phi>\"", "lemma transP_R2P[simp]: \"transP (R2P r) \\<longleftrightarrow> trans r\"", "lemma equiv_P2R[simp]: \"equiv (Collect P) (P2R \\<phi>) \\<longleftrightarrow> equivP P \\<phi>\"", "lemma equivP_R2P[simp]: \"equivP (S2P A) (R2P r) \\<longleftrightarrow> equiv A r\"", "lemma in_P2R_Im_singl[simp]: \"y \\<in> P2R \\<phi> `` {x} \\<longleftrightarrow> \\<phi> x y\"", "lemma proj_P2R: \"proj \\<phi> x = P2R \\<phi> `` {x}\"", "lemma proj_P2R_raw: \"proj \\<phi> = (\\<lambda> x. P2R \\<phi> `` {x})\"", "lemma proj_preserves:\n\"P x \\<Longrightarrow> (P /// \\<phi>) (proj \\<phi> x)\"", "lemma proj_in_iff:\nassumes \"equivP P \\<phi>\"\nshows \"(P///\\<phi>) (proj \\<phi> x)  \\<longleftrightarrow> P x\"", "lemma proj_iff[simp]:\n\"\\<lbrakk>equivP P \\<phi>; P x; P y\\<rbrakk> \\<Longrightarrow> proj \\<phi> x = proj \\<phi> y \\<longleftrightarrow> \\<phi> x y\"", "lemma in_proj[simp]: \"\\<lbrakk>equivP P \\<phi>; P x\\<rbrakk> \\<Longrightarrow> x \\<in> proj \\<phi> x\"", "lemma proj_image[simp]: \"(proj \\<phi>) ` (Collect P) = Collect (P///\\<phi>)\"", "lemma in_quotientP_imp_non_empty:\nassumes \"equivP P \\<phi>\" and \"(P///\\<phi>) X\"\nshows \"X \\<noteq> {}\"", "lemma in_quotientP_imp_in_rel:\n\"\\<lbrakk>equivP P \\<phi>; (P///\\<phi>) X; x \\<in> X; y \\<in> X\\<rbrakk> \\<Longrightarrow> \\<phi> x y\"", "lemma in_quotientP_imp_closed:\n\"\\<lbrakk>equivP P \\<phi>; (P///\\<phi>) X; x \\<in> X; \\<phi> x y\\<rbrakk> \\<Longrightarrow> y \\<in> X\"", "lemma in_quotientP_imp_subset:\nassumes \"equivP P \\<phi>\" and \"(P///\\<phi>) X\"\nshows \"X \\<subseteq> Collect P\"", "lemma equivP_pick_in:\nassumes  \"equivP P \\<phi> \" and \"(P///\\<phi>) X\"\nshows \"pick X \\<in> X\"", "lemma equivP_pick_preserves:\nassumes  \"equivP P \\<phi> \" and \"(P///\\<phi>) X\"\nshows \"P (pick X)\"", "lemma proj_pick:\nassumes \\<phi>: \"equivP P \\<phi>\" and X: \"(P///\\<phi>) X\"\nshows \"proj \\<phi> (pick X) = X\"", "lemma pick_proj:\nassumes \"equivP P \\<phi>\" and \"P x\"\nshows \"\\<phi> (pick (proj \\<phi> x)) x\"", "lemma equivP_pick_iff[simp]:\nassumes \\<phi>: \"equivP P \\<phi>\" and X: \"(P///\\<phi>) X\" and Y: \"(P///\\<phi>) Y\"\nshows \"\\<phi> (pick X) (pick Y) \\<longleftrightarrow> X = Y\"", "lemma equivP_pick_inj_on:\nassumes \"equivP P \\<phi>\"\nshows \"inj_on pick (Collect (P///\\<phi>))\"", "lemma congruent_P2R: \"congruent (P2R \\<phi>) f = congruentP \\<phi> f\"", "lemma univ_commute[simp]:\nassumes \"equivP P \\<phi>\" and \"f respectsP \\<phi>\" and \"P x\"\nshows \"(univ f) (proj \\<phi> x) = f x\"", "lemma univ_unique:\nassumes \"equivP P \\<phi>\" and \"f respectsP \\<phi>\" and \"\\<And> x. P x \\<Longrightarrow> G (proj \\<phi> x) = f x\"\nshows \"\\<forall> X. (P///\\<phi>) X \\<longrightarrow> G X = univ f X\"", "lemma univ_preserves:\nassumes \"equivP P \\<phi> \" and \"f respectsP \\<phi>\" and \"\\<And> x. P x \\<Longrightarrow> f x \\<in> B\"\nshows \"\\<forall> X. (P///\\<phi>) X \\<longrightarrow> univ f X \\<in> B\""], "translations": [["", "lemma S2P_app[simp]: \"S2P r x \\<longleftrightarrow> x \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2P r x = (x \\<in> r)", "unfolding S2P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> r) = (x \\<in> r)", "by auto"], ["", "lemma S2P_Collect[simp]: \"S2P (Collect \\<phi>) = \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2P (Collect \\<phi>) = \\<phi>", "apply(rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. S2P (Collect \\<phi>) x = \\<phi> x", "by simp"], ["", "lemma Collect_S2P[simp]: \"Collect (S2P r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collect (S2P r) = r", "by (metis Collect_mem_eq S2P_Collect)"], ["", "text\\<open>Binary predicates vs. relatipons:\\<close>"], ["", "definition \"P2R \\<phi> \\<equiv> {(x,y). \\<phi> x y}\""], ["", "definition \"R2P r \\<equiv> \\<lambda> x y. (x,y) \\<in> r\""], ["", "lemma in_P2R[simp]: \"xy \\<in> P2R \\<phi> \\<longleftrightarrow> \\<phi> (fst xy) (snd xy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xy \\<in> P2R \\<phi>) = \\<phi> (fst xy) (snd xy)", "unfolding P2R_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xy \\<in> {(x, y). \\<phi> x y}) = \\<phi> (fst xy) (snd xy)", "by auto"], ["", "lemma in_P2R_pair[simp]: \"(x,y) \\<in> P2R \\<phi> \\<longleftrightarrow> \\<phi> x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> P2R \\<phi>) = \\<phi> x y", "by simp"], ["", "lemma R2P_app[simp]: \"R2P r x y \\<longleftrightarrow> (x,y) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R2P r x y = ((x, y) \\<in> r)", "unfolding R2P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> r) = ((x, y) \\<in> r)", "by auto"], ["", "lemma R2P_P2R[simp]: \"R2P (P2R \\<phi>) = \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R2P (P2R \\<phi>) = \\<phi>", "apply(rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. R2P (P2R \\<phi>) x xa = \\<phi> x xa", "by simp"], ["", "lemma P2R_R2P[simp]: \"P2R (R2P r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P2R (R2P r) = r", "using Collect_mem_eq P2R_def R2P_P2R  case_prod_curry"], ["proof (prove)\nusing this:\n  {x. x \\<in> ?A} = ?A\n  P2R ?\\<phi> \\<equiv> {(x, y). ?\\<phi> x y}\n  R2P (P2R ?\\<phi>) = ?\\<phi>\n  (\\<lambda>(x, y). curry ?f x y) = ?f\n\ngoal (1 subgoal):\n 1. P2R (R2P r) = r", "by metis"], ["", "definition \"reflP P \\<phi> \\<equiv> (\\<forall> x y. \\<phi> x y \\<or> \\<phi> y x \\<longrightarrow> P x) \\<and> (\\<forall> x. P x \\<longrightarrow> \\<phi> x x)\""], ["", "definition \"symP \\<phi> \\<equiv> \\<forall> x y. \\<phi> x y \\<longrightarrow> \\<phi> y x\""], ["", "definition transP where \"transP \\<phi> \\<equiv> \\<forall> x y z. \\<phi> x y \\<and> \\<phi> y z \\<longrightarrow> \\<phi> x z\""], ["", "definition \"equivP A \\<phi> \\<equiv> reflP A \\<phi> \\<and> symP \\<phi> \\<and> transP \\<phi>\""], ["", "lemma refl_on_P2R[simp]: \"refl_on (Collect P) (P2R \\<phi>) \\<longleftrightarrow> reflP P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on (Collect P) (P2R \\<phi>) = reflP P \\<phi>", "unfolding reflP_def refl_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P2R \\<phi> \\<subseteq> Collect P \\<times> Collect P \\<and>\n     (\\<forall>x\\<in>Collect P. (x, x) \\<in> P2R \\<phi>)) =\n    ((\\<forall>x y.\n         \\<phi> x y \\<or> \\<phi> y x \\<longrightarrow> P x) \\<and>\n     (\\<forall>x. P x \\<longrightarrow> \\<phi> x x))", "by force"], ["", "lemma reflP_R2P[simp]: \"reflP (S2P A) (R2P r) \\<longleftrightarrow> refl_on A r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflP (S2P A) (R2P r) = refl_on A r", "unfolding reflP_def refl_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>x y.\n         R2P r x y \\<or> R2P r y x \\<longrightarrow> S2P A x) \\<and>\n     (\\<forall>x. S2P A x \\<longrightarrow> R2P r x x)) =\n    (r \\<subseteq> A \\<times> A \\<and> (\\<forall>x\\<in>A. (x, x) \\<in> r))", "by auto"], ["", "lemma sym_P2R[simp]: \"sym (P2R \\<phi>) \\<longleftrightarrow> symP \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (P2R \\<phi>) = symP \\<phi>", "unfolding symP_def sym_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        (x, y) \\<in> P2R \\<phi> \\<longrightarrow> (y, x) \\<in> P2R \\<phi>) =\n    (\\<forall>x y. \\<phi> x y \\<longrightarrow> \\<phi> y x)", "by auto"], ["", "lemma symP_R2P[simp]: \"symP (R2P r) \\<longleftrightarrow> sym r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symP (R2P r) = sym r", "unfolding symP_def sym_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y. R2P r x y \\<longrightarrow> R2P r y x) =\n    (\\<forall>x y. (x, y) \\<in> r \\<longrightarrow> (y, x) \\<in> r)", "by auto"], ["", "lemma trans_P2R[simp]: \"trans (P2R \\<phi>) \\<longleftrightarrow> transP \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans (P2R \\<phi>) = transP \\<phi>", "unfolding transP_def trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        (x, y) \\<in> P2R \\<phi> \\<longrightarrow>\n        (y, z) \\<in> P2R \\<phi> \\<longrightarrow> (x, z) \\<in> P2R \\<phi>) =\n    (\\<forall>x y z.\n        \\<phi> x y \\<and> \\<phi> y z \\<longrightarrow> \\<phi> x z)", "by auto"], ["", "lemma transP_R2P[simp]: \"transP (R2P r) \\<longleftrightarrow> trans r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transP (R2P r) = trans r", "unfolding transP_def trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        R2P r x y \\<and> R2P r y z \\<longrightarrow> R2P r x z) =\n    (\\<forall>x y z.\n        (x, y) \\<in> r \\<longrightarrow>\n        (y, z) \\<in> r \\<longrightarrow> (x, z) \\<in> r)", "by auto"], ["", "lemma equiv_P2R[simp]: \"equiv (Collect P) (P2R \\<phi>) \\<longleftrightarrow> equivP P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv (Collect P) (P2R \\<phi>) = equivP P \\<phi>", "unfolding equivP_def equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (refl_on (Collect P) (P2R \\<phi>) \\<and>\n     sym (P2R \\<phi>) \\<and> trans (P2R \\<phi>)) =\n    (reflP P \\<phi> \\<and> symP \\<phi> \\<and> transP \\<phi>)", "by auto"], ["", "lemma equivP_R2P[simp]: \"equivP (S2P A) (R2P r) \\<longleftrightarrow> equiv A r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivP (S2P A) (R2P r) = equiv A r", "unfolding equivP_def equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (reflP (S2P A) (R2P r) \\<and> symP (R2P r) \\<and> transP (R2P r)) =\n    (refl_on A r \\<and> sym r \\<and> trans r)", "by auto"], ["", "lemma in_P2R_Im_singl[simp]: \"y \\<in> P2R \\<phi> `` {x} \\<longleftrightarrow> \\<phi> x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> P2R \\<phi> `` {x}) = \\<phi> x y", "by simp"], ["", "definition proj :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a \\<Rightarrow> 'a set\" where\n\"proj \\<phi> x \\<equiv> {y. \\<phi> x y}\""], ["", "lemma proj_P2R: \"proj \\<phi> x = P2R \\<phi> `` {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj \\<phi> x = P2R \\<phi> `` {x}", "unfolding proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<phi> x y} = P2R \\<phi> `` {x}", "by auto"], ["", "lemma proj_P2R_raw: \"proj \\<phi> = (\\<lambda> x. P2R \\<phi> `` {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj \\<phi> = (\\<lambda>x. P2R \\<phi> `` {x})", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. proj \\<phi> x = P2R \\<phi> `` {x}", "unfolding proj_P2R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. P2R \\<phi> `` {x} = P2R \\<phi> `` {x}", ".."], ["", "definition univ :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> ('a set \\<Rightarrow> 'b)\"\nwhere \"univ f X == f (SOME x. x \\<in> X)\""], ["", "definition quotientP ::\n\"('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> ('a set \\<Rightarrow> bool)\"  (infixl \"'/'/'/\" 90)\nwhere \"P /// \\<phi> \\<equiv> S2P ((Collect P) // (P2R \\<phi>))\""], ["", "lemma proj_preserves:\n\"P x \\<Longrightarrow> (P /// \\<phi>) (proj \\<phi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<Longrightarrow> (P /// \\<phi>) (proj \\<phi> x)", "unfolding proj_P2R quotientP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<Longrightarrow> S2P (Collect P // P2R \\<phi>) (P2R \\<phi> `` {x})", "by (metis S2P_def mem_Collect_eq quotientI)"], ["", "lemma proj_in_iff:\nassumes \"equivP P \\<phi>\"\nshows \"(P///\\<phi>) (proj \\<phi> x)  \\<longleftrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P /// \\<phi>) (proj \\<phi> x) = P x", "using assms"], ["proof (prove)\nusing this:\n  equivP P \\<phi>\n\ngoal (1 subgoal):\n 1. (P /// \\<phi>) (proj \\<phi> x) = P x", "unfolding quotientP_def proj_def"], ["proof (prove)\nusing this:\n  equivP P \\<phi>\n\ngoal (1 subgoal):\n 1. S2P (Collect P // P2R \\<phi>) {y. \\<phi> x y} = P x", "by (metis (mono_tags) Collect_mem_eq Equiv_Relation2.proj_def \n  Equiv_Relation2.proj_preserves S2P_Collect empty_Collect_eq equivP_def \n  equiv_P2R in_quotient_imp_non_empty quotientP_def reflP_def)"], ["", "lemma proj_iff[simp]:\n\"\\<lbrakk>equivP P \\<phi>; P x; P y\\<rbrakk> \\<Longrightarrow> proj \\<phi> x = proj \\<phi> y \\<longleftrightarrow> \\<phi> x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; P x; P y\\<rbrakk>\n    \\<Longrightarrow> (proj \\<phi> x = proj \\<phi> y) = \\<phi> x y", "unfolding proj_P2R"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; P x; P y\\<rbrakk>\n    \\<Longrightarrow> (P2R \\<phi> `` {x} = P2R \\<phi> `` {y}) = \\<phi> x y", "by (metis (full_types) equiv_P2R equiv_class_eq_iff equiv_class_self\n          in_P2R_pair mem_Collect_eq proj_P2R proj_def)"], ["", "lemma in_proj[simp]: \"\\<lbrakk>equivP P \\<phi>; P x\\<rbrakk> \\<Longrightarrow> x \\<in> proj \\<phi> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; P x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> proj \\<phi> x", "unfolding proj_P2R equiv_def refl_on_def equiv_P2R[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(P2R \\<phi> \\<subseteq> Collect P \\<times> Collect P \\<and>\n              (\\<forall>x\\<in>Collect P. (x, x) \\<in> P2R \\<phi>)) \\<and>\n             sym (P2R \\<phi>) \\<and> trans (P2R \\<phi>);\n     P x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> P2R \\<phi> `` {x}", "by auto"], ["", "lemma proj_image[simp]: \"(proj \\<phi>) ` (Collect P) = Collect (P///\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj \\<phi> ` Collect P = Collect (P /// \\<phi>)", "unfolding proj_P2R_raw quotientP_def quotient_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. P2R \\<phi> `` {x}) ` Collect P =\n    Collect (S2P (\\<Union>x\\<in>Collect P. {P2R \\<phi> `` {x}}))", "by auto"], ["", "lemma in_quotientP_imp_non_empty:\nassumes \"equivP P \\<phi>\" and \"(P///\\<phi>) X\"\nshows \"X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<noteq> {}", "by (metis R2P_P2R S2P_Collect S2P_def assms equivP_R2P \nin_quotient_imp_non_empty quotientP_def)"], ["", "lemma in_quotientP_imp_in_rel:\n\"\\<lbrakk>equivP P \\<phi>; (P///\\<phi>) X; x \\<in> X; y \\<in> X\\<rbrakk> \\<Longrightarrow> \\<phi> x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; (P /// \\<phi>) X; x \\<in> X;\n     y \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<phi> x y", "unfolding equiv_P2R[symmetric] quotientP_def quotient_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equiv (Collect P) (P2R \\<phi>);\n     S2P (Collect P // P2R \\<phi>) X; x \\<in> X; y \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<phi> x y", "by (metis S2P_def in_P2R_pair quotient_eq_iff)"], ["", "lemma in_quotientP_imp_closed:\n\"\\<lbrakk>equivP P \\<phi>; (P///\\<phi>) X; x \\<in> X; \\<phi> x y\\<rbrakk> \\<Longrightarrow> y \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; (P /// \\<phi>) X; x \\<in> X;\n     \\<phi> x y\\<rbrakk>\n    \\<Longrightarrow> y \\<in> X", "using S2P_Collect S2P_def equivP_def proj_P2R_raw proj_def\n        quotientE quotientP_def transP_def"], ["proof (prove)\nusing this:\n  S2P (Collect ?\\<phi>) = ?\\<phi>\n  S2P ?A \\<equiv> \\<lambda>x. x \\<in> ?A\n  equivP ?A ?\\<phi> \\<equiv>\n  reflP ?A ?\\<phi> \\<and> symP ?\\<phi> \\<and> transP ?\\<phi>\n  proj ?\\<phi> = (\\<lambda>x. P2R ?\\<phi> `` {x})\n  proj ?\\<phi> ?x \\<equiv> {y. ?\\<phi> ?x y}\n  \\<lbrakk>?X \\<in> ?A // ?r;\n   \\<And>x.\n      \\<lbrakk>?X = ?r `` {x}; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ?P /// ?\\<phi> \\<equiv> S2P (Collect ?P // P2R ?\\<phi>)\n  transP ?\\<phi> \\<equiv>\n  \\<forall>x y z.\n     ?\\<phi> x y \\<and> ?\\<phi> y z \\<longrightarrow> ?\\<phi> x z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>equivP P \\<phi>; (P /// \\<phi>) X; x \\<in> X;\n     \\<phi> x y\\<rbrakk>\n    \\<Longrightarrow> y \\<in> X", "by metis"], ["", "lemma in_quotientP_imp_subset:\nassumes \"equivP P \\<phi>\" and \"(P///\\<phi>) X\"\nshows \"X \\<subseteq> Collect P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Collect P", "by (metis (mono_tags, lifting) CollectI assms equivP_def in_quotientP_imp_in_rel reflP_def subsetI)"], ["", "lemma equivP_pick_in:\nassumes  \"equivP P \\<phi> \" and \"(P///\\<phi>) X\"\nshows \"pick X \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick X \\<in> X", "by (metis assms in_quotientP_imp_non_empty pick_NE)"], ["", "lemma equivP_pick_preserves:\nassumes  \"equivP P \\<phi> \" and \"(P///\\<phi>) X\"\nshows \"P (pick X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (pick X)", "by (metis assms equivP_pick_in in_quotientP_imp_subset mem_Collect_eq set_rev_mp)"], ["", "lemma proj_pick:\nassumes \\<phi>: \"equivP P \\<phi>\" and X: \"(P///\\<phi>) X\"\nshows \"proj \\<phi> (pick X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proj \\<phi> (pick X) = X", "by (smt proj_def Equiv_Relation2.proj_iff Equiv_Relation2.proj_image X \n   \\<phi> equivP_pick_in equivP_pick_preserves image_iff mem_Collect_eq)"], ["", "lemma pick_proj:\nassumes \"equivP P \\<phi>\" and \"P x\"\nshows \"\\<phi> (pick (proj \\<phi> x)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (pick (proj \\<phi> x)) x", "by (metis assms equivP_def in_proj mem_Collect_eq pick proj_def symP_def)"], ["", "lemma equivP_pick_iff[simp]:\nassumes \\<phi>: \"equivP P \\<phi>\" and X: \"(P///\\<phi>) X\" and Y: \"(P///\\<phi>) Y\"\nshows \"\\<phi> (pick X) (pick Y) \\<longleftrightarrow> X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (pick X) (pick Y) = (X = Y)", "by (metis Equiv_Relation2.proj_iff X Y \\<phi> equivP_pick_preserves proj_pick)"], ["", "lemma equivP_pick_inj_on:\nassumes \"equivP P \\<phi>\"\nshows \"inj_on pick (Collect (P///\\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on pick (Collect (P /// \\<phi>))", "using assms"], ["proof (prove)\nusing this:\n  equivP P \\<phi>\n\ngoal (1 subgoal):\n 1. inj_on pick (Collect (P /// \\<phi>))", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  equivP P \\<phi>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Collect (P /// \\<phi>).\n       \\<forall>y\\<in>Collect (P /// \\<phi>).\n          pick x = pick y \\<longrightarrow> x = y", "by (metis assms equivP_pick_iff mem_Collect_eq)"], ["", "definition congruentP where\n\"congruentP \\<phi> f \\<equiv> \\<forall> x y. \\<phi> x y \\<longrightarrow> f x = f y\""], ["", "abbreviation RESPECTS_P (infixr \"respectsP\" 80) where\n\"f respectsP r == congruentP r f\""], ["", "lemma congruent_P2R: \"congruent (P2R \\<phi>) f = congruentP \\<phi> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f respects P2R \\<phi> = f respectsP \\<phi>", "unfolding congruent_def congruentP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>(y, z)\\<in>P2R \\<phi>. f y = f z) =\n    (\\<forall>x y. \\<phi> x y \\<longrightarrow> f x = f y)", "by auto"], ["", "lemma univ_commute[simp]:\nassumes \"equivP P \\<phi>\" and \"f respectsP \\<phi>\" and \"P x\"\nshows \"(univ f) (proj \\<phi> x) = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ f (proj \\<phi> x) = f x", "unfolding congruent_P2R[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Equiv_Relation2.univ f (proj \\<phi> x) = f x", "by (metis (full_types) assms pick_def congruentP_def pick_proj univ_def)"], ["", "lemma univ_unique:\nassumes \"equivP P \\<phi>\" and \"f respectsP \\<phi>\" and \"\\<And> x. P x \\<Longrightarrow> G (proj \\<phi> x) = f x\"\nshows \"\\<forall> X. (P///\\<phi>) X \\<longrightarrow> G X = univ f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X.\n       (P /// \\<phi>) X \\<longrightarrow> G X = Equiv_Relation2.univ f X", "by (metis assms equivP_pick_preserves proj_pick univ_commute)"], ["", "lemma univ_preserves:\nassumes \"equivP P \\<phi> \" and \"f respectsP \\<phi>\" and \"\\<And> x. P x \\<Longrightarrow> f x \\<in> B\"\nshows \"\\<forall> X. (P///\\<phi>) X \\<longrightarrow> univ f X \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X.\n       (P /// \\<phi>) X \\<longrightarrow> Equiv_Relation2.univ f X \\<in> B", "by (metis Equiv_Relation2.univ_commute assms  \n          equivP_pick_preserves proj_pick)"], ["", "end"]]}