{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/Preliminaries.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemmas regular_UNION = stable_UNION", "lemma fst3_simp[simp]: \"fst3 (a,b,c) = a\"", "lemma snd3_simp[simp]: \"snd3 (a,b,c) = b\"", "lemma trd3_simp[simp]: \"trd3 (a,b,c) = c\"", "lemma fst3_snd3_trd3: \"abc = (fst3 abc, snd3 abc, trd3 abc)\"", "lemma fst3_snd3_trd3_rev[simp]:\n\"(fst3 abc, snd3 abc, trd3 abc) = abc\"", "lemma map_id[simp]: \"map id l = l\"", "lemmas map_id_cong = map_idI", "lemma ext2:\n\"(f \\<noteq> g) = (\\<exists> x. f x \\<noteq> g x)\"", "lemma not_equals_and_not_equals_not_in:\n\"(y \\<noteq> x \\<and> y \\<noteq> x' \\<and> phi) =\n (y \\<notin> {x,x'} \\<and> phi)\"", "lemma mp2:\nassumes \"!! x y. phi x y \\<Longrightarrow> chi x y\" and \"phi x y\"\nshows \"chi x y\"", "lemma mp3:\nassumes \"!! x y z. phi x y z \\<Longrightarrow> chi x y z\" and \"phi x y z\"\nshows \"chi x y z\"", "lemma all_lt_Suc:\n\"(\\<forall> i < Suc n. phi i) = ((\\<forall> i < n. phi i) \\<and> phi n)\"", "lemmas tl_map[simp] = list.map_sel", "lemma tl_last[simp]:\nassumes \"tl L \\<noteq> []\"\nshows \"last (tl L) = last L\"", "lemma tl_last_hd:\nassumes \"L \\<noteq> []\" and \"tl L = []\"\nshows \"last L = hd L\"", "lemma wf_lt2:\n\"wf lt2\"", "lemma wf_lt3:\n\"wf lt3\"", "lemma lt2[intro]:\n\"!! k1 k2 j1 j2. k1 < j1 \\<Longrightarrow> ((k1,k2),(j1,j2)) \\<in> lt2\"\n\"!! k1 k2 j1 j2. \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk> \\<Longrightarrow> ((k1,k2),(j1,j2)) \\<in> lt2\"", "lemma lt3[intro]:\n\"!! k1 k2 k3 j1 j2 j3. k1 < j1 \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\"\n\"!! k1 k2 k3 j1 j2 j3. \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk> \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\"\n\"!! k1 k2 k3 j1 j2 j3. \\<lbrakk>k1 \\<le> j1; k2 \\<le> j2; k3 < j3\\<rbrakk> \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\"", "lemma measure_lex2_induct:\nfixes h1 :: \"'a1 \\<Rightarrow> nat\" and h2 :: \"'a2 \\<Rightarrow> nat\"\nassumes\n\"!! x1 x2.\n  \\<lbrakk>(!! y1 y2. h1 y1 < h1 x1 \\<Longrightarrow> phi y1 y2);\n   (!! y1 y2. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 < h2 x2\\<rbrakk> \\<Longrightarrow> phi y1 y2)\\<rbrakk>\n  \\<Longrightarrow> phi x1 x2\"\nshows \"phi x1 x2\"", "lemma measure_lex3_induct:\nfixes h1 :: \"'a1 \\<Rightarrow> nat\" and h2 :: \"'a2 \\<Rightarrow> nat\" and h3 :: \"'a3 \\<Rightarrow> nat\"\nassumes\n\"!! x1 x2 x3.\n  \\<lbrakk>(!! y1 y2 y3. h1 y1 < h1 x1 \\<Longrightarrow> phi y1 y2 y3);\n   (!! y1 y2 y3. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 < h2 x2\\<rbrakk> \\<Longrightarrow> phi y1 y2 y3);\n   (!! y1 y2 y3. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 \\<le> h2 x2; h3 y3 < h3 x3\\<rbrakk> \\<Longrightarrow> phi y1 y2 y3)\\<rbrakk>\n  \\<Longrightarrow> phi x1 x2 x3\"\nshows \"phi x1 x2 x3\"", "lemma lift_None: \"(lift h inp i = None) = (inp i = None)\"", "lemma lift_Some:\n\"(\\<exists> v. lift h inp i = Some v) = (\\<exists> v'. inp i = Some v')\"", "lemma lift_cong[fundef_cong]:\nassumes \"\\<And> i v. inp i = Some v \\<Longrightarrow>  h v = h' v\"\nshows \"lift h inp = lift h' inp\"", "lemma lift_preserves_inj:\nassumes \"inj f\"\nshows \"inj (lift f)\"", "lemma liftAll_cong[fundef_cong]:\nassumes \"\\<And> i v. inp i = Some v \\<Longrightarrow> phi v = phi' v\"\nshows \"liftAll phi inp = liftAll phi' inp\"", "lemma liftAll2_cong[fundef_cong]:\nassumes \"\\<And> i v1 v2. \\<lbrakk>inp1 i = Some v1; inp2 i = Some v2\\<rbrakk> \\<Longrightarrow> phi v1 v2 = phi' v1 v2\"\nshows \"liftAll2 phi inp1 inp2 = liftAll2 phi' inp1 inp2\"", "lemma lift_ident: \"lift (\\<lambda>v. v) inp = inp\"", "lemma lift_id[simp]:\n\"lift id inp = inp\"", "lemma lift_comp: \"lift g (lift f inp) = lift (g o f) inp\"", "lemma liftAll_mono:\nassumes \"\\<And> v. phi v \\<Longrightarrow> chi v\" and \"liftAll phi inp\"\nshows \"liftAll chi inp\"", "lemma liftAll_True: \"liftAll (\\<lambda>v. True) inp\"", "lemma liftAll_lift_comp:  \"liftAll phi (lift f inp) = liftAll (phi o f) inp\"", "lemma liftAll_lift_ext:\n\"liftAll (\\<lambda> x. f x = g x) inp = (lift f inp = lift g inp)\"", "lemma liftAll_and:\n\"liftAll (\\<lambda> x. phi x \\<and> chi x) inp = (liftAll phi inp \\<and> liftAll chi inp)\"", "lemma liftAll_mp:\nassumes \"liftAll (\\<lambda> v. phi v \\<longrightarrow> chi v) inp\" and \"liftAll phi inp\"\nshows \"liftAll chi inp\"", "lemma sameDom_refl: \"sameDom inp inp\"", "lemma sameDom_sym:\n\"sameDom inp inp' = sameDom inp' inp\"", "lemma sameDom_trans:\n\"\\<lbrakk>sameDom inp inp'; sameDom inp' inp''\\<rbrakk> \\<Longrightarrow> sameDom inp inp''\"", "lemma sameDom_lift1:\n\"sameDom inp (lift f inp)\"", "lemma sameDom_lift2:\n\"sameDom (lift f inp) inp\"", "lemma sameDom_lift_simp1[simp]:\n\"sameDom inp (lift f inp') = sameDom inp inp'\"", "lemma sameDom_lift_simp2[simp]:\n\"sameDom (lift f inp) inp' = sameDom inp inp'\"", "lemma lift_preserves_sameDom:\nassumes \"sameDom inp inp'\"\nshows \"sameDom (lift f inp) (lift g inp')\"", "lemma comp2_simp[simp]:\n\"(h o2 (f,g)) x y = h (f x) (g y)\"", "lemma comp2_comp:\n\"((h o2 (f,g)) o2 (f',g')) = (h o2 (f o f', g o g'))\"", "lemma liftAll_imp_liftAll2:\nassumes \"liftAll (\\<lambda>v. \\<forall> v'. phi v v') inp\"\nshows \"liftAll2 phi inp inp'\"", "lemma liftAll2_mono:\nassumes \"\\<And> v v'. phi v v' \\<Longrightarrow> chi v v'\" and \"liftAll2 phi inp inp'\"\nshows \"liftAll2 chi inp inp'\"", "lemma liftAll2_True: \"liftAll2 (\\<lambda> v v'. True) inp inp'\"", "lemma liftAll2_lift_comp2:\n\"liftAll2 phi (lift f1 inp1) (lift f2 inp2) =\n liftAll2 (phi o2 (f1,f2)) inp1 inp2\"", "lemma lift_imp_sameDom:\n\"lift f inp = lift f inp' \\<Longrightarrow> sameDom inp inp'\"", "lemma lift_lift2:\n\"lift f (lift2 g inp' inp) =\n lift2 (\\<lambda> v' v. f (g v' v)) inp' inp\"", "lemma lift2_left[simp]:\nassumes \"sameDom inp' inp\"\nshows \"lift2 (\\<lambda> v' v. v') inp' inp = inp'\"", "lemma lift2_right[simp]:\nassumes \"sameDom inp' inp\"\nshows \"lift2 (\\<lambda> v' v. v) inp' inp = inp\"", "lemma lift2_preserves_sameDom:\nassumes \"sameDom inp' inp1'\" and \"sameDom inp inp1\"\nshows \"sameDom (lift2 f inp' inp) (lift2 g inp1' inp1)\"", "lemma sameDom_lift2_1:\nassumes \"sameDom inp' inp\"\nshows\n\"sameDom inp' (lift2 f inp' inp) \\<and>\n sameDom inp (lift2 f inp' inp)\"", "lemma sameDom_lift2_2:\nassumes \"sameDom inp' inp\"\nshows\n\"sameDom (lift2 f inp' inp) inp' \\<and>\n sameDom (lift2 f inp' inp) inp\"", "lemma sameDom_lift2_simp1[simp]:\nassumes \"sameDom inp1' inp1\"\nshows \"sameDom inp (lift2 f inp1' inp1) = sameDom inp inp1'\"", "lemma sameDom_lift2_simp2[simp]:\nassumes \"sameDom inp' inp\"\nshows \"sameDom (lift2 f inp' inp) inp1 = sameDom inp' inp1\"", "lemma liftAll2_lift_ext:\n\"(sameDom inp inp' \\<and> liftAll2 (\\<lambda> v v'. f v = f v') inp inp') =\n (lift f inp = lift f inp')\"", "lemma liftAll2_and:\n\"liftAll2 (\\<lambda> v v'. phi v v' \\<and> chi v v') inp inp' =\n(liftAll2 phi inp inp' \\<and> liftAll2 chi inp inp')\"", "lemma liftAll2_mp:\nassumes \"liftAll2 (\\<lambda> v v'. phi v v' \\<longrightarrow> chi v v') inp inp'\" and \"liftAll2 phi inp inp'\"\nshows \"liftAll2 chi inp inp'\"", "lemma sameDom_and_liftAll2_iff:\n\"(sameDom inp inp' \\<and> liftAll2 phi inp inp') =\n (\\<forall> i. (inp i = None \\<and> inp' i = None) \\<or>\n         (\\<exists> v v'. inp i = Some v \\<and> inp' i = Some v' \\<and> phi v v'))\"", "lemma tree_induct:\nfixes phi::\"('index,'bindex)tree \\<Rightarrow> bool\" and T::\"('index,'bindex)tree\"\nassumes\n  \"\\<And> inp binp. \\<lbrakk>liftAll phi inp; liftAll phi binp\\<rbrakk> \\<Longrightarrow> phi (Branch inp binp)\"\nshows \"phi T\"", "lemma treeLess_induct:\nfixes phi::\"('index,'bindex)tree \\<Rightarrow> bool\" and\n      T::\"('index,'bindex)tree\"\nassumes \"\\<And> T'. (\\<And> T. (T,T') \\<in> treeLess \\<Longrightarrow> phi T) \\<Longrightarrow> phi T'\"\nshows \"phi T\"", "lemma treeLess_wf: \"wf treeLess\"", "lemma Least_Max:\nassumes phi: \"phi (n::nat)\" and fin: \"finite {n. phi n}\"\nshows \"(LEAST m. \\<forall> n. phi n \\<longrightarrow> n \\<le> m) =\n       Max {n. phi n}\""], "translations": [["", "lemmas regular_UNION = stable_UNION"], ["", "subsection \\<open>Trivia\\<close>"], ["", "type_synonym 'a pair = \"'a * 'a\""], ["", "type_synonym 'a triple = \"'a * 'a *'a\""], ["", "type_synonym 'a rel = \"'a pair set\""], ["", "(* Selectors for triples *)"], ["", "definition fst3 where \"fst3 == fst\""], ["", "definition snd3 where \"snd3 == fst o snd\""], ["", "definition trd3 where \"trd3 == snd o snd\""], ["", "lemma fst3_simp[simp]: \"fst3 (a,b,c) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst3 (a, b, c) = a", "unfolding fst3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (a, b, c) = a", "by simp"], ["", "lemma snd3_simp[simp]: \"snd3 (a,b,c) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd3 (a, b, c) = b", "unfolding snd3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd) (a, b, c) = b", "by simp"], ["", "lemma trd3_simp[simp]: \"trd3 (a,b,c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trd3 (a, b, c) = c", "unfolding trd3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd) (a, b, c) = c", "by simp"], ["", "lemma fst3_snd3_trd3: \"abc = (fst3 abc, snd3 abc, trd3 abc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abc = (fst3 abc, snd3 abc, trd3 abc)", "unfolding fst3_def snd3_def trd3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abc = (fst abc, (fst \\<circ> snd) abc, (snd \\<circ> snd) abc)", "by auto"], ["", "lemma fst3_snd3_trd3_rev[simp]:\n\"(fst3 abc, snd3 abc, trd3 abc) = abc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst3 abc, snd3 abc, trd3 abc) = abc", "using fst3_snd3_trd3[of abc]"], ["proof (prove)\nusing this:\n  abc = (fst3 abc, snd3 abc, trd3 abc)\n\ngoal (1 subgoal):\n 1. (fst3 abc, snd3 abc, trd3 abc) = abc", "by simp"], ["", "lemma map_id[simp]: \"map id l = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map id l = l", "unfolding id_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x. x) l = l", "by simp"], ["", "abbreviation max3 where\n\"max3 x y z == max (max x y) z\""], ["", "lemmas map_id_cong = map_idI"], ["", "lemma ext2:\n\"(f \\<noteq> g) = (\\<exists> x. f x \\<noteq> g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<noteq> g) = (\\<exists>x. f x \\<noteq> g x)", "using ext"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. (f \\<noteq> g) = (\\<exists>x. f x \\<noteq> g x)", "by auto"], ["", "lemma not_equals_and_not_equals_not_in:\n\"(y \\<noteq> x \\<and> y \\<noteq> x' \\<and> phi) =\n (y \\<notin> {x,x'} \\<and> phi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<noteq> x \\<and> y \\<noteq> x' \\<and> phi) =\n    (y \\<notin> {x, x'} \\<and> phi)", "by simp"], ["", "lemma mp2:\nassumes \"!! x y. phi x y \\<Longrightarrow> chi x y\" and \"phi x y\"\nshows \"chi x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chi x y", "using assms"], ["proof (prove)\nusing this:\n  phi ?x ?y \\<Longrightarrow> chi ?x ?y\n  phi x y\n\ngoal (1 subgoal):\n 1. chi x y", "by simp"], ["", "lemma mp3:\nassumes \"!! x y z. phi x y z \\<Longrightarrow> chi x y z\" and \"phi x y z\"\nshows \"chi x y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chi x y z", "using assms"], ["proof (prove)\nusing this:\n  phi ?x ?y ?z \\<Longrightarrow> chi ?x ?y ?z\n  phi x y z\n\ngoal (1 subgoal):\n 1. chi x y z", "by simp"], ["", "lemma all_lt_Suc:\n\"(\\<forall> i < Suc n. phi i) = ((\\<forall> i < n. phi i) \\<and> phi n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<Suc n. phi i) = ((\\<forall>i<n. phi i) \\<and> phi n)", "using less_Suc_eq"], ["proof (prove)\nusing this:\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<Suc n. phi i) = ((\\<forall>i<n. phi i) \\<and> phi n)", "by auto"], ["", "declare hd_map[simp]"], ["", "lemmas tl_map[simp] = list.map_sel"], ["", "declare last_map[simp]"], ["", "lemma tl_last[simp]:\nassumes \"tl L \\<noteq> []\"\nshows \"last (tl L) = last L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (tl L) = last L", "using assms"], ["proof (prove)\nusing this:\n  tl L \\<noteq> []\n\ngoal (1 subgoal):\n 1. last (tl L) = last L", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. tl L \\<noteq> [] \\<Longrightarrow> last (tl L) = last L", "by(induct L, auto)"], ["", "lemma tl_last_hd:\nassumes \"L \\<noteq> []\" and \"tl L = []\"\nshows \"last L = hd L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last L = hd L", "using assms"], ["proof (prove)\nusing this:\n  L \\<noteq> []\n  tl L = []\n\ngoal (1 subgoal):\n 1. last L = hd L", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L \\<noteq> []; tl L = []\\<rbrakk>\n    \\<Longrightarrow> last L = hd L", "by(induct L, auto)"], ["", "subsection \\<open>Lexicographic induction\\<close>"], ["", "definition lt2 where\n\"lt2 == less_than <*lex*> less_than\""], ["", "definition lt3 where\n\"lt3 == less_than <*lex*> lt2\""], ["", "lemma wf_lt2:\n\"wf lt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf lt2", "unfolding lt2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (less_than <*lex*> less_than)", "by auto"], ["", "lemma wf_lt3:\n\"wf lt3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf lt3", "unfolding lt3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (less_than <*lex*> lt2)", "by (auto simp add: wf_lt2)"], ["", "lemma lt2[intro]:\n\"!! k1 k2 j1 j2. k1 < j1 \\<Longrightarrow> ((k1,k2),(j1,j2)) \\<in> lt2\"\n\"!! k1 k2 j1 j2. \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk> \\<Longrightarrow> ((k1,k2),(j1,j2)) \\<in> lt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 k2 j1 j2.\n        k1 < j1 \\<Longrightarrow> ((k1, k2), j1, j2) \\<in> lt2) &&&\n    (\\<And>k1 k2 j1 j2.\n        \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2), j1, j2) \\<in> lt2)", "unfolding lt2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 k2 j1 j2.\n        k1 < j1 \\<Longrightarrow>\n        ((k1, k2), j1, j2) \\<in> less_than <*lex*> less_than) &&&\n    (\\<And>k1 k2 j1 j2.\n        \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2), j1, j2)\n                          \\<in> less_than <*lex*> less_than)", "by auto"], ["", "lemma lt3[intro]:\n\"!! k1 k2 k3 j1 j2 j3. k1 < j1 \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\"\n\"!! k1 k2 k3 j1 j2 j3. \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk> \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\"\n\"!! k1 k2 k3 j1 j2 j3. \\<lbrakk>k1 \\<le> j1; k2 \\<le> j2; k3 < j3\\<rbrakk> \\<Longrightarrow> ((k1,k2,k3),(j1,j2,j3)) \\<in> lt3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 k2 k3 j1 j2 j3.\n        k1 < j1 \\<Longrightarrow> ((k1, k2, k3), j1, j2, j3) \\<in> lt3) &&&\n    (\\<And>k1 k2 k3 j1 j2 j3.\n        \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2, k3), j1, j2, j3) \\<in> lt3) &&&\n    (\\<And>k1 k2 k3 j1 j2 j3.\n        \\<lbrakk>k1 \\<le> j1; k2 \\<le> j2; k3 < j3\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2, k3), j1, j2, j3) \\<in> lt3)", "unfolding lt3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 k2 k3 j1 j2 j3.\n        k1 < j1 \\<Longrightarrow>\n        ((k1, k2, k3), j1, j2, j3) \\<in> less_than <*lex*> lt2) &&&\n    (\\<And>k1 k2 k3 j1 j2 j3.\n        \\<lbrakk>k1 \\<le> j1; k2 < j2\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2, k3), j1, j2, j3)\n                          \\<in> less_than <*lex*> lt2) &&&\n    (\\<And>k1 k2 k3 j1 j2 j3.\n        \\<lbrakk>k1 \\<le> j1; k2 \\<le> j2; k3 < j3\\<rbrakk>\n        \\<Longrightarrow> ((k1, k2, k3), j1, j2, j3)\n                          \\<in> less_than <*lex*> lt2)", "by auto"], ["", "lemma measure_lex2_induct:\nfixes h1 :: \"'a1 \\<Rightarrow> nat\" and h2 :: \"'a2 \\<Rightarrow> nat\"\nassumes\n\"!! x1 x2.\n  \\<lbrakk>(!! y1 y2. h1 y1 < h1 x1 \\<Longrightarrow> phi y1 y2);\n   (!! y1 y2. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 < h2 x2\\<rbrakk> \\<Longrightarrow> phi y1 y2)\\<rbrakk>\n  \\<Longrightarrow> phi x1 x2\"\nshows \"phi x1 x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi x1 x2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2", "let ?chi = \"%(n1,n2). ALL x1 x2. h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2\""], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2", "fix n1 n2"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2", "have \"?chi (n1,n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (n1, n2) of\n    (n1, n2) \\<Rightarrow>\n      \\<forall>x1 x2.\n         h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2", "apply(rule wf_induct[of lt2 ?chi])"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf lt2\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> lt2 \\<longrightarrow>\n          (case y of\n           (n1, n2) \\<Rightarrow>\n             \\<forall>x1 x2.\n                h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow>\n                phi x1 x2) \\<Longrightarrow>\n       case x of\n       (n1, n2) \\<Rightarrow>\n         \\<forall>x1 x2.\n            h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2", "using wf_lt2 assms"], ["proof (prove)\nusing this:\n  wf lt2\n  \\<lbrakk>\\<And>y1 y2. h1 y1 < h1 ?x1.0 \\<Longrightarrow> phi y1 y2;\n   \\<And>y1 y2.\n      \\<lbrakk>h1 y1 \\<le> h1 ?x1.0; h2 y2 < h2 ?x2.0\\<rbrakk>\n      \\<Longrightarrow> phi y1 y2\\<rbrakk>\n  \\<Longrightarrow> phi ?x1.0 ?x2.0\n\ngoal (2 subgoals):\n 1. wf lt2\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> lt2 \\<longrightarrow>\n          (case y of\n           (n1, n2) \\<Rightarrow>\n             \\<forall>x1 x2.\n                h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow>\n                phi x1 x2) \\<Longrightarrow>\n       case x of\n       (n1, n2) \\<Rightarrow>\n         \\<forall>x1 x2.\n            h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2", "by blast+"], ["proof (state)\nthis:\n  case (n1, n2) of\n  (n1, n2) \\<Rightarrow>\n    \\<forall>x1 x2. h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2\n\ngoal (1 subgoal):\n 1. phi x1 x2", "}"], ["proof (state)\nthis:\n  case (?n1.2, ?n2.2) of\n  (n1, n2) \\<Rightarrow>\n    \\<forall>x1 x2. h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2\n\ngoal (1 subgoal):\n 1. phi x1 x2", "thus ?thesis"], ["proof (prove)\nusing this:\n  case (?n1.2, ?n2.2) of\n  (n1, n2) \\<Rightarrow>\n    \\<forall>x1 x2. h1 x1 = n1 \\<and> h2 x2 = n2 \\<longrightarrow> phi x1 x2\n\ngoal (1 subgoal):\n 1. phi x1 x2", "by blast"], ["proof (state)\nthis:\n  phi x1 x2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measure_lex3_induct:\nfixes h1 :: \"'a1 \\<Rightarrow> nat\" and h2 :: \"'a2 \\<Rightarrow> nat\" and h3 :: \"'a3 \\<Rightarrow> nat\"\nassumes\n\"!! x1 x2 x3.\n  \\<lbrakk>(!! y1 y2 y3. h1 y1 < h1 x1 \\<Longrightarrow> phi y1 y2 y3);\n   (!! y1 y2 y3. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 < h2 x2\\<rbrakk> \\<Longrightarrow> phi y1 y2 y3);\n   (!! y1 y2 y3. \\<lbrakk>h1 y1 \\<le> h1 x1; h2 y2 \\<le> h2 x2; h3 y3 < h3 x3\\<rbrakk> \\<Longrightarrow> phi y1 y2 y3)\\<rbrakk>\n  \\<Longrightarrow> phi x1 x2 x3\"\nshows \"phi x1 x2 x3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "let ?chi = \"%(n1,n2,n3). ALL x1 x2 x3. h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow> phi x1 x2 x3\""], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "fix n1 n2 n3"], ["proof (state)\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "have \"?chi (n1,n2,n3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (n1, n2, n3) of\n    (n1, n2, n3) \\<Rightarrow>\n      \\<forall>x1 x2 x3.\n         h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n         phi x1 x2 x3", "apply(rule wf_induct[of lt3 ?chi])"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf lt3\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> lt3 \\<longrightarrow>\n          (case y of\n           (n1, n2, n3) \\<Rightarrow>\n             \\<forall>x1 x2 x3.\n                h1 x1 = n1 \\<and>\n                h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n                phi x1 x2 x3) \\<Longrightarrow>\n       case x of\n       (n1, n2, n3) \\<Rightarrow>\n         \\<forall>x1 x2 x3.\n            h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n            phi x1 x2 x3", "using wf_lt3 assms"], ["proof (prove)\nusing this:\n  wf lt3\n  \\<lbrakk>\\<And>y1 y2 y3. h1 y1 < h1 ?x1.0 \\<Longrightarrow> phi y1 y2 y3;\n   \\<And>y1 y2 y3.\n      \\<lbrakk>h1 y1 \\<le> h1 ?x1.0; h2 y2 < h2 ?x2.0\\<rbrakk>\n      \\<Longrightarrow> phi y1 y2 y3;\n   \\<And>y1 y2 y3.\n      \\<lbrakk>h1 y1 \\<le> h1 ?x1.0; h2 y2 \\<le> h2 ?x2.0;\n       h3 y3 < h3 ?x3.0\\<rbrakk>\n      \\<Longrightarrow> phi y1 y2 y3\\<rbrakk>\n  \\<Longrightarrow> phi ?x1.0 ?x2.0 ?x3.0\n\ngoal (2 subgoals):\n 1. wf lt3\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> lt3 \\<longrightarrow>\n          (case y of\n           (n1, n2, n3) \\<Rightarrow>\n             \\<forall>x1 x2 x3.\n                h1 x1 = n1 \\<and>\n                h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n                phi x1 x2 x3) \\<Longrightarrow>\n       case x of\n       (n1, n2, n3) \\<Rightarrow>\n         \\<forall>x1 x2 x3.\n            h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n            phi x1 x2 x3", "by blast+"], ["proof (state)\nthis:\n  case (n1, n2, n3) of\n  (n1, n2, n3) \\<Rightarrow>\n    \\<forall>x1 x2 x3.\n       h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n       phi x1 x2 x3\n\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "}"], ["proof (state)\nthis:\n  case (?n1.2, ?n2.2, ?n3.2) of\n  (n1, n2, n3) \\<Rightarrow>\n    \\<forall>x1 x2 x3.\n       h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n       phi x1 x2 x3\n\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "thus ?thesis"], ["proof (prove)\nusing this:\n  case (?n1.2, ?n2.2, ?n3.2) of\n  (n1, n2, n3) \\<Rightarrow>\n    \\<forall>x1 x2 x3.\n       h1 x1 = n1 \\<and> h2 x2 = n2 \\<and> h3 x3 = n3 \\<longrightarrow>\n       phi x1 x2 x3\n\ngoal (1 subgoal):\n 1. phi x1 x2 x3", "by blast"], ["proof (state)\nthis:\n  phi x1 x2 x3\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Inputs and lifting operators\\<close>"], ["", "type_synonym ('index,'val)input = \"'index \\<Rightarrow> 'val option\""], ["", "definition\nlift :: \"('val1 \\<Rightarrow> 'val2) \\<Rightarrow> ('index,'val1)input \\<Rightarrow> ('index,'val2)input\"\nwhere\n\"lift h inp == \\<lambda>i. case inp i of None \\<Rightarrow> None\n                                |Some v \\<Rightarrow> Some (h v)\""], ["", "definition\nliftAll :: \"('val \\<Rightarrow> bool) \\<Rightarrow> ('index,'val)input \\<Rightarrow> bool\"\nwhere\n\"liftAll phi inp == \\<forall> i v. inp i = Some v \\<longrightarrow> phi v\""], ["", "definition\nlift2 ::\n\"('val1' \\<Rightarrow> 'val1 \\<Rightarrow> 'val2) \\<Rightarrow> ('index,'val1')input \\<Rightarrow> ('index,'val1)input \\<Rightarrow> ('index,'val2)input\"\nwhere\n\"lift2 h inp' inp ==\n \\<lambda>i. case (inp' i, inp i) of\n   (Some v',Some v) \\<Rightarrow> Some (h v' v)\n  |_ \\<Rightarrow> None\""], ["", "definition\nsameDom ::  \"('index,'val1)input \\<Rightarrow> ('index,'val2)input \\<Rightarrow> bool\"\nwhere \"sameDom inp1 inp2 == \\<forall> i. (inp1 i = None) = (inp2 i = None)\""], ["", "definition\nliftAll2 :: \"('val1 \\<Rightarrow> 'val2 \\<Rightarrow> bool) \\<Rightarrow> ('index,'val1)input \\<Rightarrow> ('index,'val2)input \\<Rightarrow> bool\"\nwhere\n\"liftAll2 phi inp1 inp2 == (\\<forall> i v1 v2. inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow> phi v1 v2)\""], ["", "lemma lift_None: \"(lift h inp i = None) = (inp i = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift h inp i = None) = (inp i = None)", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case inp i of None \\<Rightarrow> None\n      | Some v \\<Rightarrow> Some (h v)) =\n     None) =\n    (inp i = None)", "by (cases \"inp i\", auto)"], ["", "lemma lift_Some:\n\"(\\<exists> v. lift h inp i = Some v) = (\\<exists> v'. inp i = Some v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>v. lift h inp i = Some v) = (\\<exists>v'. inp i = Some v')", "using lift_None[of h inp i]"], ["proof (prove)\nusing this:\n  (lift h inp i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<exists>v. lift h inp i = Some v) = (\\<exists>v'. inp i = Some v')", "by force"], ["", "lemma lift_cong[fundef_cong]:\nassumes \"\\<And> i v. inp i = Some v \\<Longrightarrow>  h v = h' v\"\nshows \"lift h inp = lift h' inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift h inp = lift h' inp", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h v)) =\n    (\\<lambda>i.\n        case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h' v))", "apply(rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h v)) =\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h' v))", "using assms"], ["proof (prove)\nusing this:\n  inp ?i = Some ?v \\<Longrightarrow> h ?v = h' ?v\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h v)) =\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (h' v))", "by (case_tac \"inp i\", auto)"], ["", "lemma lift_preserves_inj:\nassumes \"inj f\"\nshows \"inj (lift f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (lift f)", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>UNIV.\n       \\<forall>y\\<in>UNIV. lift f x = lift f y \\<longrightarrow> x = y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. lift f x = lift f y \\<Longrightarrow> x = y", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa. lift f x = lift f y \\<Longrightarrow> x xa = y xa", "fix inp inp' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa. lift f x = lift f y \\<Longrightarrow> x xa = y xa", "assume *: \"lift f inp = lift f inp'\""], ["proof (state)\nthis:\n  lift f inp = lift f inp'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa. lift f x = lift f y \\<Longrightarrow> x xa = y xa", "show \"inp i = inp' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inp i = inp' i", "proof(cases \"inp i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "assume inp: \"inp i = None\""], ["proof (state)\nthis:\n  inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift f inp i = None\""], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. lift f inp i = None", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp i = None\n\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (f v)) =\n    None", "by simp"], ["proof (state)\nthis:\n  lift f inp i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift f inp' i = None\""], ["proof (prove)\nusing this:\n  lift f inp i = None\n\ngoal (1 subgoal):\n 1. lift f inp' i = None", "using *"], ["proof (prove)\nusing this:\n  lift f inp i = None\n  lift f inp = lift f inp'\n\ngoal (1 subgoal):\n 1. lift f inp' i = None", "by simp"], ["proof (state)\nthis:\n  lift f inp' i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"inp' i = None\""], ["proof (prove)\nusing this:\n  lift f inp' i = None\n\ngoal (1 subgoal):\n 1. inp' i = None", "by(auto simp add: lift_None)"], ["proof (state)\nthis:\n  inp' i = None\n\ngoal (2 subgoals):\n 1. inp i = None \\<Longrightarrow> inp i = inp' i\n 2. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  inp' i = None\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "using inp"], ["proof (prove)\nusing this:\n  inp' i = None\n  inp i = None\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "by simp"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "assume inp: \"inp i = Some v\""], ["proof (state)\nthis:\n  inp i = Some v\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift f inp i = Some (f v)\""], ["proof (prove)\nusing this:\n  inp i = Some v\n\ngoal (1 subgoal):\n 1. lift f inp i = Some (f v)", "unfolding lift_def"], ["proof (prove)\nusing this:\n  inp i = Some v\n\ngoal (1 subgoal):\n 1. (case inp i of None \\<Rightarrow> None\n     | Some v \\<Rightarrow> Some (f v)) =\n    Some (f v)", "by simp"], ["proof (state)\nthis:\n  lift f inp i = Some (f v)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"lift f inp' i = Some (f v)\""], ["proof (prove)\nusing this:\n  lift f inp i = Some (f v)\n\ngoal (1 subgoal):\n 1. lift f inp' i = Some (f v)", "using *"], ["proof (prove)\nusing this:\n  lift f inp i = Some (f v)\n  lift f inp = lift f inp'\n\ngoal (1 subgoal):\n 1. lift f inp' i = Some (f v)", "by simp"], ["proof (state)\nthis:\n  lift f inp' i = Some (f v)\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "then"], ["proof (chain)\npicking this:\n  lift f inp' i = Some (f v)", "obtain v' where inp': \"inp' i = Some v'\" and \"f v' = f v\""], ["proof (prove)\nusing this:\n  lift f inp' i = Some (f v)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>inp' i = Some v'; f v' = f v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lift_def"], ["proof (prove)\nusing this:\n  (case inp' i of None \\<Rightarrow> None\n   | Some v \\<Rightarrow> Some (f v)) =\n  Some (f v)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>inp' i = Some v'; f v' = f v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(case_tac \"inp' i\", auto)"], ["proof (state)\nthis:\n  inp' i = Some v'\n  f v' = f v\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "hence \"v = v'\""], ["proof (prove)\nusing this:\n  inp' i = Some v'\n  f v' = f v\n\ngoal (1 subgoal):\n 1. v = v'", "using assms"], ["proof (prove)\nusing this:\n  inp' i = Some v'\n  f v' = f v\n  inj f\n\ngoal (1 subgoal):\n 1. v = v'", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  inp' i = Some v'\n  f v' = f v\n  \\<forall>x\\<in>UNIV.\n     \\<forall>y\\<in>UNIV. f x = f y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. v = v'", "by simp"], ["proof (state)\nthis:\n  v = v'\n\ngoal (1 subgoal):\n 1. \\<And>a. inp i = Some a \\<Longrightarrow> inp i = inp' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = v'\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "using inp inp'"], ["proof (prove)\nusing this:\n  v = v'\n  inp i = Some v\n  inp' i = Some v'\n\ngoal (1 subgoal):\n 1. inp i = inp' i", "by simp"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inp i = inp' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma liftAll_cong[fundef_cong]:\nassumes \"\\<And> i v. inp i = Some v \\<Longrightarrow> phi v = phi' v\"\nshows \"liftAll phi inp = liftAll phi' inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll phi inp = liftAll phi' inp", "unfolding liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. inp i = Some v \\<longrightarrow> phi v) =\n    (\\<forall>i v. inp i = Some v \\<longrightarrow> phi' v)", "apply((rule iff_allI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i v.\n       (inp i = Some v \\<longrightarrow> phi v) =\n       (inp i = Some v \\<longrightarrow> phi' v)", "using assms"], ["proof (prove)\nusing this:\n  inp ?i = Some ?v \\<Longrightarrow> phi ?v = phi' ?v\n\ngoal (1 subgoal):\n 1. \\<And>i v.\n       (inp i = Some v \\<longrightarrow> phi v) =\n       (inp i = Some v \\<longrightarrow> phi' v)", "by simp"], ["", "lemma liftAll2_cong[fundef_cong]:\nassumes \"\\<And> i v1 v2. \\<lbrakk>inp1 i = Some v1; inp2 i = Some v2\\<rbrakk> \\<Longrightarrow> phi v1 v2 = phi' v1 v2\"\nshows \"liftAll2 phi inp1 inp2 = liftAll2 phi' inp1 inp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 phi inp1 inp2 = liftAll2 phi' inp1 inp2", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v1 v2.\n        inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi v1 v2) =\n    (\\<forall>i v1 v2.\n        inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi' v1 v2)", "apply((rule iff_allI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       (inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi v1 v2) =\n       (inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi' v1 v2)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>inp1 ?i = Some ?v1.0; inp2 ?i = Some ?v2.0\\<rbrakk>\n  \\<Longrightarrow> phi ?v1.0 ?v2.0 = phi' ?v1.0 ?v2.0\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       (inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi v1 v2) =\n       (inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        phi' v1 v2)", "by blast"], ["", "lemma lift_ident: \"lift (\\<lambda>v. v) inp = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (\\<lambda>v. v) inp = inp", "by(unfold lift_def, rule ext, case_tac \"inp i\", auto)"], ["", "lemma lift_id[simp]:\n\"lift id inp = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift id inp = inp", "unfolding lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (id v)) =\n    inp", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (id v)) =\n       inp i", "by(case_tac \"inp i\", auto)"], ["", "lemma lift_comp: \"lift g (lift f inp) = lift (g o f) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift g (lift f inp) = lift (g \\<circ> f) inp", "by(unfold lift_def o_def, rule ext, case_tac \"inp i\", auto)"], ["", "lemma liftAll_mono:\nassumes \"\\<And> v. phi v \\<Longrightarrow> chi v\" and \"liftAll phi inp\"\nshows \"liftAll chi inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll chi inp", "using assms"], ["proof (prove)\nusing this:\n  phi ?v \\<Longrightarrow> chi ?v\n  liftAll phi inp\n\ngoal (1 subgoal):\n 1. liftAll chi inp", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  phi ?v \\<Longrightarrow> chi ?v\n  \\<forall>i v. inp i = Some v \\<longrightarrow> phi v\n\ngoal (1 subgoal):\n 1. \\<forall>i v. inp i = Some v \\<longrightarrow> chi v", "by blast"], ["", "lemma liftAll_True: \"liftAll (\\<lambda>v. True) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>v. True) inp", "unfolding liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v. inp i = Some v \\<longrightarrow> True", "by auto"], ["", "lemma liftAll_lift_comp:  \"liftAll phi (lift f inp) = liftAll (phi o f) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll phi (lift f inp) = liftAll (phi \\<circ> f) inp", "unfolding liftAll_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. lift f inp i = Some v \\<longrightarrow> phi v) =\n    (\\<forall>i v. inp i = Some v \\<longrightarrow> phi (f v))", "by (metis (mono_tags, lifting) lift_Some lift_def option.inject option.simps(5))"], ["", "lemma liftAll_lift_ext:\n\"liftAll (\\<lambda> x. f x = g x) inp = (lift f inp = lift g inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>x. f x = g x) inp = (lift f inp = lift g inp)", "unfolding lift_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. inp i = Some v \\<longrightarrow> f v = g v) =\n    ((\\<lambda>i.\n         case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)) =\n     (\\<lambda>i.\n         case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (g v)))", "by (auto simp: fun_eq_iff option.case_eq_if)"], ["", "lemma liftAll_and:\n\"liftAll (\\<lambda> x. phi x \\<and> chi x) inp = (liftAll phi inp \\<and> liftAll chi inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll (\\<lambda>x. phi x \\<and> chi x) inp =\n    (liftAll phi inp \\<and> liftAll chi inp)", "unfolding liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. inp i = Some v \\<longrightarrow> phi v \\<and> chi v) =\n    ((\\<forall>i v. inp i = Some v \\<longrightarrow> phi v) \\<and>\n     (\\<forall>i v. inp i = Some v \\<longrightarrow> chi v))", "by blast"], ["", "lemma liftAll_mp:\nassumes \"liftAll (\\<lambda> v. phi v \\<longrightarrow> chi v) inp\" and \"liftAll phi inp\"\nshows \"liftAll chi inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll chi inp", "using assms"], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>v. phi v \\<longrightarrow> chi v) inp\n  liftAll phi inp\n\ngoal (1 subgoal):\n 1. liftAll chi inp", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow> phi v \\<longrightarrow> chi v\n  \\<forall>i v. inp i = Some v \\<longrightarrow> phi v\n\ngoal (1 subgoal):\n 1. \\<forall>i v. inp i = Some v \\<longrightarrow> chi v", "by auto"], ["", "lemma sameDom_refl: \"sameDom inp inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp inp", "unfolding sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. (inp i = None) = (inp i = None)", "by auto"], ["", "lemma sameDom_sym:\n\"sameDom inp inp' = sameDom inp' inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp inp' = sameDom inp' inp", "unfolding sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i. (inp i = None) = (inp' i = None)) =\n    (\\<forall>i. (inp' i = None) = (inp i = None))", "by auto"], ["", "lemma sameDom_trans:\n\"\\<lbrakk>sameDom inp inp'; sameDom inp' inp''\\<rbrakk> \\<Longrightarrow> sameDom inp inp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sameDom inp inp'; sameDom inp' inp''\\<rbrakk>\n    \\<Longrightarrow> sameDom inp inp''", "unfolding sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. (inp i = None) = (inp' i = None);\n     \\<forall>i. (inp' i = None) = (inp'' i = None)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i. (inp i = None) = (inp'' i = None)", "by auto"], ["", "lemma sameDom_lift1:\n\"sameDom inp (lift f inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp (lift f inp)", "unfolding sameDom_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (inp i = None) =\n       ((case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)) =\n        None)", "by (auto simp: option.case_eq_if)"], ["", "lemma sameDom_lift2:\n\"sameDom (lift f inp) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift f inp) inp", "unfolding sameDom_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       ((case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)) =\n        None) =\n       (inp i = None)", "by (auto simp: option.case_eq_if)"], ["", "lemma sameDom_lift_simp1[simp]:\n\"sameDom inp (lift f inp') = sameDom inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp (lift f inp') = sameDom inp inp'", "unfolding sameDom_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        (inp i = None) =\n        ((case inp' i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (f v)) =\n         None)) =\n    (\\<forall>i. (inp i = None) = (inp' i = None))", "by (force simp: fun_eq_iff option.case_eq_if)"], ["", "lemma sameDom_lift_simp2[simp]:\n\"sameDom (lift f inp) inp' = sameDom inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift f inp) inp' = sameDom inp inp'", "unfolding sameDom_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        ((case inp i of None \\<Rightarrow> None\n          | Some v \\<Rightarrow> Some (f v)) =\n         None) =\n        (inp' i = None)) =\n    (\\<forall>i. (inp i = None) = (inp' i = None))", "by (force simp: fun_eq_iff option.case_eq_if)"], ["", "lemma lift_preserves_sameDom:\nassumes \"sameDom inp inp'\"\nshows \"sameDom (lift f inp) (lift g inp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift f inp) (lift g inp')", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp inp'\n\ngoal (1 subgoal):\n 1. sameDom (lift f inp) (lift g inp')", "unfolding sameDom_def lift_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp i = None) = (inp' i = None)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       ((case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)) =\n        None) =\n       ((case inp' i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (g v)) =\n        None)", "by (force simp: fun_eq_iff option.case_eq_if)"], ["", "definition comp2 ::\n\"('b1 \\<Rightarrow> 'b2 \\<Rightarrow> 'c) \\<Rightarrow> ('a1 \\<Rightarrow> 'b1) \\<Rightarrow> ('a2 \\<Rightarrow> 'b2) \\<Rightarrow> ('a1 \\<Rightarrow> 'a2 \\<Rightarrow> 'c)\"\n(\"_ o2 '(_,_')\" 55)\nwhere \"h o2 (f,g) == \\<lambda> x y. h (f x) (g y)\""], ["", "lemma comp2_simp[simp]:\n\"(h o2 (f,g)) x y = h (f x) (g y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h o2 (f,g)) x y = h (f x) (g y)", "unfolding comp2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (f x) (g y) = h (f x) (g y)", "by simp"], ["", "lemma comp2_comp:\n\"((h o2 (f,g)) o2 (f',g')) = (h o2 (f o f', g o g'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h o2 (f,g) o2 (f',g') = h o2 (f \\<circ> f',g \\<circ> g')", "unfolding comp_def[abs_def] comp2_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y. h (f (f' x)) (g (g' y))) =\n    (\\<lambda>x y. h (f (f' x)) (g (g' y)))", "by auto"], ["", "lemma liftAll_imp_liftAll2:\nassumes \"liftAll (\\<lambda>v. \\<forall> v'. phi v v') inp\"\nshows \"liftAll2 phi inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 phi inp inp'", "using assms"], ["proof (prove)\nusing this:\n  liftAll (\\<lambda>v. \\<forall>v'. phi v v') inp\n\ngoal (1 subgoal):\n 1. liftAll2 phi inp inp'", "unfolding liftAll_def liftAll2_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. inp i = Some v \\<longrightarrow> All (phi v)\n\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> phi v1 v2", "by auto"], ["", "lemma liftAll2_mono:\nassumes \"\\<And> v v'. phi v v' \\<Longrightarrow> chi v v'\" and \"liftAll2 phi inp inp'\"\nshows \"liftAll2 chi inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 chi inp inp'", "using assms"], ["proof (prove)\nusing this:\n  phi ?v ?v' \\<Longrightarrow> chi ?v ?v'\n  liftAll2 phi inp inp'\n\ngoal (1 subgoal):\n 1. liftAll2 chi inp inp'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  phi ?v ?v' \\<Longrightarrow> chi ?v ?v'\n  \\<forall>i v1 v2.\n     inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> phi v1 v2\n\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> chi v1 v2", "by blast"], ["", "lemma liftAll2_True: \"liftAll2 (\\<lambda> v v'. True) inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 (\\<lambda>v v'. True) inp inp'", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> True", "by auto"], ["", "lemma liftAll2_lift_comp2:\n\"liftAll2 phi (lift f1 inp1) (lift f2 inp2) =\n liftAll2 (phi o2 (f1,f2)) inp1 inp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 phi (lift f1 inp1) (lift f2 inp2) =\n    liftAll2 (phi o2 (f1,f2)) inp1 inp2", "unfolding liftAll2_def lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v1 v2.\n        (case inp1 i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f1 v)) =\n        Some v1 \\<and>\n        (case inp2 i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f2 v)) =\n        Some v2 \\<longrightarrow>\n        phi v1 v2) =\n    (\\<forall>i v1 v2.\n        inp1 i = Some v1 \\<and> inp2 i = Some v2 \\<longrightarrow>\n        (phi o2 (f1,f2)) v1 v2)", "by (auto simp: fun_eq_iff option.case_eq_if)"], ["", "lemma lift_imp_sameDom:\n\"lift f inp = lift f inp' \\<Longrightarrow> sameDom inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f inp = lift f inp' \\<Longrightarrow> sameDom inp inp'", "unfolding lift_def sameDom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case inp i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (f v)) =\n    (\\<lambda>i.\n        case inp' i of None \\<Rightarrow> None\n        | Some v \\<Rightarrow> Some (f v)) \\<Longrightarrow>\n    \\<forall>i. (inp i = None) = (inp' i = None)", "by (force simp: fun_eq_iff option.case_eq_if split: if_splits)"], ["", "lemma lift_lift2:\n\"lift f (lift2 g inp' inp) =\n lift2 (\\<lambda> v' v. f (g v' v)) inp' inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift f (lift2 g inp' inp) = lift2 (\\<lambda>v' v. f (g v' v)) inp' inp", "unfolding lift_def lift2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n             | (Some v', None) \\<Rightarrow> None\n             | (Some v', Some v) \\<Rightarrow> Some (g v' v) of\n        None \\<Rightarrow> None | Some v \\<Rightarrow> Some (f v)) =\n    (\\<lambda>i.\n        case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n        | (Some v', None) \\<Rightarrow> None\n        | (Some v', Some v) \\<Rightarrow> Some (f (g v' v)))", "by (force simp: option.case_eq_if split: if_splits)"], ["", "lemma lift2_left[simp]:\nassumes \"sameDom inp' inp\"\nshows \"lift2 (\\<lambda> v' v. v') inp' inp = inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift2 (\\<lambda>v' v. v') inp' inp = inp'", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp\n\ngoal (1 subgoal):\n 1. lift2 (\\<lambda>v' v. v') inp' inp = inp'", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n        | (Some v', None) \\<Rightarrow> None\n        | (Some v', Some v) \\<Rightarrow> Some v') =\n    inp'", "by (simp add: fun_eq_iff option.case_eq_if) metis"], ["", "lemma lift2_right[simp]:\nassumes \"sameDom inp' inp\"\nshows \"lift2 (\\<lambda> v' v. v) inp' inp = inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift2 (\\<lambda>v' v. v) inp' inp = inp", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp\n\ngoal (1 subgoal):\n 1. lift2 (\\<lambda>v' v. v) inp' inp = inp", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n        | (Some v', None) \\<Rightarrow> None\n        | (Some v', Some v) \\<Rightarrow> Some v) =\n    inp", "by (simp add: fun_eq_iff option.case_eq_if)"], ["", "lemma lift2_preserves_sameDom:\nassumes \"sameDom inp' inp1'\" and \"sameDom inp inp1\"\nshows \"sameDom (lift2 f inp' inp) (lift2 g inp1' inp1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) (lift2 g inp1' inp1)", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp1'\n  sameDom inp inp1\n\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) (lift2 g inp1' inp1)", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp1' i = None)\n  \\<forall>i. (inp i = None) = (inp1 i = None)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n         | (Some v', None) \\<Rightarrow> None\n         | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n        None) =\n       ((case (inp1' i, inp1 i) of (None, b) \\<Rightarrow> None\n         | (Some v', None) \\<Rightarrow> None\n         | (Some v', Some v) \\<Rightarrow> Some (g v' v)) =\n        None)", "by (simp add: fun_eq_iff option.case_eq_if)"], ["", "lemma sameDom_lift2_1:\nassumes \"sameDom inp' inp\"\nshows\n\"sameDom inp' (lift2 f inp' inp) \\<and>\n sameDom inp (lift2 f inp' inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp' (lift2 f inp' inp) \\<and> sameDom inp (lift2 f inp' inp)", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp\n\ngoal (1 subgoal):\n 1. sameDom inp' (lift2 f inp' inp) \\<and> sameDom inp (lift2 f inp' inp)", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        (inp' i = None) =\n        ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None)) \\<and>\n    (\\<forall>i.\n        (inp i = None) =\n        ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None))", "by (simp add: fun_eq_iff option.case_eq_if)"], ["", "lemma sameDom_lift2_2:\nassumes \"sameDom inp' inp\"\nshows\n\"sameDom (lift2 f inp' inp) inp' \\<and>\n sameDom (lift2 f inp' inp) inp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) inp' \\<and> sameDom (lift2 f inp' inp) inp", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp\n\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) inp' \\<and> sameDom (lift2 f inp' inp) inp", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None) =\n        (inp' i = None)) \\<and>\n    (\\<forall>i.\n        ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None) =\n        (inp i = None))", "by (simp add: fun_eq_iff option.case_eq_if)"], ["", "lemma sameDom_lift2_simp1[simp]:\nassumes \"sameDom inp1' inp1\"\nshows \"sameDom inp (lift2 f inp1' inp1) = sameDom inp inp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom inp (lift2 f inp1' inp1) = sameDom inp inp1'", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp1' inp1\n\ngoal (1 subgoal):\n 1. sameDom inp (lift2 f inp1' inp1) = sameDom inp inp1'", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp1' i = None) = (inp1 i = None)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        (inp i = None) =\n        ((case (inp1' i, inp1 i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None)) =\n    (\\<forall>i. (inp i = None) = (inp1' i = None))", "by (simp add: fun_eq_iff option.case_eq_if) (metis not_Some_eq)"], ["", "lemma sameDom_lift2_simp2[simp]:\nassumes \"sameDom inp' inp\"\nshows \"sameDom (lift2 f inp' inp) inp1 = sameDom inp' inp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) inp1 = sameDom inp' inp1", "using assms"], ["proof (prove)\nusing this:\n  sameDom inp' inp\n\ngoal (1 subgoal):\n 1. sameDom (lift2 f inp' inp) inp1 = sameDom inp' inp1", "unfolding sameDom_def lift2_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (inp' i = None) = (inp i = None)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        ((case (inp' i, inp i) of (None, b) \\<Rightarrow> None\n          | (Some v', None) \\<Rightarrow> None\n          | (Some v', Some v) \\<Rightarrow> Some (f v' v)) =\n         None) =\n        (inp1 i = None)) =\n    (\\<forall>i. (inp' i = None) = (inp1 i = None))", "by (simp add: fun_eq_iff option.case_eq_if) (metis not_Some_eq)"], ["", "lemma liftAll2_lift_ext:\n\"(sameDom inp inp' \\<and> liftAll2 (\\<lambda> v v'. f v = f v') inp inp') =\n (lift f inp = lift f inp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sameDom inp inp' \\<and>\n     liftAll2 (\\<lambda>v v'. f v = f v') inp inp') =\n    (lift f inp = lift f inp')", "unfolding sameDom_def lift_def liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n     (\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         f v1 = f v2)) =\n    ((\\<lambda>i.\n         case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)) =\n     (\\<lambda>i.\n         case inp' i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (f v)))", "by (force simp add: fun_eq_iff option.case_eq_if)"], ["", "lemma liftAll2_and:\n\"liftAll2 (\\<lambda> v v'. phi v v' \\<and> chi v v') inp inp' =\n(liftAll2 phi inp inp' \\<and> liftAll2 chi inp inp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 (\\<lambda>v v'. phi v v' \\<and> chi v v') inp inp' =\n    (liftAll2 phi inp inp' \\<and> liftAll2 chi inp inp')", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v1 v2.\n        inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n        phi v1 v2 \\<and> chi v1 v2) =\n    ((\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         phi v1 v2) \\<and>\n     (\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         chi v1 v2))", "by force"], ["", "lemma liftAll2_mp:\nassumes \"liftAll2 (\\<lambda> v v'. phi v v' \\<longrightarrow> chi v v') inp inp'\" and \"liftAll2 phi inp inp'\"\nshows \"liftAll2 chi inp inp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 chi inp inp'", "using assms"], ["proof (prove)\nusing this:\n  liftAll2 (\\<lambda>v v'. phi v v' \\<longrightarrow> chi v v') inp inp'\n  liftAll2 phi inp inp'\n\ngoal (1 subgoal):\n 1. liftAll2 chi inp inp'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  \\<forall>i v1 v2.\n     inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n     phi v1 v2 \\<longrightarrow> chi v1 v2\n  \\<forall>i v1 v2.\n     inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> phi v1 v2\n\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow> chi v1 v2", "by auto"], ["", "lemma sameDom_and_liftAll2_iff:\n\"(sameDom inp inp' \\<and> liftAll2 phi inp inp') =\n (\\<forall> i. (inp i = None \\<and> inp' i = None) \\<or>\n         (\\<exists> v v'. inp i = Some v \\<and> inp' i = Some v' \\<and> phi v v'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sameDom inp inp' \\<and> liftAll2 phi inp inp') =\n    (\\<forall>i.\n        inp i = None \\<and> inp' i = None \\<or>\n        (\\<exists>v v'.\n            inp i = Some v \\<and> inp' i = Some v' \\<and> phi v v'))", "unfolding sameDom_def liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n     (\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         phi v1 v2)) =\n    (\\<forall>i.\n        inp i = None \\<and> inp' i = None \\<or>\n        (\\<exists>v v'.\n            inp i = Some v \\<and> inp' i = Some v' \\<and> phi v v'))", "apply (auto simp add: fun_eq_iff option.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>\\<forall>i.\n                   inp i = None \\<and> inp' i = None \\<or>\n                   (\\<exists>v.\n                       inp i = Some v \\<and>\n                       (\\<exists>v'. inp' i = Some v' \\<and> phi v v'));\n        inp i = Some v1; inp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> phi v1 v2", "using option.sel"], ["proof (prove)\nusing this:\n  the (Some ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>\\<forall>i.\n                   inp i = None \\<and> inp' i = None \\<or>\n                   (\\<exists>v.\n                       inp i = Some v \\<and>\n                       (\\<exists>v'. inp' i = Some v' \\<and> phi v v'));\n        inp i = Some v1; inp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> phi v1 v2", "by fastforce"], ["", "subsection \\<open>Doubly infinitely-branching trees\\<close>"], ["", "text \"These simple infinitary trees shall be used for measuring the sizes\n  of possibly infinitary terms.\""], ["", "datatype ('index,'bindex)tree =\n  Branch \"('index,('index,'bindex)tree) input\" \"('bindex,('index,'bindex)tree) input\""], ["", "(* The natural induction principle for (infinitary) trees:  *)"], ["", "lemma tree_induct:\nfixes phi::\"('index,'bindex)tree \\<Rightarrow> bool\" and T::\"('index,'bindex)tree\"\nassumes\n  \"\\<And> inp binp. \\<lbrakk>liftAll phi inp; liftAll phi binp\\<rbrakk> \\<Longrightarrow> phi (Branch inp binp)\"\nshows \"phi T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi T", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>liftAll phi ?inp; liftAll phi ?binp\\<rbrakk>\n  \\<Longrightarrow> phi (Branch ?inp ?binp)\n\ngoal (1 subgoal):\n 1. phi T", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>i v. ?inp i = Some v \\<longrightarrow> phi v;\n   \\<forall>i v. ?binp i = Some v \\<longrightarrow> phi v\\<rbrakk>\n  \\<Longrightarrow> phi (Branch ?inp ?binp)\n\ngoal (1 subgoal):\n 1. phi T", "by (induct T) (simp, metis rangeI)"], ["", "definition treeLess :: \"('index,'bindex)tree rel\"\nwhere\n\"treeLess ==\n {(T,T'). \\<exists> inp binp i j. T' = Branch inp binp \\<and> (inp i = Some T \\<or> binp j = Some T)}\""], ["", "lemma treeLess_induct:\nfixes phi::\"('index,'bindex)tree \\<Rightarrow> bool\" and\n      T::\"('index,'bindex)tree\"\nassumes \"\\<And> T'. (\\<And> T. (T,T') \\<in> treeLess \\<Longrightarrow> phi T) \\<Longrightarrow> phi T'\"\nshows \"phi T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phi T", "apply(induct rule: tree_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>liftAll phi inp; liftAll phi binp\\<rbrakk>\n       \\<Longrightarrow> phi (Branch inp binp)", "using assms"], ["proof (prove)\nusing this:\n  (\\<And>T.\n      (T, ?T') \\<in> treeLess \\<Longrightarrow> phi T) \\<Longrightarrow>\n  phi ?T'\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>liftAll phi inp; liftAll phi binp\\<rbrakk>\n       \\<Longrightarrow> phi (Branch inp binp)", "unfolding treeLess_def liftAll_def"], ["proof (prove)\nusing this:\n  (\\<And>T.\n      (T, ?T')\n      \\<in> {(T, T').\n             \\<exists>inp binp i j.\n                T' = Branch inp binp \\<and>\n                (inp i = Some T \\<or> binp j = Some T)} \\<Longrightarrow>\n      phi T) \\<Longrightarrow>\n  phi ?T'\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v. inp i = Some v \\<longrightarrow> phi v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> phi v\\<rbrakk>\n       \\<Longrightarrow> phi (Branch inp binp)", "by simp (metis tree.inject)"], ["", "lemma treeLess_wf: \"wf treeLess\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf treeLess", "unfolding wf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       (\\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> treeLess \\<longrightarrow>\n               P y) \\<longrightarrow>\n           P x) \\<longrightarrow>\n       All P", "using treeLess_induct"], ["proof (prove)\nusing this:\n  (\\<And>T'.\n      (\\<And>T.\n          (T, T') \\<in> treeLess \\<Longrightarrow> ?phi T) \\<Longrightarrow>\n      ?phi T') \\<Longrightarrow>\n  ?phi ?T\n\ngoal (1 subgoal):\n 1. \\<forall>P.\n       (\\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> treeLess \\<longrightarrow>\n               P y) \\<longrightarrow>\n           P x) \\<longrightarrow>\n       All P", "by blast"], ["", "subsection \\<open>Ordering\\<close>"], ["", "lemma Least_Max:\nassumes phi: \"phi (n::nat)\" and fin: \"finite {n. phi n}\"\nshows \"(LEAST m. \\<forall> n. phi n \\<longrightarrow> n \\<le> m) =\n       Max {n. phi n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST m. \\<forall>n. phi n \\<longrightarrow> n \\<le> m) =\n    Max {n. phi n}", "using assms Max_in"], ["proof (prove)\nusing this:\n  phi n\n  finite {n. phi n}\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. (LEAST m. \\<forall>n. phi n \\<longrightarrow> n \\<le> m) =\n    Max {n. phi n}", "by (intro Least_equality) auto"], ["", "end"]]}