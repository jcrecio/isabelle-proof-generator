{"file_name": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory/QuasiTerms_PickFresh_Alpha.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Binding_Syntax_Theory", "problem_names": ["lemma varSort_lt_var_INNER:\n\"|UNIV :: 'varSort set| <o |UNIV :: 'var set|\"", "lemma varSort_le_Var:\n\"|UNIV :: 'varSort set| \\<le>o |UNIV :: 'var set|\"", "theorem var_infinite_INNER: \"infinite (UNIV :: 'var set)\"", "theorem var_regular_INNER: \"regular |UNIV :: 'var set|\"", "theorem infinite_var_regular_INNER:\n\"infinite (UNIV :: 'var set) \\<and> regular |UNIV :: 'var set|\"", "theorem finite_ordLess_var:\n\"( |S| <o |UNIV :: 'var set| \\<or> finite S) = ( |S| <o |UNIV :: 'var set| )\"", "lemma qSwapAll_preserves_qGoodAll1:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs x y\nshows\n\"(qGood X \\<longrightarrow> qGood (X #[[x \\<and> y]]_zs)) \\<and>\n (qGoodAbs A \\<longrightarrow> qGoodAbs (A $[[x \\<and> y]]_zs))\"", "lemma qSwap_preserves_qGood2:\nassumes \"qGood(X #[[x \\<and> y]]_zs)\"\nshows \"qGood X\"", "lemma qSwapAbs_preserves_qGoodAbs2:\nassumes \"qGoodAbs(A $[[x \\<and> y]]_zs)\"\nshows \"qGoodAbs A\"", "lemma qSwap_preserves_qGood: \"(qGood (X #[[x \\<and> y]]_zs)) = (qGood X)\"", "lemma qSwapAbs_preserves_qGoodAbs:\n\"(qGoodAbs (A $[[x \\<and> y]]_zs)) = (qGoodAbs A)\"", "lemma qSwap_twice_preserves_qGood:\n\"(qGood ((X #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs')) = (qGood X)\"", "lemma qSwapped_preserves_qGood:\n\"(X,Y) \\<in> qSwapped \\<Longrightarrow> qGood Y = qGood X\"", "lemma qGood_qTerm_templateInduct[case_names Rel Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs rel\nassumes\nREL: \"\\<And> X Y. \\<lbrakk>qGood X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\" and\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda>X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                   \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X; \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\"", "lemma qGood_qTerm_rawInduct[case_names Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda> X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                       \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X; phi X\\<rbrakk>  \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows \"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\"", "lemma qGood_qTerm_induct[case_names Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda> X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                       \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                 \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi Y;\n                 \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\"", "lemma qGood_qTerm_induct_mutual[case_names Var1 Var2 Op1 Op2 Abs1 Abs2]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi1 phi2 phiAbs1 phiAbs2\nassumes\nVar1: \"\\<And> xs x. phi1 (qVar xs x)\" and\nVar2: \"\\<And> xs x. phi2 (qVar xs x)\" and\nOp1: \"\\<And> delta inp binp. \\<lbrakk>liftAll (\\<lambda> X. qGood X \\<and> phi1 X) inp;\n                         liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs1 A) binp\\<rbrakk>\n                        \\<Longrightarrow> phi1 (qOp delta inp binp)\" and\nOp2: \"\\<And> delta inp binp. \\<lbrakk>liftAll (\\<lambda> X. qGood X \\<and> phi2 X) inp;\n                         liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs2 A) binp\\<rbrakk>\n                        \\<Longrightarrow> phi2 (qOp delta inp binp)\" and\nAbs1: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi2 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi2 Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs1 (qAbs xs x X)\" and\nAbs2: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi2 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi2 Y;\n                  phiAbs1 (qAbs xs x X)\\<rbrakk>\n                 \\<Longrightarrow> phiAbs2 (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> (phi1 X \\<and> phi2 X)) \\<and>\n (qGoodAbs A \\<longrightarrow> (phiAbs1 A \\<and> phiAbs2 A))\"", "lemma single_non_qAFreshAll_ordLess_var:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> |{x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set| ) \\<and>\n (qGoodAbs A \\<longrightarrow> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set| )\"", "lemma single_non_qFresh_ordLess_var:\nassumes \"qGood X\"\nshows \"|{x. \\<not> qFresh xs x X}| <o |UNIV :: 'var set|\"", "lemma single_non_qFreshAbs_ordLess_var:\nassumes \"qGoodAbs A\"\nshows \"|{x. \\<not> qFreshAbs xs x A}| <o |UNIV :: 'var set|\"", "lemma non_qAFresh_ordLess_var:\nassumes GOOD: \"\\<forall> X \\<in> XS. qGood X\" and Var: \"|XS| <o |UNIV :: 'var set|\"\nshows \"|{x| x X. X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\"", "lemma non_qAFresh_or_in_ordLess_var:\nassumes Var: \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"|{x| x X. (x \\<in> V \\<or> (X \\<in> XS \\<and> \\<not> qAFresh xs x X))}| <o |UNIV :: 'var set|\"", "lemma obtain_set_qFresh_card_of:\nassumes  \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> W. infinite W \\<and> W Int V = {} \\<and>\n             (\\<forall> x \\<in> W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\"", "lemma obtain_set_qFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> W. infinite W \\<and> W Int V = {} \\<and>\n            (\\<forall> x \\<in> W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\"", "lemma obtain_qFresh_card_of:\nassumes \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> x. x \\<notin> V \\<and> (\\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\"", "lemma obtain_qFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> x. x \\<notin> V \\<and> (\\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\"", "lemma pickQFresh_card_of:\nassumes \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"pickQFresh xs V XS \\<notin> V \\<and>\n       (\\<forall> X \\<in> XS. qAFresh xs (pickQFresh xs V XS) X \\<and> qFresh xs (pickQFresh xs V XS) X)\"", "lemma pickQFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"pickQFresh xs V XS \\<notin> V \\<and>\n       (\\<forall> X \\<in> XS. qAFresh xs (pickQFresh xs V XS) X \\<and> qFresh xs (pickQFresh xs V XS) X)\"", "lemma aux_alpha_ignoreSecond_qTermLessQSwapped_wf:\n\"wf(inv_image qTermQSwappedLess aux_alpha_ignoreSecond)\"", "lemma alpha_inp_None:\n\"qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n (inp i = None) = (inp' i = None)\"", "lemma alpha_binp_None:\n\"qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n (binp i = None) = (binp' i = None)\"", "lemma qVar_alpha_iff:\n\"qVar xs x #= X' \\<longleftrightarrow> X' = qVar xs x\"", "lemma alpha_qVar_iff:\n\"X #= qVar xs' x' \\<longleftrightarrow> X = qVar xs' x'\"", "lemma qOp_alpha_iff:\n\"qOp delta inp binp #= X' \\<longleftrightarrow>\n (\\<exists> inp' binp'.\n    X' = qOp delta inp' binp' \\<and> sameDom inp inp' \\<and> sameDom binp binp' \\<and>\n    liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n    liftAll2 (\\<lambda>A A'. A $= A') binp binp')\"", "lemma alpha_qOp_iff:\n\"X #= qOp delta' inp' binp' \\<longleftrightarrow>\n (\\<exists> inp binp. X = qOp delta' inp binp \\<and> sameDom inp inp' \\<and> sameDom binp binp' \\<and>\n    liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n    liftAll2 (\\<lambda>A A'. A $= A') binp binp')\"", "lemma qAbs_alphaAbs_iff:\n\"qAbs xs x X $= A' \\<longleftrightarrow>\n (\\<exists> x' y X'. A' = qAbs xs x' X' \\<and>\n             y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n             (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs))\"", "lemma alphaAbs_qAbs_iff:\n\"A $= qAbs xs' x' X' \\<longleftrightarrow>\n (\\<exists> x y X. A = qAbs xs' x X \\<and>\n            y \\<notin> {x,x'} \\<and> qAFresh xs' y X \\<and> qAFresh xs' y X' \\<and>\n            (X #[[y \\<and> x]]_xs') #= (X' #[[y \\<and> x']]_xs'))\"", "lemma alphaAll_qSkelAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(\\<forall> X'. X #= X' \\<longrightarrow> qSkel X = qSkel X') \\<and>\n (\\<forall> A'. A $= A' \\<longrightarrow> qSkelAbs A = qSkelAbs A')\"", "lemma alphaAll_sym:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(\\<forall> X'. X #= X' \\<longrightarrow> X' #= X) \\<and> (\\<forall> A'. A $= A' \\<longrightarrow> A' $= A)\"", "lemma alphaAll_refl:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> X #= X) \\<and> (qGoodAbs A \\<longrightarrow> A $= A)\"", "lemma alphaAll_preserves_qGoodAll1:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X'. X #= X' \\<longrightarrow> qGood X')) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A'. A $= A' \\<longrightarrow> qGoodAbs A'))\"", "lemma alpha_preserves_qGood2:\n\"\\<lbrakk>X #= X'; qGood X'\\<rbrakk> \\<Longrightarrow> qGood X\"", "lemma alphaAbs_preserves_qGoodAbs2:\n\"\\<lbrakk>A $= A'; qGoodAbs A'\\<rbrakk> \\<Longrightarrow> qGoodAbs A\"", "lemma alpha_preserves_qGood:\n\"X #= X' \\<Longrightarrow> qGood X = qGood X'\"", "lemma alphaAbs_preserves_qGoodAbs:\n\"A $= A' \\<Longrightarrow> qGoodAbs A = qGoodAbs A'\"", "lemma alpha_qSwap_preserves_qGood1:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\" and\n        GOOD: \"qGood X\"\nshows \"qGood X'\"", "lemma alpha_qSwap_preserves_qGood2:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\" and\n        GOOD': \"qGood X'\"\nshows \"qGood X\"", "lemma alphaAbs_qSwapAbs_preserves_qGoodAbs2:\nassumes ALPHA: \"(A $[[y \\<and> x]]_zs) $= (A' $[[y' \\<and> x']]_zs')\" and\n        GOOD': \"qGoodAbs A'\"\nshows \"qGoodAbs A\"", "lemma alpha_qSwap_preserves_qGood:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\"\nshows \"qGood X = qGood X'\"", "lemma qSwapAll_preserves_alphaAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and z1 z2 zs\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X' zs z1 z2. X #= X' \\<longrightarrow>\n                             (X #[[z1 \\<and> z2]]_zs) #= (X' #[[z1 \\<and> z2]]_zs))) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A' zs z1 z2. A $= A' \\<longrightarrow>\n                                (A $[[z1 \\<and> z2]]_zs) $= (A' $[[z1 \\<and> z2]]_zs)))\"", "lemma qSwap_twice_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"X #= X'\"\nshows \"((X #[[z1 \\<and> z2]]_zs) #[[u1 \\<and> u2]]_us) #= ((X' #[[z1 \\<and> z2]]_zs) #[[u1 \\<and> u2]]_us)\"", "lemma alphaAll_trans:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X' X''. X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X'')) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A' A''. A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\"", "lemma alpha_trans_twice:\n\"\\<lbrakk>qGood X \\<or> qGood X' \\<or> qGood X'' \\<or> qGood X''';\n  X #= X'; X' #= X''; X'' #= X'''\\<rbrakk> \\<Longrightarrow> X #= X'''\"", "lemma alphaAbs_trans_twice:\n\"\\<lbrakk>qGoodAbs A \\<or> qGoodAbs A' \\<or> qGoodAbs A'' \\<or> qGoodAbs A''';\n  A $= A'; A' $= A''; A'' $= A'''\\<rbrakk> \\<Longrightarrow> A $= A'''\"", "lemma qAbs_preserves_alpha:\nassumes ALPHA: \"X #= X'\" and GOOD: \"qGood X \\<or> qGood X'\"\nshows \"qAbs xs x X $= qAbs xs x X'\"", "lemma qAbs_alphaAbs_qSwap_qAFresh:\nassumes GOOD: \"qGood X\" and FRESH: \"qAFresh ys x' X\"\nshows \"qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)\"", "lemma qAbs_ex_qAFresh_rep:\nassumes GOOD: \"qGood X\" and FRESH: \"qAFresh xs x' X\"\nshows \"\\<exists> X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\"", "lemma qFreshAll_imp_ex_qAFreshAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs fZs\nassumes FIN: \"finite V\"\nshows\n\"(qGood X \\<longrightarrow>\n  ((\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qFresh zs z X) \\<longrightarrow>\n   (\\<exists> X'. X #= X' \\<and> (\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qAFresh zs z X')))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  ((\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qFreshAbs zs z A) \\<longrightarrow>\n   (\\<exists> A'. A $= A' \\<and> (\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qAFreshAbs zs z A'))))\"", "lemma qFresh_imp_ex_qAFresh1:\nassumes \"qGood X\" and \"qFresh zs z X\"\nshows \"\\<exists> X'. qGood X' \\<and> X #= X' \\<and> qAFresh zs z X'\"", "lemma qFreshAbs_imp_ex_qAFreshAbs1:\nassumes \"finite V\" and \"qGoodAbs A\" and \"qFreshAbs zs z A\"\nshows \"\\<exists> A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs zs z A'\"", "lemma qFresh_imp_ex_qAFresh2:\nassumes \"qGood X\" and \"qFresh xs x X\" and \"qFresh ys y X\"\nshows \"\\<exists> X'. qGood X' \\<and> X #= X' \\<and> qAFresh xs x X' \\<and> qAFresh ys y X'\"", "lemma qFreshAbs_imp_ex_qAFreshAbs2:\nassumes \"finite V\" and \"qGoodAbs A\" and \"qFreshAbs xs x A\" and \"qFreshAbs ys y A\"\nshows \"\\<exists> A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs xs x A' \\<and> qAFreshAbs ys y A'\"", "lemma qAFreshAll_qFreshAll_preserves_alphaAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs z\nshows\n\"(qGood X \\<longrightarrow>\n  (qAFresh zs z X \\<longrightarrow> (\\<forall> X'. X #= X' \\<longrightarrow> qFresh zs z X'))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  (qAFreshAbs zs z A \\<longrightarrow> (\\<forall> A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\"", "lemma qFresh_preserves_alpha1:\nassumes \"qGood X\" and \"qFresh zs z X\" and \"X #= X'\"\nshows \"qFresh zs z X'\"", "lemma qFreshAbs_preserves_alphaAbs1:\nassumes \"qGoodAbs A\" and \"qFreshAbs zs z A\" and \"A $= A'\"\nshows \"qFreshAbs zs z A'\"", "lemma qFresh_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"X #= X'\"\nshows \"qFresh zs z X \\<longleftrightarrow> qFresh zs z X'\"", "lemma qFreshAbs_preserves_alphaAbs:\nassumes \"qGoodAbs A \\<or> qGoodAbs A'\" and \"A $= A'\"\nshows \"qFreshAbs zs z A = qFreshAbs zs z A'\"", "lemma alpha_qFresh_qSwap_id:\nassumes \"qGood X\" and \"qFresh zs z1 X\" and \"qFresh zs z2 X\"\nshows \"(X #[[z1 \\<and> z2]]_zs) #= X\"", "lemma alphaAbs_qFreshAbs_qSwapAbs_id:\nassumes \"qGoodAbs A\" and \"qFreshAbs zs z1 A\" and \"qFreshAbs zs z2 A\"\nshows \"(A $[[z1 \\<and> z2]]_zs) $= A\"", "lemma alpha_qFresh_qSwap_compose:\nassumes GOOD: \"qGood X\" and \"qFresh zs y X\" and \"qFresh zs z X\"\nshows \"((X #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs) #= (X #[[z \\<and> x]]_zs)\"", "lemma qAbs_alphaAbs_qSwap_qFresh:\nassumes GOOD: \"qGood X\" and FRESH: \"qFresh xs x' X\"\nshows \"qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\"", "lemma alphaAbs_qAbs_ex_qFresh_rep:\nassumes GOOD: \"qGood X\" and FRESH: \"qFresh xs x' X\"\nshows \"\\<exists> X'. (X,X') \\<in> qSwapped \\<and> qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\"", "lemma alphaAbs_weakestEx_imp_strongestAll:\nassumes GOOD_X: \"qGood X\" and \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_weakestAll_imp_strongestEx:\nassumes GOOD: \"qGood X\"  \"qGood X'\"\nand \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_weakestEx_imp_strongestEx:\nassumes GOOD: \"qGood X\"\nand \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh:\n\"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh:\nassumes \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_qAFresh:\nassumes \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_imp_alphaAbs_all_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_all_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_imp_alphaAbs_all_distinct_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_all_distinct_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_ex_equal_or_qAFresh_imp_qFresh:\n\"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_ex_distinct_qAFresh_imp_qFresh:\n\"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_ex_qAFresh_imp_qFresh:\n\"alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_all_equal_or_qFresh_imp_qAFresh:\n\"alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_all_distinct_qFresh_imp_qAFresh:\n\"alphaAbs_all_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_all_qFresh_imp_qAFresh:\n\"alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_qAFresh xs x X xs' x' X'\"", "lemma alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs:\nassumes GOOD: \"qGood X\" and \"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\"\nshows \"qAbs xs x X $= qAbs xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_imp_alphaAbs_all_qFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_qFresh xs x X xs' x' X'\"", "lemma alphaAbs_qAbs_iff_alphaAbs_all_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_qFresh xs x X xs' x' X'\""], "translations": [["", "lemma varSort_lt_var_INNER:\n\"|UNIV :: 'varSort set| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "using varSort_lt_var"], ["proof (prove)\nusing this:\n  varSort_lt_var undefined undefined\n\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "unfolding varSort_lt_var_def"], ["proof (prove)\nusing this:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by simp"], ["", "lemma varSort_le_Var:\n\"|UNIV :: 'varSort set| \\<le>o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "using varSort_lt_var_INNER ordLess_imp_ordLeq"], ["proof (prove)\nusing this:\n  |UNIV| <o |UNIV|\n  ?r <o ?r' \\<Longrightarrow> ?r \\<le>o ?r'\n\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "by auto"], ["", "theorem var_infinite_INNER: \"infinite (UNIV :: 'var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "using var_infinite"], ["proof (prove)\nusing this:\n  var_infinite undefined\n\ngoal (1 subgoal):\n 1. infinite UNIV", "unfolding var_infinite_def"], ["proof (prove)\nusing this:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by simp"], ["", "theorem var_regular_INNER: \"regular |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular |UNIV|", "using var_regular"], ["proof (prove)\nusing this:\n  var_regular undefined\n\ngoal (1 subgoal):\n 1. regular |UNIV|", "unfolding var_regular_def"], ["proof (prove)\nusing this:\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. regular |UNIV|", "by simp"], ["", "theorem infinite_var_regular_INNER:\n\"infinite (UNIV :: 'var set) \\<and> regular |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV \\<and> regular |UNIV|", "by (simp add: var_infinite_INNER var_regular_INNER)"], ["", "(* Below and elsewhere: We want both full generality and usefulness in one single \ntheorem, and therefore we include as a disjunction the general condition w.r.t. the variable cardinality\nand the stronger (most often needed) one of finiteness.  This way, we need not\ninvoke variable infiniteness each time we want to use the finiteness. *)"], ["", "theorem finite_ordLess_var:\n\"( |S| <o |UNIV :: 'var set| \\<or> finite S) = ( |S| <o |UNIV :: 'var set| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (|S| <o |UNIV| \\<or> finite S) = (|S| <o |UNIV|)", "by (auto simp add: var_infinite_INNER finite_ordLess_infinite2)"], ["", "subsection \\<open>Good quasi-terms\\<close>"], ["", "text \\<open>Essentially, good quasi-term items\n   will be those with meaningful binders and\n   not too many variables.  Good quasi-terms are a concept intermediate\n   between (raw) quasi-terms and sorted quasi-terms.  This concept was chosen to be strong\n   enough to facilitate proofs of most of the desired properties of alpha-equivalence, avoiding,\n   {\\em for most of the hard part of the work},\n   the overhead of sortedness.  Since we later prove that quasi-terms\n   are good,\n   all the results are then immediately transported to a sorted setting.\\<close>"], ["", "function\nqGood :: \"('index,'bindex,'varSort,'var,'opSym)qTerm \\<Rightarrow> bool\"\nand\nqGoodAbs :: \"('index,'bindex,'varSort,'var,'opSym)qAbs \\<Rightarrow> bool\"\nwhere\n\"qGood (qVar xs x) = True\"\n|\n\"qGood (qOp delta inp binp) =\n (liftAll qGood inp \\<and> liftAll qGoodAbs binp \\<and>\n  |{i. inp i \\<noteq> None}| <o |UNIV :: 'var set| \\<and>\n  |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set| )\"\n|\n\"qGoodAbs (qAbs xs x X) = qGood X\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>xs xa. x = termIn (qVar xs xa) \\<Longrightarrow> P;\n        \\<And>delta inp binp.\n           x = termIn (qOp delta inp binp) \\<Longrightarrow> P;\n        \\<And>xs xa X. x = absIn (qAbs xs xa X) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>xs x xsa xa.\n       termIn (qVar xs x) = termIn (qVar xsa xa) \\<Longrightarrow>\n       True = True\n 3. \\<And>xs x delta inp binp.\n       termIn (qVar xs x) = termIn (qOp delta inp binp) \\<Longrightarrow>\n       True =\n       (liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (termIn x0)) inp \\<and>\n        liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (absIn x0)) binp \\<and>\n        |{i. inp i \\<noteq> None}| <o |UNIV| \\<and>\n        |{i. binp i \\<noteq> None}| <o |UNIV|)\n 4. \\<And>xs x xsa xa X.\n       termIn (qVar xs x) = absIn (qAbs xsa xa X) \\<Longrightarrow>\n       True = qGood_qGoodAbs_sumC (termIn X)\n 5. \\<And>delta inp binp deltaa inpa binpa.\n       termIn (qOp delta inp binp) =\n       termIn (qOp deltaa inpa binpa) \\<Longrightarrow>\n       (liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (termIn x0)) inp \\<and>\n        liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (absIn x0)) binp \\<and>\n        |{i. inp i \\<noteq> None}| <o |UNIV| \\<and>\n        |{i. binp i \\<noteq> None}| <o |UNIV|) =\n       (liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (termIn x0)) inpa \\<and>\n        liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (absIn x0)) binpa \\<and>\n        |{i. inpa i \\<noteq> None}| <o |UNIV| \\<and>\n        |{i. binpa i \\<noteq> None}| <o |UNIV|)\n 6. \\<And>delta inp binp xs x X.\n       termIn (qOp delta inp binp) = absIn (qAbs xs x X) \\<Longrightarrow>\n       (liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (termIn x0)) inp \\<and>\n        liftAll (\\<lambda>x0. qGood_qGoodAbs_sumC (absIn x0)) binp \\<and>\n        |{i. inp i \\<noteq> None}| <o |UNIV| \\<and>\n        |{i. binp i \\<noteq> None}| <o |UNIV|) =\n       qGood_qGoodAbs_sumC (termIn X)\n 7. \\<And>xs x X xsa xa Xa.\n       absIn (qAbs xs x X) = absIn (qAbs xsa xa Xa) \\<Longrightarrow>\n       qGood_qGoodAbs_sumC (termIn X) = qGood_qGoodAbs_sumC (termIn Xa)", "by (pat_completeness, auto)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All qGood_qGoodAbs_dom", "apply(relation qTermLess)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf qTermLess\n 2. \\<And>delta inp binp i v.\n       inp i = Some v \\<Longrightarrow>\n       (termIn v, termIn (qOp delta inp binp)) \\<in> qTermLess\n 3. \\<And>delta inp binp i v.\n       binp i = Some v \\<Longrightarrow>\n       (absIn v, termIn (qOp delta inp binp)) \\<in> qTermLess\n 4. \\<And>xs x X. (termIn X, absIn (qAbs xs x X)) \\<in> qTermLess", "apply(simp_all add: qTermLess_wf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>delta inp binp i v.\n       inp i = Some v \\<Longrightarrow>\n       (termIn v, termIn (qOp delta inp binp)) \\<in> qTermLess\n 2. \\<And>delta inp binp i v.\n       binp i = Some v \\<Longrightarrow>\n       (absIn v, termIn (qOp delta inp binp)) \\<in> qTermLess\n 3. \\<And>xs x X. (termIn X, absIn (qAbs xs x X)) \\<in> qTermLess", "by(auto simp add: qTermLess_def)"], ["", "fun qGoodItem :: \"('index,'bindex,'varSort,'var,'opSym)qTermItem \\<Rightarrow> bool\" where\n\"qGoodItem (Inl qX) = qGood qX\"\n|\n\"qGoodItem (Inr qA) = qGoodAbs qA\""], ["", "lemma qSwapAll_preserves_qGoodAll1:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs x y\nshows\n\"(qGood X \\<longrightarrow> qGood (X #[[x \\<and> y]]_zs)) \\<and>\n (qGoodAbs A \\<longrightarrow> qGoodAbs (A $[[x \\<and> y]]_zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> qGood (X #[[x \\<and> y]]_zs)) \\<and>\n    (qGoodAbs A \\<longrightarrow> qGoodAbs (A $[[x \\<and> y]]_zs))", "apply(rule qTerm_induct[of _ _ X A])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs xa.\n       qGood (qVar xs xa) \\<longrightarrow>\n       qGood (qVar xs xa #[[x \\<and> y]]_zs)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow> qGood (a #[[x \\<and> y]]_zs))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow> qGoodAbs (a $[[x \\<and> y]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         qGood (qOp delta inp binp #[[x \\<and> y]]_zs)\n 3. \\<And>xs xa X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow> qGood (Y #[[x \\<and> y]]_zs);\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow> qGood (Y #[[x \\<and> y]]_zs)\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs (qAbs xs xa X) \\<longrightarrow>\n                         qGoodAbs (qAbs xs xa X $[[x \\<and> y]]_zs)", "apply(simp_all add: sw_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow> qGood (a #[[x \\<and> y]]_zs))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow> qGoodAbs (a $[[x \\<and> y]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> liftAll qGood inp \\<and>\n                         liftAll qGoodAbs binp \\<and>\n                         |{i. \\<exists>y. inp i = Some y}| <o |UNIV| \\<and>\n                         |{i. \\<exists>y. binp i = Some y}| <o\n                         |UNIV| \\<longrightarrow>\n                         liftAll qGood (lift (qSwap zs x y) inp) \\<and>\n                         liftAll qGoodAbs\n                          (lift (qSwapAbs zs x y) binp) \\<and>\n                         |{i. \\<exists>ya.\n                                 lift (qSwap zs x y) inp i = Some ya}| <o\n                         |UNIV| \\<and>\n                         |{i. \\<exists>ya.\n                                 lift (qSwapAbs zs x y) binp i =\n                                 Some ya}| <o\n                         |UNIV|", "unfolding lift_def liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood v \\<longrightarrow> qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i v.\n                             inp i = Some v \\<longrightarrow>\n                             qGood v) \\<and>\n                         (\\<forall>i v.\n                             binp i = Some v \\<longrightarrow>\n                             qGoodAbs v) \\<and>\n                         |{i. \\<exists>y. inp i = Some y}| <o |UNIV| \\<and>\n                         |{i. \\<exists>y. binp i = Some y}| <o\n                         |UNIV| \\<longrightarrow>\n                         (\\<forall>i v.\n                             (case inp i of None \\<Rightarrow> None\n                              | Some v \\<Rightarrow>\n                                  Some (v #[[x \\<and> y]]_zs)) =\n                             Some v \\<longrightarrow>\n                             qGood v) \\<and>\n                         (\\<forall>i v.\n                             (case binp i of None \\<Rightarrow> None\n                              | Some v \\<Rightarrow>\n                                  Some (v $[[x \\<and> y]]_zs)) =\n                             Some v \\<longrightarrow>\n                             qGoodAbs v) \\<and>\n                         |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV| \\<and>\n                         |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>inp binp i v.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        (case inp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v #[[x \\<and> y]]_zs)) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> qGood v\n 2. \\<And>inp binp i v.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v $[[x \\<and> y]]_zs)) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs v\n 3. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 4. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "apply(case_tac \"inp i\", auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>inp binp i v.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        (case binp i of None \\<Rightarrow> None\n         | Some v \\<Rightarrow> Some (v $[[x \\<and> y]]_zs)) =\n        Some v\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs v\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 3. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "apply(case_tac \"binp i\", auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "fix inp::\"('index,('index,'bindex,'varSort,'var,'opSym)qTerm)input\" and zs xs x y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "let ?K1 = \"{i. \\<exists>X. inp i = Some X}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "let ?K2 = \"{i. \\<exists>X. (case inp i of None \\<Rightarrow> None | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs))\n                     = Some X}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "assume \"|?K1| <o |UNIV :: 'var set|\""], ["proof (state)\nthis:\n  |{i. \\<exists>X. inp i = Some X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{i. \\<exists>X. inp i = Some X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "have \"?K1 = ?K2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>X. inp i = Some X} =\n    {i. \\<exists>X.\n           (case inp i of None \\<Rightarrow> None\n            | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n           Some X}", "by(auto, case_tac \"inp x\", auto)"], ["proof (state)\nthis:\n  {i. \\<exists>X. inp i = Some X} =\n  {i. \\<exists>X.\n         (case inp i of None \\<Rightarrow> None\n          | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n         Some X}\n\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case inp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v #[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|\n 2. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{i. \\<exists>X. inp i = Some X}| <o |UNIV|\n  {i. \\<exists>X. inp i = Some X} =\n  {i. \\<exists>X.\n         (case inp i of None \\<Rightarrow> None\n          | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n         Some X}", "show \"|?K2| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{i. \\<exists>X. inp i = Some X}| <o |UNIV|\n  {i. \\<exists>X. inp i = Some X} =\n  {i. \\<exists>X.\n         (case inp i of None \\<Rightarrow> None\n          | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n         Some X}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>X.\n            (case inp i of None \\<Rightarrow> None\n             | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n            Some X}| <o\n    |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{i. \\<exists>X.\n          (case inp i of None \\<Rightarrow> None\n           | Some X \\<Rightarrow> Some (X #[[x \\<and> y]]_zs)) =\n          Some X}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "fix binp::\"('bindex,('index,'bindex,'varSort,'var,'opSym)qAbs)input\" and zs xs x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "let ?K1 = \"{i. \\<exists>A. binp i = Some A}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "let ?K2 = \"{i. \\<exists>A. (case binp i of None \\<Rightarrow> None | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs))\n                     = Some A}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "assume \"|?K1| <o |UNIV :: 'var set|\""], ["proof (state)\nthis:\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "have \"?K1 = ?K2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>A. binp i = Some A} =\n    {i. \\<exists>A.\n           (case binp i of None \\<Rightarrow> None\n            | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n           Some A}", "by(auto, case_tac \"binp x\", auto)"], ["proof (state)\nthis:\n  {i. \\<exists>A. binp i = Some A} =\n  {i. \\<exists>A.\n         (case binp i of None \\<Rightarrow> None\n          | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n         Some A}\n\ngoal (1 subgoal):\n 1. \\<And>inp binp.\n       \\<lbrakk>\\<forall>i v.\n                   inp i = Some v \\<longrightarrow>\n                   qGood (v #[[x \\<and> y]]_zs);\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs (v $[[x \\<and> y]]_zs);\n        \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v;\n        \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{i. \\<exists>ya.\n                                 (case binp i of None \\<Rightarrow> None\n                                  | Some v \\<Rightarrow>\nSome (v $[[x \\<and> y]]_zs)) =\n                                 Some ya}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  {i. \\<exists>A. binp i = Some A} =\n  {i. \\<exists>A.\n         (case binp i of None \\<Rightarrow> None\n          | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n         Some A}", "show \"|?K2| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  {i. \\<exists>A. binp i = Some A} =\n  {i. \\<exists>A.\n         (case binp i of None \\<Rightarrow> None\n          | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n         Some A}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>A.\n            (case binp i of None \\<Rightarrow> None\n             | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n            Some A}| <o\n    |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{i. \\<exists>A.\n          (case binp i of None \\<Rightarrow> None\n           | Some A \\<Rightarrow> Some (A $[[x \\<and> y]]_zs)) =\n          Some A}| <o\n  |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qSwap_preserves_qGood1:\n\"qGood X \\<Longrightarrow> qGood (X #[[x \\<and> y]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X \\<Longrightarrow> qGood (X #[[x \\<and> y]]_zs)", "by(simp add: qSwapAll_preserves_qGoodAll1)"], ["", "corollary qSwapAbs_preserves_qGoodAbs1:\n\"qGoodAbs A \\<Longrightarrow> qGoodAbs (A $[[x \\<and> y]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A \\<Longrightarrow> qGoodAbs (A $[[x \\<and> y]]_zs)", "by(simp add: qSwapAll_preserves_qGoodAll1)"], ["", "lemma qSwap_preserves_qGood2:\nassumes \"qGood(X #[[x \\<and> y]]_zs)\"\nshows \"qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X", "by (metis assms qSwap_involutive qSwap_preserves_qGood1)"], ["", "lemma qSwapAbs_preserves_qGoodAbs2:\nassumes \"qGoodAbs(A $[[x \\<and> y]]_zs)\"\nshows \"qGoodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A", "by (metis assms qSwapAbs_preserves_qGoodAbs1 qSwapAll_involutive)"], ["", "lemma qSwap_preserves_qGood: \"(qGood (X #[[x \\<and> y]]_zs)) = (qGood X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x \\<and> y]]_zs) = qGood X", "using qSwap_preserves_qGood1 qSwap_preserves_qGood2"], ["proof (prove)\nusing this:\n  qGood ?X \\<Longrightarrow> qGood (?X #[[?x \\<and> ?y]]_?zs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) \\<Longrightarrow> qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x \\<and> y]]_zs) = qGood X", "by blast"], ["", "lemma qSwapAbs_preserves_qGoodAbs:\n\"(qGoodAbs (A $[[x \\<and> y]]_zs)) = (qGoodAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[x \\<and> y]]_zs) = qGoodAbs A", "using qSwapAbs_preserves_qGoodAbs1 qSwapAbs_preserves_qGoodAbs2"], ["proof (prove)\nusing this:\n  qGoodAbs ?A \\<Longrightarrow> qGoodAbs (?A $[[?x \\<and> ?y]]_?zs)\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) \\<Longrightarrow> qGoodAbs ?A\n\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[x \\<and> y]]_zs) = qGoodAbs A", "by blast"], ["", "lemma qSwap_twice_preserves_qGood:\n\"(qGood ((X #[[x \\<and> y]]_zs) #[[x' \\<and> y']]_zs')) = (qGood X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x \\<and> y]]_zs #[[x' \\<and> y']]_zs') = qGood X", "by (simp add: qSwap_preserves_qGood)"], ["", "lemma qSwapped_preserves_qGood:\n\"(X,Y) \\<in> qSwapped \\<Longrightarrow> qGood Y = qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, Y) \\<in> qSwapped \\<Longrightarrow> qGood Y = qGood X", "apply (induct rule: qSwapped.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X. qGood X = qGood X\n 2. \\<And>X Y Z.\n       \\<lbrakk>(X, Y) \\<in> qSwapped; qGood Y = qGood X;\n        (Y, Z) \\<in> qSwapped; qGood Z = qGood Y\\<rbrakk>\n       \\<Longrightarrow> qGood Z = qGood X\n 3. \\<And>X Y x y zs.\n       \\<lbrakk>(X, Y) \\<in> qSwapped; qGood Y = qGood X\\<rbrakk>\n       \\<Longrightarrow> qGood (Y #[[x \\<and> y]]_zs) = qGood X", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (3 subgoals):\n 1. \\<And>X. qGood X = qGood X\n 2. \\<And>X Y Z.\n       \\<lbrakk>(X, Y) \\<in> qSwapped; qGood Y = qGood X;\n        (Y, Z) \\<in> qSwapped; qGood Z = qGood Y\\<rbrakk>\n       \\<Longrightarrow> qGood Z = qGood X\n 3. \\<And>X Y x y zs.\n       \\<lbrakk>(X, Y) \\<in> qSwapped; qGood Y = qGood X\\<rbrakk>\n       \\<Longrightarrow> qGood (Y #[[x \\<and> y]]_zs) = qGood X", "by auto"], ["", "lemma qGood_qTerm_templateInduct[case_names Rel Var Op Abs]:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs rel\nassumes\nREL: \"\\<And> X Y. \\<lbrakk>qGood X; (X,Y) \\<in> rel\\<rbrakk> \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\" and\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda>X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                   \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X; \\<And> Y. (X,Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> phi X) \\<and>\n    (qGoodAbs A \\<longrightarrow> phiAbs A)", "apply(induct rule: qTerm_templateInduct[of \"{(X,Y). qGood X \\<and> (X,Y) \\<in> rel}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       (X, Y)\n       \\<in> {(X, Y). qGood X \\<and> (X, Y) \\<in> rel} \\<Longrightarrow>\n       qSkel Y = qSkel X\n 2. \\<And>xs x. qGood (qVar xs x) \\<longrightarrow> phi (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll (\\<lambda>a. qGood a \\<longrightarrow> phi a) inp;\n        liftAll (\\<lambda>a. qGoodAbs a \\<longrightarrow> phiAbs a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         phi (qOp delta inp binp)\n 4. \\<And>xs x X.\n       (\\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y). qGood X \\<and> (X, Y) \\<in> rel} \\<Longrightarrow>\n           qGood Y \\<longrightarrow> phi Y) \\<Longrightarrow>\n       qGoodAbs (qAbs xs x X) \\<longrightarrow> phiAbs (qAbs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGood ?X11; (?X11, ?Y11) \\<in> rel\\<rbrakk>\n  \\<Longrightarrow> qGood ?Y11 \\<and> qSkel ?Y11 = qSkel ?X11\n  phi (qVar ?xs11 ?x11)\n  \\<lbrakk>|{i. ?inp11 i \\<noteq> None}| <o |UNIV|;\n   |{i. ?binp11 i \\<noteq> None}| <o |UNIV|;\n   liftAll (\\<lambda>X. qGood X \\<and> phi X) ?inp11;\n   liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) ?binp11\\<rbrakk>\n  \\<Longrightarrow> phi (qOp ?delta11 ?inp11 ?binp11)\n  \\<lbrakk>qGood ?X11;\n   \\<And>Y. (?X11, Y) \\<in> rel \\<Longrightarrow> phi Y\\<rbrakk>\n  \\<Longrightarrow> phiAbs (qAbs ?xs11 ?x11 ?X11)\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       (X, Y)\n       \\<in> {(X, Y). qGood X \\<and> (X, Y) \\<in> rel} \\<Longrightarrow>\n       qSkel Y = qSkel X\n 2. \\<And>xs x. qGood (qVar xs x) \\<longrightarrow> phi (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>liftAll (\\<lambda>a. qGood a \\<longrightarrow> phi a) inp;\n        liftAll (\\<lambda>a. qGoodAbs a \\<longrightarrow> phiAbs a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> qGood (qOp delta inp binp) \\<longrightarrow>\n                         phi (qOp delta inp binp)\n 4. \\<And>xs x X.\n       (\\<And>Y.\n           (X, Y)\n           \\<in> {(X, Y). qGood X \\<and> (X, Y) \\<in> rel} \\<Longrightarrow>\n           qGood Y \\<longrightarrow> phi Y) \\<Longrightarrow>\n       qGoodAbs (qAbs xs x X) \\<longrightarrow> phiAbs (qAbs xs x X)", "by (simp_all add: liftAll_def)"], ["", "lemma qGood_qTerm_rawInduct[case_names Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda> X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                       \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X; phi X\\<rbrakk>  \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows \"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> phi X) \\<and>\n    (qGoodAbs A \\<longrightarrow> phiAbs A)", "apply(induct rule: qGood_qTerm_templateInduct [of Id])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>qGood X; (X, Y) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\n 2. \\<And>xs x. phi (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> phi X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n       \\<Longrightarrow> phi (qOp delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. (X, Y) \\<in> Id \\<Longrightarrow> phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (qAbs xs x X)", "by(simp_all add: assms)"], ["", "lemma qGood_qTerm_induct[case_names Var Op Abs]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi phiAbs\nassumes\nVar: \"\\<And> xs x. phi (qVar xs x)\" and\nOp: \"\\<And> delta inp binp. \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        |{i. binp i \\<noteq> None}| <o |UNIV :: 'var set|;\n                        liftAll (\\<lambda> X. qGood X \\<and> phi X) inp;\n                        liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n                       \\<Longrightarrow> phi (qOp delta inp binp)\" and\nAbs: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                 \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi Y;\n                 \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> phi X) \\<and> (qGoodAbs A \\<longrightarrow> phiAbs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> phi X) \\<and>\n    (qGoodAbs A \\<longrightarrow> phiAbs A)", "apply(induct rule: qGood_qTerm_templateInduct\n           [of \"qSwapped \\<union> {(X,Y). qGood Y \\<and> qSkel Y = qSkel X}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>qGood X;\n        (X, Y)\n        \\<in> qSwapped \\<union>\n              {(X, Y). qGood Y \\<and> qSkel Y = qSkel X}\\<rbrakk>\n       \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\n 2. \\<And>xs x. phi (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> phi X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n       \\<Longrightarrow> phi (qOp delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> qSwapped \\<union>\n                 {(X, Y).\n                  qGood Y \\<and> qSkel Y = qSkel X} \\<Longrightarrow>\n           phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (qAbs xs x X)", "using qSwapped_qSkel qSwapped_preserves_qGood"], ["proof (prove)\nusing this:\n  (?X, ?Y) \\<in> qSwapped \\<Longrightarrow> qSkel ?Y = qSkel ?X\n  (?X, ?Y) \\<in> qSwapped \\<Longrightarrow> qGood ?Y = qGood ?X\n\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>qGood X;\n        (X, Y)\n        \\<in> qSwapped \\<union>\n              {(X, Y). qGood Y \\<and> qSkel Y = qSkel X}\\<rbrakk>\n       \\<Longrightarrow> qGood Y \\<and> qSkel Y = qSkel X\n 2. \\<And>xs x. phi (qVar xs x)\n 3. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> phi X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs A) binp\\<rbrakk>\n       \\<Longrightarrow> phi (qOp delta inp binp)\n 4. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           (X, Y)\n           \\<in> qSwapped \\<union>\n                 {(X, Y).\n                  qGood Y \\<and> qSkel Y = qSkel X} \\<Longrightarrow>\n           phi Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs (qAbs xs x X)", "by(auto simp add: assms)"], ["", "text \"A form specialized for mutual induction\n(this time, without the cardinality hypotheses):\""], ["", "lemma qGood_qTerm_induct_mutual[case_names Var1 Var2 Op1 Op2 Abs1 Abs2]:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and phi1 phi2 phiAbs1 phiAbs2\nassumes\nVar1: \"\\<And> xs x. phi1 (qVar xs x)\" and\nVar2: \"\\<And> xs x. phi2 (qVar xs x)\" and\nOp1: \"\\<And> delta inp binp. \\<lbrakk>liftAll (\\<lambda> X. qGood X \\<and> phi1 X) inp;\n                         liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs1 A) binp\\<rbrakk>\n                        \\<Longrightarrow> phi1 (qOp delta inp binp)\" and\nOp2: \"\\<And> delta inp binp. \\<lbrakk>liftAll (\\<lambda> X. qGood X \\<and> phi2 X) inp;\n                         liftAll (\\<lambda> A. qGoodAbs A \\<and> phiAbs2 A) binp\\<rbrakk>\n                        \\<Longrightarrow> phi2 (qOp delta inp binp)\" and\nAbs1: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi2 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi2 Y\\<rbrakk>\n                 \\<Longrightarrow> phiAbs1 (qAbs xs x X)\" and\nAbs2: \"\\<And> xs x X. \\<lbrakk>qGood X;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> phi2 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi1 Y;\n                  \\<And> Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> phi2 Y;\n                  phiAbs1 (qAbs xs x X)\\<rbrakk>\n                 \\<Longrightarrow> phiAbs2 (qAbs xs x X)\"\nshows\n\"(qGood X \\<longrightarrow> (phi1 X \\<and> phi2 X)) \\<and>\n (qGoodAbs A \\<longrightarrow> (phiAbs1 A \\<and> phiAbs2 A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> phi1 X \\<and> phi2 X) \\<and>\n    (qGoodAbs A \\<longrightarrow> phiAbs1 A \\<and> phiAbs2 A)", "apply(induct rule: qGood_qTerm_induct[of _ _ X A])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x. phi1 (qVar xs x) \\<and> phi2 (qVar xs x)\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> phi1 X \\<and> phi2 X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> phiAbs1 A \\<and> phiAbs2 A)\n         binp\\<rbrakk>\n       \\<Longrightarrow> phi1 (qOp delta inp binp) \\<and>\n                         phi2 (qOp delta inp binp)\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           phi1 Y \\<and> phi2 Y;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           phi1 Y \\<and> phi2 Y\\<rbrakk>\n       \\<Longrightarrow> phiAbs1 (qAbs xs x X) \\<and> phiAbs2 (qAbs xs x X)", "by(auto simp add: assms liftAll_and)"], ["", "subsection \\<open>The ability to pick fresh variables\\<close>"], ["", "lemma single_non_qAFreshAll_ordLess_var:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nand A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> |{x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set| ) \\<and>\n (qGoodAbs A \\<longrightarrow> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     |{x. \\<not> qAFresh xs x X}| <o |UNIV|) \\<and>\n    (qGoodAbs A \\<longrightarrow> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)", "proof(induct rule: qGood_qTerm_rawInduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa x. |{xa. \\<not> qAFresh xs xa (qVar xsa x)}| <o |UNIV|\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 3. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xsa x. |{xa. \\<not> qAFresh xs xa (qVar xsa x)}| <o |UNIV|\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 3. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{xa. \\<not> qAFresh xs xa (qVar xs x)}| <o |UNIV|", "using infinite_var_regular_INNER"], ["proof (prove)\nusing this:\n  infinite UNIV \\<and> regular |UNIV|\n\ngoal (1 subgoal):\n 1. |{xa. \\<not> qAFresh xs xa (qVar xs x)}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{xa. \\<not> qAFresh xs xa (qVar xs x)}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|) inp\n  liftAll\n   (\\<lambda>A. qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "let ?Left = \"{x. \\<not> qAFresh xs x (qOp delta inp binp)}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "obtain J where J_def: \"J = {i. \\<exists> X. inp i = Some X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>J.\n        J = {i. \\<exists>X. inp i = Some X} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  J = {i. \\<exists>X. inp i = Some X}\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "let ?S = \"\\<Union> i \\<in> J. {x. \\<exists> X. inp i = Some X \\<and> \\<not> qAFresh xs x X}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "obtain K where K_def: \"K = {X. inp i = Some X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K.\n        K = {X. inp i = Some X} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  K = {X. inp i = Some X}\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"finite K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite K", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {X. inp i = Some X}", "by (cases \"inp i\", auto)"], ["proof (state)\nthis:\n  finite K\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "hence \"|K| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  finite K\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "using var_infinite_INNER finite_ordLess_infinite2"], ["proof (prove)\nusing this:\n  finite K\n  infinite UNIV\n  \\<lbrakk>finite ?A; infinite ?B\\<rbrakk> \\<Longrightarrow> |?A| <o |?B|\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"\\<forall> X \\<in> K. |{x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>K. |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>{X. inp i = Some X}.\n       |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "using Op"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|) inp\n  liftAll\n   (\\<lambda>A. qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>{X. inp i = Some X}.\n       |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and> |{x. \\<not> qAFresh xs x v}| <o |UNIV|\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and> |{x. \\<not> qAFreshAbs xs x v}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>{X. inp i = Some X}.\n       |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  \\<forall>X\\<in>K. |{x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |K| <o |UNIV|\n  \\<forall>X\\<in>K. |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "have \"|\\<Union> X \\<in> K. {x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n  \\<forall>X\\<in>K. |{x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|", "using var_regular_INNER"], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n  \\<forall>X\\<in>K. |{x. \\<not> qAFresh xs x X}| <o |UNIV|\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|", "by (simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"{x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n         (\\<Union> X \\<in> K. {x. \\<not> qAFresh xs x X})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n    (\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X})", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n    (\\<Union>X\\<in>{X. inp i = Some X}. {x. \\<not> qAFresh xs x X})", "by blast"], ["proof (state)\nthis:\n  {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n  (\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X})\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|\n  {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n  (\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X})", "have \"|{x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X}| <o |UNIV|\n  {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X} =\n  (\\<Union>X\\<in>K. {x. \\<not> qAFresh xs x X})\n\ngoal (1 subgoal):\n 1. |{x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "}"], ["proof (state)\nthis:\n  |{x. \\<exists>X. inp ?i13 = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{x. \\<exists>X. inp ?i13 = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"|J| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |J| <o |UNIV|", "unfolding J_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{i. \\<exists>X. inp i = Some X}| <o |UNIV|", "using Op"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|) inp\n  liftAll\n   (\\<lambda>A. qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n   binp\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>X. inp i = Some X}| <o |UNIV|", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and> |{x. \\<not> qAFresh xs x v}| <o |UNIV|\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and> |{x. \\<not> qAFreshAbs xs x v}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>X. inp i = Some X}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |J| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{x. \\<exists>X. inp ?i13 = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |J| <o |UNIV|", "have 1: \"|?S| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x. \\<exists>X. inp ?i13 = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |J| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>i\\<in>J.\n        {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "using var_regular_INNER"], ["proof (prove)\nusing this:\n  |{x. \\<exists>X. inp ?i13 = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |J| <o |UNIV|\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>i\\<in>J.\n        {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "by (simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "(*  *)"], ["proof (state)\nthis:\n  |\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "obtain Ja where Ja_def: \"Ja = {i. \\<exists> A. binp i = Some A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ja.\n        Ja = {i. \\<exists>A. binp i = Some A} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Ja = {i. \\<exists>A. binp i = Some A}\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "let ?Sa = \"\\<Union> i \\<in> Ja. {x. \\<exists> A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "obtain K where K_def: \"K = {A. binp i = Some A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>K.\n        K = {A. binp i = Some A} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  K = {A. binp i = Some A}\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"finite K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite K", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {A. binp i = Some A}", "by (cases \"binp i\", auto)"], ["proof (state)\nthis:\n  finite K\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "hence \"|K| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  finite K\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "using var_infinite_INNER finite_ordLess_infinite2"], ["proof (prove)\nusing this:\n  finite K\n  infinite UNIV\n  \\<lbrakk>finite ?A; infinite ?B\\<rbrakk> \\<Longrightarrow> |?A| <o |?B|\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"\\<forall> A \\<in> K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>{A. binp i = Some A}.\n       |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "using Op"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|) inp\n  liftAll\n   (\\<lambda>A. qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n   binp\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>{A. binp i = Some A}.\n       |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and> |{x. \\<not> qAFresh xs x v}| <o |UNIV|\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and> |{x. \\<not> qAFreshAbs xs x v}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>{A. binp i = Some A}.\n       |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  \\<forall>A\\<in>K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |K| <o |UNIV|\n  \\<forall>A\\<in>K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "have \"|\\<Union> A \\<in> K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n  \\<forall>A\\<in>K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "using var_regular_INNER"], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n  \\<forall>A\\<in>K. |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "by (simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"{x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n         (\\<Union> A \\<in> K. {x. \\<not> qAFreshAbs xs x A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n    (\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A})", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n    (\\<Union>A\\<in>{A. binp i = Some A}. {x. \\<not> qAFreshAbs xs x A})", "by blast"], ["proof (state)\nthis:\n  {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n  (\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A})\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n  {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n  (\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A})", "have \"|{x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A}| <o |UNIV|\n  {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A} =\n  (\\<Union>A\\<in>K. {x. \\<not> qAFreshAbs xs x A})\n\ngoal (1 subgoal):\n 1. |{x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n    |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "}"], ["proof (state)\nthis:\n  |{x. \\<exists>A. binp ?i13 = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{x. \\<exists>A. binp ?i13 = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"|Ja| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |Ja| <o |UNIV|", "unfolding Ja_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{i. \\<exists>A. binp i = Some A}| <o |UNIV|", "using Op"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|) inp\n  liftAll\n   (\\<lambda>A. qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n   binp\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>A. binp i = Some A}| <o |UNIV|", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and> |{x. \\<not> qAFresh xs x v}| <o |UNIV|\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and> |{x. \\<not> qAFreshAbs xs x v}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>A. binp i = Some A}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |Ja| <o |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{x. \\<exists>A. binp ?i13 = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n  |Ja| <o |UNIV|", "have \"|?Sa| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x. \\<exists>A. binp ?i13 = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n  |Ja| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>i\\<in>Ja.\n        {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n    |UNIV|", "using var_regular_INNER"], ["proof (prove)\nusing this:\n  |{x. \\<exists>A. binp ?i13 = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n  |Ja| <o |UNIV|\n  regular |UNIV|\n\ngoal (1 subgoal):\n 1. |\\<Union>i\\<in>Ja.\n        {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n    |UNIV|", "by (simp add: regular_UNION)"], ["proof (state)\nthis:\n  |\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "with 1"], ["proof (chain)\npicking this:\n  |\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|", "have \"|?S Un ?Sa| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. |(\\<Union>i\\<in>J.\n         {x. \\<exists>X.\n                inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n     (\\<Union>i\\<in>Ja.\n         {x. \\<exists>A.\n                binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n    |UNIV|", "using var_infinite_INNER card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n  |\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A}| <o\n  |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |(\\<Union>i\\<in>J.\n         {x. \\<exists>X.\n                inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n     (\\<Union>i\\<in>Ja.\n         {x. \\<exists>A.\n                binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |(\\<Union>i\\<in>J.\n       {x. \\<exists>X.\n              inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n   (\\<Union>i\\<in>Ja.\n       {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |(\\<Union>i\\<in>J.\n       {x. \\<exists>X.\n              inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n   (\\<Union>i\\<in>Ja.\n       {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n  |UNIV|\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"?Left = ?S Un ?Sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<not> qAFresh xs x (qOp delta inp binp)} =\n    (\\<Union>i\\<in>J.\n        {x. \\<exists>X.\n               inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n    (\\<Union>i\\<in>Ja.\n        {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})", "by (auto simp: J_def Ja_def liftAll_def )"], ["proof (state)\nthis:\n  {x. \\<not> qAFresh xs x (qOp delta inp binp)} =\n  (\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n  (\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X. qGood X \\<and> |{x. \\<not> qAFresh xs x X}| <o |UNIV|)\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|)\n         binp\\<rbrakk>\n       \\<Longrightarrow> |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o\n                         |UNIV|\n 2. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |(\\<Union>i\\<in>J.\n       {x. \\<exists>X.\n              inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n   (\\<Union>i\\<in>Ja.\n       {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n  |UNIV|\n  {x. \\<not> qAFresh xs x (qOp delta inp binp)} =\n  (\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n  (\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})", "show ?case"], ["proof (prove)\nusing this:\n  |(\\<Union>i\\<in>J.\n       {x. \\<exists>X.\n              inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n   (\\<Union>i\\<in>Ja.\n       {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})| <o\n  |UNIV|\n  {x. \\<not> qAFresh xs x (qOp delta inp binp)} =\n  (\\<Union>i\\<in>J.\n      {x. \\<exists>X. inp i = Some X \\<and> \\<not> qAFresh xs x X}) \\<union>\n  (\\<Union>i\\<in>Ja.\n      {x. \\<exists>A. binp i = Some A \\<and> \\<not> qAFreshAbs xs x A})\n\ngoal (1 subgoal):\n 1. |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{x. \\<not> qAFresh xs x (qOp delta inp binp)}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "case (Abs xsa x X)"], ["proof (state)\nthis:\n  qGood X\n  |{x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "let ?Left = \"{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"|{x}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{x}| <o |UNIV|", "by (auto simp add: var_infinite_INNER)"], ["proof (state)\nthis:\n  |{x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "hence \"|{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |{x}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|", "using Abs var_infinite_INNER card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |{x}| <o |UNIV|\n  qGood X\n  |{x. \\<not> qAFresh xs x X}| <o |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "moreover"], ["proof (state)\nthis:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "{"], ["proof (state)\nthis:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "have \"?Left \\<subseteq> {x} \\<union> {x. \\<not> qAFresh xs x X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}\n    \\<subseteq> {x} \\<union> {x. \\<not> qAFresh xs x X}", "by blast"], ["proof (state)\nthis:\n  {xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}\n  \\<subseteq> {x} \\<union> {x. \\<not> qAFresh xs x X}\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "hence \"|?Left| \\<le>o |{x} \\<union> {x. \\<not> qAFresh xs x X}|\""], ["proof (prove)\nusing this:\n  {xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}\n  \\<subseteq> {x} \\<union> {x. \\<not> qAFresh xs x X}\n\ngoal (1 subgoal):\n 1. |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n    |{x} \\<union> {x. \\<not> qAFresh xs x X}|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  {xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}\n  \\<subseteq> {x} \\<union> {x. \\<not> qAFresh xs x X}\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n    |{x} \\<union> {x. \\<not> qAFresh xs x X}|", "by auto"], ["proof (state)\nthis:\n  |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "}"], ["proof (state)\nthis:\n  |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}|\n\ngoal (1 subgoal):\n 1. \\<And>xsa x X.\n       \\<lbrakk>qGood X; |{x. \\<not> qAFresh xs x X}| <o |UNIV|\\<rbrakk>\n       \\<Longrightarrow> |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o\n                         |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n  |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}|", "show ?case"], ["proof (prove)\nusing this:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n  |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}|\n\ngoal (1 subgoal):\n 1. |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}| <o |UNIV|\n  |{xa. xs = xsa \\<and> xa = x \\<or> \\<not> qAFresh xs xa X}| \\<le>o\n  |{x} \\<union> {x. \\<not> qAFresh xs x X}|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |{xa. \\<not> qAFreshAbs xs xa (qAbs xsa x X)}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary single_non_qAFresh_ordLess_var:\n\"qGood X \\<Longrightarrow> |{x. \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X \\<Longrightarrow> |{x. \\<not> qAFresh xs x X}| <o |UNIV|", "by(simp add: single_non_qAFreshAll_ordLess_var)"], ["", "corollary single_non_qAFreshAbs_ordLess_var:\n\"qGoodAbs A \\<Longrightarrow> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A \\<Longrightarrow> |{x. \\<not> qAFreshAbs xs x A}| <o |UNIV|", "by(simp add: single_non_qAFreshAll_ordLess_var)"], ["", "lemma single_non_qFresh_ordLess_var:\nassumes \"qGood X\"\nshows \"|{x. \\<not> qFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{x. \\<not> qFresh xs x X}| <o |UNIV|", "using qAFresh_imp_qFresh card_of_mono1 single_non_qAFresh_ordLess_var \nordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n  qGood ?X \\<Longrightarrow> |{x. \\<not> qAFresh ?xs x ?X}| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{x. \\<not> qFresh xs x X}| <o |UNIV|", "by (metis Collect_mono assms)"], ["", "lemma single_non_qFreshAbs_ordLess_var:\nassumes \"qGoodAbs A\"\nshows \"|{x. \\<not> qFreshAbs xs x A}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{x. \\<not> qFreshAbs xs x A}| <o |UNIV|", "using qAFreshAll_imp_qFreshAll card_of_mono1 single_non_qAFreshAbs_ordLess_var\nordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  (qAFresh ?xs ?x ?X \\<longrightarrow> qFresh ?xs ?x ?X) \\<and>\n  (qAFreshAbs ?xs ?x ?A \\<longrightarrow> qFreshAbs ?xs ?x ?A)\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n  qGoodAbs ?A \\<Longrightarrow> |{x. \\<not> qAFreshAbs ?xs x ?A}| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |{x. \\<not> qFreshAbs xs x A}| <o |UNIV|", "by (metis Collect_mono assms)"], ["", "lemma non_qAFresh_ordLess_var:\nassumes GOOD: \"\\<forall> X \\<in> XS. qGood X\" and Var: \"|XS| <o |UNIV :: 'var set|\"\nshows \"|{x| x X. X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "define K and F where \"K \\<equiv> {x| x X. X \\<in> XS \\<and> \\<not> qAFresh xs x X}\"  \n  and \"F \\<equiv> (\\<lambda> X. {x. X \\<in> XS \\<and> \\<not> qAFresh xs x X})\""], ["proof (state)\nthis:\n  K \\<equiv>\n  {uu_.\n   \\<exists>x X. uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}\n  F \\<equiv> \\<lambda>X. {x. X \\<in> XS \\<and> \\<not> qAFresh xs x X}\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "have \"K = (\\<Union> X \\<in> XS. F X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K = \\<Union> (F ` XS)", "unfolding K_def F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>x X. uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X} =\n    (\\<Union>X\\<in>XS. {x. X \\<in> XS \\<and> \\<not> qAFresh xs x X})", "by auto"], ["proof (state)\nthis:\n  K = \\<Union> (F ` XS)\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "moreover"], ["proof (state)\nthis:\n  K = \\<Union> (F ` XS)\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "have \"\\<forall> X \\<in> XS. |F X| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XS. |F X| <o |UNIV|", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XS.\n       |{x. X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o |UNIV|", "using GOOD single_non_qAFresh_ordLess_var"], ["proof (prove)\nusing this:\n  Ball XS qGood\n  qGood ?X \\<Longrightarrow> |{x. \\<not> qAFresh ?xs x ?X}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XS.\n       |{x. X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  \\<forall>X\\<in>XS. |F X| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  K = \\<Union> (F ` XS)\n  \\<forall>X\\<in>XS. |F X| <o |UNIV|", "have \"|K| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  K = \\<Union> (F ` XS)\n  \\<forall>X\\<in>XS. |F X| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "using var_regular_INNER Var"], ["proof (prove)\nusing this:\n  K = \\<Union> (F ` XS)\n  \\<forall>X\\<in>XS. |F X| <o |UNIV|\n  regular |UNIV|\n  |XS| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "by(auto simp add: regular_UNION)"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "thus ?thesis"], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "unfolding K_def"], ["proof (prove)\nusing this:\n  |{uu_.\n    \\<exists>x X.\n       uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "."], ["proof (state)\nthis:\n  |{uu_.\n    \\<exists>x X.\n       uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n  |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma non_qAFresh_or_in_ordLess_var:\nassumes Var: \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"|{x| x X. (x \\<in> V \\<or> (X \\<in> XS \\<and> \\<not> qAFresh xs x X))}| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "define J and K where \"J \\<equiv> {x| x X. (x \\<in> V \\<or> (X \\<in> XS \\<and> \\<not> qAFresh xs x X))}\"  \n  and \"K \\<equiv> {x| x X. X \\<in> XS \\<and> \\<not> qAFresh xs x X}\""], ["proof (state)\nthis:\n  J \\<equiv>\n  {uu_.\n   \\<exists>x X.\n      uu_ = x \\<and>\n      (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}\n  K \\<equiv>\n  {uu_.\n   \\<exists>x X. uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "have \"J \\<subseteq> K \\<union> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J \\<subseteq> K \\<union> V", "unfolding J_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>x X.\n        uu_ = x \\<and>\n        (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}\n    \\<subseteq> {uu_.\n                 \\<exists>x X.\n                    uu_ = x \\<and>\n                    X \\<in> XS \\<and> \\<not> qAFresh xs x X} \\<union>\n                V", "by auto"], ["proof (state)\nthis:\n  J \\<subseteq> K \\<union> V\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "hence \"|J| \\<le>o |K \\<union> V|\""], ["proof (prove)\nusing this:\n  J \\<subseteq> K \\<union> V\n\ngoal (1 subgoal):\n 1. |J| \\<le>o |K \\<union> V|", "using card_of_mono1"], ["proof (prove)\nusing this:\n  J \\<subseteq> K \\<union> V\n  ?A \\<subseteq> ?B \\<Longrightarrow> |?A| \\<le>o |?B|\n\ngoal (1 subgoal):\n 1. |J| \\<le>o |K \\<union> V|", "by auto"], ["proof (state)\nthis:\n  |J| \\<le>o |K \\<union> V|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "moreover"], ["proof (state)\nthis:\n  |J| \\<le>o |K \\<union> V|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "{"], ["proof (state)\nthis:\n  |J| \\<le>o |K \\<union> V|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "have \"|K| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |K| <o |UNIV|", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "using assms non_qAFresh_ordLess_var"], ["proof (prove)\nusing this:\n  |V| <o |UNIV|\n  |XS| <o |UNIV|\n  Ball XS qGood\n  \\<lbrakk>Ball ?XS qGood; |?XS| <o |UNIV|\\<rbrakk>\n  \\<Longrightarrow> |{uu_.\n                      \\<exists>x X.\n                         uu_ = x \\<and>\n                         X \\<in> ?XS \\<and> \\<not> qAFresh ?xs x X}| <o\n                    |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and> X \\<in> XS \\<and> \\<not> qAFresh xs x X}| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |K| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "hence \"|K \\<union> V| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |K \\<union> V| <o |UNIV|", "using Var var_infinite_INNER card_of_Un_ordLess_infinite"], ["proof (prove)\nusing this:\n  |K| <o |UNIV|\n  |V| <o |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?C; |?A| <o |?C|; |?B| <o |?C|\\<rbrakk>\n  \\<Longrightarrow> |?A \\<union> ?B| <o |?C|\n\ngoal (1 subgoal):\n 1. |K \\<union> V| <o |UNIV|", "by auto"], ["proof (state)\nthis:\n  |K \\<union> V| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "}"], ["proof (state)\nthis:\n  |K \\<union> V| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  |J| \\<le>o |K \\<union> V|\n  |K \\<union> V| <o |UNIV|", "have \"|J| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  |J| \\<le>o |K \\<union> V|\n  |K \\<union> V| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |J| <o |UNIV|", "using ordLeq_ordLess_trans"], ["proof (prove)\nusing this:\n  |J| \\<le>o |K \\<union> V|\n  |K \\<union> V| <o |UNIV|\n  \\<lbrakk>?r \\<le>o ?r'; ?r' <o ?r''\\<rbrakk> \\<Longrightarrow> ?r <o ?r''\n\ngoal (1 subgoal):\n 1. |J| <o |UNIV|", "by blast"], ["proof (state)\nthis:\n  |J| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "thus ?thesis"], ["proof (prove)\nusing this:\n  |J| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "unfolding J_def"], ["proof (prove)\nusing this:\n  |{uu_.\n    \\<exists>x X.\n       uu_ = x \\<and>\n       (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "."], ["proof (state)\nthis:\n  |{uu_.\n    \\<exists>x X.\n       uu_ = x \\<and>\n       (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n  |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtain_set_qFresh_card_of:\nassumes  \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> W. infinite W \\<and> W Int V = {} \\<and>\n             (\\<forall> x \\<in> W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "define J where \"J \\<equiv> {x| x X. (x \\<in> V \\<or> (X \\<in> XS \\<and> \\<not> qAFresh xs x X))}\""], ["proof (state)\nthis:\n  J \\<equiv>\n  {uu_.\n   \\<exists>x X.\n      uu_ = x \\<and>\n      (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "let ?W = \"UNIV - J\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "have \"|J| <o |UNIV :: 'var set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |J| <o |UNIV|", "unfolding J_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "using assms non_qAFresh_or_in_ordLess_var"], ["proof (prove)\nusing this:\n  |V| <o |UNIV|\n  |XS| <o |UNIV|\n  Ball XS qGood\n  \\<lbrakk>|?V| <o |UNIV|; |?XS| <o |UNIV|; Ball ?XS qGood\\<rbrakk>\n  \\<Longrightarrow> |{uu_.\n                      \\<exists>x X.\n                         uu_ = x \\<and>\n                         (x \\<in> ?V \\<or>\n                          X \\<in> ?XS \\<and> \\<not> qAFresh ?xs x X)}| <o\n                    |UNIV|\n\ngoal (1 subgoal):\n 1. |{uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or> X \\<in> XS \\<and> \\<not> qAFresh xs x X)}| <o\n    |UNIV|", "by auto"], ["proof (state)\nthis:\n  |J| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "hence  \"infinite ?W\""], ["proof (prove)\nusing this:\n  |J| <o |UNIV|\n\ngoal (1 subgoal):\n 1. infinite (UNIV - J)", "using var_infinite_INNER subset_ordLeq_diff_infinite[of _ J]"], ["proof (prove)\nusing this:\n  |J| <o |UNIV|\n  infinite UNIV\n  \\<lbrakk>infinite ?B; J \\<subseteq> ?B; |J| <o |?B|\\<rbrakk>\n  \\<Longrightarrow> infinite (?B - J)\n\ngoal (1 subgoal):\n 1. infinite (UNIV - J)", "by auto"], ["proof (state)\nthis:\n  infinite (UNIV - J)\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "moreover"], ["proof (state)\nthis:\n  infinite (UNIV - J)\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "have \"?W \\<inter> V = {} \\<and> (\\<forall> x \\<in> ?W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (UNIV - J) \\<inter> V = {} \\<and>\n    (\\<forall>x\\<in>UNIV - J.\n        \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "unfolding J_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (UNIV -\n     {uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or>\n          X \\<in> XS \\<and> \\<not> qAFresh xs x X)}) \\<inter>\n    V =\n    {} \\<and>\n    (\\<forall>x\\<in>UNIV -\n                    {uu_.\n                     \\<exists>x X.\n                        uu_ = x \\<and>\n                        (x \\<in> V \\<or>\n                         X \\<in> XS \\<and> \\<not> qAFresh xs x X)}.\n        \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "using qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. (UNIV -\n     {uu_.\n      \\<exists>x X.\n         uu_ = x \\<and>\n         (x \\<in> V \\<or>\n          X \\<in> XS \\<and> \\<not> qAFresh xs x X)}) \\<inter>\n    V =\n    {} \\<and>\n    (\\<forall>x\\<in>UNIV -\n                    {uu_.\n                     \\<exists>x X.\n                        uu_ = x \\<and>\n                        (x \\<in> V \\<or>\n                         X \\<in> XS \\<and> \\<not> qAFresh xs x X)}.\n        \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "by fastforce"], ["proof (state)\nthis:\n  (UNIV - J) \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>UNIV - J.\n      \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "ultimately"], ["proof (chain)\npicking this:\n  infinite (UNIV - J)\n  (UNIV - J) \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>UNIV - J.\n      \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite (UNIV - J)\n  (UNIV - J) \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>UNIV - J.\n      \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "by blast"], ["proof (state)\nthis:\n  \\<exists>W.\n     infinite W \\<and>\n     W \\<inter> V = {} \\<and>\n     (\\<forall>x\\<in>W.\n         \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtain_set_qFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> W. infinite W \\<and> W Int V = {} \\<and>\n            (\\<forall> x \\<in> W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "using assms"], ["proof (prove)\nusing this:\n  finite V \\<or> |V| <o |UNIV|\n  finite XS \\<or> |XS| <o |UNIV|\n  Ball XS qGood\n\ngoal (1 subgoal):\n 1. \\<exists>W.\n       infinite W \\<and>\n       W \\<inter> V = {} \\<and>\n       (\\<forall>x\\<in>W.\n           \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "by(fastforce simp add: var_infinite_INNER obtain_set_qFresh_card_of)"], ["", "lemma obtain_qFresh_card_of:\nassumes \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> x. x \\<notin> V \\<and> (\\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "obtain W where \"infinite W\" and\n  *: \"W \\<inter> V = {} \\<and> (\\<forall> x \\<in> W. \\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>infinite W;\n         W \\<inter> V = {} \\<and>\n         (\\<forall>x\\<in>W.\n             \\<forall>X\\<in>XS.\n                qAFresh xs x X \\<and> qFresh xs x X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms obtain_set_qFresh_card_of"], ["proof (prove)\nusing this:\n  |V| <o |UNIV|\n  |XS| <o |UNIV|\n  Ball XS qGood\n  \\<lbrakk>|?V| <o |UNIV|; |?XS| <o |UNIV|; Ball ?XS qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>W.\n                       infinite W \\<and>\n                       W \\<inter> ?V = {} \\<and>\n                       (\\<forall>x\\<in>W.\n                           \\<forall>X\\<in>?XS.\n                              qAFresh ?xs x X \\<and> qFresh ?xs x X)\n\ngoal (1 subgoal):\n 1. (\\<And>W.\n        \\<lbrakk>infinite W;\n         W \\<inter> V = {} \\<and>\n         (\\<forall>x\\<in>W.\n             \\<forall>X\\<in>XS.\n                qAFresh xs x X \\<and> qFresh xs x X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  infinite W\n  W \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>W. \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "then"], ["proof (chain)\npicking this:\n  infinite W\n  W \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>W. \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "obtain x where \"x \\<in> W\""], ["proof (prove)\nusing this:\n  infinite W\n  W \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>W. \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> W \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using infinite_imp_nonempty"], ["proof (prove)\nusing this:\n  infinite W\n  W \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>W. \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n  infinite ?S \\<Longrightarrow> ?S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> W \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "using *"], ["proof (prove)\nusing this:\n  x \\<in> W\n  W \\<inter> V = {} \\<and>\n  (\\<forall>x\\<in>W. \\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<notin> V \\<and>\n     (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtain_qFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"\\<exists> x. x \\<notin> V \\<and> (\\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "using assms"], ["proof (prove)\nusing this:\n  finite V \\<or> |V| <o |UNIV|\n  finite XS \\<or> |XS| <o |UNIV|\n  Ball XS qGood\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<notin> V \\<and>\n       (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X)", "by(fastforce simp add: var_infinite_INNER obtain_qFresh_card_of)"], ["", "definition pickQFresh where\n\"pickQFresh xs V XS ==\n SOME x. x \\<notin> V \\<and> (\\<forall> X \\<in> XS. qAFresh xs x X \\<and> qFresh xs x X)\""], ["", "lemma pickQFresh_card_of:\nassumes \"|V| <o |UNIV :: 'var set|\" and \"|XS| <o |UNIV :: 'var set|\" and \"\\<forall> X \\<in> XS. qGood X\"\nshows \"pickQFresh xs V XS \\<notin> V \\<and>\n       (\\<forall> X \\<in> XS. qAFresh xs (pickQFresh xs V XS) X \\<and> qFresh xs (pickQFresh xs V XS) X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFresh xs V XS \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS.\n        qAFresh xs (pickQFresh xs V XS) X \\<and>\n        qFresh xs (pickQFresh xs V XS) X)", "unfolding pickQFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> V \\<and>\n        (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n    \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS.\n        qAFresh xs\n         (SOME x.\n             x \\<notin> V \\<and>\n             (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n         X \\<and>\n        qFresh xs\n         (SOME x.\n             x \\<notin> V \\<and>\n             (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n         X)", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X.\n       X \\<notin> V \\<and>\n       (\\<forall>Xa\\<in>XS. qAFresh xs X Xa \\<and> qFresh xs X Xa)", "using assms obtain_qFresh_card_of"], ["proof (prove)\nusing this:\n  |V| <o |UNIV|\n  |XS| <o |UNIV|\n  Ball XS qGood\n  \\<lbrakk>|?V| <o |UNIV|; |?XS| <o |UNIV|; Ball ?XS qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       x \\<notin> ?V \\<and>\n                       (\\<forall>X\\<in>?XS.\n                           qAFresh ?xs x X \\<and> qFresh ?xs x X)\n\ngoal (1 subgoal):\n 1. \\<exists>X.\n       X \\<notin> V \\<and>\n       (\\<forall>Xa\\<in>XS. qAFresh xs X Xa \\<and> qFresh xs X Xa)", "by blast"], ["", "lemma pickQFresh:\nassumes \"finite V \\<or> |V| <o |UNIV :: 'var set|\" and \"finite XS \\<or> |XS| <o |UNIV :: 'var set|\" and\n        \"\\<forall> X \\<in> XS. qGood X\"\nshows \"pickQFresh xs V XS \\<notin> V \\<and>\n       (\\<forall> X \\<in> XS. qAFresh xs (pickQFresh xs V XS) X \\<and> qFresh xs (pickQFresh xs V XS) X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pickQFresh xs V XS \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS.\n        qAFresh xs (pickQFresh xs V XS) X \\<and>\n        qFresh xs (pickQFresh xs V XS) X)", "unfolding pickQFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x.\n        x \\<notin> V \\<and>\n        (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n    \\<notin> V \\<and>\n    (\\<forall>X\\<in>XS.\n        qAFresh xs\n         (SOME x.\n             x \\<notin> V \\<and>\n             (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n         X \\<and>\n        qFresh xs\n         (SOME x.\n             x \\<notin> V \\<and>\n             (\\<forall>X\\<in>XS. qAFresh xs x X \\<and> qFresh xs x X))\n         X)", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X.\n       X \\<notin> V \\<and>\n       (\\<forall>Xa\\<in>XS. qAFresh xs X Xa \\<and> qFresh xs X Xa)", "using assms"], ["proof (prove)\nusing this:\n  finite V \\<or> |V| <o |UNIV|\n  finite XS \\<or> |XS| <o |UNIV|\n  Ball XS qGood\n\ngoal (1 subgoal):\n 1. \\<exists>X.\n       X \\<notin> V \\<and>\n       (\\<forall>Xa\\<in>XS. qAFresh xs X Xa \\<and> qFresh xs X Xa)", "by(auto simp add: obtain_qFresh)"], ["", "end"], ["", "(* context FixVars *)\n(*****************************************)"], ["", "subsection \\<open>Alpha-equivalence\\<close>"], ["", "subsubsection \\<open>Definition\\<close>"], ["", "definition aux_alpha_ignoreSecond ::\n\"('index,'bindex,'varSort,'var,'opSym)qTerm * ('index,'bindex,'varSort,'var,'opSym)qTerm +\n ('index,'bindex,'varSort,'var,'opSym)qAbs * ('index,'bindex,'varSort,'var,'opSym)qAbs\n \\<Rightarrow>\n ('index,'bindex,'varSort,'var,'opSym)qTermItem\"\nwhere\n\"aux_alpha_ignoreSecond K ==\n case K of Inl(X,Y) \\<Rightarrow> termIn X\n          |Inr(A,B) \\<Rightarrow> absIn A\""], ["", "lemma aux_alpha_ignoreSecond_qTermLessQSwapped_wf:\n\"wf(inv_image qTermQSwappedLess aux_alpha_ignoreSecond)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image qTermQSwappedLess aux_alpha_ignoreSecond)", "using qTermQSwappedLess_wf wf_inv_image"], ["proof (prove)\nusing this:\n  wf qTermQSwappedLess\n  wf ?r \\<Longrightarrow> wf (inv_image ?r ?f)\n\ngoal (1 subgoal):\n 1. wf (inv_image qTermQSwappedLess aux_alpha_ignoreSecond)", "by auto"], ["", "(*  *)"], ["", "function\nalpha and alphaAbs\nwhere\n\"alpha (qVar xs x) (qVar xs' x') \\<longleftrightarrow> xs = xs' \\<and> x = x'\"\n|\n\"alpha (qOp delta inp binp) (qOp delta' inp' binp') \\<longleftrightarrow>\n delta = delta' \\<and> sameDom inp inp' \\<and> sameDom binp binp' \\<and>\n liftAll2 alpha inp inp' \\<and>\n liftAll2 alphaAbs binp binp'\"\n|\n\"alpha (qVar xs x) (qOp delta' inp' binp') \\<longleftrightarrow> False\"\n|\n\"alpha (qOp delta inp binp) (qVar xs' x') \\<longleftrightarrow> False\"\n|\n\"alphaAbs (qAbs xs x X) (qAbs xs' x' X') \\<longleftrightarrow>\n xs = xs' \\<and>\n (\\<exists> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs' y X' \\<and>\n       alpha (X #[[y \\<and> x]]_xs) (X' #[[y \\<and> x']]_xs'))\""], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>xs xa xs' x'.\n                   x = Inl (qVar xs xa, qVar xs' x') \\<Longrightarrow> P;\n        \\<And>delta inp binp delta' inp' binp'.\n           x =\n           Inl (qOp delta inp binp, qOp delta' inp' binp') \\<Longrightarrow>\n           P;\n        \\<And>xs xa delta' inp' binp'.\n           x = Inl (qVar xs xa, qOp delta' inp' binp') \\<Longrightarrow> P;\n        \\<And>delta inp binp xs' x'.\n           x = Inl (qOp delta inp binp, qVar xs' x') \\<Longrightarrow> P;\n        \\<And>xs xa X xs' x' X'.\n           x = Inr (qAbs xs xa X, qAbs xs' x' X') \\<Longrightarrow>\n           P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>xs x xs' x' xsa xa xs'a x'a.\n       Inl (qVar xs x, qVar xs' x') =\n       Inl (qVar xsa xa, qVar xs'a x'a) \\<Longrightarrow>\n       (xs = xs' \\<and> x = x') = (xsa = xs'a \\<and> xa = x'a)\n 3. \\<And>xs x xs' x' delta inp binp delta' inp' binp'.\n       Inl (qVar xs x, qVar xs' x') =\n       Inl (qOp delta inp binp, qOp delta' inp' binp') \\<Longrightarrow>\n       (xs = xs' \\<and> x = x') =\n       (delta = delta' \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inp\n         inp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binp\n         binp')\n 4. \\<And>xs x xs' x' xsa xa delta' inp' binp'.\n       Inl (qVar xs x, qVar xs' x') =\n       Inl (qVar xsa xa, qOp delta' inp' binp') \\<Longrightarrow>\n       (xs = xs' \\<and> x = x') = False\n 5. \\<And>xs x xs' x' delta inp binp xs'a x'a.\n       Inl (qVar xs x, qVar xs' x') =\n       Inl (qOp delta inp binp, qVar xs'a x'a) \\<Longrightarrow>\n       (xs = xs' \\<and> x = x') = False\n 6. \\<And>xs x xs' x' xsa xa X xs'a x'a X'.\n       Inl (qVar xs x, qVar xs' x') =\n       Inr (qAbs xsa xa X, qAbs xs'a x'a X') \\<Longrightarrow>\n       (xs = xs' \\<and> x = x') =\n       (xsa = xs'a \\<and>\n        (\\<exists>y.\n            y \\<notin> {xa, x'a} \\<and>\n            qAFresh xsa y X \\<and>\n            qAFresh xs'a y X' \\<and>\n            alpha_alphaAbs_sumC\n             (Inl (X #[[y \\<and> xa]]_xsa, X' #[[y \\<and> x'a]]_xs'a))))\n 7. \\<And>delta inp binp delta' inp' binp' deltaa inpa binpa delta'a inp'a\n       binp'a.\n       Inl (qOp delta inp binp, qOp delta' inp' binp') =\n       Inl (qOp deltaa inpa binpa,\n            qOp delta'a inp'a binp'a) \\<Longrightarrow>\n       (delta = delta' \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inp\n         inp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binp\n         binp') =\n       (deltaa = delta'a \\<and>\n        sameDom inpa inp'a \\<and>\n        sameDom binpa binp'a \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inpa\n         inp'a \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binpa\n         binp'a)\n 8. \\<And>delta inp binp delta' inp' binp' xs x delta'a inp'a binp'a.\n       Inl (qOp delta inp binp, qOp delta' inp' binp') =\n       Inl (qVar xs x, qOp delta'a inp'a binp'a) \\<Longrightarrow>\n       (delta = delta' \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inp\n         inp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binp\n         binp') =\n       False\n 9. \\<And>delta inp binp delta' inp' binp' deltaa inpa binpa xs' x'.\n       Inl (qOp delta inp binp, qOp delta' inp' binp') =\n       Inl (qOp deltaa inpa binpa, qVar xs' x') \\<Longrightarrow>\n       (delta = delta' \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inp\n         inp' \\<and>\n        liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binp\n         binp') =\n       False\n 10. \\<And>delta inp binp delta' inp' binp' xs x X xs' x' X'.\n        Inl (qOp delta inp binp, qOp delta' inp' binp') =\n        Inr (qAbs xs x X, qAbs xs' x' X') \\<Longrightarrow>\n        (delta = delta' \\<and>\n         sameDom inp inp' \\<and>\n         sameDom binp binp' \\<and>\n         liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inl (x0, x1))) inp\n          inp' \\<and>\n         liftAll2 (\\<lambda>x0 x1. alpha_alphaAbs_sumC (Inr (x0, x1))) binp\n          binp') =\n        (xs = xs' \\<and>\n         (\\<exists>y.\n             y \\<notin> {x, x'} \\<and>\n             qAFresh xs y X \\<and>\n             qAFresh xs' y X' \\<and>\n             alpha_alphaAbs_sumC\n              (Inl (X #[[y \\<and> x]]_xs, X' #[[y \\<and> x']]_xs'))))\nA total of 16 subgoals...", "by(pat_completeness, auto)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All alpha_alphaAbs_dom", "apply(relation \"inv_image qTermQSwappedLess aux_alpha_ignoreSecond\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf (inv_image qTermQSwappedLess aux_alpha_ignoreSecond)\n 2. \\<And>delta inp binp delta' inp' binp' i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> (Inl (v1, v2),\n                          Inl (qOp delta inp binp, qOp delta' inp' binp'))\n                         \\<in> inv_image qTermQSwappedLess\n                                aux_alpha_ignoreSecond\n 3. \\<And>delta inp binp delta' inp' binp' i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> (Inr (v1, v2),\n                          Inl (qOp delta inp binp, qOp delta' inp' binp'))\n                         \\<in> inv_image qTermQSwappedLess\n                                aux_alpha_ignoreSecond\n 4. \\<And>xs x X xs' x' X' xa.\n       (Inl (X #[[xa \\<and> x]]_xs, X' #[[xa \\<and> x']]_xs'),\n        Inr (qAbs xs x X, qAbs xs' x' X'))\n       \\<in> inv_image qTermQSwappedLess aux_alpha_ignoreSecond", "apply(simp add: aux_alpha_ignoreSecond_qTermLessQSwapped_wf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>delta inp binp delta' inp' binp' i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> (Inl (v1, v2),\n                          Inl (qOp delta inp binp, qOp delta' inp' binp'))\n                         \\<in> inv_image qTermQSwappedLess\n                                aux_alpha_ignoreSecond\n 2. \\<And>delta inp binp delta' inp' binp' i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> (Inr (v1, v2),\n                          Inl (qOp delta inp binp, qOp delta' inp' binp'))\n                         \\<in> inv_image qTermQSwappedLess\n                                aux_alpha_ignoreSecond\n 3. \\<And>xs x X xs' x' X' xa.\n       (Inl (X #[[xa \\<and> x]]_xs, X' #[[xa \\<and> x']]_xs'),\n        Inr (qAbs xs x X, qAbs xs' x' X'))\n       \\<in> inv_image qTermQSwappedLess aux_alpha_ignoreSecond", "by(auto simp add: qTermQSwappedLess_def qTermLess_modulo_def\n   aux_alpha_ignoreSecond_def qSwap_qSwapped)"], ["", "abbreviation alpha_abbrev (infix \"#=\" 50) where \"X #= Y \\<equiv> alpha X Y\""], ["", "abbreviation alphaAbs_abbrev (infix \"$=\" 50) where \"A $= B \\<equiv> alphaAbs A B\""], ["", "(*********************************************)"], ["", "context FixVars\nbegin"], ["", "subsubsection \\<open>Simplification and elimination rules\\<close>"], ["", "lemma alpha_inp_None:\n\"qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n (inp i = None) = (inp' i = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n    (inp i = None) = (inp' i = None)", "by(auto simp add: sameDom_def)"], ["", "lemma alpha_binp_None:\n\"qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n (binp i = None) = (binp' i = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qOp delta inp binp #= qOp delta' inp' binp' \\<Longrightarrow>\n    (binp i = None) = (binp' i = None)", "by(auto simp add: sameDom_def)"], ["", "lemma qVar_alpha_iff:\n\"qVar xs x #= X' \\<longleftrightarrow> X' = qVar xs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qVar xs x #= X') = (X' = qVar xs x)", "by(cases X', auto)"], ["", "lemma alpha_qVar_iff:\n\"X #= qVar xs' x' \\<longleftrightarrow> X = qVar xs' x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X #= qVar xs' x') = (X = qVar xs' x')", "by(cases X, auto)"], ["", "lemma qOp_alpha_iff:\n\"qOp delta inp binp #= X' \\<longleftrightarrow>\n (\\<exists> inp' binp'.\n    X' = qOp delta inp' binp' \\<and> sameDom inp inp' \\<and> sameDom binp binp' \\<and>\n    liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n    liftAll2 (\\<lambda>A A'. A $= A') binp binp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qOp delta inp binp #= X') =\n    (\\<exists>inp' binp'.\n        X' = qOp delta inp' binp' \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp')", "by(cases X') auto"], ["", "lemma alpha_qOp_iff:\n\"X #= qOp delta' inp' binp' \\<longleftrightarrow>\n (\\<exists> inp binp. X = qOp delta' inp binp \\<and> sameDom inp inp' \\<and> sameDom binp binp' \\<and>\n    liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n    liftAll2 (\\<lambda>A A'. A $= A') binp binp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X #= qOp delta' inp' binp') =\n    (\\<exists>inp binp.\n        X = qOp delta' inp binp \\<and>\n        sameDom inp inp' \\<and>\n        sameDom binp binp' \\<and>\n        liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp')", "by(cases X) auto"], ["", "lemma qAbs_alphaAbs_iff:\n\"qAbs xs x X $= A' \\<longleftrightarrow>\n (\\<exists> x' y X'. A' = qAbs xs x' X' \\<and>\n             y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n             (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= A') =\n    (\\<exists>x' y X'.\n        A' = qAbs xs x' X' \\<and>\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by(cases A') auto"], ["", "lemma alphaAbs_qAbs_iff:\n\"A $= qAbs xs' x' X' \\<longleftrightarrow>\n (\\<exists> x y X. A = qAbs xs' x X \\<and>\n            y \\<notin> {x,x'} \\<and> qAFresh xs' y X \\<and> qAFresh xs' y X' \\<and>\n            (X #[[y \\<and> x]]_xs') #= (X' #[[y \\<and> x']]_xs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A $= qAbs xs' x' X') =\n    (\\<exists>x y X.\n        A = qAbs xs' x X \\<and>\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs' y X \\<and>\n        qAFresh xs' y X' \\<and>\n        X #[[y \\<and> x]]_xs' #= X' #[[y \\<and> x']]_xs')", "by(cases A) auto"], ["", "subsubsection \\<open>Basic properties\\<close>"], ["", "text\\<open>In a nutshell: ``alpha\" is included in the kernel of ``qSkel\", is\nan equivalence on good quasi-terms, preserves goodness,\nand all operators and relations (except ``qAFresh\") preserve alpha.\\<close>"], ["", "lemma alphaAll_qSkelAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(\\<forall> X'. X #= X' \\<longrightarrow> qSkel X = qSkel X') \\<and>\n (\\<forall> A'. A $= A' \\<longrightarrow> qSkelAbs A = qSkelAbs A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X'. X #= X' \\<longrightarrow> qSkel X = qSkel X') \\<and>\n    (\\<forall>A'. A $= A' \\<longrightarrow> qSkelAbs A = qSkelAbs A')", "proof(induction rule: qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X'.\n          qVar xs x #= X' \\<longrightarrow> qSkel (qVar xs x) = qSkel X'\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'.\n                        a #= X' \\<longrightarrow> qSkel a = qSkel X')\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>A'.\n                a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qSkel (qOp delta inp binp) = qSkel X'\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X'.\n          qVar xs x #= X' \\<longrightarrow> qSkel (qVar xs x) = qSkel X'\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'.\n                        a #= X' \\<longrightarrow> qSkel a = qSkel X')\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>A'.\n                a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qSkel (qOp delta inp binp) = qSkel X'\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'.\n       qVar xs x #= X' \\<longrightarrow> qSkel (qVar xs x) = qSkel X'", "unfolding qVar_alpha_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'.\n       X' = qVar xs x \\<longrightarrow> qSkel (qVar xs x) = qSkel X'", "by simp"], ["proof (state)\nthis:\n  \\<forall>X'.\n     qVar xs x #= X' \\<longrightarrow> qSkel (qVar xs x) = qSkel X'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'.\n                        a #= X' \\<longrightarrow> qSkel a = qSkel X')\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>A'.\n                a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qSkel (qOp delta inp binp) = qSkel X'\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'.\n                        a #= X' \\<longrightarrow> qSkel a = qSkel X')\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>A'.\n                a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qSkel (qOp delta inp binp) = qSkel X'\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>a. \\<forall>X'. a #= X' \\<longrightarrow> qSkel a = qSkel X')\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>A'. a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'.\n                        a #= X' \\<longrightarrow> qSkel a = qSkel X')\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             \\<forall>A'.\n                a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qSkel (qOp delta inp binp) = qSkel X'\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'.\n       qOp delta inp binp #= X' \\<longrightarrow>\n       qSkel (qOp delta inp binp) = qSkel X'", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qSkel (qOp delta inp binp) = qSkel X'", "fix X'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qSkel (qOp delta inp binp) = qSkel X'", "assume \"qOp delta inp binp #= X'\""], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qSkel (qOp delta inp binp) = qSkel X'", "then"], ["proof (chain)\npicking this:\n  qOp delta inp binp #= X'", "obtain inp' binp' where X'eq: \"X' = qOp delta inp' binp'\" and\n       1: \"sameDom inp inp' \\<and> sameDom binp binp'\" and\n       2: \"liftAll2 (\\<lambda> Y Y'. Y #= Y') inp inp' \\<and>\n           liftAll2 (\\<lambda> A A'. A $= A') binp binp'\""], ["proof (prove)\nusing this:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     sameDom inp inp' \\<and>\n     sameDom binp binp' \\<and>\n     liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qSkel (qOp delta inp binp) = qSkel X'", "from Op.IH 1 2"], ["proof (chain)\npicking this:\n  liftAll\n   (\\<lambda>a. \\<forall>X'. a #= X' \\<longrightarrow> qSkel a = qSkel X')\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>A'. a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n   binp\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'", "show \"qSkel (qOp delta inp binp) = qSkel X'\""], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>a. \\<forall>X'. a #= X' \\<longrightarrow> qSkel a = qSkel X')\n   inp\n  liftAll\n   (\\<lambda>a.\n       \\<forall>A'. a $= A' \\<longrightarrow> qSkelAbs a = qSkelAbs A')\n   binp\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. qSkel (qOp delta inp binp) = qSkel X'", "by (simp add: X'eq fun_eq_iff option.case_eq_if\n        lift_def liftAll_def sameDom_def liftAll2_def)"], ["proof (state)\nthis:\n  qSkel (qOp delta inp binp) = qSkel X'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X'.\n     qOp delta inp binp #= X' \\<longrightarrow>\n     qSkel (qOp delta inp binp) = qSkel X'\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "case (Abs xs x X)"], ["proof (state)\nthis:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> qSkel ?Y11 = qSkel X'\n  qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> qSkel ?Y11 = qSkel X'\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'.\n                      Y #= X' \\<longrightarrow> qSkel Y = qSkel X';\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'.\n              Y #= X' \\<longrightarrow> qSkel Y = qSkel X'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qSkelAbs (qAbs xs x X) = qSkelAbs A'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A'.\n       qAbs xs x X $= A' \\<longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "fix A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "assume \"qAbs xs x X $= A'\""], ["proof (state)\nthis:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= A'", "obtain X' x' y where A'eq: \"A' = qAbs xs x' X'\" and\n    *: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "moreover"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "have \"(X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "using qSwap_qSwapped"], ["proof (prove)\nusing this:\n  (?X, ?X #[[?x \\<and> ?y]]_?zs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by fastforce"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "ultimately"], ["proof (chain)\npicking this:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "have \"qSkel(X #[[y \\<and> x]]_xs) = qSkel(X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. qSkel (X #[[y \\<and> x]]_xs) = qSkel (X' #[[y \\<and> x']]_xs)", "using Abs.IH"], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> qSkel ?Y11 = qSkel X'\n  qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> qSkel ?Y11 = qSkel X'\n\ngoal (1 subgoal):\n 1. qSkel (X #[[y \\<and> x]]_xs) = qSkel (X' #[[y \\<and> x']]_xs)", "by blast"], ["proof (state)\nthis:\n  qSkel (X #[[y \\<and> x]]_xs) = qSkel (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "hence \"qSkel X = qSkel X'\""], ["proof (prove)\nusing this:\n  qSkel (X #[[y \\<and> x]]_xs) = qSkel (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qSkel X = qSkel X'", "by(auto simp add: qSkel_qSwap)"], ["proof (state)\nthis:\n  qSkel X = qSkel X'\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qSkelAbs (qAbs xs x X) = qSkelAbs A'", "thus \"qSkelAbs (qAbs xs x X) = qSkelAbs A'\""], ["proof (prove)\nusing this:\n  qSkel X = qSkel X'\n\ngoal (1 subgoal):\n 1. qSkelAbs (qAbs xs x X) = qSkelAbs A'", "unfolding A'eq"], ["proof (prove)\nusing this:\n  qSkel X = qSkel X'\n\ngoal (1 subgoal):\n 1. qSkelAbs (qAbs xs x X) = qSkelAbs (qAbs xs x' X')", "by simp"], ["proof (state)\nthis:\n  qSkelAbs (qAbs xs x X) = qSkelAbs A'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A'.\n     qAbs xs x X $= A' \\<longrightarrow>\n     qSkelAbs (qAbs xs x X) = qSkelAbs A'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alpha_qSkel:\nfixes X X' :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nshows \"X #= X' \\<Longrightarrow> qSkel X = qSkel X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #= X' \\<Longrightarrow> qSkel X = qSkel X'", "by(simp add: alphaAll_qSkelAll)"], ["", "text\\<open>Symmetry of alpha is a property that holds for arbitrary \n(not necessarily good) quasi-terms.\\<close>"], ["", "lemma alphaAll_sym:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(\\<forall> X'. X #= X' \\<longrightarrow> X' #= X) \\<and> (\\<forall> A'. A $= A' \\<longrightarrow> A' $= A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X'. X #= X' \\<longrightarrow> X' #= X) \\<and>\n    (\\<forall>A'. A $= A' \\<longrightarrow> A' $= A)", "proof(induction rule: qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X'. qVar xs x #= X' \\<longrightarrow> X' #= qVar xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'. a #= X' \\<longrightarrow> X' #= a)\n                 inp;\n        liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            X' #= qOp delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X'. qVar xs x #= X' \\<longrightarrow> X' #= qVar xs x\n 2. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'. a #= X' \\<longrightarrow> X' #= a)\n                 inp;\n        liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            X' #= qOp delta inp binp\n 3. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'. qVar xs x #= X' \\<longrightarrow> X' #= qVar xs x", "unfolding qVar_alpha_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'. X' = qVar xs x \\<longrightarrow> X' #= qVar xs x", "by simp"], ["proof (state)\nthis:\n  \\<forall>X'. qVar xs x #= X' \\<longrightarrow> X' #= qVar xs x\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'. a #= X' \\<longrightarrow> X' #= a)\n                 inp;\n        liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            X' #= qOp delta inp binp\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'. a #= X' \\<longrightarrow> X' #= a)\n                 inp;\n        liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            X' #= qOp delta inp binp\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  liftAll (\\<lambda>a. \\<forall>X'. a #= X' \\<longrightarrow> X' #= a) inp\n  liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a) binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     \\<forall>X'. a #= X' \\<longrightarrow> X' #= a)\n                 inp;\n        liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a)\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            X' #= qOp delta inp binp\n 2. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X'.\n       qOp delta inp binp #= X' \\<longrightarrow> X' #= qOp delta inp binp", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow> X' #= qOp delta inp binp", "fix X'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow> X' #= qOp delta inp binp", "assume \"qOp delta inp binp #= X'\""], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow> X' #= qOp delta inp binp", "then"], ["proof (chain)\npicking this:\n  qOp delta inp binp #= X'", "obtain inp' binp' where X': \"X' = qOp delta inp' binp'\" and\n    1: \"sameDom inp inp' \\<and> sameDom binp binp'\"\n    and 2: \"liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n          liftAll2 (\\<lambda>A A'. A $= A') binp binp'\""], ["proof (prove)\nusing this:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     sameDom inp inp' \\<and>\n     sameDom binp binp' \\<and>\n     liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       qOp delta inp binp #= X' \\<Longrightarrow> X' #= qOp delta inp binp", "thus \"X' #= qOp delta inp binp\""], ["proof (prove)\nusing this:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. X' #= qOp delta inp binp", "unfolding X'"], ["proof (prove)\nusing this:\n  qOp delta inp' binp' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. qOp delta inp' binp' #= qOp delta inp binp", "using Op.IH 1 2"], ["proof (prove)\nusing this:\n  qOp delta inp' binp' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n  liftAll (\\<lambda>a. \\<forall>X'. a #= X' \\<longrightarrow> X' #= a) inp\n  liftAll (\\<lambda>a. \\<forall>A'. a $= A' \\<longrightarrow> A' $= a) binp\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. qOp delta inp' binp' #= qOp delta inp binp", "by (auto simp add: fun_eq_iff option.case_eq_if\n        lift_def liftAll_def sameDom_def liftAll2_def)"], ["proof (state)\nthis:\n  X' #= qOp delta inp binp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X'.\n     qOp delta inp binp #= X' \\<longrightarrow> X' #= qOp delta inp binp\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "case (Abs xs x X)"], ["proof (state)\nthis:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> X' #= ?Y11\n  qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> X' #= ?Y11\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y;\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X'. Y #= X' \\<longrightarrow> X' #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A'.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            A' $= qAbs xs x X", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A'. qAbs xs x X $= A' \\<longrightarrow> A' $= qAbs xs x X", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "fix A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "assume \"qAbs xs x X $= A'\""], ["proof (state)\nthis:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= A'", "obtain x' y X' where\n    1: \"A' = qAbs xs x' X' \\<and> y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\" and\n    \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X' \\<and>\n                 y \\<notin> {x, x'} \\<and>\n                 qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X' \\<and>\n                 y \\<notin> {x, x'} \\<and>\n                 qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "moreover"], ["proof (state)\nthis:\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "have \"(X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by (simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "ultimately"], ["proof (chain)\npicking this:\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "have \"(X' #[[y \\<and> x']]_xs) #= (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= X #[[y \\<and> x]]_xs", "using Abs.IH"], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> X' #= ?Y11\n  qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X'. ?Y11 #= X' \\<longrightarrow> X' #= ?Y11\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= X #[[y \\<and> x]]_xs", "by simp"], ["proof (state)\nthis:\n  X' #[[y \\<and> x']]_xs #= X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'. qAbs xs x X $= A' \\<Longrightarrow> A' $= qAbs xs x X", "thus \"A' $= qAbs xs x X\""], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. A' $= qAbs xs x X", "using 1"], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= X #[[y \\<and> x]]_xs\n  A' = qAbs xs x' X' \\<and>\n  y \\<notin> {x, x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. A' $= qAbs xs x X", "by auto"], ["proof (state)\nthis:\n  A' $= qAbs xs x X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A'. qAbs xs x X $= A' \\<longrightarrow> A' $= qAbs xs x X\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alpha_sym:\nfixes X X' :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nshows \"X #= X' \\<Longrightarrow> X' #= X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #= X' \\<Longrightarrow> X' #= X", "by(simp add: alphaAll_sym)"], ["", "corollary alphaAbs_sym:\nfixes A A' ::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows \"A $= A' \\<Longrightarrow> A' $= A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $= A' \\<Longrightarrow> A' $= A", "by(simp add: alphaAll_sym)"], ["", "text\\<open>Reflexivity does not hold for arbitrary quasi-terms, but onl;y for good \nones. Indeed, the proof requires picking a fresh variable,\n   guaranteed to be possible only if the quasi-term is good.\\<close>"], ["", "lemma alphaAll_refl:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> X #= X) \\<and> (qGoodAbs A \\<longrightarrow> A $= A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow> X #= X) \\<and>\n    (qGoodAbs A \\<longrightarrow> A $= A)", "apply(rule qGood_qTerm_induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>|{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        liftAll (\\<lambda>X. qGood X \\<and> X #= X) inp;\n        liftAll (\\<lambda>A. qGoodAbs A \\<and> A $= A) binp\\<rbrakk>\n       \\<Longrightarrow> sameDom inp inp \\<and>\n                         sameDom binp binp \\<and>\n                         liftAll2 (#=) inp inp \\<and>\n                         liftAll2 ($=) binp binp\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "unfolding liftAll_def sameDom_def liftAll2_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>inp binp.\n       \\<lbrakk>|{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        \\<forall>i v.\n           inp i = Some v \\<longrightarrow> qGood v \\<and> v #= v;\n        \\<forall>i v.\n           binp i = Some v \\<longrightarrow>\n           qGoodAbs v \\<and> v $= v\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i.\n                             (inp i = None) = (inp i = None)) \\<and>\n                         (\\<forall>i.\n                             (binp i = None) = (binp i = None)) \\<and>\n                         (\\<forall>i v1 v2.\n                             inp i = Some v1 \\<and>\n                             inp i = Some v2 \\<longrightarrow>\n                             v1 #= v2) \\<and>\n                         (\\<forall>i v1 v2.\n                             binp i = Some v1 \\<and>\n                             binp i = Some v2 \\<longrightarrow>\n                             v1 $= v2)\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "fix xs x X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "assume \"qGood X\" and\n        IH: \"\\<And>Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\""], ["proof (state)\nthis:\n  qGood X\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow> ?Y11 #= ?Y11\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "then"], ["proof (chain)\npicking this:\n  qGood X\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow> ?Y11 #= ?Y11", "obtain y where 1: \"y \\<noteq> x \\<and> qAFresh xs y X\""], ["proof (prove)\nusing this:\n  qGood X\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow> ?Y11 #= ?Y11\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<noteq> x \\<and> qAFresh xs y X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obtain_qFresh[of \"{x}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow> ?Y11 #= ?Y11\n  \\<lbrakk>finite {x} \\<or> |{x}| <o |UNIV|;\n   finite {X} \\<or> |{X}| <o |UNIV|; Ball {X} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x} \\<and>\n                       (\\<forall>X\\<in>{X}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<noteq> x \\<and> qAFresh xs y X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> x \\<and> qAFresh xs y X\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "hence \"(X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\nusing this:\n  y \\<noteq> x \\<and> qAFresh xs y X\n\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "using qSwap_qSwapped"], ["proof (prove)\nusing this:\n  y \\<noteq> x \\<and> qAFresh xs y X\n  (?X, ?X #[[?x \\<and> ?y]]_?zs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by auto"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "hence \"(X #[[y \\<and> x]]_xs) #= (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "using IH"], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow> ?Y11 #= ?Y11\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y. qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow> Y #= Y;\n        \\<And>Y. (X, Y) \\<in> qSwapped \\<Longrightarrow> Y #= Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            y \\<noteq> x \\<and>\n                            qAFresh xs y X \\<and>\n                            X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "thus \"\\<exists>y. y \\<noteq> x \\<and> qAFresh xs y X \\<and> (X #[[y \\<and> x]]_xs) #= (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<noteq> x \\<and>\n       qAFresh xs y X \\<and> X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "using 1"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n  y \\<noteq> x \\<and> qAFresh xs y X\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<noteq> x \\<and>\n       qAFresh xs y X \\<and> X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     y \\<noteq> x \\<and>\n     qAFresh xs y X \\<and> X #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alpha_refl:\nfixes X :: \"('index,'bindex,'varSort,'var,'opSym)qTerm\"\nshows \"qGood X \\<Longrightarrow> X #= X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X \\<Longrightarrow> X #= X", "by(simp add: alphaAll_refl)"], ["", "corollary alphaAbs_refl:\nfixes A ::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows \"qGoodAbs A \\<Longrightarrow> A $= A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A \\<Longrightarrow> A $= A", "by(simp add: alphaAll_refl)"], ["", "lemma alphaAll_preserves_qGoodAll1:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X'. X #= X' \\<longrightarrow> qGood X')) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A'. A $= A' \\<longrightarrow> qGoodAbs A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     (\\<forall>X'. X #= X' \\<longrightarrow> qGood X')) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))", "apply(rule qTerm_induct, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x X'. qVar xs x #= X' \\<Longrightarrow> qGood X'\n 2. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 3. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "unfolding qVar_alpha_iff"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xs x X'. X' = qVar xs x \\<Longrightarrow> qGood X'\n 2. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 3. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 2. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 2. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "fix delta inp binp X'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 2. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "assume\n  IH1: \"liftAll (\\<lambda>Y. qGood Y \\<longrightarrow> (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y')) inp\"\n  and IH2: \"liftAll (\\<lambda>A. qGoodAbs A \\<longrightarrow> (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A')) binp\"\n  and *: \"liftAll qGood inp\"  \"liftAll qGoodAbs binp\"\n  and **: \"|{i. \\<exists>Y. inp i = Some Y}| <o |UNIV :: 'var set|\"\n          \"|{i. \\<exists>A. binp i = Some A}| <o |UNIV :: 'var set|\"\n  and \"qOp delta inp binp #= X'\""], ["proof (state)\nthis:\n  liftAll\n   (\\<lambda>Y.\n       qGood Y \\<longrightarrow>\n       (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y'))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<longrightarrow>\n       (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))\n   binp\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  qOp delta inp binp #= X'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 2. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "then"], ["proof (chain)\npicking this:\n  liftAll\n   (\\<lambda>Y.\n       qGood Y \\<longrightarrow>\n       (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y'))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<longrightarrow>\n       (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))\n   binp\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  qOp delta inp binp #= X'", "obtain inp' binp' where\n  X'eq: \"X' = qOp delta inp' binp'\" and\n  2: \"sameDom inp inp' \\<and> sameDom binp binp'\" and\n  3: \"liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n      liftAll2 (\\<lambda>A A'. A $= A') binp binp'\""], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>Y.\n       qGood Y \\<longrightarrow>\n       (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y'))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<longrightarrow>\n       (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))\n   binp\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>Y.\n       qGood Y \\<longrightarrow>\n       (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y'))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<longrightarrow>\n       (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))\n   binp\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     sameDom inp inp' \\<and>\n     sameDom binp binp' \\<and>\n     liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp X'.\n       \\<lbrakk>liftAll\n                 (\\<lambda>a.\n                     qGood a \\<longrightarrow>\n                     (\\<forall>X'. a #= X' \\<longrightarrow> qGood X'))\n                 inp;\n        liftAll\n         (\\<lambda>a.\n             qGoodAbs a \\<longrightarrow>\n             (\\<forall>A'. a $= A' \\<longrightarrow> qGoodAbs A'))\n         binp;\n        liftAll qGood inp; liftAll qGoodAbs binp;\n        |{i. \\<exists>y. inp i = Some y}| <o |UNIV|;\n        |{i. \\<exists>y. binp i = Some y}| <o |UNIV|;\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qGood X'\n 2. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "show \"qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X'", "unfolding X'eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (qOp delta inp' binp')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll qGood inp' \\<and>\n    liftAll qGoodAbs binp' \\<and>\n    |{i. \\<exists>y. inp' i = Some y}| <o |UNIV| \\<and>\n    |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "unfolding liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i v. inp' i = Some v \\<longrightarrow> qGood v) \\<and>\n    (\\<forall>i v. binp' i = Some v \\<longrightarrow> qGoodAbs v) \\<and>\n    |{i. \\<exists>y. inp' i = Some y}| <o |UNIV| \\<and>\n    |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "proof-"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "fix i Y'"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "assume inp': \"inp' i = Some Y'\""], ["proof (state)\nthis:\n  inp' i = Some Y'\n\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  inp' i = Some Y'", "obtain Y where inp: \"inp i = Some Y\""], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n\ngoal (1 subgoal):\n 1. (\\<And>Y. inp i = Some Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>Y. inp i = Some Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>Y. inp i = Some Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  inp i = Some Y\n\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "hence \"Y #= Y'\""], ["proof (prove)\nusing this:\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. Y #= Y'", "using inp' 3"], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp' i = Some Y'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. Y #= Y'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp' i = Some Y'\n  (\\<forall>i v1 v2.\n      inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow> v1 $= v2)\n\ngoal (1 subgoal):\n 1. Y #= Y'", "by blast"], ["proof (state)\nthis:\n  Y #= Y'\n\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  Y #= Y'\n\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "have \"qGood Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood Y", "using * inp"], ["proof (prove)\nusing this:\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. qGood Y", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v\n  \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. qGood Y", "by simp"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (4 subgoals):\n 1. \\<And>i v. inp' i = Some v \\<Longrightarrow> qGood v\n 2. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 3. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 4. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  Y #= Y'\n  qGood Y", "show \"qGood Y'\""], ["proof (prove)\nusing this:\n  Y #= Y'\n  qGood Y\n\ngoal (1 subgoal):\n 1. qGood Y'", "using IH1 inp"], ["proof (prove)\nusing this:\n  Y #= Y'\n  qGood Y\n  liftAll\n   (\\<lambda>Y.\n       qGood Y \\<longrightarrow>\n       (\\<forall>Y'. Y #= Y' \\<longrightarrow> qGood Y'))\n   inp\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. qGood Y'", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  Y #= Y'\n  qGood Y\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<longrightarrow>\n     (\\<forall>Y'. v #= Y' \\<longrightarrow> qGood Y')\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. qGood Y'", "by blast"], ["proof (state)\nthis:\n  qGood Y'\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "fix i A'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "assume binp': \"binp' i = Some A'\""], ["proof (state)\nthis:\n  binp' i = Some A'\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "then"], ["proof (chain)\npicking this:\n  binp' i = Some A'", "obtain A where binp: \"binp i = Some A\""], ["proof (prove)\nusing this:\n  binp' i = Some A'\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "hence \"A $= A'\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. A $= A'", "using binp' 3"], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp' i = Some A'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. A $= A'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp' i = Some A'\n  (\\<forall>i v1 v2.\n      inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow> v1 $= v2)\n\ngoal (1 subgoal):\n 1. A $= A'", "by blast"], ["proof (state)\nthis:\n  A $= A'\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "moreover"], ["proof (state)\nthis:\n  A $= A'\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "have \"qGoodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A", "using * binp"], ["proof (prove)\nusing this:\n  liftAll qGood inp\n  liftAll qGoodAbs binp\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  \\<forall>i v. inp i = Some v \\<longrightarrow> qGood v\n  \\<forall>i v. binp i = Some v \\<longrightarrow> qGoodAbs v\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "by simp"], ["proof (state)\nthis:\n  qGoodAbs A\n\ngoal (3 subgoals):\n 1. \\<And>i v. binp' i = Some v \\<Longrightarrow> qGoodAbs v\n 2. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 3. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "ultimately"], ["proof (chain)\npicking this:\n  A $= A'\n  qGoodAbs A", "show \"qGoodAbs A'\""], ["proof (prove)\nusing this:\n  A $= A'\n  qGoodAbs A\n\ngoal (1 subgoal):\n 1. qGoodAbs A'", "using IH2 binp"], ["proof (prove)\nusing this:\n  A $= A'\n  qGoodAbs A\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<longrightarrow>\n       (\\<forall>A'. A $= A' \\<longrightarrow> qGoodAbs A'))\n   binp\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. qGoodAbs A'", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  A $= A'\n  qGoodAbs A\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<longrightarrow>\n     (\\<forall>A'. v $= A' \\<longrightarrow> qGoodAbs A')\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. qGoodAbs A'", "by blast"], ["proof (state)\nthis:\n  qGoodAbs A'\n\ngoal (2 subgoals):\n 1. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 2. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 2. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "have \"{i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}", "using 2"], ["proof (prove)\nusing this:\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}", "by force"], ["proof (state)\nthis:\n  {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}\n\ngoal (2 subgoals):\n 1. |{i. \\<exists>y. inp' i = Some y}| <o |UNIV|\n 2. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "thus \"|{i. \\<exists>Y'. inp' i = Some Y'}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>Y'. inp' i = Some Y'}| <o |UNIV|", "using **"], ["proof (prove)\nusing this:\n  {i. \\<exists>Y'. inp' i = Some Y'} = {i. \\<exists>Y. inp i = Some Y}\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>Y'. inp' i = Some Y'}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{i. \\<exists>Y'. inp' i = Some Y'}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "have \"{i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}", "using 2"], ["proof (prove)\nusing this:\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}", "by force"], ["proof (state)\nthis:\n  {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>y. binp' i = Some y}| <o |UNIV|", "thus \"|{i. \\<exists>A'. binp' i = Some A'}| <o |UNIV :: 'var set|\""], ["proof (prove)\nusing this:\n  {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>A'. binp' i = Some A'}| <o |UNIV|", "using **"], ["proof (prove)\nusing this:\n  {i. \\<exists>A'. binp' i = Some A'} = {i. \\<exists>A. binp i = Some A}\n  |{i. \\<exists>Y. inp i = Some Y}| <o |UNIV|\n  |{i. \\<exists>A. binp i = Some A}| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |{i. \\<exists>A'. binp' i = Some A'}| <o |UNIV|", "by simp"], ["proof (state)\nthis:\n  |{i. \\<exists>A'. binp' i = Some A'}| <o |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "fix xs x X A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "assume IH: \"\\<And>Y. (X,Y) \\<in> qSwapped \\<Longrightarrow> qGood Y \\<longrightarrow> (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X')\"\n         and *: \"qGood X\" and \"qAbs xs x X $= A'\""], ["proof (state)\nthis:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qGood X')\n  qGood X\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "then"], ["proof (chain)\npicking this:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qGood X')\n  qGood X\n  qAbs xs x X $= A'", "obtain x' y X' where \"A' = qAbs xs x' X'\" and\n       1: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qGood X')\n  qGood X\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qGood X')\n  qGood X\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X A'.\n       \\<lbrakk>\\<And>Y.\n                   (X, Y) \\<in> qSwapped \\<Longrightarrow>\n                   qGood Y \\<longrightarrow>\n                   (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        \\<And>Y.\n           qSkel Y = qSkel X \\<Longrightarrow>\n           qGood Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qGood X');\n        qGood X; qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qGoodAbs A'", "thus \"qGoodAbs A'\""], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qGoodAbs A'", "proof(auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A' = qAbs xs x' X';\n     X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n    \\<Longrightarrow> qGood X'", "have \"(X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by(auto simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A' = qAbs xs x' X';\n     X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n    \\<Longrightarrow> qGood X'", "moreover"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A' = qAbs xs x' X';\n     X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n    \\<Longrightarrow> qGood X'", "have \"qGood(X #[[y \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using * qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A' = qAbs xs x' X';\n     X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n    \\<Longrightarrow> qGood X'", "ultimately"], ["proof (chain)\npicking this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  qGood (X #[[y \\<and> x]]_xs)", "have \"qGood(X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y \\<and> x']]_xs)", "using 1 IH"], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  qGood (X #[[y \\<and> x]]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qGood ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qGood X')\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A' = qAbs xs x' X';\n     X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n    \\<Longrightarrow> qGood X'", "thus \"qGood X'\""], ["proof (prove)\nusing this:\n  qGood (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qGood X'", "using * qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X' #[[y \\<and> x']]_xs)\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood X'", "by auto"], ["proof (state)\nthis:\n  qGood X'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qGoodAbs A'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alpha_preserves_qGood1:\n\"\\<lbrakk>X #= X'; qGood X\\<rbrakk> \\<Longrightarrow> qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X #= X'; qGood X\\<rbrakk> \\<Longrightarrow> qGood X'", "using alphaAll_preserves_qGoodAll1"], ["proof (prove)\nusing this:\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>X'. ?X #= X' \\<longrightarrow> qGood X')) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>A'. ?A $= A' \\<longrightarrow> qGoodAbs A'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X #= X'; qGood X\\<rbrakk> \\<Longrightarrow> qGood X'", "by blast"], ["", "corollary alphaAbs_preserves_qGoodAbs1:\n\"\\<lbrakk>A $= A'; qGoodAbs A\\<rbrakk> \\<Longrightarrow> qGoodAbs A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A $= A'; qGoodAbs A\\<rbrakk> \\<Longrightarrow> qGoodAbs A'", "using alphaAll_preserves_qGoodAll1"], ["proof (prove)\nusing this:\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>X'. ?X #= X' \\<longrightarrow> qGood X')) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>A'. ?A $= A' \\<longrightarrow> qGoodAbs A'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A $= A'; qGoodAbs A\\<rbrakk> \\<Longrightarrow> qGoodAbs A'", "by blast"], ["", "lemma alpha_preserves_qGood2:\n\"\\<lbrakk>X #= X'; qGood X'\\<rbrakk> \\<Longrightarrow> qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X #= X'; qGood X'\\<rbrakk> \\<Longrightarrow> qGood X", "using alpha_sym alpha_preserves_qGood1"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n  \\<lbrakk>?X #= ?X'; qGood ?X\\<rbrakk> \\<Longrightarrow> qGood ?X'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X #= X'; qGood X'\\<rbrakk> \\<Longrightarrow> qGood X", "by blast"], ["", "lemma alphaAbs_preserves_qGoodAbs2:\n\"\\<lbrakk>A $= A'; qGoodAbs A'\\<rbrakk> \\<Longrightarrow> qGoodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A $= A'; qGoodAbs A'\\<rbrakk> \\<Longrightarrow> qGoodAbs A", "using alphaAbs_sym alphaAbs_preserves_qGoodAbs1"], ["proof (prove)\nusing this:\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n  \\<lbrakk>?A $= ?A'; qGoodAbs ?A\\<rbrakk> \\<Longrightarrow> qGoodAbs ?A'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A $= A'; qGoodAbs A'\\<rbrakk> \\<Longrightarrow> qGoodAbs A", "by blast"], ["", "lemma alpha_preserves_qGood:\n\"X #= X' \\<Longrightarrow> qGood X = qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #= X' \\<Longrightarrow> qGood X = qGood X'", "using alpha_preserves_qGood1 alpha_preserves_qGood2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?X #= ?X'; qGood ?X\\<rbrakk> \\<Longrightarrow> qGood ?X'\n  \\<lbrakk>?X #= ?X'; qGood ?X'\\<rbrakk> \\<Longrightarrow> qGood ?X\n\ngoal (1 subgoal):\n 1. X #= X' \\<Longrightarrow> qGood X = qGood X'", "by blast"], ["", "lemma alphaAbs_preserves_qGoodAbs:\n\"A $= A' \\<Longrightarrow> qGoodAbs A = qGoodAbs A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $= A' \\<Longrightarrow> qGoodAbs A = qGoodAbs A'", "using alphaAbs_preserves_qGoodAbs1 alphaAbs_preserves_qGoodAbs2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A $= ?A'; qGoodAbs ?A\\<rbrakk> \\<Longrightarrow> qGoodAbs ?A'\n  \\<lbrakk>?A $= ?A'; qGoodAbs ?A'\\<rbrakk> \\<Longrightarrow> qGoodAbs ?A\n\ngoal (1 subgoal):\n 1. A $= A' \\<Longrightarrow> qGoodAbs A = qGoodAbs A'", "by blast"], ["", "lemma alpha_qSwap_preserves_qGood1:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\" and\n        GOOD: \"qGood X\"\nshows \"qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qGood X'", "have \"qGood(X #[[y \\<and> x]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs)", "using GOOD qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGood X'", "hence \"qGood (X' #[[y' \\<and> x']]_zs')\""], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y' \\<and> x']]_zs')", "using ALPHA alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_zs)\n  X #[[y \\<and> x]]_zs #= X' #[[y' \\<and> x']]_zs'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y' \\<and> x']]_zs')", "by auto"], ["proof (state)\nthis:\n  qGood (X' #[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGood X'", "thus \"qGood X'\""], ["proof (prove)\nusing this:\n  qGood (X' #[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGood X'", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X' #[[y' \\<and> x']]_zs')\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood X'", "by auto"], ["proof (state)\nthis:\n  qGood X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_qSwap_preserves_qGood2:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\" and\n        GOOD': \"qGood X'\"\nshows \"qGood X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qGood X", "have \"qGood(X' #[[y' \\<and> x']]_zs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X' #[[y' \\<and> x']]_zs')", "using GOOD' qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X'\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y' \\<and> x']]_zs')", "by auto"], ["proof (state)\nthis:\n  qGood (X' #[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGood X", "hence \"qGood (X #[[y \\<and> x]]_zs)\""], ["proof (prove)\nusing this:\n  qGood (X' #[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs)", "using ALPHA alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X' #[[y' \\<and> x']]_zs')\n  X #[[y \\<and> x]]_zs #= X' #[[y' \\<and> x']]_zs'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGood X", "thus \"qGood X\""], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGood X", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_zs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood X", "by auto"], ["proof (state)\nthis:\n  qGood X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qSwapAbs_preserves_qGoodAbs2:\nassumes ALPHA: \"(A $[[y \\<and> x]]_zs) $= (A' $[[y' \\<and> x']]_zs')\" and\n        GOOD': \"qGoodAbs A'\"\nshows \"qGoodAbs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qGoodAbs A", "have \"qGoodAbs(A' $[[y' \\<and> x']]_zs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (A' $[[y' \\<and> x']]_zs')", "using GOOD' qSwapAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs A'\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) = qGoodAbs ?A\n\ngoal (1 subgoal):\n 1. qGoodAbs (A' $[[y' \\<and> x']]_zs')", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (A' $[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "hence \"qGoodAbs (A $[[y \\<and> x]]_zs)\""], ["proof (prove)\nusing this:\n  qGoodAbs (A' $[[y' \\<and> x']]_zs')\n\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[y \\<and> x]]_zs)", "using ALPHA alphaAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (A' $[[y' \\<and> x']]_zs')\n  A $[[y \\<and> x]]_zs $= A' $[[y' \\<and> x']]_zs'\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[y \\<and> x]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (A $[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "thus \"qGoodAbs A\""], ["proof (prove)\nusing this:\n  qGoodAbs (A $[[y \\<and> x]]_zs)\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "using qSwapAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (A $[[y \\<and> x]]_zs)\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) = qGoodAbs ?A\n\ngoal (1 subgoal):\n 1. qGoodAbs A", "by auto"], ["proof (state)\nthis:\n  qGoodAbs A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_qSwap_preserves_qGood:\nassumes ALPHA: \"(X #[[y \\<and> x]]_zs) #= (X' #[[y' \\<and> x']]_zs')\"\nshows \"qGood X = qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X = qGood X'", "using assms alpha_qSwap_preserves_qGood1\n      alpha_qSwap_preserves_qGood2"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_zs #= X' #[[y' \\<and> x']]_zs'\n  \\<lbrakk>?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs';\n   qGood ?X\\<rbrakk>\n  \\<Longrightarrow> qGood ?X'\n  \\<lbrakk>?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs';\n   qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qGood ?X\n\ngoal (1 subgoal):\n 1. qGood X = qGood X'", "by auto"], ["", "lemma qSwapAll_preserves_alphaAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and z1 z2 zs\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X' zs z1 z2. X #= X' \\<longrightarrow>\n                             (X #[[z1 \\<and> z2]]_zs) #= (X' #[[z1 \\<and> z2]]_zs))) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A' zs z1 z2. A $= A' \\<longrightarrow>\n                                (A $[[z1 \\<and> z2]]_zs) $= (A' $[[z1 \\<and> z2]]_zs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     (\\<forall>X' zs z1 z2.\n         X #= X' \\<longrightarrow>\n         X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs)) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     (\\<forall>A' zs z1 z2.\n         A $= A' \\<longrightarrow>\n         A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))", "proof(induction rule: qGood_qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X' zs z1 z2.\n          qVar xs x #= X' \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' zs z1 z2.\n                 X #= X' \\<longrightarrow>\n                 X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' zs z1 z2.\n                 A $= A' \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' zs z1 z2.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n                            X' #[[z1 \\<and> z2]]_zs\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X' zs z1 z2.\n          qVar xs x #= X' \\<longrightarrow>\n          qVar xs x #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' zs z1 z2.\n                 X #= X' \\<longrightarrow>\n                 X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' zs z1 z2.\n                 A $= A' \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' zs z1 z2.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n                            X' #[[z1 \\<and> z2]]_zs\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X' zs z1 z2.\n       qVar xs x #= X' \\<longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "unfolding qVar_alpha_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X' zs z1 z2.\n       X' = qVar xs x \\<longrightarrow>\n       qVar xs x #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "by simp"], ["proof (state)\nthis:\n  \\<forall>X' zs z1 z2.\n     qVar xs x #= X' \\<longrightarrow>\n     qVar xs x #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' zs z1 z2.\n                 X #= X' \\<longrightarrow>\n                 X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' zs z1 z2.\n                 A $= A' \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' zs z1 z2.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n                            X' #[[z1 \\<and> z2]]_zs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' zs z1 z2.\n                 X #= X' \\<longrightarrow>\n                 X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' zs z1 z2.\n                 A $= A' \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' zs z1 z2.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n                            X' #[[z1 \\<and> z2]]_zs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>X' zs z1 z2.\n           X #= X' \\<longrightarrow>\n           X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>A' zs z1 z2.\n           A $= A' \\<longrightarrow>\n           A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' zs z1 z2.\n                 X #= X' \\<longrightarrow>\n                 X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' zs z1 z2.\n                 A $= A' \\<longrightarrow>\n                 A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' zs z1 z2.\n                            qOp delta inp binp #= X' \\<longrightarrow>\n                            qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n                            X' #[[z1 \\<and> z2]]_zs\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "fix X' zs z1 z2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "assume \"qOp delta inp binp #= X'\""], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "term X'"], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "term binp"], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "then"], ["proof (chain)\npicking this:\n  qOp delta inp binp #= X'", "obtain inp' binp' where X'eq: \"X' = qOp delta inp' binp'\" and\n    1: \"sameDom inp inp' \\<and> sameDom binp binp'\"\n    and 2: \"liftAll2 (\\<lambda> Y Y'. Y #= Y') inp inp' \\<and>\n          liftAll2 (\\<lambda> A A'. A $= A') binp binp'\""], ["proof (prove)\nusing this:\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     sameDom inp inp' \\<and>\n     sameDom binp binp' \\<and>\n     liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. \\<And>X' zs z1 z2.\n       qOp delta inp binp #= X' \\<Longrightarrow>\n       qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "thus \"((qOp delta inp binp) #[[z1 \\<and> z2]]_zs) #= (X' #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "unfolding X'eq"], ["proof (prove)\nusing this:\n  qOp delta inp' binp' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n    qOp delta inp' binp' #[[z1 \\<and> z2]]_zs", "using Op.IH"], ["proof (prove)\nusing this:\n  qOp delta inp' binp' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>X' zs z1 z2.\n           X #= X' \\<longrightarrow>\n           X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>A' zs z1 z2.\n           A $= A' \\<longrightarrow>\n           A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n   binp\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #[[z1 \\<and> z2]]_zs #=\n    qOp delta inp' binp' #[[z1 \\<and> z2]]_zs", "by (auto simp add: fun_eq_iff option.case_eq_if\n       lift_def liftAll_def sameDom_def liftAll2_def)"], ["proof (state)\nthis:\n  qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X' zs z1 z2.\n     qOp delta inp binp #= X' \\<longrightarrow>\n     qOp delta inp binp #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "case (Abs xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs;\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' zs z1 z2.\n              Y #= X' \\<longrightarrow>\n              Y #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' zs z1 z2.\n                            qAbs xs x X $= A' \\<longrightarrow>\n                            qAbs xs x X $[[z1 \\<and> z2]]_zs $=\n                            A' $[[z1 \\<and> z2]]_zs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A' zs z1 z2.\n       qAbs xs x X $= A' \\<longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "fix A' zs z1 z2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "assume \"qAbs xs x X $= A'\""], ["proof (state)\nthis:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= A'", "obtain x' y X' where A': \"A' = qAbs xs x' X'\" and\n    y_not: \"y \\<notin> {x, x'}\" and y_fresh: \"qAFresh xs y X \\<and> qAFresh xs y X'\" and\n    alpha: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= A'\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "hence goodX': \"qGood X'\""], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qGood X'", "using \\<open>qGood X\\<close> alpha_qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  qGood X\n  ?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs' \\<Longrightarrow>\n  qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood X'", "by fastforce"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "(* *)"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "obtain u where u_notin: \"u \\<notin> {x,x',z1,z2,y}\" and\n                   u_freshXX': \"qAFresh xs u X \\<and> qAFresh xs u X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', z1, z2, y};\n         qAFresh xs u X \\<and> qAFresh xs u X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  \\<open>qGood X\\<close> goodX' obtain_qFresh[of \"{x,x',z1,z2,y}\" \"{X,X'}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>finite {x, x', z1, z2, y} \\<or> |{x, x', z1, z2, y}| <o |UNIV|;\n   finite {X, X'} \\<or> |{X, X'}| <o |UNIV|; Ball {X, X'} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x', z1, z2, y} \\<and>\n                       (\\<forall>X\\<in>{X, X'}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', z1, z2, y};\n         qAFresh xs u X \\<and> qAFresh xs u X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x', z1, z2, y}\n  qAFresh xs u X \\<and> qAFresh xs u X'\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "hence u_not: \"u \\<noteq> (x @xs[z1 \\<and> z2]_zs) \\<and> u \\<noteq> (x' @xs[z1 \\<and> z2]_zs)\""], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', z1, z2, y}\n  qAFresh xs u X \\<and> qAFresh xs u X'\n\ngoal (1 subgoal):\n 1. u \\<noteq> x @xs[z1 \\<and> z2]_zs \\<and>\n    u \\<noteq> x' @xs[z1 \\<and> z2]_zs", "unfolding sw_def"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', z1, z2, y}\n  qAFresh xs u X \\<and> qAFresh xs u X'\n\ngoal (1 subgoal):\n 1. u \\<noteq>\n    (if zs = xs then if x = z1 then z2 else if x = z2 then z1 else x\n     else x) \\<and>\n    u \\<noteq>\n    (if zs = xs then if x' = z1 then z2 else if x' = z2 then z1 else x'\n     else x')", "using u_notin"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', z1, z2, y}\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z1, z2, y}\n\ngoal (1 subgoal):\n 1. u \\<noteq>\n    (if zs = xs then if x = z1 then z2 else if x = z2 then z1 else x\n     else x) \\<and>\n    u \\<noteq>\n    (if zs = xs then if x' = z1 then z2 else if x' = z2 then z1 else x'\n     else x')", "by auto"], ["proof (state)\nthis:\n  u \\<noteq> x @xs[z1 \\<and> z2]_zs \\<and>\n  u \\<noteq> x' @xs[z1 \\<and> z2]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "have u_fresh: \"qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and> qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and>\n    qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)", "using u_freshXX' u_notin"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z1, z2, y}\n\ngoal (1 subgoal):\n 1. qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and>\n    qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)", "by(auto simp add: qSwap_preserves_qAFresh_distinct)"], ["proof (state)\nthis:\n  qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and>\n  qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "(*  *)"], ["proof (state)\nthis:\n  qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and>\n  qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "have \"((X #[[z1 \\<and> z2]]_zs) #[[u \\<and> (x @xs[z1 \\<and> z2]_zs)]]_xs) =\n          (((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n    X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs", "using y_fresh u_freshXX' u_notin"], ["proof (prove)\nusing this:\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z1, z2, y}\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n    X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs", "by (simp add: qSwap_3commute)"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "{"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "have 1: \"(X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by(simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "hence \"((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) #= ((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs)\""], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "using alpha Abs.IH"], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "moreover"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "have \"(X, (X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped", "using 1"], ["proof (prove)\nusing this:\n  (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped", "by(auto simp add: qSwapped.Swap)"], ["proof (state)\nthis:\n  (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "ultimately"], ["proof (chain)\npicking this:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped", "have \"(((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) #[[z1 \\<and> z2]]_zs) #=\n                      (((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs) #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs", "using Abs.IH"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  (X, X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs) \\<in> qSwapped\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X' zs z1 z2.\n     ?Y11 #= X' \\<longrightarrow>\n     ?Y11 #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs", "by auto"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "}"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "moreover"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "have \"(((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs) #[[z1 \\<and> z2]]_zs) =\n          ((X' #[[z1 \\<and> z2]]_zs) #[[u \\<and> (x' @xs[z1 \\<and> z2]_zs)]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs =\n    X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs", "using y_fresh u_freshXX' u_notin"], ["proof (prove)\nusing this:\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z1, z2, y}\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs =\n    X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs", "by (auto simp add: qSwap_3commute)"], ["proof (state)\nthis:\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs =\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "ultimately"], ["proof (chain)\npicking this:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs =\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs", "have \"((X #[[z1 \\<and> z2]]_zs) #[[u \\<and> (x @xs[z1 \\<and> z2]_zs)]]_xs) #=\n                     ((X' #[[z1 \\<and> z2]]_zs) #[[u \\<and> (x' @xs[z1 \\<and> z2]_zs)]]_xs)\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs =\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs #[[z1 \\<and> z2]]_zs =\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #=\n    X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #=\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' zs z1 z2.\n       qAbs xs x X $= A' \\<Longrightarrow>\n       qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "thus \"((qAbs xs x X) $[[z1 \\<and> z2]]_zs) $= (A' $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #=\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "unfolding A'"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #=\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[z1 \\<and> z2]]_zs $= qAbs xs x' X' $[[z1 \\<and> z2]]_zs", "using u_not u_fresh"], ["proof (prove)\nusing this:\n  X #[[z1 \\<and> z2]]_zs #[[u \\<and> x @xs[z1 \\<and> z2]_zs]]_xs #=\n  X' #[[z1 \\<and> z2]]_zs #[[u \\<and> x' @xs[z1 \\<and> z2]_zs]]_xs\n  u \\<noteq> x @xs[z1 \\<and> z2]_zs \\<and>\n  u \\<noteq> x' @xs[z1 \\<and> z2]_zs\n  qAFresh xs u (X #[[z1 \\<and> z2]]_zs) \\<and>\n  qAFresh xs u (X' #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $[[z1 \\<and> z2]]_zs $= qAbs xs x' X' $[[z1 \\<and> z2]]_zs", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A' zs z1 z2.\n     qAbs xs x X $= A' \\<longrightarrow>\n     qAbs xs x X $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qSwap_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"X #= X'\"\nshows \"(X #[[z1 \\<and> z2]]_zs) #= (X' #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "using assms alpha_preserves_qGood qSwapAll_preserves_alphaAll"], ["proof (prove)\nusing this:\n  qGood X \\<or> qGood X'\n  X #= X'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>X' zs z1 z2.\n       ?X #= X' \\<longrightarrow>\n       ?X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs)) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>A' zs z1 z2.\n       ?A $= A' \\<longrightarrow>\n       ?A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "by blast"], ["", "corollary qSwapAbs_preserves_alphaAbs:\nassumes \"qGoodAbs A \\<or> qGoodAbs A'\" and \"A $= A'\"\nshows \"(A $[[z1 \\<and> z2]]_zs) $= (A' $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "using assms alphaAbs_preserves_qGoodAbs qSwapAll_preserves_alphaAll"], ["proof (prove)\nusing this:\n  qGoodAbs A \\<or> qGoodAbs A'\n  A $= A'\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>X' zs z1 z2.\n       ?X #= X' \\<longrightarrow>\n       ?X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs)) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>A' zs z1 z2.\n       ?A $= A' \\<longrightarrow>\n       ?A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs))\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "by blast"], ["", "lemma qSwap_twice_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"X #= X'\"\nshows \"((X #[[z1 \\<and> z2]]_zs) #[[u1 \\<and> u2]]_us) #= ((X' #[[z1 \\<and> z2]]_zs) #[[u1 \\<and> u2]]_us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #[[u1 \\<and> u2]]_us #=\n    X' #[[z1 \\<and> z2]]_zs #[[u1 \\<and> u2]]_us", "by (simp add: assms qSwap_preserves_alpha qSwap_preserves_qGood)"], ["", "lemma alphaAll_trans:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\"\nshows\n\"(qGood X \\<longrightarrow> (\\<forall> X' X''. X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X'')) \\<and>\n (qGoodAbs A \\<longrightarrow> (\\<forall> A' A''. A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     (\\<forall>X' X''.\n         X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X'')) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     (\\<forall>A' A''. A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))", "proof(induction rule: qGood_qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X' X''.\n          qVar xs x #= X' \\<and> X' #= X'' \\<longrightarrow>\n          qVar xs x #= X''\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' X''.\n                 X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' A''.\n                 A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            qOp delta inp binp #= X' \\<and>\n                            X' #= X'' \\<longrightarrow>\n                            qOp delta inp binp #= X''\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       \\<forall>X' X''.\n          qVar xs x #= X' \\<and> X' #= X'' \\<longrightarrow>\n          qVar xs x #= X''\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' X''.\n                 X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' A''.\n                 A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            qOp delta inp binp #= X' \\<and>\n                            X' #= X'' \\<longrightarrow>\n                            qOp delta inp binp #= X''\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X' X''.\n       qVar xs x #= X' \\<and> X' #= X'' \\<longrightarrow> qVar xs x #= X''", "by (simp add: qVar_alpha_iff)"], ["proof (state)\nthis:\n  \\<forall>X' X''.\n     qVar xs x #= X' \\<and> X' #= X'' \\<longrightarrow> qVar xs x #= X''\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' X''.\n                 X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' A''.\n                 A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            qOp delta inp binp #= X' \\<and>\n                            X' #= X'' \\<longrightarrow>\n                            qOp delta inp binp #= X''\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' X''.\n                 X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' A''.\n                 A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            qOp delta inp binp #= X' \\<and>\n                            X' #= X'' \\<longrightarrow>\n                            qOp delta inp binp #= X''\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>X' X''.\n           X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>A' A''.\n           A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (\\<forall>X' X''.\n                 X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (\\<forall>A' A''.\n                 A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n         binp\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            qOp delta inp binp #= X' \\<and>\n                            X' #= X'' \\<longrightarrow>\n                            qOp delta inp binp #= X''\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X' X''.\n       qOp delta inp binp #= X' \\<and> X' #= X'' \\<longrightarrow>\n       qOp delta inp binp #= X''", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "fix X' X''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "assume \"qOp delta inp binp #= X'\" and *: \"X' #= X''\""], ["proof (state)\nthis:\n  qOp delta inp binp #= X'\n  X' #= X''\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "then"], ["proof (chain)\npicking this:\n  qOp delta inp binp #= X'\n  X' #= X''", "obtain inp' binp' where\n    1: \"X' = qOp delta inp' binp'\" and\n    2: \"sameDom inp inp' \\<and> sameDom binp binp'\" and\n    3: \"liftAll2 (\\<lambda>Y Y'. Y #= Y') inp inp' \\<and>\n      liftAll2 (\\<lambda>A A'. A $= A') binp binp'\""], ["proof (prove)\nusing this:\n  qOp delta inp binp #= X'\n  X' #= X''\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     sameDom inp inp' \\<and>\n     sameDom binp binp' \\<and>\n     liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n  X' #= X''\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         sameDom inp inp' \\<and> sameDom binp binp';\n         liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  sameDom inp inp' \\<and> sameDom binp binp'\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "obtain inp'' binp'' where\n    11: \"X'' = qOp delta inp'' binp''\" and\n    22: \"sameDom inp' inp'' \\<and> sameDom binp' binp''\" and\n    33: \"liftAll2 (\\<lambda>Y' Y''. Y' #= Y'') inp' inp'' \\<and>\n         liftAll2 (\\<lambda>A' A''. A' $= A'') binp' binp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>inp'' binp''.\n        \\<lbrakk>X'' = qOp delta inp'' binp'';\n         sameDom inp' inp'' \\<and> sameDom binp' binp'';\n         liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  X' #= X''\n\ngoal (1 subgoal):\n 1. (\\<And>inp'' binp''.\n        \\<lbrakk>X'' = qOp delta inp'' binp'';\n         sameDom inp' inp'' \\<and> sameDom binp' binp'';\n         liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding 1"], ["proof (prove)\nusing this:\n  qOp delta inp' binp' #= X''\n\ngoal (1 subgoal):\n 1. (\\<And>inp'' binp''.\n        \\<lbrakk>X'' = qOp delta inp'' binp'';\n         sameDom inp' inp'' \\<and> sameDom binp' binp'';\n         liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff"], ["proof (prove)\nusing this:\n  \\<exists>inp'a binp'a.\n     X'' = qOp delta inp'a binp'a \\<and>\n     sameDom inp' inp'a \\<and>\n     sameDom binp' binp'a \\<and>\n     liftAll2 (#=) inp' inp'a \\<and> liftAll2 ($=) binp' binp'a\n\ngoal (1 subgoal):\n 1. (\\<And>inp'' binp''.\n        \\<lbrakk>X'' = qOp delta inp'' binp'';\n         sameDom inp' inp'' \\<and> sameDom binp' binp'';\n         liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X'' = qOp delta inp'' binp''\n  sameDom inp' inp'' \\<and> sameDom binp' binp''\n  liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "have \"liftAll2 (#=) inp inp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 (#=) inp inp''", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       inp i = Some v1 \\<and> inp'' i = Some v2 \\<longrightarrow> v1 #= v2", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "fix i Y Y''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "assume inp: \"inp i = Some Y\" and inp'': \"inp'' i = Some Y''\""], ["proof (state)\nthis:\n  inp i = Some Y\n  inp'' i = Some Y''\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "then"], ["proof (chain)\npicking this:\n  inp i = Some Y\n  inp'' i = Some Y''", "obtain Y' where inp': \"inp' i = Some Y'\""], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp'' i = Some Y''\n\ngoal (1 subgoal):\n 1. (\\<And>Y'. inp' i = Some Y' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp'' i = Some Y''\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>Y'. inp' i = Some Y' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp'' i = Some Y''\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>Y'. inp' i = Some Y' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  inp' i = Some Y'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "hence \"Y #= Y'\""], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n\ngoal (1 subgoal):\n 1. Y #= Y'", "using inp 3"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  inp i = Some Y\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. Y #= Y'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  inp i = Some Y\n  (\\<forall>i v1 v2.\n      inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow> v1 $= v2)\n\ngoal (1 subgoal):\n 1. Y #= Y'", "by blast"], ["proof (state)\nthis:\n  Y #= Y'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "moreover"], ["proof (state)\nthis:\n  Y #= Y'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "have \"Y' #= Y''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y' #= Y''", "using inp' inp'' 33"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  inp'' i = Some Y''\n  liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\n\ngoal (1 subgoal):\n 1. Y' #= Y''", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  inp'' i = Some Y''\n  (\\<forall>i v1 v2.\n      inp' i = Some v1 \\<and> inp'' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp' i = Some v1 \\<and> binp'' i = Some v2 \\<longrightarrow>\n      v1 $= v2)\n\ngoal (1 subgoal):\n 1. Y' #= Y''", "by blast"], ["proof (state)\nthis:\n  Y' #= Y''\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>inp i = Some v1; inp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 #= v2", "ultimately"], ["proof (chain)\npicking this:\n  Y #= Y'\n  Y' #= Y''", "show \"Y #= Y''\""], ["proof (prove)\nusing this:\n  Y #= Y'\n  Y' #= Y''\n\ngoal (1 subgoal):\n 1. Y #= Y''", "using inp Op.IH"], ["proof (prove)\nusing this:\n  Y #= Y'\n  Y' #= Y''\n  inp i = Some Y\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>X' X''.\n           X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>A' A''.\n           A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n   binp\n\ngoal (1 subgoal):\n 1. Y #= Y''", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  Y #= Y'\n  Y' #= Y''\n  inp i = Some Y\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and>\n     (\\<forall>X' X''. v #= X' \\<and> X' #= X'' \\<longrightarrow> v #= X'')\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and>\n     (\\<forall>A' A''. v $= A' \\<and> A' $= A'' \\<longrightarrow> v $= A'')\n\ngoal (1 subgoal):\n 1. Y #= Y''", "by blast"], ["proof (state)\nthis:\n  Y #= Y''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  liftAll2 (#=) inp inp''\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "moreover"], ["proof (state)\nthis:\n  liftAll2 (#=) inp inp''\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "have \"liftAll2 ($=) binp binp''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftAll2 ($=) binp binp''", "unfolding liftAll2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i v1 v2.\n       binp i = Some v1 \\<and> binp'' i = Some v2 \\<longrightarrow> v1 $= v2", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "fix i A A''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "assume binp: \"binp i = Some A\" and binp'': \"binp'' i = Some A''\""], ["proof (state)\nthis:\n  binp i = Some A\n  binp'' i = Some A''\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "then"], ["proof (chain)\npicking this:\n  binp i = Some A\n  binp'' i = Some A''", "obtain A' where binp': \"binp' i = Some A'\""], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp'' i = Some A''\n\ngoal (1 subgoal):\n 1. (\\<And>A'. binp' i = Some A' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp'' i = Some A''\n  sameDom inp inp' \\<and> sameDom binp binp'\n\ngoal (1 subgoal):\n 1. (\\<And>A'. binp' i = Some A' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sameDom_def"], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp'' i = Some A''\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>A'. binp' i = Some A' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  binp' i = Some A'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "hence \"A $= A'\""], ["proof (prove)\nusing this:\n  binp' i = Some A'\n\ngoal (1 subgoal):\n 1. A $= A'", "using binp 3"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  binp i = Some A\n  liftAll2 (#=) inp inp' \\<and> liftAll2 ($=) binp binp'\n\ngoal (1 subgoal):\n 1. A $= A'", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  binp i = Some A\n  (\\<forall>i v1 v2.\n      inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow> v1 $= v2)\n\ngoal (1 subgoal):\n 1. A $= A'", "by blast"], ["proof (state)\nthis:\n  A $= A'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "moreover"], ["proof (state)\nthis:\n  A $= A'\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "have \"A' $= A''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $= A''", "using binp' binp'' 33"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  binp'' i = Some A''\n  liftAll2 (#=) inp' inp'' \\<and> liftAll2 ($=) binp' binp''\n\ngoal (1 subgoal):\n 1. A' $= A''", "unfolding liftAll2_def"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  binp'' i = Some A''\n  (\\<forall>i v1 v2.\n      inp' i = Some v1 \\<and> inp'' i = Some v2 \\<longrightarrow>\n      v1 #= v2) \\<and>\n  (\\<forall>i v1 v2.\n      binp' i = Some v1 \\<and> binp'' i = Some v2 \\<longrightarrow>\n      v1 $= v2)\n\ngoal (1 subgoal):\n 1. A' $= A''", "by blast"], ["proof (state)\nthis:\n  A' $= A''\n\ngoal (1 subgoal):\n 1. \\<And>i v1 v2.\n       \\<lbrakk>binp i = Some v1; binp'' i = Some v2\\<rbrakk>\n       \\<Longrightarrow> v1 $= v2", "ultimately"], ["proof (chain)\npicking this:\n  A $= A'\n  A' $= A''", "show \"A $= A''\""], ["proof (prove)\nusing this:\n  A $= A'\n  A' $= A''\n\ngoal (1 subgoal):\n 1. A $= A''", "using binp Op.IH"], ["proof (prove)\nusing this:\n  A $= A'\n  A' $= A''\n  binp i = Some A\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (\\<forall>X' X''.\n           X #= X' \\<and> X' #= X'' \\<longrightarrow> X #= X''))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (\\<forall>A' A''.\n           A $= A' \\<and> A' $= A'' \\<longrightarrow> A $= A''))\n   binp\n\ngoal (1 subgoal):\n 1. A $= A''", "unfolding liftAll_def"], ["proof (prove)\nusing this:\n  A $= A'\n  A' $= A''\n  binp i = Some A\n  \\<forall>i v.\n     inp i = Some v \\<longrightarrow>\n     qGood v \\<and>\n     (\\<forall>X' X''. v #= X' \\<and> X' #= X'' \\<longrightarrow> v #= X'')\n  \\<forall>i v.\n     binp i = Some v \\<longrightarrow>\n     qGoodAbs v \\<and>\n     (\\<forall>A' A''. v $= A' \\<and> A' $= A'' \\<longrightarrow> v $= A'')\n\ngoal (1 subgoal):\n 1. A $= A''", "by blast"], ["proof (state)\nthis:\n  A $= A''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  liftAll2 ($=) binp binp''\n\ngoal (1 subgoal):\n 1. \\<And>X' X''.\n       \\<lbrakk>qOp delta inp binp #= X'; X' #= X''\\<rbrakk>\n       \\<Longrightarrow> qOp delta inp binp #= X''", "ultimately"], ["proof (chain)\npicking this:\n  liftAll2 (#=) inp inp''\n  liftAll2 ($=) binp binp''", "show \"qOp delta inp binp #= X''\""], ["proof (prove)\nusing this:\n  liftAll2 (#=) inp inp''\n  liftAll2 ($=) binp binp''\n\ngoal (1 subgoal):\n 1. qOp delta inp binp #= X''", "by (simp add: 11 2 22 sameDom_trans[of inp inp'] sameDom_trans[of binp binp'])"], ["proof (state)\nthis:\n  qOp delta inp binp #= X''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X' X''.\n     qOp delta inp binp #= X' \\<and> X' #= X'' \\<longrightarrow>\n     qOp delta inp binp #= X''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "case (Abs xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X' X''. ?Y11 #= X' \\<and> X' #= X'' \\<longrightarrow> ?Y11 #= X''\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X' X''. ?Y11 #= X' \\<and> X' #= X'' \\<longrightarrow> ?Y11 #= X''\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X'';\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           \\<forall>X' X''.\n              Y #= X' \\<and> X' #= X'' \\<longrightarrow> Y #= X''\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A' A''.\n                            qAbs xs x X $= A' \\<and>\n                            A' $= A'' \\<longrightarrow>\n                            qAbs xs x X $= A''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A' A''.\n       qAbs xs x X $= A' \\<and> A' $= A'' \\<longrightarrow>\n       qAbs xs x X $= A''", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "fix A' A''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "assume \"qAbs xs x X $= A'\" and *: \"A' $= A''\""], ["proof (state)\nthis:\n  qAbs xs x X $= A'\n  A' $= A''\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= A'\n  A' $= A''", "obtain x' y X' where A': \"A' = qAbs xs x' X'\" and y_not: \"y \\<notin> {x, x'}\" and\n    y_fresh: \"qAFresh xs y X \\<and> qAFresh xs y X'\" and\n    alpha: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= A'\n  A' $= A''\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  A' $= A''\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "obtain x'' z X'' where A'': \"A'' = qAbs xs x'' X''\" and z_not: \"z \\<notin> {x', x''}\" and\n    z_fresh: \"qAFresh xs z X' \\<and> qAFresh xs z X''\" and\n    alpha': \"(X' #[[z \\<and> x']]_xs) #= (X'' #[[z \\<and> x'']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x'' X'' z.\n        \\<lbrakk>A'' = qAbs xs x'' X''; z \\<notin> {x', x''};\n         qAFresh xs z X' \\<and> qAFresh xs z X'';\n         X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  A' $= A''\n\ngoal (1 subgoal):\n 1. (\\<And>x'' X'' z.\n        \\<lbrakk>A'' = qAbs xs x'' X''; z \\<notin> {x', x''};\n         qAFresh xs z X' \\<and> qAFresh xs z X'';\n         X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding A' qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x'a y X'a.\n     A'' = qAbs xs x'a X'a \\<and>\n     y \\<notin> {x', x'a} \\<and>\n     qAFresh xs y X' \\<and>\n     qAFresh xs y X'a \\<and>\n     X' #[[y \\<and> x']]_xs #= X'a #[[y \\<and> x'a]]_xs\n\ngoal (1 subgoal):\n 1. (\\<And>x'' X'' z.\n        \\<lbrakk>A'' = qAbs xs x'' X''; z \\<notin> {x', x''};\n         qAFresh xs z X' \\<and> qAFresh xs z X'';\n         X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A'' = qAbs xs x'' X''\n  z \\<notin> {x', x''}\n  qAFresh xs z X' \\<and> qAFresh xs z X''\n  X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have goodX': \"qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X'", "using alpha \\<open>qGood X\\<close> alpha_qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  qGood X\n  ?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs' \\<Longrightarrow>\n  qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood X'", "by fastforce"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "hence goodX'': \"qGood X''\""], ["proof (prove)\nusing this:\n  qGood X'\n\ngoal (1 subgoal):\n 1. qGood X''", "using alpha' alpha_qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X'\n  X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\n  ?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs' \\<Longrightarrow>\n  qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood X''", "by fastforce"], ["proof (state)\nthis:\n  qGood X''\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have good: \"qGood((X #[[y \\<and> x]]_xs)) \\<and> qGood((X' #[[z \\<and> x']]_xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)", "using \\<open>qGood X\\<close> goodX' qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "(* *)"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "obtain u where u_not: \"u \\<notin> {x,x',x'',y,z}\" and\n             u_fresh: \"qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', y, z};\n         qAFresh xs u X \\<and>\n         qAFresh xs u X' \\<and> qAFresh xs u X''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>qGood X\\<close> goodX' goodX''"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  qGood X''\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', y, z};\n         qAFresh xs u X \\<and>\n         qAFresh xs u X' \\<and> qAFresh xs u X''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obtain_qFresh[of \"{x,x',x'',y,z}\" \"{X, X', X''}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  qGood X''\n  \\<lbrakk>finite {x, x', x'', y, z} \\<or> |{x, x', x'', y, z}| <o |UNIV|;\n   finite {X, X', X''} \\<or> |{X, X', X''}| <o |UNIV|;\n   Ball {X, X', X''} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x', x'', y, z} \\<and>\n                       (\\<forall>X\\<in>{X, X', X''}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<notin> {x, x', x'', y, z};\n         qAFresh xs u X \\<and>\n         qAFresh xs u X' \\<and> qAFresh xs u X''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x'', y, z}\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "(*  *)"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x'', y, z}\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "{"], ["proof (state)\nthis:\n  u \\<notin> {x, x', x'', y, z}\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"(X #[[u \\<and> x]]_xs) = ((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs", "using u_fresh y_fresh"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs", "by (auto simp add: qAFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) #= ((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "using good alpha qSwap_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #=\n                    ?X' #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs) = (X' #[[u \\<and> x']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs = X' #[[u \\<and> x']]_xs", "using u_fresh y_fresh"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs = X' #[[u \\<and> x']]_xs", "by (auto simp add: qAFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs = X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "ultimately"], ["proof (chain)\npicking this:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs = X' #[[u \\<and> x']]_xs", "have \"(X #[[u \\<and> x]]_xs) #= (X' #[[u \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs = X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "}"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "{"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"(X' #[[u \\<and> x']]_xs) = ((X' #[[z \\<and> x']]_xs) #[[u \\<and> z]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs", "using u_fresh z_fresh"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n  qAFresh xs z X' \\<and> qAFresh xs z X''\n\ngoal (1 subgoal):\n 1. X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs", "by (auto simp add: qAFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"((X' #[[z \\<and> x']]_xs) #[[u \\<and> z]]_xs) #= ((X'' #[[z \\<and> x'']]_xs) #[[u \\<and> z]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n    X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs", "using good alpha' qSwap_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs) \\<and> qGood (X' #[[z \\<and> x']]_xs)\n  X' #[[z \\<and> x']]_xs #= X'' #[[z \\<and> x'']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #=\n                    ?X' #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n    X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"((X'' #[[z \\<and> x'']]_xs) #[[u \\<and> z]]_xs) = (X'' #[[u \\<and> x'']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs = X'' #[[u \\<and> x'']]_xs", "using u_fresh z_fresh"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n  qAFresh xs z X' \\<and> qAFresh xs z X''\n\ngoal (1 subgoal):\n 1. X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs = X'' #[[u \\<and> x'']]_xs", "by (auto simp add: qAFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs = X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "ultimately"], ["proof (chain)\npicking this:\n  X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs\n  X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs = X'' #[[u \\<and> x'']]_xs", "have \"(X' #[[u \\<and> x']]_xs) #= (X'' #[[u \\<and> x'']]_xs)\""], ["proof (prove)\nusing this:\n  X' #[[u \\<and> x']]_xs = X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs\n  X' #[[z \\<and> x']]_xs #[[u \\<and> z]]_xs #=\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs\n  X'' #[[z \\<and> x'']]_xs #[[u \\<and> z]]_xs = X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs", "by simp"], ["proof (state)\nthis:\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "}"], ["proof (state)\nthis:\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "moreover"], ["proof (state)\nthis:\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "have \"(X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped", "by (simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "ultimately"], ["proof (chain)\npicking this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped", "have \"(X #[[u \\<and> x]]_xs) #= (X'' #[[u \\<and> x'']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs", "using Abs.IH"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  X' #[[u \\<and> x']]_xs #= X'' #[[u \\<and> x'']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  \\<forall>X' X''. ?Y11 #= X' \\<and> X' #= X'' \\<longrightarrow> ?Y11 #= X''\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  \\<forall>X' X''. ?Y11 #= X' \\<and> X' #= X'' \\<longrightarrow> ?Y11 #= X''\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A' A''.\n       \\<lbrakk>qAbs xs x X $= A'; A' $= A''\\<rbrakk>\n       \\<Longrightarrow> qAbs xs x X $= A''", "thus \"qAbs xs x X $= A''\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= A''", "unfolding A''"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x'' X''", "using u_not u_fresh"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X'' #[[u \\<and> x'']]_xs\n  u \\<notin> {x, x', x'', y, z}\n  qAFresh xs u X \\<and> qAFresh xs u X' \\<and> qAFresh xs u X''\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x'' X''", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= A''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>A' A''.\n     qAbs xs x X $= A' \\<and> A' $= A'' \\<longrightarrow> qAbs xs x X $= A''\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alpha_trans:\nassumes \"qGood X \\<or> qGood X' \\<or> qGood X''\" \"X #= X'\"  \"X' #= X''\"\nshows \"X #= X''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #= X''", "by (meson alphaAll_trans alpha_preserves_qGood assms)"], ["", "corollary alphaAbs_trans:\nassumes \"qGoodAbs A \\<or> qGoodAbs A' \\<or> qGoodAbs A''\"\nand \"A $= A'\"  \"A' $= A''\"\nshows \"A $= A''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $= A''", "using assms alphaAbs_preserves_qGoodAbs alphaAll_trans"], ["proof (prove)\nusing this:\n  qGoodAbs A \\<or> qGoodAbs A' \\<or> qGoodAbs A''\n  A $= A'\n  A' $= A''\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n  (qGood ?X \\<longrightarrow>\n   (\\<forall>X' X''.\n       ?X #= X' \\<and> X' #= X'' \\<longrightarrow> ?X #= X'')) \\<and>\n  (qGoodAbs ?A \\<longrightarrow>\n   (\\<forall>A' A''. ?A $= A' \\<and> A' $= A'' \\<longrightarrow> ?A $= A''))\n\ngoal (1 subgoal):\n 1. A $= A''", "by blast"], ["", "lemma alpha_trans_twice:\n\"\\<lbrakk>qGood X \\<or> qGood X' \\<or> qGood X'' \\<or> qGood X''';\n  X #= X'; X' #= X''; X'' #= X'''\\<rbrakk> \\<Longrightarrow> X #= X'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGood X \\<or> qGood X' \\<or> qGood X'' \\<or> qGood X''';\n     X #= X'; X' #= X''; X'' #= X'''\\<rbrakk>\n    \\<Longrightarrow> X #= X'''", "using alpha_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qGood X \\<or> qGood X' \\<or> qGood X'' \\<or> qGood X''';\n     X #= X'; X' #= X''; X'' #= X'''\\<rbrakk>\n    \\<Longrightarrow> X #= X'''", "by blast"], ["", "lemma alphaAbs_trans_twice:\n\"\\<lbrakk>qGoodAbs A \\<or> qGoodAbs A' \\<or> qGoodAbs A'' \\<or> qGoodAbs A''';\n  A $= A'; A' $= A''; A'' $= A'''\\<rbrakk> \\<Longrightarrow> A $= A'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodAbs A \\<or>\n             qGoodAbs A' \\<or> qGoodAbs A'' \\<or> qGoodAbs A''';\n     A $= A'; A' $= A''; A'' $= A'''\\<rbrakk>\n    \\<Longrightarrow> A $= A'''", "using alphaAbs_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodAbs A \\<or>\n             qGoodAbs A' \\<or> qGoodAbs A'' \\<or> qGoodAbs A''';\n     A $= A'; A' $= A''; A'' $= A'''\\<rbrakk>\n    \\<Longrightarrow> A $= A'''", "by blast"], ["", "lemma qAbs_preserves_alpha:\nassumes ALPHA: \"X #= X'\" and GOOD: \"qGood X \\<or> qGood X'\"\nshows \"qAbs xs x X $= qAbs xs x X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "have \"qGood X \\<and> qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X \\<and> qGood X'", "using GOOD ALPHA"], ["proof (prove)\nusing this:\n  qGood X \\<or> qGood X'\n  X #= X'\n\ngoal (1 subgoal):\n 1. qGood X \\<and> qGood X'", "by(auto simp add: alpha_preserves_qGood)"], ["proof (state)\nthis:\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "then"], ["proof (chain)\npicking this:\n  qGood X \\<and> qGood X'", "obtain y where y_not: \"y \\<noteq> x\" and\n                      y_fresh: \"qAFresh xs y X \\<and> qAFresh xs y X'\""], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<noteq> x;\n         qAFresh xs y X \\<and> qAFresh xs y X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD obtain_qFresh[of \"{x}\" \"{X,X'}\"]"], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n  qGood X \\<or> qGood X'\n  \\<lbrakk>finite {x} \\<or> |{x}| <o |UNIV|;\n   finite {X, X'} \\<or> |{X, X'}| <o |UNIV|; Ball {X, X'} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x} \\<and>\n                       (\\<forall>X\\<in>{X, X'}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<noteq> x;\n         qAFresh xs y X \\<and> qAFresh xs y X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> x\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "hence \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x]]_xs", "using ALPHA GOOD"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #= X'\n  qGood X \\<or> qGood X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x]]_xs", "by(simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "using y_not y_fresh"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x]]_xs\n  y \\<noteq> x\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qAbs_preserves_alpha2:\nassumes ALPHA: \"X #= X'\" and GOOD: \"qGoodAbs(qAbs xs x X) \\<or> qGoodAbs (qAbs xs x X')\"\nshows \"qAbs xs x X $= qAbs xs x X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "using assms"], ["proof (prove)\nusing this:\n  X #= X'\n  qGoodAbs (qAbs xs x X) \\<or> qGoodAbs (qAbs xs x X')\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x X'", "by (intro qAbs_preserves_alpha) auto"], ["", "subsubsection \\<open>Picking fresh representatives\\<close>"], ["", "lemma qAbs_alphaAbs_qSwap_qAFresh:\nassumes GOOD: \"qGood X\" and FRESH: \"qAFresh ys x' X\"\nshows \"qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "obtain y where 1: \"y \\<notin> {x,x'}\" and 2: \"qAFresh ys y X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<notin> {x, x'}; qAFresh ys y X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD obtain_qFresh[of \"{x,x'}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  \\<lbrakk>finite {x, x'} \\<or> |{x, x'}| <o |UNIV|;\n   finite {X} \\<or> |{X}| <o |UNIV|; Ball {X} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x'} \\<and>\n                       (\\<forall>X\\<in>{X}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<notin> {x, x'}; qAFresh ys y X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<notin> {x, x'}\n  qAFresh ys y X\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "hence 3: \"qAFresh ys y (X #[[x' \\<and> x]]_ys)\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'}\n  qAFresh ys y X\n\ngoal (1 subgoal):\n 1. qAFresh ys y (X #[[x' \\<and> x]]_ys)", "by (auto simp add: qSwap_preserves_qAFresh_distinct)"], ["proof (state)\nthis:\n  qAFresh ys y (X #[[x' \\<and> x]]_ys)\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "(*  *)"], ["proof (state)\nthis:\n  qAFresh ys y (X #[[x' \\<and> x]]_ys)\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "have \"(X #[[y \\<and> x]]_ys) = ((X #[[x' \\<and> x]]_ys) #[[y \\<and> x']]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys", "using FRESH 2"], ["proof (prove)\nusing this:\n  qAFresh ys x' X\n  qAFresh ys y X\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys", "by (auto simp add: qAFresh_qSwap_compose)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "moreover"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "have \"qGood (X #[[y \\<and> x]]_ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_ys)", "using 1 GOOD qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'}\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_ys)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_ys)\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "ultimately"], ["proof (chain)\npicking this:\n  X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n  qGood (X #[[y \\<and> x]]_ys)", "have \"(X #[[y \\<and> x]]_ys) #= ((X #[[x' \\<and> x]]_ys) #[[y \\<and> x']]_ys)\""], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n  qGood (X #[[y \\<and> x]]_ys)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys", "using alpha_refl"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_ys = X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n  qGood (X #[[y \\<and> x]]_ys)\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys", "by simp"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "(*  *)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "using 1 2 3 assms"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_ys #= X #[[x' \\<and> x]]_ys #[[y \\<and> x']]_ys\n  y \\<notin> {x, x'}\n  qAFresh ys y X\n  qAFresh ys y (X #[[x' \\<and> x]]_ys)\n  qGood X\n  qAFresh ys x' X\n\ngoal (1 subgoal):\n 1. qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)", "by auto"], ["proof (state)\nthis:\n  qAbs ys x X $= qAbs ys x' (X #[[x' \\<and> x]]_ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qAbs_ex_qAFresh_rep:\nassumes GOOD: \"qGood X\" and FRESH: \"qAFresh xs x' X\"\nshows \"\\<exists> X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "have 1: \"qGood (X #[[x' \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using assms qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qAFresh xs x' X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "apply(rule exI[of _ \"X #[[x' \\<and> x]]_xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs) \\<and>\n    qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "using assms 1 qAbs_alphaAbs_qSwap_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAFresh xs x' X\n  qGood (X #[[x' \\<and> x]]_xs)\n  \\<lbrakk>qGood ?X; qAFresh ?ys ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?ys ?x ?X $=\n                    qAbs ?ys ?x' (?X #[[?x' \\<and> ?x]]_?ys)\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs) \\<and>\n    qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>X'. qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Properties of swapping and freshness modulo alpha\\<close>"], ["", "lemma qFreshAll_imp_ex_qAFreshAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs fZs\nassumes FIN: \"finite V\"\nshows\n\"(qGood X \\<longrightarrow>\n  ((\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qFresh zs z X) \\<longrightarrow>\n   (\\<exists> X'. X #= X' \\<and> (\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qAFresh zs z X')))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  ((\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qFreshAbs zs z A) \\<longrightarrow>\n   (\\<exists> A'. A $= A' \\<and> (\\<forall> z \\<in> V. \\<forall> zs \\<in> fZs z. qAFreshAbs zs z A'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     (\\<forall>z\\<in>V.\n         \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n     (\\<exists>X'.\n         X #= X' \\<and>\n         (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     (\\<forall>z\\<in>V.\n         \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n     (\\<exists>A'.\n         A $= A' \\<and>\n         (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')))", "proof(induction rule: qGood_qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       (\\<forall>z\\<in>V.\n           \\<forall>zs\\<in>fZs z. qFresh zs z (qVar xs x)) \\<longrightarrow>\n       (\\<exists>X'.\n           qVar xs x #= X' \\<and>\n           (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n              (\\<exists>X'.\n                  X #= X' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n              (\\<exists>A'.\n                  A $= A' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n         binp\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFresh zs z\n                                 (qOp delta inp binp)) \\<longrightarrow>\n                         (\\<exists>X'.\n                             qOp delta inp binp #= X' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       (\\<forall>z\\<in>V.\n           \\<forall>zs\\<in>fZs z. qFresh zs z (qVar xs x)) \\<longrightarrow>\n       (\\<exists>X'.\n           qVar xs x #= X' \\<and>\n           (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n              (\\<exists>X'.\n                  X #= X' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n              (\\<exists>A'.\n                  A $= A' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n         binp\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFresh zs z\n                                 (qOp delta inp binp)) \\<longrightarrow>\n                         (\\<exists>X'.\n                             qOp delta inp binp #= X' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>z\\<in>V.\n        \\<forall>zs\\<in>fZs z. qFresh zs z (qVar xs x)) \\<longrightarrow>\n    (\\<exists>X'.\n        qVar xs x #= X' \\<and>\n        (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))", "by (metis alpha_qVar_iff qAFreshAll_simps(1) qFreshAll_simps(1))"], ["proof (state)\nthis:\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFresh zs z (qVar xs x)) \\<longrightarrow>\n  (\\<exists>X'.\n      qVar xs x #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n              (\\<exists>X'.\n                  X #= X' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n              (\\<exists>A'.\n                  A $= A' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n         binp\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFresh zs z\n                                 (qOp delta inp binp)) \\<longrightarrow>\n                         (\\<exists>X'.\n                             qOp delta inp binp #= X' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n              (\\<exists>X'.\n                  X #= X' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n              (\\<exists>A'.\n                  A $= A' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n         binp\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFresh zs z\n                                 (qOp delta inp binp)) \\<longrightarrow>\n                         (\\<exists>X'.\n                             qOp delta inp binp #= X' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n        (\\<exists>X'.\n            X #= X' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n        (\\<exists>A'.\n            A $= A' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n              (\\<exists>X'.\n                  X #= X' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             ((\\<forall>z\\<in>V.\n                  \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n              (\\<exists>A'.\n                  A $= A' \\<and>\n                  (\\<forall>z\\<in>V.\n                      \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n         binp\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFresh zs z\n                                 (qOp delta inp binp)) \\<longrightarrow>\n                         (\\<exists>X'.\n                             qOp delta inp binp #= X' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>z\\<in>V.\n        \\<forall>zs\\<in>fZs z.\n           qFresh zs z (qOp delta inp binp)) \\<longrightarrow>\n    (\\<exists>X'.\n        qOp delta inp binp #= X' \\<and>\n        (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "assume *: \"\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z (qOp delta inp binp)\""], ["proof (state)\nthis:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "define phi and phiAbs where  \n    \"phi \\<equiv> (\\<lambda>(Y::('index,'bindex,'varSort,'var,'opSym)qTerm) Y'.\n            Y #= Y' \\<and> (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'))\" and \n    \"phiAbs \\<equiv> (\\<lambda>(A::('index,'bindex,'varSort,'var,'opSym)qAbs) A'.\n               A $= A' \\<and> (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))\""], ["proof (state)\nthis:\n  phi \\<equiv>\n  \\<lambda>Y Y'.\n     Y #= Y' \\<and>\n     (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y')\n  phiAbs \\<equiv>\n  \\<lambda>A A'.\n     A $= A' \\<and>\n     (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "have ex_phi: \"\\<And> i Y. inp i = Some Y \\<Longrightarrow> \\<exists>Y'. phi Y Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i Y. inp i = Some Y \\<Longrightarrow> \\<exists>Y'. phi Y Y'", "unfolding phi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i Y.\n       inp i = Some Y \\<Longrightarrow>\n       \\<exists>Y'.\n          Y #= Y' \\<and>\n          (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y')", "using Op.IH *"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n        (\\<exists>X'.\n            X #= X' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n        (\\<exists>A'.\n            A $= A' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n   binp\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. \\<And>i Y.\n       inp i = Some Y \\<Longrightarrow>\n       \\<exists>Y'.\n          Y #= Y' \\<and>\n          (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y')", "by (auto simp add: liftAll_def)"], ["proof (state)\nthis:\n  inp ?i11 = Some ?Y11 \\<Longrightarrow> \\<exists>Y'. phi ?Y11 Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "have ex_phiAbs: \"\\<And> i A. binp i = Some A \\<Longrightarrow> \\<exists>A'. phiAbs A A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i A. binp i = Some A \\<Longrightarrow> \\<exists>A'. phiAbs A A'", "unfolding phiAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i A.\n       binp i = Some A \\<Longrightarrow>\n       \\<exists>A'.\n          A $= A' \\<and>\n          (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "using Op.IH *"], ["proof (prove)\nusing this:\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFresh zs z X) \\<longrightarrow>\n        (\\<exists>X'.\n            X #= X' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       ((\\<forall>z\\<in>V.\n            \\<forall>zs\\<in>fZs z. qFreshAbs zs z A) \\<longrightarrow>\n        (\\<exists>A'.\n            A $= A' \\<and>\n            (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))))\n   binp\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       binp i = Some A \\<Longrightarrow>\n       \\<exists>A'.\n          A $= A' \\<and>\n          (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "by (auto simp add: liftAll_def)"], ["proof (state)\nthis:\n  binp ?i11 = Some ?A11 \\<Longrightarrow> \\<exists>A'. phiAbs ?A11 A'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "define inp' and binp' where  \n    \"inp' \\<equiv> \\<lambda> i. case inp i of Some Y \\<Rightarrow> Some (SOME Y'. phi Y Y') |None \\<Rightarrow> None\" and  \n    \"binp' \\<equiv> \\<lambda> i. case binp i of Some A \\<Rightarrow> Some (SOME A'. phiAbs A A') |None \\<Rightarrow> None\""], ["proof (state)\nthis:\n  inp' \\<equiv>\n  \\<lambda>i.\n     case inp i of None \\<Rightarrow> None\n     | Some Y \\<Rightarrow> Some (SOME Y'. phi Y Y')\n  binp' \\<equiv>\n  \\<lambda>i.\n     case binp i of None \\<Rightarrow> None\n     | Some A \\<Rightarrow> Some (SOME A'. phiAbs A A')\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z.\n          qFresh zs z (qOp delta inp binp) \\<Longrightarrow>\n    \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "show \"\\<exists>X'. qOp delta inp binp #= X' \\<and> (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       qOp delta inp binp #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "by (intro exI[of _ \"qOp delta inp' binp'\"])  \n    (auto simp add: inp'_def binp'_def option.case_eq_if sameDom_def liftAll_def liftAll2_def,\n    (meson ex_phi phi_def ex_phiAbs phiAbs_def some_eq_ex)+)"], ["proof (state)\nthis:\n  \\<exists>X'.\n     qOp delta inp binp #= X' \\<and>\n     (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z.\n         qFresh zs z (qOp delta inp binp)) \\<longrightarrow>\n  (\\<exists>X'.\n      qOp delta inp binp #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "case (Abs xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFresh zs z ?Y11) \\<longrightarrow>\n  (\\<exists>X'.\n      ?Y11 #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFresh zs z ?Y11) \\<longrightarrow>\n  (\\<exists>X'.\n      ?Y11 #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'));\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           (\\<forall>z\\<in>V.\n               \\<forall>zs\\<in>fZs z. qFresh zs z Y) \\<longrightarrow>\n           (\\<exists>X'.\n               Y #= X' \\<and>\n               (\\<forall>z\\<in>V.\n                   \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>z\\<in>V.\n                             \\<forall>zs\\<in>fZs z.\n                                qFreshAbs zs z\n                                 (qAbs xs x X)) \\<longrightarrow>\n                         (\\<exists>A'.\n                             qAbs xs x X $= A' \\<and>\n                             (\\<forall>z\\<in>V.\n                                 \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>z\\<in>V.\n        \\<forall>zs\\<in>fZs z.\n           qFreshAbs zs z (qAbs xs x X)) \\<longrightarrow>\n    (\\<exists>A'.\n        qAbs xs x X $= A' \\<and>\n        (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "assume *: \"\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X)\""], ["proof (state)\nthis:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "obtain y where y_not_x: \"y \\<noteq> x\" and y_not_V: \"y \\<notin> V\"\n    and y_afresh: \"qAFresh xs y X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<noteq> x; y \\<notin> V; qAFresh xs y X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using FIN \\<open>qGood X\\<close> obtain_qFresh[of \"V \\<union> {x}\" \"{X}\"]"], ["proof (prove)\nusing this:\n  finite V\n  qGood X\n  \\<lbrakk>finite (V \\<union> {x}) \\<or> |V \\<union> {x}| <o |UNIV|;\n   finite {X} \\<or> |{X}| <o |UNIV|; Ball {X} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> V \\<union> {x} \\<and>\n                       (\\<forall>X\\<in>{X}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<noteq> x; y \\<notin> V; qAFresh xs y X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> x\n  y \\<notin> V\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "hence y_fresh: \"qFresh xs y X\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  y \\<notin> V\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "using qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  y \\<notin> V\n  qAFresh xs y X\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "by fastforce"], ["proof (state)\nthis:\n  qFresh xs y X\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "obtain Y where Y_def: \"Y = (X #[[y \\<and> x ]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        Y = X #[[y \\<and> x]]_xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y = X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have alphaXY: \"qAbs xs x X $= qAbs xs y Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs y Y", "using \\<open>qGood X\\<close> y_afresh qAbs_alphaAbs_qSwap_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAFresh xs y X\n  \\<lbrakk>qGood ?X; qAFresh ?ys ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?ys ?x ?X $=\n                    qAbs ?ys ?x' (?X #[[?x' \\<and> ?x]]_?ys)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs y Y", "unfolding Y_def"], ["proof (prove)\nusing this:\n  qGood X\n  qAFresh xs y X\n  \\<lbrakk>qGood ?X; qAFresh ?ys ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?ys ?x ?X $=\n                    qAbs ?ys ?x' (?X #[[?x' \\<and> ?x]]_?ys)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs y (X #[[y \\<and> x]]_xs)", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs y Y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have \"\\<forall>z\\<in>V. \\<forall>zs \\<in> fZs z. qFresh zs z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFresh zs z (X #[[y \\<and> x]]_xs)", "by (metis * not_equals_and_not_equals_not_in qAFresh_imp_qFresh qAFresh_qSwap_exchange1 \n        qFreshAbs.simps qSwap_preserves_qFresh_distinct y_afresh y_not_V)"], ["proof (state)\nthis:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "moreover"], ["proof (state)\nthis:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have \"(X,Y) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, Y) \\<in> qSwapped", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[y \\<and> x]]_xs) \\<in> qSwapped", "by(simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, Y) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y\n  (X, Y) \\<in> qSwapped", "obtain Y' where \"Y #= Y'\" and **: \"\\<forall>z\\<in>V. \\<forall>zs \\<in> fZs z. qAFresh zs z Y'\""], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y\n  (X, Y) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>Y #= Y';\n         \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Abs.IH"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qFresh zs z Y\n  (X, Y) \\<in> qSwapped\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFresh zs z ?Y11) \\<longrightarrow>\n  (\\<exists>X'.\n      ?Y11 #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFresh zs z ?Y11) \\<longrightarrow>\n  (\\<exists>X'.\n      ?Y11 #= X' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X'))\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>Y #= Y';\n         \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y #= Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "moreover"], ["proof (state)\nthis:\n  Y #= Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have \"qGood Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood Y", "unfolding Y_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using  \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "ultimately"], ["proof (chain)\npicking this:\n  Y #= Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n  qGood Y", "have \"qAbs xs y Y $= qAbs xs y Y'\""], ["proof (prove)\nusing this:\n  Y #= Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n  qGood Y\n\ngoal (1 subgoal):\n 1. qAbs xs y Y $= qAbs xs y Y'", "using qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  Y #= Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n  qGood Y\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs y Y $= qAbs xs y Y'", "by blast"], ["proof (state)\nthis:\n  qAbs xs y Y $= qAbs xs y Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "moreover"], ["proof (state)\nthis:\n  qAbs xs y Y $= qAbs xs y Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have \"qGoodAbs(qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "using  \\<open>qGood X\\<close>"], ["proof (prove)\nusing this:\n  qGood X\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs y Y $= qAbs xs y Y'\n  qGoodAbs (qAbs xs x X)", "have \"qAbs xs x X $= qAbs xs y Y'\""], ["proof (prove)\nusing this:\n  qAbs xs y Y $= qAbs xs y Y'\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs y Y'", "using alphaXY alphaAbs_trans"], ["proof (prove)\nusing this:\n  qAbs xs y Y $= qAbs xs y Y'\n  qGoodAbs (qAbs xs x X)\n  qAbs xs x X $= qAbs xs y Y\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs y Y'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs y Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs y Y'\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "have \"\\<forall>z\\<in>V. \\<forall>zs \\<in> fZs z. qAFreshAbs zs z (qAbs xs y Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z (qAbs xs y Y')", "using ** y_not_V"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z Y'\n  y \\<notin> V\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z (qAbs xs y Y')", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z (qAbs xs y Y')\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>V.\n       \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X) \\<Longrightarrow>\n    \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs y Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z (qAbs xs y Y')", "show \"\\<exists>A'. qAbs xs x X $= A' \\<and> (\\<forall>z\\<in>V. \\<forall>zs \\<in> fZs z. qAFreshAbs zs z A')\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs y Y'\n  \\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z (qAbs xs y Y')\n\ngoal (1 subgoal):\n 1. \\<exists>A'.\n       qAbs xs x X $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "by blast"], ["proof (state)\nthis:\n  \\<exists>A'.\n     qAbs xs x X $= A' \\<and>\n     (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>z\\<in>V.\n      \\<forall>zs\\<in>fZs z. qFreshAbs zs z (qAbs xs x X)) \\<longrightarrow>\n  (\\<exists>A'.\n      qAbs xs x X $= A' \\<and>\n      (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A'))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qFresh_imp_ex_qAFresh:\nassumes \"finite V\" and \"qGood X\" and \"\\<forall> z \\<in> V. \\<forall>zs \\<in> fZs z. qFresh zs z X\"\nshows \"\\<exists> X'. qGood X' \\<and> X #= X' \\<and> (\\<forall> z \\<in> V. \\<forall>zs \\<in> fZs z. qAFresh zs z X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       qGood X' \\<and>\n       X #= X' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFresh zs z X')", "by (metis alphaAll_preserves_qGoodAll1 assms qFreshAll_imp_ex_qAFreshAll)"], ["", "corollary qFreshAbs_imp_ex_qAFreshAbs:\nassumes \"finite V\" and \"qGoodAbs A\" and \"\\<forall> z \\<in> V. \\<forall>zs \\<in> fZs z. qFreshAbs zs z A\"\nshows \"\\<exists> A'. qGoodAbs A' \\<and> A $= A' \\<and> (\\<forall> z \\<in> V. \\<forall>zs \\<in> fZs z. qAFreshAbs zs z A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'.\n       qGoodAbs A' \\<and>\n       A $= A' \\<and>\n       (\\<forall>z\\<in>V. \\<forall>zs\\<in>fZs z. qAFreshAbs zs z A')", "by (metis alphaAll_preserves_qGoodAll1 assms qFreshAll_imp_ex_qAFreshAll)"], ["", "lemma qFresh_imp_ex_qAFresh1:\nassumes \"qGood X\" and \"qFresh zs z X\"\nshows \"\\<exists> X'. qGood X' \\<and> X #= X' \\<and> qAFresh zs z X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> X #= X' \\<and> qAFresh zs z X'", "using assms qFresh_imp_ex_qAFresh[of \"{z}\" _ \"undefined(z := {zs})\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh zs z X\n  \\<lbrakk>finite {z}; qGood ?X;\n   \\<forall>za\\<in>{z}.\n      \\<forall>zs\\<in>(undefined(z := {zs})) za. qFresh zs za ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and>\n                       ?X #= X' \\<and>\n                       (\\<forall>za\\<in>{z}.\n                           \\<forall>zs\\<in>(undefined(z := {zs})) za.\n                              qAFresh zs za X')\n\ngoal (1 subgoal):\n 1. \\<exists>X'. qGood X' \\<and> X #= X' \\<and> qAFresh zs z X'", "by fastforce"], ["", "lemma qFreshAbs_imp_ex_qAFreshAbs1:\nassumes \"finite V\" and \"qGoodAbs A\" and \"qFreshAbs zs z A\"\nshows \"\\<exists> A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs zs z A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs zs z A'", "using assms qFreshAbs_imp_ex_qAFreshAbs[of \"{z}\" _ \"undefined(z := {zs})\"]"], ["proof (prove)\nusing this:\n  finite V\n  qGoodAbs A\n  qFreshAbs zs z A\n  \\<lbrakk>finite {z}; qGoodAbs ?A;\n   \\<forall>za\\<in>{z}.\n      \\<forall>zs\\<in>(undefined(z := {zs})) za. qFreshAbs zs za ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A'.\n                       qGoodAbs A' \\<and>\n                       ?A $= A' \\<and>\n                       (\\<forall>za\\<in>{z}.\n                           \\<forall>zs\\<in>(undefined(z := {zs})) za.\n                              qAFreshAbs zs za A')\n\ngoal (1 subgoal):\n 1. \\<exists>A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs zs z A'", "by fastforce"], ["", "lemma qFresh_imp_ex_qAFresh2:\nassumes \"qGood X\" and \"qFresh xs x X\" and \"qFresh ys y X\"\nshows \"\\<exists> X'. qGood X' \\<and> X #= X' \\<and> qAFresh xs x X' \\<and> qAFresh ys y X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       qGood X' \\<and> X #= X' \\<and> qAFresh xs x X' \\<and> qAFresh ys y X'", "using assms\nqFresh_imp_ex_qAFresh[of \"{x}\" _ \"undefined(x := {xs,ys})\"] \nqFresh_imp_ex_qAFresh[of \"{x,y}\" _ \"(undefined(x := {xs}))(y := {ys})\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs x X\n  qFresh ys y X\n  \\<lbrakk>finite {x}; qGood ?X;\n   \\<forall>z\\<in>{x}.\n      \\<forall>zs\\<in>(undefined(x := {xs, ys})) z. qFresh zs z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and>\n                       ?X #= X' \\<and>\n                       (\\<forall>z\\<in>{x}.\n                           \\<forall>zs\\<in>(undefined(x := {xs, ys})) z.\n                              qAFresh zs z X')\n  \\<lbrakk>finite {x, y}; qGood ?X;\n   \\<forall>z\\<in>{x, y}.\n      \\<forall>zs\\<in>(undefined(x := {xs}, y := {ys})) z.\n         qFresh zs z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and>\n                       ?X #= X' \\<and>\n                       (\\<forall>z\\<in>{x, y}.\n                           \\<forall>zs\\<in>(undefined(x := {xs}, y := {ys}))\n      z.\n                              qAFresh zs z X')\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       qGood X' \\<and> X #= X' \\<and> qAFresh xs x X' \\<and> qAFresh ys y X'", "by (cases \"x = y\") auto"], ["", "lemma qFreshAbs_imp_ex_qAFreshAbs2:\nassumes \"finite V\" and \"qGoodAbs A\" and \"qFreshAbs xs x A\" and \"qFreshAbs ys y A\"\nshows \"\\<exists> A'. qGoodAbs A' \\<and> A $= A' \\<and> qAFreshAbs xs x A' \\<and> qAFreshAbs ys y A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'.\n       qGoodAbs A' \\<and>\n       A $= A' \\<and> qAFreshAbs xs x A' \\<and> qAFreshAbs ys y A'", "using assms\nqFreshAbs_imp_ex_qAFreshAbs[of \"{x}\" _ \"undefined(x := {xs,ys})\"] \nqFreshAbs_imp_ex_qAFreshAbs[of \"{x,y}\" _ \"(undefined(x := {xs}))(y := {ys})\"]"], ["proof (prove)\nusing this:\n  finite V\n  qGoodAbs A\n  qFreshAbs xs x A\n  qFreshAbs ys y A\n  \\<lbrakk>finite {x}; qGoodAbs ?A;\n   \\<forall>z\\<in>{x}.\n      \\<forall>zs\\<in>(undefined(x := {xs, ys})) z.\n         qFreshAbs zs z ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A'.\n                       qGoodAbs A' \\<and>\n                       ?A $= A' \\<and>\n                       (\\<forall>z\\<in>{x}.\n                           \\<forall>zs\\<in>(undefined(x := {xs, ys})) z.\n                              qAFreshAbs zs z A')\n  \\<lbrakk>finite {x, y}; qGoodAbs ?A;\n   \\<forall>z\\<in>{x, y}.\n      \\<forall>zs\\<in>(undefined(x := {xs}, y := {ys})) z.\n         qFreshAbs zs z ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A'.\n                       qGoodAbs A' \\<and>\n                       ?A $= A' \\<and>\n                       (\\<forall>z\\<in>{x, y}.\n                           \\<forall>zs\\<in>(undefined(x := {xs}, y := {ys}))\n      z.\n                              qAFreshAbs zs z A')\n\ngoal (1 subgoal):\n 1. \\<exists>A'.\n       qGoodAbs A' \\<and>\n       A $= A' \\<and> qAFreshAbs xs x A' \\<and> qAFreshAbs ys y A'", "by (cases \"x = y\") auto"], ["", "lemma qAFreshAll_qFreshAll_preserves_alphaAll:\nfixes X::\"('index,'bindex,'varSort,'var,'opSym)qTerm\" and\n      A::\"('index,'bindex,'varSort,'var,'opSym)qAbs\" and zs z\nshows\n\"(qGood X \\<longrightarrow>\n  (qAFresh zs z X \\<longrightarrow> (\\<forall> X'. X #= X' \\<longrightarrow> qFresh zs z X'))) \\<and>\n (qGoodAbs A \\<longrightarrow>\n  (qAFreshAbs zs z A \\<longrightarrow> (\\<forall> A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qGood X \\<longrightarrow>\n     qAFresh zs z X \\<longrightarrow>\n     (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')) \\<and>\n    (qGoodAbs A \\<longrightarrow>\n     qAFreshAbs zs z A \\<longrightarrow>\n     (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A'))", "proof(induction rule: qGood_qTerm_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       qAFresh zs z (qVar xs x) \\<longrightarrow>\n       (\\<forall>X'. qVar xs x #= X' \\<longrightarrow> qFresh zs z X')\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (qAFresh zs z X \\<longrightarrow>\n              (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (qAFreshAbs zs z A \\<longrightarrow>\n              (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         (\\<forall>X'.\n                             qOp delta inp binp #= X' \\<longrightarrow>\n                             qFresh zs z X')\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "case (Var xs x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xs x.\n       qAFresh zs z (qVar xs x) \\<longrightarrow>\n       (\\<forall>X'. qVar xs x #= X' \\<longrightarrow> qFresh zs z X')\n 2. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (qAFresh zs z X \\<longrightarrow>\n              (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (qAFreshAbs zs z A \\<longrightarrow>\n              (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         (\\<forall>X'.\n                             qOp delta inp binp #= X' \\<longrightarrow>\n                             qFresh zs z X')\n 3. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFresh zs z (qVar xs x) \\<longrightarrow>\n    (\\<forall>X'. qVar xs x #= X' \\<longrightarrow> qFresh zs z X')", "unfolding qVar_alpha_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFresh zs z (qVar xs x) \\<longrightarrow>\n    (\\<forall>X'. X' = qVar xs x \\<longrightarrow> qFresh zs z X')", "by simp"], ["proof (state)\nthis:\n  qAFresh zs z (qVar xs x) \\<longrightarrow>\n  (\\<forall>X'. qVar xs x #= X' \\<longrightarrow> qFresh zs z X')\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (qAFresh zs z X \\<longrightarrow>\n              (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (qAFreshAbs zs z A \\<longrightarrow>\n              (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         (\\<forall>X'.\n                             qOp delta inp binp #= X' \\<longrightarrow>\n                             qFresh zs z X')\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (qAFresh zs z X \\<longrightarrow>\n              (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (qAFreshAbs zs z A \\<longrightarrow>\n              (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         (\\<forall>X'.\n                             qOp delta inp binp #= X' \\<longrightarrow>\n                             qFresh zs z X')\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "case (Op delta inp binp)"], ["proof (state)\nthis:\n  |{i. inp i \\<noteq> None}| <o |UNIV|\n  |{i. binp i \\<noteq> None}| <o |UNIV|\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (qAFresh zs z X \\<longrightarrow>\n        (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (qAFreshAbs zs z A \\<longrightarrow>\n        (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n   binp\n\ngoal (2 subgoals):\n 1. \\<And>delta inp binp.\n       \\<lbrakk>|{i. inp i \\<noteq> None}| <o |UNIV|;\n        |{i. binp i \\<noteq> None}| <o |UNIV|;\n        liftAll\n         (\\<lambda>X.\n             qGood X \\<and>\n             (qAFresh zs z X \\<longrightarrow>\n              (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n         inp;\n        liftAll\n         (\\<lambda>A.\n             qGoodAbs A \\<and>\n             (qAFreshAbs zs z A \\<longrightarrow>\n              (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n         binp\\<rbrakk>\n       \\<Longrightarrow> qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n                         (\\<forall>X'.\n                             qOp delta inp binp #= X' \\<longrightarrow>\n                             qFresh zs z X')\n 2. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n    (\\<forall>X'. qOp delta inp binp #= X' \\<longrightarrow> qFresh zs z X')", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "fix X'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "assume afresh: \"qAFresh zs z (qOp delta inp binp)\" \n    and \"qOp delta inp binp #= X'\""], ["proof (state)\nthis:\n  qAFresh zs z (qOp delta inp binp)\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "then"], ["proof (chain)\npicking this:\n  qAFresh zs z (qOp delta inp binp)\n  qOp delta inp binp #= X'", "obtain inp' and binp' where X'eq: \"X' = qOp delta inp' binp'\" and\n    *: \"(\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n      (\\<forall>i. (binp i = None) = (binp' i = None))\" and\n    **: \"(\\<forall>i Y Y'. inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow> Y #= Y') \\<and>\n       (\\<forall>i A A'. binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\""], ["proof (prove)\nusing this:\n  qAFresh zs z (qOp delta inp binp)\n  qOp delta inp binp #= X'\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n         (\\<forall>i. (binp i = None) = (binp' i = None));\n         (\\<forall>i Y Y'.\n             inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n             Y #= Y') \\<and>\n         (\\<forall>i A A'.\n             binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow>\n             A $= A')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qOp_alpha_iff sameDom_def liftAll2_def"], ["proof (prove)\nusing this:\n  qAFresh zs z (qOp delta inp binp)\n  \\<exists>inp' binp'.\n     X' = qOp delta inp' binp' \\<and>\n     (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n     (\\<forall>i. (binp i = None) = (binp' i = None)) \\<and>\n     (\\<forall>i v1 v2.\n         inp i = Some v1 \\<and> inp' i = Some v2 \\<longrightarrow>\n         v1 #= v2) \\<and>\n     (\\<forall>i v1 v2.\n         binp i = Some v1 \\<and> binp' i = Some v2 \\<longrightarrow>\n         v1 $= v2)\n\ngoal (1 subgoal):\n 1. (\\<And>inp' binp'.\n        \\<lbrakk>X' = qOp delta inp' binp';\n         (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n         (\\<forall>i. (binp i = None) = (binp' i = None));\n         (\\<forall>i Y Y'.\n             inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n             Y #= Y') \\<and>\n         (\\<forall>i A A'.\n             binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow>\n             A $= A')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n  (\\<forall>i Y Y'.\n      inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n      Y #= Y') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "{"], ["proof (state)\nthis:\n  X' = qOp delta inp' binp'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n  (\\<forall>i Y Y'.\n      inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n      Y #= Y') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "fix i Y'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "assume inp': \"inp' i = Some Y'\""], ["proof (state)\nthis:\n  inp' i = Some Y'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "then"], ["proof (chain)\npicking this:\n  inp' i = Some Y'", "obtain Y where inp: \"inp i = Some Y\""], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n\ngoal (1 subgoal):\n 1. (\\<And>Y. inp i = Some Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  inp' i = Some Y'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>Y. inp i = Some Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "hence \"Y #= Y'\""], ["proof (prove)\nusing this:\n  inp i = Some Y\n\ngoal (1 subgoal):\n 1. Y #= Y'", "using inp' **"], ["proof (prove)\nusing this:\n  inp i = Some Y\n  inp' i = Some Y'\n  (\\<forall>i Y Y'.\n      inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n      Y #= Y') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. Y #= Y'", "by blast"], ["proof (state)\nthis:\n  Y #= Y'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "hence \"qFresh zs z Y'\""], ["proof (prove)\nusing this:\n  Y #= Y'\n\ngoal (1 subgoal):\n 1. qFresh zs z Y'", "using inp Op.IH afresh"], ["proof (prove)\nusing this:\n  Y #= Y'\n  inp i = Some Y\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (qAFresh zs z X \\<longrightarrow>\n        (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (qAFreshAbs zs z A \\<longrightarrow>\n        (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n   binp\n  qAFresh zs z (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. qFresh zs z Y'", "by (auto simp: liftAll_def)"], ["proof (state)\nthis:\n  qFresh zs z Y'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "}"], ["proof (state)\nthis:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "moreover"], ["proof (state)\nthis:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "{"], ["proof (state)\nthis:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "fix i A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "assume binp': \"binp' i = Some A'\""], ["proof (state)\nthis:\n  binp' i = Some A'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "then"], ["proof (chain)\npicking this:\n  binp' i = Some A'", "obtain A where binp: \"binp i = Some A\""], ["proof (prove)\nusing this:\n  binp' i = Some A'\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  binp' i = Some A'\n  (\\<forall>i. (inp i = None) = (inp' i = None)) \\<and>\n  (\\<forall>i. (binp i = None) = (binp' i = None))\n\ngoal (1 subgoal):\n 1. (\\<And>A. binp i = Some A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "hence \"A $= A'\""], ["proof (prove)\nusing this:\n  binp i = Some A\n\ngoal (1 subgoal):\n 1. A $= A'", "using binp' **"], ["proof (prove)\nusing this:\n  binp i = Some A\n  binp' i = Some A'\n  (\\<forall>i Y Y'.\n      inp i = Some Y \\<and> inp' i = Some Y' \\<longrightarrow>\n      Y #= Y') \\<and>\n  (\\<forall>i A A'.\n      binp i = Some A \\<and> binp' i = Some A' \\<longrightarrow> A $= A')\n\ngoal (1 subgoal):\n 1. A $= A'", "by blast"], ["proof (state)\nthis:\n  A $= A'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "hence \"qFreshAbs zs z A'\""], ["proof (prove)\nusing this:\n  A $= A'\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z A'", "using binp Op.IH afresh"], ["proof (prove)\nusing this:\n  A $= A'\n  binp i = Some A\n  liftAll\n   (\\<lambda>X.\n       qGood X \\<and>\n       (qAFresh zs z X \\<longrightarrow>\n        (\\<forall>X'. X #= X' \\<longrightarrow> qFresh zs z X')))\n   inp\n  liftAll\n   (\\<lambda>A.\n       qGoodAbs A \\<and>\n       (qAFreshAbs zs z A \\<longrightarrow>\n        (\\<forall>A'. A $= A' \\<longrightarrow> qFreshAbs zs z A')))\n   binp\n  qAFresh zs z (qOp delta inp binp)\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z A'", "by (auto simp: liftAll_def)"], ["proof (state)\nthis:\n  qFreshAbs zs z A'\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "}"], ["proof (state)\nthis:\n  binp' ?i13 = Some ?A'13 \\<Longrightarrow> qFreshAbs zs z ?A'13\n\ngoal (1 subgoal):\n 1. \\<And>X'.\n       \\<lbrakk>qAFresh zs z (qOp delta inp binp);\n        qOp delta inp binp #= X'\\<rbrakk>\n       \\<Longrightarrow> qFresh zs z X'", "ultimately"], ["proof (chain)\npicking this:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n  binp' ?i13 = Some ?A'13 \\<Longrightarrow> qFreshAbs zs z ?A'13", "show \"qFresh zs z X'\""], ["proof (prove)\nusing this:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n  binp' ?i13 = Some ?A'13 \\<Longrightarrow> qFreshAbs zs z ?A'13\n\ngoal (1 subgoal):\n 1. qFresh zs z X'", "unfolding X'eq"], ["proof (prove)\nusing this:\n  inp' ?i13 = Some ?Y'13 \\<Longrightarrow> qFresh zs z ?Y'13\n  binp' ?i13 = Some ?A'13 \\<Longrightarrow> qFreshAbs zs z ?A'13\n\ngoal (1 subgoal):\n 1. qFresh zs z (qOp delta inp' binp')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i Y'. inp' i = Some Y' \\<Longrightarrow> qFresh zs z Y';\n     \\<And>i A'.\n        binp' i = Some A' \\<Longrightarrow> qFreshAbs zs z A'\\<rbrakk>\n    \\<Longrightarrow> liftAll (qFresh zs z) inp' \\<and>\n                      liftAll (qFreshAbs zs z) binp'", "unfolding liftAll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i Y'. inp' i = Some Y' \\<Longrightarrow> qFresh zs z Y';\n     \\<And>i A'.\n        binp' i = Some A' \\<Longrightarrow> qFreshAbs zs z A'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i v.\n                          inp' i = Some v \\<longrightarrow>\n                          qFresh zs z v) \\<and>\n                      (\\<forall>i v.\n                          binp' i = Some v \\<longrightarrow>\n                          qFreshAbs zs z v)", "by simp"], ["proof (state)\nthis:\n  qFresh zs z X'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qAFresh zs z (qOp delta inp binp) \\<longrightarrow>\n  (\\<forall>X'. qOp delta inp binp #= X' \\<longrightarrow> qFresh zs z X')\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "case (Abs xs x X)"], ["proof (state)\nthis:\n  qGood X\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  qAFresh zs z ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qFresh zs z X')\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qAFresh zs z ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qFresh zs z X')\n\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       \\<lbrakk>qGood X;\n        \\<And>Y.\n           qGood Y \\<and> qSkel Y = qSkel X \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X');\n        \\<And>Y.\n           (X, Y) \\<in> qSwapped \\<Longrightarrow>\n           qAFresh zs z Y \\<longrightarrow>\n           (\\<forall>X'. Y #= X' \\<longrightarrow> qFresh zs z X')\\<rbrakk>\n       \\<Longrightarrow> qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n                         (\\<forall>A'.\n                             qAbs xs x X $= A' \\<longrightarrow>\n                             qFreshAbs zs z A')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n    (\\<forall>A'. qAbs xs x X $= A' \\<longrightarrow> qFreshAbs zs z A')", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "fix A'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "assume \"qAbs xs x X $= A'\" and afresh: \"qAFreshAbs zs z (qAbs xs x X)\""], ["proof (state)\nthis:\n  qAbs xs x X $= A'\n  qAFreshAbs zs z (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "then"], ["proof (chain)\npicking this:\n  qAbs xs x X $= A'\n  qAFreshAbs zs z (qAbs xs x X)", "obtain x' y X' where A'eq: \"A' = qAbs xs x' X'\" and\n    ynot: \"y \\<notin> {x, x'}\" and y_afresh: \"qAFresh xs y X \\<and> qAFresh xs y X'\" and\n    alpha: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qAbs xs x X $= A'\n  qAFreshAbs zs z (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding qAbs_alphaAbs_iff"], ["proof (prove)\nusing this:\n  \\<exists>x' y X'.\n     A' = qAbs xs x' X' \\<and>\n     y \\<notin> {x, x'} \\<and>\n     qAFresh xs y X \\<and>\n     qAFresh xs y X' \\<and> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  qAFreshAbs zs z (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. (\\<And>x' X' y.\n        \\<lbrakk>A' = qAbs xs x' X'; y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X';\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "(*  *)"], ["proof (state)\nthis:\n  A' = qAbs xs x' X'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "have goodXxy: \"qGood(X #[[y \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using \\<open>qGood X\\<close> qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "hence goodX'yx': \"qGood(X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y \\<and> x']]_xs)", "using alpha alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood (X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "hence \"qGood X'\""], ["proof (prove)\nusing this:\n  qGood (X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. qGood X'", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood (X' #[[y \\<and> x']]_xs)\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood X'", "by auto"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "then"], ["proof (chain)\npicking this:\n  qGood X'", "obtain u where u_afresh: \"qAFresh xs u X \\<and> qAFresh xs u X'\"\n    and unot: \"u \\<notin> {x,x',z}\""], ["proof (prove)\nusing this:\n  qGood X'\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>qAFresh xs u X \\<and> qAFresh xs u X';\n         u \\<notin> {x, x', z}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>qGood X\\<close> obtain_qFresh[of \"{x,x',z}\" \"{X,X'}\"]"], ["proof (prove)\nusing this:\n  qGood X'\n  qGood X\n  \\<lbrakk>finite {x, x', z} \\<or> |{x, x', z}| <o |UNIV|;\n   finite {X, X'} \\<or> |{X, X'}| <o |UNIV|; Ball {X, X'} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x', z} \\<and>\n                       (\\<forall>X\\<in>{X, X'}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>qAFresh xs u X \\<and> qAFresh xs u X';\n         u \\<notin> {x, x', z}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z}\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "(* *)"], ["proof (state)\nthis:\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  u \\<notin> {x, x', z}\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "have \"(X #[[u \\<and> x]]_xs) = ((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) \\<and>\n          (X' #[[u \\<and> x']]_xs) = ((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n    X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "using u_afresh y_afresh qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qAFresh xs u X \\<and> qAFresh xs u X'\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n    X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n  X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n  X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "have \"((X #[[y \\<and> x]]_xs) #[[u \\<and> y]]_xs) #= ((X' #[[y \\<and> x']]_xs) #[[u \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "using goodXxy goodX'yx' alpha qSwap_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n  qGood (X' #[[y \\<and> x']]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #=\n                    ?X' #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "ultimately"], ["proof (chain)\npicking this:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n  X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs", "have alpha: \"(X #[[u \\<and> x]]_xs) #= (X' #[[u \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs \\<and>\n  X' #[[u \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[u \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[u \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "(*  *)"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "moreover"], ["proof (state)\nthis:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "have \"(X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped", "by (simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "moreover"], ["proof (state)\nthis:\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "have \"qAFresh zs z (X #[[u \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAFresh zs z (X #[[u \\<and> x]]_xs)", "using unot afresh"], ["proof (prove)\nusing this:\n  u \\<notin> {x, x', z}\n  qAFreshAbs zs z (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAFresh zs z (X #[[u \\<and> x]]_xs)", "by(auto simp add: qSwap_preserves_qAFresh_distinct)"], ["proof (state)\nthis:\n  qAFresh zs z (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "ultimately"], ["proof (chain)\npicking this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n  qAFresh zs z (X #[[u \\<and> x]]_xs)", "have \"qFresh zs z (X' #[[u \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n  qAFresh zs z (X #[[u \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qFresh zs z (X' #[[u \\<and> x']]_xs)", "using afresh Abs.IH"], ["proof (prove)\nusing this:\n  X #[[u \\<and> x]]_xs #= X' #[[u \\<and> x']]_xs\n  (X, X #[[u \\<and> x]]_xs) \\<in> qSwapped\n  qAFresh zs z (X #[[u \\<and> x]]_xs)\n  qAFreshAbs zs z (qAbs xs x X)\n  qGood ?Y11 \\<and> qSkel ?Y11 = qSkel X \\<Longrightarrow>\n  qAFresh zs z ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qFresh zs z X')\n  (X, ?Y11) \\<in> qSwapped \\<Longrightarrow>\n  qAFresh zs z ?Y11 \\<longrightarrow>\n  (\\<forall>X'. ?Y11 #= X' \\<longrightarrow> qFresh zs z X')\n\ngoal (1 subgoal):\n 1. qFresh zs z (X' #[[u \\<and> x']]_xs)", "by simp"], ["proof (state)\nthis:\n  qFresh zs z (X' #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "hence \"zs = xs \\<and> z = x' \\<or> qFresh zs z X'\""], ["proof (prove)\nusing this:\n  qFresh zs z (X' #[[u \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. zs = xs \\<and> z = x' \\<or> qFresh zs z X'", "using unot afresh qSwap_preserves_qFresh_distinct[of zs xs z]"], ["proof (prove)\nusing this:\n  qFresh zs z (X' #[[u \\<and> x']]_xs)\n  u \\<notin> {x, x', z}\n  qAFreshAbs zs z (qAbs xs x X)\n  zs \\<noteq> xs \\<or> z \\<notin> {?z1.0, ?z2.0} \\<Longrightarrow>\n  qFresh zs z (?X #[[?z1.0 \\<and> ?z2.0]]_xs) = qFresh zs z ?X\n\ngoal (1 subgoal):\n 1. zs = xs \\<and> z = x' \\<or> qFresh zs z X'", "by fastforce"], ["proof (state)\nthis:\n  zs = xs \\<and> z = x' \\<or> qFresh zs z X'\n\ngoal (1 subgoal):\n 1. \\<And>A'.\n       \\<lbrakk>qAFreshAbs zs z (qAbs xs x X); qAbs xs x X $= A'\\<rbrakk>\n       \\<Longrightarrow> qFreshAbs zs z A'", "thus \"qFreshAbs zs z A'\""], ["proof (prove)\nusing this:\n  zs = xs \\<and> z = x' \\<or> qFresh zs z X'\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z A'", "unfolding A'eq"], ["proof (prove)\nusing this:\n  zs = xs \\<and> z = x' \\<or> qFresh zs z X'\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z (qAbs xs x' X')", "by simp"], ["proof (state)\nthis:\n  qFreshAbs zs z A'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qAFreshAbs zs z (qAbs xs x X) \\<longrightarrow>\n  (\\<forall>A'. qAbs xs x X $= A' \\<longrightarrow> qFreshAbs zs z A')\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary qAFresh_qFresh_preserves_alpha:\n\"\\<lbrakk>qGood X; qAFresh zs z X; X #= X'\\<rbrakk> \\<Longrightarrow> qFresh zs z X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGood X; qAFresh zs z X; X #= X'\\<rbrakk>\n    \\<Longrightarrow> qFresh zs z X'", "by(simp add: qAFreshAll_qFreshAll_preserves_alphaAll)"], ["", "corollary qAFreshAbs_imp_qFreshAbs_preserves_alphaAbs:\n\"\\<lbrakk>qGoodAbs A; qAFreshAbs zs z A; A $= A'\\<rbrakk> \\<Longrightarrow> qFreshAbs zs z A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qGoodAbs A; qAFreshAbs zs z A; A $= A'\\<rbrakk>\n    \\<Longrightarrow> qFreshAbs zs z A'", "by(simp add: qAFreshAll_qFreshAll_preserves_alphaAll)"], ["", "lemma qFresh_preserves_alpha1:\nassumes \"qGood X\" and \"qFresh zs z X\" and \"X #= X'\"\nshows \"qFresh zs z X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh zs z X'", "by (meson alpha_sym alpha_trans assms qAFresh_qFresh_preserves_alpha qFresh_imp_ex_qAFresh1)"], ["", "lemma qFreshAbs_preserves_alphaAbs1:\nassumes \"qGoodAbs A\" and \"qFreshAbs zs z A\" and \"A $= A'\"\nshows \"qFreshAbs zs z A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs zs z A'", "by (meson alphaAbs_sym alphaAbs_trans assms finite.emptyI \n  qAFreshAbs_imp_qFreshAbs_preserves_alphaAbs qFreshAbs_imp_ex_qAFreshAbs1)"], ["", "lemma qFresh_preserves_alpha:\nassumes \"qGood X \\<or> qGood X'\" and \"X #= X'\"\nshows \"qFresh zs z X \\<longleftrightarrow> qFresh zs z X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFresh zs z X = qFresh zs z X'", "using alpha_preserves_qGood alpha_sym assms qFresh_preserves_alpha1"], ["proof (prove)\nusing this:\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n  qGood X \\<or> qGood X'\n  X #= X'\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> qFresh ?zs ?z ?X'\n\ngoal (1 subgoal):\n 1. qFresh zs z X = qFresh zs z X'", "by blast"], ["", "lemma qFreshAbs_preserves_alphaAbs:\nassumes \"qGoodAbs A \\<or> qGoodAbs A'\" and \"A $= A'\"\nshows \"qFreshAbs zs z A = qFreshAbs zs z A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qFreshAbs zs z A = qFreshAbs zs z A'", "using assms alphaAbs_preserves_qGoodAbs alphaAbs_sym qFreshAbs_preserves_alphaAbs1"], ["proof (prove)\nusing this:\n  qGoodAbs A \\<or> qGoodAbs A'\n  A $= A'\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n  \\<lbrakk>qGoodAbs ?A; qFreshAbs ?zs ?z ?A; ?A $= ?A'\\<rbrakk>\n  \\<Longrightarrow> qFreshAbs ?zs ?z ?A'\n\ngoal (1 subgoal):\n 1. qFreshAbs zs z A = qFreshAbs zs z A'", "by blast"], ["", "lemma alpha_qFresh_qSwap_id:\nassumes \"qGood X\" and \"qFresh zs z1 X\" and \"qFresh zs z2 X\"\nshows \"(X #[[z1 \\<and> z2]]_zs) #= X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "obtain X' where 1: \"X #= X'\" and \"qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>X #= X'; qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms qFresh_imp_ex_qAFresh2"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh zs z1 X\n  qFresh zs z2 X\n  \\<lbrakk>qGood ?X; qFresh ?xs ?x ?X; qFresh ?ys ?y ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and>\n                       ?X #= X' \\<and>\n                       qAFresh ?xs ?x X' \\<and> qAFresh ?ys ?y X'\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>X #= X'; qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  X #= X'\n  qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "hence \"(X' #[[z1 \\<and> z2]]_zs) = X'\""], ["proof (prove)\nusing this:\n  X #= X'\n  qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\n\ngoal (1 subgoal):\n 1. X' #[[z1 \\<and> z2]]_zs = X'", "using qAFresh_qSwap_id"], ["proof (prove)\nusing this:\n  X #= X'\n  qAFresh zs z1 X' \\<and> qAFresh zs z2 X'\n  \\<lbrakk>qAFresh ?zs ?z1.0 ?X; qAFresh ?zs ?z2.0 ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs = ?X\n\ngoal (1 subgoal):\n 1. X' #[[z1 \\<and> z2]]_zs = X'", "by auto"], ["proof (state)\nthis:\n  X' #[[z1 \\<and> z2]]_zs = X'\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "moreover"], ["proof (state)\nthis:\n  X' #[[z1 \\<and> z2]]_zs = X'\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "have \"(X #[[z1 \\<and> z2]]_zs) #= (X' #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "using assms 1"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh zs z1 X\n  qFresh zs z2 X\n  X #= X'\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "moreover"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "have \"X' #= X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #= X", "using 1 alpha_sym"], ["proof (prove)\nusing this:\n  X #= X'\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. X' #= X", "by auto"], ["proof (state)\nthis:\n  X' #= X\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "moreover"], ["proof (state)\nthis:\n  X' #= X\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "have \"qGood(X #[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs)", "using assms qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh zs z1 X\n  qFresh zs z2 X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[z1 \\<and> z2]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "ultimately"], ["proof (chain)\npicking this:\n  X' #[[z1 \\<and> z2]]_zs = X'\n  X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  X' #= X\n  qGood (X #[[z1 \\<and> z2]]_zs)", "show ?thesis"], ["proof (prove)\nusing this:\n  X' #[[z1 \\<and> z2]]_zs = X'\n  X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  X' #= X\n  qGood (X #[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "using alpha_trans"], ["proof (prove)\nusing this:\n  X' #[[z1 \\<and> z2]]_zs = X'\n  X #[[z1 \\<and> z2]]_zs #= X' #[[z1 \\<and> z2]]_zs\n  X' #= X\n  qGood (X #[[z1 \\<and> z2]]_zs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[z1 \\<and> z2]]_zs #= X", "by auto"], ["proof (state)\nthis:\n  X #[[z1 \\<and> z2]]_zs #= X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qFreshAbs_qSwapAbs_id:\nassumes \"qGoodAbs A\" and \"qFreshAbs zs z1 A\" and \"qFreshAbs zs z2 A\"\nshows \"(A $[[z1 \\<and> z2]]_zs) $= A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "obtain A' where 1: \"A $= A'\" and \"qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A $= A';\n         qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms qFreshAbs_imp_ex_qAFreshAbs2"], ["proof (prove)\nusing this:\n  qGoodAbs A\n  qFreshAbs zs z1 A\n  qFreshAbs zs z2 A\n  \\<lbrakk>finite ?V; qGoodAbs ?A; qFreshAbs ?xs ?x ?A;\n   qFreshAbs ?ys ?y ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A'.\n                       qGoodAbs A' \\<and>\n                       ?A $= A' \\<and>\n                       qAFreshAbs ?xs ?x A' \\<and> qAFreshAbs ?ys ?y A'\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A $= A';\n         qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  A $= A'\n  qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "hence \"(A' $[[z1 \\<and> z2]]_zs) = A'\""], ["proof (prove)\nusing this:\n  A $= A'\n  qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\n\ngoal (1 subgoal):\n 1. A' $[[z1 \\<and> z2]]_zs = A'", "using qAFreshAll_qSwapAll_id"], ["proof (prove)\nusing this:\n  A $= A'\n  qAFreshAbs zs z1 A' \\<and> qAFreshAbs zs z2 A'\n  (qAFresh ?zs ?z1.0 ?X \\<and> qAFresh ?zs ?z2.0 ?X \\<longrightarrow>\n   ?X #[[?z1.0 \\<and> ?z2.0]]_?zs = ?X) \\<and>\n  (qAFreshAbs ?zs ?z1.0 ?A \\<and> qAFreshAbs ?zs ?z2.0 ?A \\<longrightarrow>\n   ?A $[[?z1.0 \\<and> ?z2.0]]_?zs = ?A)\n\ngoal (1 subgoal):\n 1. A' $[[z1 \\<and> z2]]_zs = A'", "by fastforce"], ["proof (state)\nthis:\n  A' $[[z1 \\<and> z2]]_zs = A'\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "moreover"], ["proof (state)\nthis:\n  A' $[[z1 \\<and> z2]]_zs = A'\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "have \"(A $[[z1 \\<and> z2]]_zs) $= (A' $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "using assms 1"], ["proof (prove)\nusing this:\n  qGoodAbs A\n  qFreshAbs zs z1 A\n  qFreshAbs zs z2 A\n  A $= A'\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs", "by (auto simp add: qSwapAbs_preserves_alphaAbs)"], ["proof (state)\nthis:\n  A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "moreover"], ["proof (state)\nthis:\n  A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "have \"A' $= A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $= A", "using 1 alphaAbs_sym"], ["proof (prove)\nusing this:\n  A $= A'\n  ?A $= ?A' \\<Longrightarrow> ?A' $= ?A\n\ngoal (1 subgoal):\n 1. A' $= A", "by auto"], ["proof (state)\nthis:\n  A' $= A\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "moreover"], ["proof (state)\nthis:\n  A' $= A\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "have \"qGoodAbs (A $[[z1 \\<and> z2]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[z1 \\<and> z2]]_zs)", "using assms qSwapAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs A\n  qFreshAbs zs z1 A\n  qFreshAbs zs z2 A\n  qGoodAbs (?A $[[?x \\<and> ?y]]_?zs) = qGoodAbs ?A\n\ngoal (1 subgoal):\n 1. qGoodAbs (A $[[z1 \\<and> z2]]_zs)", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (A $[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "ultimately"], ["proof (chain)\npicking this:\n  A' $[[z1 \\<and> z2]]_zs = A'\n  A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n  A' $= A\n  qGoodAbs (A $[[z1 \\<and> z2]]_zs)", "show ?thesis"], ["proof (prove)\nusing this:\n  A' $[[z1 \\<and> z2]]_zs = A'\n  A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n  A' $= A\n  qGoodAbs (A $[[z1 \\<and> z2]]_zs)\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "using alphaAbs_trans"], ["proof (prove)\nusing this:\n  A' $[[z1 \\<and> z2]]_zs = A'\n  A $[[z1 \\<and> z2]]_zs $= A' $[[z1 \\<and> z2]]_zs\n  A' $= A\n  qGoodAbs (A $[[z1 \\<and> z2]]_zs)\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. A $[[z1 \\<and> z2]]_zs $= A", "by auto"], ["proof (state)\nthis:\n  A $[[z1 \\<and> z2]]_zs $= A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_qFresh_qSwap_compose:\nassumes GOOD: \"qGood X\" and \"qFresh zs y X\" and \"qFresh zs z X\"\nshows \"((X #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs) #= (X #[[z \\<and> x]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "obtain X' where 1: \"X #= X'\" and \"qAFresh zs y X' \\<and> qAFresh zs z X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>X #= X'; qAFresh zs y X' \\<and> qAFresh zs z X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms qFresh_imp_ex_qAFresh2"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh zs y X\n  qFresh zs z X\n  \\<lbrakk>qGood ?X; qFresh ?xs ?x ?X; qFresh ?ys ?y ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and>\n                       ?X #= X' \\<and>\n                       qAFresh ?xs ?x X' \\<and> qAFresh ?ys ?y X'\n\ngoal (1 subgoal):\n 1. (\\<And>X'.\n        \\<lbrakk>X #= X'; qAFresh zs y X' \\<and> qAFresh zs z X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  X #= X'\n  qAFresh zs y X' \\<and> qAFresh zs z X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "hence \"((X' #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs) = (X' #[[z \\<and> x]]_zs)\""], ["proof (prove)\nusing this:\n  X #= X'\n  qAFresh zs y X' \\<and> qAFresh zs z X'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs", "using qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  X #= X'\n  qAFresh zs y X' \\<and> qAFresh zs z X'\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs", "by auto"], ["proof (state)\nthis:\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "moreover"], ["proof (state)\nthis:\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "have \"((X #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs) #= ((X' #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n    X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs", "using GOOD 1"], ["proof (prove)\nusing this:\n  qGood X\n  X #= X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n    X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs", "by (auto simp add: qSwap_twice_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "moreover"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "have \"(X' #[[z \\<and> x]]_zs) #= (X #[[z \\<and> x]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs", "using GOOD 1"], ["proof (prove)\nusing this:\n  qGood X\n  X #= X'\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs", "by (auto simp add: qSwap_preserves_alpha alpha_sym)"], ["proof (state)\nthis:\n  X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "moreover"], ["proof (state)\nthis:\n  X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "have \"qGood ((X #[[y \\<and> x]]_zs) #[[z \\<and> y]]_zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)", "using GOOD"], ["proof (prove)\nusing this:\n  qGood X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)", "by (auto simp add: qSwap_twice_preserves_qGood)"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "ultimately"], ["proof (chain)\npicking this:\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs\n  X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs\n  qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)", "show ?thesis"], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs\n  X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs\n  qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "using alpha_trans"], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs = X' #[[z \\<and> x]]_zs\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #=\n  X' #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs\n  X' #[[z \\<and> x]]_zs #= X #[[z \\<and> x]]_zs\n  qGood (X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs)\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs", "by auto"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_zs #[[z \\<and> y]]_zs #= X #[[z \\<and> x]]_zs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qAbs_alphaAbs_qSwap_qFresh:\nassumes GOOD: \"qGood X\" and FRESH: \"qFresh xs x' X\"\nshows \"qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "obtain Y where good_Y: \"qGood Y\" and alpha: \"X #= Y\" and fresh_Y: \"qAFresh xs x' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>qGood Y; X #= Y; qAFresh xs x' Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms qFresh_imp_ex_qAFresh1"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs x' X\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and> ?X #= X' \\<and> qAFresh ?zs ?z X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>qGood Y; X #= Y; qAFresh xs x' Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  qGood Y\n  X #= Y\n  qAFresh xs x' Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "hence \"qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  qGood Y\n  X #= Y\n  qAFresh xs x' Y\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)", "using qAbs_alphaAbs_qSwap_qAFresh"], ["proof (prove)\nusing this:\n  qGood Y\n  X #= Y\n  qAFresh xs x' Y\n  \\<lbrakk>qGood ?X; qAFresh ?ys ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?ys ?x ?X $=\n                    qAbs ?ys ?x' (?X #[[?x' \\<and> ?x]]_?ys)\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)", "by blast"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "moreover"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "have \"qAbs xs x X $= qAbs xs x Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x Y", "using GOOD alpha qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood X\n  X #= Y\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x Y", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "{"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "have \"Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs", "using GOOD alpha"], ["proof (prove)\nusing this:\n  qGood X\n  X #= Y\n\ngoal (1 subgoal):\n 1. Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs", "by (auto simp add: qSwap_preserves_alpha alpha_sym)"], ["proof (state)\nthis:\n  Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "moreover"], ["proof (state)\nthis:\n  Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "have \"qGood (Y #[[x' \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (Y #[[x' \\<and> x]]_xs)", "using good_Y qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood Y\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (Y #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (Y #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "ultimately"], ["proof (chain)\npicking this:\n  Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\n  qGood (Y #[[x' \\<and> x]]_xs)", "have \"qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\n  qGood (Y #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "using qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  Y #[[x' \\<and> x]]_xs #= X #[[x' \\<and> x]]_xs\n  qGood (Y #[[x' \\<and> x]]_xs)\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "by blast"], ["proof (state)\nthis:\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "}"], ["proof (state)\nthis:\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "moreover"], ["proof (state)\nthis:\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "have \"qGoodAbs (qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "using GOOD"], ["proof (prove)\nusing this:\n  qGood X\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n  qGoodAbs (qAbs xs x X)", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "using alphaAbs_trans"], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' (Y #[[x' \\<and> x]]_xs)\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' (Y #[[x' \\<and> x]]_xs) $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n  qGoodAbs (qAbs xs x X)\n  \\<lbrakk>qGoodAbs ?A \\<or> qGoodAbs ?A' \\<or> qGoodAbs ?A''; ?A $= ?A';\n   ?A' $= ?A''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A''\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_ex_qFresh_rep:\nassumes GOOD: \"qGood X\" and FRESH: \"qFresh xs x' X\"\nshows \"\\<exists> X'. (X,X') \\<in> qSwapped \\<and> qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> qSwapped \\<and>\n       qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> qSwapped \\<and>\n       qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "have 1: \"qGood (X #[[x' \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "using assms qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs x' X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[x' \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[x' \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> qSwapped \\<and>\n       qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "have 2: \"(X,X #[[x' \\<and> x]]_xs) \\<in> qSwapped\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[x' \\<and> x]]_xs) \\<in> qSwapped", "by(simp add: qSwap_qSwapped)"], ["proof (state)\nthis:\n  (X, X #[[x' \\<and> x]]_xs) \\<in> qSwapped\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> qSwapped \\<and>\n       qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (X, X') \\<in> qSwapped \\<and>\n       qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'", "apply(rule exI[of _ \"X #[[x' \\<and> x]]_xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, X #[[x' \\<and> x]]_xs) \\<in> qSwapped \\<and>\n    qGood (X #[[x' \\<and> x]]_xs) \\<and>\n    qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "using assms 1 2 qAbs_alphaAbs_qSwap_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qFresh xs x' X\n  qGood (X #[[x' \\<and> x]]_xs)\n  (X, X #[[x' \\<and> x]]_xs) \\<in> qSwapped\n  \\<lbrakk>qGood ?X; qFresh ?xs ?x' ?X\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $=\n                    qAbs ?xs ?x' (?X #[[?x' \\<and> ?x]]_?xs)\n\ngoal (1 subgoal):\n 1. (X, X #[[x' \\<and> x]]_xs) \\<in> qSwapped \\<and>\n    qGood (X #[[x' \\<and> x]]_xs) \\<and>\n    qAbs xs x X $= qAbs xs x' (X #[[x' \\<and> x]]_xs)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>X'.\n     (X, X') \\<in> qSwapped \\<and>\n     qGood X' \\<and> qAbs xs x X $= qAbs xs x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Alternative statements of the alpha-clause for bound arguments\\<close>"], ["", "text\\<open>These alternatives are essentially variations with forall/exists and and qFresh/qAFresh.\\<close>"], ["", "(* FIXME: In this subsection I may have proved quite a few useless things. *)"], ["", "subsubsection \\<open>First for ``qAFresh\"\\<close>"], ["", "definition alphaAbs_ex_equal_or_qAFresh\nwhere\n\"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X') \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_ex_qAFresh\nwhere\n\"alphaAbs_ex_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_ex_distinct_qAFresh\nwhere\n\"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_equal_or_qAFresh\nwhere\n\"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_qAFresh\nwhere\n\"alphaAbs_all_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_distinct_qAFresh\nwhere\n\"alphaAbs_all_distinct_qAFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "lemma alphaAbs_weakestEx_imp_strongestAll:\nassumes GOOD_X: \"qGood X\" and \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "obtain y where xs: \"xs = xs'\" and\n  yEqFresh: \"(y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\" and\n  alpha: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: alphaAbs_ex_equal_or_qAFresh_def)"], ["proof (state)\nthis:\n  xs = xs'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using xs"], ["proof (prove)\nusing this:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof(intro conjI allI impI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "assume zFresh: \"(z = x \\<or> qAFresh xs z X) \\<and> (z = x' \\<or> qAFresh xs z X')\""], ["proof (state)\nthis:\n  (z = x \\<or> qAFresh xs z X) \\<and> (z = x' \\<or> qAFresh xs z X')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"(X #[[z \\<and> x]]_xs) = ((X #[[y \\<and> x]]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "proof(cases \"z = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n 2. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "assume Case1: \"z = x\""], ["proof (state)\nthis:\n  z = x\n\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n 2. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  z = x\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "by(auto simp add: qSwap_sym)"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "assume Case2: \"z \\<noteq> x\""], ["proof (state)\nthis:\n  z \\<noteq> x\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "hence z_fresh: \"qAFresh xs z X\""], ["proof (prove)\nusing this:\n  z \\<noteq> x\n\ngoal (1 subgoal):\n 1. qAFresh xs z X", "using zFresh"], ["proof (prove)\nusing this:\n  z \\<noteq> x\n  (z = x \\<or> qAFresh xs z X) \\<and> (z = x' \\<or> qAFresh xs z X')\n\ngoal (1 subgoal):\n 1. qAFresh xs z X", "by auto"], ["proof (state)\nthis:\n  qAFresh xs z X\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "proof(cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n 2. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "assume Case21: \"y = x\""], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n 2. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "unfolding Case21"], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[x \\<and> x]]_xs #[[z \\<and> x]]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "assume Case22: \"y \\<noteq> x\""], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "hence \"qAFresh xs y X\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. qAFresh xs y X", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n\ngoal (1 subgoal):\n 1. qAFresh xs y X", "by auto"], ["proof (state)\nthis:\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "using z_fresh qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qAFresh xs y X\n  qAFresh xs z X\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "moreover"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"(X' #[[z \\<and> x']]_xs) = ((X' #[[y \\<and> x']]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "proof(cases \"z = x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n 2. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "assume Case1: \"z = x'\""], ["proof (state)\nthis:\n  z = x'\n\ngoal (2 subgoals):\n 1. z = x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n 2. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  z = x'\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "by(auto simp add: qSwap_sym)"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "assume Case2: \"z \\<noteq> x'\""], ["proof (state)\nthis:\n  z \\<noteq> x'\n\ngoal (1 subgoal):\n 1. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "hence z_fresh: \"qAFresh xs z X'\""], ["proof (prove)\nusing this:\n  z \\<noteq> x'\n\ngoal (1 subgoal):\n 1. qAFresh xs z X'", "using zFresh"], ["proof (prove)\nusing this:\n  z \\<noteq> x'\n  (z = x \\<or> qAFresh xs z X) \\<and> (z = x' \\<or> qAFresh xs z X')\n\ngoal (1 subgoal):\n 1. qAFresh xs z X'", "by auto"], ["proof (state)\nthis:\n  qAFresh xs z X'\n\ngoal (1 subgoal):\n 1. z \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "proof(cases \"y = x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n 2. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "assume Case21: \"y = x'\""], ["proof (state)\nthis:\n  y = x'\n\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n 2. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "unfolding Case21"], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[x' \\<and> x']]_xs #[[z \\<and> x']]_xs", "by simp"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "assume Case22: \"y \\<noteq> x'\""], ["proof (state)\nthis:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "hence \"qAFresh xs y X'\""], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. qAFresh xs y X'", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n\ngoal (1 subgoal):\n 1. qAFresh xs y X'", "by auto"], ["proof (state)\nthis:\n  qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "using z_fresh qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qAFresh xs y X'\n  qAFresh xs z X'\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "moreover"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "{"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"qGood (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using GOOD_X qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"((X #[[y \\<and> x]]_xs) #[[z \\<and> y]]_xs) #= ((X' #[[y \\<and> x']]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "using alpha qSwap_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #=\n                    ?X' #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "}"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "ultimately"], ["proof (chain)\npicking this:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "show \"(X #[[z \\<and> x]]_xs) #= (X' #[[z \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_weakestAll_imp_strongestEx:\nassumes GOOD: \"qGood X\"  \"qGood X'\"\nand \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "have xs: \"xs = xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs'", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs'", "unfolding alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  xs = xs' \\<and>\n  (\\<forall>y.\n      y \\<notin> {x, x'} \\<and>\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs'", "by auto"], ["proof (state)\nthis:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "obtain y where y_not:  \"y \\<notin> {x,x'}\" and\n                 yFresh: \"qAFresh xs y X \\<and> qAFresh xs y X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD obtain_qFresh[of  \"{x,x'}\" \"{X,X'}\"]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>finite {x, x'} \\<or> |{x, x'}| <o |UNIV|;\n   finite {X, X'} \\<or> |{X, X'}| <o |UNIV|; Ball {X, X'} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x'} \\<and>\n                       (\\<forall>X\\<in>{X, X'}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<notin> {x, x'};\n         qAFresh xs y X \\<and> qAFresh xs y X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "hence \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "using assms"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  qGood X\n  qGood X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "unfolding alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n  qGood X\n  qGood X'\n  xs = xs' \\<and>\n  (\\<forall>y.\n      y \\<notin> {x, x'} \\<and>\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "by auto"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using xs y_not yFresh"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  xs = xs'\n  y \\<notin> {x, x'}\n  qAFresh xs y X \\<and> qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Note: I do not infer the following from the previous two because\n   I do not want to use \"qGood X'\": *)"], ["", "lemma alphaAbs_weakestEx_imp_strongestEx:\nassumes GOOD: \"qGood X\"\nand \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\"\nshows \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "obtain y where xs: \"xs = xs'\" and\n  yEqFresh: \"(y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\" and\n  alpha: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaAbs_ex_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  qGood X\n  xs = xs' \\<and>\n  (\\<exists>y.\n      (y = x \\<or> qAFresh xs y X) \\<and>\n      (y = x' \\<or> qAFresh xs y X') \\<and>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = xs'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "hence goodX': \"qGood X'\""], ["proof (prove)\nusing this:\n  xs = xs'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qGood X'", "using GOOD alpha_qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  xs = xs'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  qGood X\n  ?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs' \\<Longrightarrow>\n  qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood X'", "by fastforce"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "then"], ["proof (chain)\npicking this:\n  qGood X'", "obtain z where zNot: \"z \\<notin> {x,x',y}\" and\n                      zFresh: \"qAFresh xs z X \\<and> qAFresh xs z X'\""], ["proof (prove)\nusing this:\n  qGood X'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> {x, x', y};\n         qAFresh xs z X \\<and> qAFresh xs z X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD obtain_qFresh[of \"{x,x',y}\" \"{X,X'}\"]"], ["proof (prove)\nusing this:\n  qGood X'\n  qGood X\n  \\<lbrakk>finite {x, x', y} \\<or> |{x, x', y}| <o |UNIV|;\n   finite {X, X'} \\<or> |{X, X'}| <o |UNIV|; Ball {X, X'} qGood\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       xa \\<notin> {x, x', y} \\<and>\n                       (\\<forall>X\\<in>{X, X'}.\n                           qAFresh ?xs xa X \\<and> qFresh ?xs xa X)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<notin> {x, x', y};\n         qAFresh xs z X \\<and> qAFresh xs z X'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<notin> {x, x', y}\n  qAFresh xs z X \\<and> qAFresh xs z X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "have \"(X #[[z \\<and> x]]_xs) = ((X #[[y \\<and> x]]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "proof(cases \"y = x\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "assume \"y \\<noteq> x\""], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "hence \"qAFresh xs y X\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. qAFresh xs y X", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n\ngoal (1 subgoal):\n 1. qAFresh xs y X", "by auto"], ["proof (state)\nthis:\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qAFresh xs y X\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "using zFresh qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qAFresh xs y X\n  qAFresh xs z X \\<and> qAFresh xs z X'\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "have \"(X' #[[z \\<and> x']]_xs) = ((X' #[[y \\<and> x']]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "proof(cases \"y = x'\", simp add: qSwap_ident)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "assume \"y \\<noteq> x'\""], ["proof (state)\nthis:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "hence \"qAFresh xs y X'\""], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. qAFresh xs y X'", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n  (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X')\n\ngoal (1 subgoal):\n 1. qAFresh xs y X'", "by auto"], ["proof (state)\nthis:\n  qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qAFresh xs y X'\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "using zFresh qAFresh_qSwap_compose"], ["proof (prove)\nusing this:\n  qAFresh xs y X'\n  qAFresh xs z X \\<and> qAFresh xs z X'\n  \\<lbrakk>qAFresh ?zs ?y ?X; qAFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?y \\<and> ?x]]_?zs #[[?z \\<and> ?y]]_?zs =\n                    ?X #[[?z \\<and> ?x]]_?zs\n\ngoal (1 subgoal):\n 1. X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "{"], ["proof (state)\nthis:\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "have \"qGood (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using GOOD qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "hence \"((X #[[y \\<and> x]]_xs) #[[z \\<and> y]]_xs) #= ((X' #[[y \\<and> x']]_xs) #[[z \\<and> y]]_xs)\""], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "using alpha"], ["proof (prove)\nusing this:\n  qGood (X #[[y \\<and> x]]_xs)\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n    X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "}"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs", "have \"(X #[[z \\<and> x]]_xs) #= (X' #[[z \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X #[[z \\<and> x]]_xs = X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs\n  X' #[[z \\<and> x']]_xs = X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n  X #[[y \\<and> x]]_xs #[[z \\<and> y]]_xs #=\n  X' #[[y \\<and> x']]_xs #[[z \\<and> y]]_xs\n\ngoal (1 subgoal):\n 1. X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs", "by simp"], ["proof (state)\nthis:\n  X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using xs zNot zFresh"], ["proof (prove)\nusing this:\n  X #[[z \\<and> x]]_xs #= X' #[[z \\<and> x']]_xs\n  xs = xs'\n  z \\<notin> {x, x', y}\n  qAFresh xs z X \\<and> qAFresh xs z X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh:\n\"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "by auto"], ["", "corollary alphaAbs_qAbs_iff_ex_distinct_qAFresh:\n\"(qAbs xs x X $= qAbs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n         (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh\n          alphaAbs_ex_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)) =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "by fastforce"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh:\nassumes \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_equal_or_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh[of _ _ X]\n        alphaAbs_weakestEx_imp_strongestEx"], ["proof (prove)\nusing this:\n  qGood X\n  (qAbs ?xs ?x X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_distinct_qAFresh ?xs ?x X ?xs' ?x' ?X'\n  \\<lbrakk>qGood ?X;\n   alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_ex_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "by auto"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_ex_equal_or_qAFresh:\nassumes \"qGood X\"\nshows\n\"(qAbs xs x X $= qAbs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X') \\<and>\n         (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_ex_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       (y = x \\<or> qAFresh xs y X) \\<and>\n       (y = x' \\<or> qAFresh xs y X') \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       (y = x \\<or> qAFresh xs y X) \\<and>\n       (y = x' \\<or> qAFresh xs y X') \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_qAFresh:\nassumes \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "let ?Middle = \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_ex_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Middle\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_qAFresh_def alphaAbs_ex_equal_or_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "have \"?Middle = ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' =\n    (qAbs xs x X $= qAbs xs' x' X')", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh[of X]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X \\<Longrightarrow>\n  (qAbs ?xs ?x X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_equal_or_qAFresh ?xs ?x X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' =\n    (qAbs xs x X $= qAbs xs' x' X')", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' =\n  (qAbs xs x X $= qAbs xs' x' X')\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' =\n  (qAbs xs x X $= qAbs xs' x' X')", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' =\n  (qAbs xs x X $= qAbs xs' x' X')\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_ex_qAFresh:\nassumes \"qGood X\"\nshows\n\"(qAbs xs x X $= qAbs xs' x' X') =\n (xs = xs' \\<and>\n  (\\<exists> y. qAFresh xs y X \\<and> qAFresh xs y X' \\<and>\n         (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_ex_qAFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       qAFresh xs y X \\<and>\n       qAFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qAFresh xs y X \\<and>\n         qAFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       qAFresh xs y X \\<and>\n       qAFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh\n      alphaAbs_weakestEx_imp_strongestAll"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n  \\<lbrakk>qGood ?X;\n   alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by fastforce"], ["", "corollary alphaAbs_qAbs_imp_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"(qAbs xs x X $= qAbs xs' x' X')\"\nshows\n\"(xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "have \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "unfolding alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y X) \\<and>\n      (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "."], ["proof (state)\nthis:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y X) \\<and>\n      (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "let ?MiddleEx = \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "let ?MiddleAll = \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?MiddleAll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_equal_or_qAFresh_def alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "have \"?MiddleAll \\<Longrightarrow> ?MiddleEx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_weakestAll_imp_strongestEx"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X';\n   alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_ex_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "have \"?MiddleEx \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh[of _ _ X]"], ["proof (prove)\nusing this:\n  (qAbs ?xs ?x X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_distinct_qAFresh ?xs ?x X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_all_equal_or_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       (xs = xs' \\<and>\n        (\\<forall> y. (y = x \\<or> qAFresh xs y X) \\<and> (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n              (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qAFresh xs y X) \\<and>\n       (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qAFresh xs y X) \\<and>\n         (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qAFresh xs y X) \\<and>\n       (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_imp_alphaAbs_all_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "have \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_qAFresh_def alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y X) \\<and>\n      (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_imp_all_qAFresh:\nassumes \"qGood X\" and \"(qAbs xs x X $= qAbs xs' x' X')\"\nshows\n\"(xs = xs' \\<and>\n  (\\<forall> y. qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "have \"alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "unfolding alphaAbs_all_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "."], ["proof (state)\nthis:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_all_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "let ?MiddleEx = \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "let ?MiddleAll = \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?MiddleAll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_qAFresh_def alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "have \"?MiddleAll \\<Longrightarrow> ?MiddleEx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_weakestAll_imp_strongestEx"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X';\n   alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_ex_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "have \"?MiddleEx \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh[of _ _ X]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  (qAbs ?xs ?x X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_distinct_qAFresh ?xs ?x X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_all_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       (xs = xs' \\<and>\n        (\\<forall> y. qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n              (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_all_qAFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_imp_alphaAbs_all_distinct_qAFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "have \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_distinct_qAFresh_def alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y X) \\<and>\n      (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_imp_all_distinct_qAFresh:\nassumes \"qGood X\" and \"(qAbs xs x X $= qAbs xs' x' X')\"\nshows\n\"(xs = xs' \\<and>\n  (\\<forall> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "have \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_distinct_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "unfolding alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      y \\<notin> {x, x'} \\<and>\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "."], ["proof (state)\nthis:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      y \\<notin> {x, x'} \\<and>\n      qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_all_distinct_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "let ?MiddleEx = \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "let ?MiddleAll = \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_distinct_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?MiddleAll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_distinct_qAFresh_def alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "have \"?MiddleAll \\<Longrightarrow> ?MiddleEx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_weakestAll_imp_strongestEx"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X';\n   alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_ex_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "have \"?MiddleEx \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qAFresh[of _ _ X]"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  (qAbs ?xs ?x X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_distinct_qAFresh ?xs ?x X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_all_distinct_qAFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       (xs = xs' \\<and>\n        (\\<forall> y. y \\<notin> {x,x'} \\<and> qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n              (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_distinct_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_all_distinct_qAFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       y \\<notin> {x, x'} \\<and>\n       qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         y \\<notin> {x, x'} \\<and>\n         qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       y \\<notin> {x, x'} \\<and>\n       qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Then for ``qFresh\"\\<close>"], ["", "definition alphaAbs_ex_equal_or_qFresh\nwhere\n\"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X') \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_ex_qFresh\nwhere\n\"alphaAbs_ex_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. qFresh xs y X \\<and> qFresh xs y X' \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_ex_distinct_qFresh\nwhere\n\"alphaAbs_ex_distinct_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<exists> y. y \\<notin> {x,x'} \\<and> qFresh xs y X \\<and> qFresh xs y X' \\<and>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_equal_or_qFresh\nwhere\n\"alphaAbs_all_equal_or_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_qFresh\nwhere\n\"alphaAbs_all_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "definition alphaAbs_all_distinct_qFresh\nwhere\n\"alphaAbs_all_distinct_qFresh xs x X xs' x' X' ==\n (xs = xs' \\<and>\n (\\<forall> y. y \\<notin> {x,x'} \\<and> qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n       (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["", "lemma alphaAbs_ex_equal_or_qAFresh_imp_qFresh:\n\"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_equal_or_qAFresh_def alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using qAFresh_imp_qFresh[of _ _ X] qAFresh_imp_qFresh[of _ _ X']"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x X \\<Longrightarrow> qFresh ?xs ?x X\n  qAFresh ?xs ?x X' \\<Longrightarrow> qFresh ?xs ?x X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by blast"], ["", "lemma alphaAbs_ex_distinct_qAFresh_imp_qFresh:\n\"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qAFresh_def alphaAbs_ex_distinct_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using qAFresh_imp_qFresh[of _ _ X] qAFresh_imp_qFresh[of _ _ X']"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x X \\<Longrightarrow> qFresh ?xs ?x X\n  qAFresh ?xs ?x X' \\<Longrightarrow> qFresh ?xs ?x X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by blast"], ["", "lemma alphaAbs_ex_qAFresh_imp_qFresh:\n\"alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_ex_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_qFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_qAFresh_def alphaAbs_ex_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using qAFresh_imp_qFresh[of _ _ X] qAFresh_imp_qFresh[of _ _ X']"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x X \\<Longrightarrow> qFresh ?xs ?x X\n  qAFresh ?xs ?x X' \\<Longrightarrow> qFresh ?xs ?x X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by blast"], ["", "lemma alphaAbs_all_equal_or_qFresh_imp_qAFresh:\n\"alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_equal_or_qAFresh_def alphaAbs_all_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using qAFresh_imp_qFresh[of _ _ X] qAFresh_imp_qFresh[of _ _ X']"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x X \\<Longrightarrow> qFresh ?xs ?x X\n  qAFresh ?xs ?x X' \\<Longrightarrow> qFresh ?xs ?x X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qAFresh xs y X) \\<and>\n        (y = x' \\<or> qAFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by blast"], ["", "lemma alphaAbs_all_distinct_qFresh_imp_qAFresh:\n\"alphaAbs_all_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_distinct_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "using qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. alphaAbs_all_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_distinct_qAFresh_def alphaAbs_all_distinct_qFresh_def"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by fastforce"], ["", "lemma alphaAbs_all_qFresh_imp_qAFresh:\n\"alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "using qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_all_qAFresh_def alphaAbs_all_qFresh_def"], ["proof (prove)\nusing this:\n  qAFresh ?xs ?x ?X \\<Longrightarrow> qFresh ?xs ?x ?X\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        qAFresh xs y X \\<and> qAFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by fastforce"], ["", "lemma alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs:\nassumes GOOD: \"qGood X\" and \"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\"\nshows \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "obtain y where xs: \"xs = xs'\" and\n  yEqFresh: \"(y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\" and\n  alphaXX'yx: \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\nusing this:\n  qGood X\n  xs = xs' \\<and>\n  (\\<exists>y.\n      (y = x \\<or> qFresh xs y X) \\<and>\n      (y = x' \\<or> qFresh xs y X') \\<and>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>xs = xs';\n         (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X');\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = xs'\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have \"\\<exists> Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "proof(cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "assume Case1: \"y = x\""], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "hence \"X #= X\""], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. X #= X", "using GOOD alpha_refl"], ["proof (prove)\nusing this:\n  y = x\n  qGood X\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. X #= X", "by auto"], ["proof (state)\nthis:\n  X #= X\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #= X\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "using Case1"], ["proof (prove)\nusing this:\n  X #= X\n  y = x\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "assume Case2: \"y \\<noteq> x\""], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "hence \"qFresh xs y X\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "by blast"], ["proof (state)\nthis:\n  qFresh xs y X\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "then"], ["proof (chain)\npicking this:\n  qFresh xs y X", "obtain Y where \"X #= Y\" and \"qAFresh xs y Y\""], ["proof (prove)\nusing this:\n  qFresh xs y X\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD qFresh_imp_ex_qAFresh1"], ["proof (prove)\nusing this:\n  qFresh xs y X\n  qGood X\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and> ?X #= X' \\<and> qAFresh ?zs ?z X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  X #= Y\n  qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #= Y\n  qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "obtain Y where alphaXY: \"X #= Y\" and yEqAFresh: \"y = x \\<or> qAFresh xs y Y\""], ["proof (prove)\nusing this:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; y = x \\<or> qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"(X #[[y \\<and> x]]_xs) #= (Y #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs", "using GOOD qSwap_preserves_alpha"], ["proof (prove)\nusing this:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n  qGood X\n  \\<lbrakk>qGood ?X \\<or> qGood ?X'; ?X #= ?X'\\<rbrakk>\n  \\<Longrightarrow> ?X #[[?z1.0 \\<and> ?z2.0]]_?zs #=\n                    ?X' #[[?z1.0 \\<and> ?z2.0]]_?zs\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs", "by fastforce"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence alphaYXyx: \"(Y #[[y \\<and> x]]_xs) #= (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "using alpha_sym"], ["proof (prove)\nusing this:\n  X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs", "by auto"], ["proof (state)\nthis:\n  Y #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have goodY: \"qGood Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood Y", "using alphaXY GOOD alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  X #= Y\n  qGood X\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood Y", "by auto"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence goodYyx: \"qGood(Y #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  qGood Y\n\ngoal (1 subgoal):\n 1. qGood (Y #[[y \\<and> x]]_xs)", "using qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood Y\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (Y #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (Y #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "(*  *)"], ["proof (state)\nthis:\n  qGood (Y #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have good': \"qGood X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood X'", "using GOOD alphaXX'yx alpha_qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  ?X #[[?y \\<and> ?x]]_?zs #= ?X' #[[?y' \\<and> ?x']]_?zs' \\<Longrightarrow>\n  qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood X'", "by fastforce"], ["proof (state)\nthis:\n  qGood X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have \"\\<exists> Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "proof(cases \"y = x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "assume Case1: \"y = x'\""], ["proof (state)\nthis:\n  y = x'\n\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "hence \"X' #= X'\""], ["proof (prove)\nusing this:\n  y = x'\n\ngoal (1 subgoal):\n 1. X' #= X'", "using good' alpha_refl"], ["proof (prove)\nusing this:\n  y = x'\n  qGood X'\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. X' #= X'", "by auto"], ["proof (state)\nthis:\n  X' #= X'\n\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  X' #= X'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "using Case1"], ["proof (prove)\nusing this:\n  X' #= X'\n  y = x'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "assume Case2: \"y \\<noteq> x'\""], ["proof (state)\nthis:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "hence \"qFresh xs y X'\""], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. qFresh xs y X'", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n\ngoal (1 subgoal):\n 1. qFresh xs y X'", "by blast"], ["proof (state)\nthis:\n  qFresh xs y X'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "then"], ["proof (chain)\npicking this:\n  qFresh xs y X'", "obtain Y' where \"X' #= Y'\" and \"qAFresh xs y Y'\""], ["proof (prove)\nusing this:\n  qFresh xs y X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using good' qFresh_imp_ex_qAFresh1"], ["proof (prove)\nusing this:\n  qFresh xs y X'\n  qGood X'\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and> ?X #= X' \\<and> qAFresh ?zs ?z X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  X' #= Y'\n  qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  X' #= Y'\n  qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "by auto"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "obtain Y' where alphaX'Y': \"X' #= Y'\" and\n                       yEqAFresh': \"y = x' \\<or> qAFresh xs y Y'\""], ["proof (prove)\nusing this:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; y = x' \\<or> qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"(X' #[[y \\<and> x']]_xs) #= (Y' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs", "using good'"], ["proof (prove)\nusing this:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n  qGood X'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"(Y #[[y \\<and> x]]_xs) #= (Y' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs", "using goodYyx alphaYXyx alphaXX'yx alpha_trans"], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n  qGood (Y #[[y \\<and> x]]_xs)\n  Y #[[y \\<and> x]]_xs #= X #[[y \\<and> x]]_xs\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X''; ?X #= ?X';\n   ?X' #= ?X''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X''\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs", "by blast"], ["proof (state)\nthis:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"alphaAbs_ex_equal_or_qAFresh xs x Y xs x' Y'\""], ["proof (prove)\nusing this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x Y xs x' Y'", "unfolding alphaAbs_ex_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. xs = xs \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y Y) \\<and>\n        (y = x' \\<or> qAFresh xs y Y') \\<and>\n        Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs)", "using yEqAFresh yEqAFresh'"], ["proof (prove)\nusing this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n  y = x \\<or> qAFresh xs y Y\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. xs = xs \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qAFresh xs y Y) \\<and>\n        (y = x' \\<or> qAFresh xs y Y') \\<and>\n        Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs)", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qAFresh xs x Y xs x' Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"qAbs xs x Y $= qAbs xs x' Y'\""], ["proof (prove)\nusing this:\n  alphaAbs_ex_equal_or_qAFresh xs x Y xs x' Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' Y'", "using goodY alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh[of Y xs x xs]"], ["proof (prove)\nusing this:\n  alphaAbs_ex_equal_or_qAFresh xs x Y xs x' Y'\n  qGood Y\n  qGood Y \\<Longrightarrow>\n  (qAbs xs x Y $= qAbs xs ?x' ?X') =\n  alphaAbs_ex_equal_or_qAFresh xs x Y xs ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' Y'", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have \"qAbs xs x X $= qAbs xs x Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x Y", "using alphaXY GOOD qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  X #= Y\n  qGood X\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x Y", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "{"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x Y\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have 1: \"Y' #= X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y' #= X'", "using alphaX'Y' alpha_sym"], ["proof (prove)\nusing this:\n  X' #= Y'\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. Y' #= X'", "by auto"], ["proof (state)\nthis:\n  Y' #= X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"qGood Y'\""], ["proof (prove)\nusing this:\n  Y' #= X'\n\ngoal (1 subgoal):\n 1. qGood Y'", "using good' alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  Y' #= X'\n  qGood X'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood Y'", "by auto"], ["proof (state)\nthis:\n  qGood Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "hence \"qAbs xs x' Y' $= qAbs xs x' X'\""], ["proof (prove)\nusing this:\n  qGood Y'\n\ngoal (1 subgoal):\n 1. qAbs xs x' Y' $= qAbs xs x' X'", "using 1 GOOD qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood Y'\n  Y' #= X'\n  qGood X\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x' Y' $= qAbs xs x' X'", "by fastforce"], ["proof (state)\nthis:\n  qAbs xs x' Y' $= qAbs xs x' X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "}"], ["proof (state)\nthis:\n  qAbs xs x' Y' $= qAbs xs x' X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x' Y' $= qAbs xs x' X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "have \"qGoodAbs(qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "using GOOD"], ["proof (prove)\nusing this:\n  qGood X\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x Y $= qAbs xs x' Y'\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' Y' $= qAbs xs x' X'\n  qGoodAbs (qAbs xs x X)", "have \"qAbs xs x X $= qAbs xs x' X'\""], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' Y'\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' Y' $= qAbs xs x' X'\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' X'", "using alphaAbs_trans_twice"], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' Y'\n  qAbs xs x X $= qAbs xs x Y\n  qAbs xs x' Y' $= qAbs xs x' X'\n  qGoodAbs (qAbs xs x X)\n  \\<lbrakk>qGoodAbs ?A \\<or>\n           qGoodAbs ?A' \\<or> qGoodAbs ?A'' \\<or> qGoodAbs ?A''';\n   ?A $= ?A'; ?A' $= ?A''; ?A'' $= ?A'''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A'''\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs x' X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "thus ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs x' X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "using xs"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs x' X'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X'", "by simp"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "let ?Middle = \"alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs"], ["proof (prove)\nusing this:\n  qGood X\n  \\<lbrakk>qGood ?X;\n   alphaAbs_ex_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Middle\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "have \"?Middle \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "using\n  alphaAbs_ex_equal_or_qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  alphaAbs_ex_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_ex_equal_or_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n        (xs = xs' \\<and>\n         (\\<exists> y. (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X') \\<and>\n               (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_equal_or_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       (y = x \\<or> qFresh xs y X) \\<and>\n       (y = x' \\<or> qFresh xs y X') \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       (y = x \\<or> qFresh xs y X) \\<and>\n       (y = x' \\<or> qFresh xs y X') \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "let ?Middle1 = \"alphaAbs_ex_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "let ?Middle2 = \"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_ex_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Middle1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "have \"?Middle1 \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_qFresh xs x X xs' x' X'", "using alphaAbs_ex_qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  alphaAbs_ex_qAFresh ?xs ?x ?X ?xs' ?x' ?X' \\<Longrightarrow>\n  alphaAbs_ex_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_qFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Middle2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_qFresh_def alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "have \"?Middle2 \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs"], ["proof (prove)\nusing this:\n  qGood X\n  \\<lbrakk>qGood ?X;\n   alphaAbs_ex_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qFresh xs x X xs' x' X'\n  alphaAbs_ex_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_qFresh xs x X xs' x' X'\n  alphaAbs_ex_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_ex_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n        (xs = xs' \\<and>\n         (\\<exists> y. qFresh xs y X \\<and> qFresh xs y X' \\<and>\n               (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_ex_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_ex_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_ex_qFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       qFresh xs y X \\<and>\n       qFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       qFresh xs y X \\<and>\n       qFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "let ?Left = \"qAbs xs x X $= qAbs xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "let ?Middle1 = \"alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "let ?Middle2 = \"alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Middle1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qAFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qAFresh xs y X \\<and>\n        qAFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "have \"?Middle1 \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "using alphaAbs_ex_distinct_qAFresh_imp_qFresh"], ["proof (prove)\nusing this:\n  alphaAbs_ex_distinct_qAFresh ?xs ?x ?X ?xs' ?x' ?X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Middle2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'", "unfolding alphaAbs_ex_distinct_qFresh_def alphaAbs_ex_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<exists>y.\n        y \\<notin> {x, x'} \\<and>\n        qFresh xs y X \\<and>\n        qFresh xs y X' \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<exists>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<and>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "have \"?Middle2 \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_ex_equal_or_qFresh_imp_alphaAbs_qAbs"], ["proof (prove)\nusing this:\n  qGood X\n  \\<lbrakk>qGood ?X;\n   alphaAbs_ex_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_ex_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_ex_distinct_qFresh:\nassumes GOOD: \"qGood X\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n        (xs = xs' \\<and>\n         (\\<exists> y. y \\<notin> {x, x'} \\<and> qFresh xs y X \\<and> qFresh xs y X' \\<and>\n               (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_ex_distinct_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood ?X \\<Longrightarrow>\n  (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n  alphaAbs_ex_distinct_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_ex_distinct_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_ex_distinct_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_ex_distinct_qFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y X \\<and>\n       qFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<exists>y.\n         y \\<notin> {x, x'} \\<and>\n         qFresh xs y X \\<and>\n         qFresh xs y X' \\<and>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<exists>y.\n       y \\<notin> {x, x'} \\<and>\n       qFresh xs y X \\<and>\n       qFresh xs y X' \\<and>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "have \"qGoodAbs(qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "by auto"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "hence \"qGoodAbs(qAbs xs' x' X')\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs' x' X')", "using assms alphaAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x X)\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs' x' X')", "by blast"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs' x' X')\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "hence GOOD: \"qGood X \\<and> qGood X'\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs' x' X')\n\ngoal (1 subgoal):\n 1. qGood X \\<and> qGood X'", "using assms"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs' x' X')\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. qGood X \\<and> qGood X'", "by auto"], ["proof (state)\nthis:\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "have xs: \"xs = xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs'", "using assms"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs'", "by auto"], ["proof (state)\nthis:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "unfolding alphaAbs_all_equal_or_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "using xs"], ["proof (prove)\nusing this:\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof(intro conjI impI allI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "assume yEqFresh: \"(y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\""], ["proof (state)\nthis:\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"\\<exists> Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "proof(cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "assume Case1: \"y = x\""], ["proof (state)\nthis:\n  y = x\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "hence \"X #= X\""], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. X #= X", "using GOOD alpha_refl"], ["proof (prove)\nusing this:\n  y = x\n  qGood X \\<and> qGood X'\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. X #= X", "by auto"], ["proof (state)\nthis:\n  X #= X\n\ngoal (2 subgoals):\n 1. y = x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n 2. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #= X\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "using Case1"], ["proof (prove)\nusing this:\n  X #= X\n  y = x\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "assume Case2: \"y \\<noteq> x\""], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "hence \"qFresh xs y X\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n\ngoal (1 subgoal):\n 1. qFresh xs y X", "by blast"], ["proof (state)\nthis:\n  qFresh xs y X\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "then"], ["proof (chain)\npicking this:\n  qFresh xs y X", "obtain Y where \"X #= Y\" and \"qAFresh xs y Y\""], ["proof (prove)\nusing this:\n  qFresh xs y X\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD qFresh_imp_ex_qAFresh1"], ["proof (prove)\nusing this:\n  qFresh xs y X\n  qGood X \\<and> qGood X'\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and> ?X #= X' \\<and> qAFresh ?zs ?z X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X #= Y\n  qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X #= Y\n  qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)", "obtain Y where alphaXY: \"X #= Y\" and yEqAFresh: \"y = x \\<or> qAFresh xs y Y\""], ["proof (prove)\nusing this:\n  \\<exists>Y. X #= Y \\<and> (y = x \\<or> qAFresh xs y Y)\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>X #= Y; y = x \\<or> qAFresh xs y Y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence alphaXYyx: \"(X #[[y \\<and> x]]_xs) #= (Y #[[y \\<and> x]]_xs)\""], ["proof (prove)\nusing this:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs", "using GOOD"], ["proof (prove)\nusing this:\n  X #= Y\n  y = x \\<or> qAFresh xs y Y\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have goodY: \"qGood Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood Y", "using GOOD alphaXY alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n  X #= Y\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood Y", "by auto"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "(*  *)"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"\\<exists> Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "proof(cases \"y = x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "assume Case1: \"y = x'\""], ["proof (state)\nthis:\n  y = x'\n\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "hence \"X' #= X'\""], ["proof (prove)\nusing this:\n  y = x'\n\ngoal (1 subgoal):\n 1. X' #= X'", "using GOOD alpha_refl"], ["proof (prove)\nusing this:\n  y = x'\n  qGood X \\<and> qGood X'\n  qGood ?X \\<Longrightarrow> ?X #= ?X\n\ngoal (1 subgoal):\n 1. X' #= X'", "by auto"], ["proof (state)\nthis:\n  X' #= X'\n\ngoal (2 subgoals):\n 1. y = x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n 2. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  X' #= X'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "using Case1"], ["proof (prove)\nusing this:\n  X' #= X'\n  y = x'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "assume Case2: \"y \\<noteq> x'\""], ["proof (state)\nthis:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "hence \"qFresh xs y X'\""], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n\ngoal (1 subgoal):\n 1. qFresh xs y X'", "using yEqFresh"], ["proof (prove)\nusing this:\n  y \\<noteq> x'\n  (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X')\n\ngoal (1 subgoal):\n 1. qFresh xs y X'", "by blast"], ["proof (state)\nthis:\n  qFresh xs y X'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "then"], ["proof (chain)\npicking this:\n  qFresh xs y X'", "obtain Y' where \"X' #= Y'\" and \"qAFresh xs y Y'\""], ["proof (prove)\nusing this:\n  qFresh xs y X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using GOOD qFresh_imp_ex_qAFresh1"], ["proof (prove)\nusing this:\n  qFresh xs y X'\n  qGood X \\<and> qGood X'\n  \\<lbrakk>qGood ?X; qFresh ?zs ?z ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X'.\n                       qGood X' \\<and> ?X #= X' \\<and> qAFresh ?zs ?z X'\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X' #= Y'\n  qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. y \\<noteq> x' \\<Longrightarrow>\n    \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  X' #= Y'\n  qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "by auto"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')", "obtain Y' where alphaX'Y': \"X' #= Y'\" and\n                         yEqAFresh': \"y = x' \\<or> qAFresh xs y Y'\""], ["proof (prove)\nusing this:\n  \\<exists>Y'. X' #= Y' \\<and> (y = x' \\<or> qAFresh xs y Y')\n\ngoal (1 subgoal):\n 1. (\\<And>Y'.\n        \\<lbrakk>X' #= Y'; y = x' \\<or> qAFresh xs y Y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"(X' #[[y \\<and> x']]_xs) #= (Y' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs", "using GOOD"], ["proof (prove)\nusing this:\n  X' #= Y'\n  y = x' \\<or> qAFresh xs y Y'\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs", "by (auto simp add: qSwap_preserves_alpha)"], ["proof (state)\nthis:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence alphaY'X'yx': \"(Y' #[[y \\<and> x']]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. Y' #[[y \\<and> x']]_xs #= X' #[[y \\<and> x']]_xs", "using alpha_sym"], ["proof (prove)\nusing this:\n  X' #[[y \\<and> x']]_xs #= Y' #[[y \\<and> x']]_xs\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. Y' #[[y \\<and> x']]_xs #= X' #[[y \\<and> x']]_xs", "by auto"], ["proof (state)\nthis:\n  Y' #[[y \\<and> x']]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have goodY': \"qGood Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood Y'", "using GOOD alphaX'Y' alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n  X' #= Y'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood Y'", "by auto"], ["proof (state)\nthis:\n  qGood Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "(*  *)"], ["proof (state)\nthis:\n  qGood Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have 1: \"Y #= X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y #= X", "using alphaXY alpha_sym"], ["proof (prove)\nusing this:\n  X #= Y\n  ?X #= ?X' \\<Longrightarrow> ?X' #= ?X\n\ngoal (1 subgoal):\n 1. Y #= X", "by auto"], ["proof (state)\nthis:\n  Y #= X\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"qGood Y\""], ["proof (prove)\nusing this:\n  Y #= X\n\ngoal (1 subgoal):\n 1. qGood Y", "using GOOD alpha_preserves_qGood"], ["proof (prove)\nusing this:\n  Y #= X\n  qGood X \\<and> qGood X'\n  ?X #= ?X' \\<Longrightarrow> qGood ?X = qGood ?X'\n\ngoal (1 subgoal):\n 1. qGood Y", "by auto"], ["proof (state)\nthis:\n  qGood Y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence 2: \"qAbs xs x Y $= qAbs xs x X\""], ["proof (prove)\nusing this:\n  qGood Y\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x X", "using 1 GOOD qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  qGood Y\n  Y #= X\n  qGood X \\<and> qGood X'\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x X", "by blast"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x X\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "moreover"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x X\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"qAbs xs x' X' $= qAbs xs x' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x' X' $= qAbs xs x' Y'", "using alphaX'Y' GOOD qAbs_preserves_alpha"], ["proof (prove)\nusing this:\n  X' #= Y'\n  qGood X \\<and> qGood X'\n  \\<lbrakk>?X #= ?X'; qGood ?X \\<or> qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> qAbs ?xs ?x ?X $= qAbs ?xs ?x ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x' X' $= qAbs xs x' Y'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x' X' $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "moreover"], ["proof (state)\nthis:\n  qAbs xs x' X' $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "{"], ["proof (state)\nthis:\n  qAbs xs x' X' $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"qGoodAbs(qAbs xs x X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "using GOOD"], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x X)", "by simp"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"qGoodAbs(qAbs xs x Y)\""], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x X)\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x Y)", "using 2 alphaAbs_preserves_qGoodAbs"], ["proof (prove)\nusing this:\n  qGoodAbs (qAbs xs x X)\n  qAbs xs x Y $= qAbs xs x X\n  ?A $= ?A' \\<Longrightarrow> qGoodAbs ?A = qGoodAbs ?A'\n\ngoal (1 subgoal):\n 1. qGoodAbs (qAbs xs x Y)", "by fastforce"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x Y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "}"], ["proof (state)\nthis:\n  qGoodAbs (qAbs xs x Y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x Y $= qAbs xs x X\n  qAbs xs x' X' $= qAbs xs x' Y'\n  qGoodAbs (qAbs xs x Y)", "have \"qAbs xs x Y $= qAbs xs x' Y'\""], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x X\n  qAbs xs x' X' $= qAbs xs x' Y'\n  qGoodAbs (qAbs xs x Y)\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' Y'", "using assms xs alphaAbs_trans_twice"], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x X\n  qAbs xs x' X' $= qAbs xs x' Y'\n  qGoodAbs (qAbs xs x Y)\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  xs = xs'\n  \\<lbrakk>qGoodAbs ?A \\<or>\n           qGoodAbs ?A' \\<or> qGoodAbs ?A'' \\<or> qGoodAbs ?A''';\n   ?A $= ?A'; ?A' $= ?A''; ?A'' $= ?A'''\\<rbrakk>\n  \\<Longrightarrow> ?A $= ?A'''\n\ngoal (1 subgoal):\n 1. qAbs xs x Y $= qAbs xs x' Y'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x Y $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"alphaAbs_all_equal_or_qAFresh xs x Y xs x' Y'\""], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' Y'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x Y xs x' Y'", "using goodY goodY' alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qAbs xs x Y $= qAbs xs x' Y'\n  qGood Y\n  qGood Y'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x Y xs x' Y'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x Y xs x' Y'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "hence \"(Y #[[y \\<and> x]]_xs) #= (Y' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qAFresh xs x Y xs x' Y'\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs", "unfolding alphaAbs_all_equal_or_qAFresh_def"], ["proof (prove)\nusing this:\n  xs = xs \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y Y) \\<and>\n      (y = x' \\<or> qAFresh xs y Y') \\<longrightarrow>\n      Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs", "using yEqAFresh yEqAFresh'"], ["proof (prove)\nusing this:\n  xs = xs \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qAFresh xs y Y) \\<and>\n      (y = x' \\<or> qAFresh xs y Y') \\<longrightarrow>\n      Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs)\n  y = x \\<or> qAFresh xs y Y\n  y = x' \\<or> qAFresh xs y Y'\n\ngoal (1 subgoal):\n 1. Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs", "by auto"], ["proof (state)\nthis:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "moreover"], ["proof (state)\nthis:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "have \"qGood (X #[[y \\<and> x]]_xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "using GOOD qSwap_preserves_qGood"], ["proof (prove)\nusing this:\n  qGood X \\<and> qGood X'\n  qGood (?X #[[?x \\<and> ?y]]_?zs) = qGood ?X\n\ngoal (1 subgoal):\n 1. qGood (X #[[y \\<and> x]]_xs)", "by auto"], ["proof (state)\nthis:\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>xs = xs';\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X')\\<rbrakk>\n       \\<Longrightarrow> X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "ultimately"], ["proof (chain)\npicking this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n  qGood (X #[[y \\<and> x]]_xs)", "show \"(X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)\""], ["proof (prove)\nusing this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n  qGood (X #[[y \\<and> x]]_xs)\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "using alphaXYyx alphaY'X'yx' alpha_trans_twice"], ["proof (prove)\nusing this:\n  Y #[[y \\<and> x]]_xs #= Y' #[[y \\<and> x']]_xs\n  qGood (X #[[y \\<and> x]]_xs)\n  X #[[y \\<and> x]]_xs #= Y #[[y \\<and> x]]_xs\n  Y' #[[y \\<and> x']]_xs #= X' #[[y \\<and> x']]_xs\n  \\<lbrakk>qGood ?X \\<or> qGood ?X' \\<or> qGood ?X'' \\<or> qGood ?X''';\n   ?X #= ?X'; ?X' #= ?X''; ?X'' #= ?X'''\\<rbrakk>\n  \\<Longrightarrow> ?X #= ?X'''\n\ngoal (1 subgoal):\n 1. X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs", "by blast"], ["proof (state)\nthis:\n  X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_imp_all_equal_or_qFresh:\nassumes \"qGood X\" and \"(qAbs xs x X $= qAbs xs' x' X')\"\nshows\n\"(xs = xs' \\<and>\n  (\\<forall> y. (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "have \"alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "unfolding alphaAbs_all_equal_or_qFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qFresh xs y X) \\<and>\n      (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "."], ["proof (state)\nthis:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      (y = x \\<or> qFresh xs y X) \\<and>\n      (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "let ?Left = \"(qAbs xs x X $= qAbs xs' x' X')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "let ?Middle = \"alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Middle\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "using alphaAbs_all_equal_or_qFresh_imp_qAFresh"], ["proof (prove)\nusing this:\n  alphaAbs_all_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "have \"?Middle ==> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_equal_or_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_all_equal_or_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       (xs = xs' \\<and>\n        (\\<forall> y. (y = x \\<or> qFresh xs y X) \\<and> (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n              (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_equal_or_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_all_equal_or_qFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qFresh xs y X) \\<and>\n       (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         (y = x \\<or> qFresh xs y X) \\<and>\n         (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       (y = x \\<or> qFresh xs y X) \\<and>\n       (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_imp_alphaAbs_all_qFresh:\nassumes \"qGood X\" and \"qAbs xs x X $= qAbs xs' x' X'\"\nshows \"alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Left = \"(qAbs xs x X $= qAbs xs' x' X')\""], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Middle = \"alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Middle\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_equal_or_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_equal_or_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_equal_or_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "have \"?Middle \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qFresh xs x X xs' x' X'", "unfolding alphaAbs_all_equal_or_qFresh_def alphaAbs_all_qFresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        (y = x \\<or> qFresh xs y X) \\<and>\n        (y = x' \\<or> qFresh xs y X') \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs) \\<Longrightarrow>\n    xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "by auto"], ["proof (state)\nthis:\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "using assms"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X'\n  alphaAbs_all_equal_or_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_imp_all_qFresh:\nassumes \"qGood X\" and \"(qAbs xs x X $= qAbs xs' x' X')\"\nshows\n\"(xs = xs' \\<and>\n  (\\<forall> y. qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "have \"alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qAbs xs x X $= qAbs xs' x' X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "unfolding alphaAbs_all_qFresh_def"], ["proof (prove)\nusing this:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal (1 subgoal):\n 1. xs = xs' \\<and>\n    (\\<forall>y.\n        qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n        X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)", "."], ["proof (state)\nthis:\n  xs = xs' \\<and>\n  (\\<forall>y.\n      qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n      X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphaAbs_qAbs_iff_alphaAbs_all_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Left = \"(qAbs xs x X $= qAbs xs' x' X')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Middle = \"alphaAbs_all_qAFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "let ?Right = \"alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "have \"?Left \\<Longrightarrow> ?Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_imp_alphaAbs_all_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X'\\<rbrakk>\n  \\<Longrightarrow> alphaAbs_all_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "have \"?Right \\<Longrightarrow> ?Middle\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "using alphaAbs_all_qFresh_imp_qAFresh"], ["proof (prove)\nusing this:\n  alphaAbs_all_qFresh ?xs ?x ?X ?xs' ?x' ?X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n    alphaAbs_all_qAFresh xs x X xs' x' X'", "by fastforce"], ["proof (state)\nthis:\n  alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "moreover"], ["proof (state)\nthis:\n  alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "have \"?Middle \\<Longrightarrow> ?Left\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_qAFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_qAFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n    qAbs xs x X $= qAbs xs' x' X'", "by blast"], ["proof (state)\nthis:\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "ultimately"], ["proof (chain)\npicking this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n  alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'", "show ?thesis"], ["proof (prove)\nusing this:\n  qAbs xs x X $= qAbs xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qFresh xs x X xs' x' X'\n  alphaAbs_all_qFresh xs x X xs' x' X' \\<Longrightarrow>\n  alphaAbs_all_qAFresh xs x X xs' x' X'\n  alphaAbs_all_qAFresh xs x X xs' x' X' \\<Longrightarrow>\n  qAbs xs x X $= qAbs xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary alphaAbs_qAbs_iff_all_qFresh:\nassumes \"qGood X\" and \"qGood X'\"\nshows \"(qAbs xs x X $= qAbs xs' x' X') =\n       (xs = xs' \\<and>\n        (\\<forall> y. qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n              (X #[[y \\<and> x]]_xs) #= (X' #[[y \\<and> x']]_xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "have \"(qAbs xs x X $= qAbs xs' x' X') =\n        alphaAbs_all_qFresh xs x X xs' x' X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "using assms alphaAbs_qAbs_iff_alphaAbs_all_qFresh"], ["proof (prove)\nusing this:\n  qGood X\n  qGood X'\n  \\<lbrakk>qGood ?X; qGood ?X'\\<rbrakk>\n  \\<Longrightarrow> (qAbs ?xs ?x ?X $= qAbs ?xs' ?x' ?X') =\n                    alphaAbs_all_qFresh ?xs ?x ?X ?xs' ?x' ?X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'", "by blast"], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') = alphaAbs_all_qFresh xs x X xs' x' X'\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "unfolding alphaAbs_all_qFresh_def"], ["proof (prove)\nusing this:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal (1 subgoal):\n 1. (qAbs xs x X $= qAbs xs' x' X') =\n    (xs = xs' \\<and>\n     (\\<forall>y.\n         qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n         X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))", "."], ["proof (state)\nthis:\n  (qAbs xs x X $= qAbs xs' x' X') =\n  (xs = xs' \\<and>\n   (\\<forall>y.\n       qFresh xs y X \\<and> qFresh xs y X' \\<longrightarrow>\n       X #[[y \\<and> x]]_xs #= X' #[[y \\<and> x']]_xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context FixVars *)"], ["", "end"]]}