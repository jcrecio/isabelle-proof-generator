{"file_name": "/home/qj213/afp-2021-10-22/thys/Routing/Linux_Router.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Routing", "problem_names": ["lemma rtr_nomac_e1:\n  fixes pi\n\tassumes \"simple_linux_router rt fw mlf ifl pi = Some po\"\n\tassumes \"simple_linux_router_nol12 rt fw pi = Some po'\"\n\tshows \"\\<exists>x. po = po'\\<lparr>p_l2dst := x\\<rparr>\"", "lemma rtr_nomac_e2:\n  fixes pi\n\tassumes \"simple_linux_router rt fw mlf ifl pi = Some po\"\n\tshows \"\\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'\"", "lemma rtr_nomac_e3:\n  fixes pi\n\tassumes \"simple_linux_router_nol12 rt fw pi = Some po\"\n\tassumes \"iface_packet_check ifl pi = Some i \\<comment> \\<open>don't care\\<close>\"\n\tassumes \"mlf (fromMaybe (p_dst pi) (next_hop (routing_table_semantics rt (p_dst pi)))) = Some i2\"\n\tshows \"\\<exists>po'. simple_linux_router rt fw mlf ifl pi = Some po'\"", "lemma rtr_nomac_eq:\n  fixes pi\n\tassumes \"iface_packet_check ifl pi \\<noteq> None\"\n\tassumes \"mlf (fromMaybe (p_dst pi) (next_hop (routing_table_semantics rt (p_dst pi)))) \\<noteq> None\"\n\tshows \"\\<exists>x. map_option (\\<lambda>p. p\\<lparr>p_l2dst := x\\<rparr>) (simple_linux_router_nol12 rt fw pi) = simple_linux_router rt fw mlf ifl pi\""], "translations": [["", "lemma rtr_nomac_e1:\n  fixes pi\n\tassumes \"simple_linux_router rt fw mlf ifl pi = Some po\"\n\tassumes \"simple_linux_router_nol12 rt fw pi = Some po'\"\n\tshows \"\\<exists>x. po = po'\\<lparr>p_l2dst := x\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. po = po'\\<lparr>p_l2dst := x\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  simple_linux_router rt fw mlf ifl pi = Some po\n  simple_linux_router_nol12 rt fw pi = Some po'\n\ngoal (1 subgoal):\n 1. \\<exists>x. po = po'\\<lparr>p_l2dst := x\\<rparr>", "unfolding simple_linux_router_nol12_def simple_linux_router_def"], ["proof (prove)\nusing this:\n  iface_packet_check ifl pi \\<bind>\n  (\\<lambda>_.\n      let rd = routing_table_semantics rt (p_dst pi);\n          p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n          fd = simple_fw fw p\n      in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n          | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n         (\\<lambda>_.\n             let nh = fromMaybe (p_dst p) (next_hop rd)\n             in mlf nh \\<bind>\n                (\\<lambda>ma. Some (p\\<lparr>p_l2dst := ma\\<rparr>)))) =\n  Some po\n  (let rd = routing_table_semantics rt (p_dst pi);\n       p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n       fd = simple_fw fw p\n   in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n       | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n      (\\<lambda>_. Some p)) =\n  Some po'\n\ngoal (1 subgoal):\n 1. \\<exists>x. po = po'\\<lparr>p_l2dst := x\\<rparr>", "by(simp add: Let_def split: option.splits state.splits final_decision.splits Option.bind_splits if_splits) blast+"], ["", "lemma rtr_nomac_e2:\n  fixes pi\n\tassumes \"simple_linux_router rt fw mlf ifl pi = Some po\"\n\tshows \"\\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'", "using assms"], ["proof (prove)\nusing this:\n  simple_linux_router rt fw mlf ifl pi = Some po\n\ngoal (1 subgoal):\n 1. \\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'", "unfolding simple_linux_router_nol12_def simple_linux_router_def"], ["proof (prove)\nusing this:\n  iface_packet_check ifl pi \\<bind>\n  (\\<lambda>_.\n      let rd = routing_table_semantics rt (p_dst pi);\n          p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n          fd = simple_fw fw p\n      in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n          | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n         (\\<lambda>_.\n             let nh = fromMaybe (p_dst p) (next_hop rd)\n             in mlf nh \\<bind>\n                (\\<lambda>ma. Some (p\\<lparr>p_l2dst := ma\\<rparr>)))) =\n  Some po\n\ngoal (1 subgoal):\n 1. \\<exists>po'.\n       (let rd = routing_table_semantics rt (p_dst pi);\n            p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n            fd = simple_fw fw p\n        in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n            | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n           (\\<lambda>_. Some p)) =\n       Some po'", "by(clarsimp simp add: Let_def split: option.splits state.splits final_decision.splits Option.bind_splits if_splits)"], ["", "lemma rtr_nomac_e3:\n  fixes pi\n\tassumes \"simple_linux_router_nol12 rt fw pi = Some po\"\n\tassumes \"iface_packet_check ifl pi = Some i \\<comment> \\<open>don't care\\<close>\"\n\tassumes \"mlf (fromMaybe (p_dst pi) (next_hop (routing_table_semantics rt (p_dst pi)))) = Some i2\"\n\tshows \"\\<exists>po'. simple_linux_router rt fw mlf ifl pi = Some po'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>po'. simple_linux_router rt fw mlf ifl pi = Some po'", "using assms"], ["proof (prove)\nusing this:\n  simple_linux_router_nol12 rt fw pi = Some po\n  iface_packet_check ifl pi = Some i\n  mlf (fromMaybe (p_dst pi)\n        (next_hop (routing_table_semantics rt (p_dst pi)))) =\n  Some i2\n\ngoal (1 subgoal):\n 1. \\<exists>po'. simple_linux_router rt fw mlf ifl pi = Some po'", "unfolding simple_linux_router_nol12_def simple_linux_router_def"], ["proof (prove)\nusing this:\n  (let rd = routing_table_semantics rt (p_dst pi);\n       p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n       fd = simple_fw fw p\n   in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n       | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n      (\\<lambda>_. Some p)) =\n  Some po\n  iface_packet_check ifl pi = Some i\n  mlf (fromMaybe (p_dst pi)\n        (next_hop (routing_table_semantics rt (p_dst pi)))) =\n  Some i2\n\ngoal (1 subgoal):\n 1. \\<exists>po'.\n       iface_packet_check ifl pi \\<bind>\n       (\\<lambda>_.\n           let rd = routing_table_semantics rt (p_dst pi);\n               p = pi\\<lparr>p_oiface := output_iface rd\\<rparr>;\n               fd = simple_fw fw p\n           in (case fd of Decision FinalAllow \\<Rightarrow> Some ()\n               | Decision FinalDeny \\<Rightarrow> None) \\<bind>\n              (\\<lambda>_.\n                  let nh = fromMaybe (p_dst p) (next_hop rd)\n                  in mlf nh \\<bind>\n                     (\\<lambda>ma.\n                         Some (p\\<lparr>p_l2dst := ma\\<rparr>)))) =\n       Some po'", "by(clarsimp simp add: Let_def split: option.splits state.splits final_decision.splits Option.bind_splits if_splits)"], ["", "lemma rtr_nomac_eq:\n  fixes pi\n\tassumes \"iface_packet_check ifl pi \\<noteq> None\"\n\tassumes \"mlf (fromMaybe (p_dst pi) (next_hop (routing_table_semantics rt (p_dst pi)))) \\<noteq> None\"\n\tshows \"\\<exists>x. map_option (\\<lambda>p. p\\<lparr>p_l2dst := x\\<rparr>) (simple_linux_router_nol12 rt fw pi) = simple_linux_router rt fw mlf ifl pi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       map_option (p_l2dst_update (\\<lambda>_. x))\n        (simple_linux_router_nol12 rt fw pi) =\n       simple_linux_router rt fw mlf ifl pi", "proof(cases \"simple_linux_router_nol12 rt fw pi\"; cases \"simple_linux_router rt fw mlf ifl pi\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 4. \\<And>a aa.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "fix a b"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 4. \\<And>a aa.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "assume as: \"simple_linux_router rt fw mlf ifl pi = Some b\" \"simple_linux_router_nol12 rt fw pi = Some a\""], ["proof (state)\nthis:\n  simple_linux_router rt fw mlf ifl pi = Some b\n  simple_linux_router_nol12 rt fw pi = Some a\n\ngoal (4 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 4. \\<And>a aa.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "note rtr_nomac_e1[OF this]"], ["proof (state)\nthis:\n  \\<exists>x. b = a\\<lparr>p_l2dst := x\\<rparr>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 4. \\<And>a aa.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "with as"], ["proof (chain)\npicking this:\n  simple_linux_router rt fw mlf ifl pi = Some b\n  simple_linux_router_nol12 rt fw pi = Some a\n  \\<exists>x. b = a\\<lparr>p_l2dst := x\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  simple_linux_router rt fw mlf ifl pi = Some b\n  simple_linux_router_nol12 rt fw pi = Some a\n  \\<exists>x. b = a\\<lparr>p_l2dst := x\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       map_option (p_l2dst_update (\\<lambda>_. x))\n        (simple_linux_router_nol12 rt fw pi) =\n       simple_linux_router rt fw mlf ifl pi", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     map_option (p_l2dst_update (\\<lambda>_. x))\n      (simple_linux_router_nol12 rt fw pi) =\n     simple_linux_router rt fw mlf ifl pi\n\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "fix a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "assume as: \"simple_linux_router_nol12 rt fw pi = None\" \"simple_linux_router rt fw mlf ifl pi = Some a\""], ["proof (state)\nthis:\n  simple_linux_router_nol12 rt fw pi = None\n  simple_linux_router rt fw mlf ifl pi = Some a\n\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "note rtr_nomac_e2[OF as(2)]"], ["proof (state)\nthis:\n  \\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "with as(1)"], ["proof (chain)\npicking this:\n  simple_linux_router_nol12 rt fw pi = None\n  \\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'", "have False"], ["proof (prove)\nusing this:\n  simple_linux_router_nol12 rt fw pi = None\n  \\<exists>po'. simple_linux_router_nol12 rt fw pi = Some po'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n        simple_linux_router rt fw mlf ifl pi = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi\n 3. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       map_option (p_l2dst_update (\\<lambda>_. x))\n        (simple_linux_router_nol12 rt fw pi) =\n       simple_linux_router rt fw mlf ifl pi", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     map_option (p_l2dst_update (\\<lambda>_. x))\n      (simple_linux_router_nol12 rt fw pi) =\n     simple_linux_router rt fw mlf ifl pi\n\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "assume as: \"simple_linux_router_nol12 rt fw pi = Some a\" \"simple_linux_router rt fw mlf ifl pi = None\""], ["proof (state)\nthis:\n  simple_linux_router_nol12 rt fw pi = Some a\n  simple_linux_router rt fw mlf ifl pi = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "from \\<open>iface_packet_check ifl pi \\<noteq> None\\<close>"], ["proof (chain)\npicking this:\n  iface_packet_check ifl pi \\<noteq> None", "obtain i3 where \"iface_packet_check ifl pi = Some i3\""], ["proof (prove)\nusing this:\n  iface_packet_check ifl pi \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>i3.\n        iface_packet_check ifl pi = Some i3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  iface_packet_check ifl pi = Some i3\n\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "note rtr_nomac_e3[OF as(1) this] assms(2)"], ["proof (state)\nthis:\n  ?mlf\n   (fromMaybe (p_dst pi)\n     (next_hop (routing_table_semantics rt (p_dst pi)))) =\n  Some ?i2.0 \\<Longrightarrow>\n  \\<exists>po'. simple_linux_router rt fw ?mlf ifl pi = Some po'\n  mlf (fromMaybe (p_dst pi)\n        (next_hop (routing_table_semantics rt (p_dst pi)))) \\<noteq>\n  None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "with as(2)"], ["proof (chain)\npicking this:\n  simple_linux_router rt fw mlf ifl pi = None\n  ?mlf\n   (fromMaybe (p_dst pi)\n     (next_hop (routing_table_semantics rt (p_dst pi)))) =\n  Some ?i2.0 \\<Longrightarrow>\n  \\<exists>po'. simple_linux_router rt fw ?mlf ifl pi = Some po'\n  mlf (fromMaybe (p_dst pi)\n        (next_hop (routing_table_semantics rt (p_dst pi)))) \\<noteq>\n  None", "have False"], ["proof (prove)\nusing this:\n  simple_linux_router rt fw mlf ifl pi = None\n  ?mlf\n   (fromMaybe (p_dst pi)\n     (next_hop (routing_table_semantics rt (p_dst pi)))) =\n  Some ?i2.0 \\<Longrightarrow>\n  \\<exists>po'. simple_linux_router rt fw ?mlf ifl pi = Some po'\n  mlf (fromMaybe (p_dst pi)\n        (next_hop (routing_table_semantics rt (p_dst pi)))) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi\n 2. \\<And>a.\n       \\<lbrakk>simple_linux_router_nol12 rt fw pi = Some a;\n        simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            map_option (p_l2dst_update (\\<lambda>_. x))\n                             (simple_linux_router_nol12 rt fw pi) =\n                            simple_linux_router rt fw mlf ifl pi", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       map_option (p_l2dst_update (\\<lambda>_. x))\n        (simple_linux_router_nol12 rt fw pi) =\n       simple_linux_router rt fw mlf ifl pi", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     map_option (p_l2dst_update (\\<lambda>_. x))\n      (simple_linux_router_nol12 rt fw pi) =\n     simple_linux_router rt fw mlf ifl pi\n\ngoal (1 subgoal):\n 1. \\<lbrakk>simple_linux_router_nol12 rt fw pi = None;\n     simple_linux_router rt fw mlf ifl pi = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         map_option (p_l2dst_update (\\<lambda>_. x))\n                          (simple_linux_router_nol12 rt fw pi) =\n                         simple_linux_router rt fw mlf ifl pi", "qed simp"], ["", "end"]]}