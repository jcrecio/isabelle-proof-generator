{"file_name": "/home/qj213/afp-2021-10-22/thys/Safe_Distance/Evaluation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Safe_Distance", "problem_names": ["lemma compute_float_div_up[code]: \"float_div_up p i j = - float_div_down p (-i) j\"", "lemma compute_float_div_down[code]:\n  \"float_div_down prec m1 m2 = lapprox_rat (Suc prec) m1 m2\"", "lemma real_of_rat_Fract[simp]: \"real_of_rat (Fract a b) = a / b\"", "lemma [code]: \"float2_of_real p (Ratreal r) =\n  (let (a, b) = quotient_of r in\n  (float_div_down p a b, float_div_up p a b))\"", "lemma \"real_of_dec (m, e) = int_of_integer m * 10 powr (int_of_integer e)\"", "lemmas[code] = movement.p_def"], "translations": [["", "lemma compute_float_div_up[code]: \"float_div_up p i j = - float_div_down p (-i) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. float_div_up p i j = - float_div_down p (- i) j", "including float.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. float_div_up p i j = - float_div_down p (- i) j", "by transfer (simp add: real_div_up_def real_div_down_def truncate_up_eq_truncate_down)"], ["", "lemma compute_float_div_down[code]:\n  \"float_div_down prec m1 m2 = lapprox_rat (Suc prec) m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. float_div_down prec m1 m2 = lapprox_rat (Suc prec) m1 m2", "including float.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. float_div_down prec m1 m2 = lapprox_rat (Suc prec) m1 m2", "by transfer (simp add: real_div_down_def)"], ["", "definition real2_of_real :: \"nat \\<Rightarrow> real \\<Rightarrow> (real * real)\" where\n  \"real2_of_real p x = (truncate_down (Suc p) x, truncate_up (Suc p) x)\""], ["", "context includes float.lifting begin"], ["", "lift_definition float2_of_real :: \"nat \\<Rightarrow> real \\<Rightarrow> float \\<times> float\" is real2_of_real"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat real.\n       pred_prod (\\<lambda>x. x \\<in> float) (\\<lambda>x. x \\<in> float)\n        (real2_of_real nat real)", "by (auto simp: real2_of_real_def)"], ["", "end"], ["", "definition float2_opt_of_real :: \"nat \\<Rightarrow> real \\<Rightarrow> float interval option\" where\n  \"float2_opt_of_real prec x = Interval' (fst (float2_of_real prec x)) (snd (float2_of_real prec x))\""], ["", "hide_const (open) Fraction_Field.Fract"], ["", "lemma real_of_rat_Fract[simp]: \"real_of_rat (Fract a b) = a / b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_rat (Fract a b) = real_of_int a / real_of_int b", "by (simp add: Fract_of_int_quotient of_rat_divide)"], ["", "lemma [code]: \"float2_of_real p (Ratreal r) =\n  (let (a, b) = quotient_of r in\n  (float_div_down p a b, float_div_up p a b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. float2_of_real p (Ratreal r) =\n    (let (a, b) = quotient_of r\n     in (float_div_down p a b, float_div_up p a b))", "including float.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. float2_of_real p (Ratreal r) =\n    (let (a, b) = quotient_of r\n     in (float_div_down p a b, float_div_up p a b))", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p r.\n       real2_of_real p (Ratreal r) =\n       (let (a, b) = quotient_of r\n        in (real_div_down p a b, real_div_up p a b))", "apply (auto split: prod.split simp: real2_of_real_def real_div_down_def real_div_up_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p r x1 x2.\n       quotient_of r = (x1, x2) \\<Longrightarrow>\n       truncate_down (Suc p) (real_of_rat r) =\n       truncate_down (Suc p) (real_of_int x1 / real_of_int x2)\n 2. \\<And>p r x1 x2.\n       quotient_of r = (x1, x2) \\<Longrightarrow>\n       truncate_up (Suc p) (real_of_rat r) =\n       truncate_up (Suc p) (real_of_int x1 / real_of_int x2)", "apply (metis of_rat_divide of_rat_of_int_eq quotient_of_div)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun real_of_dec :: \"integer \\<times> integer \\<Rightarrow> real\" where\n  \"real_of_dec (m, e) =\n    real_of_int (int_of_integer m) *\n      (if e \\<ge> 0 then 10 ^ (nat_of_integer e) else inverse (10 ^ (nat (-(int_of_integer e)))))\""], ["", "lemma \"real_of_dec (m, e) = int_of_integer m * 10 powr (int_of_integer e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "have 1: \"e \\<ge> 0 \\<Longrightarrow> real (nat_of_integer e) = real_of_int (int_of_integer e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> e \\<Longrightarrow>\n    real (nat_of_integer e) = real_of_int (int_of_integer e)", "using less_eq_integer.rep_eq nat_of_integer.rep_eq"], ["proof (prove)\nusing this:\n  (?x \\<le> ?xa) = (int_of_integer ?x \\<le> int_of_integer ?xa)\n  nat_of_integer ?x = nat (int_of_integer ?x)\n\ngoal (1 subgoal):\n 1. 0 \\<le> e \\<Longrightarrow>\n    real (nat_of_integer e) = real_of_int (int_of_integer e)", "by auto"], ["proof (state)\nthis:\n  0 \\<le> e \\<Longrightarrow>\n  real (nat_of_integer e) = real_of_int (int_of_integer e)\n\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "have 2: \"e \\<le> 0 \\<Longrightarrow> real_of_int (int_of_integer e) = - real (nat (- int_of_integer e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<le> 0 \\<Longrightarrow>\n    real_of_int (int_of_integer e) = - real (nat (- int_of_integer e))", "using less_eq_integer.rep_eq"], ["proof (prove)\nusing this:\n  (?x \\<le> ?xa) = (int_of_integer ?x \\<le> int_of_integer ?xa)\n\ngoal (1 subgoal):\n 1. e \\<le> 0 \\<Longrightarrow>\n    real_of_int (int_of_integer e) = - real (nat (- int_of_integer e))", "by auto"], ["proof (state)\nthis:\n  e \\<le> 0 \\<Longrightarrow>\n  real_of_int (int_of_integer e) = - real (nat (- int_of_integer e))\n\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "using 1"], ["proof (prove)\nusing this:\n  0 \\<le> e \\<Longrightarrow>\n  real (nat_of_integer e) = real_of_int (int_of_integer e)\n\ngoal (1 subgoal):\n 1. real_of_dec (m, e) =\n    real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)", "apply (auto simp: powr_realpow[symmetric] divide_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 0 \\<le> e;\n     10 powr real_of_int (int_of_integer e) *\n     10 powr real (nat (- int_of_integer e)) \\<noteq>\n     1\\<rbrakk>\n    \\<Longrightarrow> int_of_integer m = 0", "apply (subst (asm) 2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> 0 \\<le> e \\<Longrightarrow> e \\<le> 0\n 2. \\<lbrakk>\\<not> 0 \\<le> e;\n     10 powr - real (nat (- int_of_integer e)) *\n     10 powr real (nat (- int_of_integer e)) \\<noteq>\n     1\\<rbrakk>\n    \\<Longrightarrow> int_of_integer m = 0", "apply (auto simp: powr_add[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  real_of_dec (m, e) =\n  real_of_int (int_of_integer m) * 10 powr real_of_int (int_of_integer e)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Data Evaluation\\<close>"], ["", "definition trans6 where\n  \"trans6 c chk    se     ve     ae     so     vo     ao =\n            chk (c se) (c ve) (c ae) (c so) (c vo) (c ao)\""], ["", "definition checker_dec where \n  \"checker_dec chk p u = \n    trans6 (float2_opt_of_real (nat_of_integer u) o real_of_dec) (chk (nat_of_integer p))\""], ["", "definition \"checker_interval = checker_dec checker'\""], ["", "definition \"checker_symbolic = trans6 real_of_dec symbolic_checker\""], ["", "definition \"checker_rational = trans6 real_of_dec checker\""], ["", "lemmas[code] = movement.p_def"], ["", "ML \\<open>\n  exception InvalidArgument of string;\n\n  fun split_string s = String.fields (fn c => c = the (Char.fromString s))\n\n  fun dec_of_string s =\n    case split_string \".\" s\n    of [r] => (the (IntInf.fromString r), 0)\n    | [d1, d2] => (the (IntInf.fromString (d1 ^ d2)), ~ (String.size d2))\n    | _ => raise (InvalidArgument s)\n\n  fun check_string chk data =\n    case split_string \",\" data of\n      [_, so, _, ve, ae, _, vo, ao] => chk data (0, 0)\n        (dec_of_string ve) (dec_of_string ae) (dec_of_string so) (dec_of_string vo) (dec_of_string ao)\n    | _ => raise (InvalidArgument data)\n\\<close>"], ["", "text \\<open>The precision of the input data is roughly 12 and yields similar performance as Sturm\\<close>"], ["", "ML \\<open>\nval prec = 12\n\nlocal\n\nexception Result of int * int;\n\nfun check_line chk n l (y, i) =\n  let\n    val l = String.substring (l, 0, String.size l - 1)\n    val c = check_string chk l\n  in if i < n then (if c then y + 1 else y, i + 1) else raise Result (y, i) end\n\nin\n\nfun check_file chk path n =\n  File.fold_lines (check_line chk n) path (0, 0)\n    handle Result res => res;\n\nend\n\nval check_file_symbolic            = check_file (fn _ => \\<^code>\\<open>checker_symbolic\\<close>)\nfun check_file_interval prec uncer = check_file (fn _ => \\<^code>\\<open>checker_interval\\<close> prec uncer)\nval check_file_rational            = check_file (fn _ => \\<^code>\\<open>checker_rational\\<close>)\n\\<close>"], ["", "text \\<open>Number of data points:\n  \\<^item> data01: 1121215\n  \\<^item> data02: 1341135\n  \\<^item> data03: 1452656\n\\<close>"], ["", "ML \\<open>\n  val data01 = \\<^master_dir> + \\<^path>\\<open>data/data01.csv\\<close>\n  val data02 = \\<^master_dir> + \\<^path>\\<open>data/data02.csv\\<close>\n  val data03 = \\<^master_dir> + \\<^path>\\<open>data/data03.csv\\<close>\n\\<close>"], ["", "ML \\<open>\n    val t_start1 = Timing.start ();\n    val result1 = check_file_rational data01 100;\n    val t_end1 = Timing.result t_start1;\n    \\<^assert> (result1 = (96, 100));\n\\<close>"], ["", "ML \\<open>\n    val t_start2 = Timing.start ();\n    val result2 = check_file_rational data02 100;\n    val t_end2 = Timing.result t_start2;\n    \\<^assert> (result2 = (100, 100));\n\\<close>"], ["", "ML \\<open>\n    val t_start3 = Timing.start ();\n    val result3 = check_file_rational data03 100;\n    val t_end3 = Timing.result t_start3;\n    \\<^assert> (result3 = (76, 100));\n\\<close>"], ["", "text \\<open>Precision: 12, Uncertainty: 7 digits\\<close>"], ["", "ML \\<open>\\<^assert> (check_file_interval 12 7 data01 100 = (95, 100))\\<close>"], ["", "ML \\<open>\\<^assert> (check_file_rational data01 100 = (96, 100))\\<close>"], ["", "ML \\<open>\\<^assert> (check_file_symbolic data01 100 = (96, 100))\\<close>"], ["", "end"]]}